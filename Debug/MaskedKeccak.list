
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800a854  0800a854  0000b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad14  0800ad14  0000c088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ad14  0800ad14  0000bd14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad1c  0800ad1c  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad1c  0800ad1c  0000bd1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad20  0800ad20  0000bd20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800ad24  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000c088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000c088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa9b  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004247  00000000  00000000  00026b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0002ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010bc  00000000  00000000  0002c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005d16  00000000  00000000  0002d414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d484  00000000  00000000  0003312a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1af3  00000000  00000000  000505ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001220a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063d8  00000000  00000000  001220e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001284bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a83c 	.word	0x0800a83c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a83c 	.word	0x0800a83c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <get_random64>:
#include "global_rng.h"
#include "stm32f4xx_hal.h"

extern RNG_HandleTypeDef hrng;  // defined in your HAL setup

uint64_t get_random64(void) {
 800059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r1) != HAL_OK) {
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4815      	ldr	r0, [pc, #84]	@ (8000600 <get_random64+0x64>)
 80005aa:	f004 ff73 	bl	8005494 <HAL_RNG_GenerateRandomNumber>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <get_random64+0x1c>
        Error_Handler(); // or fail securely
 80005b4:	f000 fc4e 	bl	8000e54 <Error_Handler>
    }
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r2) != HAL_OK) {
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4810      	ldr	r0, [pc, #64]	@ (8000600 <get_random64+0x64>)
 80005be:	f004 ff69 	bl	8005494 <HAL_RNG_GenerateRandomNumber>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <get_random64+0x30>
        Error_Handler();
 80005c8:	f000 fc44 	bl	8000e54 <Error_Handler>
    }
    return ((uint64_t)r1 << 32) | r2;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	469a      	mov	sl, r3
 80005d2:	4693      	mov	fp, r2
 80005d4:	f04f 0200 	mov.w	r2, #0
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	4653      	mov	r3, sl
 80005de:	2200      	movs	r2, #0
 80005e0:	6839      	ldr	r1, [r7, #0]
 80005e2:	2000      	movs	r0, #0
 80005e4:	460c      	mov	r4, r1
 80005e6:	4605      	mov	r5, r0
 80005e8:	ea42 0804 	orr.w	r8, r2, r4
 80005ec:	ea43 0905 	orr.w	r9, r3, r5
 80005f0:	4642      	mov	r2, r8
 80005f2:	464b      	mov	r3, r9
}
 80005f4:	4610      	mov	r0, r2
 80005f6:	4619      	mov	r1, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000600:	20000140 	.word	0x20000140

08000604 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	b29a      	uxth	r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	4804      	ldr	r0, [pc, #16]	@ (800062c <_write+0x28>)
 800061c:	f005 f869 	bl	80056f2 <HAL_UART_Transmit>
    return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200001a8 	.word	0x200001a8

08000630 <boolean_mask>:
    printf("PASS: SHA3-512 masked output matches reference\n");
}



void boolean_mask(uint64_t out[MASKING_N], uint64_t value) {
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	b089      	sub	sp, #36	@ 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t tmp = value;
 800063c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000640:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < MASKING_N - 1; i++) {
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e01a      	b.n	8000680 <boolean_mask+0x50>
        out[i] = get_random64();  // MUST produce unique value each time
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	18d6      	adds	r6, r2, r3
 8000652:	f7ff ffa3 	bl	800059c <get_random64>
 8000656:	4602      	mov	r2, r0
 8000658:	460b      	mov	r3, r1
 800065a:	e9c6 2300 	strd	r2, r3, [r6]
        tmp ^= out[i];
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800066a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800066e:	ea80 0402 	eor.w	r4, r0, r2
 8000672:	ea81 0503 	eor.w	r5, r1, r3
 8000676:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 0; i < MASKING_N - 1; i++) {
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	2b02      	cmp	r3, #2
 8000684:	dde1      	ble.n	800064a <boolean_mask+0x1a>
    }
    out[MASKING_N - 1] = tmp;  // Final share fixes the XOR
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f103 0118 	add.w	r1, r3, #24
 800068c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000690:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000694:	bf00      	nop
 8000696:	3724      	adds	r7, #36	@ 0x24
 8000698:	46bd      	mov	sp, r7
 800069a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800069c <SecB2Aq>:
    } else {
        printf("PASS: A2B x = %lu\n", (uint32_t)x);
    }
}

void SecB2Aq(uint64_t *out, const uint64_t *in, size_t n, uint64_t q) {
 800069c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006a0:	b08f      	sub	sp, #60	@ 0x3c
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6178      	str	r0, [r7, #20]
 80006a6:	6139      	str	r1, [r7, #16]
 80006a8:	60fa      	str	r2, [r7, #12]
    // Recombine Boolean value
    uint64_t x = in[0];
 80006aa:	693b      	ldr	r3, [r7, #16]
 80006ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006b0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 1; i < n; i++) {
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006b8:	e010      	b.n	80006dc <SecB2Aq+0x40>
        x ^= in[i];  // Full 64-bit XOR
 80006ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	693a      	ldr	r2, [r7, #16]
 80006c0:	4413      	add	r3, r2
 80006c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80006ca:	ea80 0802 	eor.w	r8, r0, r2
 80006ce:	ea81 0903 	eor.w	r9, r1, r3
 80006d2:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
    for (size_t i = 1; i < n; i++) {
 80006d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006d8:	3301      	adds	r3, #1
 80006da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80006dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d3ea      	bcc.n	80006ba <SecB2Aq+0x1e>
    }

    x = x % q;  // Properly reduce into F_q
 80006e4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80006e8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80006ec:	f7ff fdc0 	bl	8000270 <__aeabi_uldivmod>
 80006f0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Generate additive shares of x in F_q
    uint64_t sum = 0;
 80006f4:	f04f 0200 	mov.w	r2, #0
 80006f8:	f04f 0300 	mov.w	r3, #0
 80006fc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (size_t i = 0; i < n - 1; i++) {
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	e023      	b.n	800074e <SecB2Aq+0xb2>
        out[i] = get_random64() % q;
 8000706:	f7ff ff49 	bl	800059c <get_random64>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	697a      	ldr	r2, [r7, #20]
 8000710:	18d6      	adds	r6, r2, r3
 8000712:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000716:	f7ff fdab 	bl	8000270 <__aeabi_uldivmod>
 800071a:	e9c6 2300 	strd	r2, r3, [r6]
        sum = (sum + out[i]) % q;
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	4413      	add	r3, r2
 8000726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800072a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800072e:	1886      	adds	r6, r0, r2
 8000730:	603e      	str	r6, [r7, #0]
 8000732:	eb41 0303 	adc.w	r3, r1, r3
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800073c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000740:	f7ff fd96 	bl	8000270 <__aeabi_uldivmod>
 8000744:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (size_t i = 0; i < n - 1; i++) {
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	3301      	adds	r3, #1
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3b01      	subs	r3, #1
 8000752:	69fa      	ldr	r2, [r7, #28]
 8000754:	429a      	cmp	r2, r3
 8000756:	d3d6      	bcc.n	8000706 <SecB2Aq+0x6a>
    }
    out[n - 1] = (x + q - sum) % q;
 8000758:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800075c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000760:	1884      	adds	r4, r0, r2
 8000762:	eb41 0503 	adc.w	r5, r1, r3
 8000766:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800076a:	ebb4 0a02 	subs.w	sl, r4, r2
 800076e:	eb65 0b03 	sbc.w	fp, r5, r3
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8000778:	3b01      	subs	r3, #1
 800077a:	00db      	lsls	r3, r3, #3
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	18d4      	adds	r4, r2, r3
 8000780:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000784:	4650      	mov	r0, sl
 8000786:	4659      	mov	r1, fp
 8000788:	f7ff fd72 	bl	8000270 <__aeabi_uldivmod>
 800078c:	e9c4 2300 	strd	r2, r3, [r4]
}
 8000790:	bf00      	nop
 8000792:	373c      	adds	r7, #60	@ 0x3c
 8000794:	46bd      	mov	sp, r7
 8000796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800079c <test_SecB2Aq>:





void test_SecB2Aq(uint64_t x, uint64_t q) {
 800079c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80007a0:	b09e      	sub	sp, #120	@ 0x78
 80007a2:	af02      	add	r7, sp, #8
 80007a4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80007a8:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t bshares[MASKING_N] = {0};
 80007ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007b0:	2220      	movs	r2, #32
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f009 fb6d 	bl	8009e94 <memset>
    uint64_t ashare[MASKING_N] = {0};
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f009 fb66 	bl	8009e94 <memset>

    // Boolean mask the input
    boolean_mask(bshares, x);
 80007c8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80007cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80007d0:	4608      	mov	r0, r1
 80007d2:	f7ff ff2d 	bl	8000630 <boolean_mask>

    uint64_t bsum = 0;
 80007d6:	f04f 0200 	mov.w	r2, #0
 80007da:	f04f 0300 	mov.w	r3, #0
 80007de:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    for (int i = 0; i < MASKING_N; i++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80007e6:	e011      	b.n	800080c <test_SecB2Aq+0x70>
        bsum ^= bshares[i];
 80007e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	3370      	adds	r3, #112	@ 0x70
 80007ee:	443b      	add	r3, r7
 80007f0:	3b40      	subs	r3, #64	@ 0x40
 80007f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80007fa:	ea80 0402 	eor.w	r4, r0, r2
 80007fe:	ea81 0503 	eor.w	r5, r1, r3
 8000802:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    for (int i = 0; i < MASKING_N; i++) {
 8000806:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000808:	3301      	adds	r3, #1
 800080a:	667b      	str	r3, [r7, #100]	@ 0x64
 800080c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800080e:	2b03      	cmp	r3, #3
 8000810:	ddea      	ble.n	80007e8 <test_SecB2Aq+0x4c>
    }
    printf("Boolean recombined value: %lu (0x%llx)\n", bsum, bsum);
 8000812:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000816:	e9cd 2300 	strd	r2, r3, [sp]
 800081a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800081e:	4829      	ldr	r0, [pc, #164]	@ (80008c4 <test_SecB2Aq+0x128>)
 8000820:	f009 f99a 	bl	8009b58 <iprintf>

    // Convert to arithmetic masking
    SecB2Aq(ashare, bshares, MASKING_N, q);
 8000824:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000828:	f107 0010 	add.w	r0, r7, #16
 800082c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000830:	e9cd 2300 	strd	r2, r3, [sp]
 8000834:	2204      	movs	r2, #4
 8000836:	f7ff ff31 	bl	800069c <SecB2Aq>

    // Recombine arithmetic result
    uint64_t sum = 0;
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (int i = 0; i < MASKING_N; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	657b      	str	r3, [r7, #84]	@ 0x54
 800084a:	e017      	b.n	800087c <test_SecB2Aq+0xe0>
        sum = (sum + ashare[i]) % q;
 800084c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	3370      	adds	r3, #112	@ 0x70
 8000852:	443b      	add	r3, r7
 8000854:	3b60      	subs	r3, #96	@ 0x60
 8000856:	e9d3 0100 	ldrd	r0, r1, [r3]
 800085a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800085e:	eb10 0802 	adds.w	r8, r0, r2
 8000862:	eb41 0903 	adc.w	r9, r1, r3
 8000866:	e9d7 2300 	ldrd	r2, r3, [r7]
 800086a:	4640      	mov	r0, r8
 800086c:	4649      	mov	r1, r9
 800086e:	f7ff fcff 	bl	8000270 <__aeabi_uldivmod>
 8000872:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    for (int i = 0; i < MASKING_N; i++) {
 8000876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000878:	3301      	adds	r3, #1
 800087a:	657b      	str	r3, [r7, #84]	@ 0x54
 800087c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800087e:	2b03      	cmp	r3, #3
 8000880:	dde4      	ble.n	800084c <test_SecB2Aq+0xb0>
    }

    if (sum != (x % q)) {
 8000882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000886:	e9d7 2300 	ldrd	r2, r3, [r7]
 800088a:	f7ff fcf1 	bl	8000270 <__aeabi_uldivmod>
 800088e:	4610      	mov	r0, r2
 8000890:	4619      	mov	r1, r3
 8000892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000896:	428b      	cmp	r3, r1
 8000898:	bf08      	it	eq
 800089a:	4282      	cmpeq	r2, r0
 800089c:	d007      	beq.n	80008ae <test_SecB2Aq+0x112>
        printf("FAIL: B2A x = %lu, recovered = %lu\n", (uint32_t)x, (uint32_t)sum);
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80008a2:	4619      	mov	r1, r3
 80008a4:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <test_SecB2Aq+0x12c>)
 80008a6:	f009 f957 	bl	8009b58 <iprintf>
        while (1);
 80008aa:	bf00      	nop
 80008ac:	e7fd      	b.n	80008aa <test_SecB2Aq+0x10e>
    } else {
        printf("PASS: B2A x = %lu\n", (uint32_t)x);
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	@ (80008cc <test_SecB2Aq+0x130>)
 80008b4:	f009 f950 	bl	8009b58 <iprintf>
    }
}
 80008b8:	bf00      	nop
 80008ba:	3770      	adds	r7, #112	@ 0x70
 80008bc:	46bd      	mov	sp, r7
 80008be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80008c2:	bf00      	nop
 80008c4:	0800ac20 	.word	0x0800ac20
 80008c8:	0800ac48 	.word	0x0800ac48
 80008cc:	0800ac6c 	.word	0x0800ac6c

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f000 fd63 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008da:	f000 f881 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008de:	f000 f9bb 	bl	8000c58 <MX_GPIO_Init>
  MX_I2C1_Init();
 80008e2:	f000 f8e7 	bl	8000ab4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80008e6:	f000 f913 	bl	8000b10 <MX_I2S3_Init>
  MX_SPI1_Init();
 80008ea:	f000 f955 	bl	8000b98 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80008ee:	f008 fca9 	bl	8009244 <MX_USB_HOST_Init>
  MX_RNG_Init();
 80008f2:	f000 f93d 	bl	8000b70 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80008f6:	f000 f985 	bl	8000c04 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b35      	ldr	r3, [pc, #212]	@ (80009d4 <main+0x104>)
 8000900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000902:	4a34      	ldr	r2, [pc, #208]	@ (80009d4 <main+0x104>)
 8000904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000908:	6353      	str	r3, [r2, #52]	@ 0x34
 800090a:	4b32      	ldr	r3, [pc, #200]	@ (80009d4 <main+0x104>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800090e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 8000916:	4830      	ldr	r0, [pc, #192]	@ (80009d8 <main+0x108>)
 8000918:	f004 fd92 	bl	8005440 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 800091c:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <main+0x10c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6898      	ldr	r0, [r3, #8]
 8000922:	2300      	movs	r3, #0
 8000924:	2202      	movs	r2, #2
 8000926:	2100      	movs	r1, #0
 8000928:	f009 f928 	bl	8009b7c <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_SecB2Aq(0, KYBER_Q);        // Edge case: zero
 800092c:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	f04f 0100 	mov.w	r1, #0
 800093c:	f7ff ff2e 	bl	800079c <test_SecB2Aq>
	  test_SecB2Aq(1, KYBER_Q);        // Smallest non-zero
 8000940:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000944:	f04f 0300 	mov.w	r3, #0
 8000948:	f04f 0001 	mov.w	r0, #1
 800094c:	f04f 0100 	mov.w	r1, #0
 8000950:	f7ff ff24 	bl	800079c <test_SecB2Aq>
	  test_SecB2Aq(123, KYBER_Q);      // Arbitrary small value
 8000954:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	f04f 007b 	mov.w	r0, #123	@ 0x7b
 8000960:	f04f 0100 	mov.w	r1, #0
 8000964:	f7ff ff1a 	bl	800079c <test_SecB2Aq>
	  test_SecB2Aq(456, KYBER_Q);      // Arbitrary mid-range value
 8000968:	f640 5201 	movw	r2, #3329	@ 0xd01
 800096c:	f04f 0300 	mov.w	r3, #0
 8000970:	f44f 70e4 	mov.w	r0, #456	@ 0x1c8
 8000974:	f04f 0100 	mov.w	r1, #0
 8000978:	f7ff ff10 	bl	800079c <test_SecB2Aq>
	  test_SecB2Aq(2048, KYBER_Q);     // Large value below q
 800097c:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000980:	f04f 0300 	mov.w	r3, #0
 8000984:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000988:	f04f 0100 	mov.w	r1, #0
 800098c:	f7ff ff06 	bl	800079c <test_SecB2Aq>
	  test_SecB2Aq(KYBER_Q - 1, KYBER_Q); // Edge case: max valid mod-q input
 8000990:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	f44f 6050 	mov.w	r0, #3328	@ 0xd00
 800099c:	f04f 0100 	mov.w	r1, #0
 80009a0:	f7ff fefc 	bl	800079c <test_SecB2Aq>
	  test_SecB2Aq(KYBER_Q, KYBER_Q);     // Wraparound: should be equivalent to 0
 80009a4:	f640 5201 	movw	r2, #3329	@ 0xd01
 80009a8:	f04f 0300 	mov.w	r3, #0
 80009ac:	f640 5001 	movw	r0, #3329	@ 0xd01
 80009b0:	f04f 0100 	mov.w	r1, #0
 80009b4:	f7ff fef2 	bl	800079c <test_SecB2Aq>
	  test_SecB2Aq(KYBER_Q + 123, KYBER_Q); // Wraparound case
 80009b8:	f640 5201 	movw	r2, #3329	@ 0xd01
 80009bc:	f04f 0300 	mov.w	r3, #0
 80009c0:	f640 507c 	movw	r0, #3452	@ 0xd7c
 80009c4:	f04f 0100 	mov.w	r1, #0
 80009c8:	f7ff fee8 	bl	800079c <test_SecB2Aq>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80009cc:	f008 fc60 	bl	8009290 <MX_USB_HOST_Process>
	  test_SecB2Aq(0, KYBER_Q);        // Edge case: zero
 80009d0:	bf00      	nop
 80009d2:	e7ab      	b.n	800092c <main+0x5c>
 80009d4:	40023800 	.word	0x40023800
 80009d8:	20000140 	.word	0x20000140
 80009dc:	20000038 	.word	0x20000038

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	@ 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	@ 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f009 fa50 	bl	8009e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b28      	ldr	r3, [pc, #160]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0c:	4a27      	ldr	r2, [pc, #156]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a14:	4b25      	ldr	r3, [pc, #148]	@ (8000aac <SystemClock_Config+0xcc>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a21      	ldr	r2, [pc, #132]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <SystemClock_Config+0xd0>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a50:	2308      	movs	r3, #8
 8000a52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a54:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a58:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4618      	mov	r0, r3
 8000a68:	f003 ff10 	bl	800488c <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a72:	f000 f9ef 	bl	8000e54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a76:	230f      	movs	r3, #15
 8000a78:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a82:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	2105      	movs	r1, #5
 8000a94:	4618      	mov	r0, r3
 8000a96:	f004 f971 	bl	8004d7c <HAL_RCC_ClockConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000aa0:	f000 f9d8 	bl	8000e54 <Error_Handler>
  }
}
 8000aa4:	bf00      	nop
 8000aa6:	3750      	adds	r7, #80	@ 0x50
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40007000 	.word	0x40007000

08000ab4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000aba:	4a13      	ldr	r2, [pc, #76]	@ (8000b08 <MX_I2C1_Init+0x54>)
 8000abc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ac0:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <MX_I2C1_Init+0x58>)
 8000ac2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ad2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ad6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_I2C1_Init+0x50>)
 8000af2:	f003 f8e7 	bl	8003cc4 <HAL_I2C_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 f9aa 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000a4 	.word	0x200000a4
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	000186a0 	.word	0x000186a0

08000b10 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b16:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <MX_I2S3_Init+0x58>)
 8000b18:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b20:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b28:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b34:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b38:	4a0c      	ldr	r2, [pc, #48]	@ (8000b6c <MX_I2S3_Init+0x5c>)
 8000b3a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_I2S3_Init+0x54>)
 8000b50:	f003 f9fc 	bl	8003f4c <HAL_I2S_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000b5a:	f000 f97b 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200000f8 	.word	0x200000f8
 8000b68:	40003c00 	.word	0x40003c00
 8000b6c:	00017700 	.word	0x00017700

08000b70 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b74:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <MX_RNG_Init+0x20>)
 8000b76:	4a07      	ldr	r2, [pc, #28]	@ (8000b94 <MX_RNG_Init+0x24>)
 8000b78:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <MX_RNG_Init+0x20>)
 8000b7c:	f004 fc60 	bl	8005440 <HAL_RNG_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000b86:	f000 f965 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000140 	.word	0x20000140
 8000b94:	50060800 	.word	0x50060800

08000b98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b9c:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000b9e:	4a18      	ldr	r2, [pc, #96]	@ (8000c00 <MX_SPI1_Init+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000ba4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ba8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bdc:	4b07      	ldr	r3, [pc, #28]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000be4:	220a      	movs	r2, #10
 8000be6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000be8:	4804      	ldr	r0, [pc, #16]	@ (8000bfc <MX_SPI1_Init+0x64>)
 8000bea:	f004 fca9 	bl	8005540 <HAL_SPI_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bf4:	f000 f92e 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000150 	.word	0x20000150
 8000c00:	40013000 	.word	0x40013000

08000c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <MX_USART2_UART_Init+0x50>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USART2_UART_Init+0x4c>)
 8000c3c:	f004 fd09 	bl	8005652 <HAL_UART_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c46:	f000 f905 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200001a8 	.word	0x200001a8
 8000c54:	40004400 	.word	0x40004400

08000c58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	@ 0x30
 8000c5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
 8000c6c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	4b72      	ldr	r3, [pc, #456]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a71      	ldr	r2, [pc, #452]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b6f      	ldr	r3, [pc, #444]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	4b6b      	ldr	r3, [pc, #428]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a6a      	ldr	r2, [pc, #424]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000c94:	f043 0304 	orr.w	r3, r3, #4
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b68      	ldr	r3, [pc, #416]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0304 	and.w	r3, r3, #4
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b64      	ldr	r3, [pc, #400]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a63      	ldr	r2, [pc, #396]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b61      	ldr	r3, [pc, #388]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a5c      	ldr	r2, [pc, #368]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b5a      	ldr	r3, [pc, #360]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	4b56      	ldr	r3, [pc, #344]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a55      	ldr	r2, [pc, #340]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b53      	ldr	r3, [pc, #332]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a4e      	ldr	r2, [pc, #312]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000d04:	f043 0308 	orr.w	r3, r3, #8
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000e3c <MX_GPIO_Init+0x1e4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	607b      	str	r3, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2108      	movs	r1, #8
 8000d1a:	4849      	ldr	r0, [pc, #292]	@ (8000e40 <MX_GPIO_Init+0x1e8>)
 8000d1c:	f000 fe84 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2101      	movs	r1, #1
 8000d24:	4847      	ldr	r0, [pc, #284]	@ (8000e44 <MX_GPIO_Init+0x1ec>)
 8000d26:	f000 fe7f 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000d30:	4845      	ldr	r0, [pc, #276]	@ (8000e48 <MX_GPIO_Init+0x1f0>)
 8000d32:	f000 fe79 	bl	8001a28 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d36:	2308      	movs	r3, #8
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	483c      	ldr	r0, [pc, #240]	@ (8000e40 <MX_GPIO_Init+0x1e8>)
 8000d4e:	f000 fccf 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000d52:	2301      	movs	r3, #1
 8000d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	4836      	ldr	r0, [pc, #216]	@ (8000e44 <MX_GPIO_Init+0x1ec>)
 8000d6a:	f000 fcc1 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	482e      	ldr	r0, [pc, #184]	@ (8000e44 <MX_GPIO_Init+0x1ec>)
 8000d8a:	f000 fcb1 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d92:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	482a      	ldr	r0, [pc, #168]	@ (8000e4c <MX_GPIO_Init+0x1f4>)
 8000da4:	f000 fca4 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000da8:	2304      	movs	r3, #4
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4825      	ldr	r0, [pc, #148]	@ (8000e50 <MX_GPIO_Init+0x1f8>)
 8000dbc:	f000 fc98 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000dc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481c      	ldr	r0, [pc, #112]	@ (8000e50 <MX_GPIO_Init+0x1f8>)
 8000dde:	f000 fc87 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000de2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000de6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4813      	ldr	r0, [pc, #76]	@ (8000e48 <MX_GPIO_Init+0x1f0>)
 8000dfc:	f000 fc78 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e00:	2320      	movs	r3, #32
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <MX_GPIO_Init+0x1f0>)
 8000e14:	f000 fc6c 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e1c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4804      	ldr	r0, [pc, #16]	@ (8000e40 <MX_GPIO_Init+0x1e8>)
 8000e2e:	f000 fc5f 	bl	80016f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e32:	bf00      	nop
 8000e34:	3730      	adds	r7, #48	@ 0x30
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400

08000e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e58:	b672      	cpsid	i
}
 8000e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <Error_Handler+0x8>

08000e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e76:	4b0d      	ldr	r3, [pc, #52]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	4a08      	ldr	r2, [pc, #32]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_MspInit+0x4c>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e9e:	2007      	movs	r0, #7
 8000ea0:	f000 fbe4 	bl	800166c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800

08000eb0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	@ (8000f34 <HAL_I2C_MspInit+0x84>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12c      	bne.n	8000f2c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <HAL_I2C_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a17      	ldr	r2, [pc, #92]	@ (8000f38 <HAL_I2C_MspInit+0x88>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <HAL_I2C_MspInit+0x88>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000eee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef4:	2312      	movs	r3, #18
 8000ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f00:	2304      	movs	r3, #4
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480c      	ldr	r0, [pc, #48]	@ (8000f3c <HAL_I2C_MspInit+0x8c>)
 8000f0c:	f000 fbf0 	bl	80016f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f20:	4b05      	ldr	r3, [pc, #20]	@ (8000f38 <HAL_I2C_MspInit+0x88>)
 8000f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	@ 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40005400 	.word	0x40005400
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	@ 0x38
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a31      	ldr	r2, [pc, #196]	@ (8001030 <HAL_I2S_MspInit+0xf0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d15a      	bne.n	8001026 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f70:	2301      	movs	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f74:	23c0      	movs	r3, #192	@ 0xc0
 8000f76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 f91b 	bl	80051bc <HAL_RCCEx_PeriphCLKConfig>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000f8c:	f7ff ff62 	bl	8000e54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <HAL_I2S_MspInit+0xf4>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	4a26      	ldr	r2, [pc, #152]	@ (8001034 <HAL_I2S_MspInit+0xf4>)
 8000f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa0:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc0:	f003 0301 	and.w	r3, r3, #1
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	4a18      	ldr	r2, [pc, #96]	@ (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fd2:	f043 0304 	orr.w	r3, r3, #4
 8000fd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd8:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <HAL_I2S_MspInit+0xf4>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fdc:	f003 0304 	and.w	r3, r3, #4
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000fe4:	2310      	movs	r3, #16
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480e      	ldr	r0, [pc, #56]	@ (8001038 <HAL_I2S_MspInit+0xf8>)
 8001000:	f000 fb76 	bl	80016f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001004:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001016:	2306      	movs	r3, #6
 8001018:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4806      	ldr	r0, [pc, #24]	@ (800103c <HAL_I2S_MspInit+0xfc>)
 8001022:	f000 fb65 	bl	80016f0 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	@ 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40003c00 	.word	0x40003c00
 8001034:	40023800 	.word	0x40023800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020800 	.word	0x40020800

08001040 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <HAL_RNG_MspInit+0x3c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10d      	bne.n	800106e <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_RNG_MspInit+0x40>)
 8001058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800105a:	4a09      	ldr	r2, [pc, #36]	@ (8001080 <HAL_RNG_MspInit+0x40>)
 800105c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001060:	6353      	str	r3, [r2, #52]	@ 0x34
 8001062:	4b07      	ldr	r3, [pc, #28]	@ (8001080 <HAL_RNG_MspInit+0x40>)
 8001064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	50060800 	.word	0x50060800
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	@ 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	@ (8001108 <HAL_SPI_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12b      	bne.n	80010fe <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b18      	ldr	r3, [pc, #96]	@ (800110c <HAL_SPI_MspInit+0x88>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a17      	ldr	r2, [pc, #92]	@ (800110c <HAL_SPI_MspInit+0x88>)
 80010b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <HAL_SPI_MspInit+0x88>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <HAL_SPI_MspInit+0x88>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a10      	ldr	r2, [pc, #64]	@ (800110c <HAL_SPI_MspInit+0x88>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <HAL_SPI_MspInit+0x88>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010de:	23e0      	movs	r3, #224	@ 0xe0
 80010e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ee:	2305      	movs	r3, #5
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <HAL_SPI_MspInit+0x8c>)
 80010fa:	f000 faf9 	bl	80016f0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40013000 	.word	0x40013000
 800110c:	40023800 	.word	0x40023800
 8001110:	40020000 	.word	0x40020000

08001114 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a19      	ldr	r2, [pc, #100]	@ (8001198 <HAL_UART_MspInit+0x84>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d12b      	bne.n	800118e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b18      	ldr	r3, [pc, #96]	@ (800119c <HAL_UART_MspInit+0x88>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a17      	ldr	r2, [pc, #92]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a10      	ldr	r2, [pc, #64]	@ (800119c <HAL_UART_MspInit+0x88>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b0e      	ldr	r3, [pc, #56]	@ (800119c <HAL_UART_MspInit+0x88>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800116e:	230c      	movs	r3, #12
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800117e:	2307      	movs	r3, #7
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4805      	ldr	r0, [pc, #20]	@ (80011a0 <HAL_UART_MspInit+0x8c>)
 800118a:	f000 fab1 	bl	80016f0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800118e:	bf00      	nop
 8001190:	3728      	adds	r7, #40	@ 0x28
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40004400 	.word	0x40004400
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <NMI_Handler+0x4>

080011ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <MemManage_Handler+0x4>

080011bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <UsageFault_Handler+0x4>

080011cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011fa:	f000 f923 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001208:	4802      	ldr	r0, [pc, #8]	@ (8001214 <OTG_FS_IRQHandler+0x10>)
 800120a:	f000 ff07 	bl	800201c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200005d4 	.word	0x200005d4

08001218 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
 8001228:	e00a      	b.n	8001240 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800122a:	f3af 8000 	nop.w
 800122e:	4601      	mov	r1, r0
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	b2ca      	uxtb	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3301      	adds	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	429a      	cmp	r2, r3
 8001246:	dbf0      	blt.n	800122a <_read+0x12>
  }

  return len;
 8001248:	687b      	ldr	r3, [r7, #4]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800127a:	605a      	str	r2, [r3, #4]
  return 0;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <_isatty>:

int _isatty(int file)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001292:	2301      	movs	r3, #1
}
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	@ (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	@ (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	@ (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4413      	add	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f008 fe30 	bl	8009f50 <__errno>
 80012f0:	4603      	mov	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	@ (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	4a05      	ldr	r2, [pc, #20]	@ (8001320 <_sbrk+0x64>)
 800130c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20020000 	.word	0x20020000
 800131c:	00000400 	.word	0x00000400
 8001320:	200001f0 	.word	0x200001f0
 8001324:	20000b00 	.word	0x20000b00

08001328 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800132c:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <SystemInit+0x20>)
 800132e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <SystemInit+0x20>)
 8001334:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001338:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000ed00 	.word	0xe000ed00

0800134c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001384 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001350:	f7ff ffea 	bl	8001328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	@ (8001388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	@ (800138c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	@ (8001390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	@ (8001398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137a:	f008 fdef 	bl	8009f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137e:	f7ff faa7 	bl	80008d0 <main>
  bx  lr    
 8001382:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001384:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001388:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800138c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001390:	0800ad24 	.word	0x0800ad24
  ldr r2, =_sbss
 8001394:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001398:	20000b00 	.word	0x20000b00

0800139c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	@ (80013e0 <HAL_Init+0x40>)
 80013aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b0:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <HAL_Init+0x40>)
 80013b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <HAL_Init+0x40>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f94f 	bl	800166c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f808 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fd44 	bl	8000e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023c00 	.word	0x40023c00

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <HAL_InitTick+0x54>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_InitTick+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f967 	bl	80016d6 <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 f92f 	bl	8001682 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	@ (8001440 <HAL_InitTick+0x5c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	20000008 	.word	0x20000008
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_IncTick+0x20>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <HAL_IncTick+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <HAL_IncTick+0x24>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008
 8001468:	200001f4 	.word	0x200001f4

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	@ (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200001f4 	.word	0x200001f4

08001484 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800148c:	f7ff ffee 	bl	800146c <HAL_GetTick>
 8001490:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d005      	beq.n	80014aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149e:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <HAL_Delay+0x44>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4413      	add	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014aa:	bf00      	nop
 80014ac:	f7ff ffde 	bl	800146c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d8f7      	bhi.n	80014ac <HAL_Delay+0x28>
  {
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000008 	.word	0x20000008

080014cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	@ (8001510 <__NVIC_SetPriorityGrouping+0x44>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <__NVIC_GetPriorityGrouping+0x18>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	0a1b      	lsrs	r3, r3, #8
 800151e:	f003 0307 	and.w	r3, r3, #7
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	2b00      	cmp	r3, #0
 8001540:	db0b      	blt.n	800155a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	f003 021f 	and.w	r2, r3, #31
 8001548:	4907      	ldr	r1, [pc, #28]	@ (8001568 <__NVIC_EnableIRQ+0x38>)
 800154a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	2001      	movs	r0, #1
 8001552:	fa00 f202 	lsl.w	r2, r0, r2
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	@ (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	@ (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	@ 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	@ 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001638:	d301      	bcc.n	800163e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163a:	2301      	movs	r3, #1
 800163c:	e00f      	b.n	800165e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163e:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <SysTick_Config+0x40>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001646:	210f      	movs	r1, #15
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f7ff ff8e 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001650:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <SysTick_Config+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001656:	4b04      	ldr	r3, [pc, #16]	@ (8001668 <SysTick_Config+0x40>)
 8001658:	2207      	movs	r2, #7
 800165a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	e000e010 	.word	0xe000e010

0800166c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff ff29 	bl	80014cc <__NVIC_SetPriorityGrouping>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001682:	b580      	push	{r7, lr}
 8001684:	b086      	sub	sp, #24
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	60b9      	str	r1, [r7, #8]
 800168c:	607a      	str	r2, [r7, #4]
 800168e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001694:	f7ff ff3e 	bl	8001514 <__NVIC_GetPriorityGrouping>
 8001698:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	6978      	ldr	r0, [r7, #20]
 80016a0:	f7ff ff8e 	bl	80015c0 <NVIC_EncodePriority>
 80016a4:	4602      	mov	r2, r0
 80016a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff5d 	bl	800156c <__NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff31 	bl	8001530 <__NVIC_EnableIRQ>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f7ff ffa2 	bl	8001628 <SysTick_Config>
 80016e4:	4603      	mov	r3, r0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	@ 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
 800170a:	e16b      	b.n	80019e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800170c:	2201      	movs	r2, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	429a      	cmp	r2, r3
 8001726:	f040 815a 	bne.w	80019de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d005      	beq.n	8001742 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173e:	2b02      	cmp	r3, #2
 8001740:	d130      	bne.n	80017a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	2203      	movs	r2, #3
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001778:	2201      	movs	r2, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	091b      	lsrs	r3, r3, #4
 800178e:	f003 0201 	and.w	r2, r3, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d017      	beq.n	80017e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d123      	bne.n	8001834 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	08da      	lsrs	r2, r3, #3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	3208      	adds	r2, #8
 80017f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f003 0307 	and.w	r3, r3, #7
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	220f      	movs	r2, #15
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	69b9      	ldr	r1, [r7, #24]
 8001830:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0203 	and.w	r2, r3, #3
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001870:	2b00      	cmp	r3, #0
 8001872:	f000 80b4 	beq.w	80019de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b60      	ldr	r3, [pc, #384]	@ (80019fc <HAL_GPIO_Init+0x30c>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	4a5f      	ldr	r2, [pc, #380]	@ (80019fc <HAL_GPIO_Init+0x30c>)
 8001880:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001884:	6453      	str	r3, [r2, #68]	@ 0x44
 8001886:	4b5d      	ldr	r3, [pc, #372]	@ (80019fc <HAL_GPIO_Init+0x30c>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001892:	4a5b      	ldr	r2, [pc, #364]	@ (8001a00 <HAL_GPIO_Init+0x310>)
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	3302      	adds	r3, #2
 800189a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	220f      	movs	r2, #15
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	43db      	mvns	r3, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4013      	ands	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a52      	ldr	r2, [pc, #328]	@ (8001a04 <HAL_GPIO_Init+0x314>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d02b      	beq.n	8001916 <HAL_GPIO_Init+0x226>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a51      	ldr	r2, [pc, #324]	@ (8001a08 <HAL_GPIO_Init+0x318>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d025      	beq.n	8001912 <HAL_GPIO_Init+0x222>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a50      	ldr	r2, [pc, #320]	@ (8001a0c <HAL_GPIO_Init+0x31c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d01f      	beq.n	800190e <HAL_GPIO_Init+0x21e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4f      	ldr	r2, [pc, #316]	@ (8001a10 <HAL_GPIO_Init+0x320>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d019      	beq.n	800190a <HAL_GPIO_Init+0x21a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4e      	ldr	r2, [pc, #312]	@ (8001a14 <HAL_GPIO_Init+0x324>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0x216>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4d      	ldr	r2, [pc, #308]	@ (8001a18 <HAL_GPIO_Init+0x328>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00d      	beq.n	8001902 <HAL_GPIO_Init+0x212>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4c      	ldr	r2, [pc, #304]	@ (8001a1c <HAL_GPIO_Init+0x32c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_GPIO_Init+0x20e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4b      	ldr	r2, [pc, #300]	@ (8001a20 <HAL_GPIO_Init+0x330>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_Init+0x20a>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e00e      	b.n	8001918 <HAL_GPIO_Init+0x228>
 80018fa:	2308      	movs	r3, #8
 80018fc:	e00c      	b.n	8001918 <HAL_GPIO_Init+0x228>
 80018fe:	2306      	movs	r3, #6
 8001900:	e00a      	b.n	8001918 <HAL_GPIO_Init+0x228>
 8001902:	2305      	movs	r3, #5
 8001904:	e008      	b.n	8001918 <HAL_GPIO_Init+0x228>
 8001906:	2304      	movs	r3, #4
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x228>
 800190a:	2303      	movs	r3, #3
 800190c:	e004      	b.n	8001918 <HAL_GPIO_Init+0x228>
 800190e:	2302      	movs	r3, #2
 8001910:	e002      	b.n	8001918 <HAL_GPIO_Init+0x228>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_GPIO_Init+0x228>
 8001916:	2300      	movs	r3, #0
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f002 0203 	and.w	r2, r2, #3
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	4093      	lsls	r3, r2
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001928:	4935      	ldr	r1, [pc, #212]	@ (8001a00 <HAL_GPIO_Init+0x310>)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001936:	4b3b      	ldr	r3, [pc, #236]	@ (8001a24 <HAL_GPIO_Init+0x334>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195a:	4a32      	ldr	r2, [pc, #200]	@ (8001a24 <HAL_GPIO_Init+0x334>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001960:	4b30      	ldr	r3, [pc, #192]	@ (8001a24 <HAL_GPIO_Init+0x334>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001984:	4a27      	ldr	r2, [pc, #156]	@ (8001a24 <HAL_GPIO_Init+0x334>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800198a:	4b26      	ldr	r3, [pc, #152]	@ (8001a24 <HAL_GPIO_Init+0x334>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001a24 <HAL_GPIO_Init+0x334>)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_GPIO_Init+0x334>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d8:	4a12      	ldr	r2, [pc, #72]	@ (8001a24 <HAL_GPIO_Init+0x334>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3301      	adds	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	f67f ae90 	bls.w	800170c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3724      	adds	r7, #36	@ 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40013800 	.word	0x40013800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40021400 	.word	0x40021400
 8001a1c:	40021800 	.word	0x40021800
 8001a20:	40021c00 	.word	0x40021c00
 8001a24:	40013c00 	.word	0x40013c00

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a44:	e003      	b.n	8001a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	619a      	str	r2, [r3, #24]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af02      	add	r7, sp, #8
 8001a60:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e059      	b.n	8001b20 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f007 fc3a 	bl	8009300 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a9a:	d102      	bne.n	8001aa2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f004 fa53 	bl	8005f52 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7c1a      	ldrb	r2, [r3, #16]
 8001ab4:	f88d 2000 	strb.w	r2, [sp]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001abc:	f004 f9d4 	bl	8005e68 <USB_CoreInit>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d005      	beq.n	8001ad2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2202      	movs	r2, #2
 8001aca:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e026      	b.n	8001b20 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f004 fa4b 	bl	8005f74 <USB_SetCurrentMode>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e017      	b.n	8001b20 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7c1a      	ldrb	r2, [r3, #16]
 8001af8:	f88d 2000 	strb.w	r2, [sp]
 8001afc:	3304      	adds	r3, #4
 8001afe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b00:	f004 fbee 	bl	80062e0 <USB_HostInit>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e004      	b.n	8001b20 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b08b      	sub	sp, #44	@ 0x2c
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	4608      	mov	r0, r1
 8001b32:	4611      	mov	r1, r2
 8001b34:	461a      	mov	r2, r3
 8001b36:	4603      	mov	r3, r0
 8001b38:	70fb      	strb	r3, [r7, #3]
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	70bb      	strb	r3, [r7, #2]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001b42:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001b44:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_HCD_HC_Init+0x2c>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e09d      	b.n	8001c90 <HAL_HCD_HC_Init+0x168>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001b5c:	78fa      	ldrb	r2, [r7, #3]
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	4613      	mov	r3, r2
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	3319      	adds	r3, #25
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b70:	78fa      	ldrb	r2, [r7, #3]
 8001b72:	6879      	ldr	r1, [r7, #4]
 8001b74:	4613      	mov	r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	3314      	adds	r3, #20
 8001b80:	787a      	ldrb	r2, [r7, #1]
 8001b82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b84:	78fa      	ldrb	r2, [r7, #3]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	1a9b      	subs	r3, r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	3315      	adds	r3, #21
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b98:	78fa      	ldrb	r2, [r7, #3]
 8001b9a:	6879      	ldr	r1, [r7, #4]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3326      	adds	r3, #38	@ 0x26
 8001ba8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001bac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001bae:	78fa      	ldrb	r2, [r7, #3]
 8001bb0:	78bb      	ldrb	r3, [r7, #2]
 8001bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bb6:	b2d8      	uxtb	r0, r3
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3316      	adds	r3, #22
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fbc8 	bl	8002364 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001bd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	da0a      	bge.n	8001bf2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3317      	adds	r3, #23
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	e009      	b.n	8001c06 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001bf2:	78fa      	ldrb	r2, [r7, #3]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	1a9b      	subs	r3, r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3317      	adds	r3, #23
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f004 fccc 	bl	80065a8 <USB_GetHostSpeed>
 8001c10:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001c12:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d10b      	bne.n	8001c32 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d107      	bne.n	8001c32 <HAL_HCD_HC_Init+0x10a>
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d104      	bne.n	8001c32 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2bbc      	cmp	r3, #188	@ 0xbc
 8001c2c:	d901      	bls.n	8001c32 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001c2e:	23bc      	movs	r3, #188	@ 0xbc
 8001c30:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	1a9b      	subs	r3, r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	3318      	adds	r3, #24
 8001c42:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001c46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	b298      	uxth	r0, r3
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	011b      	lsls	r3, r3, #4
 8001c54:	1a9b      	subs	r3, r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	3328      	adds	r3, #40	@ 0x28
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	787c      	ldrb	r4, [r7, #1]
 8001c6a:	78ba      	ldrb	r2, [r7, #2]
 8001c6c:	78f9      	ldrb	r1, [r7, #3]
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	4623      	mov	r3, r4
 8001c7e:	f004 fcbb 	bl	80065f8 <USB_HC_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd90      	pop	{r4, r7, pc}

08001c98 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_HC_Halt+0x1e>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e00f      	b.n	8001cd6 <HAL_HCD_HC_Halt+0x3e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 f84d 	bl	8006d66 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	4608      	mov	r0, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	70fb      	strb	r3, [r7, #3]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	70bb      	strb	r3, [r7, #2]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001cfa:	78fa      	ldrb	r2, [r7, #3]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	1a9b      	subs	r3, r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	3317      	adds	r3, #23
 8001d0a:	78ba      	ldrb	r2, [r7, #2]
 8001d0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d0e:	78fa      	ldrb	r2, [r7, #3]
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	011b      	lsls	r3, r3, #4
 8001d16:	1a9b      	subs	r3, r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	3326      	adds	r3, #38	@ 0x26
 8001d1e:	787a      	ldrb	r2, [r7, #1]
 8001d20:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d22:	7c3b      	ldrb	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d114      	bne.n	8001d52 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	332a      	adds	r3, #42	@ 0x2a
 8001d38:	2203      	movs	r2, #3
 8001d3a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	3319      	adds	r3, #25
 8001d4c:	7f3a      	ldrb	r2, [r7, #28]
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	e009      	b.n	8001d66 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d52:	78fa      	ldrb	r2, [r7, #3]
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	4613      	mov	r3, r2
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	1a9b      	subs	r3, r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	332a      	adds	r3, #42	@ 0x2a
 8001d62:	2202      	movs	r2, #2
 8001d64:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001d66:	787b      	ldrb	r3, [r7, #1]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	f200 8102 	bhi.w	8001f72 <HAL_HCD_HC_SubmitRequest+0x292>
 8001d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d74 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d74:	08001d85 	.word	0x08001d85
 8001d78:	08001f5d 	.word	0x08001f5d
 8001d7c:	08001e49 	.word	0x08001e49
 8001d80:	08001ed3 	.word	0x08001ed3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001d84:	7c3b      	ldrb	r3, [r7, #16]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	f040 80f5 	bne.w	8001f76 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001d8c:	78bb      	ldrb	r3, [r7, #2]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12d      	bne.n	8001dee <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001d92:	8b3b      	ldrh	r3, [r7, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d109      	bne.n	8001dac <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001d98:	78fa      	ldrb	r2, [r7, #3]
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	333d      	adds	r3, #61	@ 0x3d
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	6879      	ldr	r1, [r7, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	333d      	adds	r3, #61	@ 0x3d
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10a      	bne.n	8001dd8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001dc2:	78fa      	ldrb	r2, [r7, #3]
 8001dc4:	6879      	ldr	r1, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	011b      	lsls	r3, r3, #4
 8001dca:	1a9b      	subs	r3, r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	332a      	adds	r3, #42	@ 0x2a
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001dd6:	e0ce      	b.n	8001f76 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	332a      	adds	r3, #42	@ 0x2a
 8001de8:	2202      	movs	r2, #2
 8001dea:	701a      	strb	r2, [r3, #0]
      break;
 8001dec:	e0c3      	b.n	8001f76 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	331a      	adds	r3, #26
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	f040 80b8 	bne.w	8001f76 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	333c      	adds	r3, #60	@ 0x3c
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10a      	bne.n	8001e32 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	1a9b      	subs	r3, r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	440b      	add	r3, r1
 8001e2a:	332a      	adds	r3, #42	@ 0x2a
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]
      break;
 8001e30:	e0a1      	b.n	8001f76 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	1a9b      	subs	r3, r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	332a      	adds	r3, #42	@ 0x2a
 8001e42:	2202      	movs	r2, #2
 8001e44:	701a      	strb	r2, [r3, #0]
      break;
 8001e46:	e096      	b.n	8001f76 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001e48:	78bb      	ldrb	r3, [r7, #2]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d120      	bne.n	8001e90 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	333d      	adds	r3, #61	@ 0x3d
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10a      	bne.n	8001e7a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	332a      	adds	r3, #42	@ 0x2a
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001e78:	e07e      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	1a9b      	subs	r3, r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	332a      	adds	r3, #42	@ 0x2a
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	701a      	strb	r2, [r3, #0]
      break;
 8001e8e:	e073      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e90:	78fa      	ldrb	r2, [r7, #3]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	1a9b      	subs	r3, r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	333c      	adds	r3, #60	@ 0x3c
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10a      	bne.n	8001ebc <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	332a      	adds	r3, #42	@ 0x2a
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
      break;
 8001eba:	e05d      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ebc:	78fa      	ldrb	r2, [r7, #3]
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	011b      	lsls	r3, r3, #4
 8001ec4:	1a9b      	subs	r3, r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	332a      	adds	r3, #42	@ 0x2a
 8001ecc:	2202      	movs	r2, #2
 8001ece:	701a      	strb	r2, [r3, #0]
      break;
 8001ed0:	e052      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ed2:	78bb      	ldrb	r3, [r7, #2]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d120      	bne.n	8001f1a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ed8:	78fa      	ldrb	r2, [r7, #3]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	1a9b      	subs	r3, r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	333d      	adds	r3, #61	@ 0x3d
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001eee:	78fa      	ldrb	r2, [r7, #3]
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	011b      	lsls	r3, r3, #4
 8001ef6:	1a9b      	subs	r3, r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	440b      	add	r3, r1
 8001efc:	332a      	adds	r3, #42	@ 0x2a
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f02:	e039      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	011b      	lsls	r3, r3, #4
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	332a      	adds	r3, #42	@ 0x2a
 8001f14:	2202      	movs	r2, #2
 8001f16:	701a      	strb	r2, [r3, #0]
      break;
 8001f18:	e02e      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f1a:	78fa      	ldrb	r2, [r7, #3]
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	1a9b      	subs	r3, r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	333c      	adds	r3, #60	@ 0x3c
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	332a      	adds	r3, #42	@ 0x2a
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
      break;
 8001f44:	e018      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	1a9b      	subs	r3, r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	332a      	adds	r3, #42	@ 0x2a
 8001f56:	2202      	movs	r2, #2
 8001f58:	701a      	strb	r2, [r3, #0]
      break;
 8001f5a:	e00d      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	4613      	mov	r3, r2
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	1a9b      	subs	r3, r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	440b      	add	r3, r1
 8001f6a:	332a      	adds	r3, #42	@ 0x2a
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
      break;
 8001f70:	e002      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001f76:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	332c      	adds	r3, #44	@ 0x2c
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001f8c:	78fa      	ldrb	r2, [r7, #3]
 8001f8e:	8b39      	ldrh	r1, [r7, #24]
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4403      	add	r3, r0
 8001f9c:	3334      	adds	r3, #52	@ 0x34
 8001f9e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	011b      	lsls	r3, r3, #4
 8001fa8:	1a9b      	subs	r3, r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	334c      	adds	r3, #76	@ 0x4c
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	3338      	adds	r3, #56	@ 0x38
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3315      	adds	r3, #21
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001fdc:	78fa      	ldrb	r2, [r7, #3]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	011b      	lsls	r3, r3, #4
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	334d      	adds	r3, #77	@ 0x4d
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	3310      	adds	r3, #16
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	1d19      	adds	r1, r3, #4
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	799b      	ldrb	r3, [r3, #6]
 800200a:	461a      	mov	r2, r3
 800200c:	f004 fc20 	bl	8006850 <USB_HC_StartXfer>
 8002010:	4603      	mov	r3, r0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop

0800201c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f004 f914 	bl	8006260 <USB_GetMode>
 8002038:	4603      	mov	r3, r0
 800203a:	2b01      	cmp	r3, #1
 800203c:	f040 80fb 	bne.w	8002236 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f004 f8d7 	bl	80061f8 <USB_ReadInterrupts>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80f1 	beq.w	8002234 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f004 f8ce 	bl	80061f8 <USB_ReadInterrupts>
 800205c:	4603      	mov	r3, r0
 800205e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002062:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002066:	d104      	bne.n	8002072 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002070:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f004 f8be 	bl	80061f8 <USB_ReadInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002086:	d104      	bne.n	8002092 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002090:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 f8ae 	bl	80061f8 <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020a6:	d104      	bne.n	80020b2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80020b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f89e 	bl	80061f8 <USB_ReadInterrupts>
 80020bc:	4603      	mov	r3, r0
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d103      	bne.n	80020ce <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2202      	movs	r2, #2
 80020cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 f890 	bl	80061f8 <USB_ReadInterrupts>
 80020d8:	4603      	mov	r3, r0
 80020da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020e2:	d120      	bne.n	8002126 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80020ec:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d113      	bne.n	8002126 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80020fe:	2110      	movs	r1, #16
 8002100:	6938      	ldr	r0, [r7, #16]
 8002102:	f003 ff83 	bl	800600c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002106:	6938      	ldr	r0, [r7, #16]
 8002108:	f003 ffb2 	bl	8006070 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	7a5b      	ldrb	r3, [r3, #9]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d105      	bne.n	8002120 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2101      	movs	r1, #1
 800211a:	4618      	mov	r0, r3
 800211c:	f004 f9a4 	bl	8006468 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f007 f96b 	bl	80093fc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f004 f864 	bl	80061f8 <USB_ReadInterrupts>
 8002130:	4603      	mov	r3, r0
 8002132:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002136:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800213a:	d102      	bne.n	8002142 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f001 fd4d 	bl	8003bdc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f004 f856 	bl	80061f8 <USB_ReadInterrupts>
 800214c:	4603      	mov	r3, r0
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b08      	cmp	r3, #8
 8002154:	d106      	bne.n	8002164 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f007 f934 	bl	80093c4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2208      	movs	r2, #8
 8002162:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4618      	mov	r0, r3
 800216a:	f004 f845 	bl	80061f8 <USB_ReadInterrupts>
 800216e:	4603      	mov	r3, r0
 8002170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002178:	d139      	bne.n	80021ee <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f004 fde0 	bl	8006d44 <USB_HC_ReadInterrupt>
 8002184:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e025      	b.n	80021d8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d018      	beq.n	80021d2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021b6:	d106      	bne.n	80021c6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	4619      	mov	r1, r3
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f905 	bl	80023ce <HCD_HC_IN_IRQHandler>
 80021c4:	e005      	b.n	80021d2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 ff67 	bl	80030a0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	3301      	adds	r3, #1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	795b      	ldrb	r3, [r3, #5]
 80021dc:	461a      	mov	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d3d3      	bcc.n	800218c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 f800 	bl	80061f8 <USB_ReadInterrupts>
 80021f8:	4603      	mov	r3, r0
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b10      	cmp	r3, #16
 8002200:	d101      	bne.n	8002206 <HAL_HCD_IRQHandler+0x1ea>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_HCD_IRQHandler+0x1ec>
 8002206:	2300      	movs	r3, #0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d014      	beq.n	8002236 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0210 	bic.w	r2, r2, #16
 800221a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f001 fbfe 	bl	8003a1e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699a      	ldr	r2, [r3, #24]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0210 	orr.w	r2, r2, #16
 8002230:	619a      	str	r2, [r3, #24]
 8002232:	e000      	b.n	8002236 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002234:	bf00      	nop
    }
  }
}
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800224a:	2b01      	cmp	r3, #1
 800224c:	d101      	bne.n	8002252 <HAL_HCD_Start+0x16>
 800224e:	2302      	movs	r3, #2
 8002250:	e013      	b.n	800227a <HAL_HCD_Start+0x3e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2101      	movs	r1, #1
 8002260:	4618      	mov	r0, r3
 8002262:	f004 f968 	bl	8006536 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f003 fe60 	bl	8005f30 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_HCD_Stop+0x16>
 8002294:	2302      	movs	r3, #2
 8002296:	e00d      	b.n	80022b4 <HAL_HCD_Stop+0x32>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f004 febb 	bl	8007020 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f004 f90a 	bl	80064e2 <USB_ResetPort>
 80022ce:	4603      	mov	r3, r0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	334c      	adds	r3, #76	@ 0x4c
 80022f4:	781b      	ldrb	r3, [r3, #0]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800230e:	78fa      	ldrb	r2, [r7, #3]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3338      	adds	r3, #56	@ 0x38
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f004 f94c 	bl	80065d6 <USB_GetCurrentFrame>
 800233e:	4603      	mov	r3, r0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f004 f927 	bl	80065a8 <USB_GetHostSpeed>
 800235a:	4603      	mov	r3, r0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	331a      	adds	r3, #26
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	331b      	adds	r3, #27
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	3325      	adds	r3, #37	@ 0x25
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	3324      	adds	r3, #36	@ 0x24
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 ff16 	bl	800621e <USB_ReadChInterrupts>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d11a      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80023fc:	78fb      	ldrb	r3, [r7, #3]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002408:	461a      	mov	r2, r3
 800240a:	2304      	movs	r3, #4
 800240c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	334d      	adds	r3, #77	@ 0x4d
 800241e:	2207      	movs	r2, #7
 8002420:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f004 fc9b 	bl	8006d66 <USB_HC_Halt>
 8002430:	e09e      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f003 feef 	bl	800621e <USB_ReadChInterrupts>
 8002440:	4603      	mov	r3, r0
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800244a:	d11b      	bne.n	8002484 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800245e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	334d      	adds	r3, #77	@ 0x4d
 8002470:	2208      	movs	r2, #8
 8002472:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	4611      	mov	r1, r2
 800247c:	4618      	mov	r0, r3
 800247e:	f004 fc72 	bl	8006d66 <USB_HC_Halt>
 8002482:	e075      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	78fa      	ldrb	r2, [r7, #3]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f003 fec6 	bl	800621e <USB_ReadChInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b08      	cmp	r3, #8
 800249a:	d11a      	bne.n	80024d2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	015a      	lsls	r2, r3, #5
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	4413      	add	r3, r2
 80024a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a8:	461a      	mov	r2, r3
 80024aa:	2308      	movs	r3, #8
 80024ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80024ae:	78fa      	ldrb	r2, [r7, #3]
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	1a9b      	subs	r3, r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	334d      	adds	r3, #77	@ 0x4d
 80024be:	2206      	movs	r2, #6
 80024c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 fc4b 	bl	8006d66 <USB_HC_Halt>
 80024d0:	e04e      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f003 fe9f 	bl	800621e <USB_ReadChInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ea:	d11b      	bne.n	8002524 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80024ec:	78fb      	ldrb	r3, [r7, #3]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024f8:	461a      	mov	r2, r3
 80024fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024fe:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002500:	78fa      	ldrb	r2, [r7, #3]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	011b      	lsls	r3, r3, #4
 8002508:	1a9b      	subs	r3, r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	334d      	adds	r3, #77	@ 0x4d
 8002510:	2209      	movs	r2, #9
 8002512:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	4611      	mov	r1, r2
 800251c:	4618      	mov	r0, r3
 800251e:	f004 fc22 	bl	8006d66 <USB_HC_Halt>
 8002522:	e025      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f003 fe76 	bl	800621e <USB_ReadChInterrupts>
 8002532:	4603      	mov	r3, r0
 8002534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002538:	2b80      	cmp	r3, #128	@ 0x80
 800253a:	d119      	bne.n	8002570 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002548:	461a      	mov	r2, r3
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800254e:	78fa      	ldrb	r2, [r7, #3]
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	4613      	mov	r3, r2
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	440b      	add	r3, r1
 800255c:	334d      	adds	r3, #77	@ 0x4d
 800255e:	2207      	movs	r2, #7
 8002560:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	78fa      	ldrb	r2, [r7, #3]
 8002568:	4611      	mov	r1, r2
 800256a:	4618      	mov	r0, r3
 800256c:	f004 fbfb 	bl	8006d66 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f003 fe50 	bl	800621e <USB_ReadChInterrupts>
 800257e:	4603      	mov	r3, r0
 8002580:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002588:	d112      	bne.n	80025b0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f004 fbe7 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a4:	461a      	mov	r2, r3
 80025a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025aa:	6093      	str	r3, [r2, #8]
 80025ac:	f000 bd75 	b.w	800309a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	78fa      	ldrb	r2, [r7, #3]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f003 fe30 	bl	800621e <USB_ReadChInterrupts>
 80025be:	4603      	mov	r3, r0
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	f040 8128 	bne.w	800281a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	015a      	lsls	r2, r3, #5
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4413      	add	r3, r2
 80025d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d6:	461a      	mov	r2, r3
 80025d8:	2320      	movs	r3, #32
 80025da:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80025dc:	78fa      	ldrb	r2, [r7, #3]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4613      	mov	r3, r2
 80025e2:	011b      	lsls	r3, r3, #4
 80025e4:	1a9b      	subs	r3, r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	440b      	add	r3, r1
 80025ea:	331b      	adds	r3, #27
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d119      	bne.n	8002626 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	1a9b      	subs	r3, r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	331b      	adds	r3, #27
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	0151      	lsls	r1, r2, #5
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	440a      	add	r2, r1
 800261c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002624:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	799b      	ldrb	r3, [r3, #6]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01b      	beq.n	8002666 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	3330      	adds	r3, #48	@ 0x30
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4413      	add	r3, r2
 8002648:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	1ac9      	subs	r1, r1, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4403      	add	r3, r0
 8002662:	3338      	adds	r3, #56	@ 0x38
 8002664:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	334d      	adds	r3, #77	@ 0x4d
 8002676:	2201      	movs	r2, #1
 8002678:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800267a:	78fa      	ldrb	r2, [r7, #3]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	011b      	lsls	r3, r3, #4
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	3344      	adds	r3, #68	@ 0x44
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800269a:	461a      	mov	r2, r3
 800269c:	2301      	movs	r3, #1
 800269e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3326      	adds	r3, #38	@ 0x26
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00a      	beq.n	80026cc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	3326      	adds	r3, #38	@ 0x26
 80026c6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d110      	bne.n	80026ee <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f004 fb46 	bl	8006d66 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e6:	461a      	mov	r2, r3
 80026e8:	2310      	movs	r3, #16
 80026ea:	6093      	str	r3, [r2, #8]
 80026ec:	e03d      	b.n	800276a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80026ee:	78fa      	ldrb	r2, [r7, #3]
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	4613      	mov	r3, r2
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	1a9b      	subs	r3, r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	440b      	add	r3, r1
 80026fc:	3326      	adds	r3, #38	@ 0x26
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d00a      	beq.n	800271a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3326      	adds	r3, #38	@ 0x26
 8002714:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002716:	2b01      	cmp	r3, #1
 8002718:	d127      	bne.n	800276a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	015a      	lsls	r2, r3, #5
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4413      	add	r3, r2
 8002722:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	0151      	lsls	r1, r2, #5
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	440a      	add	r2, r1
 8002730:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002734:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002738:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	334c      	adds	r3, #76	@ 0x4c
 800274a:	2201      	movs	r2, #1
 800274c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	334c      	adds	r3, #76	@ 0x4c
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	4619      	mov	r1, r3
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f006 fe57 	bl	8009418 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	799b      	ldrb	r3, [r3, #6]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d13b      	bne.n	80027ea <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	3338      	adds	r3, #56	@ 0x38
 8002782:	6819      	ldr	r1, [r3, #0]
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4403      	add	r3, r0
 8002792:	3328      	adds	r3, #40	@ 0x28
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	440b      	add	r3, r1
 8002798:	1e59      	subs	r1, r3, #1
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	1a9b      	subs	r3, r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4403      	add	r3, r0
 80027a8:	3328      	adds	r3, #40	@ 0x28
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8470 	beq.w	800309a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80027ba:	78fa      	ldrb	r2, [r7, #3]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	1a9b      	subs	r3, r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	333c      	adds	r3, #60	@ 0x3c
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	f083 0301 	eor.w	r3, r3, #1
 80027d2:	b2d8      	uxtb	r0, r3
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	4613      	mov	r3, r2
 80027d8:	011b      	lsls	r3, r3, #4
 80027da:	1a9b      	subs	r3, r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	440b      	add	r3, r1
 80027e0:	333c      	adds	r3, #60	@ 0x3c
 80027e2:	4602      	mov	r2, r0
 80027e4:	701a      	strb	r2, [r3, #0]
 80027e6:	f000 bc58 	b.w	800309a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	333c      	adds	r3, #60	@ 0x3c
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2d8      	uxtb	r0, r3
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	333c      	adds	r3, #60	@ 0x3c
 8002812:	4602      	mov	r2, r0
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	f000 bc40 	b.w	800309a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f003 fcfb 	bl	800621e <USB_ReadChInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	2b20      	cmp	r3, #32
 8002830:	d131      	bne.n	8002896 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	015a      	lsls	r2, r3, #5
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4413      	add	r3, r2
 800283a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800283e:	461a      	mov	r2, r3
 8002840:	2320      	movs	r3, #32
 8002842:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	331a      	adds	r3, #26
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	f040 841f 	bne.w	800309a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	4613      	mov	r3, r2
 8002862:	011b      	lsls	r3, r3, #4
 8002864:	1a9b      	subs	r3, r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	331b      	adds	r3, #27
 800286c:	2201      	movs	r2, #1
 800286e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334d      	adds	r3, #77	@ 0x4d
 8002880:	2203      	movs	r2, #3
 8002882:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f004 fa6a 	bl	8006d66 <USB_HC_Halt>
 8002892:	f000 bc02 	b.w	800309a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	4611      	mov	r1, r2
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 fcbd 	bl	800621e <USB_ReadChInterrupts>
 80028a4:	4603      	mov	r3, r0
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	f040 8305 	bne.w	8002eba <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2302      	movs	r3, #2
 80028c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	334d      	adds	r3, #77	@ 0x4d
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d114      	bne.n	8002902 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	334d      	adds	r3, #77	@ 0x4d
 80028e8:	2202      	movs	r2, #2
 80028ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80028ec:	78fa      	ldrb	r2, [r7, #3]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	334c      	adds	r3, #76	@ 0x4c
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
 8002900:	e2cc      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002902:	78fa      	ldrb	r2, [r7, #3]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	1a9b      	subs	r3, r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	334d      	adds	r3, #77	@ 0x4d
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b06      	cmp	r3, #6
 8002916:	d114      	bne.n	8002942 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	334d      	adds	r3, #77	@ 0x4d
 8002928:	2202      	movs	r2, #2
 800292a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	334c      	adds	r3, #76	@ 0x4c
 800293c:	2205      	movs	r2, #5
 800293e:	701a      	strb	r2, [r3, #0]
 8002940:	e2ac      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002942:	78fa      	ldrb	r2, [r7, #3]
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	4613      	mov	r3, r2
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	334d      	adds	r3, #77	@ 0x4d
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b07      	cmp	r3, #7
 8002956:	d00b      	beq.n	8002970 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	334d      	adds	r3, #77	@ 0x4d
 8002968:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800296a:	2b09      	cmp	r3, #9
 800296c:	f040 80a6 	bne.w	8002abc <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	334d      	adds	r3, #77	@ 0x4d
 8002980:	2202      	movs	r2, #2
 8002982:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	1a9b      	subs	r3, r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	440b      	add	r3, r1
 8002992:	3344      	adds	r3, #68	@ 0x44
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	1c59      	adds	r1, r3, #1
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	4403      	add	r3, r0
 80029a4:	3344      	adds	r3, #68	@ 0x44
 80029a6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	3344      	adds	r3, #68	@ 0x44
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d943      	bls.n	8002a46 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3344      	adds	r3, #68	@ 0x44
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	331a      	adds	r3, #26
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d123      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	331b      	adds	r3, #27
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80029fc:	78fa      	ldrb	r2, [r7, #3]
 80029fe:	6879      	ldr	r1, [r7, #4]
 8002a00:	4613      	mov	r3, r2
 8002a02:	011b      	lsls	r3, r3, #4
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	440b      	add	r3, r1
 8002a0a:	331c      	adds	r3, #28
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	0151      	lsls	r1, r2, #5
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	440a      	add	r2, r1
 8002a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	334c      	adds	r3, #76	@ 0x4c
 8002a40:	2204      	movs	r2, #4
 8002a42:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a44:	e229      	b.n	8002e9a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	334c      	adds	r3, #76	@ 0x4c
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9b      	subs	r3, r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	440b      	add	r3, r1
 8002a68:	3326      	adds	r3, #38	@ 0x26
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00b      	beq.n	8002a88 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	3326      	adds	r3, #38	@ 0x26
 8002a80:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	f040 8209 	bne.w	8002e9a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a9e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002aa6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002aba:	e1ee      	b.n	8002e9a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	334d      	adds	r3, #77	@ 0x4d
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	f040 80c8 	bne.w	8002c64 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	334d      	adds	r3, #77	@ 0x4d
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	331b      	adds	r3, #27
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	f040 81ce 	bne.w	8002e9c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3326      	adds	r3, #38	@ 0x26
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d16b      	bne.n	8002bee <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3348      	adds	r3, #72	@ 0x48
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	1c59      	adds	r1, r3, #1
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4403      	add	r3, r0
 8002b36:	3348      	adds	r3, #72	@ 0x48
 8002b38:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3348      	adds	r3, #72	@ 0x48
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d943      	bls.n	8002bd8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002b50:	78fa      	ldrb	r2, [r7, #3]
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3348      	adds	r3, #72	@ 0x48
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	331b      	adds	r3, #27
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	3344      	adds	r3, #68	@ 0x44
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d809      	bhi.n	8002ba2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	331c      	adds	r3, #28
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	015a      	lsls	r2, r3, #5
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	0151      	lsls	r1, r2, #5
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	440a      	add	r2, r1
 8002bb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bc0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bc2:	78fa      	ldrb	r2, [r7, #3]
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	334c      	adds	r3, #76	@ 0x4c
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e014      	b.n	8002c02 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334c      	adds	r3, #76	@ 0x4c
 8002be8:	2202      	movs	r2, #2
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	e009      	b.n	8002c02 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bee:	78fa      	ldrb	r2, [r7, #3]
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	1a9b      	subs	r3, r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	440b      	add	r3, r1
 8002bfc:	334c      	adds	r3, #76	@ 0x4c
 8002bfe:	2202      	movs	r2, #2
 8002c00:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	4613      	mov	r3, r2
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	1a9b      	subs	r3, r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	3326      	adds	r3, #38	@ 0x26
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00b      	beq.n	8002c30 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3326      	adds	r3, #38	@ 0x26
 8002c28:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	f040 8136 	bne.w	8002e9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c46:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c4e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e11b      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	334d      	adds	r3, #77	@ 0x4d
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	f040 8081 	bne.w	8002d7e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	334d      	adds	r3, #77	@ 0x4d
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	331b      	adds	r3, #27
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	f040 80fa 	bne.w	8002e9c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	334c      	adds	r3, #76	@ 0x4c
 8002cb8:	2202      	movs	r2, #2
 8002cba:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	78fa      	ldrb	r2, [r7, #3]
 8002ccc:	0151      	lsls	r1, r2, #5
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	440a      	add	r2, r1
 8002cd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cda:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	0151      	lsls	r1, r2, #5
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cfa:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	015a      	lsls	r2, r3, #5
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4413      	add	r3, r2
 8002d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	0151      	lsls	r1, r2, #5
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	440a      	add	r2, r1
 8002d12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d16:	f023 0320 	bic.w	r3, r3, #32
 8002d1a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	3326      	adds	r3, #38	@ 0x26
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d32:	78fa      	ldrb	r2, [r7, #3]
 8002d34:	6879      	ldr	r1, [r7, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	1a9b      	subs	r3, r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3326      	adds	r3, #38	@ 0x26
 8002d42:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	f040 80a9 	bne.w	8002e9c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d60:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d68:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	015a      	lsls	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4413      	add	r3, r2
 8002d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d76:	461a      	mov	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6013      	str	r3, [r2, #0]
 8002d7c:	e08e      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	334d      	adds	r3, #77	@ 0x4d
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	d143      	bne.n	8002e1c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	334d      	adds	r3, #77	@ 0x4d
 8002da4:	2202      	movs	r2, #2
 8002da6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	334c      	adds	r3, #76	@ 0x4c
 8002db8:	2202      	movs	r2, #2
 8002dba:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3326      	adds	r3, #38	@ 0x26
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3326      	adds	r3, #38	@ 0x26
 8002de2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d159      	bne.n	8002e9c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002dfe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e06:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e08:	78fb      	ldrb	r3, [r7, #3]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e14:	461a      	mov	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e03f      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	334d      	adds	r3, #77	@ 0x4d
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d126      	bne.n	8002e80 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	334d      	adds	r3, #77	@ 0x4d
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3344      	adds	r3, #68	@ 0x44
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	1c59      	adds	r1, r3, #1
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4403      	add	r3, r0
 8002e66:	3344      	adds	r3, #68	@ 0x44
 8002e68:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e6a:	78fa      	ldrb	r2, [r7, #3]
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	334c      	adds	r3, #76	@ 0x4c
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	e00d      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	011b      	lsls	r3, r3, #4
 8002e88:	1a9b      	subs	r3, r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	334d      	adds	r3, #77	@ 0x4d
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	f000 8100 	beq.w	8003098 <HCD_HC_IN_IRQHandler+0xcca>
 8002e98:	e000      	b.n	8002e9c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e9a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	334c      	adds	r3, #76	@ 0x4c
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f006 fab0 	bl	8009418 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002eb8:	e0ef      	b.n	800309a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f003 f9ab 	bl	800621e <USB_ReadChInterrupts>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ece:	2b40      	cmp	r3, #64	@ 0x40
 8002ed0:	d12f      	bne.n	8002f32 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2340      	movs	r3, #64	@ 0x40
 8002ee2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	334d      	adds	r3, #77	@ 0x4d
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	331a      	adds	r3, #26
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3344      	adds	r3, #68	@ 0x44
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 ff1b 	bl	8006d66 <USB_HC_Halt>
 8002f30:	e0b3      	b.n	800309a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 f96f 	bl	800621e <USB_ReadChInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	f040 80a7 	bne.w	800309a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	3326      	adds	r3, #38	@ 0x26
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b03      	cmp	r3, #3
 8002f60:	d11b      	bne.n	8002f9a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	3344      	adds	r3, #68	@ 0x44
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	334d      	adds	r3, #77	@ 0x4d
 8002f86:	2204      	movs	r2, #4
 8002f88:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f003 fee7 	bl	8006d66 <USB_HC_Halt>
 8002f98:	e03f      	b.n	800301a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3326      	adds	r3, #38	@ 0x26
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3326      	adds	r3, #38	@ 0x26
 8002fc0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d129      	bne.n	800301a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3344      	adds	r3, #68	@ 0x44
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	799b      	ldrb	r3, [r3, #6]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <HCD_HC_IN_IRQHandler+0xc2a>
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	331b      	adds	r3, #27
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d110      	bne.n	800301a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334d      	adds	r3, #77	@ 0x4d
 8003008:	2204      	movs	r2, #4
 800300a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f003 fea6 	bl	8006d66 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800301a:	78fa      	ldrb	r2, [r7, #3]
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	1a9b      	subs	r3, r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	331b      	adds	r3, #27
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d129      	bne.n	8003084 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	440b      	add	r3, r1
 800303e:	331b      	adds	r3, #27
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	0151      	lsls	r1, r2, #5
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	440a      	add	r2, r1
 800305a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800305e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003062:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	0151      	lsls	r1, r2, #5
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	440a      	add	r2, r1
 800307a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800307e:	f043 0320 	orr.w	r3, r3, #32
 8003082:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	015a      	lsls	r2, r3, #5
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4413      	add	r3, r2
 800308c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003090:	461a      	mov	r2, r3
 8003092:	2310      	movs	r3, #16
 8003094:	6093      	str	r3, [r2, #8]
 8003096:	e000      	b.n	800309a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003098:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 f8ad 	bl	800621e <USB_ReadChInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d11b      	bne.n	8003106 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	2304      	movs	r3, #4
 80030de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	334d      	adds	r3, #77	@ 0x4d
 80030f0:	2207      	movs	r2, #7
 80030f2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 fe32 	bl	8006d66 <USB_HC_Halt>
 8003102:	f000 bc89 	b.w	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f003 f885 	bl	800621e <USB_ReadChInterrupts>
 8003114:	4603      	mov	r3, r0
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b20      	cmp	r3, #32
 800311c:	f040 8082 	bne.w	8003224 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312c:	461a      	mov	r2, r3
 800312e:	2320      	movs	r3, #32
 8003130:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003132:	78fa      	ldrb	r2, [r7, #3]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3319      	adds	r3, #25
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d124      	bne.n	8003192 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003148:	78fa      	ldrb	r2, [r7, #3]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	011b      	lsls	r3, r3, #4
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3319      	adds	r3, #25
 8003158:	2200      	movs	r2, #0
 800315a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334c      	adds	r3, #76	@ 0x4c
 800316c:	2202      	movs	r2, #2
 800316e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003170:	78fa      	ldrb	r2, [r7, #3]
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	334d      	adds	r3, #77	@ 0x4d
 8003180:	2203      	movs	r2, #3
 8003182:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f003 fdea 	bl	8006d66 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	331a      	adds	r3, #26
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	f040 8437 	bne.w	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	331b      	adds	r3, #27
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f040 842b 	bne.w	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	3326      	adds	r3, #38	@ 0x26
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d009      	beq.n	80031ec <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	331b      	adds	r3, #27
 80031e8:	2201      	movs	r2, #1
 80031ea:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334d      	adds	r3, #77	@ 0x4d
 80031fc:	2203      	movs	r2, #3
 80031fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	4611      	mov	r1, r2
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fdac 	bl	8006d66 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800320e:	78fa      	ldrb	r2, [r7, #3]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3344      	adds	r3, #68	@ 0x44
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e3f9      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fff6 	bl	800621e <USB_ReadChInterrupts>
 8003232:	4603      	mov	r3, r0
 8003234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800323c:	d111      	bne.n	8003262 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	4413      	add	r3, r2
 8003246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324a:	461a      	mov	r2, r3
 800324c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003250:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f003 fd83 	bl	8006d66 <USB_HC_Halt>
 8003260:	e3da      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f002 ffd7 	bl	800621e <USB_ReadChInterrupts>
 8003270:	4603      	mov	r3, r0
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d168      	bne.n	800334c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3344      	adds	r3, #68	@ 0x44
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	4611      	mov	r1, r2
 8003296:	4618      	mov	r0, r3
 8003298:	f002 ffc1 	bl	800621e <USB_ReadChInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a2:	2b40      	cmp	r3, #64	@ 0x40
 80032a4:	d112      	bne.n	80032cc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3319      	adds	r3, #25
 80032b6:	2201      	movs	r2, #1
 80032b8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c6:	461a      	mov	r2, r3
 80032c8:	2340      	movs	r3, #64	@ 0x40
 80032ca:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	331b      	adds	r3, #27
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d019      	beq.n	8003316 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	331b      	adds	r3, #27
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	015a      	lsls	r2, r3, #5
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4413      	add	r3, r2
 80032fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	0151      	lsls	r1, r2, #5
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	440a      	add	r2, r1
 800330c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003310:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003314:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003316:	78fb      	ldrb	r3, [r7, #3]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4413      	add	r3, r2
 800331e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003322:	461a      	mov	r2, r3
 8003324:	2301      	movs	r3, #1
 8003326:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	334d      	adds	r3, #77	@ 0x4d
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f003 fd0e 	bl	8006d66 <USB_HC_Halt>
 800334a:	e365      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	78fa      	ldrb	r2, [r7, #3]
 8003352:	4611      	mov	r1, r2
 8003354:	4618      	mov	r0, r3
 8003356:	f002 ff62 	bl	800621e <USB_ReadChInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003360:	2b40      	cmp	r3, #64	@ 0x40
 8003362:	d139      	bne.n	80033d8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334d      	adds	r3, #77	@ 0x4d
 8003374:	2205      	movs	r2, #5
 8003376:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	331a      	adds	r3, #26
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	3319      	adds	r3, #25
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	3344      	adds	r3, #68	@ 0x44
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 fcd1 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	2340      	movs	r3, #64	@ 0x40
 80033d4:	6093      	str	r3, [r2, #8]
 80033d6:	e31f      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	78fa      	ldrb	r2, [r7, #3]
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f002 ff1c 	bl	800621e <USB_ReadChInterrupts>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d11a      	bne.n	8003426 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	015a      	lsls	r2, r3, #5
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4413      	add	r3, r2
 80033f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fc:	461a      	mov	r2, r3
 80033fe:	2308      	movs	r3, #8
 8003400:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003402:	78fa      	ldrb	r2, [r7, #3]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	1a9b      	subs	r3, r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	334d      	adds	r3, #77	@ 0x4d
 8003412:	2206      	movs	r2, #6
 8003414:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	4611      	mov	r1, r2
 800341e:	4618      	mov	r0, r3
 8003420:	f003 fca1 	bl	8006d66 <USB_HC_Halt>
 8003424:	e2f8      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	4611      	mov	r1, r2
 800342e:	4618      	mov	r0, r3
 8003430:	f002 fef5 	bl	800621e <USB_ReadChInterrupts>
 8003434:	4603      	mov	r3, r0
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b10      	cmp	r3, #16
 800343c:	d144      	bne.n	80034c8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3344      	adds	r3, #68	@ 0x44
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	334d      	adds	r3, #77	@ 0x4d
 8003462:	2204      	movs	r2, #4
 8003464:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3319      	adds	r3, #25
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d114      	bne.n	80034a6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	3318      	adds	r3, #24
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3319      	adds	r3, #25
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	4611      	mov	r1, r2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f003 fc59 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	015a      	lsls	r2, r3, #5
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4413      	add	r3, r2
 80034bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c0:	461a      	mov	r2, r3
 80034c2:	2310      	movs	r3, #16
 80034c4:	6093      	str	r3, [r2, #8]
 80034c6:	e2a7      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	78fa      	ldrb	r2, [r7, #3]
 80034ce:	4611      	mov	r1, r2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f002 fea4 	bl	800621e <USB_ReadChInterrupts>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034dc:	2b80      	cmp	r3, #128	@ 0x80
 80034de:	f040 8083 	bne.w	80035e8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	799b      	ldrb	r3, [r3, #6]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d111      	bne.n	800350e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	334d      	adds	r3, #77	@ 0x4d
 80034fa:	2207      	movs	r2, #7
 80034fc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f003 fc2d 	bl	8006d66 <USB_HC_Halt>
 800350c:	e062      	b.n	80035d4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	3344      	adds	r3, #68	@ 0x44
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	1c59      	adds	r1, r3, #1
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4403      	add	r3, r0
 800352e:	3344      	adds	r3, #68	@ 0x44
 8003530:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	3344      	adds	r3, #68	@ 0x44
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d922      	bls.n	800358e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	3344      	adds	r3, #68	@ 0x44
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	334c      	adds	r3, #76	@ 0x4c
 800356c:	2204      	movs	r2, #4
 800356e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334c      	adds	r3, #76	@ 0x4c
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	4619      	mov	r1, r3
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f005 ff46 	bl	8009418 <HAL_HCD_HC_NotifyURBChange_Callback>
 800358c:	e022      	b.n	80035d4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	334c      	adds	r3, #76	@ 0x4c
 800359e:	2202      	movs	r2, #2
 80035a0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035b8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035c0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ce:	461a      	mov	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e0:	461a      	mov	r2, r3
 80035e2:	2380      	movs	r3, #128	@ 0x80
 80035e4:	6093      	str	r3, [r2, #8]
 80035e6:	e217      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 fe14 	bl	800621e <USB_ReadChInterrupts>
 80035f6:	4603      	mov	r3, r0
 80035f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003600:	d11b      	bne.n	800363a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	334d      	adds	r3, #77	@ 0x4d
 8003612:	2209      	movs	r2, #9
 8003614:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f003 fba1 	bl	8006d66 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003630:	461a      	mov	r2, r3
 8003632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003636:	6093      	str	r3, [r2, #8]
 8003638:	e1ee      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	4611      	mov	r1, r2
 8003642:	4618      	mov	r0, r3
 8003644:	f002 fdeb 	bl	800621e <USB_ReadChInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b02      	cmp	r3, #2
 8003650:	f040 81df 	bne.w	8003a12 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4413      	add	r3, r2
 800365c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003660:	461a      	mov	r2, r3
 8003662:	2302      	movs	r3, #2
 8003664:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	334d      	adds	r3, #77	@ 0x4d
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b01      	cmp	r3, #1
 800367a:	f040 8093 	bne.w	80037a4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	334d      	adds	r3, #77	@ 0x4d
 800368e:	2202      	movs	r2, #2
 8003690:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003692:	78fa      	ldrb	r2, [r7, #3]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	334c      	adds	r3, #76	@ 0x4c
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3326      	adds	r3, #38	@ 0x26
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d00b      	beq.n	80036d4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3326      	adds	r3, #38	@ 0x26
 80036cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	f040 8190 	bne.w	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	799b      	ldrb	r3, [r3, #6]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d115      	bne.n	8003708 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	333d      	adds	r3, #61	@ 0x3d
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	f083 0301 	eor.w	r3, r3, #1
 80036f4:	b2d8      	uxtb	r0, r3
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	1a9b      	subs	r3, r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	333d      	adds	r3, #61	@ 0x3d
 8003704:	4602      	mov	r2, r0
 8003706:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	799b      	ldrb	r3, [r3, #6]
 800370c:	2b01      	cmp	r3, #1
 800370e:	f040 8171 	bne.w	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3334      	adds	r3, #52	@ 0x34
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 8165 	beq.w	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	3334      	adds	r3, #52	@ 0x34
 800373a:	6819      	ldr	r1, [r3, #0]
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4403      	add	r3, r0
 800374a:	3328      	adds	r3, #40	@ 0x28
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	440b      	add	r3, r1
 8003750:	1e59      	subs	r1, r3, #1
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4403      	add	r3, r0
 8003760:	3328      	adds	r3, #40	@ 0x28
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	fbb1 f3f3 	udiv	r3, r1, r3
 8003768:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 813f 	beq.w	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	333d      	adds	r3, #61	@ 0x3d
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	f083 0301 	eor.w	r3, r3, #1
 800378e:	b2d8      	uxtb	r0, r3
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	333d      	adds	r3, #61	@ 0x3d
 800379e:	4602      	mov	r2, r0
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	e127      	b.n	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	334d      	adds	r3, #77	@ 0x4d
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d120      	bne.n	80037fc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037ba:	78fa      	ldrb	r2, [r7, #3]
 80037bc:	6879      	ldr	r1, [r7, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	011b      	lsls	r3, r3, #4
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	334d      	adds	r3, #77	@ 0x4d
 80037ca:	2202      	movs	r2, #2
 80037cc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	4613      	mov	r3, r2
 80037d4:	011b      	lsls	r3, r3, #4
 80037d6:	1a9b      	subs	r3, r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	440b      	add	r3, r1
 80037dc:	331b      	adds	r3, #27
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	f040 8107 	bne.w	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	1a9b      	subs	r3, r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	440b      	add	r3, r1
 80037f4:	334c      	adds	r3, #76	@ 0x4c
 80037f6:	2202      	movs	r2, #2
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e0fb      	b.n	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	334d      	adds	r3, #77	@ 0x4d
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b04      	cmp	r3, #4
 8003810:	d13a      	bne.n	8003888 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	334d      	adds	r3, #77	@ 0x4d
 8003822:	2202      	movs	r2, #2
 8003824:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	334c      	adds	r3, #76	@ 0x4c
 8003836:	2202      	movs	r2, #2
 8003838:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	331b      	adds	r3, #27
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	f040 80d1 	bne.w	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	331b      	adds	r3, #27
 8003862:	2200      	movs	r2, #0
 8003864:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003866:	78fb      	ldrb	r3, [r7, #3]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4413      	add	r3, r2
 800386e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	0151      	lsls	r1, r2, #5
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	440a      	add	r2, r1
 800387c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003880:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003884:	6053      	str	r3, [r2, #4]
 8003886:	e0b5      	b.n	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	1a9b      	subs	r3, r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	334d      	adds	r3, #77	@ 0x4d
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b05      	cmp	r3, #5
 800389c:	d114      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800389e:	78fa      	ldrb	r2, [r7, #3]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	1a9b      	subs	r3, r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	334d      	adds	r3, #77	@ 0x4d
 80038ae:	2202      	movs	r2, #2
 80038b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	334c      	adds	r3, #76	@ 0x4c
 80038c2:	2202      	movs	r2, #2
 80038c4:	701a      	strb	r2, [r3, #0]
 80038c6:	e095      	b.n	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	334d      	adds	r3, #77	@ 0x4d
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d114      	bne.n	8003908 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	334d      	adds	r3, #77	@ 0x4d
 80038ee:	2202      	movs	r2, #2
 80038f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	334c      	adds	r3, #76	@ 0x4c
 8003902:	2205      	movs	r2, #5
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e075      	b.n	80039f4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	334d      	adds	r3, #77	@ 0x4d
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b07      	cmp	r3, #7
 800391c:	d00a      	beq.n	8003934 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800391e:	78fa      	ldrb	r2, [r7, #3]
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	4613      	mov	r3, r2
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	440b      	add	r3, r1
 800392c:	334d      	adds	r3, #77	@ 0x4d
 800392e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003930:	2b09      	cmp	r3, #9
 8003932:	d170      	bne.n	8003a16 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334d      	adds	r3, #77	@ 0x4d
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	3344      	adds	r3, #68	@ 0x44
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	1c59      	adds	r1, r3, #1
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4403      	add	r3, r0
 8003968:	3344      	adds	r3, #68	@ 0x44
 800396a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3344      	adds	r3, #68	@ 0x44
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d914      	bls.n	80039ac <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3344      	adds	r3, #68	@ 0x44
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	334c      	adds	r3, #76	@ 0x4c
 80039a6:	2204      	movs	r2, #4
 80039a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039aa:	e022      	b.n	80039f2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039ac:	78fa      	ldrb	r2, [r7, #3]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	334c      	adds	r3, #76	@ 0x4c
 80039bc:	2202      	movs	r2, #2
 80039be:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039d6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039de:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ec:	461a      	mov	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	334c      	adds	r3, #76	@ 0x4c
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f005 fd04 	bl	8009418 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a10:	e002      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003a16:	bf00      	nop
  }
}
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08a      	sub	sp, #40	@ 0x28
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	0c5b      	lsrs	r3, r3, #17
 8003a44:	f003 030f 	and.w	r3, r3, #15
 8003a48:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a52:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d004      	beq.n	8003a64 <HCD_RXQLVL_IRQHandler+0x46>
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	f000 80b6 	beq.w	8003bce <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a62:	e0b7      	b.n	8003bd4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 80b3 	beq.w	8003bd2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	332c      	adds	r3, #44	@ 0x2c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80a7 	beq.w	8003bd2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	69ba      	ldr	r2, [r7, #24]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3338      	adds	r3, #56	@ 0x38
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	18d1      	adds	r1, r2, r3
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4403      	add	r3, r0
 8003aa8:	3334      	adds	r3, #52	@ 0x34
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4299      	cmp	r1, r3
 8003aae:	f200 8083 	bhi.w	8003bb8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	332c      	adds	r3, #44	@ 0x2c
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	b292      	uxth	r2, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	f002 fb3b 	bl	8006148 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	332c      	adds	r3, #44	@ 0x2c
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	18d1      	adds	r1, r2, r3
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4403      	add	r3, r0
 8003af6:	332c      	adds	r3, #44	@ 0x2c
 8003af8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3338      	adds	r3, #56	@ 0x38
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	18d1      	adds	r1, r2, r3
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3338      	adds	r3, #56	@ 0x38
 8003b20:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	0cdb      	lsrs	r3, r3, #19
 8003b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b36:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3328      	adds	r3, #40	@ 0x28
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d13f      	bne.n	8003bd2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d03c      	beq.n	8003bd2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b6e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b76:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b84:	461a      	mov	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	440b      	add	r3, r1
 8003b98:	333c      	adds	r3, #60	@ 0x3c
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	f083 0301 	eor.w	r3, r3, #1
 8003ba0:	b2d8      	uxtb	r0, r3
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	333c      	adds	r3, #60	@ 0x3c
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	701a      	strb	r2, [r3, #0]
      break;
 8003bb6:	e00c      	b.n	8003bd2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bb8:	6879      	ldr	r1, [r7, #4]
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	334c      	adds	r3, #76	@ 0x4c
 8003bc8:	2204      	movs	r2, #4
 8003bca:	701a      	strb	r2, [r3, #0]
      break;
 8003bcc:	e001      	b.n	8003bd2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003bd2:	bf00      	nop
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	3728      	adds	r7, #40	@ 0x28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003c08:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d10b      	bne.n	8003c2c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d102      	bne.n	8003c24 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f005 fbde 	bl	80093e0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f043 0302 	orr.w	r3, r3, #2
 8003c2a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b08      	cmp	r3, #8
 8003c34:	d132      	bne.n	8003c9c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f043 0308 	orr.w	r3, r3, #8
 8003c3c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d126      	bne.n	8003c96 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	7a5b      	ldrb	r3, [r3, #9]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d113      	bne.n	8003c78 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003c56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c5a:	d106      	bne.n	8003c6a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2102      	movs	r1, #2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f002 fc00 	bl	8006468 <USB_InitFSLSPClkSel>
 8003c68:	e011      	b.n	8003c8e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2101      	movs	r1, #1
 8003c70:	4618      	mov	r0, r3
 8003c72:	f002 fbf9 	bl	8006468 <USB_InitFSLSPClkSel>
 8003c76:	e00a      	b.n	8003c8e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	79db      	ldrb	r3, [r3, #7]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d106      	bne.n	8003c8e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c86:	461a      	mov	r2, r3
 8003c88:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003c8c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f005 fbd0 	bl	8009434 <HAL_HCD_PortEnabled_Callback>
 8003c94:	e002      	b.n	8003c9c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f005 fbda 	bl	8009450 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d103      	bne.n	8003cae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f043 0320 	orr.w	r3, r3, #32
 8003cac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6013      	str	r3, [r2, #0]
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e12b      	b.n	8003f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd f8e0 	bl	8000eb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	@ 0x24
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d28:	f001 fa20 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 8003d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a81      	ldr	r2, [pc, #516]	@ (8003f38 <HAL_I2C_Init+0x274>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d807      	bhi.n	8003d48 <HAL_I2C_Init+0x84>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a80      	ldr	r2, [pc, #512]	@ (8003f3c <HAL_I2C_Init+0x278>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	bf94      	ite	ls
 8003d40:	2301      	movls	r3, #1
 8003d42:	2300      	movhi	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e006      	b.n	8003d56 <HAL_I2C_Init+0x92>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f40 <HAL_I2C_Init+0x27c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bf94      	ite	ls
 8003d50:	2301      	movls	r3, #1
 8003d52:	2300      	movhi	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0e7      	b.n	8003f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a78      	ldr	r2, [pc, #480]	@ (8003f44 <HAL_I2C_Init+0x280>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0c9b      	lsrs	r3, r3, #18
 8003d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8003f38 <HAL_I2C_Init+0x274>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d802      	bhi.n	8003d98 <HAL_I2C_Init+0xd4>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3301      	adds	r3, #1
 8003d96:	e009      	b.n	8003dac <HAL_I2C_Init+0xe8>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	4a69      	ldr	r2, [pc, #420]	@ (8003f48 <HAL_I2C_Init+0x284>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	3301      	adds	r3, #1
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003dbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	495c      	ldr	r1, [pc, #368]	@ (8003f38 <HAL_I2C_Init+0x274>)
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	d819      	bhi.n	8003e00 <HAL_I2C_Init+0x13c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e59      	subs	r1, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003de0:	400b      	ands	r3, r1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_I2C_Init+0x138>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1e59      	subs	r1, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfa:	e051      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	e04f      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d111      	bne.n	8003e2c <HAL_I2C_Init+0x168>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1e58      	subs	r0, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	440b      	add	r3, r1
 8003e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e012      	b.n	8003e52 <HAL_I2C_Init+0x18e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1e58      	subs	r0, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	0099      	lsls	r1, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Init+0x196>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e022      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10e      	bne.n	8003e80 <HAL_I2C_Init+0x1bc>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e58      	subs	r0, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	440b      	add	r3, r1
 8003e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7e:	e00f      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1e58      	subs	r0, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	0099      	lsls	r1, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	6809      	ldr	r1, [r1, #0]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ece:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6911      	ldr	r1, [r2, #16]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68d2      	ldr	r2, [r2, #12]
 8003eda:	4311      	orrs	r1, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	000186a0 	.word	0x000186a0
 8003f3c:	001e847f 	.word	0x001e847f
 8003f40:	003d08ff 	.word	0x003d08ff
 8003f44:	431bde83 	.word	0x431bde83
 8003f48:	10624dd3 	.word	0x10624dd3

08003f4c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e128      	b.n	80041b0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a90      	ldr	r2, [pc, #576]	@ (80041b8 <HAL_I2S_Init+0x26c>)
 8003f76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fc ffe1 	bl	8000f40 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6812      	ldr	r2, [r2, #0]
 8003f90:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003f94:	f023 030f 	bic.w	r3, r3, #15
 8003f98:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d060      	beq.n	800406c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d102      	bne.n	8003fb8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003fb2:	2310      	movs	r3, #16
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e001      	b.n	8003fbc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003fb8:	2320      	movs	r3, #32
 8003fba:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d802      	bhi.n	8003fca <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f001 f9d8 	bl	8005380 <HAL_RCCEx_GetPeriphCLKFreq>
 8003fd0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fda:	d125      	bne.n	8004028 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d010      	beq.n	8004006 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004000:	3305      	adds	r3, #5
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	e01f      	b.n	8004046 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	461a      	mov	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	3305      	adds	r3, #5
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	e00e      	b.n	8004046 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	461a      	mov	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004042:	3305      	adds	r3, #5
 8004044:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	4a5c      	ldr	r2, [pc, #368]	@ (80041bc <HAL_I2S_Init+0x270>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	08db      	lsrs	r3, r3, #3
 8004050:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	61bb      	str	r3, [r7, #24]
 800406a:	e003      	b.n	8004074 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800406c:	2302      	movs	r3, #2
 800406e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d902      	bls.n	8004080 <HAL_I2S_Init+0x134>
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2bff      	cmp	r3, #255	@ 0xff
 800407e:	d907      	bls.n	8004090 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004084:	f043 0210 	orr.w	r2, r3, #16
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e08f      	b.n	80041b0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	ea42 0103 	orr.w	r1, r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80040ae:	f023 030f 	bic.w	r3, r3, #15
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6851      	ldr	r1, [r2, #4]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6892      	ldr	r2, [r2, #8]
 80040ba:	4311      	orrs	r1, r2
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68d2      	ldr	r2, [r2, #12]
 80040c0:	4311      	orrs	r1, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6992      	ldr	r2, [r2, #24]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040d2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d161      	bne.n	80041a0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a38      	ldr	r2, [pc, #224]	@ (80041c0 <HAL_I2S_Init+0x274>)
 80040e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a37      	ldr	r2, [pc, #220]	@ (80041c4 <HAL_I2S_Init+0x278>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d101      	bne.n	80040f0 <HAL_I2S_Init+0x1a4>
 80040ec:	4b36      	ldr	r3, [pc, #216]	@ (80041c8 <HAL_I2S_Init+0x27c>)
 80040ee:	e001      	b.n	80040f4 <HAL_I2S_Init+0x1a8>
 80040f0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	4932      	ldr	r1, [pc, #200]	@ (80041c4 <HAL_I2S_Init+0x278>)
 80040fc:	428a      	cmp	r2, r1
 80040fe:	d101      	bne.n	8004104 <HAL_I2S_Init+0x1b8>
 8004100:	4a31      	ldr	r2, [pc, #196]	@ (80041c8 <HAL_I2S_Init+0x27c>)
 8004102:	e001      	b.n	8004108 <HAL_I2S_Init+0x1bc>
 8004104:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004108:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800410c:	f023 030f 	bic.w	r3, r3, #15
 8004110:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2b      	ldr	r2, [pc, #172]	@ (80041c4 <HAL_I2S_Init+0x278>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d101      	bne.n	8004120 <HAL_I2S_Init+0x1d4>
 800411c:	4b2a      	ldr	r3, [pc, #168]	@ (80041c8 <HAL_I2S_Init+0x27c>)
 800411e:	e001      	b.n	8004124 <HAL_I2S_Init+0x1d8>
 8004120:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004124:	2202      	movs	r2, #2
 8004126:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a25      	ldr	r2, [pc, #148]	@ (80041c4 <HAL_I2S_Init+0x278>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <HAL_I2S_Init+0x1ea>
 8004132:	4b25      	ldr	r3, [pc, #148]	@ (80041c8 <HAL_I2S_Init+0x27c>)
 8004134:	e001      	b.n	800413a <HAL_I2S_Init+0x1ee>
 8004136:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004146:	d003      	beq.n	8004150 <HAL_I2S_Init+0x204>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d103      	bne.n	8004158 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	e001      	b.n	800415c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004158:	2300      	movs	r3, #0
 800415a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004166:	4313      	orrs	r3, r2
 8004168:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004170:	4313      	orrs	r3, r2
 8004172:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800417a:	4313      	orrs	r3, r2
 800417c:	b29a      	uxth	r2, r3
 800417e:	897b      	ldrh	r3, [r7, #10]
 8004180:	4313      	orrs	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004188:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a0d      	ldr	r2, [pc, #52]	@ (80041c4 <HAL_I2S_Init+0x278>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d101      	bne.n	8004198 <HAL_I2S_Init+0x24c>
 8004194:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <HAL_I2S_Init+0x27c>)
 8004196:	e001      	b.n	800419c <HAL_I2S_Init+0x250>
 8004198:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800419c:	897a      	ldrh	r2, [r7, #10]
 800419e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3720      	adds	r7, #32
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	080042c3 	.word	0x080042c3
 80041bc:	cccccccd 	.word	0xcccccccd
 80041c0:	080043d9 	.word	0x080043d9
 80041c4:	40003800 	.word	0x40003800
 80041c8:	40003400 	.word	0x40003400

080041cc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	881a      	ldrh	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	1c9a      	adds	r2, r3, #2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10e      	bne.n	800425c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800424c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ffb8 	bl	80041cc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800425c:	bf00      	nop
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	b292      	uxth	r2, r2
 8004278:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427e:	1c9a      	adds	r2, r3, #2
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b01      	subs	r3, #1
 800428c:	b29a      	uxth	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004296:	b29b      	uxth	r3, r3
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10e      	bne.n	80042ba <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042aa:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7ff ff93 	bl	80041e0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80042ba:	bf00      	nop
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b086      	sub	sp, #24
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d13a      	bne.n	8004354 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d109      	bne.n	80042fc <I2S_IRQHandler+0x3a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d102      	bne.n	80042fc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff ffb4 	bl	8004264 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004302:	2b40      	cmp	r3, #64	@ 0x40
 8004304:	d126      	bne.n	8004354 <I2S_IRQHandler+0x92>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b20      	cmp	r3, #32
 8004312:	d11f      	bne.n	8004354 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004322:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	f043 0202 	orr.w	r2, r3, #2
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ff50 	bl	80041f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b03      	cmp	r3, #3
 800435e:	d136      	bne.n	80043ce <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d109      	bne.n	800437e <I2S_IRQHandler+0xbc>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004374:	2b80      	cmp	r3, #128	@ 0x80
 8004376:	d102      	bne.n	800437e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff45 	bl	8004208 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d122      	bne.n	80043ce <I2S_IRQHandler+0x10c>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b20      	cmp	r3, #32
 8004394:	d11b      	bne.n	80043ce <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043a4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c0:	f043 0204 	orr.w	r2, r3, #4
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff ff13 	bl	80041f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ce:	bf00      	nop
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a92      	ldr	r2, [pc, #584]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d101      	bne.n	80043f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80043f2:	4b92      	ldr	r3, [pc, #584]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043f4:	e001      	b.n	80043fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80043f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a8b      	ldr	r2, [pc, #556]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d101      	bne.n	8004414 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004410:	4b8a      	ldr	r3, [pc, #552]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004412:	e001      	b.n	8004418 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004414:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004424:	d004      	beq.n	8004430 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f040 8099 	bne.w	8004562 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d107      	bne.n	800444a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 f925 	bl	8004694 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b01      	cmp	r3, #1
 8004452:	d107      	bne.n	8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d002      	beq.n	8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f9c8 	bl	80047f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800446a:	2b40      	cmp	r3, #64	@ 0x40
 800446c:	d13a      	bne.n	80044e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d035      	beq.n	80044e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a6e      	ldr	r2, [pc, #440]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d101      	bne.n	8004486 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004482:	4b6e      	ldr	r3, [pc, #440]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004484:	e001      	b.n	800448a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004486:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4969      	ldr	r1, [pc, #420]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004492:	428b      	cmp	r3, r1
 8004494:	d101      	bne.n	800449a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004496:	4b69      	ldr	r3, [pc, #420]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004498:	e001      	b.n	800449e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800449a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800449e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80044a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	f043 0202 	orr.w	r2, r3, #2
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fe88 	bl	80041f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0308 	and.w	r3, r3, #8
 80044ea:	2b08      	cmp	r3, #8
 80044ec:	f040 80c3 	bne.w	8004676 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f003 0320 	and.w	r3, r3, #32
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 80bd 	beq.w	8004676 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800450a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a49      	ldr	r2, [pc, #292]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004516:	4b49      	ldr	r3, [pc, #292]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004518:	e001      	b.n	800451e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800451a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4944      	ldr	r1, [pc, #272]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004526:	428b      	cmp	r3, r1
 8004528:	d101      	bne.n	800452e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800452a:	4b44      	ldr	r3, [pc, #272]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800452c:	e001      	b.n	8004532 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800452e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004532:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004536:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60bb      	str	r3, [r7, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004552:	f043 0204 	orr.w	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7ff fe4a 	bl	80041f4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004560:	e089      	b.n	8004676 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b02      	cmp	r3, #2
 800456a:	d107      	bne.n	800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8be 	bl	80046f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b01      	cmp	r3, #1
 8004584:	d107      	bne.n	8004596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 f8fd 	bl	8004790 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459c:	2b40      	cmp	r3, #64	@ 0x40
 800459e:	d12f      	bne.n	8004600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d02a      	beq.n	8004600 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1e      	ldr	r2, [pc, #120]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d101      	bne.n	80045c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80045c4:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045c6:	e001      	b.n	80045cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80045c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4919      	ldr	r1, [pc, #100]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045d4:	428b      	cmp	r3, r1
 80045d6:	d101      	bne.n	80045dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80045d8:	4b18      	ldr	r3, [pc, #96]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045da:	e001      	b.n	80045e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80045dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	f043 0202 	orr.w	r2, r3, #2
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff fdfa 	bl	80041f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b08      	cmp	r3, #8
 8004608:	d136      	bne.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d031      	beq.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a07      	ldr	r2, [pc, #28]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d101      	bne.n	8004622 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800461e:	4b07      	ldr	r3, [pc, #28]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004620:	e001      	b.n	8004626 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004622:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4902      	ldr	r1, [pc, #8]	@ (8004638 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800462e:	428b      	cmp	r3, r1
 8004630:	d106      	bne.n	8004640 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004632:	4b02      	ldr	r3, [pc, #8]	@ (800463c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004634:	e006      	b.n	8004644 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004636:	bf00      	nop
 8004638:	40003800 	.word	0x40003800
 800463c:	40003400 	.word	0x40003400
 8004640:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004644:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004648:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004658:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004666:	f043 0204 	orr.w	r2, r3, #4
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff fdc0 	bl	80041f4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004674:	e000      	b.n	8004678 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004676:	bf00      	nop
}
 8004678:	bf00      	nop
 800467a:	3720      	adds	r7, #32
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c99      	adds	r1, r3, #2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6251      	str	r1, [r2, #36]	@ 0x24
 80046a6:	881a      	ldrh	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d113      	bne.n	80046ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f7ff ffc9 	bl	8004680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	1c99      	adds	r1, r3, #2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6251      	str	r1, [r2, #36]	@ 0x24
 800470a:	8819      	ldrh	r1, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <I2SEx_TxISR_I2SExt+0x90>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <I2SEx_TxISR_I2SExt+0x22>
 8004716:	4b1d      	ldr	r3, [pc, #116]	@ (800478c <I2SEx_TxISR_I2SExt+0x94>)
 8004718:	e001      	b.n	800471e <I2SEx_TxISR_I2SExt+0x26>
 800471a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800471e:	460a      	mov	r2, r1
 8004720:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004726:	b29b      	uxth	r3, r3
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004734:	b29b      	uxth	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d121      	bne.n	800477e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a12      	ldr	r2, [pc, #72]	@ (8004788 <I2SEx_TxISR_I2SExt+0x90>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d101      	bne.n	8004748 <I2SEx_TxISR_I2SExt+0x50>
 8004744:	4b11      	ldr	r3, [pc, #68]	@ (800478c <I2SEx_TxISR_I2SExt+0x94>)
 8004746:	e001      	b.n	800474c <I2SEx_TxISR_I2SExt+0x54>
 8004748:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	490d      	ldr	r1, [pc, #52]	@ (8004788 <I2SEx_TxISR_I2SExt+0x90>)
 8004754:	428b      	cmp	r3, r1
 8004756:	d101      	bne.n	800475c <I2SEx_TxISR_I2SExt+0x64>
 8004758:	4b0c      	ldr	r3, [pc, #48]	@ (800478c <I2SEx_TxISR_I2SExt+0x94>)
 800475a:	e001      	b.n	8004760 <I2SEx_TxISR_I2SExt+0x68>
 800475c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004760:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004764:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff ff81 	bl	8004680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40003800 	.word	0x40003800
 800478c:	40003400 	.word	0x40003400

08004790 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68d8      	ldr	r0, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	1c99      	adds	r1, r3, #2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80047a8:	b282      	uxth	r2, r0
 80047aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047be:	b29b      	uxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d113      	bne.n	80047ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff ff4a 	bl	8004680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a20      	ldr	r2, [pc, #128]	@ (8004884 <I2SEx_RxISR_I2SExt+0x90>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d101      	bne.n	800480a <I2SEx_RxISR_I2SExt+0x16>
 8004806:	4b20      	ldr	r3, [pc, #128]	@ (8004888 <I2SEx_RxISR_I2SExt+0x94>)
 8004808:	e001      	b.n	800480e <I2SEx_RxISR_I2SExt+0x1a>
 800480a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800480e:	68d8      	ldr	r0, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004814:	1c99      	adds	r1, r3, #2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800481a:	b282      	uxth	r2, r0
 800481c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004822:	b29b      	uxth	r3, r3
 8004824:	3b01      	subs	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d121      	bne.n	800487a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a12      	ldr	r2, [pc, #72]	@ (8004884 <I2SEx_RxISR_I2SExt+0x90>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d101      	bne.n	8004844 <I2SEx_RxISR_I2SExt+0x50>
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <I2SEx_RxISR_I2SExt+0x94>)
 8004842:	e001      	b.n	8004848 <I2SEx_RxISR_I2SExt+0x54>
 8004844:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004848:	685a      	ldr	r2, [r3, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	490d      	ldr	r1, [pc, #52]	@ (8004884 <I2SEx_RxISR_I2SExt+0x90>)
 8004850:	428b      	cmp	r3, r1
 8004852:	d101      	bne.n	8004858 <I2SEx_RxISR_I2SExt+0x64>
 8004854:	4b0c      	ldr	r3, [pc, #48]	@ (8004888 <I2SEx_RxISR_I2SExt+0x94>)
 8004856:	e001      	b.n	800485c <I2SEx_RxISR_I2SExt+0x68>
 8004858:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800485c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004860:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff ff03 	bl	8004680 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800487a:	bf00      	nop
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	40003800 	.word	0x40003800
 8004888:	40003400 	.word	0x40003400

0800488c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e267      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d075      	beq.n	8004996 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048aa:	4b88      	ldr	r3, [pc, #544]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d00c      	beq.n	80048d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b6:	4b85      	ldr	r3, [pc, #532]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d112      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c2:	4b82      	ldr	r3, [pc, #520]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048ce:	d10b      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d0:	4b7e      	ldr	r3, [pc, #504]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05b      	beq.n	8004994 <HAL_RCC_OscConfig+0x108>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d157      	bne.n	8004994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e242      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048f0:	d106      	bne.n	8004900 <HAL_RCC_OscConfig+0x74>
 80048f2:	4b76      	ldr	r3, [pc, #472]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a75      	ldr	r2, [pc, #468]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80048f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	e01d      	b.n	800493c <HAL_RCC_OscConfig+0xb0>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004908:	d10c      	bne.n	8004924 <HAL_RCC_OscConfig+0x98>
 800490a:	4b70      	ldr	r3, [pc, #448]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a6f      	ldr	r2, [pc, #444]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	4b6d      	ldr	r3, [pc, #436]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6c      	ldr	r2, [pc, #432]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e00b      	b.n	800493c <HAL_RCC_OscConfig+0xb0>
 8004924:	4b69      	ldr	r3, [pc, #420]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a68      	ldr	r2, [pc, #416]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 800492a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	4b66      	ldr	r3, [pc, #408]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a65      	ldr	r2, [pc, #404]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800493a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d013      	beq.n	800496c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004944:	f7fc fd92 	bl	800146c <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800494c:	f7fc fd8e 	bl	800146c <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b64      	cmp	r3, #100	@ 0x64
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e207      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	4b5b      	ldr	r3, [pc, #364]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0f0      	beq.n	800494c <HAL_RCC_OscConfig+0xc0>
 800496a:	e014      	b.n	8004996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fc fd7e 	bl	800146c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7fc fd7a 	bl	800146c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	@ 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e1f3      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	4b51      	ldr	r3, [pc, #324]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0xe8>
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d063      	beq.n	8004a6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049a2:	4b4a      	ldr	r3, [pc, #296]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00b      	beq.n	80049c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ae:	4b47      	ldr	r3, [pc, #284]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049b6:	2b08      	cmp	r3, #8
 80049b8:	d11c      	bne.n	80049f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b44      	ldr	r3, [pc, #272]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d116      	bne.n	80049f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c6:	4b41      	ldr	r3, [pc, #260]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_RCC_OscConfig+0x152>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e1c7      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049de:	4b3b      	ldr	r3, [pc, #236]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	4937      	ldr	r1, [pc, #220]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f2:	e03a      	b.n	8004a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d020      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fc:	4b34      	ldr	r3, [pc, #208]	@ (8004ad0 <HAL_RCC_OscConfig+0x244>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a02:	f7fc fd33 	bl	800146c <HAL_GetTick>
 8004a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	e008      	b.n	8004a1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a0a:	f7fc fd2f 	bl	800146c <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d901      	bls.n	8004a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e1a8      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d0f0      	beq.n	8004a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a28:	4b28      	ldr	r3, [pc, #160]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	4925      	ldr	r1, [pc, #148]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
 8004a3c:	e015      	b.n	8004a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <HAL_RCC_OscConfig+0x244>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a44:	f7fc fd12 	bl	800146c <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7fc fd0e 	bl	800146c <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e187      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d036      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d016      	beq.n	8004aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a7e:	4b15      	ldr	r3, [pc, #84]	@ (8004ad4 <HAL_RCC_OscConfig+0x248>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fc fcf2 	bl	800146c <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8c:	f7fc fcee 	bl	800146c <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e167      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004acc <HAL_RCC_OscConfig+0x240>)
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x200>
 8004aaa:	e01b      	b.n	8004ae4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aac:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <HAL_RCC_OscConfig+0x248>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ab2:	f7fc fcdb 	bl	800146c <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ab8:	e00e      	b.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aba:	f7fc fcd7 	bl	800146c <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d907      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e150      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	42470000 	.word	0x42470000
 8004ad4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	4b88      	ldr	r3, [pc, #544]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1ea      	bne.n	8004aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 8097 	beq.w	8004c20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af6:	4b81      	ldr	r3, [pc, #516]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	4b7d      	ldr	r3, [pc, #500]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	4a7c      	ldr	r2, [pc, #496]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b12:	4b7a      	ldr	r3, [pc, #488]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	4b77      	ldr	r3, [pc, #476]	@ (8004d00 <HAL_RCC_OscConfig+0x474>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d118      	bne.n	8004b60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2e:	4b74      	ldr	r3, [pc, #464]	@ (8004d00 <HAL_RCC_OscConfig+0x474>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a73      	ldr	r2, [pc, #460]	@ (8004d00 <HAL_RCC_OscConfig+0x474>)
 8004b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3a:	f7fc fc97 	bl	800146c <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b42:	f7fc fc93 	bl	800146c <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e10c      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	4b6a      	ldr	r3, [pc, #424]	@ (8004d00 <HAL_RCC_OscConfig+0x474>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d106      	bne.n	8004b76 <HAL_RCC_OscConfig+0x2ea>
 8004b68:	4b64      	ldr	r3, [pc, #400]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6c:	4a63      	ldr	r2, [pc, #396]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b6e:	f043 0301 	orr.w	r3, r3, #1
 8004b72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b74:	e01c      	b.n	8004bb0 <HAL_RCC_OscConfig+0x324>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b05      	cmp	r3, #5
 8004b7c:	d10c      	bne.n	8004b98 <HAL_RCC_OscConfig+0x30c>
 8004b7e:	4b5f      	ldr	r3, [pc, #380]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b82:	4a5e      	ldr	r2, [pc, #376]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b8a:	4b5c      	ldr	r3, [pc, #368]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8e:	4a5b      	ldr	r2, [pc, #364]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b90:	f043 0301 	orr.w	r3, r3, #1
 8004b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b96:	e00b      	b.n	8004bb0 <HAL_RCC_OscConfig+0x324>
 8004b98:	4b58      	ldr	r3, [pc, #352]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9c:	4a57      	ldr	r2, [pc, #348]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba4:	4b55      	ldr	r3, [pc, #340]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba8:	4a54      	ldr	r2, [pc, #336]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004baa:	f023 0304 	bic.w	r3, r3, #4
 8004bae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d015      	beq.n	8004be4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fc fc58 	bl	800146c <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbe:	e00a      	b.n	8004bd6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc0:	f7fc fc54 	bl	800146c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e0cb      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd6:	4b49      	ldr	r3, [pc, #292]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0ee      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x334>
 8004be2:	e014      	b.n	8004c0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be4:	f7fc fc42 	bl	800146c <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bea:	e00a      	b.n	8004c02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bec:	f7fc fc3e 	bl	800146c <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e0b5      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c02:	4b3e      	ldr	r3, [pc, #248]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ee      	bne.n	8004bec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d105      	bne.n	8004c20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c14:	4b39      	ldr	r3, [pc, #228]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c18:	4a38      	ldr	r2, [pc, #224]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 80a1 	beq.w	8004d6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c2a:	4b34      	ldr	r3, [pc, #208]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d05c      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d141      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b31      	ldr	r3, [pc, #196]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c44:	f7fc fc12 	bl	800146c <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4c:	f7fc fc0e 	bl	800146c <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e087      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5e:	4b27      	ldr	r3, [pc, #156]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1f0      	bne.n	8004c4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	019b      	lsls	r3, r3, #6
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	3b01      	subs	r3, #1
 8004c84:	041b      	lsls	r3, r3, #16
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	061b      	lsls	r3, r3, #24
 8004c8e:	491b      	ldr	r1, [pc, #108]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c94:	4b1b      	ldr	r3, [pc, #108]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9a:	f7fc fbe7 	bl	800146c <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca2:	f7fc fbe3 	bl	800146c <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e05c      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb4:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x416>
 8004cc0:	e054      	b.n	8004d6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc2:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <HAL_RCC_OscConfig+0x478>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fc fbd0 	bl	800146c <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fc fbcc 	bl	800146c <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e045      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <HAL_RCC_OscConfig+0x470>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x444>
 8004cee:	e03d      	b.n	8004d6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d107      	bne.n	8004d08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e038      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40007000 	.word	0x40007000
 8004d04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d08:	4b1b      	ldr	r3, [pc, #108]	@ (8004d78 <HAL_RCC_OscConfig+0x4ec>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d028      	beq.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d121      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d11a      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d111      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	3b01      	subs	r3, #1
 8004d52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d107      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800

08004d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d101      	bne.n	8004d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0cc      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d90:	4b68      	ldr	r3, [pc, #416]	@ (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d90c      	bls.n	8004db8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d9e:	4b65      	ldr	r3, [pc, #404]	@ (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da6:	4b63      	ldr	r3, [pc, #396]	@ (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0307 	and.w	r3, r3, #7
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d001      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0b8      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dd0:	4b59      	ldr	r3, [pc, #356]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	4a58      	ldr	r2, [pc, #352]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004dda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de8:	4b53      	ldr	r3, [pc, #332]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4a52      	ldr	r2, [pc, #328]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004df2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df4:	4b50      	ldr	r3, [pc, #320]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	494d      	ldr	r1, [pc, #308]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d044      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d107      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1a:	4b47      	ldr	r3, [pc, #284]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d119      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e07f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d003      	beq.n	8004e3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d107      	bne.n	8004e4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e06f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e067      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5a:	4b37      	ldr	r3, [pc, #220]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 0203 	bic.w	r2, r3, #3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	4934      	ldr	r1, [pc, #208]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e6c:	f7fc fafe 	bl	800146c <HAL_GetTick>
 8004e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e72:	e00a      	b.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e74:	f7fc fafa 	bl	800146c <HAL_GetTick>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e04f      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 020c 	and.w	r2, r3, #12
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d1eb      	bne.n	8004e74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e9c:	4b25      	ldr	r3, [pc, #148]	@ (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d20c      	bcs.n	8004ec4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eaa:	4b22      	ldr	r3, [pc, #136]	@ (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	b2d2      	uxtb	r2, r2
 8004eb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	4b20      	ldr	r3, [pc, #128]	@ (8004f34 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e032      	b.n	8004f2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d008      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed0:	4b19      	ldr	r3, [pc, #100]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	4916      	ldr	r1, [pc, #88]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eee:	4b12      	ldr	r3, [pc, #72]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	00db      	lsls	r3, r3, #3
 8004efc:	490e      	ldr	r1, [pc, #56]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f02:	f000 f821 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8004f06:	4602      	mov	r2, r0
 8004f08:	4b0b      	ldr	r3, [pc, #44]	@ (8004f38 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	091b      	lsrs	r3, r3, #4
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	490a      	ldr	r1, [pc, #40]	@ (8004f3c <HAL_RCC_ClockConfig+0x1c0>)
 8004f14:	5ccb      	ldrb	r3, [r1, r3]
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f1e:	4b09      	ldr	r3, [pc, #36]	@ (8004f44 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fc fa5e 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3710      	adds	r7, #16
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40023c00 	.word	0x40023c00
 8004f38:	40023800 	.word	0x40023800
 8004f3c:	0800acc8 	.word	0x0800acc8
 8004f40:	20000000 	.word	0x20000000
 8004f44:	20000004 	.word	0x20000004

08004f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f4c:	b094      	sub	sp, #80	@ 0x50
 8004f4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f60:	4b79      	ldr	r3, [pc, #484]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 030c 	and.w	r3, r3, #12
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d00d      	beq.n	8004f88 <HAL_RCC_GetSysClockFreq+0x40>
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	f200 80e1 	bhi.w	8005134 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_RCC_GetSysClockFreq+0x34>
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d003      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f7a:	e0db      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f7c:	4b73      	ldr	r3, [pc, #460]	@ (800514c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f80:	e0db      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f82:	4b73      	ldr	r3, [pc, #460]	@ (8005150 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f86:	e0d8      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f88:	4b6f      	ldr	r3, [pc, #444]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f92:	4b6d      	ldr	r3, [pc, #436]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d063      	beq.n	8005066 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	099b      	lsrs	r3, r3, #6
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fb6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fba:	4622      	mov	r2, r4
 8004fbc:	462b      	mov	r3, r5
 8004fbe:	f04f 0000 	mov.w	r0, #0
 8004fc2:	f04f 0100 	mov.w	r1, #0
 8004fc6:	0159      	lsls	r1, r3, #5
 8004fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fcc:	0150      	lsls	r0, r2, #5
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	1a51      	subs	r1, r2, r1
 8004fd6:	6139      	str	r1, [r7, #16]
 8004fd8:	4629      	mov	r1, r5
 8004fda:	eb63 0301 	sbc.w	r3, r3, r1
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fec:	4659      	mov	r1, fp
 8004fee:	018b      	lsls	r3, r1, #6
 8004ff0:	4651      	mov	r1, sl
 8004ff2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	018a      	lsls	r2, r1, #6
 8004ffa:	4651      	mov	r1, sl
 8004ffc:	ebb2 0801 	subs.w	r8, r2, r1
 8005000:	4659      	mov	r1, fp
 8005002:	eb63 0901 	sbc.w	r9, r3, r1
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800501a:	4690      	mov	r8, r2
 800501c:	4699      	mov	r9, r3
 800501e:	4623      	mov	r3, r4
 8005020:	eb18 0303 	adds.w	r3, r8, r3
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	462b      	mov	r3, r5
 8005028:	eb49 0303 	adc.w	r3, r9, r3
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800503a:	4629      	mov	r1, r5
 800503c:	024b      	lsls	r3, r1, #9
 800503e:	4621      	mov	r1, r4
 8005040:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005044:	4621      	mov	r1, r4
 8005046:	024a      	lsls	r2, r1, #9
 8005048:	4610      	mov	r0, r2
 800504a:	4619      	mov	r1, r3
 800504c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800504e:	2200      	movs	r2, #0
 8005050:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005052:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005054:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005058:	f7fb f90a 	bl	8000270 <__aeabi_uldivmod>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4613      	mov	r3, r2
 8005062:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005064:	e058      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005066:	4b38      	ldr	r3, [pc, #224]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x200>)
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	099b      	lsrs	r3, r3, #6
 800506c:	2200      	movs	r2, #0
 800506e:	4618      	mov	r0, r3
 8005070:	4611      	mov	r1, r2
 8005072:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005076:	623b      	str	r3, [r7, #32]
 8005078:	2300      	movs	r3, #0
 800507a:	627b      	str	r3, [r7, #36]	@ 0x24
 800507c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005080:	4642      	mov	r2, r8
 8005082:	464b      	mov	r3, r9
 8005084:	f04f 0000 	mov.w	r0, #0
 8005088:	f04f 0100 	mov.w	r1, #0
 800508c:	0159      	lsls	r1, r3, #5
 800508e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005092:	0150      	lsls	r0, r2, #5
 8005094:	4602      	mov	r2, r0
 8005096:	460b      	mov	r3, r1
 8005098:	4641      	mov	r1, r8
 800509a:	ebb2 0a01 	subs.w	sl, r2, r1
 800509e:	4649      	mov	r1, r9
 80050a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050b8:	ebb2 040a 	subs.w	r4, r2, sl
 80050bc:	eb63 050b 	sbc.w	r5, r3, fp
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	00eb      	lsls	r3, r5, #3
 80050ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ce:	00e2      	lsls	r2, r4, #3
 80050d0:	4614      	mov	r4, r2
 80050d2:	461d      	mov	r5, r3
 80050d4:	4643      	mov	r3, r8
 80050d6:	18e3      	adds	r3, r4, r3
 80050d8:	603b      	str	r3, [r7, #0]
 80050da:	464b      	mov	r3, r9
 80050dc:	eb45 0303 	adc.w	r3, r5, r3
 80050e0:	607b      	str	r3, [r7, #4]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ee:	4629      	mov	r1, r5
 80050f0:	028b      	lsls	r3, r1, #10
 80050f2:	4621      	mov	r1, r4
 80050f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050f8:	4621      	mov	r1, r4
 80050fa:	028a      	lsls	r2, r1, #10
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005102:	2200      	movs	r2, #0
 8005104:	61bb      	str	r3, [r7, #24]
 8005106:	61fa      	str	r2, [r7, #28]
 8005108:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800510c:	f7fb f8b0 	bl	8000270 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4613      	mov	r3, r2
 8005116:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x200>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	3301      	adds	r3, #1
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005128:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800512a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005132:	e002      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <HAL_RCC_GetSysClockFreq+0x204>)
 8005136:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800513a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800513c:	4618      	mov	r0, r3
 800513e:	3750      	adds	r7, #80	@ 0x50
 8005140:	46bd      	mov	sp, r7
 8005142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800
 800514c:	00f42400 	.word	0x00f42400
 8005150:	007a1200 	.word	0x007a1200

08005154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005158:	4b03      	ldr	r3, [pc, #12]	@ (8005168 <HAL_RCC_GetHCLKFreq+0x14>)
 800515a:	681b      	ldr	r3, [r3, #0]
}
 800515c:	4618      	mov	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20000000 	.word	0x20000000

0800516c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005170:	f7ff fff0 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 8005174:	4602      	mov	r2, r0
 8005176:	4b05      	ldr	r3, [pc, #20]	@ (800518c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0a9b      	lsrs	r3, r3, #10
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4903      	ldr	r1, [pc, #12]	@ (8005190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005182:	5ccb      	ldrb	r3, [r1, r3]
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40023800 	.word	0x40023800
 8005190:	0800acd8 	.word	0x0800acd8

08005194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005198:	f7ff ffdc 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 800519c:	4602      	mov	r2, r0
 800519e:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	0b5b      	lsrs	r3, r3, #13
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	4903      	ldr	r1, [pc, #12]	@ (80051b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051aa:	5ccb      	ldrb	r3, [r1, r3]
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40023800 	.word	0x40023800
 80051b8:	0800acd8 	.word	0x0800acd8

080051bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d035      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051e4:	4b62      	ldr	r3, [pc, #392]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ea:	f7fc f93f 	bl	800146c <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051f2:	f7fc f93b 	bl	800146c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e0b0      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005204:	4b5b      	ldr	r3, [pc, #364]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	019a      	lsls	r2, r3, #6
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	071b      	lsls	r3, r3, #28
 800521c:	4955      	ldr	r1, [pc, #340]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005224:	4b52      	ldr	r3, [pc, #328]	@ (8005370 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005226:	2201      	movs	r2, #1
 8005228:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800522a:	f7fc f91f 	bl	800146c <HAL_GetTick>
 800522e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005230:	e008      	b.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005232:	f7fc f91b 	bl	800146c <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e090      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005244:	4b4b      	ldr	r3, [pc, #300]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0302 	and.w	r3, r3, #2
 8005258:	2b00      	cmp	r3, #0
 800525a:	f000 8083 	beq.w	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	4b44      	ldr	r3, [pc, #272]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	4a43      	ldr	r2, [pc, #268]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800526c:	6413      	str	r3, [r2, #64]	@ 0x40
 800526e:	4b41      	ldr	r3, [pc, #260]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800527a:	4b3f      	ldr	r3, [pc, #252]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a3e      	ldr	r2, [pc, #248]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005280:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005284:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005286:	f7fc f8f1 	bl	800146c <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800528c:	e008      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528e:	f7fc f8ed 	bl	800146c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e062      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80052a0:	4b35      	ldr	r3, [pc, #212]	@ (8005378 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d0f0      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052ac:	4b31      	ldr	r3, [pc, #196]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02f      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d028      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ca:	4b2a      	ldr	r3, [pc, #168]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052d4:	4b29      	ldr	r3, [pc, #164]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052da:	4b28      	ldr	r3, [pc, #160]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052e0:	4a24      	ldr	r2, [pc, #144]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052e6:	4b23      	ldr	r3, [pc, #140]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d114      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052f2:	f7fc f8bb 	bl	800146c <HAL_GetTick>
 80052f6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f8:	e00a      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fc f8b7 	bl	800146c <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e02a      	b.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005310:	4b18      	ldr	r3, [pc, #96]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0ee      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005328:	d10d      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800532a:	4b12      	ldr	r3, [pc, #72]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800533a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800533e:	490d      	ldr	r1, [pc, #52]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005340:	4313      	orrs	r3, r2
 8005342:	608b      	str	r3, [r1, #8]
 8005344:	e005      	b.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005346:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	4a0a      	ldr	r2, [pc, #40]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800534c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005350:	6093      	str	r3, [r2, #8]
 8005352:	4b08      	ldr	r3, [pc, #32]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005354:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800535e:	4905      	ldr	r1, [pc, #20]	@ (8005374 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005360:	4313      	orrs	r3, r2
 8005362:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	42470068 	.word	0x42470068
 8005374:	40023800 	.word	0x40023800
 8005378:	40007000 	.word	0x40007000
 800537c:	42470e40 	.word	0x42470e40

08005380 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005394:	2300      	movs	r3, #0
 8005396:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d13f      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800539e:	4b24      	ldr	r3, [pc, #144]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053a6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d006      	beq.n	80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80053b4:	d12f      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80053b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005434 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80053b8:	617b      	str	r3, [r7, #20]
          break;
 80053ba:	e02f      	b.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80053bc:	4b1c      	ldr	r3, [pc, #112]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053c8:	d108      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053ca:	4b19      	ldr	r3, [pc, #100]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053d2:	4a19      	ldr	r2, [pc, #100]	@ (8005438 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e007      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053dc:	4b14      	ldr	r3, [pc, #80]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053e4:	4a15      	ldr	r2, [pc, #84]	@ (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80053e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ea:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80053ec:	4b10      	ldr	r3, [pc, #64]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053f2:	099b      	lsrs	r3, r3, #6
 80053f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005400:	4b0b      	ldr	r3, [pc, #44]	@ (8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005406:	0f1b      	lsrs	r3, r3, #28
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005412:	617b      	str	r3, [r7, #20]
          break;
 8005414:	e002      	b.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]
          break;
 800541a:	bf00      	nop
        }
      }
      break;
 800541c:	e000      	b.n	8005420 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800541e:	bf00      	nop
    }
  }
  return frequency;
 8005420:	697b      	ldr	r3, [r7, #20]
}
 8005422:	4618      	mov	r0, r3
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800
 8005434:	00bb8000 	.word	0x00bb8000
 8005438:	007a1200 	.word	0x007a1200
 800543c:	00f42400 	.word	0x00f42400

08005440 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e01c      	b.n	800548c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	795b      	ldrb	r3, [r3, #5]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d105      	bne.n	8005468 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fb fdec 	bl	8001040 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0204 	orr.w	r2, r2, #4
 800547c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	791b      	ldrb	r3, [r3, #4]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_RNG_GenerateRandomNumber+0x1a>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e044      	b.n	8005538 <HAL_RNG_GenerateRandomNumber+0xa4>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	795b      	ldrb	r3, [r3, #5]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d133      	bne.n	8005526 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054c4:	f7fb ffd2 	bl	800146c <HAL_GetTick>
 80054c8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80054ca:	e018      	b.n	80054fe <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80054cc:	f7fb ffce 	bl	800146c <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d911      	bls.n	80054fe <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d00a      	beq.n	80054fe <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e01c      	b.n	8005538 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d1df      	bne.n	80054cc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	689a      	ldr	r2, [r3, #8]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	715a      	strb	r2, [r3, #5]
 8005524:	e004      	b.n	8005530 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2204      	movs	r2, #4
 800552a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	711a      	strb	r2, [r3, #4]

  return status;
 8005536:	7bfb      	ldrb	r3, [r7, #15]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3710      	adds	r7, #16
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e07b      	b.n	800564a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005556:	2b00      	cmp	r3, #0
 8005558:	d108      	bne.n	800556c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005562:	d009      	beq.n	8005578 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	61da      	str	r2, [r3, #28]
 800556a:	e005      	b.n	8005578 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fb fd76 	bl	8001084 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055f2:	431a      	orrs	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
 80055f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fc:	ea42 0103 	orr.w	r1, r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005604:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	0c1b      	lsrs	r3, r3, #16
 8005616:	f003 0104 	and.w	r1, r3, #4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561e:	f003 0210 	and.w	r2, r3, #16
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005638:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b082      	sub	sp, #8
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e042      	b.n	80056ea <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d106      	bne.n	800567e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7fb fd4b 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2224      	movs	r2, #36	@ 0x24
 8005682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005694:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f972 	bl	8005980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3708      	adds	r7, #8
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f2:	b580      	push	{r7, lr}
 80056f4:	b08a      	sub	sp, #40	@ 0x28
 80056f6:	af02      	add	r7, sp, #8
 80056f8:	60f8      	str	r0, [r7, #12]
 80056fa:	60b9      	str	r1, [r7, #8]
 80056fc:	603b      	str	r3, [r7, #0]
 80056fe:	4613      	mov	r3, r2
 8005700:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005702:	2300      	movs	r3, #0
 8005704:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b20      	cmp	r3, #32
 8005710:	d175      	bne.n	80057fe <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <HAL_UART_Transmit+0x2c>
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e06e      	b.n	8005800 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2221      	movs	r2, #33	@ 0x21
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005730:	f7fb fe9c 	bl	800146c <HAL_GetTick>
 8005734:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	88fa      	ldrh	r2, [r7, #6]
 800573a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	88fa      	ldrh	r2, [r7, #6]
 8005740:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800574a:	d108      	bne.n	800575e <HAL_UART_Transmit+0x6c>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d104      	bne.n	800575e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	e003      	b.n	8005766 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005766:	e02e      	b.n	80057c6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2200      	movs	r2, #0
 8005770:	2180      	movs	r1, #128	@ 0x80
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f848 	bl	8005808 <UART_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d005      	beq.n	800578a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e03a      	b.n	8005800 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10b      	bne.n	80057a8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	881b      	ldrh	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	3302      	adds	r3, #2
 80057a4:	61bb      	str	r3, [r7, #24]
 80057a6:	e007      	b.n	80057b8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	781a      	ldrb	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	3301      	adds	r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1cb      	bne.n	8005768 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	2200      	movs	r2, #0
 80057d8:	2140      	movs	r1, #64	@ 0x40
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 f814 	bl	8005808 <UART_WaitOnFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e006      	b.n	8005800 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80057fa:	2300      	movs	r3, #0
 80057fc:	e000      	b.n	8005800 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057fe:	2302      	movs	r3, #2
  }
}
 8005800:	4618      	mov	r0, r3
 8005802:	3720      	adds	r7, #32
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	4613      	mov	r3, r2
 8005816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005818:	e03b      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d037      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005822:	f7fb fe23 	bl	800146c <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	6a3a      	ldr	r2, [r7, #32]
 800582e:	429a      	cmp	r2, r3
 8005830:	d302      	bcc.n	8005838 <UART_WaitOnFlagUntilTimeout+0x30>
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e03a      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d023      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b80      	cmp	r3, #128	@ 0x80
 800584e:	d020      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	2b40      	cmp	r3, #64	@ 0x40
 8005854:	d01d      	beq.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b08      	cmp	r3, #8
 8005862:	d116      	bne.n	8005892 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f81d 	bl	80058ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2208      	movs	r2, #8
 8005884:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e00f      	b.n	80058b2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4013      	ands	r3, r2
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	429a      	cmp	r2, r3
 80058a0:	bf0c      	ite	eq
 80058a2:	2301      	moveq	r3, #1
 80058a4:	2300      	movne	r3, #0
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d0b4      	beq.n	800581a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3718      	adds	r7, #24
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b095      	sub	sp, #84	@ 0x54
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	330c      	adds	r3, #12
 80058c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	330c      	adds	r3, #12
 80058e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80058e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058ea:	e841 2300 	strex	r3, r2, [r1]
 80058ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1e5      	bne.n	80058c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3314      	adds	r3, #20
 80058fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	e853 3f00 	ldrex	r3, [r3]
 8005904:	61fb      	str	r3, [r7, #28]
   return(result);
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3314      	adds	r3, #20
 8005914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005916:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005918:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800591c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e5      	bne.n	80058f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	2b01      	cmp	r3, #1
 8005930:	d119      	bne.n	8005966 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	60bb      	str	r3, [r7, #8]
   return(result);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 0310 	bic.w	r3, r3, #16
 8005948:	647b      	str	r3, [r7, #68]	@ 0x44
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	330c      	adds	r3, #12
 8005950:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005952:	61ba      	str	r2, [r7, #24]
 8005954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	613b      	str	r3, [r7, #16]
   return(result);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005974:	bf00      	nop
 8005976:	3754      	adds	r7, #84	@ 0x54
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005984:	b0c0      	sub	sp, #256	@ 0x100
 8005986:	af00      	add	r7, sp, #0
 8005988:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	68d9      	ldr	r1, [r3, #12]
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	ea40 0301 	orr.w	r3, r0, r1
 80059a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	431a      	orrs	r2, r3
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059d8:	f021 010c 	bic.w	r1, r1, #12
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059e6:	430b      	orrs	r3, r1
 80059e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fa:	6999      	ldr	r1, [r3, #24]
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	ea40 0301 	orr.w	r3, r0, r1
 8005a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c4c <UART_SetConfig+0x2cc>)
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d005      	beq.n	8005a20 <UART_SetConfig+0xa0>
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c50 <UART_SetConfig+0x2d0>)
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d104      	bne.n	8005a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a20:	f7ff fbb8 	bl	8005194 <HAL_RCC_GetPCLK2Freq>
 8005a24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a28:	e003      	b.n	8005a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2a:	f7ff fb9f 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 8005a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a3c:	f040 810c 	bne.w	8005c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	1891      	adds	r1, r2, r2
 8005a58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a5a:	415b      	adcs	r3, r3
 8005a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a62:	4621      	mov	r1, r4
 8005a64:	eb12 0801 	adds.w	r8, r2, r1
 8005a68:	4629      	mov	r1, r5
 8005a6a:	eb43 0901 	adc.w	r9, r3, r1
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a82:	4690      	mov	r8, r2
 8005a84:	4699      	mov	r9, r3
 8005a86:	4623      	mov	r3, r4
 8005a88:	eb18 0303 	adds.w	r3, r8, r3
 8005a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a90:	462b      	mov	r3, r5
 8005a92:	eb49 0303 	adc.w	r3, r9, r3
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005aae:	460b      	mov	r3, r1
 8005ab0:	18db      	adds	r3, r3, r3
 8005ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	eb42 0303 	adc.w	r3, r2, r3
 8005aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8005abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ac4:	f7fa fbd4 	bl	8000270 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4b61      	ldr	r3, [pc, #388]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005ace:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	011c      	lsls	r4, r3, #4
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	1891      	adds	r1, r2, r2
 8005aee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005af0:	415b      	adcs	r3, r3
 8005af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005af8:	4641      	mov	r1, r8
 8005afa:	eb12 0a01 	adds.w	sl, r2, r1
 8005afe:	4649      	mov	r1, r9
 8005b00:	eb43 0b01 	adc.w	fp, r3, r1
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b18:	4692      	mov	sl, r2
 8005b1a:	469b      	mov	fp, r3
 8005b1c:	4643      	mov	r3, r8
 8005b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b26:	464b      	mov	r3, r9
 8005b28:	eb4b 0303 	adc.w	r3, fp, r3
 8005b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b44:	460b      	mov	r3, r1
 8005b46:	18db      	adds	r3, r3, r3
 8005b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	eb42 0303 	adc.w	r3, r2, r3
 8005b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b5a:	f7fa fb89 	bl	8000270 <__aeabi_uldivmod>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	4b3b      	ldr	r3, [pc, #236]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005b66:	fba3 2301 	umull	r2, r3, r3, r1
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2264      	movs	r2, #100	@ 0x64
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	1acb      	subs	r3, r1, r3
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b7a:	4b36      	ldr	r3, [pc, #216]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b88:	441c      	add	r4, r3
 8005b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bac:	4641      	mov	r1, r8
 8005bae:	1851      	adds	r1, r2, r1
 8005bb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	414b      	adcs	r3, r1
 8005bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	00cb      	lsls	r3, r1, #3
 8005bc8:	4651      	mov	r1, sl
 8005bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bce:	4651      	mov	r1, sl
 8005bd0:	00ca      	lsls	r2, r1, #3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4642      	mov	r2, r8
 8005bda:	189b      	adds	r3, r3, r2
 8005bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005be0:	464b      	mov	r3, r9
 8005be2:	460a      	mov	r2, r1
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c00:	460b      	mov	r3, r1
 8005c02:	18db      	adds	r3, r3, r3
 8005c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c06:	4613      	mov	r3, r2
 8005c08:	eb42 0303 	adc.w	r3, r2, r3
 8005c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c16:	f7fa fb2b 	bl	8000270 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005c20:	fba3 1302 	umull	r1, r3, r3, r2
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	2164      	movs	r1, #100	@ 0x64
 8005c28:	fb01 f303 	mul.w	r3, r1, r3
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	3332      	adds	r3, #50	@ 0x32
 8005c32:	4a08      	ldr	r2, [pc, #32]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	f003 0207 	and.w	r2, r3, #7
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4422      	add	r2, r4
 8005c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c48:	e106      	b.n	8005e58 <UART_SetConfig+0x4d8>
 8005c4a:	bf00      	nop
 8005c4c:	40011000 	.word	0x40011000
 8005c50:	40011400 	.word	0x40011400
 8005c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	1891      	adds	r1, r2, r2
 8005c70:	6239      	str	r1, [r7, #32]
 8005c72:	415b      	adcs	r3, r3
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c7a:	4641      	mov	r1, r8
 8005c7c:	1854      	adds	r4, r2, r1
 8005c7e:	4649      	mov	r1, r9
 8005c80:	eb43 0501 	adc.w	r5, r3, r1
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	00eb      	lsls	r3, r5, #3
 8005c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c92:	00e2      	lsls	r2, r4, #3
 8005c94:	4614      	mov	r4, r2
 8005c96:	461d      	mov	r5, r3
 8005c98:	4643      	mov	r3, r8
 8005c9a:	18e3      	adds	r3, r4, r3
 8005c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	eb45 0303 	adc.w	r3, r5, r3
 8005ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	008b      	lsls	r3, r1, #2
 8005cca:	4621      	mov	r1, r4
 8005ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	008a      	lsls	r2, r1, #2
 8005cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cd8:	f7fa faca 	bl	8000270 <__aeabi_uldivmod>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4b60      	ldr	r3, [pc, #384]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	011c      	lsls	r4, r3, #4
 8005cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	61b9      	str	r1, [r7, #24]
 8005d04:	415b      	adcs	r3, r3
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	1851      	adds	r1, r2, r1
 8005d10:	6139      	str	r1, [r7, #16]
 8005d12:	4649      	mov	r1, r9
 8005d14:	414b      	adcs	r3, r1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d24:	4659      	mov	r1, fp
 8005d26:	00cb      	lsls	r3, r1, #3
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d2e:	4651      	mov	r1, sl
 8005d30:	00ca      	lsls	r2, r1, #3
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	4642      	mov	r2, r8
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d40:	464b      	mov	r3, r9
 8005d42:	460a      	mov	r2, r1
 8005d44:	eb42 0303 	adc.w	r3, r2, r3
 8005d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d64:	4649      	mov	r1, r9
 8005d66:	008b      	lsls	r3, r1, #2
 8005d68:	4641      	mov	r1, r8
 8005d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6e:	4641      	mov	r1, r8
 8005d70:	008a      	lsls	r2, r1, #2
 8005d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d76:	f7fa fa7b 	bl	8000270 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4b38      	ldr	r3, [pc, #224]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005d82:	fba3 2301 	umull	r2, r3, r3, r1
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2264      	movs	r2, #100	@ 0x64
 8005d8a:	fb02 f303 	mul.w	r3, r2, r3
 8005d8e:	1acb      	subs	r3, r1, r3
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	3332      	adds	r3, #50	@ 0x32
 8005d94:	4a33      	ldr	r2, [pc, #204]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da0:	441c      	add	r4, r3
 8005da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da6:	2200      	movs	r2, #0
 8005da8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005daa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	1891      	adds	r1, r2, r2
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	415b      	adcs	r3, r3
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	1851      	adds	r1, r2, r1
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	414b      	adcs	r3, r1
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dd8:	4659      	mov	r1, fp
 8005dda:	00cb      	lsls	r3, r1, #3
 8005ddc:	4651      	mov	r1, sl
 8005dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de2:	4651      	mov	r1, sl
 8005de4:	00ca      	lsls	r2, r1, #3
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	4642      	mov	r2, r8
 8005dee:	189b      	adds	r3, r3, r2
 8005df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df2:	464b      	mov	r3, r9
 8005df4:	460a      	mov	r2, r1
 8005df6:	eb42 0303 	adc.w	r3, r2, r3
 8005dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e06:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e14:	4649      	mov	r1, r9
 8005e16:	008b      	lsls	r3, r1, #2
 8005e18:	4641      	mov	r1, r8
 8005e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e1e:	4641      	mov	r1, r8
 8005e20:	008a      	lsls	r2, r1, #2
 8005e22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e26:	f7fa fa23 	bl	8000270 <__aeabi_uldivmod>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005e30:	fba3 1302 	umull	r1, r3, r3, r2
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	2164      	movs	r1, #100	@ 0x64
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	3332      	adds	r3, #50	@ 0x32
 8005e42:	4a08      	ldr	r2, [pc, #32]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	f003 020f 	and.w	r2, r3, #15
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4422      	add	r2, r4
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e64:	51eb851f 	.word	0x51eb851f

08005e68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e68:	b084      	sub	sp, #16
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	f107 001c 	add.w	r0, r7, #28
 8005e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d123      	bne.n	8005eca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d105      	bne.n	8005ebe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9dc 	bl	800627c <USB_CoreReset>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	e01b      	b.n	8005f02 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9d0 	bl	800627c <USB_CoreReset>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ee0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ef4:	e005      	b.n	8005f02 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f02:	7fbb      	ldrb	r3, [r7, #30]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10b      	bne.n	8005f20 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f043 0206 	orr.w	r2, r3, #6
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f043 0220 	orr.w	r2, r3, #32
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f2c:	b004      	add	sp, #16
 8005f2e:	4770      	bx	lr

08005f30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f043 0201 	orr.w	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f023 0201 	bic.w	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d115      	bne.n	8005fc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fa2:	200a      	movs	r0, #10
 8005fa4:	f7fb fa6e 	bl	8001484 <HAL_Delay>
      ms += 10U;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	330a      	adds	r3, #10
 8005fac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f956 	bl	8006260 <USB_GetMode>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d01e      	beq.n	8005ff8 <USB_SetCurrentMode+0x84>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fbe:	d9f0      	bls.n	8005fa2 <USB_SetCurrentMode+0x2e>
 8005fc0:	e01a      	b.n	8005ff8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d115      	bne.n	8005ff4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fd4:	200a      	movs	r0, #10
 8005fd6:	f7fb fa55 	bl	8001484 <HAL_Delay>
      ms += 10U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	330a      	adds	r3, #10
 8005fde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f93d 	bl	8006260 <USB_GetMode>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <USB_SetCurrentMode+0x84>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2bc7      	cmp	r3, #199	@ 0xc7
 8005ff0:	d9f0      	bls.n	8005fd4 <USB_SetCurrentMode+0x60>
 8005ff2:	e001      	b.n	8005ff8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e005      	b.n	8006004 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2bc8      	cmp	r3, #200	@ 0xc8
 8005ffc:	d101      	bne.n	8006002 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e000      	b.n	8006004 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006026:	d901      	bls.n	800602c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e01b      	b.n	8006064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	daf2      	bge.n	800601a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006034:	2300      	movs	r3, #0
 8006036:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	019b      	lsls	r3, r3, #6
 800603c:	f043 0220 	orr.w	r2, r3, #32
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006050:	d901      	bls.n	8006056 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e006      	b.n	8006064 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b20      	cmp	r3, #32
 8006060:	d0f0      	beq.n	8006044 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006088:	d901      	bls.n	800608e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e018      	b.n	80060c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	daf2      	bge.n	800607c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2210      	movs	r2, #16
 800609e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060ac:	d901      	bls.n	80060b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e006      	b.n	80060c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b10      	cmp	r3, #16
 80060bc:	d0f0      	beq.n	80060a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b089      	sub	sp, #36	@ 0x24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4611      	mov	r1, r2
 80060d8:	461a      	mov	r2, r3
 80060da:	460b      	mov	r3, r1
 80060dc:	71fb      	strb	r3, [r7, #7]
 80060de:	4613      	mov	r3, r2
 80060e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d123      	bne.n	800613a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060f2:	88bb      	ldrh	r3, [r7, #4]
 80060f4:	3303      	adds	r3, #3
 80060f6:	089b      	lsrs	r3, r3, #2
 80060f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e018      	b.n	8006132 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006100:	79fb      	ldrb	r3, [r7, #7]
 8006102:	031a      	lsls	r2, r3, #12
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	4413      	add	r3, r2
 8006108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800610c:	461a      	mov	r2, r3
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	3301      	adds	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	3301      	adds	r3, #1
 800611e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3301      	adds	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	3301      	adds	r3, #1
 800612a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	3301      	adds	r3, #1
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	429a      	cmp	r2, r3
 8006138:	d3e2      	bcc.n	8006100 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3724      	adds	r7, #36	@ 0x24
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006148:	b480      	push	{r7}
 800614a:	b08b      	sub	sp, #44	@ 0x2c
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800615e:	88fb      	ldrh	r3, [r7, #6]
 8006160:	089b      	lsrs	r3, r3, #2
 8006162:	b29b      	uxth	r3, r3
 8006164:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006166:	88fb      	ldrh	r3, [r7, #6]
 8006168:	f003 0303 	and.w	r3, r3, #3
 800616c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800616e:	2300      	movs	r3, #0
 8006170:	623b      	str	r3, [r7, #32]
 8006172:	e014      	b.n	800619e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006182:	3301      	adds	r3, #1
 8006184:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	3301      	adds	r3, #1
 800618a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800618c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618e:	3301      	adds	r3, #1
 8006190:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	3301      	adds	r3, #1
 8006196:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	3301      	adds	r3, #1
 800619c:	623b      	str	r3, [r7, #32]
 800619e:	6a3a      	ldr	r2, [r7, #32]
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d3e6      	bcc.n	8006174 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80061a6:	8bfb      	ldrh	r3, [r7, #30]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d01e      	beq.n	80061ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061b6:	461a      	mov	r2, r3
 80061b8:	f107 0310 	add.w	r3, r7, #16
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	6a3b      	ldr	r3, [r7, #32]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d0:	701a      	strb	r2, [r3, #0]
      i++;
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	3301      	adds	r3, #1
 80061d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061da:	3301      	adds	r3, #1
 80061dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80061de:	8bfb      	ldrh	r3, [r7, #30]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061e4:	8bfb      	ldrh	r3, [r7, #30]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1ea      	bne.n	80061c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	372c      	adds	r7, #44	@ 0x2c
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4013      	ands	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006210:	68fb      	ldr	r3, [r7, #12]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800621e:	b480      	push	{r7}
 8006220:	b085      	sub	sp, #20
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	460b      	mov	r3, r1
 8006228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4413      	add	r3, r2
 8006236:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800623e:	78fb      	ldrb	r3, [r7, #3]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	4013      	ands	r3, r2
 8006250:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006252:	68bb      	ldr	r3, [r7, #8]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	f003 0301 	and.w	r3, r3, #1
}
 8006270:	4618      	mov	r0, r3
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006294:	d901      	bls.n	800629a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e01b      	b.n	80062d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	daf2      	bge.n	8006288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f043 0201 	orr.w	r2, r3, #1
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062be:	d901      	bls.n	80062c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e006      	b.n	80062d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d0f0      	beq.n	80062b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
	...

080062e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062e0:	b084      	sub	sp, #16
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80062ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006300:	461a      	mov	r2, r3
 8006302:	2300      	movs	r3, #0
 8006304:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006316:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006322:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d119      	bne.n	800636a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006336:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800633a:	2b01      	cmp	r3, #1
 800633c:	d10a      	bne.n	8006354 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800634c:	f043 0304 	orr.w	r3, r3, #4
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	e014      	b.n	800637e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006362:	f023 0304 	bic.w	r3, r3, #4
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	e009      	b.n	800637e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006378:	f023 0304 	bic.w	r3, r3, #4
 800637c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800637e:	2110      	movs	r1, #16
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f7ff fe43 	bl	800600c <USB_FlushTxFifo>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7ff fe6d 	bl	8006070 <USB_FlushRxFifo>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	613b      	str	r3, [r7, #16]
 80063a4:	e015      	b.n	80063d2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063b2:	461a      	mov	r2, r3
 80063b4:	f04f 33ff 	mov.w	r3, #4294967295
 80063b8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063c6:	461a      	mov	r2, r3
 80063c8:	2300      	movs	r3, #0
 80063ca:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	3301      	adds	r3, #1
 80063d0:	613b      	str	r3, [r7, #16]
 80063d2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063d6:	461a      	mov	r2, r3
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4293      	cmp	r3, r2
 80063dc:	d3e3      	bcc.n	80063a6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f04f 32ff 	mov.w	r2, #4294967295
 80063ea:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a18      	ldr	r2, [pc, #96]	@ (8006450 <USB_HostInit+0x170>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d10b      	bne.n	800640c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063fa:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a15      	ldr	r2, [pc, #84]	@ (8006454 <USB_HostInit+0x174>)
 8006400:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a14      	ldr	r2, [pc, #80]	@ (8006458 <USB_HostInit+0x178>)
 8006406:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800640a:	e009      	b.n	8006420 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2280      	movs	r2, #128	@ 0x80
 8006410:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a11      	ldr	r2, [pc, #68]	@ (800645c <USB_HostInit+0x17c>)
 8006416:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a11      	ldr	r2, [pc, #68]	@ (8006460 <USB_HostInit+0x180>)
 800641c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006420:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006424:	2b00      	cmp	r3, #0
 8006426:	d105      	bne.n	8006434 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f043 0210 	orr.w	r2, r3, #16
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	4b0a      	ldr	r3, [pc, #40]	@ (8006464 <USB_HostInit+0x184>)
 800643a:	4313      	orrs	r3, r2
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3718      	adds	r7, #24
 8006446:	46bd      	mov	sp, r7
 8006448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800644c:	b004      	add	sp, #16
 800644e:	4770      	bx	lr
 8006450:	40040000 	.word	0x40040000
 8006454:	01000200 	.word	0x01000200
 8006458:	00e00300 	.word	0x00e00300
 800645c:	00600080 	.word	0x00600080
 8006460:	004000e0 	.word	0x004000e0
 8006464:	a3200008 	.word	0xa3200008

08006468 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006486:	f023 0303 	bic.w	r3, r3, #3
 800648a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	68f9      	ldr	r1, [r7, #12]
 800649c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064a0:	4313      	orrs	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80064a4:	78fb      	ldrb	r3, [r7, #3]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d107      	bne.n	80064ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064b0:	461a      	mov	r2, r3
 80064b2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80064b6:	6053      	str	r3, [r2, #4]
 80064b8:	e00c      	b.n	80064d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80064ba:	78fb      	ldrb	r3, [r7, #3]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d107      	bne.n	80064d0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064c6:	461a      	mov	r2, r3
 80064c8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80064cc:	6053      	str	r3, [r2, #4]
 80064ce:	e001      	b.n	80064d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006502:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800650c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006510:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006512:	2064      	movs	r0, #100	@ 0x64
 8006514:	f7fa ffb6 	bl	8001484 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006524:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006526:	200a      	movs	r0, #10
 8006528:	f7fa ffac 	bl	8001484 <HAL_Delay>

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006536:	b480      	push	{r7}
 8006538:	b085      	sub	sp, #20
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800655a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <USB_DriveVbus+0x44>
 8006566:	78fb      	ldrb	r3, [r7, #3]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d106      	bne.n	800657a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006574:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006578:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006584:	d109      	bne.n	800659a <USB_DriveVbus+0x64>
 8006586:	78fb      	ldrb	r3, [r7, #3]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006598:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3714      	adds	r7, #20
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr

080065a8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	0c5b      	lsrs	r3, r3, #17
 80065c6:	f003 0303 	and.w	r3, r3, #3
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	b29b      	uxth	r3, r3
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	4608      	mov	r0, r1
 8006602:	4611      	mov	r1, r2
 8006604:	461a      	mov	r2, r3
 8006606:	4603      	mov	r3, r0
 8006608:	70fb      	strb	r3, [r7, #3]
 800660a:	460b      	mov	r3, r1
 800660c:	70bb      	strb	r3, [r7, #2]
 800660e:	4613      	mov	r3, r2
 8006610:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006612:	2300      	movs	r3, #0
 8006614:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	4413      	add	r3, r2
 8006622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006626:	461a      	mov	r2, r3
 8006628:	f04f 33ff 	mov.w	r3, #4294967295
 800662c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800662e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006632:	2b03      	cmp	r3, #3
 8006634:	d87c      	bhi.n	8006730 <USB_HC_Init+0x138>
 8006636:	a201      	add	r2, pc, #4	@ (adr r2, 800663c <USB_HC_Init+0x44>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	0800664d 	.word	0x0800664d
 8006640:	080066f3 	.word	0x080066f3
 8006644:	0800664d 	.word	0x0800664d
 8006648:	080066b5 	.word	0x080066b5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800664c:	78fb      	ldrb	r3, [r7, #3]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	4413      	add	r3, r2
 8006654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006658:	461a      	mov	r2, r3
 800665a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800665e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006660:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006664:	2b00      	cmp	r3, #0
 8006666:	da10      	bge.n	800668a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006668:	78fb      	ldrb	r3, [r7, #3]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4413      	add	r3, r2
 8006670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	78fa      	ldrb	r2, [r7, #3]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	440a      	add	r2, r1
 800667e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006682:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006686:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006688:	e055      	b.n	8006736 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a6f      	ldr	r2, [pc, #444]	@ (800684c <USB_HC_Init+0x254>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d151      	bne.n	8006736 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	4413      	add	r3, r2
 800669a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80066b0:	60d3      	str	r3, [r2, #12]
      break;
 80066b2:	e040      	b.n	8006736 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066c0:	461a      	mov	r2, r3
 80066c2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80066c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	da34      	bge.n	800673a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	78fa      	ldrb	r2, [r7, #3]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066ee:	60d3      	str	r3, [r2, #12]
      }

      break;
 80066f0:	e023      	b.n	800673a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066f2:	78fb      	ldrb	r3, [r7, #3]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066fe:	461a      	mov	r2, r3
 8006700:	f240 2325 	movw	r3, #549	@ 0x225
 8006704:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006706:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800670a:	2b00      	cmp	r3, #0
 800670c:	da17      	bge.n	800673e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800670e:	78fb      	ldrb	r3, [r7, #3]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	78fa      	ldrb	r2, [r7, #3]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	440a      	add	r2, r1
 8006724:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006728:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800672c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800672e:	e006      	b.n	800673e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	77fb      	strb	r3, [r7, #31]
      break;
 8006734:	e004      	b.n	8006740 <USB_HC_Init+0x148>
      break;
 8006736:	bf00      	nop
 8006738:	e002      	b.n	8006740 <USB_HC_Init+0x148>
      break;
 800673a:	bf00      	nop
 800673c:	e000      	b.n	8006740 <USB_HC_Init+0x148>
      break;
 800673e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4413      	add	r3, r2
 8006748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800674c:	461a      	mov	r2, r3
 800674e:	2300      	movs	r3, #0
 8006750:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4413      	add	r3, r2
 800675a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	78fa      	ldrb	r2, [r7, #3]
 8006762:	0151      	lsls	r1, r2, #5
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	440a      	add	r2, r1
 8006768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800676c:	f043 0302 	orr.w	r3, r3, #2
 8006770:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	2101      	movs	r1, #1
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	6939      	ldr	r1, [r7, #16]
 8006788:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800678c:	4313      	orrs	r3, r2
 800678e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800679c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	da03      	bge.n	80067ac <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80067a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	e001      	b.n	80067b0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff fef9 	bl	80065a8 <USB_GetHostSpeed>
 80067b6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80067b8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d106      	bne.n	80067ce <USB_HC_Init+0x1d6>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d003      	beq.n	80067ce <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80067c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e001      	b.n	80067d2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80067ce:	2300      	movs	r3, #0
 80067d0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067d2:	787b      	ldrb	r3, [r7, #1]
 80067d4:	059b      	lsls	r3, r3, #22
 80067d6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067da:	78bb      	ldrb	r3, [r7, #2]
 80067dc:	02db      	lsls	r3, r3, #11
 80067de:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067e2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067e8:	049b      	lsls	r3, r3, #18
 80067ea:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067ee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80067f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80067f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067f6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	440a      	add	r2, r1
 8006808:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800680c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006810:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006812:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006816:	2b03      	cmp	r3, #3
 8006818:	d003      	beq.n	8006822 <USB_HC_Init+0x22a>
 800681a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800681e:	2b01      	cmp	r3, #1
 8006820:	d10f      	bne.n	8006842 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	4413      	add	r3, r2
 800682a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	78fa      	ldrb	r2, [r7, #3]
 8006832:	0151      	lsls	r1, r2, #5
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	440a      	add	r2, r1
 8006838:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800683c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006840:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006842:	7ffb      	ldrb	r3, [r7, #31]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40040000 	.word	0x40040000

08006850 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08c      	sub	sp, #48	@ 0x30
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006868:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800686c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a5d      	ldr	r2, [pc, #372]	@ (80069e8 <USB_HC_StartXfer+0x198>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d12f      	bne.n	80068d6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d11c      	bne.n	80068b6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	7c9b      	ldrb	r3, [r3, #18]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <USB_HC_StartXfer+0x3c>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	7c9b      	ldrb	r3, [r3, #18]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d124      	bne.n	80068d6 <USB_HC_StartXfer+0x86>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	799b      	ldrb	r3, [r3, #6]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d120      	bne.n	80068d6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	4413      	add	r3, r2
 800689c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	69fa      	ldr	r2, [r7, #28]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	6a3a      	ldr	r2, [r7, #32]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068b2:	60d3      	str	r3, [r2, #12]
 80068b4:	e00f      	b.n	80068d6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	791b      	ldrb	r3, [r3, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10b      	bne.n	80068d6 <USB_HC_StartXfer+0x86>
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	795b      	ldrb	r3, [r3, #5]
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d107      	bne.n	80068d6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	785b      	ldrb	r3, [r3, #1]
 80068ca:	4619      	mov	r1, r3
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f000 fb6b 	bl	8006fa8 <USB_DoPing>
        return HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e232      	b.n	8006d3c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	799b      	ldrb	r3, [r3, #6]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d158      	bne.n	8006990 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80068de:	2301      	movs	r3, #1
 80068e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	78db      	ldrb	r3, [r3, #3]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d007      	beq.n	80068fa <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80068ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	8a92      	ldrh	r2, [r2, #20]
 80068f0:	fb03 f202 	mul.w	r2, r3, r2
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	61da      	str	r2, [r3, #28]
 80068f8:	e07c      	b.n	80069f4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	7c9b      	ldrb	r3, [r3, #18]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d130      	bne.n	8006964 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	2bbc      	cmp	r3, #188	@ 0xbc
 8006908:	d918      	bls.n	800693c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	8a9b      	ldrh	r3, [r3, #20]
 800690e:	461a      	mov	r2, r3
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d003      	beq.n	800692c <USB_HC_StartXfer+0xdc>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2b02      	cmp	r3, #2
 800692a:	d103      	bne.n	8006934 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2202      	movs	r2, #2
 8006930:	60da      	str	r2, [r3, #12]
 8006932:	e05f      	b.n	80069f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2201      	movs	r2, #1
 8006938:	60da      	str	r2, [r3, #12]
 800693a:	e05b      	b.n	80069f4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	6a1a      	ldr	r2, [r3, #32]
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d007      	beq.n	800695c <USB_HC_StartXfer+0x10c>
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d003      	beq.n	800695c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2204      	movs	r2, #4
 8006958:	60da      	str	r2, [r3, #12]
 800695a:	e04b      	b.n	80069f4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	2203      	movs	r2, #3
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	e047      	b.n	80069f4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d10d      	bne.n	8006986 <USB_HC_StartXfer+0x136>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	8a92      	ldrh	r2, [r2, #20]
 8006972:	4293      	cmp	r3, r2
 8006974:	d907      	bls.n	8006986 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006976:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	8a92      	ldrh	r2, [r2, #20]
 800697c:	fb03 f202 	mul.w	r2, r3, r2
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	61da      	str	r2, [r3, #28]
 8006984:	e036      	b.n	80069f4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	6a1a      	ldr	r2, [r3, #32]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	61da      	str	r2, [r3, #28]
 800698e:	e031      	b.n	80069f4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d018      	beq.n	80069ca <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	8a92      	ldrh	r2, [r2, #20]
 80069a0:	4413      	add	r3, r2
 80069a2:	3b01      	subs	r3, #1
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	8a92      	ldrh	r2, [r2, #20]
 80069a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80069ae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80069b0:	8b7b      	ldrh	r3, [r7, #26]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d90b      	bls.n	80069ce <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80069b6:	8b7b      	ldrh	r3, [r7, #26]
 80069b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	8a92      	ldrh	r2, [r2, #20]
 80069c0:	fb03 f202 	mul.w	r2, r3, r2
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	61da      	str	r2, [r3, #28]
 80069c8:	e001      	b.n	80069ce <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80069ca:	2301      	movs	r3, #1
 80069cc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	78db      	ldrb	r3, [r3, #3]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80069d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	8a92      	ldrh	r2, [r2, #20]
 80069dc:	fb03 f202 	mul.w	r2, r3, r2
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	61da      	str	r2, [r3, #28]
 80069e4:	e006      	b.n	80069f4 <USB_HC_StartXfer+0x1a4>
 80069e6:	bf00      	nop
 80069e8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	6a1a      	ldr	r2, [r3, #32]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	69db      	ldr	r3, [r3, #28]
 80069f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80069fe:	04d9      	lsls	r1, r3, #19
 8006a00:	4ba3      	ldr	r3, [pc, #652]	@ (8006c90 <USB_HC_StartXfer+0x440>)
 8006a02:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a04:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	7d9b      	ldrb	r3, [r3, #22]
 8006a0a:	075b      	lsls	r3, r3, #29
 8006a0c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a10:	69f9      	ldr	r1, [r7, #28]
 8006a12:	0148      	lsls	r0, r1, #5
 8006a14:	6a39      	ldr	r1, [r7, #32]
 8006a16:	4401      	add	r1, r0
 8006a18:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a1c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006a1e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d009      	beq.n	8006a3a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6999      	ldr	r1, [r3, #24]
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a36:	460a      	mov	r2, r1
 8006a38:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	bf0c      	ite	eq
 8006a4a:	2301      	moveq	r3, #1
 8006a4c:	2300      	movne	r3, #0
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	015a      	lsls	r2, r3, #5
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69fa      	ldr	r2, [r7, #28]
 8006a62:	0151      	lsls	r1, r2, #5
 8006a64:	6a3a      	ldr	r2, [r7, #32]
 8006a66:	440a      	add	r2, r1
 8006a68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a70:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	7e7b      	ldrb	r3, [r7, #25]
 8006a82:	075b      	lsls	r3, r3, #29
 8006a84:	69f9      	ldr	r1, [r7, #28]
 8006a86:	0148      	lsls	r0, r1, #5
 8006a88:	6a39      	ldr	r1, [r7, #32]
 8006a8a:	4401      	add	r1, r0
 8006a8c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006a90:	4313      	orrs	r3, r2
 8006a92:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	799b      	ldrb	r3, [r3, #6]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	f040 80c3 	bne.w	8006c24 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	7c5b      	ldrb	r3, [r3, #17]
 8006aa2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	69fa      	ldr	r2, [r7, #28]
 8006aac:	0151      	lsls	r1, r2, #5
 8006aae:	6a3a      	ldr	r2, [r7, #32]
 8006ab0:	440a      	add	r2, r1
 8006ab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006aba:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	6a3a      	ldr	r2, [r7, #32]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ad6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006ada:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	79db      	ldrb	r3, [r3, #7]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d123      	bne.n	8006b2c <USB_HC_StartXfer+0x2dc>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	78db      	ldrb	r3, [r3, #3]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d11f      	bne.n	8006b2c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	69fa      	ldr	r2, [r7, #28]
 8006afc:	0151      	lsls	r1, r2, #5
 8006afe:	6a3a      	ldr	r2, [r7, #32]
 8006b00:	440a      	add	r2, r1
 8006b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b0a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	6a3a      	ldr	r2, [r7, #32]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b2a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	7c9b      	ldrb	r3, [r3, #18]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d003      	beq.n	8006b3c <USB_HC_StartXfer+0x2ec>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	7c9b      	ldrb	r3, [r3, #18]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d117      	bne.n	8006b6c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d113      	bne.n	8006b6c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	78db      	ldrb	r3, [r3, #3]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10f      	bne.n	8006b6c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	6a3a      	ldr	r2, [r7, #32]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b6a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	7c9b      	ldrb	r3, [r3, #18]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d162      	bne.n	8006c3a <USB_HC_StartXfer+0x3ea>
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	78db      	ldrb	r3, [r3, #3]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d15e      	bne.n	8006c3a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	2b03      	cmp	r3, #3
 8006b84:	d858      	bhi.n	8006c38 <USB_HC_StartXfer+0x3e8>
 8006b86:	a201      	add	r2, pc, #4	@ (adr r2, 8006b8c <USB_HC_StartXfer+0x33c>)
 8006b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8c:	08006b9d 	.word	0x08006b9d
 8006b90:	08006bbf 	.word	0x08006bbf
 8006b94:	08006be1 	.word	0x08006be1
 8006b98:	08006c03 	.word	0x08006c03
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	69fa      	ldr	r2, [r7, #28]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	6a3a      	ldr	r2, [r7, #32]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bba:	6053      	str	r3, [r2, #4]
          break;
 8006bbc:	e03d      	b.n	8006c3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	0151      	lsls	r1, r2, #5
 8006bd0:	6a3a      	ldr	r2, [r7, #32]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bd8:	f043 030e 	orr.w	r3, r3, #14
 8006bdc:	6053      	str	r3, [r2, #4]
          break;
 8006bde:	e02c      	b.n	8006c3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	6a3a      	ldr	r2, [r7, #32]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bfe:	6053      	str	r3, [r2, #4]
          break;
 8006c00:	e01b      	b.n	8006c3a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	6a3a      	ldr	r2, [r7, #32]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006c20:	6053      	str	r3, [r2, #4]
          break;
 8006c22:	e00a      	b.n	8006c3a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c30:	461a      	mov	r2, r3
 8006c32:	2300      	movs	r3, #0
 8006c34:	6053      	str	r3, [r2, #4]
 8006c36:	e000      	b.n	8006c3a <USB_HC_StartXfer+0x3ea>
          break;
 8006c38:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c50:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	78db      	ldrb	r3, [r3, #3]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d004      	beq.n	8006c64 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	e003      	b.n	8006c6c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c6a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c72:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c80:	461a      	mov	r2, r3
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	e055      	b.n	8006d3c <USB_HC_StartXfer+0x4ec>
 8006c90:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	78db      	ldrb	r3, [r3, #3]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d14e      	bne.n	8006d3a <USB_HC_StartXfer+0x4ea>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d04a      	beq.n	8006d3a <USB_HC_StartXfer+0x4ea>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	79db      	ldrb	r3, [r3, #7]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d146      	bne.n	8006d3a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	7c9b      	ldrb	r3, [r3, #18]
 8006cb0:	2b03      	cmp	r3, #3
 8006cb2:	d831      	bhi.n	8006d18 <USB_HC_StartXfer+0x4c8>
 8006cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8006cbc <USB_HC_StartXfer+0x46c>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006ccd 	.word	0x08006ccd
 8006cc0:	08006cf1 	.word	0x08006cf1
 8006cc4:	08006ccd 	.word	0x08006ccd
 8006cc8:	08006cf1 	.word	0x08006cf1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	6a1b      	ldr	r3, [r3, #32]
 8006cd0:	3303      	adds	r3, #3
 8006cd2:	089b      	lsrs	r3, r3, #2
 8006cd4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006cd6:	8afa      	ldrh	r2, [r7, #22]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cdc:	b29b      	uxth	r3, r3
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d91c      	bls.n	8006d1c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	699b      	ldr	r3, [r3, #24]
 8006ce6:	f043 0220 	orr.w	r2, r3, #32
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	619a      	str	r2, [r3, #24]
        }
        break;
 8006cee:	e015      	b.n	8006d1c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	3303      	adds	r3, #3
 8006cf6:	089b      	lsrs	r3, r3, #2
 8006cf8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006cfa:	8afa      	ldrh	r2, [r7, #22]
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d02:	691b      	ldr	r3, [r3, #16]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d90a      	bls.n	8006d20 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	619a      	str	r2, [r3, #24]
        }
        break;
 8006d16:	e003      	b.n	8006d20 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006d18:	bf00      	nop
 8006d1a:	e002      	b.n	8006d22 <USB_HC_StartXfer+0x4d2>
        break;
 8006d1c:	bf00      	nop
 8006d1e:	e000      	b.n	8006d22 <USB_HC_StartXfer+0x4d2>
        break;
 8006d20:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6999      	ldr	r1, [r3, #24]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	785a      	ldrb	r2, [r3, #1]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	2000      	movs	r0, #0
 8006d32:	9000      	str	r0, [sp, #0]
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff f9c9 	bl	80060cc <USB_WritePacket>
  }

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3728      	adds	r7, #40	@ 0x28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	b29b      	uxth	r3, r3
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b089      	sub	sp, #36	@ 0x24
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	0c9b      	lsrs	r3, r3, #18
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	0fdb      	lsrs	r3, r3, #31
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	0fdb      	lsrs	r3, r3, #31
 8006dba:	f003 0301 	and.w	r3, r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b20      	cmp	r3, #32
 8006dca:	d10d      	bne.n	8006de8 <USB_HC_Halt+0x82>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <USB_HC_Halt+0x82>
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d002      	beq.n	8006de4 <USB_HC_Halt+0x7e>
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d101      	bne.n	8006de8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	e0d8      	b.n	8006f9a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <USB_HC_Halt+0x8e>
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d173      	bne.n	8006edc <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69ba      	ldr	r2, [r7, #24]
 8006e04:	0151      	lsls	r1, r2, #5
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	440a      	add	r2, r1
 8006e0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e12:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f003 0320 	and.w	r3, r3, #32
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d14a      	bne.n	8006eb6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d133      	bne.n	8006e94 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	015a      	lsls	r2, r3, #5
 8006e30:	69fb      	ldr	r3, [r7, #28]
 8006e32:	4413      	add	r3, r2
 8006e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	0151      	lsls	r1, r2, #5
 8006e3e:	69fa      	ldr	r2, [r7, #28]
 8006e40:	440a      	add	r2, r1
 8006e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e46:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e4a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	69fa      	ldr	r2, [r7, #28]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e6a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e78:	d82e      	bhi.n	8006ed8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	015a      	lsls	r2, r3, #5
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4413      	add	r3, r2
 8006e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e90:	d0ec      	beq.n	8006e6c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006e92:	e081      	b.n	8006f98 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	0151      	lsls	r1, r2, #5
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	440a      	add	r2, r1
 8006eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006eae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006eb2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eb4:	e070      	b.n	8006f98 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	0151      	lsls	r1, r2, #5
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	440a      	add	r2, r1
 8006ecc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ed0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ed4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ed6:	e05f      	b.n	8006f98 <USB_HC_Halt+0x232>
            break;
 8006ed8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006eda:	e05d      	b.n	8006f98 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ef6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006efa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d133      	bne.n	8006f74 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	015a      	lsls	r2, r3, #5
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	4413      	add	r3, r2
 8006f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	0151      	lsls	r1, r2, #5
 8006f3e:	69fa      	ldr	r2, [r7, #28]
 8006f40:	440a      	add	r2, r1
 8006f42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f4a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f58:	d81d      	bhi.n	8006f96 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f70:	d0ec      	beq.n	8006f4c <USB_HC_Halt+0x1e6>
 8006f72:	e011      	b.n	8006f98 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f92:	6013      	str	r3, [r2, #0]
 8006f94:	e000      	b.n	8006f98 <USB_HC_Halt+0x232>
          break;
 8006f96:	bf00      	nop
    }
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3724      	adds	r7, #36	@ 0x24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	04da      	lsls	r2, r3, #19
 8006fc4:	4b15      	ldr	r3, [pc, #84]	@ (800701c <USB_DoPing+0x74>)
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	0151      	lsls	r1, r2, #5
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	440a      	add	r2, r1
 8006fd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fd4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fd8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ff0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ff8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	4413      	add	r3, r2
 8007002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007006:	461a      	mov	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	371c      	adds	r7, #28
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	1ff80000 	.word	0x1ff80000

08007020 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b088      	sub	sp, #32
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f7fe ff8c 	bl	8005f52 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800703a:	2110      	movs	r1, #16
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7fe ffe5 	bl	800600c <USB_FlushTxFifo>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7ff f80f 	bl	8006070 <USB_FlushRxFifo>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800705c:	2300      	movs	r3, #0
 800705e:	61bb      	str	r3, [r7, #24]
 8007060:	e01f      	b.n	80070a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007078:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007080:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007088:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	4413      	add	r3, r2
 8007092:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007096:	461a      	mov	r2, r3
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	3301      	adds	r3, #1
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b0f      	cmp	r3, #15
 80070a6:	d9dc      	bls.n	8007062 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80070a8:	2300      	movs	r3, #0
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	e034      	b.n	8007118 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80070d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e2:	461a      	mov	r2, r3
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80070f4:	d80c      	bhi.n	8007110 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	015a      	lsls	r2, r3, #5
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	4413      	add	r3, r2
 80070fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007108:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800710c:	d0ec      	beq.n	80070e8 <USB_StopHost+0xc8>
 800710e:	e000      	b.n	8007112 <USB_StopHost+0xf2>
        break;
 8007110:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	3301      	adds	r3, #1
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	2b0f      	cmp	r3, #15
 800711c:	d9c7      	bls.n	80070ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007124:	461a      	mov	r2, r3
 8007126:	f04f 33ff 	mov.w	r3, #4294967295
 800712a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f04f 32ff 	mov.w	r2, #4294967295
 8007132:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f7fe fefb 	bl	8005f30 <USB_EnableGlobalInt>

  return ret;
 800713a:	7ffb      	ldrb	r3, [r7, #31]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007144:	b590      	push	{r4, r7, lr}
 8007146:	b089      	sub	sp, #36	@ 0x24
 8007148:	af04      	add	r7, sp, #16
 800714a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800714c:	2301      	movs	r3, #1
 800714e:	2202      	movs	r2, #2
 8007150:	2102      	movs	r1, #2
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fc85 	bl	8007a62 <USBH_FindInterface>
 8007158:	4603      	mov	r3, r0
 800715a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	2bff      	cmp	r3, #255	@ 0xff
 8007160:	d002      	beq.n	8007168 <USBH_CDC_InterfaceInit+0x24>
 8007162:	7bfb      	ldrb	r3, [r7, #15]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d901      	bls.n	800716c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007168:	2302      	movs	r3, #2
 800716a:	e13d      	b.n	80073e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fc5a 	bl	8007a2a <USBH_SelectInterface>
 8007176:	4603      	mov	r3, r0
 8007178:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800717a:	7bbb      	ldrb	r3, [r7, #14]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007180:	2302      	movs	r3, #2
 8007182:	e131      	b.n	80073e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800718a:	2050      	movs	r0, #80	@ 0x50
 800718c:	f002 fb64 	bl	8009858 <malloc>
 8007190:	4603      	mov	r3, r0
 8007192:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d101      	bne.n	80071a8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80071a4:	2302      	movs	r3, #2
 80071a6:	e11f      	b.n	80073e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80071a8:	2250      	movs	r2, #80	@ 0x50
 80071aa:	2100      	movs	r1, #0
 80071ac:	68b8      	ldr	r0, [r7, #8]
 80071ae:	f002 fe71 	bl	8009e94 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	211a      	movs	r1, #26
 80071b8:	fb01 f303 	mul.w	r3, r1, r3
 80071bc:	4413      	add	r3, r2
 80071be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	b25b      	sxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	da15      	bge.n	80071f6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	211a      	movs	r1, #26
 80071d0:	fb01 f303 	mul.w	r3, r1, r3
 80071d4:	4413      	add	r3, r2
 80071d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80071da:	781a      	ldrb	r2, [r3, #0]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	211a      	movs	r1, #26
 80071e6:	fb01 f303 	mul.w	r3, r1, r3
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80071f0:	881a      	ldrh	r2, [r3, #0]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 ffbe 	bl	800917e <USBH_AllocPipe>
 8007202:	4603      	mov	r3, r0
 8007204:	461a      	mov	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	7819      	ldrb	r1, [r3, #0]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	7858      	ldrb	r0, [r3, #1]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	8952      	ldrh	r2, [r2, #10]
 8007222:	9202      	str	r2, [sp, #8]
 8007224:	2203      	movs	r2, #3
 8007226:	9201      	str	r2, [sp, #4]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	4623      	mov	r3, r4
 800722c:	4602      	mov	r2, r0
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 ff76 	bl	8009120 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	2200      	movs	r2, #0
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f002 fa85 	bl	800974c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007242:	2300      	movs	r3, #0
 8007244:	2200      	movs	r2, #0
 8007246:	210a      	movs	r1, #10
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fc0a 	bl	8007a62 <USBH_FindInterface>
 800724e:	4603      	mov	r3, r0
 8007250:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007252:	7bfb      	ldrb	r3, [r7, #15]
 8007254:	2bff      	cmp	r3, #255	@ 0xff
 8007256:	d002      	beq.n	800725e <USBH_CDC_InterfaceInit+0x11a>
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d901      	bls.n	8007262 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800725e:	2302      	movs	r3, #2
 8007260:	e0c2      	b.n	80073e8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	211a      	movs	r1, #26
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	4413      	add	r3, r2
 800726e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	b25b      	sxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	da16      	bge.n	80072a8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800727a:	7bfb      	ldrb	r3, [r7, #15]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	211a      	movs	r1, #26
 8007280:	fb01 f303 	mul.w	r3, r1, r3
 8007284:	4413      	add	r3, r2
 8007286:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800728a:	781a      	ldrb	r2, [r3, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007290:	7bfb      	ldrb	r3, [r7, #15]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	211a      	movs	r1, #26
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	4413      	add	r3, r2
 800729c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072a0:	881a      	ldrh	r2, [r3, #0]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	835a      	strh	r2, [r3, #26]
 80072a6:	e015      	b.n	80072d4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	211a      	movs	r1, #26
 80072ae:	fb01 f303 	mul.w	r3, r1, r3
 80072b2:	4413      	add	r3, r2
 80072b4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80072b8:	781a      	ldrb	r2, [r3, #0]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	211a      	movs	r1, #26
 80072c4:	fb01 f303 	mul.w	r3, r1, r3
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80072ce:	881a      	ldrh	r2, [r3, #0]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	211a      	movs	r1, #26
 80072da:	fb01 f303 	mul.w	r3, r1, r3
 80072de:	4413      	add	r3, r2
 80072e0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b25b      	sxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	da16      	bge.n	800731a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	211a      	movs	r1, #26
 80072f2:	fb01 f303 	mul.w	r3, r1, r3
 80072f6:	4413      	add	r3, r2
 80072f8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	211a      	movs	r1, #26
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	4413      	add	r3, r2
 800730e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007312:	881a      	ldrh	r2, [r3, #0]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	835a      	strh	r2, [r3, #26]
 8007318:	e015      	b.n	8007346 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	211a      	movs	r1, #26
 8007320:	fb01 f303 	mul.w	r3, r1, r3
 8007324:	4413      	add	r3, r2
 8007326:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800732a:	781a      	ldrb	r2, [r3, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007330:	7bfb      	ldrb	r3, [r7, #15]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	211a      	movs	r1, #26
 8007336:	fb01 f303 	mul.w	r3, r1, r3
 800733a:	4413      	add	r3, r2
 800733c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007340:	881a      	ldrh	r2, [r3, #0]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	7b9b      	ldrb	r3, [r3, #14]
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f001 ff16 	bl	800917e <USBH_AllocPipe>
 8007352:	4603      	mov	r3, r0
 8007354:	461a      	mov	r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	7bdb      	ldrb	r3, [r3, #15]
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 ff0c 	bl	800917e <USBH_AllocPipe>
 8007366:	4603      	mov	r3, r0
 8007368:	461a      	mov	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	7b59      	ldrb	r1, [r3, #13]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	7b98      	ldrb	r0, [r3, #14]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	8b12      	ldrh	r2, [r2, #24]
 8007386:	9202      	str	r2, [sp, #8]
 8007388:	2202      	movs	r2, #2
 800738a:	9201      	str	r2, [sp, #4]
 800738c:	9300      	str	r3, [sp, #0]
 800738e:	4623      	mov	r3, r4
 8007390:	4602      	mov	r2, r0
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 fec4 	bl	8009120 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	7b19      	ldrb	r1, [r3, #12]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	7bd8      	ldrb	r0, [r3, #15]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	8b52      	ldrh	r2, [r2, #26]
 80073b0:	9202      	str	r2, [sp, #8]
 80073b2:	2202      	movs	r2, #2
 80073b4:	9201      	str	r2, [sp, #4]
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	4623      	mov	r3, r4
 80073ba:	4602      	mov	r2, r0
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 feaf 	bl	8009120 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	7b5b      	ldrb	r3, [r3, #13]
 80073ce:	2200      	movs	r2, #0
 80073d0:	4619      	mov	r1, r3
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f002 f9ba 	bl	800974c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	7b1b      	ldrb	r3, [r3, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f002 f9b3 	bl	800974c <USBH_LL_SetToggle>

  return USBH_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd90      	pop	{r4, r7, pc}

080073f0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00e      	beq.n	8007428 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 fea4 	bl	800915e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f001 fecf 	bl	80091c0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	7b1b      	ldrb	r3, [r3, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00e      	beq.n	800744e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	7b1b      	ldrb	r3, [r3, #12]
 8007434:	4619      	mov	r1, r3
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 fe91 	bl	800915e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	7b1b      	ldrb	r3, [r3, #12]
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 febc 	bl	80091c0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2200      	movs	r2, #0
 800744c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	7b5b      	ldrb	r3, [r3, #13]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00e      	beq.n	8007474 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	7b5b      	ldrb	r3, [r3, #13]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fe7e 	bl	800915e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	7b5b      	ldrb	r3, [r3, #13]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 fea9 	bl	80091c0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00b      	beq.n	8007498 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007486:	69db      	ldr	r3, [r3, #28]
 8007488:	4618      	mov	r0, r3
 800748a:	f002 f9ed 	bl	8009868 <free>
    phost->pActiveClass->pData = 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007494:	2200      	movs	r2, #0
 8007496:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3340      	adds	r3, #64	@ 0x40
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f8b1 	bl	8007622 <GetLineCoding>
 80074c0:	4603      	mov	r3, r0
 80074c2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d105      	bne.n	80074d6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80074d0:	2102      	movs	r1, #2
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80074d6:	7afb      	ldrb	r3, [r7, #11]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80074e8:	2301      	movs	r3, #1
 80074ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007500:	2b04      	cmp	r3, #4
 8007502:	d877      	bhi.n	80075f4 <USBH_CDC_Process+0x114>
 8007504:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <USBH_CDC_Process+0x2c>)
 8007506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750a:	bf00      	nop
 800750c:	08007521 	.word	0x08007521
 8007510:	08007527 	.word	0x08007527
 8007514:	08007557 	.word	0x08007557
 8007518:	080075cb 	.word	0x080075cb
 800751c:	080075d9 	.word	0x080075d9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	73fb      	strb	r3, [r7, #15]
      break;
 8007524:	e06d      	b.n	8007602 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f897 	bl	8007660 <SetLineCoding>
 8007532:	4603      	mov	r3, r0
 8007534:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007544:	e058      	b.n	80075f8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007546:	7bbb      	ldrb	r3, [r7, #14]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d055      	beq.n	80075f8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	2204      	movs	r2, #4
 8007550:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007554:	e050      	b.n	80075f8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	3340      	adds	r3, #64	@ 0x40
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f860 	bl	8007622 <GetLineCoding>
 8007562:	4603      	mov	r3, r0
 8007564:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007566:	7bbb      	ldrb	r3, [r7, #14]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d126      	bne.n	80075ba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800757e:	791b      	ldrb	r3, [r3, #4]
 8007580:	429a      	cmp	r2, r3
 8007582:	d13b      	bne.n	80075fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800758e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007590:	429a      	cmp	r2, r3
 8007592:	d133      	bne.n	80075fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800759e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d12b      	bne.n	80075fc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d124      	bne.n	80075fc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f958 	bl	8007868 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80075b8:	e020      	b.n	80075fc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d01d      	beq.n	80075fc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	2204      	movs	r2, #4
 80075c4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80075c8:	e018      	b.n	80075fc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f867 	bl	800769e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f8da 	bl	800778a <CDC_ProcessReception>
      break;
 80075d6:	e014      	b.n	8007602 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80075d8:	2100      	movs	r1, #0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f001 f81a 	bl	8008614 <USBH_ClrFeature>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80075e4:	7bbb      	ldrb	r3, [r7, #14]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d10a      	bne.n	8007600 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80075f2:	e005      	b.n	8007600 <USBH_CDC_Process+0x120>

    default:
      break;
 80075f4:	bf00      	nop
 80075f6:	e004      	b.n	8007602 <USBH_CDC_Process+0x122>
      break;
 80075f8:	bf00      	nop
 80075fa:	e002      	b.n	8007602 <USBH_CDC_Process+0x122>
      break;
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <USBH_CDC_Process+0x122>
      break;
 8007600:	bf00      	nop

  }

  return status;
 8007602:	7bfb      	ldrb	r3, [r7, #15]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b082      	sub	sp, #8
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	22a1      	movs	r2, #161	@ 0xa1
 8007630:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2221      	movs	r2, #33	@ 0x21
 8007636:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2207      	movs	r2, #7
 8007648:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	2207      	movs	r2, #7
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 fb14 	bl	8008c7e <USBH_CtlReq>
 8007656:	4603      	mov	r3, r0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2221      	movs	r2, #33	@ 0x21
 800766e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2220      	movs	r2, #32
 8007674:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2207      	movs	r2, #7
 8007686:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2207      	movs	r2, #7
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f001 faf5 	bl	8008c7e <USBH_CtlReq>
 8007694:	4603      	mov	r3, r0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3708      	adds	r7, #8
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}

0800769e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800769e:	b580      	push	{r7, lr}
 80076a0:	b086      	sub	sp, #24
 80076a2:	af02      	add	r7, sp, #8
 80076a4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80076b0:	2300      	movs	r3, #0
 80076b2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d002      	beq.n	80076c4 <CDC_ProcessTransmission+0x26>
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d023      	beq.n	800770a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80076c2:	e05e      	b.n	8007782 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	8b12      	ldrh	r2, [r2, #24]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d90b      	bls.n	80076e8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	69d9      	ldr	r1, [r3, #28]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	8b1a      	ldrh	r2, [r3, #24]
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	7b5b      	ldrb	r3, [r3, #13]
 80076dc:	2001      	movs	r0, #1
 80076de:	9000      	str	r0, [sp, #0]
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 fcda 	bl	800909a <USBH_BulkSendData>
 80076e6:	e00b      	b.n	8007700 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80076f0:	b29a      	uxth	r2, r3
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	7b5b      	ldrb	r3, [r3, #13]
 80076f6:	2001      	movs	r0, #1
 80076f8:	9000      	str	r0, [sp, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fccd 	bl	800909a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007708:	e03b      	b.n	8007782 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	7b5b      	ldrb	r3, [r3, #13]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fff1 	bl	80096f8 <USBH_LL_GetURBState>
 8007716:	4603      	mov	r3, r0
 8007718:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d128      	bne.n	8007772 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	8b12      	ldrh	r2, [r2, #24]
 8007728:	4293      	cmp	r3, r2
 800772a:	d90e      	bls.n	800774a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007730:	68fa      	ldr	r2, [r7, #12]
 8007732:	8b12      	ldrh	r2, [r2, #24]
 8007734:	1a9a      	subs	r2, r3, r2
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	69db      	ldr	r3, [r3, #28]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	8b12      	ldrh	r2, [r2, #24]
 8007742:	441a      	add	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	61da      	str	r2, [r3, #28]
 8007748:	e002      	b.n	8007750 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2200      	movs	r2, #0
 800774e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	d004      	beq.n	8007762 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007760:	e00e      	b.n	8007780 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 f868 	bl	8007840 <USBH_CDC_TransmitCallback>
      break;
 8007770:	e006      	b.n	8007780 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007772:	7afb      	ldrb	r3, [r7, #11]
 8007774:	2b02      	cmp	r3, #2
 8007776:	d103      	bne.n	8007780 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007780:	bf00      	nop
  }
}
 8007782:	bf00      	nop
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800779c:	2300      	movs	r3, #0
 800779e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d002      	beq.n	80077b0 <CDC_ProcessReception+0x26>
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d00e      	beq.n	80077cc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80077ae:	e043      	b.n	8007838 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	6a19      	ldr	r1, [r3, #32]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	8b5a      	ldrh	r2, [r3, #26]
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	7b1b      	ldrb	r3, [r3, #12]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f001 fc91 	bl	80090e4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2204      	movs	r2, #4
 80077c6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80077ca:	e035      	b.n	8007838 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	7b1b      	ldrb	r3, [r3, #12]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f001 ff90 	bl	80096f8 <USBH_LL_GetURBState>
 80077d8:	4603      	mov	r3, r0
 80077da:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80077dc:	7cfb      	ldrb	r3, [r7, #19]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d129      	bne.n	8007836 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	7b1b      	ldrb	r3, [r3, #12]
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 fef3 	bl	80095d4 <USBH_LL_GetLastXferSize>
 80077ee:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d016      	beq.n	8007828 <CDC_ProcessReception+0x9e>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	8b5b      	ldrh	r3, [r3, #26]
 80077fe:	461a      	mov	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4293      	cmp	r3, r2
 8007804:	d110      	bne.n	8007828 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	1ad2      	subs	r2, r2, r3
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	6a1a      	ldr	r2, [r3, #32]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	441a      	add	r2, r3
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	2203      	movs	r2, #3
 8007822:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007826:	e006      	b.n	8007836 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f80f 	bl	8007854 <USBH_CDC_ReceiveCallback>
      break;
 8007836:	bf00      	nop
  }
}
 8007838:	bf00      	nop
 800783a:	3718      	adds	r7, #24
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	4613      	mov	r3, r2
 8007888:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007890:	2302      	movs	r3, #2
 8007892:	e029      	b.n	80078e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	79fa      	ldrb	r2, [r7, #7]
 8007898:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f81f 	bl	80078f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2200      	movs	r2, #0
 80078ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	68ba      	ldr	r2, [r7, #8]
 80078dc:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f001 fdc3 	bl	800946c <USBH_LL_Init>

  return USBH_OK;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80078fc:	2300      	movs	r3, #0
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e009      	b.n	8007916 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	33e0      	adds	r3, #224	@ 0xe0
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4413      	add	r3, r2
 800790c:	2200      	movs	r2, #0
 800790e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3301      	adds	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b0f      	cmp	r3, #15
 800791a:	d9f2      	bls.n	8007902 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e009      	b.n	8007936 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4413      	add	r3, r2
 8007928:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800792c:	2200      	movs	r2, #0
 800792e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800793c:	d3f1      	bcc.n	8007922 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2240      	movs	r2, #64	@ 0x40
 8007962:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	331c      	adds	r3, #28
 800798e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007992:	2100      	movs	r1, #0
 8007994:	4618      	mov	r0, r3
 8007996:	f002 fa7d 	bl	8009e94 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80079a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f002 fa74 	bl	8009e94 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80079b2:	2212      	movs	r2, #18
 80079b4:	2100      	movs	r1, #0
 80079b6:	4618      	mov	r0, r3
 80079b8:	f002 fa6c 	bl	8009e94 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80079c2:	223e      	movs	r2, #62	@ 0x3e
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f002 fa64 	bl	8009e94 <memset>

  return USBH_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80079d6:	b480      	push	{r7}
 80079d8:	b085      	sub	sp, #20
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d016      	beq.n	8007a18 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10e      	bne.n	8007a12 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80079fa:	1c59      	adds	r1, r3, #1
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	33de      	adds	r3, #222	@ 0xde
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	73fb      	strb	r3, [r7, #15]
 8007a10:	e004      	b.n	8007a1c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007a12:	2302      	movs	r3, #2
 8007a14:	73fb      	strb	r3, [r7, #15]
 8007a16:	e001      	b.n	8007a1c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007a18:	2302      	movs	r3, #2
 8007a1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	460b      	mov	r3, r1
 8007a34:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007a36:	2300      	movs	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007a40:	78fa      	ldrb	r2, [r7, #3]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d204      	bcs.n	8007a50 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007a4e:	e001      	b.n	8007a54 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007a50:	2302      	movs	r3, #2
 8007a52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3714      	adds	r7, #20
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b087      	sub	sp, #28
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
 8007a6a:	4608      	mov	r0, r1
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	461a      	mov	r2, r3
 8007a70:	4603      	mov	r3, r0
 8007a72:	70fb      	strb	r3, [r7, #3]
 8007a74:	460b      	mov	r3, r1
 8007a76:	70bb      	strb	r3, [r7, #2]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a80:	2300      	movs	r3, #0
 8007a82:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007a8a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007a8c:	e025      	b.n	8007ada <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	221a      	movs	r2, #26
 8007a92:	fb02 f303 	mul.w	r3, r2, r3
 8007a96:	3308      	adds	r3, #8
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3302      	adds	r3, #2
 8007a9e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	795b      	ldrb	r3, [r3, #5]
 8007aa4:	78fa      	ldrb	r2, [r7, #3]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d002      	beq.n	8007ab0 <USBH_FindInterface+0x4e>
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	2bff      	cmp	r3, #255	@ 0xff
 8007aae:	d111      	bne.n	8007ad4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007ab4:	78ba      	ldrb	r2, [r7, #2]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d002      	beq.n	8007ac0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007aba:	78bb      	ldrb	r3, [r7, #2]
 8007abc:	2bff      	cmp	r3, #255	@ 0xff
 8007abe:	d109      	bne.n	8007ad4 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007ac4:	787a      	ldrb	r2, [r7, #1]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d002      	beq.n	8007ad0 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007aca:	787b      	ldrb	r3, [r7, #1]
 8007acc:	2bff      	cmp	r3, #255	@ 0xff
 8007ace:	d101      	bne.n	8007ad4 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	e006      	b.n	8007ae2 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007ad4:	7dfb      	ldrb	r3, [r7, #23]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ada:	7dfb      	ldrb	r3, [r7, #23]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d9d6      	bls.n	8007a8e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007ae0:	23ff      	movs	r3, #255	@ 0xff
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	371c      	adds	r7, #28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 fcf4 	bl	80094e4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007afc:	2101      	movs	r1, #1
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 fe0d 	bl	800971e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af04      	add	r7, sp, #16
 8007b16:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d102      	bne.n	8007b32 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2203      	movs	r2, #3
 8007b30:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b0b      	cmp	r3, #11
 8007b3a:	f200 81bb 	bhi.w	8007eb4 <USBH_Process+0x3a4>
 8007b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <USBH_Process+0x34>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007b75 	.word	0x08007b75
 8007b48:	08007ba7 	.word	0x08007ba7
 8007b4c:	08007c0f 	.word	0x08007c0f
 8007b50:	08007e4f 	.word	0x08007e4f
 8007b54:	08007eb5 	.word	0x08007eb5
 8007b58:	08007caf 	.word	0x08007caf
 8007b5c:	08007df5 	.word	0x08007df5
 8007b60:	08007ce5 	.word	0x08007ce5
 8007b64:	08007d05 	.word	0x08007d05
 8007b68:	08007d23 	.word	0x08007d23
 8007b6c:	08007d67 	.word	0x08007d67
 8007b70:	08007e37 	.word	0x08007e37
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 819b 	beq.w	8007eb8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007b88:	20c8      	movs	r0, #200	@ 0xc8
 8007b8a:	f001 fe12 	bl	80097b2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f001 fd05 	bl	800959e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ba4:	e188      	b.n	8007eb8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d107      	bne.n	8007bc0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007bbe:	e18a      	b.n	8007ed6 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007bc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007bca:	d914      	bls.n	8007bf6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	d903      	bls.n	8007bee <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	220d      	movs	r2, #13
 8007bea:	701a      	strb	r2, [r3, #0]
      break;
 8007bec:	e173      	b.n	8007ed6 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
      break;
 8007bf4:	e16f      	b.n	8007ed6 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007bfc:	f103 020a 	add.w	r2, r3, #10
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007c06:	200a      	movs	r0, #10
 8007c08:	f001 fdd3 	bl	80097b2 <USBH_Delay>
      break;
 8007c0c:	e163      	b.n	8007ed6 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007c1e:	2104      	movs	r1, #4
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007c24:	2064      	movs	r0, #100	@ 0x64
 8007c26:	f001 fdc4 	bl	80097b2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 fc90 	bl	8009550 <USBH_LL_GetSpeed>
 8007c30:	4603      	mov	r3, r0
 8007c32:	461a      	mov	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2205      	movs	r2, #5
 8007c3e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007c40:	2100      	movs	r1, #0
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 fa9b 	bl	800917e <USBH_AllocPipe>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007c50:	2180      	movs	r1, #128	@ 0x80
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f001 fa93 	bl	800917e <USBH_AllocPipe>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7919      	ldrb	r1, [r3, #4]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007c74:	9202      	str	r2, [sp, #8]
 8007c76:	2200      	movs	r2, #0
 8007c78:	9201      	str	r2, [sp, #4]
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2280      	movs	r2, #128	@ 0x80
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 fa4d 	bl	8009120 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7959      	ldrb	r1, [r3, #5]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007c9a:	9202      	str	r2, [sp, #8]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	9201      	str	r2, [sp, #4]
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fa3a 	bl	8009120 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cac:	e113      	b.n	8007ed6 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f916 	bl	8007ee0 <USBH_HandleEnum>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f040 80fd 	bne.w	8007ebc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d103      	bne.n	8007cdc <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2208      	movs	r2, #8
 8007cd8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cda:	e0ef      	b.n	8007ebc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2207      	movs	r2, #7
 8007ce0:	701a      	strb	r2, [r3, #0]
      break;
 8007ce2:	e0eb      	b.n	8007ebc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 80e8 	beq.w	8007ec0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2208      	movs	r2, #8
 8007d00:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007d02:	e0dd      	b.n	8007ec0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fc3a 	bl	8008586 <USBH_SetCfg>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f040 80d5 	bne.w	8007ec4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2209      	movs	r2, #9
 8007d1e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d20:	e0d0      	b.n	8007ec4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007d28:	f003 0320 	and.w	r3, r3, #32
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d016      	beq.n	8007d5e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007d30:	2101      	movs	r1, #1
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fc4a 	bl	80085cc <USBH_SetFeature>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007d3c:	7bbb      	ldrb	r3, [r7, #14]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d103      	bne.n	8007d4c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	220a      	movs	r2, #10
 8007d48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d4a:	e0bd      	b.n	8007ec8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	f040 80b9 	bne.w	8007ec8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	220a      	movs	r2, #10
 8007d5a:	701a      	strb	r2, [r3, #0]
      break;
 8007d5c:	e0b4      	b.n	8007ec8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	220a      	movs	r2, #10
 8007d62:	701a      	strb	r2, [r3, #0]
      break;
 8007d64:	e0b0      	b.n	8007ec8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80ad 	beq.w	8007ecc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	73fb      	strb	r3, [r7, #15]
 8007d7e:	e016      	b.n	8007dae <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007d80:	7bfa      	ldrb	r2, [r7, #15]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	32de      	adds	r2, #222	@ 0xde
 8007d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d8a:	791a      	ldrb	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d108      	bne.n	8007da8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007d96:	7bfa      	ldrb	r2, [r7, #15]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	32de      	adds	r2, #222	@ 0xde
 8007d9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007da6:	e005      	b.n	8007db4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	3301      	adds	r3, #1
 8007dac:	73fb      	strb	r3, [r7, #15]
 8007dae:	7bfb      	ldrb	r3, [r7, #15]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d0e5      	beq.n	8007d80 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d016      	beq.n	8007dec <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	4798      	blx	r3
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2206      	movs	r2, #6
 8007dd4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ddc:	2103      	movs	r1, #3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007de2:	e073      	b.n	8007ecc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	220d      	movs	r2, #13
 8007de8:	701a      	strb	r2, [r3, #0]
      break;
 8007dea:	e06f      	b.n	8007ecc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	220d      	movs	r2, #13
 8007df0:	701a      	strb	r2, [r3, #0]
      break;
 8007df2:	e06b      	b.n	8007ecc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d017      	beq.n	8007e2e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	4798      	blx	r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e0e:	7bbb      	ldrb	r3, [r7, #14]
 8007e10:	b2db      	uxtb	r3, r3
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d103      	bne.n	8007e1e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	220b      	movs	r2, #11
 8007e1a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e1c:	e058      	b.n	8007ed0 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d154      	bne.n	8007ed0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	220d      	movs	r2, #13
 8007e2a:	701a      	strb	r2, [r3, #0]
      break;
 8007e2c:	e050      	b.n	8007ed0 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	220d      	movs	r2, #13
 8007e32:	701a      	strb	r2, [r3, #0]
      break;
 8007e34:	e04c      	b.n	8007ed0 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d049      	beq.n	8007ed4 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e46:	695b      	ldr	r3, [r3, #20]
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	4798      	blx	r3
      }
      break;
 8007e4c:	e042      	b.n	8007ed4 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff fd4a 	bl	80078f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d009      	beq.n	8007e7a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d005      	beq.n	8007e90 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e8a:	2105      	movs	r1, #5
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d107      	bne.n	8007eac <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fe22 	bl	8007aee <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007eaa:	e014      	b.n	8007ed6 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f001 fb19 	bl	80094e4 <USBH_LL_Start>
      break;
 8007eb2:	e010      	b.n	8007ed6 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007eb4:	bf00      	nop
 8007eb6:	e00e      	b.n	8007ed6 <USBH_Process+0x3c6>
      break;
 8007eb8:	bf00      	nop
 8007eba:	e00c      	b.n	8007ed6 <USBH_Process+0x3c6>
      break;
 8007ebc:	bf00      	nop
 8007ebe:	e00a      	b.n	8007ed6 <USBH_Process+0x3c6>
    break;
 8007ec0:	bf00      	nop
 8007ec2:	e008      	b.n	8007ed6 <USBH_Process+0x3c6>
      break;
 8007ec4:	bf00      	nop
 8007ec6:	e006      	b.n	8007ed6 <USBH_Process+0x3c6>
      break;
 8007ec8:	bf00      	nop
 8007eca:	e004      	b.n	8007ed6 <USBH_Process+0x3c6>
      break;
 8007ecc:	bf00      	nop
 8007ece:	e002      	b.n	8007ed6 <USBH_Process+0x3c6>
      break;
 8007ed0:	bf00      	nop
 8007ed2:	e000      	b.n	8007ed6 <USBH_Process+0x3c6>
      break;
 8007ed4:	bf00      	nop
  }
  return USBH_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af04      	add	r7, sp, #16
 8007ee6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007eec:	2301      	movs	r3, #1
 8007eee:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	785b      	ldrb	r3, [r3, #1]
 8007ef4:	2b07      	cmp	r3, #7
 8007ef6:	f200 81bd 	bhi.w	8008274 <USBH_HandleEnum+0x394>
 8007efa:	a201      	add	r2, pc, #4	@ (adr r2, 8007f00 <USBH_HandleEnum+0x20>)
 8007efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f00:	08007f21 	.word	0x08007f21
 8007f04:	08007fdb 	.word	0x08007fdb
 8007f08:	08008045 	.word	0x08008045
 8007f0c:	080080cf 	.word	0x080080cf
 8007f10:	08008139 	.word	0x08008139
 8007f14:	080081a9 	.word	0x080081a9
 8007f18:	080081ef 	.word	0x080081ef
 8007f1c:	08008235 	.word	0x08008235
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007f20:	2108      	movs	r1, #8
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fa4c 	bl	80083c0 <USBH_Get_DevDesc>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d12e      	bne.n	8007f90 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7919      	ldrb	r1, [r3, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007f56:	9202      	str	r2, [sp, #8]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	9201      	str	r2, [sp, #4]
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2280      	movs	r2, #128	@ 0x80
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 f8dc 	bl	8009120 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	7959      	ldrb	r1, [r3, #5]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007f7c:	9202      	str	r2, [sp, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	9201      	str	r2, [sp, #4]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4603      	mov	r3, r0
 8007f86:	2200      	movs	r2, #0
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 f8c9 	bl	8009120 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007f8e:	e173      	b.n	8008278 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	f040 8170 	bne.w	8008278 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d903      	bls.n	8007fba <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	220d      	movs	r2, #13
 8007fb6:	701a      	strb	r2, [r3, #0]
      break;
 8007fb8:	e15e      	b.n	8008278 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	795b      	ldrb	r3, [r3, #5]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f001 f8fd 	bl	80091c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	791b      	ldrb	r3, [r3, #4]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f001 f8f7 	bl	80091c0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	701a      	strb	r2, [r3, #0]
      break;
 8007fd8:	e14e      	b.n	8008278 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007fda:	2112      	movs	r1, #18
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f9ef 	bl	80083c0 <USBH_Get_DevDesc>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ff2:	e143      	b.n	800827c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	f040 8140 	bne.w	800827c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008002:	3301      	adds	r3, #1
 8008004:	b2da      	uxtb	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008012:	2b03      	cmp	r3, #3
 8008014:	d903      	bls.n	800801e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	220d      	movs	r2, #13
 800801a:	701a      	strb	r2, [r3, #0]
      break;
 800801c:	e12e      	b.n	800827c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	795b      	ldrb	r3, [r3, #5]
 8008022:	4619      	mov	r1, r3
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f001 f8cb 	bl	80091c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	791b      	ldrb	r3, [r3, #4]
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 f8c5 	bl	80091c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	701a      	strb	r2, [r3, #0]
      break;
 8008042:	e11b      	b.n	800827c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008044:	2101      	movs	r1, #1
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fa79 	bl	800853e <USBH_SetAddress>
 800804c:	4603      	mov	r3, r0
 800804e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008050:	7bbb      	ldrb	r3, [r7, #14]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d130      	bne.n	80080b8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008056:	2002      	movs	r0, #2
 8008058:	f001 fbab 	bl	80097b2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2203      	movs	r2, #3
 8008068:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7919      	ldrb	r1, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800807e:	9202      	str	r2, [sp, #8]
 8008080:	2200      	movs	r2, #0
 8008082:	9201      	str	r2, [sp, #4]
 8008084:	9300      	str	r3, [sp, #0]
 8008086:	4603      	mov	r3, r0
 8008088:	2280      	movs	r2, #128	@ 0x80
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 f848 	bl	8009120 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	7959      	ldrb	r1, [r3, #5]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080a4:	9202      	str	r2, [sp, #8]
 80080a6:	2200      	movs	r2, #0
 80080a8:	9201      	str	r2, [sp, #4]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	4603      	mov	r3, r0
 80080ae:	2200      	movs	r2, #0
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 f835 	bl	8009120 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080b6:	e0e3      	b.n	8008280 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080b8:	7bbb      	ldrb	r3, [r7, #14]
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	f040 80e0 	bne.w	8008280 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	220d      	movs	r2, #13
 80080c4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	705a      	strb	r2, [r3, #1]
      break;
 80080cc:	e0d8      	b.n	8008280 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80080ce:	2109      	movs	r1, #9
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 f9a1 	bl	8008418 <USBH_Get_CfgDesc>
 80080d6:	4603      	mov	r3, r0
 80080d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d103      	bne.n	80080e8 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2204      	movs	r2, #4
 80080e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80080e6:	e0cd      	b.n	8008284 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	f040 80ca 	bne.w	8008284 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080f6:	3301      	adds	r3, #1
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008106:	2b03      	cmp	r3, #3
 8008108:	d903      	bls.n	8008112 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	220d      	movs	r2, #13
 800810e:	701a      	strb	r2, [r3, #0]
      break;
 8008110:	e0b8      	b.n	8008284 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	795b      	ldrb	r3, [r3, #5]
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 f851 	bl	80091c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	791b      	ldrb	r3, [r3, #4]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 f84b 	bl	80091c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	701a      	strb	r2, [r3, #0]
      break;
 8008136:	e0a5      	b.n	8008284 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f969 	bl	8008418 <USBH_Get_CfgDesc>
 8008146:	4603      	mov	r3, r0
 8008148:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2205      	movs	r2, #5
 8008154:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008156:	e097      	b.n	8008288 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	2b03      	cmp	r3, #3
 800815c:	f040 8094 	bne.w	8008288 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008166:	3301      	adds	r3, #1
 8008168:	b2da      	uxtb	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008176:	2b03      	cmp	r3, #3
 8008178:	d903      	bls.n	8008182 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	220d      	movs	r2, #13
 800817e:	701a      	strb	r2, [r3, #0]
      break;
 8008180:	e082      	b.n	8008288 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	795b      	ldrb	r3, [r3, #5]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f819 	bl	80091c0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	791b      	ldrb	r3, [r3, #4]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 f813 	bl	80091c0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	701a      	strb	r2, [r3, #0]
      break;
 80081a6:	e06f      	b.n	8008288 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d019      	beq.n	80081e6 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80081be:	23ff      	movs	r3, #255	@ 0xff
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f953 	bl	800846c <USBH_Get_StringDesc>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2206      	movs	r2, #6
 80081d4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80081d6:	e059      	b.n	800828c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d156      	bne.n	800828c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2206      	movs	r2, #6
 80081e2:	705a      	strb	r2, [r3, #1]
      break;
 80081e4:	e052      	b.n	800828c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2206      	movs	r2, #6
 80081ea:	705a      	strb	r2, [r3, #1]
      break;
 80081ec:	e04e      	b.n	800828c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d019      	beq.n	800822c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008204:	23ff      	movs	r3, #255	@ 0xff
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f930 	bl	800846c <USBH_Get_StringDesc>
 800820c:	4603      	mov	r3, r0
 800820e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008210:	7bbb      	ldrb	r3, [r7, #14]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d103      	bne.n	800821e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2207      	movs	r2, #7
 800821a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800821c:	e038      	b.n	8008290 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	2b03      	cmp	r3, #3
 8008222:	d135      	bne.n	8008290 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2207      	movs	r2, #7
 8008228:	705a      	strb	r2, [r3, #1]
      break;
 800822a:	e031      	b.n	8008290 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2207      	movs	r2, #7
 8008230:	705a      	strb	r2, [r3, #1]
      break;
 8008232:	e02d      	b.n	8008290 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800823a:	2b00      	cmp	r3, #0
 800823c:	d017      	beq.n	800826e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800824a:	23ff      	movs	r3, #255	@ 0xff
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f90d 	bl	800846c <USBH_Get_StringDesc>
 8008252:	4603      	mov	r3, r0
 8008254:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008260:	e018      	b.n	8008294 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	2b03      	cmp	r3, #3
 8008266:	d115      	bne.n	8008294 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
      break;
 800826c:	e012      	b.n	8008294 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800826e:	2300      	movs	r3, #0
 8008270:	73fb      	strb	r3, [r7, #15]
      break;
 8008272:	e00f      	b.n	8008294 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008274:	bf00      	nop
 8008276:	e00e      	b.n	8008296 <USBH_HandleEnum+0x3b6>
      break;
 8008278:	bf00      	nop
 800827a:	e00c      	b.n	8008296 <USBH_HandleEnum+0x3b6>
      break;
 800827c:	bf00      	nop
 800827e:	e00a      	b.n	8008296 <USBH_HandleEnum+0x3b6>
      break;
 8008280:	bf00      	nop
 8008282:	e008      	b.n	8008296 <USBH_HandleEnum+0x3b6>
      break;
 8008284:	bf00      	nop
 8008286:	e006      	b.n	8008296 <USBH_HandleEnum+0x3b6>
      break;
 8008288:	bf00      	nop
 800828a:	e004      	b.n	8008296 <USBH_HandleEnum+0x3b6>
      break;
 800828c:	bf00      	nop
 800828e:	e002      	b.n	8008296 <USBH_HandleEnum+0x3b6>
      break;
 8008290:	bf00      	nop
 8008292:	e000      	b.n	8008296 <USBH_HandleEnum+0x3b6>
      break;
 8008294:	bf00      	nop
  }
  return Status;
 8008296:	7bfb      	ldrb	r3, [r7, #15]
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	683a      	ldr	r2, [r7, #0]
 80082ae:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80082be:	b580      	push	{r7, lr}
 80082c0:	b082      	sub	sp, #8
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f804 	bl	80082e2 <USBH_HandleSof>
}
 80082da:	bf00      	nop
 80082dc:	3708      	adds	r7, #8
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	2b0b      	cmp	r3, #11
 80082f2:	d10a      	bne.n	800830a <USBH_HandleSof+0x28>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	4798      	blx	r3
  }
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008312:	b480      	push	{r7}
 8008314:	b083      	sub	sp, #12
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008322:	bf00      	nop
}
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800833e:	bf00      	nop
}
 8008340:	370c      	adds	r7, #12
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800834a:	b480      	push	{r7}
 800834c:	b083      	sub	sp, #12
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 f8be 	bl	800951a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	791b      	ldrb	r3, [r3, #4]
 80083a2:	4619      	mov	r1, r3
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 ff0b 	bl	80091c0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	795b      	ldrb	r3, [r3, #5]
 80083ae:	4619      	mov	r1, r3
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 ff05 	bl	80091c0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af02      	add	r7, sp, #8
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80083cc:	887b      	ldrh	r3, [r7, #2]
 80083ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083d2:	d901      	bls.n	80083d8 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e01b      	b.n	8008410 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80083de:	887b      	ldrh	r3, [r7, #2]
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	4613      	mov	r3, r2
 80083e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083e8:	2100      	movs	r1, #0
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f872 	bl	80084d4 <USBH_GetDescriptor>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008400:	887a      	ldrh	r2, [r7, #2]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 f929 	bl	800865c <USBH_ParseDevDesc>
 800840a:	4603      	mov	r3, r0
 800840c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af02      	add	r7, sp, #8
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	331c      	adds	r3, #28
 8008428:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800842a:	887b      	ldrh	r3, [r7, #2]
 800842c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008430:	d901      	bls.n	8008436 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008432:	2303      	movs	r3, #3
 8008434:	e016      	b.n	8008464 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008436:	887b      	ldrh	r3, [r7, #2]
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008440:	2100      	movs	r1, #0
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f846 	bl	80084d4 <USBH_GetDescriptor>
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d107      	bne.n	8008462 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008452:	887b      	ldrh	r3, [r7, #2]
 8008454:	461a      	mov	r2, r3
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f9af 	bl	80087bc <USBH_ParseCfgDesc>
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af02      	add	r7, sp, #8
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	607a      	str	r2, [r7, #4]
 8008476:	461a      	mov	r2, r3
 8008478:	460b      	mov	r3, r1
 800847a:	72fb      	strb	r3, [r7, #11]
 800847c:	4613      	mov	r3, r2
 800847e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008480:	893b      	ldrh	r3, [r7, #8]
 8008482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008486:	d802      	bhi.n	800848e <USBH_Get_StringDesc+0x22>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d101      	bne.n	8008492 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800848e:	2303      	movs	r3, #3
 8008490:	e01c      	b.n	80084cc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008492:	7afb      	ldrb	r3, [r7, #11]
 8008494:	b29b      	uxth	r3, r3
 8008496:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800849a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80084a2:	893b      	ldrh	r3, [r7, #8]
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	460b      	mov	r3, r1
 80084a8:	2100      	movs	r1, #0
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f812 	bl	80084d4 <USBH_GetDescriptor>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d107      	bne.n	80084ca <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80084c0:	893a      	ldrh	r2, [r7, #8]
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 fb8d 	bl	8008be4 <USBH_ParseStringDesc>
  }

  return status;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	607b      	str	r3, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	72fb      	strb	r3, [r7, #11]
 80084e2:	4613      	mov	r3, r2
 80084e4:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	789b      	ldrb	r3, [r3, #2]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d11c      	bne.n	8008528 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2206      	movs	r2, #6
 80084fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	893a      	ldrh	r2, [r7, #8]
 8008504:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008506:	893b      	ldrh	r3, [r7, #8]
 8008508:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800850c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008510:	d104      	bne.n	800851c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f240 4209 	movw	r2, #1033	@ 0x409
 8008518:	829a      	strh	r2, [r3, #20]
 800851a:	e002      	b.n	8008522 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	8b3a      	ldrh	r2, [r7, #24]
 8008526:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008528:	8b3b      	ldrh	r3, [r7, #24]
 800852a:	461a      	mov	r2, r3
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 fba5 	bl	8008c7e <USBH_CtlReq>
 8008534:	4603      	mov	r3, r0
}
 8008536:	4618      	mov	r0, r3
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	460b      	mov	r3, r1
 8008548:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	789b      	ldrb	r3, [r3, #2]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d10f      	bne.n	8008572 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2200      	movs	r2, #0
 8008556:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2205      	movs	r2, #5
 800855c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	b29a      	uxth	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008572:	2200      	movs	r2, #0
 8008574:	2100      	movs	r1, #0
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 fb81 	bl	8008c7e <USBH_CtlReq>
 800857c:	4603      	mov	r3, r0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b082      	sub	sp, #8
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
 800858e:	460b      	mov	r3, r1
 8008590:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	789b      	ldrb	r3, [r3, #2]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d10e      	bne.n	80085b8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2209      	movs	r2, #9
 80085a4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	887a      	ldrh	r2, [r7, #2]
 80085aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80085b8:	2200      	movs	r2, #0
 80085ba:	2100      	movs	r1, #0
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fb5e 	bl	8008c7e <USBH_CtlReq>
 80085c2:	4603      	mov	r3, r0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	789b      	ldrb	r3, [r3, #2]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d10f      	bne.n	8008600 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2203      	movs	r2, #3
 80085ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008600:	2200      	movs	r2, #0
 8008602:	2100      	movs	r1, #0
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 fb3a 	bl	8008c7e <USBH_CtlReq>
 800860a:	4603      	mov	r3, r0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	460b      	mov	r3, r1
 800861e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	789b      	ldrb	r3, [r3, #2]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d10f      	bne.n	8008648 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2201      	movs	r2, #1
 8008632:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	b29a      	uxth	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2200      	movs	r2, #0
 8008646:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008648:	2200      	movs	r2, #0
 800864a:	2100      	movs	r1, #0
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fb16 	bl	8008c7e <USBH_CtlReq>
 8008652:	4603      	mov	r3, r0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008670:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d101      	bne.n	8008680 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800867c:	2302      	movs	r3, #2
 800867e:	e094      	b.n	80087aa <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	781a      	ldrb	r2, [r3, #0]
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	785a      	ldrb	r2, [r3, #1]
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	3302      	adds	r3, #2
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	3303      	adds	r3, #3
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	021b      	lsls	r3, r3, #8
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	4313      	orrs	r3, r2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	693b      	ldr	r3, [r7, #16]
 80086a8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	791a      	ldrb	r2, [r3, #4]
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	795a      	ldrb	r2, [r3, #5]
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	799a      	ldrb	r2, [r3, #6]
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	79da      	ldrb	r2, [r3, #7]
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d004      	beq.n	80086de <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d11b      	bne.n	8008716 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	79db      	ldrb	r3, [r3, #7]
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	dc0f      	bgt.n	8008706 <USBH_ParseDevDesc+0xaa>
 80086e6:	2b08      	cmp	r3, #8
 80086e8:	db0f      	blt.n	800870a <USBH_ParseDevDesc+0xae>
 80086ea:	3b08      	subs	r3, #8
 80086ec:	4a32      	ldr	r2, [pc, #200]	@ (80087b8 <USBH_ParseDevDesc+0x15c>)
 80086ee:	fa22 f303 	lsr.w	r3, r2, r3
 80086f2:	f003 0301 	and.w	r3, r3, #1
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bf14      	ite	ne
 80086fa:	2301      	movne	r3, #1
 80086fc:	2300      	moveq	r3, #0
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b00      	cmp	r3, #0
 8008702:	d106      	bne.n	8008712 <USBH_ParseDevDesc+0xb6>
 8008704:	e001      	b.n	800870a <USBH_ParseDevDesc+0xae>
 8008706:	2b40      	cmp	r3, #64	@ 0x40
 8008708:	d003      	beq.n	8008712 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2208      	movs	r2, #8
 800870e:	71da      	strb	r2, [r3, #7]
        break;
 8008710:	e000      	b.n	8008714 <USBH_ParseDevDesc+0xb8>
        break;
 8008712:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008714:	e00e      	b.n	8008734 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800871c:	2b02      	cmp	r3, #2
 800871e:	d107      	bne.n	8008730 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	79db      	ldrb	r3, [r3, #7]
 8008724:	2b08      	cmp	r3, #8
 8008726:	d005      	beq.n	8008734 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	2208      	movs	r2, #8
 800872c:	71da      	strb	r2, [r3, #7]
 800872e:	e001      	b.n	8008734 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008730:	2303      	movs	r3, #3
 8008732:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008734:	88fb      	ldrh	r3, [r7, #6]
 8008736:	2b08      	cmp	r3, #8
 8008738:	d936      	bls.n	80087a8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	3308      	adds	r3, #8
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	461a      	mov	r2, r3
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	3309      	adds	r3, #9
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	b29b      	uxth	r3, r3
 800874c:	4313      	orrs	r3, r2
 800874e:	b29a      	uxth	r2, r3
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	330a      	adds	r3, #10
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	330b      	adds	r3, #11
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	021b      	lsls	r3, r3, #8
 8008764:	b29b      	uxth	r3, r3
 8008766:	4313      	orrs	r3, r2
 8008768:	b29a      	uxth	r2, r3
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	330c      	adds	r3, #12
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	330d      	adds	r3, #13
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	021b      	lsls	r3, r3, #8
 800877e:	b29b      	uxth	r3, r3
 8008780:	4313      	orrs	r3, r2
 8008782:	b29a      	uxth	r2, r3
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	7b9a      	ldrb	r2, [r3, #14]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	7bda      	ldrb	r2, [r3, #15]
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	7c1a      	ldrb	r2, [r3, #16]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	7c5a      	ldrb	r2, [r3, #17]
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80087a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	371c      	adds	r7, #28
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	01000101 	.word	0x01000101

080087bc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08c      	sub	sp, #48	@ 0x30
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80087d0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80087ea:	2302      	movs	r3, #2
 80087ec:	e0da      	b.n	80089a4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80087f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	2b09      	cmp	r3, #9
 80087f8:	d002      	beq.n	8008800 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80087fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fc:	2209      	movs	r2, #9
 80087fe:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	6a3b      	ldr	r3, [r7, #32]
 8008806:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	785a      	ldrb	r2, [r3, #1]
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	3302      	adds	r3, #2
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	3303      	adds	r3, #3
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	021b      	lsls	r3, r3, #8
 8008820:	b29b      	uxth	r3, r3
 8008822:	4313      	orrs	r3, r2
 8008824:	b29b      	uxth	r3, r3
 8008826:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800882a:	bf28      	it	cs
 800882c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008830:	b29a      	uxth	r2, r3
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	791a      	ldrb	r2, [r3, #4]
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	795a      	ldrb	r2, [r3, #5]
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	799a      	ldrb	r2, [r3, #6]
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	79da      	ldrb	r2, [r3, #7]
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	7a1a      	ldrb	r2, [r3, #8]
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800885e:	88fb      	ldrh	r3, [r7, #6]
 8008860:	2b09      	cmp	r3, #9
 8008862:	f240 809d 	bls.w	80089a0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008866:	2309      	movs	r3, #9
 8008868:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800886e:	e081      	b.n	8008974 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008870:	f107 0316 	add.w	r3, r7, #22
 8008874:	4619      	mov	r1, r3
 8008876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008878:	f000 f9e7 	bl	8008c4a <USBH_GetNextDesc>
 800887c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800887e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008880:	785b      	ldrb	r3, [r3, #1]
 8008882:	2b04      	cmp	r3, #4
 8008884:	d176      	bne.n	8008974 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b09      	cmp	r3, #9
 800888c:	d002      	beq.n	8008894 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800888e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008890:	2209      	movs	r2, #9
 8008892:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008894:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008898:	221a      	movs	r2, #26
 800889a:	fb02 f303 	mul.w	r3, r2, r3
 800889e:	3308      	adds	r3, #8
 80088a0:	6a3a      	ldr	r2, [r7, #32]
 80088a2:	4413      	add	r3, r2
 80088a4:	3302      	adds	r3, #2
 80088a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80088a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088aa:	69f8      	ldr	r0, [r7, #28]
 80088ac:	f000 f87e 	bl	80089ac <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80088ba:	e043      	b.n	8008944 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80088bc:	f107 0316 	add.w	r3, r7, #22
 80088c0:	4619      	mov	r1, r3
 80088c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088c4:	f000 f9c1 	bl	8008c4a <USBH_GetNextDesc>
 80088c8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088cc:	785b      	ldrb	r3, [r3, #1]
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	d138      	bne.n	8008944 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	795b      	ldrb	r3, [r3, #5]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d113      	bne.n	8008902 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d003      	beq.n	80088ea <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	799b      	ldrb	r3, [r3, #6]
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d10b      	bne.n	8008902 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	79db      	ldrb	r3, [r3, #7]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10b      	bne.n	800890a <USBH_ParseCfgDesc+0x14e>
 80088f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b09      	cmp	r3, #9
 80088f8:	d007      	beq.n	800890a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80088fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fc:	2209      	movs	r2, #9
 80088fe:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008900:	e003      	b.n	800890a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008904:	2207      	movs	r2, #7
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	e000      	b.n	800890c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800890a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800890c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008910:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008914:	3201      	adds	r2, #1
 8008916:	00d2      	lsls	r2, r2, #3
 8008918:	211a      	movs	r1, #26
 800891a:	fb01 f303 	mul.w	r3, r1, r3
 800891e:	4413      	add	r3, r2
 8008920:	3308      	adds	r3, #8
 8008922:	6a3a      	ldr	r2, [r7, #32]
 8008924:	4413      	add	r3, r2
 8008926:	3304      	adds	r3, #4
 8008928:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800892a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800892c:	69b9      	ldr	r1, [r7, #24]
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 f870 	bl	8008a14 <USBH_ParseEPDesc>
 8008934:	4603      	mov	r3, r0
 8008936:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800893a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800893e:	3301      	adds	r3, #1
 8008940:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	791b      	ldrb	r3, [r3, #4]
 8008948:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800894c:	429a      	cmp	r2, r3
 800894e:	d204      	bcs.n	800895a <USBH_ParseCfgDesc+0x19e>
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	885a      	ldrh	r2, [r3, #2]
 8008954:	8afb      	ldrh	r3, [r7, #22]
 8008956:	429a      	cmp	r2, r3
 8008958:	d8b0      	bhi.n	80088bc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	791b      	ldrb	r3, [r3, #4]
 800895e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008962:	429a      	cmp	r2, r3
 8008964:	d201      	bcs.n	800896a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008966:	2303      	movs	r3, #3
 8008968:	e01c      	b.n	80089a4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800896a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800896e:	3301      	adds	r3, #1
 8008970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008978:	2b01      	cmp	r3, #1
 800897a:	d805      	bhi.n	8008988 <USBH_ParseCfgDesc+0x1cc>
 800897c:	6a3b      	ldr	r3, [r7, #32]
 800897e:	885a      	ldrh	r2, [r3, #2]
 8008980:	8afb      	ldrh	r3, [r7, #22]
 8008982:	429a      	cmp	r2, r3
 8008984:	f63f af74 	bhi.w	8008870 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	791b      	ldrb	r3, [r3, #4]
 800898c:	2b02      	cmp	r3, #2
 800898e:	bf28      	it	cs
 8008990:	2302      	movcs	r3, #2
 8008992:	b2db      	uxtb	r3, r3
 8008994:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008998:	429a      	cmp	r2, r3
 800899a:	d201      	bcs.n	80089a0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800899c:	2303      	movs	r3, #3
 800899e:	e001      	b.n	80089a4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80089a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3730      	adds	r7, #48	@ 0x30
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781a      	ldrb	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	785a      	ldrb	r2, [r3, #1]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	789a      	ldrb	r2, [r3, #2]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	78da      	ldrb	r2, [r3, #3]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	3304      	adds	r3, #4
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	bf28      	it	cs
 80089e0:	2302      	movcs	r3, #2
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	795a      	ldrb	r2, [r3, #5]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	799a      	ldrb	r2, [r3, #6]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	79da      	ldrb	r2, [r3, #7]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	7a1a      	ldrb	r2, [r3, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	721a      	strb	r2, [r3, #8]
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	785a      	ldrb	r2, [r3, #1]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	789a      	ldrb	r2, [r3, #2]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	78da      	ldrb	r2, [r3, #3]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3304      	adds	r3, #4
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3305      	adds	r3, #5
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	021b      	lsls	r3, r3, #8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	4313      	orrs	r3, r2
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	799a      	ldrb	r2, [r3, #6]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	889b      	ldrh	r3, [r3, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008a72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a76:	d804      	bhi.n	8008a82 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a80:	d901      	bls.n	8008a86 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008a82:	2303      	movs	r3, #3
 8008a84:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d136      	bne.n	8008afe <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	78db      	ldrb	r3, [r3, #3]
 8008a94:	f003 0303 	and.w	r3, r3, #3
 8008a98:	2b02      	cmp	r3, #2
 8008a9a:	d108      	bne.n	8008aae <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	889b      	ldrh	r3, [r3, #4]
 8008aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aa4:	f240 8097 	bls.w	8008bd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	75fb      	strb	r3, [r7, #23]
 8008aac:	e093      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	78db      	ldrb	r3, [r3, #3]
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d107      	bne.n	8008aca <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	889b      	ldrh	r3, [r3, #4]
 8008abe:	2b40      	cmp	r3, #64	@ 0x40
 8008ac0:	f240 8089 	bls.w	8008bd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	75fb      	strb	r3, [r7, #23]
 8008ac8:	e085      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	78db      	ldrb	r3, [r3, #3]
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d005      	beq.n	8008ae2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	78db      	ldrb	r3, [r3, #3]
 8008ada:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d10a      	bne.n	8008af8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	799b      	ldrb	r3, [r3, #6]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <USBH_ParseEPDesc+0xde>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	799b      	ldrb	r3, [r3, #6]
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d970      	bls.n	8008bd4 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008af2:	2303      	movs	r3, #3
 8008af4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008af6:	e06d      	b.n	8008bd4 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008af8:	2303      	movs	r3, #3
 8008afa:	75fb      	strb	r3, [r7, #23]
 8008afc:	e06b      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d13c      	bne.n	8008b82 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	78db      	ldrb	r3, [r3, #3]
 8008b0c:	f003 0303 	and.w	r3, r3, #3
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d005      	beq.n	8008b20 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	78db      	ldrb	r3, [r3, #3]
 8008b18:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d106      	bne.n	8008b2e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	889b      	ldrh	r3, [r3, #4]
 8008b24:	2b40      	cmp	r3, #64	@ 0x40
 8008b26:	d956      	bls.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008b2c:	e053      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	78db      	ldrb	r3, [r3, #3]
 8008b32:	f003 0303 	and.w	r3, r3, #3
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d10e      	bne.n	8008b58 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	799b      	ldrb	r3, [r3, #6]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008b46:	2b10      	cmp	r3, #16
 8008b48:	d803      	bhi.n	8008b52 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008b4e:	2b40      	cmp	r3, #64	@ 0x40
 8008b50:	d941      	bls.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b52:	2303      	movs	r3, #3
 8008b54:	75fb      	strb	r3, [r7, #23]
 8008b56:	e03e      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	78db      	ldrb	r3, [r3, #3]
 8008b5c:	f003 0303 	and.w	r3, r3, #3
 8008b60:	2b03      	cmp	r3, #3
 8008b62:	d10b      	bne.n	8008b7c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	799b      	ldrb	r3, [r3, #6]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d004      	beq.n	8008b76 <USBH_ParseEPDesc+0x162>
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	889b      	ldrh	r3, [r3, #4]
 8008b70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b74:	d32f      	bcc.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008b76:	2303      	movs	r3, #3
 8008b78:	75fb      	strb	r3, [r7, #23]
 8008b7a:	e02c      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	75fb      	strb	r3, [r7, #23]
 8008b80:	e029      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d120      	bne.n	8008bce <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	78db      	ldrb	r3, [r3, #3]
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d106      	bne.n	8008ba6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	889b      	ldrh	r3, [r3, #4]
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d01a      	beq.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ba0:	2303      	movs	r3, #3
 8008ba2:	75fb      	strb	r3, [r7, #23]
 8008ba4:	e017      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	78db      	ldrb	r3, [r3, #3]
 8008baa:	f003 0303 	and.w	r3, r3, #3
 8008bae:	2b03      	cmp	r3, #3
 8008bb0:	d10a      	bne.n	8008bc8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	799b      	ldrb	r3, [r3, #6]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d003      	beq.n	8008bc2 <USBH_ParseEPDesc+0x1ae>
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	889b      	ldrh	r3, [r3, #4]
 8008bbe:	2b08      	cmp	r3, #8
 8008bc0:	d909      	bls.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	75fb      	strb	r3, [r7, #23]
 8008bc6:	e006      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	75fb      	strb	r3, [r7, #23]
 8008bcc:	e003      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	75fb      	strb	r3, [r7, #23]
 8008bd2:	e000      	b.n	8008bd6 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008bd4:	bf00      	nop
  }

  return status;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	371c      	adds	r7, #28
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b03      	cmp	r3, #3
 8008bfa:	d120      	bne.n	8008c3e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	1e9a      	subs	r2, r3, #2
 8008c02:	88fb      	ldrh	r3, [r7, #6]
 8008c04:	4293      	cmp	r3, r2
 8008c06:	bf28      	it	cs
 8008c08:	4613      	movcs	r3, r2
 8008c0a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3302      	adds	r3, #2
 8008c10:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008c12:	2300      	movs	r3, #0
 8008c14:	82fb      	strh	r3, [r7, #22]
 8008c16:	e00b      	b.n	8008c30 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008c18:	8afb      	ldrh	r3, [r7, #22]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	781a      	ldrb	r2, [r3, #0]
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008c2a:	8afb      	ldrh	r3, [r7, #22]
 8008c2c:	3302      	adds	r3, #2
 8008c2e:	82fb      	strh	r3, [r7, #22]
 8008c30:	8afa      	ldrh	r2, [r7, #22]
 8008c32:	8abb      	ldrh	r3, [r7, #20]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d3ef      	bcc.n	8008c18 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	701a      	strb	r2, [r3, #0]
  }
}
 8008c3e:	bf00      	nop
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	7812      	ldrb	r2, [r2, #0]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008c70:	68fb      	ldr	r3, [r7, #12]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b086      	sub	sp, #24
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	789b      	ldrb	r3, [r3, #2]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d002      	beq.n	8008c9e <USBH_CtlReq+0x20>
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d00f      	beq.n	8008cbc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008c9c:	e027      	b.n	8008cee <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	88fa      	ldrh	r2, [r7, #6]
 8008ca8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2201      	movs	r2, #1
 8008cae:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8008cba:	e018      	b.n	8008cee <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008cbc:	68f8      	ldr	r0, [r7, #12]
 8008cbe:	f000 f81b 	bl	8008cf8 <USBH_HandleControl>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008cc6:	7dfb      	ldrb	r3, [r7, #23]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d002      	beq.n	8008cd2 <USBH_CtlReq+0x54>
 8008ccc:	7dfb      	ldrb	r3, [r7, #23]
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d106      	bne.n	8008ce0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	761a      	strb	r2, [r3, #24]
      break;
 8008cde:	e005      	b.n	8008cec <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ce0:	7dfb      	ldrb	r3, [r7, #23]
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d102      	bne.n	8008cec <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	709a      	strb	r2, [r3, #2]
      break;
 8008cec:	bf00      	nop
  }
  return status;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af02      	add	r7, sp, #8
 8008cfe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008d00:	2301      	movs	r3, #1
 8008d02:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	7e1b      	ldrb	r3, [r3, #24]
 8008d0c:	3b01      	subs	r3, #1
 8008d0e:	2b0a      	cmp	r3, #10
 8008d10:	f200 8156 	bhi.w	8008fc0 <USBH_HandleControl+0x2c8>
 8008d14:	a201      	add	r2, pc, #4	@ (adr r2, 8008d1c <USBH_HandleControl+0x24>)
 8008d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1a:	bf00      	nop
 8008d1c:	08008d49 	.word	0x08008d49
 8008d20:	08008d63 	.word	0x08008d63
 8008d24:	08008dcd 	.word	0x08008dcd
 8008d28:	08008df3 	.word	0x08008df3
 8008d2c:	08008e2b 	.word	0x08008e2b
 8008d30:	08008e55 	.word	0x08008e55
 8008d34:	08008ea7 	.word	0x08008ea7
 8008d38:	08008ec9 	.word	0x08008ec9
 8008d3c:	08008f05 	.word	0x08008f05
 8008d40:	08008f2b 	.word	0x08008f2b
 8008d44:	08008f69 	.word	0x08008f69
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f103 0110 	add.w	r1, r3, #16
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	795b      	ldrb	r3, [r3, #5]
 8008d52:	461a      	mov	r2, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f943 	bl	8008fe0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	761a      	strb	r2, [r3, #24]
      break;
 8008d60:	e139      	b.n	8008fd6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	795b      	ldrb	r3, [r3, #5]
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fcc5 	bl	80096f8 <USBH_LL_GetURBState>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008d72:	7bbb      	ldrb	r3, [r7, #14]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d11e      	bne.n	8008db6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	7c1b      	ldrb	r3, [r3, #16]
 8008d7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008d80:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	8adb      	ldrh	r3, [r3, #22]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008d8a:	7b7b      	ldrb	r3, [r7, #13]
 8008d8c:	2b80      	cmp	r3, #128	@ 0x80
 8008d8e:	d103      	bne.n	8008d98 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2203      	movs	r2, #3
 8008d94:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008d96:	e115      	b.n	8008fc4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2205      	movs	r2, #5
 8008d9c:	761a      	strb	r2, [r3, #24]
      break;
 8008d9e:	e111      	b.n	8008fc4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008da0:	7b7b      	ldrb	r3, [r7, #13]
 8008da2:	2b80      	cmp	r3, #128	@ 0x80
 8008da4:	d103      	bne.n	8008dae <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2209      	movs	r2, #9
 8008daa:	761a      	strb	r2, [r3, #24]
      break;
 8008dac:	e10a      	b.n	8008fc4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2207      	movs	r2, #7
 8008db2:	761a      	strb	r2, [r3, #24]
      break;
 8008db4:	e106      	b.n	8008fc4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d003      	beq.n	8008dc4 <USBH_HandleControl+0xcc>
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	f040 8100 	bne.w	8008fc4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	220b      	movs	r2, #11
 8008dc8:	761a      	strb	r2, [r3, #24]
      break;
 8008dca:	e0fb      	b.n	8008fc4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6899      	ldr	r1, [r3, #8]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	899a      	ldrh	r2, [r3, #12]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	791b      	ldrb	r3, [r3, #4]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f93a 	bl	800905e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2204      	movs	r2, #4
 8008dee:	761a      	strb	r2, [r3, #24]
      break;
 8008df0:	e0f1      	b.n	8008fd6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	791b      	ldrb	r3, [r3, #4]
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fc7d 	bl	80096f8 <USBH_LL_GetURBState>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d102      	bne.n	8008e0e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2209      	movs	r2, #9
 8008e0c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b05      	cmp	r3, #5
 8008e12:	d102      	bne.n	8008e1a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008e14:	2303      	movs	r3, #3
 8008e16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e18:	e0d6      	b.n	8008fc8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b04      	cmp	r3, #4
 8008e1e:	f040 80d3 	bne.w	8008fc8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	220b      	movs	r2, #11
 8008e26:	761a      	strb	r2, [r3, #24]
      break;
 8008e28:	e0ce      	b.n	8008fc8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6899      	ldr	r1, [r3, #8]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	899a      	ldrh	r2, [r3, #12]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	795b      	ldrb	r3, [r3, #5]
 8008e36:	2001      	movs	r0, #1
 8008e38:	9000      	str	r0, [sp, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f8ea 	bl	8009014 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2206      	movs	r2, #6
 8008e50:	761a      	strb	r2, [r3, #24]
      break;
 8008e52:	e0c0      	b.n	8008fd6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	795b      	ldrb	r3, [r3, #5]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fc4c 	bl	80096f8 <USBH_LL_GetURBState>
 8008e60:	4603      	mov	r3, r0
 8008e62:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d103      	bne.n	8008e72 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2207      	movs	r2, #7
 8008e6e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008e70:	e0ac      	b.n	8008fcc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
 8008e74:	2b05      	cmp	r3, #5
 8008e76:	d105      	bne.n	8008e84 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	220c      	movs	r2, #12
 8008e7c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	73fb      	strb	r3, [r7, #15]
      break;
 8008e82:	e0a3      	b.n	8008fcc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d103      	bne.n	8008e92 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2205      	movs	r2, #5
 8008e8e:	761a      	strb	r2, [r3, #24]
      break;
 8008e90:	e09c      	b.n	8008fcc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	f040 8099 	bne.w	8008fcc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	220b      	movs	r2, #11
 8008e9e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea4:	e092      	b.n	8008fcc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	791b      	ldrb	r3, [r3, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2100      	movs	r1, #0
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 f8d5 	bl	800905e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	761a      	strb	r2, [r3, #24]

      break;
 8008ec6:	e086      	b.n	8008fd6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	791b      	ldrb	r3, [r3, #4]
 8008ecc:	4619      	mov	r1, r3
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fc12 	bl	80096f8 <USBH_LL_GetURBState>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	2b01      	cmp	r3, #1
 8008edc:	d105      	bne.n	8008eea <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	220d      	movs	r2, #13
 8008ee2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ee8:	e072      	b.n	8008fd0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008eea:	7bbb      	ldrb	r3, [r7, #14]
 8008eec:	2b04      	cmp	r3, #4
 8008eee:	d103      	bne.n	8008ef8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	220b      	movs	r2, #11
 8008ef4:	761a      	strb	r2, [r3, #24]
      break;
 8008ef6:	e06b      	b.n	8008fd0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2b05      	cmp	r3, #5
 8008efc:	d168      	bne.n	8008fd0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008efe:	2303      	movs	r3, #3
 8008f00:	73fb      	strb	r3, [r7, #15]
      break;
 8008f02:	e065      	b.n	8008fd0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	795b      	ldrb	r3, [r3, #5]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	9200      	str	r2, [sp, #0]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2100      	movs	r1, #0
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 f87f 	bl	8009014 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	220a      	movs	r2, #10
 8008f26:	761a      	strb	r2, [r3, #24]
      break;
 8008f28:	e055      	b.n	8008fd6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	795b      	ldrb	r3, [r3, #5]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fbe1 	bl	80096f8 <USBH_LL_GetURBState>
 8008f36:	4603      	mov	r3, r0
 8008f38:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d105      	bne.n	8008f4c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	220d      	movs	r2, #13
 8008f48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f4a:	e043      	b.n	8008fd4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d103      	bne.n	8008f5a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2209      	movs	r2, #9
 8008f56:	761a      	strb	r2, [r3, #24]
      break;
 8008f58:	e03c      	b.n	8008fd4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	d139      	bne.n	8008fd4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	220b      	movs	r2, #11
 8008f64:	761a      	strb	r2, [r3, #24]
      break;
 8008f66:	e035      	b.n	8008fd4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	7e5b      	ldrb	r3, [r3, #25]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	765a      	strb	r2, [r3, #25]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	7e5b      	ldrb	r3, [r3, #25]
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d806      	bhi.n	8008f8a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2201      	movs	r2, #1
 8008f86:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008f88:	e025      	b.n	8008fd6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f90:	2106      	movs	r1, #6
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	795b      	ldrb	r3, [r3, #5]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f90c 	bl	80091c0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	791b      	ldrb	r3, [r3, #4]
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f906 	bl	80091c0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008fba:	2302      	movs	r3, #2
 8008fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8008fbe:	e00a      	b.n	8008fd6 <USBH_HandleControl+0x2de>

    default:
      break;
 8008fc0:	bf00      	nop
 8008fc2:	e008      	b.n	8008fd6 <USBH_HandleControl+0x2de>
      break;
 8008fc4:	bf00      	nop
 8008fc6:	e006      	b.n	8008fd6 <USBH_HandleControl+0x2de>
      break;
 8008fc8:	bf00      	nop
 8008fca:	e004      	b.n	8008fd6 <USBH_HandleControl+0x2de>
      break;
 8008fcc:	bf00      	nop
 8008fce:	e002      	b.n	8008fd6 <USBH_HandleControl+0x2de>
      break;
 8008fd0:	bf00      	nop
 8008fd2:	e000      	b.n	8008fd6 <USBH_HandleControl+0x2de>
      break;
 8008fd4:	bf00      	nop
  }

  return status;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b088      	sub	sp, #32
 8008fe4:	af04      	add	r7, sp, #16
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	4613      	mov	r3, r2
 8008fec:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008fee:	79f9      	ldrb	r1, [r7, #7]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9303      	str	r3, [sp, #12]
 8008ff4:	2308      	movs	r3, #8
 8008ff6:	9302      	str	r3, [sp, #8]
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	9301      	str	r3, [sp, #4]
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9300      	str	r3, [sp, #0]
 8009000:	2300      	movs	r3, #0
 8009002:	2200      	movs	r2, #0
 8009004:	68f8      	ldr	r0, [r7, #12]
 8009006:	f000 fb46 	bl	8009696 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b088      	sub	sp, #32
 8009018:	af04      	add	r7, sp, #16
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4611      	mov	r1, r2
 8009020:	461a      	mov	r2, r3
 8009022:	460b      	mov	r3, r1
 8009024:	80fb      	strh	r3, [r7, #6]
 8009026:	4613      	mov	r3, r2
 8009028:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009038:	7979      	ldrb	r1, [r7, #5]
 800903a:	7e3b      	ldrb	r3, [r7, #24]
 800903c:	9303      	str	r3, [sp, #12]
 800903e:	88fb      	ldrh	r3, [r7, #6]
 8009040:	9302      	str	r3, [sp, #8]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	9301      	str	r3, [sp, #4]
 8009046:	2301      	movs	r3, #1
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	2300      	movs	r3, #0
 800904c:	2200      	movs	r2, #0
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 fb21 	bl	8009696 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b088      	sub	sp, #32
 8009062:	af04      	add	r7, sp, #16
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	4611      	mov	r1, r2
 800906a:	461a      	mov	r2, r3
 800906c:	460b      	mov	r3, r1
 800906e:	80fb      	strh	r3, [r7, #6]
 8009070:	4613      	mov	r3, r2
 8009072:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009074:	7979      	ldrb	r1, [r7, #5]
 8009076:	2300      	movs	r3, #0
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	88fb      	ldrh	r3, [r7, #6]
 800907c:	9302      	str	r3, [sp, #8]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	2301      	movs	r3, #1
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	2300      	movs	r3, #0
 8009088:	2201      	movs	r2, #1
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fb03 	bl	8009696 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009090:	2300      	movs	r3, #0

}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b088      	sub	sp, #32
 800909e:	af04      	add	r7, sp, #16
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	4611      	mov	r1, r2
 80090a6:	461a      	mov	r2, r3
 80090a8:	460b      	mov	r3, r1
 80090aa:	80fb      	strh	r3, [r7, #6]
 80090ac:	4613      	mov	r3, r2
 80090ae:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80090ba:	2300      	movs	r3, #0
 80090bc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090be:	7979      	ldrb	r1, [r7, #5]
 80090c0:	7e3b      	ldrb	r3, [r7, #24]
 80090c2:	9303      	str	r3, [sp, #12]
 80090c4:	88fb      	ldrh	r3, [r7, #6]
 80090c6:	9302      	str	r3, [sp, #8]
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	9301      	str	r3, [sp, #4]
 80090cc:	2301      	movs	r3, #1
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	2302      	movs	r3, #2
 80090d2:	2200      	movs	r2, #0
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 fade 	bl	8009696 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af04      	add	r7, sp, #16
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	4611      	mov	r1, r2
 80090f0:	461a      	mov	r2, r3
 80090f2:	460b      	mov	r3, r1
 80090f4:	80fb      	strh	r3, [r7, #6]
 80090f6:	4613      	mov	r3, r2
 80090f8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80090fa:	7979      	ldrb	r1, [r7, #5]
 80090fc:	2300      	movs	r3, #0
 80090fe:	9303      	str	r3, [sp, #12]
 8009100:	88fb      	ldrh	r3, [r7, #6]
 8009102:	9302      	str	r3, [sp, #8]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	9301      	str	r3, [sp, #4]
 8009108:	2301      	movs	r3, #1
 800910a:	9300      	str	r3, [sp, #0]
 800910c:	2302      	movs	r3, #2
 800910e:	2201      	movs	r2, #1
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f000 fac0 	bl	8009696 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b086      	sub	sp, #24
 8009124:	af04      	add	r7, sp, #16
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	4608      	mov	r0, r1
 800912a:	4611      	mov	r1, r2
 800912c:	461a      	mov	r2, r3
 800912e:	4603      	mov	r3, r0
 8009130:	70fb      	strb	r3, [r7, #3]
 8009132:	460b      	mov	r3, r1
 8009134:	70bb      	strb	r3, [r7, #2]
 8009136:	4613      	mov	r3, r2
 8009138:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800913a:	7878      	ldrb	r0, [r7, #1]
 800913c:	78ba      	ldrb	r2, [r7, #2]
 800913e:	78f9      	ldrb	r1, [r7, #3]
 8009140:	8b3b      	ldrh	r3, [r7, #24]
 8009142:	9302      	str	r3, [sp, #8]
 8009144:	7d3b      	ldrb	r3, [r7, #20]
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	7c3b      	ldrb	r3, [r7, #16]
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	4603      	mov	r3, r0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa53 	bl	80095fa <USBH_LL_OpenPipe>

  return USBH_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b082      	sub	sp, #8
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	460b      	mov	r3, r1
 8009168:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa72 	bl	8009658 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
 8009186:	460b      	mov	r3, r1
 8009188:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f836 	bl	80091fc <USBH_GetFreePipe>
 8009190:	4603      	mov	r3, r0
 8009192:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009194:	89fb      	ldrh	r3, [r7, #14]
 8009196:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800919a:	4293      	cmp	r3, r2
 800919c:	d00a      	beq.n	80091b4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800919e:	78fa      	ldrb	r2, [r7, #3]
 80091a0:	89fb      	ldrh	r3, [r7, #14]
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80091aa:	6879      	ldr	r1, [r7, #4]
 80091ac:	33e0      	adds	r3, #224	@ 0xe0
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	440b      	add	r3, r1
 80091b2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80091b4:	89fb      	ldrh	r3, [r7, #14]
 80091b6:	b2db      	uxtb	r3, r3
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80091cc:	78fb      	ldrb	r3, [r7, #3]
 80091ce:	2b0f      	cmp	r3, #15
 80091d0:	d80d      	bhi.n	80091ee <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	33e0      	adds	r3, #224	@ 0xe0
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4413      	add	r3, r2
 80091dc:	685a      	ldr	r2, [r3, #4]
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80091e4:	6879      	ldr	r1, [r7, #4]
 80091e6:	33e0      	adds	r3, #224	@ 0xe0
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	440b      	add	r3, r1
 80091ec:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009204:	2300      	movs	r3, #0
 8009206:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009208:	2300      	movs	r3, #0
 800920a:	73fb      	strb	r3, [r7, #15]
 800920c:	e00f      	b.n	800922e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	33e0      	adds	r3, #224	@ 0xe0
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d102      	bne.n	8009228 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	b29b      	uxth	r3, r3
 8009226:	e007      	b.n	8009238 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009228:	7bfb      	ldrb	r3, [r7, #15]
 800922a:	3301      	adds	r3, #1
 800922c:	73fb      	strb	r3, [r7, #15]
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	2b0f      	cmp	r3, #15
 8009232:	d9ec      	bls.n	800920e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009234:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009238:	4618      	mov	r0, r3
 800923a:	3714      	adds	r7, #20
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009248:	2201      	movs	r2, #1
 800924a:	490e      	ldr	r1, [pc, #56]	@ (8009284 <MX_USB_HOST_Init+0x40>)
 800924c:	480e      	ldr	r0, [pc, #56]	@ (8009288 <MX_USB_HOST_Init+0x44>)
 800924e:	f7fe fb15 	bl	800787c <USBH_Init>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009258:	f7f7 fdfc 	bl	8000e54 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800925c:	490b      	ldr	r1, [pc, #44]	@ (800928c <MX_USB_HOST_Init+0x48>)
 800925e:	480a      	ldr	r0, [pc, #40]	@ (8009288 <MX_USB_HOST_Init+0x44>)
 8009260:	f7fe fbb9 	bl	80079d6 <USBH_RegisterClass>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800926a:	f7f7 fdf3 	bl	8000e54 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800926e:	4806      	ldr	r0, [pc, #24]	@ (8009288 <MX_USB_HOST_Init+0x44>)
 8009270:	f7fe fc3d 	bl	8007aee <USBH_Start>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800927a:	f7f7 fdeb 	bl	8000e54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800927e:	bf00      	nop
 8009280:	bd80      	pop	{r7, pc}
 8009282:	bf00      	nop
 8009284:	080092a5 	.word	0x080092a5
 8009288:	200001f8 	.word	0x200001f8
 800928c:	2000000c 	.word	0x2000000c

08009290 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009294:	4802      	ldr	r0, [pc, #8]	@ (80092a0 <MX_USB_HOST_Process+0x10>)
 8009296:	f7fe fc3b 	bl	8007b10 <USBH_Process>
}
 800929a:	bf00      	nop
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	200001f8 	.word	0x200001f8

080092a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d819      	bhi.n	80092ec <USBH_UserProcess+0x48>
 80092b8:	a201      	add	r2, pc, #4	@ (adr r2, 80092c0 <USBH_UserProcess+0x1c>)
 80092ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092be:	bf00      	nop
 80092c0:	080092ed 	.word	0x080092ed
 80092c4:	080092dd 	.word	0x080092dd
 80092c8:	080092ed 	.word	0x080092ed
 80092cc:	080092e5 	.word	0x080092e5
 80092d0:	080092d5 	.word	0x080092d5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80092d4:	4b09      	ldr	r3, [pc, #36]	@ (80092fc <USBH_UserProcess+0x58>)
 80092d6:	2203      	movs	r2, #3
 80092d8:	701a      	strb	r2, [r3, #0]
  break;
 80092da:	e008      	b.n	80092ee <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80092dc:	4b07      	ldr	r3, [pc, #28]	@ (80092fc <USBH_UserProcess+0x58>)
 80092de:	2202      	movs	r2, #2
 80092e0:	701a      	strb	r2, [r3, #0]
  break;
 80092e2:	e004      	b.n	80092ee <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80092e4:	4b05      	ldr	r3, [pc, #20]	@ (80092fc <USBH_UserProcess+0x58>)
 80092e6:	2201      	movs	r2, #1
 80092e8:	701a      	strb	r2, [r3, #0]
  break;
 80092ea:	e000      	b.n	80092ee <USBH_UserProcess+0x4a>

  default:
  break;
 80092ec:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80092ee:	bf00      	nop
 80092f0:	370c      	adds	r7, #12
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
 80092fa:	bf00      	nop
 80092fc:	200005d0 	.word	0x200005d0

08009300 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08a      	sub	sp, #40	@ 0x28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009308:	f107 0314 	add.w	r3, r7, #20
 800930c:	2200      	movs	r2, #0
 800930e:	601a      	str	r2, [r3, #0]
 8009310:	605a      	str	r2, [r3, #4]
 8009312:	609a      	str	r2, [r3, #8]
 8009314:	60da      	str	r2, [r3, #12]
 8009316:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009320:	d147      	bne.n	80093b2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009322:	2300      	movs	r3, #0
 8009324:	613b      	str	r3, [r7, #16]
 8009326:	4b25      	ldr	r3, [pc, #148]	@ (80093bc <HAL_HCD_MspInit+0xbc>)
 8009328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800932a:	4a24      	ldr	r2, [pc, #144]	@ (80093bc <HAL_HCD_MspInit+0xbc>)
 800932c:	f043 0301 	orr.w	r3, r3, #1
 8009330:	6313      	str	r3, [r2, #48]	@ 0x30
 8009332:	4b22      	ldr	r3, [pc, #136]	@ (80093bc <HAL_HCD_MspInit+0xbc>)
 8009334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009336:	f003 0301 	and.w	r3, r3, #1
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800933e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009344:	2300      	movs	r3, #0
 8009346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009348:	2300      	movs	r3, #0
 800934a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800934c:	f107 0314 	add.w	r3, r7, #20
 8009350:	4619      	mov	r1, r3
 8009352:	481b      	ldr	r0, [pc, #108]	@ (80093c0 <HAL_HCD_MspInit+0xc0>)
 8009354:	f7f8 f9cc 	bl	80016f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009358:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800935c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800935e:	2302      	movs	r3, #2
 8009360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009362:	2300      	movs	r3, #0
 8009364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009366:	2300      	movs	r3, #0
 8009368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800936a:	230a      	movs	r3, #10
 800936c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800936e:	f107 0314 	add.w	r3, r7, #20
 8009372:	4619      	mov	r1, r3
 8009374:	4812      	ldr	r0, [pc, #72]	@ (80093c0 <HAL_HCD_MspInit+0xc0>)
 8009376:	f7f8 f9bb 	bl	80016f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800937a:	4b10      	ldr	r3, [pc, #64]	@ (80093bc <HAL_HCD_MspInit+0xbc>)
 800937c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800937e:	4a0f      	ldr	r2, [pc, #60]	@ (80093bc <HAL_HCD_MspInit+0xbc>)
 8009380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009384:	6353      	str	r3, [r2, #52]	@ 0x34
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
 800938a:	4b0c      	ldr	r3, [pc, #48]	@ (80093bc <HAL_HCD_MspInit+0xbc>)
 800938c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800938e:	4a0b      	ldr	r2, [pc, #44]	@ (80093bc <HAL_HCD_MspInit+0xbc>)
 8009390:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009394:	6453      	str	r3, [r2, #68]	@ 0x44
 8009396:	4b09      	ldr	r3, [pc, #36]	@ (80093bc <HAL_HCD_MspInit+0xbc>)
 8009398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800939a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093a2:	2200      	movs	r2, #0
 80093a4:	2100      	movs	r1, #0
 80093a6:	2043      	movs	r0, #67	@ 0x43
 80093a8:	f7f8 f96b 	bl	8001682 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093ac:	2043      	movs	r0, #67	@ 0x43
 80093ae:	f7f8 f984 	bl	80016ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093b2:	bf00      	nop
 80093b4:	3728      	adds	r7, #40	@ 0x28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	40023800 	.word	0x40023800
 80093c0:	40020000 	.word	0x40020000

080093c4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe ff73 	bl	80082be <USBH_LL_IncTimer>
}
 80093d8:	bf00      	nop
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe ffab 	bl	800834a <USBH_LL_Connect>
}
 80093f4:	bf00      	nop
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800940a:	4618      	mov	r0, r3
 800940c:	f7fe ffb4 	bl	8008378 <USBH_LL_Disconnect>
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	460b      	mov	r3, r1
 8009422:	70fb      	strb	r3, [r7, #3]
 8009424:	4613      	mov	r3, r2
 8009426:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009428:	bf00      	nop
 800942a:	370c      	adds	r7, #12
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe ff65 	bl	8008312 <USBH_LL_PortEnabled>
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800945e:	4618      	mov	r0, r3
 8009460:	f7fe ff65 	bl	800832e <USBH_LL_PortDisabled>
}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800947a:	2b01      	cmp	r3, #1
 800947c:	d12a      	bne.n	80094d4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800947e:	4a18      	ldr	r2, [pc, #96]	@ (80094e0 <USBH_LL_Init+0x74>)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a15      	ldr	r2, [pc, #84]	@ (80094e0 <USBH_LL_Init+0x74>)
 800948a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800948e:	4b14      	ldr	r3, [pc, #80]	@ (80094e0 <USBH_LL_Init+0x74>)
 8009490:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009494:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009496:	4b12      	ldr	r3, [pc, #72]	@ (80094e0 <USBH_LL_Init+0x74>)
 8009498:	2208      	movs	r2, #8
 800949a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800949c:	4b10      	ldr	r3, [pc, #64]	@ (80094e0 <USBH_LL_Init+0x74>)
 800949e:	2201      	movs	r2, #1
 80094a0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094a2:	4b0f      	ldr	r3, [pc, #60]	@ (80094e0 <USBH_LL_Init+0x74>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80094a8:	4b0d      	ldr	r3, [pc, #52]	@ (80094e0 <USBH_LL_Init+0x74>)
 80094aa:	2202      	movs	r2, #2
 80094ac:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094ae:	4b0c      	ldr	r3, [pc, #48]	@ (80094e0 <USBH_LL_Init+0x74>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80094b4:	480a      	ldr	r0, [pc, #40]	@ (80094e0 <USBH_LL_Init+0x74>)
 80094b6:	f7f8 fad0 	bl	8001a5a <HAL_HCD_Init>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80094c0:	f7f7 fcc8 	bl	8000e54 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80094c4:	4806      	ldr	r0, [pc, #24]	@ (80094e0 <USBH_LL_Init+0x74>)
 80094c6:	f7f8 ff31 	bl	800232c <HAL_HCD_GetCurrentFrame>
 80094ca:	4603      	mov	r3, r0
 80094cc:	4619      	mov	r1, r3
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7fe fee6 	bl	80082a0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}
 80094de:	bf00      	nop
 80094e0:	200005d4 	.word	0x200005d4

080094e4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80094f0:	2300      	movs	r3, #0
 80094f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7f8 fe9e 	bl	800223c <HAL_HCD_Start>
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 f95e 	bl	80097c8 <USBH_Get_USB_Status>
 800950c:	4603      	mov	r3, r0
 800950e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009510:	7bbb      	ldrb	r3, [r7, #14]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009530:	4618      	mov	r0, r3
 8009532:	f7f8 fea6 	bl	8002282 <HAL_HCD_Stop>
 8009536:	4603      	mov	r3, r0
 8009538:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800953a:	7bfb      	ldrb	r3, [r7, #15]
 800953c:	4618      	mov	r0, r3
 800953e:	f000 f943 	bl	80097c8 <USBH_Get_USB_Status>
 8009542:	4603      	mov	r3, r0
 8009544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009546:	7bbb      	ldrb	r3, [r7, #14]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3710      	adds	r7, #16
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009558:	2301      	movs	r3, #1
 800955a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009562:	4618      	mov	r0, r3
 8009564:	f7f8 fef0 	bl	8002348 <HAL_HCD_GetCurrentSpeed>
 8009568:	4603      	mov	r3, r0
 800956a:	2b02      	cmp	r3, #2
 800956c:	d00c      	beq.n	8009588 <USBH_LL_GetSpeed+0x38>
 800956e:	2b02      	cmp	r3, #2
 8009570:	d80d      	bhi.n	800958e <USBH_LL_GetSpeed+0x3e>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <USBH_LL_GetSpeed+0x2c>
 8009576:	2b01      	cmp	r3, #1
 8009578:	d003      	beq.n	8009582 <USBH_LL_GetSpeed+0x32>
 800957a:	e008      	b.n	800958e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800957c:	2300      	movs	r3, #0
 800957e:	73fb      	strb	r3, [r7, #15]
    break;
 8009580:	e008      	b.n	8009594 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009582:	2301      	movs	r3, #1
 8009584:	73fb      	strb	r3, [r7, #15]
    break;
 8009586:	e005      	b.n	8009594 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009588:	2302      	movs	r3, #2
 800958a:	73fb      	strb	r3, [r7, #15]
    break;
 800958c:	e002      	b.n	8009594 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800958e:	2301      	movs	r3, #1
 8009590:	73fb      	strb	r3, [r7, #15]
    break;
 8009592:	bf00      	nop
  }
  return  speed;
 8009594:	7bfb      	ldrb	r3, [r7, #15]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095b4:	4618      	mov	r0, r3
 80095b6:	f7f8 fe81 	bl	80022bc <HAL_HCD_ResetPort>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80095be:	7bfb      	ldrb	r3, [r7, #15]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 f901 	bl	80097c8 <USBH_Get_USB_Status>
 80095c6:	4603      	mov	r3, r0
 80095c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80095e6:	78fa      	ldrb	r2, [r7, #3]
 80095e8:	4611      	mov	r1, r2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7f8 fe89 	bl	8002302 <HAL_HCD_HC_GetXferCount>
 80095f0:	4603      	mov	r3, r0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80095fa:	b590      	push	{r4, r7, lr}
 80095fc:	b089      	sub	sp, #36	@ 0x24
 80095fe:	af04      	add	r7, sp, #16
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	4608      	mov	r0, r1
 8009604:	4611      	mov	r1, r2
 8009606:	461a      	mov	r2, r3
 8009608:	4603      	mov	r3, r0
 800960a:	70fb      	strb	r3, [r7, #3]
 800960c:	460b      	mov	r3, r1
 800960e:	70bb      	strb	r3, [r7, #2]
 8009610:	4613      	mov	r3, r2
 8009612:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009622:	787c      	ldrb	r4, [r7, #1]
 8009624:	78ba      	ldrb	r2, [r7, #2]
 8009626:	78f9      	ldrb	r1, [r7, #3]
 8009628:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800962a:	9302      	str	r3, [sp, #8]
 800962c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009630:	9301      	str	r3, [sp, #4]
 8009632:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009636:	9300      	str	r3, [sp, #0]
 8009638:	4623      	mov	r3, r4
 800963a:	f7f8 fa75 	bl	8001b28 <HAL_HCD_HC_Init>
 800963e:	4603      	mov	r3, r0
 8009640:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	4618      	mov	r0, r3
 8009646:	f000 f8bf 	bl	80097c8 <USBH_Get_USB_Status>
 800964a:	4603      	mov	r3, r0
 800964c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800964e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	bd90      	pop	{r4, r7, pc}

08009658 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009664:	2300      	movs	r3, #0
 8009666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009668:	2300      	movs	r3, #0
 800966a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009672:	78fa      	ldrb	r2, [r7, #3]
 8009674:	4611      	mov	r1, r2
 8009676:	4618      	mov	r0, r3
 8009678:	f7f8 fb0e 	bl	8001c98 <HAL_HCD_HC_Halt>
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009680:	7bfb      	ldrb	r3, [r7, #15]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 f8a0 	bl	80097c8 <USBH_Get_USB_Status>
 8009688:	4603      	mov	r3, r0
 800968a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800968c:	7bbb      	ldrb	r3, [r7, #14]
}
 800968e:	4618      	mov	r0, r3
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009696:	b590      	push	{r4, r7, lr}
 8009698:	b089      	sub	sp, #36	@ 0x24
 800969a:	af04      	add	r7, sp, #16
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	4608      	mov	r0, r1
 80096a0:	4611      	mov	r1, r2
 80096a2:	461a      	mov	r2, r3
 80096a4:	4603      	mov	r3, r0
 80096a6:	70fb      	strb	r3, [r7, #3]
 80096a8:	460b      	mov	r3, r1
 80096aa:	70bb      	strb	r3, [r7, #2]
 80096ac:	4613      	mov	r3, r2
 80096ae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80096be:	787c      	ldrb	r4, [r7, #1]
 80096c0:	78ba      	ldrb	r2, [r7, #2]
 80096c2:	78f9      	ldrb	r1, [r7, #3]
 80096c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80096c8:	9303      	str	r3, [sp, #12]
 80096ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80096cc:	9302      	str	r3, [sp, #8]
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	9301      	str	r3, [sp, #4]
 80096d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	4623      	mov	r3, r4
 80096da:	f7f8 fb01 	bl	8001ce0 <HAL_HCD_HC_SubmitRequest>
 80096de:	4603      	mov	r3, r0
 80096e0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 f86f 	bl	80097c8 <USBH_Get_USB_Status>
 80096ea:	4603      	mov	r3, r0
 80096ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd90      	pop	{r4, r7, pc}

080096f8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800970a:	78fa      	ldrb	r2, [r7, #3]
 800970c:	4611      	mov	r1, r2
 800970e:	4618      	mov	r0, r3
 8009710:	f7f8 fde2 	bl	80022d8 <HAL_HCD_HC_GetURBState>
 8009714:	4603      	mov	r3, r0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	460b      	mov	r3, r1
 8009728:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009730:	2b01      	cmp	r3, #1
 8009732:	d103      	bne.n	800973c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f872 	bl	8009820 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800973c:	20c8      	movs	r0, #200	@ 0xc8
 800973e:	f7f7 fea1 	bl	8001484 <HAL_Delay>
  return USBH_OK;
 8009742:	2300      	movs	r3, #0
}
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800974c:	b480      	push	{r7}
 800974e:	b085      	sub	sp, #20
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
 8009758:	4613      	mov	r3, r2
 800975a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009762:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009764:	78fa      	ldrb	r2, [r7, #3]
 8009766:	68f9      	ldr	r1, [r7, #12]
 8009768:	4613      	mov	r3, r2
 800976a:	011b      	lsls	r3, r3, #4
 800976c:	1a9b      	subs	r3, r3, r2
 800976e:	009b      	lsls	r3, r3, #2
 8009770:	440b      	add	r3, r1
 8009772:	3317      	adds	r3, #23
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00a      	beq.n	8009790 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800977a:	78fa      	ldrb	r2, [r7, #3]
 800977c:	68f9      	ldr	r1, [r7, #12]
 800977e:	4613      	mov	r3, r2
 8009780:	011b      	lsls	r3, r3, #4
 8009782:	1a9b      	subs	r3, r3, r2
 8009784:	009b      	lsls	r3, r3, #2
 8009786:	440b      	add	r3, r1
 8009788:	333c      	adds	r3, #60	@ 0x3c
 800978a:	78ba      	ldrb	r2, [r7, #2]
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	e009      	b.n	80097a4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009790:	78fa      	ldrb	r2, [r7, #3]
 8009792:	68f9      	ldr	r1, [r7, #12]
 8009794:	4613      	mov	r3, r2
 8009796:	011b      	lsls	r3, r3, #4
 8009798:	1a9b      	subs	r3, r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	440b      	add	r3, r1
 800979e:	333d      	adds	r3, #61	@ 0x3d
 80097a0:	78ba      	ldrb	r2, [r7, #2]
 80097a2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7f7 fe62 	bl	8001484 <HAL_Delay>
}
 80097c0:	bf00      	nop
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097d2:	2300      	movs	r3, #0
 80097d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d817      	bhi.n	800980c <USBH_Get_USB_Status+0x44>
 80097dc:	a201      	add	r2, pc, #4	@ (adr r2, 80097e4 <USBH_Get_USB_Status+0x1c>)
 80097de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e2:	bf00      	nop
 80097e4:	080097f5 	.word	0x080097f5
 80097e8:	080097fb 	.word	0x080097fb
 80097ec:	08009801 	.word	0x08009801
 80097f0:	08009807 	.word	0x08009807
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73fb      	strb	r3, [r7, #15]
    break;
 80097f8:	e00b      	b.n	8009812 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80097fa:	2302      	movs	r3, #2
 80097fc:	73fb      	strb	r3, [r7, #15]
    break;
 80097fe:	e008      	b.n	8009812 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009800:	2301      	movs	r3, #1
 8009802:	73fb      	strb	r3, [r7, #15]
    break;
 8009804:	e005      	b.n	8009812 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009806:	2302      	movs	r3, #2
 8009808:	73fb      	strb	r3, [r7, #15]
    break;
 800980a:	e002      	b.n	8009812 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800980c:	2302      	movs	r3, #2
 800980e:	73fb      	strb	r3, [r7, #15]
    break;
 8009810:	bf00      	nop
  }
  return usb_status;
 8009812:	7bfb      	ldrb	r3, [r7, #15]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800982e:	79fb      	ldrb	r3, [r7, #7]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d102      	bne.n	800983a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
 8009838:	e001      	b.n	800983e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800983a:	2301      	movs	r3, #1
 800983c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800983e:	7bfb      	ldrb	r3, [r7, #15]
 8009840:	461a      	mov	r2, r3
 8009842:	2101      	movs	r1, #1
 8009844:	4803      	ldr	r0, [pc, #12]	@ (8009854 <MX_DriverVbusFS+0x34>)
 8009846:	f7f8 f8ef 	bl	8001a28 <HAL_GPIO_WritePin>
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	40020800 	.word	0x40020800

08009858 <malloc>:
 8009858:	4b02      	ldr	r3, [pc, #8]	@ (8009864 <malloc+0xc>)
 800985a:	4601      	mov	r1, r0
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	f000 b82d 	b.w	80098bc <_malloc_r>
 8009862:	bf00      	nop
 8009864:	20000038 	.word	0x20000038

08009868 <free>:
 8009868:	4b02      	ldr	r3, [pc, #8]	@ (8009874 <free+0xc>)
 800986a:	4601      	mov	r1, r0
 800986c:	6818      	ldr	r0, [r3, #0]
 800986e:	f000 bb9d 	b.w	8009fac <_free_r>
 8009872:	bf00      	nop
 8009874:	20000038 	.word	0x20000038

08009878 <sbrk_aligned>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	4e0f      	ldr	r6, [pc, #60]	@ (80098b8 <sbrk_aligned+0x40>)
 800987c:	460c      	mov	r4, r1
 800987e:	6831      	ldr	r1, [r6, #0]
 8009880:	4605      	mov	r5, r0
 8009882:	b911      	cbnz	r1, 800988a <sbrk_aligned+0x12>
 8009884:	f000 fb42 	bl	8009f0c <_sbrk_r>
 8009888:	6030      	str	r0, [r6, #0]
 800988a:	4621      	mov	r1, r4
 800988c:	4628      	mov	r0, r5
 800988e:	f000 fb3d 	bl	8009f0c <_sbrk_r>
 8009892:	1c43      	adds	r3, r0, #1
 8009894:	d103      	bne.n	800989e <sbrk_aligned+0x26>
 8009896:	f04f 34ff 	mov.w	r4, #4294967295
 800989a:	4620      	mov	r0, r4
 800989c:	bd70      	pop	{r4, r5, r6, pc}
 800989e:	1cc4      	adds	r4, r0, #3
 80098a0:	f024 0403 	bic.w	r4, r4, #3
 80098a4:	42a0      	cmp	r0, r4
 80098a6:	d0f8      	beq.n	800989a <sbrk_aligned+0x22>
 80098a8:	1a21      	subs	r1, r4, r0
 80098aa:	4628      	mov	r0, r5
 80098ac:	f000 fb2e 	bl	8009f0c <_sbrk_r>
 80098b0:	3001      	adds	r0, #1
 80098b2:	d1f2      	bne.n	800989a <sbrk_aligned+0x22>
 80098b4:	e7ef      	b.n	8009896 <sbrk_aligned+0x1e>
 80098b6:	bf00      	nop
 80098b8:	200009b4 	.word	0x200009b4

080098bc <_malloc_r>:
 80098bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098c0:	1ccd      	adds	r5, r1, #3
 80098c2:	f025 0503 	bic.w	r5, r5, #3
 80098c6:	3508      	adds	r5, #8
 80098c8:	2d0c      	cmp	r5, #12
 80098ca:	bf38      	it	cc
 80098cc:	250c      	movcc	r5, #12
 80098ce:	2d00      	cmp	r5, #0
 80098d0:	4606      	mov	r6, r0
 80098d2:	db01      	blt.n	80098d8 <_malloc_r+0x1c>
 80098d4:	42a9      	cmp	r1, r5
 80098d6:	d904      	bls.n	80098e2 <_malloc_r+0x26>
 80098d8:	230c      	movs	r3, #12
 80098da:	6033      	str	r3, [r6, #0]
 80098dc:	2000      	movs	r0, #0
 80098de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80099b8 <_malloc_r+0xfc>
 80098e6:	f000 f869 	bl	80099bc <__malloc_lock>
 80098ea:	f8d8 3000 	ldr.w	r3, [r8]
 80098ee:	461c      	mov	r4, r3
 80098f0:	bb44      	cbnz	r4, 8009944 <_malloc_r+0x88>
 80098f2:	4629      	mov	r1, r5
 80098f4:	4630      	mov	r0, r6
 80098f6:	f7ff ffbf 	bl	8009878 <sbrk_aligned>
 80098fa:	1c43      	adds	r3, r0, #1
 80098fc:	4604      	mov	r4, r0
 80098fe:	d158      	bne.n	80099b2 <_malloc_r+0xf6>
 8009900:	f8d8 4000 	ldr.w	r4, [r8]
 8009904:	4627      	mov	r7, r4
 8009906:	2f00      	cmp	r7, #0
 8009908:	d143      	bne.n	8009992 <_malloc_r+0xd6>
 800990a:	2c00      	cmp	r4, #0
 800990c:	d04b      	beq.n	80099a6 <_malloc_r+0xea>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	4639      	mov	r1, r7
 8009912:	4630      	mov	r0, r6
 8009914:	eb04 0903 	add.w	r9, r4, r3
 8009918:	f000 faf8 	bl	8009f0c <_sbrk_r>
 800991c:	4581      	cmp	r9, r0
 800991e:	d142      	bne.n	80099a6 <_malloc_r+0xea>
 8009920:	6821      	ldr	r1, [r4, #0]
 8009922:	1a6d      	subs	r5, r5, r1
 8009924:	4629      	mov	r1, r5
 8009926:	4630      	mov	r0, r6
 8009928:	f7ff ffa6 	bl	8009878 <sbrk_aligned>
 800992c:	3001      	adds	r0, #1
 800992e:	d03a      	beq.n	80099a6 <_malloc_r+0xea>
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	442b      	add	r3, r5
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	f8d8 3000 	ldr.w	r3, [r8]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	bb62      	cbnz	r2, 8009998 <_malloc_r+0xdc>
 800993e:	f8c8 7000 	str.w	r7, [r8]
 8009942:	e00f      	b.n	8009964 <_malloc_r+0xa8>
 8009944:	6822      	ldr	r2, [r4, #0]
 8009946:	1b52      	subs	r2, r2, r5
 8009948:	d420      	bmi.n	800998c <_malloc_r+0xd0>
 800994a:	2a0b      	cmp	r2, #11
 800994c:	d917      	bls.n	800997e <_malloc_r+0xc2>
 800994e:	1961      	adds	r1, r4, r5
 8009950:	42a3      	cmp	r3, r4
 8009952:	6025      	str	r5, [r4, #0]
 8009954:	bf18      	it	ne
 8009956:	6059      	strne	r1, [r3, #4]
 8009958:	6863      	ldr	r3, [r4, #4]
 800995a:	bf08      	it	eq
 800995c:	f8c8 1000 	streq.w	r1, [r8]
 8009960:	5162      	str	r2, [r4, r5]
 8009962:	604b      	str	r3, [r1, #4]
 8009964:	4630      	mov	r0, r6
 8009966:	f000 f82f 	bl	80099c8 <__malloc_unlock>
 800996a:	f104 000b 	add.w	r0, r4, #11
 800996e:	1d23      	adds	r3, r4, #4
 8009970:	f020 0007 	bic.w	r0, r0, #7
 8009974:	1ac2      	subs	r2, r0, r3
 8009976:	bf1c      	itt	ne
 8009978:	1a1b      	subne	r3, r3, r0
 800997a:	50a3      	strne	r3, [r4, r2]
 800997c:	e7af      	b.n	80098de <_malloc_r+0x22>
 800997e:	6862      	ldr	r2, [r4, #4]
 8009980:	42a3      	cmp	r3, r4
 8009982:	bf0c      	ite	eq
 8009984:	f8c8 2000 	streq.w	r2, [r8]
 8009988:	605a      	strne	r2, [r3, #4]
 800998a:	e7eb      	b.n	8009964 <_malloc_r+0xa8>
 800998c:	4623      	mov	r3, r4
 800998e:	6864      	ldr	r4, [r4, #4]
 8009990:	e7ae      	b.n	80098f0 <_malloc_r+0x34>
 8009992:	463c      	mov	r4, r7
 8009994:	687f      	ldr	r7, [r7, #4]
 8009996:	e7b6      	b.n	8009906 <_malloc_r+0x4a>
 8009998:	461a      	mov	r2, r3
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	42a3      	cmp	r3, r4
 800999e:	d1fb      	bne.n	8009998 <_malloc_r+0xdc>
 80099a0:	2300      	movs	r3, #0
 80099a2:	6053      	str	r3, [r2, #4]
 80099a4:	e7de      	b.n	8009964 <_malloc_r+0xa8>
 80099a6:	230c      	movs	r3, #12
 80099a8:	6033      	str	r3, [r6, #0]
 80099aa:	4630      	mov	r0, r6
 80099ac:	f000 f80c 	bl	80099c8 <__malloc_unlock>
 80099b0:	e794      	b.n	80098dc <_malloc_r+0x20>
 80099b2:	6005      	str	r5, [r0, #0]
 80099b4:	e7d6      	b.n	8009964 <_malloc_r+0xa8>
 80099b6:	bf00      	nop
 80099b8:	200009b8 	.word	0x200009b8

080099bc <__malloc_lock>:
 80099bc:	4801      	ldr	r0, [pc, #4]	@ (80099c4 <__malloc_lock+0x8>)
 80099be:	f000 baf2 	b.w	8009fa6 <__retarget_lock_acquire_recursive>
 80099c2:	bf00      	nop
 80099c4:	20000afc 	.word	0x20000afc

080099c8 <__malloc_unlock>:
 80099c8:	4801      	ldr	r0, [pc, #4]	@ (80099d0 <__malloc_unlock+0x8>)
 80099ca:	f000 baed 	b.w	8009fa8 <__retarget_lock_release_recursive>
 80099ce:	bf00      	nop
 80099d0:	20000afc 	.word	0x20000afc

080099d4 <std>:
 80099d4:	2300      	movs	r3, #0
 80099d6:	b510      	push	{r4, lr}
 80099d8:	4604      	mov	r4, r0
 80099da:	e9c0 3300 	strd	r3, r3, [r0]
 80099de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80099e2:	6083      	str	r3, [r0, #8]
 80099e4:	8181      	strh	r1, [r0, #12]
 80099e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80099e8:	81c2      	strh	r2, [r0, #14]
 80099ea:	6183      	str	r3, [r0, #24]
 80099ec:	4619      	mov	r1, r3
 80099ee:	2208      	movs	r2, #8
 80099f0:	305c      	adds	r0, #92	@ 0x5c
 80099f2:	f000 fa4f 	bl	8009e94 <memset>
 80099f6:	4b0d      	ldr	r3, [pc, #52]	@ (8009a2c <std+0x58>)
 80099f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80099fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009a30 <std+0x5c>)
 80099fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80099fe:	4b0d      	ldr	r3, [pc, #52]	@ (8009a34 <std+0x60>)
 8009a00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a02:	4b0d      	ldr	r3, [pc, #52]	@ (8009a38 <std+0x64>)
 8009a04:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <std+0x68>)
 8009a08:	6224      	str	r4, [r4, #32]
 8009a0a:	429c      	cmp	r4, r3
 8009a0c:	d006      	beq.n	8009a1c <std+0x48>
 8009a0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a12:	4294      	cmp	r4, r2
 8009a14:	d002      	beq.n	8009a1c <std+0x48>
 8009a16:	33d0      	adds	r3, #208	@ 0xd0
 8009a18:	429c      	cmp	r4, r3
 8009a1a:	d105      	bne.n	8009a28 <std+0x54>
 8009a1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a24:	f000 babe 	b.w	8009fa4 <__retarget_lock_init_recursive>
 8009a28:	bd10      	pop	{r4, pc}
 8009a2a:	bf00      	nop
 8009a2c:	08009ce5 	.word	0x08009ce5
 8009a30:	08009d07 	.word	0x08009d07
 8009a34:	08009d3f 	.word	0x08009d3f
 8009a38:	08009d63 	.word	0x08009d63
 8009a3c:	200009bc 	.word	0x200009bc

08009a40 <stdio_exit_handler>:
 8009a40:	4a02      	ldr	r2, [pc, #8]	@ (8009a4c <stdio_exit_handler+0xc>)
 8009a42:	4903      	ldr	r1, [pc, #12]	@ (8009a50 <stdio_exit_handler+0x10>)
 8009a44:	4803      	ldr	r0, [pc, #12]	@ (8009a54 <stdio_exit_handler+0x14>)
 8009a46:	f000 b869 	b.w	8009b1c <_fwalk_sglue>
 8009a4a:	bf00      	nop
 8009a4c:	2000002c 	.word	0x2000002c
 8009a50:	0800a6e5 	.word	0x0800a6e5
 8009a54:	2000003c 	.word	0x2000003c

08009a58 <cleanup_stdio>:
 8009a58:	6841      	ldr	r1, [r0, #4]
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a8c <cleanup_stdio+0x34>)
 8009a5c:	4299      	cmp	r1, r3
 8009a5e:	b510      	push	{r4, lr}
 8009a60:	4604      	mov	r4, r0
 8009a62:	d001      	beq.n	8009a68 <cleanup_stdio+0x10>
 8009a64:	f000 fe3e 	bl	800a6e4 <_fflush_r>
 8009a68:	68a1      	ldr	r1, [r4, #8]
 8009a6a:	4b09      	ldr	r3, [pc, #36]	@ (8009a90 <cleanup_stdio+0x38>)
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	d002      	beq.n	8009a76 <cleanup_stdio+0x1e>
 8009a70:	4620      	mov	r0, r4
 8009a72:	f000 fe37 	bl	800a6e4 <_fflush_r>
 8009a76:	68e1      	ldr	r1, [r4, #12]
 8009a78:	4b06      	ldr	r3, [pc, #24]	@ (8009a94 <cleanup_stdio+0x3c>)
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	d004      	beq.n	8009a88 <cleanup_stdio+0x30>
 8009a7e:	4620      	mov	r0, r4
 8009a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a84:	f000 be2e 	b.w	800a6e4 <_fflush_r>
 8009a88:	bd10      	pop	{r4, pc}
 8009a8a:	bf00      	nop
 8009a8c:	200009bc 	.word	0x200009bc
 8009a90:	20000a24 	.word	0x20000a24
 8009a94:	20000a8c 	.word	0x20000a8c

08009a98 <global_stdio_init.part.0>:
 8009a98:	b510      	push	{r4, lr}
 8009a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8009ac8 <global_stdio_init.part.0+0x30>)
 8009a9c:	4c0b      	ldr	r4, [pc, #44]	@ (8009acc <global_stdio_init.part.0+0x34>)
 8009a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8009ad0 <global_stdio_init.part.0+0x38>)
 8009aa0:	601a      	str	r2, [r3, #0]
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2104      	movs	r1, #4
 8009aa8:	f7ff ff94 	bl	80099d4 <std>
 8009aac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	2109      	movs	r1, #9
 8009ab4:	f7ff ff8e 	bl	80099d4 <std>
 8009ab8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009abc:	2202      	movs	r2, #2
 8009abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ac2:	2112      	movs	r1, #18
 8009ac4:	f7ff bf86 	b.w	80099d4 <std>
 8009ac8:	20000af4 	.word	0x20000af4
 8009acc:	200009bc 	.word	0x200009bc
 8009ad0:	08009a41 	.word	0x08009a41

08009ad4 <__sfp_lock_acquire>:
 8009ad4:	4801      	ldr	r0, [pc, #4]	@ (8009adc <__sfp_lock_acquire+0x8>)
 8009ad6:	f000 ba66 	b.w	8009fa6 <__retarget_lock_acquire_recursive>
 8009ada:	bf00      	nop
 8009adc:	20000afd 	.word	0x20000afd

08009ae0 <__sfp_lock_release>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	@ (8009ae8 <__sfp_lock_release+0x8>)
 8009ae2:	f000 ba61 	b.w	8009fa8 <__retarget_lock_release_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20000afd 	.word	0x20000afd

08009aec <__sinit>:
 8009aec:	b510      	push	{r4, lr}
 8009aee:	4604      	mov	r4, r0
 8009af0:	f7ff fff0 	bl	8009ad4 <__sfp_lock_acquire>
 8009af4:	6a23      	ldr	r3, [r4, #32]
 8009af6:	b11b      	cbz	r3, 8009b00 <__sinit+0x14>
 8009af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009afc:	f7ff bff0 	b.w	8009ae0 <__sfp_lock_release>
 8009b00:	4b04      	ldr	r3, [pc, #16]	@ (8009b14 <__sinit+0x28>)
 8009b02:	6223      	str	r3, [r4, #32]
 8009b04:	4b04      	ldr	r3, [pc, #16]	@ (8009b18 <__sinit+0x2c>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1f5      	bne.n	8009af8 <__sinit+0xc>
 8009b0c:	f7ff ffc4 	bl	8009a98 <global_stdio_init.part.0>
 8009b10:	e7f2      	b.n	8009af8 <__sinit+0xc>
 8009b12:	bf00      	nop
 8009b14:	08009a59 	.word	0x08009a59
 8009b18:	20000af4 	.word	0x20000af4

08009b1c <_fwalk_sglue>:
 8009b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	4607      	mov	r7, r0
 8009b22:	4688      	mov	r8, r1
 8009b24:	4614      	mov	r4, r2
 8009b26:	2600      	movs	r6, #0
 8009b28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b2c:	f1b9 0901 	subs.w	r9, r9, #1
 8009b30:	d505      	bpl.n	8009b3e <_fwalk_sglue+0x22>
 8009b32:	6824      	ldr	r4, [r4, #0]
 8009b34:	2c00      	cmp	r4, #0
 8009b36:	d1f7      	bne.n	8009b28 <_fwalk_sglue+0xc>
 8009b38:	4630      	mov	r0, r6
 8009b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d907      	bls.n	8009b54 <_fwalk_sglue+0x38>
 8009b44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b48:	3301      	adds	r3, #1
 8009b4a:	d003      	beq.n	8009b54 <_fwalk_sglue+0x38>
 8009b4c:	4629      	mov	r1, r5
 8009b4e:	4638      	mov	r0, r7
 8009b50:	47c0      	blx	r8
 8009b52:	4306      	orrs	r6, r0
 8009b54:	3568      	adds	r5, #104	@ 0x68
 8009b56:	e7e9      	b.n	8009b2c <_fwalk_sglue+0x10>

08009b58 <iprintf>:
 8009b58:	b40f      	push	{r0, r1, r2, r3}
 8009b5a:	b507      	push	{r0, r1, r2, lr}
 8009b5c:	4906      	ldr	r1, [pc, #24]	@ (8009b78 <iprintf+0x20>)
 8009b5e:	ab04      	add	r3, sp, #16
 8009b60:	6808      	ldr	r0, [r1, #0]
 8009b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b66:	6881      	ldr	r1, [r0, #8]
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	f000 fa93 	bl	800a094 <_vfiprintf_r>
 8009b6e:	b003      	add	sp, #12
 8009b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b74:	b004      	add	sp, #16
 8009b76:	4770      	bx	lr
 8009b78:	20000038 	.word	0x20000038

08009b7c <setvbuf>:
 8009b7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b80:	461d      	mov	r5, r3
 8009b82:	4b57      	ldr	r3, [pc, #348]	@ (8009ce0 <setvbuf+0x164>)
 8009b84:	681f      	ldr	r7, [r3, #0]
 8009b86:	4604      	mov	r4, r0
 8009b88:	460e      	mov	r6, r1
 8009b8a:	4690      	mov	r8, r2
 8009b8c:	b127      	cbz	r7, 8009b98 <setvbuf+0x1c>
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	b913      	cbnz	r3, 8009b98 <setvbuf+0x1c>
 8009b92:	4638      	mov	r0, r7
 8009b94:	f7ff ffaa 	bl	8009aec <__sinit>
 8009b98:	f1b8 0f02 	cmp.w	r8, #2
 8009b9c:	d006      	beq.n	8009bac <setvbuf+0x30>
 8009b9e:	f1b8 0f01 	cmp.w	r8, #1
 8009ba2:	f200 809a 	bhi.w	8009cda <setvbuf+0x15e>
 8009ba6:	2d00      	cmp	r5, #0
 8009ba8:	f2c0 8097 	blt.w	8009cda <setvbuf+0x15e>
 8009bac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009bae:	07d9      	lsls	r1, r3, #31
 8009bb0:	d405      	bmi.n	8009bbe <setvbuf+0x42>
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	059a      	lsls	r2, r3, #22
 8009bb6:	d402      	bmi.n	8009bbe <setvbuf+0x42>
 8009bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bba:	f000 f9f4 	bl	8009fa6 <__retarget_lock_acquire_recursive>
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4638      	mov	r0, r7
 8009bc2:	f000 fd8f 	bl	800a6e4 <_fflush_r>
 8009bc6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bc8:	b141      	cbz	r1, 8009bdc <setvbuf+0x60>
 8009bca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bce:	4299      	cmp	r1, r3
 8009bd0:	d002      	beq.n	8009bd8 <setvbuf+0x5c>
 8009bd2:	4638      	mov	r0, r7
 8009bd4:	f000 f9ea 	bl	8009fac <_free_r>
 8009bd8:	2300      	movs	r3, #0
 8009bda:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61a3      	str	r3, [r4, #24]
 8009be0:	6063      	str	r3, [r4, #4]
 8009be2:	89a3      	ldrh	r3, [r4, #12]
 8009be4:	061b      	lsls	r3, r3, #24
 8009be6:	d503      	bpl.n	8009bf0 <setvbuf+0x74>
 8009be8:	6921      	ldr	r1, [r4, #16]
 8009bea:	4638      	mov	r0, r7
 8009bec:	f000 f9de 	bl	8009fac <_free_r>
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8009bf6:	f023 0303 	bic.w	r3, r3, #3
 8009bfa:	f1b8 0f02 	cmp.w	r8, #2
 8009bfe:	81a3      	strh	r3, [r4, #12]
 8009c00:	d061      	beq.n	8009cc6 <setvbuf+0x14a>
 8009c02:	ab01      	add	r3, sp, #4
 8009c04:	466a      	mov	r2, sp
 8009c06:	4621      	mov	r1, r4
 8009c08:	4638      	mov	r0, r7
 8009c0a:	f000 fd93 	bl	800a734 <__swhatbuf_r>
 8009c0e:	89a3      	ldrh	r3, [r4, #12]
 8009c10:	4318      	orrs	r0, r3
 8009c12:	81a0      	strh	r0, [r4, #12]
 8009c14:	bb2d      	cbnz	r5, 8009c62 <setvbuf+0xe6>
 8009c16:	9d00      	ldr	r5, [sp, #0]
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f7ff fe1d 	bl	8009858 <malloc>
 8009c1e:	4606      	mov	r6, r0
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d152      	bne.n	8009cca <setvbuf+0x14e>
 8009c24:	f8dd 9000 	ldr.w	r9, [sp]
 8009c28:	45a9      	cmp	r9, r5
 8009c2a:	d140      	bne.n	8009cae <setvbuf+0x132>
 8009c2c:	f04f 35ff 	mov.w	r5, #4294967295
 8009c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c34:	f043 0202 	orr.w	r2, r3, #2
 8009c38:	81a2      	strh	r2, [r4, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	60a2      	str	r2, [r4, #8]
 8009c3e:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009c42:	6022      	str	r2, [r4, #0]
 8009c44:	6122      	str	r2, [r4, #16]
 8009c46:	2201      	movs	r2, #1
 8009c48:	6162      	str	r2, [r4, #20]
 8009c4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c4c:	07d6      	lsls	r6, r2, #31
 8009c4e:	d404      	bmi.n	8009c5a <setvbuf+0xde>
 8009c50:	0598      	lsls	r0, r3, #22
 8009c52:	d402      	bmi.n	8009c5a <setvbuf+0xde>
 8009c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c56:	f000 f9a7 	bl	8009fa8 <__retarget_lock_release_recursive>
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	b003      	add	sp, #12
 8009c5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c62:	2e00      	cmp	r6, #0
 8009c64:	d0d8      	beq.n	8009c18 <setvbuf+0x9c>
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	b913      	cbnz	r3, 8009c70 <setvbuf+0xf4>
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	f7ff ff3e 	bl	8009aec <__sinit>
 8009c70:	f1b8 0f01 	cmp.w	r8, #1
 8009c74:	bf08      	it	eq
 8009c76:	89a3      	ldrheq	r3, [r4, #12]
 8009c78:	6026      	str	r6, [r4, #0]
 8009c7a:	bf04      	itt	eq
 8009c7c:	f043 0301 	orreq.w	r3, r3, #1
 8009c80:	81a3      	strheq	r3, [r4, #12]
 8009c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c86:	f013 0208 	ands.w	r2, r3, #8
 8009c8a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009c8e:	d01e      	beq.n	8009cce <setvbuf+0x152>
 8009c90:	07d9      	lsls	r1, r3, #31
 8009c92:	bf41      	itttt	mi
 8009c94:	2200      	movmi	r2, #0
 8009c96:	426d      	negmi	r5, r5
 8009c98:	60a2      	strmi	r2, [r4, #8]
 8009c9a:	61a5      	strmi	r5, [r4, #24]
 8009c9c:	bf58      	it	pl
 8009c9e:	60a5      	strpl	r5, [r4, #8]
 8009ca0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009ca2:	07d2      	lsls	r2, r2, #31
 8009ca4:	d401      	bmi.n	8009caa <setvbuf+0x12e>
 8009ca6:	059b      	lsls	r3, r3, #22
 8009ca8:	d513      	bpl.n	8009cd2 <setvbuf+0x156>
 8009caa:	2500      	movs	r5, #0
 8009cac:	e7d5      	b.n	8009c5a <setvbuf+0xde>
 8009cae:	4648      	mov	r0, r9
 8009cb0:	f7ff fdd2 	bl	8009858 <malloc>
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0b8      	beq.n	8009c2c <setvbuf+0xb0>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc0:	81a3      	strh	r3, [r4, #12]
 8009cc2:	464d      	mov	r5, r9
 8009cc4:	e7cf      	b.n	8009c66 <setvbuf+0xea>
 8009cc6:	2500      	movs	r5, #0
 8009cc8:	e7b2      	b.n	8009c30 <setvbuf+0xb4>
 8009cca:	46a9      	mov	r9, r5
 8009ccc:	e7f5      	b.n	8009cba <setvbuf+0x13e>
 8009cce:	60a2      	str	r2, [r4, #8]
 8009cd0:	e7e6      	b.n	8009ca0 <setvbuf+0x124>
 8009cd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cd4:	f000 f968 	bl	8009fa8 <__retarget_lock_release_recursive>
 8009cd8:	e7e7      	b.n	8009caa <setvbuf+0x12e>
 8009cda:	f04f 35ff 	mov.w	r5, #4294967295
 8009cde:	e7bc      	b.n	8009c5a <setvbuf+0xde>
 8009ce0:	20000038 	.word	0x20000038

08009ce4 <__sread>:
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	460c      	mov	r4, r1
 8009ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cec:	f000 f8fc 	bl	8009ee8 <_read_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	bfab      	itete	ge
 8009cf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8009cf8:	181b      	addge	r3, r3, r0
 8009cfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009cfe:	bfac      	ite	ge
 8009d00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009d02:	81a3      	strhlt	r3, [r4, #12]
 8009d04:	bd10      	pop	{r4, pc}

08009d06 <__swrite>:
 8009d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0a:	461f      	mov	r7, r3
 8009d0c:	898b      	ldrh	r3, [r1, #12]
 8009d0e:	05db      	lsls	r3, r3, #23
 8009d10:	4605      	mov	r5, r0
 8009d12:	460c      	mov	r4, r1
 8009d14:	4616      	mov	r6, r2
 8009d16:	d505      	bpl.n	8009d24 <__swrite+0x1e>
 8009d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f000 f8d0 	bl	8009ec4 <_lseek_r>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	4632      	mov	r2, r6
 8009d32:	463b      	mov	r3, r7
 8009d34:	4628      	mov	r0, r5
 8009d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3a:	f000 b8f7 	b.w	8009f2c <_write_r>

08009d3e <__sseek>:
 8009d3e:	b510      	push	{r4, lr}
 8009d40:	460c      	mov	r4, r1
 8009d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d46:	f000 f8bd 	bl	8009ec4 <_lseek_r>
 8009d4a:	1c43      	adds	r3, r0, #1
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	bf15      	itete	ne
 8009d50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d5a:	81a3      	strheq	r3, [r4, #12]
 8009d5c:	bf18      	it	ne
 8009d5e:	81a3      	strhne	r3, [r4, #12]
 8009d60:	bd10      	pop	{r4, pc}

08009d62 <__sclose>:
 8009d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d66:	f000 b89d 	b.w	8009ea4 <_close_r>

08009d6a <__swbuf_r>:
 8009d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6c:	460e      	mov	r6, r1
 8009d6e:	4614      	mov	r4, r2
 8009d70:	4605      	mov	r5, r0
 8009d72:	b118      	cbz	r0, 8009d7c <__swbuf_r+0x12>
 8009d74:	6a03      	ldr	r3, [r0, #32]
 8009d76:	b90b      	cbnz	r3, 8009d7c <__swbuf_r+0x12>
 8009d78:	f7ff feb8 	bl	8009aec <__sinit>
 8009d7c:	69a3      	ldr	r3, [r4, #24]
 8009d7e:	60a3      	str	r3, [r4, #8]
 8009d80:	89a3      	ldrh	r3, [r4, #12]
 8009d82:	071a      	lsls	r2, r3, #28
 8009d84:	d501      	bpl.n	8009d8a <__swbuf_r+0x20>
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	b943      	cbnz	r3, 8009d9c <__swbuf_r+0x32>
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 f82b 	bl	8009de8 <__swsetup_r>
 8009d92:	b118      	cbz	r0, 8009d9c <__swbuf_r+0x32>
 8009d94:	f04f 37ff 	mov.w	r7, #4294967295
 8009d98:	4638      	mov	r0, r7
 8009d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	6922      	ldr	r2, [r4, #16]
 8009da0:	1a98      	subs	r0, r3, r2
 8009da2:	6963      	ldr	r3, [r4, #20]
 8009da4:	b2f6      	uxtb	r6, r6
 8009da6:	4283      	cmp	r3, r0
 8009da8:	4637      	mov	r7, r6
 8009daa:	dc05      	bgt.n	8009db8 <__swbuf_r+0x4e>
 8009dac:	4621      	mov	r1, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	f000 fc98 	bl	800a6e4 <_fflush_r>
 8009db4:	2800      	cmp	r0, #0
 8009db6:	d1ed      	bne.n	8009d94 <__swbuf_r+0x2a>
 8009db8:	68a3      	ldr	r3, [r4, #8]
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	60a3      	str	r3, [r4, #8]
 8009dbe:	6823      	ldr	r3, [r4, #0]
 8009dc0:	1c5a      	adds	r2, r3, #1
 8009dc2:	6022      	str	r2, [r4, #0]
 8009dc4:	701e      	strb	r6, [r3, #0]
 8009dc6:	6962      	ldr	r2, [r4, #20]
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d004      	beq.n	8009dd8 <__swbuf_r+0x6e>
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	07db      	lsls	r3, r3, #31
 8009dd2:	d5e1      	bpl.n	8009d98 <__swbuf_r+0x2e>
 8009dd4:	2e0a      	cmp	r6, #10
 8009dd6:	d1df      	bne.n	8009d98 <__swbuf_r+0x2e>
 8009dd8:	4621      	mov	r1, r4
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f000 fc82 	bl	800a6e4 <_fflush_r>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d0d9      	beq.n	8009d98 <__swbuf_r+0x2e>
 8009de4:	e7d6      	b.n	8009d94 <__swbuf_r+0x2a>
	...

08009de8 <__swsetup_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4b29      	ldr	r3, [pc, #164]	@ (8009e90 <__swsetup_r+0xa8>)
 8009dec:	4605      	mov	r5, r0
 8009dee:	6818      	ldr	r0, [r3, #0]
 8009df0:	460c      	mov	r4, r1
 8009df2:	b118      	cbz	r0, 8009dfc <__swsetup_r+0x14>
 8009df4:	6a03      	ldr	r3, [r0, #32]
 8009df6:	b90b      	cbnz	r3, 8009dfc <__swsetup_r+0x14>
 8009df8:	f7ff fe78 	bl	8009aec <__sinit>
 8009dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e00:	0719      	lsls	r1, r3, #28
 8009e02:	d422      	bmi.n	8009e4a <__swsetup_r+0x62>
 8009e04:	06da      	lsls	r2, r3, #27
 8009e06:	d407      	bmi.n	8009e18 <__swsetup_r+0x30>
 8009e08:	2209      	movs	r2, #9
 8009e0a:	602a      	str	r2, [r5, #0]
 8009e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e10:	81a3      	strh	r3, [r4, #12]
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295
 8009e16:	e033      	b.n	8009e80 <__swsetup_r+0x98>
 8009e18:	0758      	lsls	r0, r3, #29
 8009e1a:	d512      	bpl.n	8009e42 <__swsetup_r+0x5a>
 8009e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e1e:	b141      	cbz	r1, 8009e32 <__swsetup_r+0x4a>
 8009e20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e24:	4299      	cmp	r1, r3
 8009e26:	d002      	beq.n	8009e2e <__swsetup_r+0x46>
 8009e28:	4628      	mov	r0, r5
 8009e2a:	f000 f8bf 	bl	8009fac <_free_r>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e38:	81a3      	strh	r3, [r4, #12]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	6063      	str	r3, [r4, #4]
 8009e3e:	6923      	ldr	r3, [r4, #16]
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	89a3      	ldrh	r3, [r4, #12]
 8009e44:	f043 0308 	orr.w	r3, r3, #8
 8009e48:	81a3      	strh	r3, [r4, #12]
 8009e4a:	6923      	ldr	r3, [r4, #16]
 8009e4c:	b94b      	cbnz	r3, 8009e62 <__swsetup_r+0x7a>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e58:	d003      	beq.n	8009e62 <__swsetup_r+0x7a>
 8009e5a:	4621      	mov	r1, r4
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	f000 fc8f 	bl	800a780 <__smakebuf_r>
 8009e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e66:	f013 0201 	ands.w	r2, r3, #1
 8009e6a:	d00a      	beq.n	8009e82 <__swsetup_r+0x9a>
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	60a2      	str	r2, [r4, #8]
 8009e70:	6962      	ldr	r2, [r4, #20]
 8009e72:	4252      	negs	r2, r2
 8009e74:	61a2      	str	r2, [r4, #24]
 8009e76:	6922      	ldr	r2, [r4, #16]
 8009e78:	b942      	cbnz	r2, 8009e8c <__swsetup_r+0xa4>
 8009e7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e7e:	d1c5      	bne.n	8009e0c <__swsetup_r+0x24>
 8009e80:	bd38      	pop	{r3, r4, r5, pc}
 8009e82:	0799      	lsls	r1, r3, #30
 8009e84:	bf58      	it	pl
 8009e86:	6962      	ldrpl	r2, [r4, #20]
 8009e88:	60a2      	str	r2, [r4, #8]
 8009e8a:	e7f4      	b.n	8009e76 <__swsetup_r+0x8e>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e7f7      	b.n	8009e80 <__swsetup_r+0x98>
 8009e90:	20000038 	.word	0x20000038

08009e94 <memset>:
 8009e94:	4402      	add	r2, r0
 8009e96:	4603      	mov	r3, r0
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d100      	bne.n	8009e9e <memset+0xa>
 8009e9c:	4770      	bx	lr
 8009e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009ea2:	e7f9      	b.n	8009e98 <memset+0x4>

08009ea4 <_close_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d06      	ldr	r5, [pc, #24]	@ (8009ec0 <_close_r+0x1c>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	602b      	str	r3, [r5, #0]
 8009eb0:	f7f7 f9cf 	bl	8001252 <_close>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	d102      	bne.n	8009ebe <_close_r+0x1a>
 8009eb8:	682b      	ldr	r3, [r5, #0]
 8009eba:	b103      	cbz	r3, 8009ebe <_close_r+0x1a>
 8009ebc:	6023      	str	r3, [r4, #0]
 8009ebe:	bd38      	pop	{r3, r4, r5, pc}
 8009ec0:	20000af8 	.word	0x20000af8

08009ec4 <_lseek_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4d07      	ldr	r5, [pc, #28]	@ (8009ee4 <_lseek_r+0x20>)
 8009ec8:	4604      	mov	r4, r0
 8009eca:	4608      	mov	r0, r1
 8009ecc:	4611      	mov	r1, r2
 8009ece:	2200      	movs	r2, #0
 8009ed0:	602a      	str	r2, [r5, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	f7f7 f9e4 	bl	80012a0 <_lseek>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d102      	bne.n	8009ee2 <_lseek_r+0x1e>
 8009edc:	682b      	ldr	r3, [r5, #0]
 8009ede:	b103      	cbz	r3, 8009ee2 <_lseek_r+0x1e>
 8009ee0:	6023      	str	r3, [r4, #0]
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	20000af8 	.word	0x20000af8

08009ee8 <_read_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d07      	ldr	r5, [pc, #28]	@ (8009f08 <_read_r+0x20>)
 8009eec:	4604      	mov	r4, r0
 8009eee:	4608      	mov	r0, r1
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	602a      	str	r2, [r5, #0]
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	f7f7 f98e 	bl	8001218 <_read>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_read_r+0x1e>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_read_r+0x1e>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	20000af8 	.word	0x20000af8

08009f0c <_sbrk_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4d06      	ldr	r5, [pc, #24]	@ (8009f28 <_sbrk_r+0x1c>)
 8009f10:	2300      	movs	r3, #0
 8009f12:	4604      	mov	r4, r0
 8009f14:	4608      	mov	r0, r1
 8009f16:	602b      	str	r3, [r5, #0]
 8009f18:	f7f7 f9d0 	bl	80012bc <_sbrk>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d102      	bne.n	8009f26 <_sbrk_r+0x1a>
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	b103      	cbz	r3, 8009f26 <_sbrk_r+0x1a>
 8009f24:	6023      	str	r3, [r4, #0]
 8009f26:	bd38      	pop	{r3, r4, r5, pc}
 8009f28:	20000af8 	.word	0x20000af8

08009f2c <_write_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d07      	ldr	r5, [pc, #28]	@ (8009f4c <_write_r+0x20>)
 8009f30:	4604      	mov	r4, r0
 8009f32:	4608      	mov	r0, r1
 8009f34:	4611      	mov	r1, r2
 8009f36:	2200      	movs	r2, #0
 8009f38:	602a      	str	r2, [r5, #0]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	f7f6 fb62 	bl	8000604 <_write>
 8009f40:	1c43      	adds	r3, r0, #1
 8009f42:	d102      	bne.n	8009f4a <_write_r+0x1e>
 8009f44:	682b      	ldr	r3, [r5, #0]
 8009f46:	b103      	cbz	r3, 8009f4a <_write_r+0x1e>
 8009f48:	6023      	str	r3, [r4, #0]
 8009f4a:	bd38      	pop	{r3, r4, r5, pc}
 8009f4c:	20000af8 	.word	0x20000af8

08009f50 <__errno>:
 8009f50:	4b01      	ldr	r3, [pc, #4]	@ (8009f58 <__errno+0x8>)
 8009f52:	6818      	ldr	r0, [r3, #0]
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	20000038 	.word	0x20000038

08009f5c <__libc_init_array>:
 8009f5c:	b570      	push	{r4, r5, r6, lr}
 8009f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8009f94 <__libc_init_array+0x38>)
 8009f60:	4c0d      	ldr	r4, [pc, #52]	@ (8009f98 <__libc_init_array+0x3c>)
 8009f62:	1b64      	subs	r4, r4, r5
 8009f64:	10a4      	asrs	r4, r4, #2
 8009f66:	2600      	movs	r6, #0
 8009f68:	42a6      	cmp	r6, r4
 8009f6a:	d109      	bne.n	8009f80 <__libc_init_array+0x24>
 8009f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8009f9c <__libc_init_array+0x40>)
 8009f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8009fa0 <__libc_init_array+0x44>)
 8009f70:	f000 fc64 	bl	800a83c <_init>
 8009f74:	1b64      	subs	r4, r4, r5
 8009f76:	10a4      	asrs	r4, r4, #2
 8009f78:	2600      	movs	r6, #0
 8009f7a:	42a6      	cmp	r6, r4
 8009f7c:	d105      	bne.n	8009f8a <__libc_init_array+0x2e>
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f84:	4798      	blx	r3
 8009f86:	3601      	adds	r6, #1
 8009f88:	e7ee      	b.n	8009f68 <__libc_init_array+0xc>
 8009f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f8e:	4798      	blx	r3
 8009f90:	3601      	adds	r6, #1
 8009f92:	e7f2      	b.n	8009f7a <__libc_init_array+0x1e>
 8009f94:	0800ad1c 	.word	0x0800ad1c
 8009f98:	0800ad1c 	.word	0x0800ad1c
 8009f9c:	0800ad1c 	.word	0x0800ad1c
 8009fa0:	0800ad20 	.word	0x0800ad20

08009fa4 <__retarget_lock_init_recursive>:
 8009fa4:	4770      	bx	lr

08009fa6 <__retarget_lock_acquire_recursive>:
 8009fa6:	4770      	bx	lr

08009fa8 <__retarget_lock_release_recursive>:
 8009fa8:	4770      	bx	lr
	...

08009fac <_free_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4605      	mov	r5, r0
 8009fb0:	2900      	cmp	r1, #0
 8009fb2:	d041      	beq.n	800a038 <_free_r+0x8c>
 8009fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fb8:	1f0c      	subs	r4, r1, #4
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	bfb8      	it	lt
 8009fbe:	18e4      	addlt	r4, r4, r3
 8009fc0:	f7ff fcfc 	bl	80099bc <__malloc_lock>
 8009fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800a03c <_free_r+0x90>)
 8009fc6:	6813      	ldr	r3, [r2, #0]
 8009fc8:	b933      	cbnz	r3, 8009fd8 <_free_r+0x2c>
 8009fca:	6063      	str	r3, [r4, #4]
 8009fcc:	6014      	str	r4, [r2, #0]
 8009fce:	4628      	mov	r0, r5
 8009fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fd4:	f7ff bcf8 	b.w	80099c8 <__malloc_unlock>
 8009fd8:	42a3      	cmp	r3, r4
 8009fda:	d908      	bls.n	8009fee <_free_r+0x42>
 8009fdc:	6820      	ldr	r0, [r4, #0]
 8009fde:	1821      	adds	r1, r4, r0
 8009fe0:	428b      	cmp	r3, r1
 8009fe2:	bf01      	itttt	eq
 8009fe4:	6819      	ldreq	r1, [r3, #0]
 8009fe6:	685b      	ldreq	r3, [r3, #4]
 8009fe8:	1809      	addeq	r1, r1, r0
 8009fea:	6021      	streq	r1, [r4, #0]
 8009fec:	e7ed      	b.n	8009fca <_free_r+0x1e>
 8009fee:	461a      	mov	r2, r3
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	b10b      	cbz	r3, 8009ff8 <_free_r+0x4c>
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d9fa      	bls.n	8009fee <_free_r+0x42>
 8009ff8:	6811      	ldr	r1, [r2, #0]
 8009ffa:	1850      	adds	r0, r2, r1
 8009ffc:	42a0      	cmp	r0, r4
 8009ffe:	d10b      	bne.n	800a018 <_free_r+0x6c>
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	4401      	add	r1, r0
 800a004:	1850      	adds	r0, r2, r1
 800a006:	4283      	cmp	r3, r0
 800a008:	6011      	str	r1, [r2, #0]
 800a00a:	d1e0      	bne.n	8009fce <_free_r+0x22>
 800a00c:	6818      	ldr	r0, [r3, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	6053      	str	r3, [r2, #4]
 800a012:	4408      	add	r0, r1
 800a014:	6010      	str	r0, [r2, #0]
 800a016:	e7da      	b.n	8009fce <_free_r+0x22>
 800a018:	d902      	bls.n	800a020 <_free_r+0x74>
 800a01a:	230c      	movs	r3, #12
 800a01c:	602b      	str	r3, [r5, #0]
 800a01e:	e7d6      	b.n	8009fce <_free_r+0x22>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	1821      	adds	r1, r4, r0
 800a024:	428b      	cmp	r3, r1
 800a026:	bf04      	itt	eq
 800a028:	6819      	ldreq	r1, [r3, #0]
 800a02a:	685b      	ldreq	r3, [r3, #4]
 800a02c:	6063      	str	r3, [r4, #4]
 800a02e:	bf04      	itt	eq
 800a030:	1809      	addeq	r1, r1, r0
 800a032:	6021      	streq	r1, [r4, #0]
 800a034:	6054      	str	r4, [r2, #4]
 800a036:	e7ca      	b.n	8009fce <_free_r+0x22>
 800a038:	bd38      	pop	{r3, r4, r5, pc}
 800a03a:	bf00      	nop
 800a03c:	200009b8 	.word	0x200009b8

0800a040 <__sfputc_r>:
 800a040:	6893      	ldr	r3, [r2, #8]
 800a042:	3b01      	subs	r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	b410      	push	{r4}
 800a048:	6093      	str	r3, [r2, #8]
 800a04a:	da08      	bge.n	800a05e <__sfputc_r+0x1e>
 800a04c:	6994      	ldr	r4, [r2, #24]
 800a04e:	42a3      	cmp	r3, r4
 800a050:	db01      	blt.n	800a056 <__sfputc_r+0x16>
 800a052:	290a      	cmp	r1, #10
 800a054:	d103      	bne.n	800a05e <__sfputc_r+0x1e>
 800a056:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a05a:	f7ff be86 	b.w	8009d6a <__swbuf_r>
 800a05e:	6813      	ldr	r3, [r2, #0]
 800a060:	1c58      	adds	r0, r3, #1
 800a062:	6010      	str	r0, [r2, #0]
 800a064:	7019      	strb	r1, [r3, #0]
 800a066:	4608      	mov	r0, r1
 800a068:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a06c:	4770      	bx	lr

0800a06e <__sfputs_r>:
 800a06e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a070:	4606      	mov	r6, r0
 800a072:	460f      	mov	r7, r1
 800a074:	4614      	mov	r4, r2
 800a076:	18d5      	adds	r5, r2, r3
 800a078:	42ac      	cmp	r4, r5
 800a07a:	d101      	bne.n	800a080 <__sfputs_r+0x12>
 800a07c:	2000      	movs	r0, #0
 800a07e:	e007      	b.n	800a090 <__sfputs_r+0x22>
 800a080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a084:	463a      	mov	r2, r7
 800a086:	4630      	mov	r0, r6
 800a088:	f7ff ffda 	bl	800a040 <__sfputc_r>
 800a08c:	1c43      	adds	r3, r0, #1
 800a08e:	d1f3      	bne.n	800a078 <__sfputs_r+0xa>
 800a090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a094 <_vfiprintf_r>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	460d      	mov	r5, r1
 800a09a:	b09d      	sub	sp, #116	@ 0x74
 800a09c:	4614      	mov	r4, r2
 800a09e:	4698      	mov	r8, r3
 800a0a0:	4606      	mov	r6, r0
 800a0a2:	b118      	cbz	r0, 800a0ac <_vfiprintf_r+0x18>
 800a0a4:	6a03      	ldr	r3, [r0, #32]
 800a0a6:	b90b      	cbnz	r3, 800a0ac <_vfiprintf_r+0x18>
 800a0a8:	f7ff fd20 	bl	8009aec <__sinit>
 800a0ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0ae:	07d9      	lsls	r1, r3, #31
 800a0b0:	d405      	bmi.n	800a0be <_vfiprintf_r+0x2a>
 800a0b2:	89ab      	ldrh	r3, [r5, #12]
 800a0b4:	059a      	lsls	r2, r3, #22
 800a0b6:	d402      	bmi.n	800a0be <_vfiprintf_r+0x2a>
 800a0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ba:	f7ff ff74 	bl	8009fa6 <__retarget_lock_acquire_recursive>
 800a0be:	89ab      	ldrh	r3, [r5, #12]
 800a0c0:	071b      	lsls	r3, r3, #28
 800a0c2:	d501      	bpl.n	800a0c8 <_vfiprintf_r+0x34>
 800a0c4:	692b      	ldr	r3, [r5, #16]
 800a0c6:	b99b      	cbnz	r3, 800a0f0 <_vfiprintf_r+0x5c>
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f7ff fe8c 	bl	8009de8 <__swsetup_r>
 800a0d0:	b170      	cbz	r0, 800a0f0 <_vfiprintf_r+0x5c>
 800a0d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0d4:	07dc      	lsls	r4, r3, #31
 800a0d6:	d504      	bpl.n	800a0e2 <_vfiprintf_r+0x4e>
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	b01d      	add	sp, #116	@ 0x74
 800a0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	0598      	lsls	r0, r3, #22
 800a0e6:	d4f7      	bmi.n	800a0d8 <_vfiprintf_r+0x44>
 800a0e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ea:	f7ff ff5d 	bl	8009fa8 <__retarget_lock_release_recursive>
 800a0ee:	e7f3      	b.n	800a0d8 <_vfiprintf_r+0x44>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0f4:	2320      	movs	r3, #32
 800a0f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0fe:	2330      	movs	r3, #48	@ 0x30
 800a100:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a2b0 <_vfiprintf_r+0x21c>
 800a104:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a108:	f04f 0901 	mov.w	r9, #1
 800a10c:	4623      	mov	r3, r4
 800a10e:	469a      	mov	sl, r3
 800a110:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a114:	b10a      	cbz	r2, 800a11a <_vfiprintf_r+0x86>
 800a116:	2a25      	cmp	r2, #37	@ 0x25
 800a118:	d1f9      	bne.n	800a10e <_vfiprintf_r+0x7a>
 800a11a:	ebba 0b04 	subs.w	fp, sl, r4
 800a11e:	d00b      	beq.n	800a138 <_vfiprintf_r+0xa4>
 800a120:	465b      	mov	r3, fp
 800a122:	4622      	mov	r2, r4
 800a124:	4629      	mov	r1, r5
 800a126:	4630      	mov	r0, r6
 800a128:	f7ff ffa1 	bl	800a06e <__sfputs_r>
 800a12c:	3001      	adds	r0, #1
 800a12e:	f000 80a7 	beq.w	800a280 <_vfiprintf_r+0x1ec>
 800a132:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a134:	445a      	add	r2, fp
 800a136:	9209      	str	r2, [sp, #36]	@ 0x24
 800a138:	f89a 3000 	ldrb.w	r3, [sl]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	f000 809f 	beq.w	800a280 <_vfiprintf_r+0x1ec>
 800a142:	2300      	movs	r3, #0
 800a144:	f04f 32ff 	mov.w	r2, #4294967295
 800a148:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a14c:	f10a 0a01 	add.w	sl, sl, #1
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	9307      	str	r3, [sp, #28]
 800a154:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a158:	931a      	str	r3, [sp, #104]	@ 0x68
 800a15a:	4654      	mov	r4, sl
 800a15c:	2205      	movs	r2, #5
 800a15e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a162:	4853      	ldr	r0, [pc, #332]	@ (800a2b0 <_vfiprintf_r+0x21c>)
 800a164:	f7f6 f834 	bl	80001d0 <memchr>
 800a168:	9a04      	ldr	r2, [sp, #16]
 800a16a:	b9d8      	cbnz	r0, 800a1a4 <_vfiprintf_r+0x110>
 800a16c:	06d1      	lsls	r1, r2, #27
 800a16e:	bf44      	itt	mi
 800a170:	2320      	movmi	r3, #32
 800a172:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a176:	0713      	lsls	r3, r2, #28
 800a178:	bf44      	itt	mi
 800a17a:	232b      	movmi	r3, #43	@ 0x2b
 800a17c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a180:	f89a 3000 	ldrb.w	r3, [sl]
 800a184:	2b2a      	cmp	r3, #42	@ 0x2a
 800a186:	d015      	beq.n	800a1b4 <_vfiprintf_r+0x120>
 800a188:	9a07      	ldr	r2, [sp, #28]
 800a18a:	4654      	mov	r4, sl
 800a18c:	2000      	movs	r0, #0
 800a18e:	f04f 0c0a 	mov.w	ip, #10
 800a192:	4621      	mov	r1, r4
 800a194:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a198:	3b30      	subs	r3, #48	@ 0x30
 800a19a:	2b09      	cmp	r3, #9
 800a19c:	d94b      	bls.n	800a236 <_vfiprintf_r+0x1a2>
 800a19e:	b1b0      	cbz	r0, 800a1ce <_vfiprintf_r+0x13a>
 800a1a0:	9207      	str	r2, [sp, #28]
 800a1a2:	e014      	b.n	800a1ce <_vfiprintf_r+0x13a>
 800a1a4:	eba0 0308 	sub.w	r3, r0, r8
 800a1a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	46a2      	mov	sl, r4
 800a1b2:	e7d2      	b.n	800a15a <_vfiprintf_r+0xc6>
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	1d19      	adds	r1, r3, #4
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	9103      	str	r1, [sp, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	bfbb      	ittet	lt
 800a1c0:	425b      	neglt	r3, r3
 800a1c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1c6:	9307      	strge	r3, [sp, #28]
 800a1c8:	9307      	strlt	r3, [sp, #28]
 800a1ca:	bfb8      	it	lt
 800a1cc:	9204      	strlt	r2, [sp, #16]
 800a1ce:	7823      	ldrb	r3, [r4, #0]
 800a1d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1d2:	d10a      	bne.n	800a1ea <_vfiprintf_r+0x156>
 800a1d4:	7863      	ldrb	r3, [r4, #1]
 800a1d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1d8:	d132      	bne.n	800a240 <_vfiprintf_r+0x1ac>
 800a1da:	9b03      	ldr	r3, [sp, #12]
 800a1dc:	1d1a      	adds	r2, r3, #4
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	9203      	str	r2, [sp, #12]
 800a1e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1e6:	3402      	adds	r4, #2
 800a1e8:	9305      	str	r3, [sp, #20]
 800a1ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a2c0 <_vfiprintf_r+0x22c>
 800a1ee:	7821      	ldrb	r1, [r4, #0]
 800a1f0:	2203      	movs	r2, #3
 800a1f2:	4650      	mov	r0, sl
 800a1f4:	f7f5 ffec 	bl	80001d0 <memchr>
 800a1f8:	b138      	cbz	r0, 800a20a <_vfiprintf_r+0x176>
 800a1fa:	9b04      	ldr	r3, [sp, #16]
 800a1fc:	eba0 000a 	sub.w	r0, r0, sl
 800a200:	2240      	movs	r2, #64	@ 0x40
 800a202:	4082      	lsls	r2, r0
 800a204:	4313      	orrs	r3, r2
 800a206:	3401      	adds	r4, #1
 800a208:	9304      	str	r3, [sp, #16]
 800a20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20e:	4829      	ldr	r0, [pc, #164]	@ (800a2b4 <_vfiprintf_r+0x220>)
 800a210:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a214:	2206      	movs	r2, #6
 800a216:	f7f5 ffdb 	bl	80001d0 <memchr>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	d03f      	beq.n	800a29e <_vfiprintf_r+0x20a>
 800a21e:	4b26      	ldr	r3, [pc, #152]	@ (800a2b8 <_vfiprintf_r+0x224>)
 800a220:	bb1b      	cbnz	r3, 800a26a <_vfiprintf_r+0x1d6>
 800a222:	9b03      	ldr	r3, [sp, #12]
 800a224:	3307      	adds	r3, #7
 800a226:	f023 0307 	bic.w	r3, r3, #7
 800a22a:	3308      	adds	r3, #8
 800a22c:	9303      	str	r3, [sp, #12]
 800a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a230:	443b      	add	r3, r7
 800a232:	9309      	str	r3, [sp, #36]	@ 0x24
 800a234:	e76a      	b.n	800a10c <_vfiprintf_r+0x78>
 800a236:	fb0c 3202 	mla	r2, ip, r2, r3
 800a23a:	460c      	mov	r4, r1
 800a23c:	2001      	movs	r0, #1
 800a23e:	e7a8      	b.n	800a192 <_vfiprintf_r+0xfe>
 800a240:	2300      	movs	r3, #0
 800a242:	3401      	adds	r4, #1
 800a244:	9305      	str	r3, [sp, #20]
 800a246:	4619      	mov	r1, r3
 800a248:	f04f 0c0a 	mov.w	ip, #10
 800a24c:	4620      	mov	r0, r4
 800a24e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a252:	3a30      	subs	r2, #48	@ 0x30
 800a254:	2a09      	cmp	r2, #9
 800a256:	d903      	bls.n	800a260 <_vfiprintf_r+0x1cc>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d0c6      	beq.n	800a1ea <_vfiprintf_r+0x156>
 800a25c:	9105      	str	r1, [sp, #20]
 800a25e:	e7c4      	b.n	800a1ea <_vfiprintf_r+0x156>
 800a260:	fb0c 2101 	mla	r1, ip, r1, r2
 800a264:	4604      	mov	r4, r0
 800a266:	2301      	movs	r3, #1
 800a268:	e7f0      	b.n	800a24c <_vfiprintf_r+0x1b8>
 800a26a:	ab03      	add	r3, sp, #12
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	462a      	mov	r2, r5
 800a270:	4b12      	ldr	r3, [pc, #72]	@ (800a2bc <_vfiprintf_r+0x228>)
 800a272:	a904      	add	r1, sp, #16
 800a274:	4630      	mov	r0, r6
 800a276:	f3af 8000 	nop.w
 800a27a:	4607      	mov	r7, r0
 800a27c:	1c78      	adds	r0, r7, #1
 800a27e:	d1d6      	bne.n	800a22e <_vfiprintf_r+0x19a>
 800a280:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a282:	07d9      	lsls	r1, r3, #31
 800a284:	d405      	bmi.n	800a292 <_vfiprintf_r+0x1fe>
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	059a      	lsls	r2, r3, #22
 800a28a:	d402      	bmi.n	800a292 <_vfiprintf_r+0x1fe>
 800a28c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a28e:	f7ff fe8b 	bl	8009fa8 <__retarget_lock_release_recursive>
 800a292:	89ab      	ldrh	r3, [r5, #12]
 800a294:	065b      	lsls	r3, r3, #25
 800a296:	f53f af1f 	bmi.w	800a0d8 <_vfiprintf_r+0x44>
 800a29a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a29c:	e71e      	b.n	800a0dc <_vfiprintf_r+0x48>
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	9300      	str	r3, [sp, #0]
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	4b05      	ldr	r3, [pc, #20]	@ (800a2bc <_vfiprintf_r+0x228>)
 800a2a6:	a904      	add	r1, sp, #16
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	f000 f879 	bl	800a3a0 <_printf_i>
 800a2ae:	e7e4      	b.n	800a27a <_vfiprintf_r+0x1e6>
 800a2b0:	0800ace0 	.word	0x0800ace0
 800a2b4:	0800acea 	.word	0x0800acea
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	0800a06f 	.word	0x0800a06f
 800a2c0:	0800ace6 	.word	0x0800ace6

0800a2c4 <_printf_common>:
 800a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c8:	4616      	mov	r6, r2
 800a2ca:	4698      	mov	r8, r3
 800a2cc:	688a      	ldr	r2, [r1, #8]
 800a2ce:	690b      	ldr	r3, [r1, #16]
 800a2d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	bfb8      	it	lt
 800a2d8:	4613      	movlt	r3, r2
 800a2da:	6033      	str	r3, [r6, #0]
 800a2dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	b10a      	cbz	r2, 800a2ea <_printf_common+0x26>
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	6033      	str	r3, [r6, #0]
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	0699      	lsls	r1, r3, #26
 800a2ee:	bf42      	ittt	mi
 800a2f0:	6833      	ldrmi	r3, [r6, #0]
 800a2f2:	3302      	addmi	r3, #2
 800a2f4:	6033      	strmi	r3, [r6, #0]
 800a2f6:	6825      	ldr	r5, [r4, #0]
 800a2f8:	f015 0506 	ands.w	r5, r5, #6
 800a2fc:	d106      	bne.n	800a30c <_printf_common+0x48>
 800a2fe:	f104 0a19 	add.w	sl, r4, #25
 800a302:	68e3      	ldr	r3, [r4, #12]
 800a304:	6832      	ldr	r2, [r6, #0]
 800a306:	1a9b      	subs	r3, r3, r2
 800a308:	42ab      	cmp	r3, r5
 800a30a:	dc26      	bgt.n	800a35a <_printf_common+0x96>
 800a30c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a310:	6822      	ldr	r2, [r4, #0]
 800a312:	3b00      	subs	r3, #0
 800a314:	bf18      	it	ne
 800a316:	2301      	movne	r3, #1
 800a318:	0692      	lsls	r2, r2, #26
 800a31a:	d42b      	bmi.n	800a374 <_printf_common+0xb0>
 800a31c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a320:	4641      	mov	r1, r8
 800a322:	4638      	mov	r0, r7
 800a324:	47c8      	blx	r9
 800a326:	3001      	adds	r0, #1
 800a328:	d01e      	beq.n	800a368 <_printf_common+0xa4>
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	6922      	ldr	r2, [r4, #16]
 800a32e:	f003 0306 	and.w	r3, r3, #6
 800a332:	2b04      	cmp	r3, #4
 800a334:	bf02      	ittt	eq
 800a336:	68e5      	ldreq	r5, [r4, #12]
 800a338:	6833      	ldreq	r3, [r6, #0]
 800a33a:	1aed      	subeq	r5, r5, r3
 800a33c:	68a3      	ldr	r3, [r4, #8]
 800a33e:	bf0c      	ite	eq
 800a340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a344:	2500      	movne	r5, #0
 800a346:	4293      	cmp	r3, r2
 800a348:	bfc4      	itt	gt
 800a34a:	1a9b      	subgt	r3, r3, r2
 800a34c:	18ed      	addgt	r5, r5, r3
 800a34e:	2600      	movs	r6, #0
 800a350:	341a      	adds	r4, #26
 800a352:	42b5      	cmp	r5, r6
 800a354:	d11a      	bne.n	800a38c <_printf_common+0xc8>
 800a356:	2000      	movs	r0, #0
 800a358:	e008      	b.n	800a36c <_printf_common+0xa8>
 800a35a:	2301      	movs	r3, #1
 800a35c:	4652      	mov	r2, sl
 800a35e:	4641      	mov	r1, r8
 800a360:	4638      	mov	r0, r7
 800a362:	47c8      	blx	r9
 800a364:	3001      	adds	r0, #1
 800a366:	d103      	bne.n	800a370 <_printf_common+0xac>
 800a368:	f04f 30ff 	mov.w	r0, #4294967295
 800a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a370:	3501      	adds	r5, #1
 800a372:	e7c6      	b.n	800a302 <_printf_common+0x3e>
 800a374:	18e1      	adds	r1, r4, r3
 800a376:	1c5a      	adds	r2, r3, #1
 800a378:	2030      	movs	r0, #48	@ 0x30
 800a37a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a37e:	4422      	add	r2, r4
 800a380:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a384:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a388:	3302      	adds	r3, #2
 800a38a:	e7c7      	b.n	800a31c <_printf_common+0x58>
 800a38c:	2301      	movs	r3, #1
 800a38e:	4622      	mov	r2, r4
 800a390:	4641      	mov	r1, r8
 800a392:	4638      	mov	r0, r7
 800a394:	47c8      	blx	r9
 800a396:	3001      	adds	r0, #1
 800a398:	d0e6      	beq.n	800a368 <_printf_common+0xa4>
 800a39a:	3601      	adds	r6, #1
 800a39c:	e7d9      	b.n	800a352 <_printf_common+0x8e>
	...

0800a3a0 <_printf_i>:
 800a3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3a4:	7e0f      	ldrb	r7, [r1, #24]
 800a3a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a3a8:	2f78      	cmp	r7, #120	@ 0x78
 800a3aa:	4691      	mov	r9, r2
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	469a      	mov	sl, r3
 800a3b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a3b6:	d807      	bhi.n	800a3c8 <_printf_i+0x28>
 800a3b8:	2f62      	cmp	r7, #98	@ 0x62
 800a3ba:	d80a      	bhi.n	800a3d2 <_printf_i+0x32>
 800a3bc:	2f00      	cmp	r7, #0
 800a3be:	f000 80d1 	beq.w	800a564 <_printf_i+0x1c4>
 800a3c2:	2f58      	cmp	r7, #88	@ 0x58
 800a3c4:	f000 80b8 	beq.w	800a538 <_printf_i+0x198>
 800a3c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a3d0:	e03a      	b.n	800a448 <_printf_i+0xa8>
 800a3d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a3d6:	2b15      	cmp	r3, #21
 800a3d8:	d8f6      	bhi.n	800a3c8 <_printf_i+0x28>
 800a3da:	a101      	add	r1, pc, #4	@ (adr r1, 800a3e0 <_printf_i+0x40>)
 800a3dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a3e0:	0800a439 	.word	0x0800a439
 800a3e4:	0800a44d 	.word	0x0800a44d
 800a3e8:	0800a3c9 	.word	0x0800a3c9
 800a3ec:	0800a3c9 	.word	0x0800a3c9
 800a3f0:	0800a3c9 	.word	0x0800a3c9
 800a3f4:	0800a3c9 	.word	0x0800a3c9
 800a3f8:	0800a44d 	.word	0x0800a44d
 800a3fc:	0800a3c9 	.word	0x0800a3c9
 800a400:	0800a3c9 	.word	0x0800a3c9
 800a404:	0800a3c9 	.word	0x0800a3c9
 800a408:	0800a3c9 	.word	0x0800a3c9
 800a40c:	0800a54b 	.word	0x0800a54b
 800a410:	0800a477 	.word	0x0800a477
 800a414:	0800a505 	.word	0x0800a505
 800a418:	0800a3c9 	.word	0x0800a3c9
 800a41c:	0800a3c9 	.word	0x0800a3c9
 800a420:	0800a56d 	.word	0x0800a56d
 800a424:	0800a3c9 	.word	0x0800a3c9
 800a428:	0800a477 	.word	0x0800a477
 800a42c:	0800a3c9 	.word	0x0800a3c9
 800a430:	0800a3c9 	.word	0x0800a3c9
 800a434:	0800a50d 	.word	0x0800a50d
 800a438:	6833      	ldr	r3, [r6, #0]
 800a43a:	1d1a      	adds	r2, r3, #4
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	6032      	str	r2, [r6, #0]
 800a440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a444:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a448:	2301      	movs	r3, #1
 800a44a:	e09c      	b.n	800a586 <_printf_i+0x1e6>
 800a44c:	6833      	ldr	r3, [r6, #0]
 800a44e:	6820      	ldr	r0, [r4, #0]
 800a450:	1d19      	adds	r1, r3, #4
 800a452:	6031      	str	r1, [r6, #0]
 800a454:	0606      	lsls	r6, r0, #24
 800a456:	d501      	bpl.n	800a45c <_printf_i+0xbc>
 800a458:	681d      	ldr	r5, [r3, #0]
 800a45a:	e003      	b.n	800a464 <_printf_i+0xc4>
 800a45c:	0645      	lsls	r5, r0, #25
 800a45e:	d5fb      	bpl.n	800a458 <_printf_i+0xb8>
 800a460:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a464:	2d00      	cmp	r5, #0
 800a466:	da03      	bge.n	800a470 <_printf_i+0xd0>
 800a468:	232d      	movs	r3, #45	@ 0x2d
 800a46a:	426d      	negs	r5, r5
 800a46c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a470:	4858      	ldr	r0, [pc, #352]	@ (800a5d4 <_printf_i+0x234>)
 800a472:	230a      	movs	r3, #10
 800a474:	e011      	b.n	800a49a <_printf_i+0xfa>
 800a476:	6821      	ldr	r1, [r4, #0]
 800a478:	6833      	ldr	r3, [r6, #0]
 800a47a:	0608      	lsls	r0, r1, #24
 800a47c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a480:	d402      	bmi.n	800a488 <_printf_i+0xe8>
 800a482:	0649      	lsls	r1, r1, #25
 800a484:	bf48      	it	mi
 800a486:	b2ad      	uxthmi	r5, r5
 800a488:	2f6f      	cmp	r7, #111	@ 0x6f
 800a48a:	4852      	ldr	r0, [pc, #328]	@ (800a5d4 <_printf_i+0x234>)
 800a48c:	6033      	str	r3, [r6, #0]
 800a48e:	bf14      	ite	ne
 800a490:	230a      	movne	r3, #10
 800a492:	2308      	moveq	r3, #8
 800a494:	2100      	movs	r1, #0
 800a496:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a49a:	6866      	ldr	r6, [r4, #4]
 800a49c:	60a6      	str	r6, [r4, #8]
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	db05      	blt.n	800a4ae <_printf_i+0x10e>
 800a4a2:	6821      	ldr	r1, [r4, #0]
 800a4a4:	432e      	orrs	r6, r5
 800a4a6:	f021 0104 	bic.w	r1, r1, #4
 800a4aa:	6021      	str	r1, [r4, #0]
 800a4ac:	d04b      	beq.n	800a546 <_printf_i+0x1a6>
 800a4ae:	4616      	mov	r6, r2
 800a4b0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a4b4:	fb03 5711 	mls	r7, r3, r1, r5
 800a4b8:	5dc7      	ldrb	r7, [r0, r7]
 800a4ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a4be:	462f      	mov	r7, r5
 800a4c0:	42bb      	cmp	r3, r7
 800a4c2:	460d      	mov	r5, r1
 800a4c4:	d9f4      	bls.n	800a4b0 <_printf_i+0x110>
 800a4c6:	2b08      	cmp	r3, #8
 800a4c8:	d10b      	bne.n	800a4e2 <_printf_i+0x142>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	07df      	lsls	r7, r3, #31
 800a4ce:	d508      	bpl.n	800a4e2 <_printf_i+0x142>
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	6861      	ldr	r1, [r4, #4]
 800a4d4:	4299      	cmp	r1, r3
 800a4d6:	bfde      	ittt	le
 800a4d8:	2330      	movle	r3, #48	@ 0x30
 800a4da:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a4de:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a4e2:	1b92      	subs	r2, r2, r6
 800a4e4:	6122      	str	r2, [r4, #16]
 800a4e6:	f8cd a000 	str.w	sl, [sp]
 800a4ea:	464b      	mov	r3, r9
 800a4ec:	aa03      	add	r2, sp, #12
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	4640      	mov	r0, r8
 800a4f2:	f7ff fee7 	bl	800a2c4 <_printf_common>
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d14a      	bne.n	800a590 <_printf_i+0x1f0>
 800a4fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a4fe:	b004      	add	sp, #16
 800a500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	f043 0320 	orr.w	r3, r3, #32
 800a50a:	6023      	str	r3, [r4, #0]
 800a50c:	4832      	ldr	r0, [pc, #200]	@ (800a5d8 <_printf_i+0x238>)
 800a50e:	2778      	movs	r7, #120	@ 0x78
 800a510:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	6831      	ldr	r1, [r6, #0]
 800a518:	061f      	lsls	r7, r3, #24
 800a51a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a51e:	d402      	bmi.n	800a526 <_printf_i+0x186>
 800a520:	065f      	lsls	r7, r3, #25
 800a522:	bf48      	it	mi
 800a524:	b2ad      	uxthmi	r5, r5
 800a526:	6031      	str	r1, [r6, #0]
 800a528:	07d9      	lsls	r1, r3, #31
 800a52a:	bf44      	itt	mi
 800a52c:	f043 0320 	orrmi.w	r3, r3, #32
 800a530:	6023      	strmi	r3, [r4, #0]
 800a532:	b11d      	cbz	r5, 800a53c <_printf_i+0x19c>
 800a534:	2310      	movs	r3, #16
 800a536:	e7ad      	b.n	800a494 <_printf_i+0xf4>
 800a538:	4826      	ldr	r0, [pc, #152]	@ (800a5d4 <_printf_i+0x234>)
 800a53a:	e7e9      	b.n	800a510 <_printf_i+0x170>
 800a53c:	6823      	ldr	r3, [r4, #0]
 800a53e:	f023 0320 	bic.w	r3, r3, #32
 800a542:	6023      	str	r3, [r4, #0]
 800a544:	e7f6      	b.n	800a534 <_printf_i+0x194>
 800a546:	4616      	mov	r6, r2
 800a548:	e7bd      	b.n	800a4c6 <_printf_i+0x126>
 800a54a:	6833      	ldr	r3, [r6, #0]
 800a54c:	6825      	ldr	r5, [r4, #0]
 800a54e:	6961      	ldr	r1, [r4, #20]
 800a550:	1d18      	adds	r0, r3, #4
 800a552:	6030      	str	r0, [r6, #0]
 800a554:	062e      	lsls	r6, r5, #24
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	d501      	bpl.n	800a55e <_printf_i+0x1be>
 800a55a:	6019      	str	r1, [r3, #0]
 800a55c:	e002      	b.n	800a564 <_printf_i+0x1c4>
 800a55e:	0668      	lsls	r0, r5, #25
 800a560:	d5fb      	bpl.n	800a55a <_printf_i+0x1ba>
 800a562:	8019      	strh	r1, [r3, #0]
 800a564:	2300      	movs	r3, #0
 800a566:	6123      	str	r3, [r4, #16]
 800a568:	4616      	mov	r6, r2
 800a56a:	e7bc      	b.n	800a4e6 <_printf_i+0x146>
 800a56c:	6833      	ldr	r3, [r6, #0]
 800a56e:	1d1a      	adds	r2, r3, #4
 800a570:	6032      	str	r2, [r6, #0]
 800a572:	681e      	ldr	r6, [r3, #0]
 800a574:	6862      	ldr	r2, [r4, #4]
 800a576:	2100      	movs	r1, #0
 800a578:	4630      	mov	r0, r6
 800a57a:	f7f5 fe29 	bl	80001d0 <memchr>
 800a57e:	b108      	cbz	r0, 800a584 <_printf_i+0x1e4>
 800a580:	1b80      	subs	r0, r0, r6
 800a582:	6060      	str	r0, [r4, #4]
 800a584:	6863      	ldr	r3, [r4, #4]
 800a586:	6123      	str	r3, [r4, #16]
 800a588:	2300      	movs	r3, #0
 800a58a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a58e:	e7aa      	b.n	800a4e6 <_printf_i+0x146>
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	4632      	mov	r2, r6
 800a594:	4649      	mov	r1, r9
 800a596:	4640      	mov	r0, r8
 800a598:	47d0      	blx	sl
 800a59a:	3001      	adds	r0, #1
 800a59c:	d0ad      	beq.n	800a4fa <_printf_i+0x15a>
 800a59e:	6823      	ldr	r3, [r4, #0]
 800a5a0:	079b      	lsls	r3, r3, #30
 800a5a2:	d413      	bmi.n	800a5cc <_printf_i+0x22c>
 800a5a4:	68e0      	ldr	r0, [r4, #12]
 800a5a6:	9b03      	ldr	r3, [sp, #12]
 800a5a8:	4298      	cmp	r0, r3
 800a5aa:	bfb8      	it	lt
 800a5ac:	4618      	movlt	r0, r3
 800a5ae:	e7a6      	b.n	800a4fe <_printf_i+0x15e>
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	4632      	mov	r2, r6
 800a5b4:	4649      	mov	r1, r9
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	47d0      	blx	sl
 800a5ba:	3001      	adds	r0, #1
 800a5bc:	d09d      	beq.n	800a4fa <_printf_i+0x15a>
 800a5be:	3501      	adds	r5, #1
 800a5c0:	68e3      	ldr	r3, [r4, #12]
 800a5c2:	9903      	ldr	r1, [sp, #12]
 800a5c4:	1a5b      	subs	r3, r3, r1
 800a5c6:	42ab      	cmp	r3, r5
 800a5c8:	dcf2      	bgt.n	800a5b0 <_printf_i+0x210>
 800a5ca:	e7eb      	b.n	800a5a4 <_printf_i+0x204>
 800a5cc:	2500      	movs	r5, #0
 800a5ce:	f104 0619 	add.w	r6, r4, #25
 800a5d2:	e7f5      	b.n	800a5c0 <_printf_i+0x220>
 800a5d4:	0800acf1 	.word	0x0800acf1
 800a5d8:	0800ad02 	.word	0x0800ad02

0800a5dc <__sflush_r>:
 800a5dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e4:	0716      	lsls	r6, r2, #28
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	d454      	bmi.n	800a696 <__sflush_r+0xba>
 800a5ec:	684b      	ldr	r3, [r1, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	dc02      	bgt.n	800a5f8 <__sflush_r+0x1c>
 800a5f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	dd48      	ble.n	800a68a <__sflush_r+0xae>
 800a5f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5fa:	2e00      	cmp	r6, #0
 800a5fc:	d045      	beq.n	800a68a <__sflush_r+0xae>
 800a5fe:	2300      	movs	r3, #0
 800a600:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a604:	682f      	ldr	r7, [r5, #0]
 800a606:	6a21      	ldr	r1, [r4, #32]
 800a608:	602b      	str	r3, [r5, #0]
 800a60a:	d030      	beq.n	800a66e <__sflush_r+0x92>
 800a60c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	0759      	lsls	r1, r3, #29
 800a612:	d505      	bpl.n	800a620 <__sflush_r+0x44>
 800a614:	6863      	ldr	r3, [r4, #4]
 800a616:	1ad2      	subs	r2, r2, r3
 800a618:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a61a:	b10b      	cbz	r3, 800a620 <__sflush_r+0x44>
 800a61c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a61e:	1ad2      	subs	r2, r2, r3
 800a620:	2300      	movs	r3, #0
 800a622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a624:	6a21      	ldr	r1, [r4, #32]
 800a626:	4628      	mov	r0, r5
 800a628:	47b0      	blx	r6
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	d106      	bne.n	800a63e <__sflush_r+0x62>
 800a630:	6829      	ldr	r1, [r5, #0]
 800a632:	291d      	cmp	r1, #29
 800a634:	d82b      	bhi.n	800a68e <__sflush_r+0xb2>
 800a636:	4a2a      	ldr	r2, [pc, #168]	@ (800a6e0 <__sflush_r+0x104>)
 800a638:	40ca      	lsrs	r2, r1
 800a63a:	07d6      	lsls	r6, r2, #31
 800a63c:	d527      	bpl.n	800a68e <__sflush_r+0xb2>
 800a63e:	2200      	movs	r2, #0
 800a640:	6062      	str	r2, [r4, #4]
 800a642:	04d9      	lsls	r1, r3, #19
 800a644:	6922      	ldr	r2, [r4, #16]
 800a646:	6022      	str	r2, [r4, #0]
 800a648:	d504      	bpl.n	800a654 <__sflush_r+0x78>
 800a64a:	1c42      	adds	r2, r0, #1
 800a64c:	d101      	bne.n	800a652 <__sflush_r+0x76>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	b903      	cbnz	r3, 800a654 <__sflush_r+0x78>
 800a652:	6560      	str	r0, [r4, #84]	@ 0x54
 800a654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a656:	602f      	str	r7, [r5, #0]
 800a658:	b1b9      	cbz	r1, 800a68a <__sflush_r+0xae>
 800a65a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a65e:	4299      	cmp	r1, r3
 800a660:	d002      	beq.n	800a668 <__sflush_r+0x8c>
 800a662:	4628      	mov	r0, r5
 800a664:	f7ff fca2 	bl	8009fac <_free_r>
 800a668:	2300      	movs	r3, #0
 800a66a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a66c:	e00d      	b.n	800a68a <__sflush_r+0xae>
 800a66e:	2301      	movs	r3, #1
 800a670:	4628      	mov	r0, r5
 800a672:	47b0      	blx	r6
 800a674:	4602      	mov	r2, r0
 800a676:	1c50      	adds	r0, r2, #1
 800a678:	d1c9      	bne.n	800a60e <__sflush_r+0x32>
 800a67a:	682b      	ldr	r3, [r5, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0c6      	beq.n	800a60e <__sflush_r+0x32>
 800a680:	2b1d      	cmp	r3, #29
 800a682:	d001      	beq.n	800a688 <__sflush_r+0xac>
 800a684:	2b16      	cmp	r3, #22
 800a686:	d11e      	bne.n	800a6c6 <__sflush_r+0xea>
 800a688:	602f      	str	r7, [r5, #0]
 800a68a:	2000      	movs	r0, #0
 800a68c:	e022      	b.n	800a6d4 <__sflush_r+0xf8>
 800a68e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a692:	b21b      	sxth	r3, r3
 800a694:	e01b      	b.n	800a6ce <__sflush_r+0xf2>
 800a696:	690f      	ldr	r7, [r1, #16]
 800a698:	2f00      	cmp	r7, #0
 800a69a:	d0f6      	beq.n	800a68a <__sflush_r+0xae>
 800a69c:	0793      	lsls	r3, r2, #30
 800a69e:	680e      	ldr	r6, [r1, #0]
 800a6a0:	bf08      	it	eq
 800a6a2:	694b      	ldreq	r3, [r1, #20]
 800a6a4:	600f      	str	r7, [r1, #0]
 800a6a6:	bf18      	it	ne
 800a6a8:	2300      	movne	r3, #0
 800a6aa:	eba6 0807 	sub.w	r8, r6, r7
 800a6ae:	608b      	str	r3, [r1, #8]
 800a6b0:	f1b8 0f00 	cmp.w	r8, #0
 800a6b4:	dde9      	ble.n	800a68a <__sflush_r+0xae>
 800a6b6:	6a21      	ldr	r1, [r4, #32]
 800a6b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a6ba:	4643      	mov	r3, r8
 800a6bc:	463a      	mov	r2, r7
 800a6be:	4628      	mov	r0, r5
 800a6c0:	47b0      	blx	r6
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	dc08      	bgt.n	800a6d8 <__sflush_r+0xfc>
 800a6c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ce:	81a3      	strh	r3, [r4, #12]
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d8:	4407      	add	r7, r0
 800a6da:	eba8 0800 	sub.w	r8, r8, r0
 800a6de:	e7e7      	b.n	800a6b0 <__sflush_r+0xd4>
 800a6e0:	20400001 	.word	0x20400001

0800a6e4 <_fflush_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	690b      	ldr	r3, [r1, #16]
 800a6e8:	4605      	mov	r5, r0
 800a6ea:	460c      	mov	r4, r1
 800a6ec:	b913      	cbnz	r3, 800a6f4 <_fflush_r+0x10>
 800a6ee:	2500      	movs	r5, #0
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	b118      	cbz	r0, 800a6fe <_fflush_r+0x1a>
 800a6f6:	6a03      	ldr	r3, [r0, #32]
 800a6f8:	b90b      	cbnz	r3, 800a6fe <_fflush_r+0x1a>
 800a6fa:	f7ff f9f7 	bl	8009aec <__sinit>
 800a6fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0f3      	beq.n	800a6ee <_fflush_r+0xa>
 800a706:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a708:	07d0      	lsls	r0, r2, #31
 800a70a:	d404      	bmi.n	800a716 <_fflush_r+0x32>
 800a70c:	0599      	lsls	r1, r3, #22
 800a70e:	d402      	bmi.n	800a716 <_fflush_r+0x32>
 800a710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a712:	f7ff fc48 	bl	8009fa6 <__retarget_lock_acquire_recursive>
 800a716:	4628      	mov	r0, r5
 800a718:	4621      	mov	r1, r4
 800a71a:	f7ff ff5f 	bl	800a5dc <__sflush_r>
 800a71e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a720:	07da      	lsls	r2, r3, #31
 800a722:	4605      	mov	r5, r0
 800a724:	d4e4      	bmi.n	800a6f0 <_fflush_r+0xc>
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	059b      	lsls	r3, r3, #22
 800a72a:	d4e1      	bmi.n	800a6f0 <_fflush_r+0xc>
 800a72c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a72e:	f7ff fc3b 	bl	8009fa8 <__retarget_lock_release_recursive>
 800a732:	e7dd      	b.n	800a6f0 <_fflush_r+0xc>

0800a734 <__swhatbuf_r>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	460c      	mov	r4, r1
 800a738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a73c:	2900      	cmp	r1, #0
 800a73e:	b096      	sub	sp, #88	@ 0x58
 800a740:	4615      	mov	r5, r2
 800a742:	461e      	mov	r6, r3
 800a744:	da0d      	bge.n	800a762 <__swhatbuf_r+0x2e>
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a74c:	f04f 0100 	mov.w	r1, #0
 800a750:	bf14      	ite	ne
 800a752:	2340      	movne	r3, #64	@ 0x40
 800a754:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a758:	2000      	movs	r0, #0
 800a75a:	6031      	str	r1, [r6, #0]
 800a75c:	602b      	str	r3, [r5, #0]
 800a75e:	b016      	add	sp, #88	@ 0x58
 800a760:	bd70      	pop	{r4, r5, r6, pc}
 800a762:	466a      	mov	r2, sp
 800a764:	f000 f848 	bl	800a7f8 <_fstat_r>
 800a768:	2800      	cmp	r0, #0
 800a76a:	dbec      	blt.n	800a746 <__swhatbuf_r+0x12>
 800a76c:	9901      	ldr	r1, [sp, #4]
 800a76e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a772:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a776:	4259      	negs	r1, r3
 800a778:	4159      	adcs	r1, r3
 800a77a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a77e:	e7eb      	b.n	800a758 <__swhatbuf_r+0x24>

0800a780 <__smakebuf_r>:
 800a780:	898b      	ldrh	r3, [r1, #12]
 800a782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a784:	079d      	lsls	r5, r3, #30
 800a786:	4606      	mov	r6, r0
 800a788:	460c      	mov	r4, r1
 800a78a:	d507      	bpl.n	800a79c <__smakebuf_r+0x1c>
 800a78c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	6123      	str	r3, [r4, #16]
 800a794:	2301      	movs	r3, #1
 800a796:	6163      	str	r3, [r4, #20]
 800a798:	b003      	add	sp, #12
 800a79a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a79c:	ab01      	add	r3, sp, #4
 800a79e:	466a      	mov	r2, sp
 800a7a0:	f7ff ffc8 	bl	800a734 <__swhatbuf_r>
 800a7a4:	9f00      	ldr	r7, [sp, #0]
 800a7a6:	4605      	mov	r5, r0
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f7ff f886 	bl	80098bc <_malloc_r>
 800a7b0:	b948      	cbnz	r0, 800a7c6 <__smakebuf_r+0x46>
 800a7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b6:	059a      	lsls	r2, r3, #22
 800a7b8:	d4ee      	bmi.n	800a798 <__smakebuf_r+0x18>
 800a7ba:	f023 0303 	bic.w	r3, r3, #3
 800a7be:	f043 0302 	orr.w	r3, r3, #2
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	e7e2      	b.n	800a78c <__smakebuf_r+0xc>
 800a7c6:	89a3      	ldrh	r3, [r4, #12]
 800a7c8:	6020      	str	r0, [r4, #0]
 800a7ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ce:	81a3      	strh	r3, [r4, #12]
 800a7d0:	9b01      	ldr	r3, [sp, #4]
 800a7d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7d6:	b15b      	cbz	r3, 800a7f0 <__smakebuf_r+0x70>
 800a7d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7dc:	4630      	mov	r0, r6
 800a7de:	f000 f81d 	bl	800a81c <_isatty_r>
 800a7e2:	b128      	cbz	r0, 800a7f0 <__smakebuf_r+0x70>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	f023 0303 	bic.w	r3, r3, #3
 800a7ea:	f043 0301 	orr.w	r3, r3, #1
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	89a3      	ldrh	r3, [r4, #12]
 800a7f2:	431d      	orrs	r5, r3
 800a7f4:	81a5      	strh	r5, [r4, #12]
 800a7f6:	e7cf      	b.n	800a798 <__smakebuf_r+0x18>

0800a7f8 <_fstat_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4d07      	ldr	r5, [pc, #28]	@ (800a818 <_fstat_r+0x20>)
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4604      	mov	r4, r0
 800a800:	4608      	mov	r0, r1
 800a802:	4611      	mov	r1, r2
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	f7f6 fd30 	bl	800126a <_fstat>
 800a80a:	1c43      	adds	r3, r0, #1
 800a80c:	d102      	bne.n	800a814 <_fstat_r+0x1c>
 800a80e:	682b      	ldr	r3, [r5, #0]
 800a810:	b103      	cbz	r3, 800a814 <_fstat_r+0x1c>
 800a812:	6023      	str	r3, [r4, #0]
 800a814:	bd38      	pop	{r3, r4, r5, pc}
 800a816:	bf00      	nop
 800a818:	20000af8 	.word	0x20000af8

0800a81c <_isatty_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d06      	ldr	r5, [pc, #24]	@ (800a838 <_isatty_r+0x1c>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	602b      	str	r3, [r5, #0]
 800a828:	f7f6 fd2f 	bl	800128a <_isatty>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_isatty_r+0x1a>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_isatty_r+0x1a>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	20000af8 	.word	0x20000af8

0800a83c <_init>:
 800a83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83e:	bf00      	nop
 800a840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a842:	bc08      	pop	{r3}
 800a844:	469e      	mov	lr, r3
 800a846:	4770      	bx	lr

0800a848 <_fini>:
 800a848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84a:	bf00      	nop
 800a84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a84e:	bc08      	pop	{r3}
 800a850:	469e      	mov	lr, r3
 800a852:	4770      	bx	lr
