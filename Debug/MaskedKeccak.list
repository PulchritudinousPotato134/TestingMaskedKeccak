
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfe8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800c178  0800c178  0000d178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c524  0800c524  0000e088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c524  0800c524  0000d524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c52c  0800c52c  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c52c  0800c52c  0000d52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c530  0800c530  0000d530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800c534  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b78e  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a87  00000000  00000000  00029846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0002e2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113b  00000000  00000000  0002f958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006deb  00000000  00000000  00030a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020408  00000000  00000000  0003787e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e80  00000000  00000000  00057c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129b06  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006670  00000000  00000000  00129b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001301bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c160 	.word	0x0800c160

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c160 	.word	0x0800c160

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <theta>:
    x = z;
  }
}

void theta(uint64_t* state)
{
 800059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a0:	b0a0      	sub	sp, #128	@ 0x80
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Theta */

  uint64_t C[5] = {0, 0, 0, 0, 0};
 80005a6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80005aa:	2328      	movs	r3, #40	@ 0x28
 80005ac:	461a      	mov	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f00b f8c0 	bl	800b734 <memset>
  uint64_t D[5] = {0, 0, 0, 0, 0};
 80005b4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80005b8:	2328      	movs	r3, #40	@ 0x28
 80005ba:	461a      	mov	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f00b f8b9 	bl	800b734 <memset>

  int x, y;
  for (x = 0; x < 5; ++x) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80005c6:	e043      	b.n	8000650 <theta+0xb4>
    C[x] = state[x] ^ state[5 + x] ^ state[10 + x] ^ state[15 + x] ^ state[20 + x];
 80005c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ca:	00da      	lsls	r2, r3, #3
 80005cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ce:	4413      	add	r3, r2
 80005d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80005d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005d6:	3305      	adds	r3, #5
 80005d8:	00da      	lsls	r2, r3, #3
 80005da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005dc:	4413      	add	r3, r2
 80005de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e2:	ea80 0402 	eor.w	r4, r0, r2
 80005e6:	ea81 0503 	eor.w	r5, r1, r3
 80005ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ec:	330a      	adds	r3, #10
 80005ee:	00da      	lsls	r2, r3, #3
 80005f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f2:	4413      	add	r3, r2
 80005f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f8:	ea84 0a02 	eor.w	sl, r4, r2
 80005fc:	ea85 0b03 	eor.w	fp, r5, r3
 8000600:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000602:	330f      	adds	r3, #15
 8000604:	00da      	lsls	r2, r3, #3
 8000606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000608:	4413      	add	r3, r2
 800060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800060e:	ea8a 0102 	eor.w	r1, sl, r2
 8000612:	61b9      	str	r1, [r7, #24]
 8000614:	ea8b 0303 	eor.w	r3, fp, r3
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800061c:	3314      	adds	r3, #20
 800061e:	00da      	lsls	r2, r3, #3
 8000620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000622:	4413      	add	r3, r2
 8000624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000628:	69b9      	ldr	r1, [r7, #24]
 800062a:	4051      	eors	r1, r2
 800062c:	6139      	str	r1, [r7, #16]
 800062e:	69f9      	ldr	r1, [r7, #28]
 8000630:	404b      	eors	r3, r1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	3360      	adds	r3, #96	@ 0x60
 800063a:	f107 0220 	add.w	r2, r7, #32
 800063e:	4413      	add	r3, r2
 8000640:	3b30      	subs	r3, #48	@ 0x30
 8000642:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000646:	e9c3 1200 	strd	r1, r2, [r3]
  for (x = 0; x < 5; ++x) {
 800064a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800064c:	3301      	adds	r3, #1
 800064e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000652:	2b04      	cmp	r3, #4
 8000654:	ddb8      	ble.n	80005c8 <theta+0x2c>
  }

  for (x = 0; x < 5; ++x) {
 8000656:	2300      	movs	r3, #0
 8000658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800065a:	e072      	b.n	8000742 <theta+0x1a6>
    /* in order to avoid negative mod values,
      we've replaced "(x - 1) % 5" with "(x + 4) % 5" */
    D[x] = C[(x + 4) % 5] ^ ROTL64(C[(x + 1) % 5], 1);
 800065c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800065e:	1d19      	adds	r1, r3, #4
 8000660:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <theta+0x1b8>)
 8000662:	fb83 2301 	smull	r2, r3, r3, r1
 8000666:	105a      	asrs	r2, r3, #1
 8000668:	17cb      	asrs	r3, r1, #31
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	00d3      	lsls	r3, r2, #3
 8000676:	3360      	adds	r3, #96	@ 0x60
 8000678:	f107 0220 	add.w	r2, r7, #32
 800067c:	4413      	add	r3, r2
 800067e:	3b30      	subs	r3, #48	@ 0x30
 8000680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000686:	1c5c      	adds	r4, r3, #1
 8000688:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <theta+0x1b8>)
 800068a:	fb83 2304 	smull	r2, r3, r3, r4
 800068e:	105a      	asrs	r2, r3, #1
 8000690:	17e3      	asrs	r3, r4, #31
 8000692:	1ad2      	subs	r2, r2, r3
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	1ae2      	subs	r2, r4, r3
 800069c:	00d3      	lsls	r3, r2, #3
 800069e:	3360      	adds	r3, #96	@ 0x60
 80006a0:	f107 0220 	add.w	r2, r7, #32
 80006a4:	4413      	add	r3, r2
 80006a6:	3b30      	subs	r3, #48	@ 0x30
 80006a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ac:	0fd5      	lsrs	r5, r2, #31
 80006ae:	005c      	lsls	r4, r3, #1
 80006b0:	ea45 0904 	orr.w	r9, r5, r4
 80006b4:	0fdc      	lsrs	r4, r3, #31
 80006b6:	0053      	lsls	r3, r2, #1
 80006b8:	ea44 0803 	orr.w	r8, r4, r3
 80006bc:	ea80 0308 	eor.w	r3, r0, r8
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	ea81 0309 	eor.w	r3, r1, r9
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	3360      	adds	r3, #96	@ 0x60
 80006ce:	f107 0220 	add.w	r2, r7, #32
 80006d2:	4413      	add	r3, r2
 80006d4:	3b58      	subs	r3, #88	@ 0x58
 80006d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80006da:	e9c3 1200 	strd	r1, r2, [r3]

    for (y = 0; y < 5; ++y) {
 80006de:	2300      	movs	r3, #0
 80006e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80006e2:	e028      	b.n	8000736 <theta+0x19a>
      state[y * 5 + x] = state[y * 5 + x] ^ D[x];
 80006e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	441a      	add	r2, r3
 80006ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ee:	4413      	add	r3, r2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f4:	4413      	add	r3, r2
 80006f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	3360      	adds	r3, #96	@ 0x60
 8000700:	f107 0220 	add.w	r2, r7, #32
 8000704:	4413      	add	r3, r2
 8000706:	3b58      	subs	r3, #88	@ 0x58
 8000708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070c:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 800070e:	462c      	mov	r4, r5
 8000710:	00a4      	lsls	r4, r4, #2
 8000712:	4425      	add	r5, r4
 8000714:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8000716:	442c      	add	r4, r5
 8000718:	00e4      	lsls	r4, r4, #3
 800071a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 800071c:	442c      	add	r4, r5
 800071e:	ea80 0502 	eor.w	r5, r0, r2
 8000722:	603d      	str	r5, [r7, #0]
 8000724:	404b      	eors	r3, r1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800072c:	e9c4 2300 	strd	r2, r3, [r4]
    for (y = 0; y < 5; ++y) {
 8000730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000732:	3301      	adds	r3, #1
 8000734:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000738:	2b04      	cmp	r3, #4
 800073a:	ddd3      	ble.n	80006e4 <theta+0x148>
  for (x = 0; x < 5; ++x) {
 800073c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800073e:	3301      	adds	r3, #1
 8000740:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000744:	2b04      	cmp	r3, #4
 8000746:	dd89      	ble.n	800065c <theta+0xc0>
    }
  }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3780      	adds	r7, #128	@ 0x80
 800074e:	46bd      	mov	sp, r7
 8000750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000754:	66666667 	.word	0x66666667

08000758 <pad101>:
    }
  }
}

int pad101(int r, int blocks, int l, uint8_t* M, uint8_t* P)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	603b      	str	r3, [r7, #0]
    int block_size = r / 8;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b00      	cmp	r3, #0
 800076a:	da00      	bge.n	800076e <pad101+0x16>
 800076c:	3307      	adds	r3, #7
 800076e:	10db      	asrs	r3, r3, #3
 8000770:	61bb      	str	r3, [r7, #24]

    /* length of the padded block */
    size_t block_len = (blocks + 1) * block_size;
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	3301      	adds	r3, #1
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	fb02 f303 	mul.w	r3, r2, r3
 800077c:	617b      	str	r3, [r7, #20]

    /* zero out data and copy M into P */
    memset(P, 0, block_len * sizeof(uint8_t));
 800077e:	697a      	ldr	r2, [r7, #20]
 8000780:	2100      	movs	r1, #0
 8000782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000784:	f00a ffd6 	bl	800b734 <memset>
    for (int i = 0; i < l; ++i) {
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	e00a      	b.n	80007a4 <pad101+0x4c>
        P[i] = M[i];
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	441a      	add	r2, r3
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000798:	440b      	add	r3, r1
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < l; ++i) {
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3301      	adds	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	69fa      	ldr	r2, [r7, #28]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbf0      	blt.n	800078e <pad101+0x36>
    }

    /* CRYSTALS-style padding */
    P[l] ^= 0x06;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007b0:	4413      	add	r3, r2
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007b8:	440b      	add	r3, r1
 80007ba:	f082 0206 	eor.w	r2, r2, #6
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	701a      	strb	r2, [r3, #0]
    P[block_len - 1] ^= 0x80;
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007c8:	4413      	add	r3, r2
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	3a01      	subs	r2, #1
 80007d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007d2:	440a      	add	r2, r1
 80007d4:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80007d8:	43db      	mvns	r3, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	7013      	strb	r3, [r2, #0]

    return block_len;
 80007de:	697b      	ldr	r3, [r7, #20]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <_write+0x28>)
 8000800:	f006 fb51 	bl	8006ea6 <HAL_UART_Transmit>
    return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200001a8 	.word	0x200001a8

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000818:	b0fb      	sub	sp, #492	@ 0x1ec
 800081a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f002 f99a 	bl	8002b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 fa2a 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f000 fb64 	bl	8000ef0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000828:	f000 fa90 	bl	8000d4c <MX_I2C1_Init>
  MX_I2S3_Init();
 800082c:	f000 fabc 	bl	8000da8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000830:	f000 fafe 	bl	8000e30 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000834:	f00a f8e0 	bl	800a9f8 <MX_USB_HOST_Init>
  MX_RNG_Init();
 8000838:	f000 fae6 	bl	8000e08 <MX_RNG_Init>
  MX_USART2_UART_Init();
 800083c:	f000 fb2e 	bl	8000e9c <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000846:	4bd1      	ldr	r3, [pc, #836]	@ (8000b8c <main+0x378>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800084a:	4ad0      	ldr	r2, [pc, #832]	@ (8000b8c <main+0x378>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	6353      	str	r3, [r2, #52]	@ 0x34
 8000852:	4bce      	ldr	r3, [pc, #824]	@ (8000b8c <main+0x378>)
 8000854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800085e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
  HAL_RNG_Init(&hrng);
 8000862:	48cb      	ldr	r0, [pc, #812]	@ (8000b90 <main+0x37c>)
 8000864:	f006 f9c6 	bl	8006bf4 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8000868:	4bca      	ldr	r3, [pc, #808]	@ (8000b94 <main+0x380>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6898      	ldr	r0, [r3, #8]
 800086e:	2300      	movs	r3, #0
 8000870:	2202      	movs	r2, #2
 8000872:	2100      	movs	r1, #0
 8000874:	f00a fdc2 	bl	800b3fc <setvbuf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 8000878:	466b      	mov	r3, sp
 800087a:	461e      	mov	r6, r3

	      const uint8_t input[] = {
 800087c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000880:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8000884:	4ac4      	ldr	r2, [pc, #784]	@ (8000b98 <main+0x384>)
 8000886:	461d      	mov	r5, r3
 8000888:	4614      	mov	r4, r2
 800088a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800088c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800088e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000892:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	          0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	          0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	          0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	          0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
	      };
	      size_t input_len = sizeof(input);
 8000896:	2320      	movs	r3, #32
 8000898:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

	      // SHA3-512 has: r = 576, c = 1024
	      int r = 576;
 800089c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80008a0:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
	      int c = 1024;
 80008a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
	      int b = r + c;
 80008ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80008b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80008b4:	4413      	add	r3, r2
 80008b6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	      int block_size = r / 8;
 80008ba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da00      	bge.n	80008c4 <main+0xb0>
 80008c2:	3307      	adds	r3, #7
 80008c4:	10db      	asrs	r3, r3, #3
 80008c6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

	      // padded input buffer
	      int blocks = input_len / block_size;
 80008ca:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80008ce:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80008d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80008d6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	      uint8_t padded[block_size * (blocks + 1)];
 80008da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80008e4:	fb03 f102 	mul.w	r1, r3, r2
 80008e8:	1e4b      	subs	r3, r1, #1
 80008ea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80008ee:	460a      	mov	r2, r1
 80008f0:	2300      	movs	r3, #0
 80008f2:	4692      	mov	sl, r2
 80008f4:	469b      	mov	fp, r3
 80008f6:	f04f 0200 	mov.w	r2, #0
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000902:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000906:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800090a:	460a      	mov	r2, r1
 800090c:	2300      	movs	r3, #0
 800090e:	613a      	str	r2, [r7, #16]
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800091e:	4628      	mov	r0, r5
 8000920:	00c3      	lsls	r3, r0, #3
 8000922:	4620      	mov	r0, r4
 8000924:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000928:	4620      	mov	r0, r4
 800092a:	00c2      	lsls	r2, r0, #3
 800092c:	460b      	mov	r3, r1
 800092e:	3307      	adds	r3, #7
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	ebad 0d03 	sub.w	sp, sp, r3
 8000938:	ab02      	add	r3, sp, #8
 800093a:	3300      	adds	r3, #0
 800093c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	      int padded_len = pad101(r, blocks, input_len, (uint8_t *)input, padded);
 8000940:	f107 0220 	add.w	r2, r7, #32
 8000944:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	4613      	mov	r3, r2
 800094c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000950:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8000954:	f8d7 01b8 	ldr.w	r0, [r7, #440]	@ 0x1b8
 8000958:	f7ff fefe 	bl	8000758 <pad101>
 800095c:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	      // 25-lane state
	      uint64_t state[25] = {0};
 8000960:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000964:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000968:	4618      	mov	r0, r3
 800096a:	23c8      	movs	r3, #200	@ 0xc8
 800096c:	461a      	mov	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f00a fee0 	bl	800b734 <memset>

	      // absorb one block manually
	      for (int i = 0; i < r / 64; i++) {
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800097a:	e071      	b.n	8000a60 <main+0x24c>
	          uint32_t lo = 0, hi = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	          for (int j = 0; j < 4; j++) {
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800098e:	e02b      	b.n	80009e8 <main+0x1d4>
	              lo |= ((uint32_t)padded[i * 8 + j]) << (8 * j);
 8000990:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000994:	00da      	lsls	r2, r3, #3
 8000996:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800099a:	441a      	add	r2, r3
 800099c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80009a0:	5c9b      	ldrb	r3, [r3, r2]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	409a      	lsls	r2, r3
 80009ac:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80009b0:	4313      	orrs	r3, r2
 80009b2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
	              hi |= ((uint32_t)padded[i * 8 + 4 + j]) << (8 * j);
 80009b6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	1d1a      	adds	r2, r3, #4
 80009be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009c2:	441a      	add	r2, r3
 80009c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80009c8:	5c9b      	ldrb	r3, [r3, r2]
 80009ca:	461a      	mov	r2, r3
 80009cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	409a      	lsls	r2, r3
 80009d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80009d8:	4313      	orrs	r3, r2
 80009da:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	          for (int j = 0; j < 4; j++) {
 80009de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009e2:	3301      	adds	r3, #1
 80009e4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80009e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	ddcf      	ble.n	8000990 <main+0x17c>
	          }
	          state[i] ^= ((uint64_t)hi << 32) | lo;
 80009f0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80009f4:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80009f8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	4413      	add	r3, r2
 8000a00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000a04:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	60fa      	str	r2, [r7, #12]
 8000a0e:	f04f 0200 	mov.w	r2, #0
 8000a12:	f04f 0300 	mov.w	r3, #0
 8000a16:	68b9      	ldr	r1, [r7, #8]
 8000a18:	000b      	movs	r3, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f8d7 11d8 	ldr.w	r1, [r7, #472]	@ 0x1d8
 8000a20:	2000      	movs	r0, #0
 8000a22:	61b9      	str	r1, [r7, #24]
 8000a24:	61f8      	str	r0, [r7, #28]
 8000a26:	69b9      	ldr	r1, [r7, #24]
 8000a28:	ea42 0801 	orr.w	r8, r2, r1
 8000a2c:	69f9      	ldr	r1, [r7, #28]
 8000a2e:	ea43 0901 	orr.w	r9, r3, r1
 8000a32:	ea84 0308 	eor.w	r3, r4, r8
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	ea85 0309 	eor.w	r3, r5, r9
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000a42:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000a46:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	4413      	add	r3, r2
 8000a4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000a52:	e9c3 1200 	strd	r1, r2, [r3]
	      for (int i = 0; i < r / 64; i++) {
 8000a56:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000a60:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	da00      	bge.n	8000a6a <main+0x256>
 8000a68:	333f      	adds	r3, #63	@ 0x3f
 8000a6a:	119b      	asrs	r3, r3, #6
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000a72:	4293      	cmp	r3, r2
 8000a74:	db82      	blt.n	800097c <main+0x168>
	      }

	      // Print state before theta
	      printf("== Before Theta ==\n");
 8000a76:	4849      	ldr	r0, [pc, #292]	@ (8000b9c <main+0x388>)
 8000a78:	f00a fcb8 	bl	800b3ec <puts>
	      for (int i = 0; i < 25; i++) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8000a82:	e02d      	b.n	8000ae0 <main+0x2cc>
	          uint32_t lo = (uint32_t)(state[i] & 0xFFFFFFFF);
 8000a84:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000a88:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000a8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
 8000a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
	          uint32_t hi = (uint32_t)(state[i] >> 32);
 8000a9e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000aa2:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000aa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	4413      	add	r3, r2
 8000aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	f04f 0100 	mov.w	r1, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	          printf("State[%02d]: %08lX%08lX\n", i, hi, lo);
 8000ac4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000ac8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000acc:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 8000ad0:	4833      	ldr	r0, [pc, #204]	@ (8000ba0 <main+0x38c>)
 8000ad2:	f00a fc1b 	bl	800b30c <iprintf>
	      for (int i = 0; i < 25; i++) {
 8000ad6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ada:	3301      	adds	r3, #1
 8000adc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8000ae0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ae4:	2b18      	cmp	r3, #24
 8000ae6:	ddcd      	ble.n	8000a84 <main+0x270>
	      }

	      // Run just theta
	      theta(state);
 8000ae8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fd55 	bl	800059c <theta>

	      // Print state after theta
	      printf("== After Theta ==\n");
 8000af2:	482c      	ldr	r0, [pc, #176]	@ (8000ba4 <main+0x390>)
 8000af4:	f00a fc7a 	bl	800b3ec <puts>
	      for (int i = 0; i < 25; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000afe:	e02d      	b.n	8000b5c <main+0x348>
	          uint32_t lo = (uint32_t)(state[i] & 0xFFFFFFFF);
 8000b00:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000b04:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000b08:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4413      	add	r3, r2
 8000b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b14:	4613      	mov	r3, r2
 8000b16:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
	          uint32_t hi = (uint32_t)(state[i] >> 32);
 8000b1a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000b1e:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000b22:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	4413      	add	r3, r2
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f04f 0000 	mov.w	r0, #0
 8000b32:	f04f 0100 	mov.w	r1, #0
 8000b36:	0018      	movs	r0, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
	          printf("State[%02d]: %08lX%08lX\n", i, hi, lo);
 8000b40:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8000b44:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000b48:	f8d7 11c8 	ldr.w	r1, [r7, #456]	@ 0x1c8
 8000b4c:	4814      	ldr	r0, [pc, #80]	@ (8000ba0 <main+0x38c>)
 8000b4e:	f00a fbdd 	bl	800b30c <iprintf>
	      for (int i = 0; i < 25; i++) {
 8000b52:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000b56:	3301      	adds	r3, #1
 8000b58:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000b5c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000b60:	2b18      	cmp	r3, #24
 8000b62:	ddcd      	ble.n	8000b00 <main+0x2ec>

	     // Run reference SHA3-512
	     //sha3_512(ref_output, input, input_len);

	     // Run masked SHA3-512;
	     printf("BEFORE MASKED INPUT");
 8000b64:	4810      	ldr	r0, [pc, #64]	@ (8000ba8 <main+0x394>)
 8000b66:	f00a fbd1 	bl	800b30c <iprintf>
	     masked_sha3_512(masked_output, input, input_len);
 8000b6a:	f107 0120 	add.w	r1, r7, #32
 8000b6e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000b72:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fc46 	bl	8002408 <masked_sha3_512>

	     // Print both
	     printf("== Reference SHA3-512 ==\n");
 8000b7c:	480b      	ldr	r0, [pc, #44]	@ (8000bac <main+0x398>)
 8000b7e:	f00a fc35 	bl	800b3ec <puts>
	     for (int i = 0; i < 64; i++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000b88:	e02d      	b.n	8000be6 <main+0x3d2>
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	20000140 	.word	0x20000140
 8000b94:	20000038 	.word	0x20000038
 8000b98:	0800c24c 	.word	0x0800c24c
 8000b9c:	0800c188 	.word	0x0800c188
 8000ba0:	0800c19c 	.word	0x0800c19c
 8000ba4:	0800c1b8 	.word	0x0800c1b8
 8000ba8:	0800c1cc 	.word	0x0800c1cc
 8000bac:	0800c1e0 	.word	0x0800c1e0
	         printf("%02X", ref_output[i]);
 8000bb0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000bb4:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8000bb8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4829      	ldr	r0, [pc, #164]	@ (8000c68 <main+0x454>)
 8000bc4:	f00a fba2 	bl	800b30c <iprintf>
	         if ((i + 1) % 16 == 0) printf("\n");
 8000bc8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000bcc:	3301      	adds	r3, #1
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <main+0x3c8>
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f00a fbaa 	bl	800b330 <putchar>
	     for (int i = 0; i < 64; i++) {
 8000bdc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000be0:	3301      	adds	r3, #1
 8000be2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000be6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000bea:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bec:	dde0      	ble.n	8000bb0 <main+0x39c>
	     }

	     printf("== Masked SHA3-512 ==\n");
 8000bee:	481f      	ldr	r0, [pc, #124]	@ (8000c6c <main+0x458>)
 8000bf0:	f00a fbfc 	bl	800b3ec <puts>
	     for (int i = 0; i < 64; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000bfa:	e01a      	b.n	8000c32 <main+0x41e>
	         printf("%02X", masked_output[i]);
 8000bfc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000c00:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8000c04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4816      	ldr	r0, [pc, #88]	@ (8000c68 <main+0x454>)
 8000c10:	f00a fb7c 	bl	800b30c <iprintf>
	         if ((i + 1) % 16 == 0) printf("\n");
 8000c14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c18:	3301      	adds	r3, #1
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <main+0x414>
 8000c22:	200a      	movs	r0, #10
 8000c24:	f00a fb84 	bl	800b330 <putchar>
	     for (int i = 0; i < 64; i++) {
 8000c28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000c32:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c36:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c38:	dde0      	ble.n	8000bfc <main+0x3e8>
	     }

	     // Compare
	     if (memcmp(ref_output, masked_output, 64) == 0) {
 8000c3a:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8000c3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c42:	2240      	movs	r2, #64	@ 0x40
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00a fd65 	bl	800b714 <memcmp>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d103      	bne.n	8000c58 <main+0x444>
	         printf("✅ masked_sha3_512: PASS\n");
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <main+0x45c>)
 8000c52:	f00a fbcb 	bl	800b3ec <puts>
 8000c56:	e002      	b.n	8000c5e <main+0x44a>
	     } else {
	         printf("❌ masked_sha3_512: FAIL\n");
 8000c58:	4806      	ldr	r0, [pc, #24]	@ (8000c74 <main+0x460>)
 8000c5a:	f00a fbc7 	bl	800b3ec <puts>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c5e:	f009 fef1 	bl	800aa44 <MX_USB_HOST_Process>
 8000c62:	46b5      	mov	sp, r6
  {
 8000c64:	e608      	b.n	8000878 <main+0x64>
 8000c66:	bf00      	nop
 8000c68:	0800c180 	.word	0x0800c180
 8000c6c:	0800c1fc 	.word	0x0800c1fc
 8000c70:	0800c214 	.word	0x0800c214
 8000c74:	0800c230 	.word	0x0800c230

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	@ 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2230      	movs	r2, #48	@ 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00a fd54 	bl	800b734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <SystemClock_Config+0xcc>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	4a27      	ldr	r2, [pc, #156]	@ (8000d44 <SystemClock_Config+0xcc>)
 8000ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cac:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <SystemClock_Config+0xcc>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <SystemClock_Config+0xd0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a21      	ldr	r2, [pc, #132]	@ (8000d48 <SystemClock_Config+0xd0>)
 8000cc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <SystemClock_Config+0xd0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfa:	f107 0320 	add.w	r3, r7, #32
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f005 f99e 	bl	8006040 <HAL_RCC_OscConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d0a:	f000 f9ef 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0e:	230f      	movs	r3, #15
 8000d10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d12:	2302      	movs	r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2105      	movs	r1, #5
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 fbff 	bl	8006530 <HAL_RCC_ClockConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d38:	f000 f9d8 	bl	80010ec <Error_Handler>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3750      	adds	r7, #80	@ 0x50
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40007000 	.word	0x40007000

08000d4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d52:	4a13      	ldr	r2, [pc, #76]	@ (8000da0 <MX_I2C1_Init+0x54>)
 8000d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d58:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <MX_I2C1_Init+0x58>)
 8000d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d8a:	f004 fb75 	bl	8005478 <HAL_I2C_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d94:	f000 f9aa 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000a4 	.word	0x200000a4
 8000da0:	40005400 	.word	0x40005400
 8000da4:	000186a0 	.word	0x000186a0

08000da8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dae:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <MX_I2S3_Init+0x58>)
 8000db0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dcc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <MX_I2S3_Init+0x5c>)
 8000dd2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000de8:	f004 fc8a 	bl	8005700 <HAL_I2S_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000df2:	f000 f97b 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000f8 	.word	0x200000f8
 8000e00:	40003c00 	.word	0x40003c00
 8000e04:	00017700 	.word	0x00017700

08000e08 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_RNG_Init+0x20>)
 8000e0e:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <MX_RNG_Init+0x24>)
 8000e10:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_RNG_Init+0x20>)
 8000e14:	f005 feee 	bl	8006bf4 <HAL_RNG_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e1e:	f000 f965 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000140 	.word	0x20000140
 8000e2c:	50060800 	.word	0x50060800

08000e30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	@ (8000e98 <MX_SPI1_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e82:	f005 ff37 	bl	8006cf4 <HAL_SPI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f000 f92e 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000150 	.word	0x20000150
 8000e98:	40013000 	.word	0x40013000

08000e9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <MX_USART2_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f005 ff97 	bl	8006e06 <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f000 f905 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001a8 	.word	0x200001a8
 8000eec:	40004400 	.word	0x40004400

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	4b72      	ldr	r3, [pc, #456]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a71      	ldr	r2, [pc, #452]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b6f      	ldr	r3, [pc, #444]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	4b6b      	ldr	r3, [pc, #428]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a6a      	ldr	r2, [pc, #424]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b68      	ldr	r3, [pc, #416]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b64      	ldr	r3, [pc, #400]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a63      	ldr	r2, [pc, #396]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b61      	ldr	r3, [pc, #388]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a5c      	ldr	r2, [pc, #368]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b56      	ldr	r3, [pc, #344]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a55      	ldr	r2, [pc, #340]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b53      	ldr	r3, [pc, #332]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b4f      	ldr	r3, [pc, #316]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a4e      	ldr	r2, [pc, #312]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4849      	ldr	r0, [pc, #292]	@ (80010d8 <MX_GPIO_Init+0x1e8>)
 8000fb4:	f002 f912 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4847      	ldr	r0, [pc, #284]	@ (80010dc <MX_GPIO_Init+0x1ec>)
 8000fbe:	f002 f90d 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000fc8:	4845      	ldr	r0, [pc, #276]	@ (80010e0 <MX_GPIO_Init+0x1f0>)
 8000fca:	f002 f907 	bl	80031dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	483c      	ldr	r0, [pc, #240]	@ (80010d8 <MX_GPIO_Init+0x1e8>)
 8000fe6:	f001 ff5d 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4836      	ldr	r0, [pc, #216]	@ (80010dc <MX_GPIO_Init+0x1ec>)
 8001002:	f001 ff4f 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001006:	2308      	movs	r3, #8
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001016:	2305      	movs	r3, #5
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	482e      	ldr	r0, [pc, #184]	@ (80010dc <MX_GPIO_Init+0x1ec>)
 8001022:	f001 ff3f 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001026:	2301      	movs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800102a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	482a      	ldr	r0, [pc, #168]	@ (80010e4 <MX_GPIO_Init+0x1f4>)
 800103c:	f001 ff32 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001040:	2304      	movs	r3, #4
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4825      	ldr	r0, [pc, #148]	@ (80010e8 <MX_GPIO_Init+0x1f8>)
 8001054:	f001 ff26 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800106a:	2305      	movs	r3, #5
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	481c      	ldr	r0, [pc, #112]	@ (80010e8 <MX_GPIO_Init+0x1f8>)
 8001076:	f001 ff15 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800107a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800107e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4813      	ldr	r0, [pc, #76]	@ (80010e0 <MX_GPIO_Init+0x1f0>)
 8001094:	f001 ff06 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001098:	2320      	movs	r3, #32
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <MX_GPIO_Init+0x1f0>)
 80010ac:	f001 fefa 	bl	8002ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010b4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_GPIO_Init+0x1e8>)
 80010c6:	f001 feed 	bl	8002ea4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010ca:	bf00      	nop
 80010cc:	3730      	adds	r7, #48	@ 0x30
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <Error_Handler+0x8>

080010f8 <get_random64>:
#include "debug_log.h"// for HAL_RNG
  // or your specific STM32 HAL header

extern RNG_HandleTypeDef hrng;

uint64_t get_random64(void) {
 80010f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    HAL_RNG_GenerateRandomNumber(&hrng, &r1);
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4810      	ldr	r0, [pc, #64]	@ (8001148 <get_random64+0x50>)
 8001106:	f005 fd9f 	bl	8006c48 <HAL_RNG_GenerateRandomNumber>
    HAL_RNG_GenerateRandomNumber(&hrng, &r2);
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	480e      	ldr	r0, [pc, #56]	@ (8001148 <get_random64+0x50>)
 8001110:	f005 fd9a 	bl	8006c48 <HAL_RNG_GenerateRandomNumber>
    return ((uint64_t)r1 << 32) | r2;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	469a      	mov	sl, r3
 800111a:	4693      	mov	fp, r2
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	4653      	mov	r3, sl
 8001126:	2200      	movs	r2, #0
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	2000      	movs	r0, #0
 800112c:	460c      	mov	r4, r1
 800112e:	4605      	mov	r5, r0
 8001130:	ea42 0804 	orr.w	r8, r2, r4
 8001134:	ea43 0905 	orr.w	r9, r3, r5
 8001138:	4642      	mov	r2, r8
 800113a:	464b      	mov	r3, r9
}
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001148:	20000140 	.word	0x20000140

0800114c <masked_theta>:

// === THETA ===
void masked_theta(masked_uint64_t state[5][5]) {
 800114c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001150:	b0e8      	sub	sp, #416	@ 0x1a0
 8001152:	af00      	add	r7, sp, #0
 8001154:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001158:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800115c:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5], D[5];

    // Compute C[x] = A[x,0] ^ A[x,1] ^ ... ^ A[x,4]
    for (int x = 0; x < 5; x++) {
 800115e:	2300      	movs	r3, #0
 8001160:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001164:	e04d      	b.n	8001202 <masked_theta+0xb6>
        C[x] = state[x][0];
 8001166:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	461a      	mov	r2, r3
 8001174:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001178:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	441a      	add	r2, r3
 8001180:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001184:	015b      	lsls	r3, r3, #5
 8001186:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800118a:	443b      	add	r3, r7
 800118c:	3bb8      	subs	r3, #184	@ 0xb8
 800118e:	461c      	mov	r4, r3
 8001190:	4615      	mov	r5, r2
 8001192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001196:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800119a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 800119e:	2301      	movs	r3, #1
 80011a0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80011a4:	e024      	b.n	80011f0 <masked_theta+0xa4>
            masked_xor(&C[x], &C[x], &state[x][y]);
 80011a6:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 80011aa:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	18d0      	adds	r0, r2, r3
 80011b2:	f107 02e8 	add.w	r2, r7, #232	@ 0xe8
 80011b6:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80011ba:	015b      	lsls	r3, r3, #5
 80011bc:	18d1      	adds	r1, r2, r3
 80011be:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	015b      	lsls	r3, r3, #5
 80011ca:	461a      	mov	r2, r3
 80011cc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80011d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	441a      	add	r2, r3
 80011d8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80011dc:	015b      	lsls	r3, r3, #5
 80011de:	4413      	add	r3, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	f000 feb6 	bl	8001f52 <masked_xor>
        for (int y = 1; y < 5; y++) {
 80011e6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80011ea:	3301      	adds	r3, #1
 80011ec:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80011f0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	ddd6      	ble.n	80011a6 <masked_theta+0x5a>
    for (int x = 0; x < 5; x++) {
 80011f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001202:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001206:	2b04      	cmp	r3, #4
 8001208:	ddad      	ble.n	8001166 <masked_theta+0x1a>
        }
    }

    // Compute D[x] = C[x-1] XOR ROT(C[x+1], 1)
    for (int x = 0; x < 5; x++) {
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001210:	e06b      	b.n	80012ea <masked_theta+0x19e>
        masked_uint64_t rot = {0};
 8001212:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001216:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800121a:	4618      	mov	r0, r3
 800121c:	2320      	movs	r3, #32
 800121e:	461a      	mov	r2, r3
 8001220:	2100      	movs	r1, #0
 8001222:	f00a fa87 	bl	800b734 <memset>
        masked_uint64_t rotated = {0};
 8001226:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800122a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800122e:	4618      	mov	r0, r3
 8001230:	2320      	movs	r3, #32
 8001232:	461a      	mov	r2, r3
 8001234:	2100      	movs	r1, #0
 8001236:	f00a fa7d 	bl	800b734 <memset>

        for (int i = 0; i < MASKING_N; i++) {
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8001240:	e02e      	b.n	80012a0 <masked_theta+0x154>
            rot.share[i] = (C[(x + 1) % 5].share[i] << 1) |
 8001242:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001246:	1c59      	adds	r1, r3, #1
 8001248:	4b50      	ldr	r3, [pc, #320]	@ (800138c <masked_theta+0x240>)
 800124a:	fb83 2301 	smull	r2, r3, r3, r1
 800124e:	105a      	asrs	r2, r3, #1
 8001250:	17cb      	asrs	r3, r1, #31
 8001252:	1ad2      	subs	r2, r2, r3
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	1aca      	subs	r2, r1, r3
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001262:	4413      	add	r3, r2
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 800126a:	443b      	add	r3, r7
 800126c:	3bb8      	subs	r3, #184	@ 0xb8
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	0fd0      	lsrs	r0, r2, #31
 8001274:	0059      	lsls	r1, r3, #1
 8001276:	ea40 0901 	orr.w	r9, r0, r1
 800127a:	0fd9      	lsrs	r1, r3, #31
 800127c:	0053      	lsls	r3, r2, #1
 800127e:	ea41 0803 	orr.w	r8, r1, r3
 8001282:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001286:	f5a3 72cc 	sub.w	r2, r3, #408	@ 0x198
 800128a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	e9c3 8900 	strd	r8, r9, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 8001296:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800129a:	3301      	adds	r3, #1
 800129c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80012a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	ddcc      	ble.n	8001242 <masked_theta+0xf6>
                           (C[(x + 1) % 5].share[i] >> (64 - 1));
        }

        masked_xor(&D[x], &C[(x + 4) % 5], &rot);
 80012a8:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80012ac:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012b0:	015b      	lsls	r3, r3, #5
 80012b2:	18d0      	adds	r0, r2, r3
 80012b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012b8:	1d19      	adds	r1, r3, #4
 80012ba:	4b34      	ldr	r3, [pc, #208]	@ (800138c <masked_theta+0x240>)
 80012bc:	fb83 2301 	smull	r2, r3, r3, r1
 80012c0:	105a      	asrs	r2, r3, #1
 80012c2:	17cb      	asrs	r3, r1, #31
 80012c4:	1ad2      	subs	r2, r2, r3
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	1aca      	subs	r2, r1, r3
 80012ce:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 80012d2:	0153      	lsls	r3, r2, #5
 80012d4:	440b      	add	r3, r1
 80012d6:	f107 0208 	add.w	r2, r7, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	f000 fe39 	bl	8001f52 <masked_xor>
    for (int x = 0; x < 5; x++) {
 80012e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012e4:	3301      	adds	r3, #1
 80012e6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80012ea:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	dd8f      	ble.n	8001212 <masked_theta+0xc6>
    }


    // Apply D[x] to each state[x][y]
    for (int x = 0; x < 5; x++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80012f8:	e03c      	b.n	8001374 <masked_theta+0x228>
        for (int y = 0; y < 5; y++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001300:	e02f      	b.n	8001362 <masked_theta+0x216>
            masked_xor(&state[x][y], &state[x][y], &D[x]);
 8001302:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	015b      	lsls	r3, r3, #5
 800130e:	461a      	mov	r2, r3
 8001310:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001314:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	441a      	add	r2, r3
 800131c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001320:	015b      	lsls	r3, r3, #5
 8001322:	18d0      	adds	r0, r2, r3
 8001324:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8001328:	4613      	mov	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	4413      	add	r3, r2
 800132e:	015b      	lsls	r3, r3, #5
 8001330:	461a      	mov	r2, r3
 8001332:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001336:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	441a      	add	r2, r3
 800133e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	18d1      	adds	r1, r2, r3
 8001346:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800134a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800134e:	015b      	lsls	r3, r3, #5
 8001350:	4413      	add	r3, r2
 8001352:	461a      	mov	r2, r3
 8001354:	f000 fdfd 	bl	8001f52 <masked_xor>
        for (int y = 0; y < 5; y++) {
 8001358:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800135c:	3301      	adds	r3, #1
 800135e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001362:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001366:	2b04      	cmp	r3, #4
 8001368:	ddcb      	ble.n	8001302 <masked_theta+0x1b6>
    for (int x = 0; x < 5; x++) {
 800136a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8001374:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001378:	2b04      	cmp	r3, #4
 800137a:	ddbe      	ble.n	80012fa <masked_theta+0x1ae>
        }
    }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	f507 77d0 	add.w	r7, r7, #416	@ 0x1a0
 8001384:	46bd      	mov	sp, r7
 8001386:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800138a:	bf00      	nop
 800138c:	66666667 	.word	0x66666667

08001390 <masked_rho>:
    {190,   6, 153,  15, 253 },
    { 28,  55, 276,  91, 136 },
    { 91, 276, 231, 120,  78 }
};

void masked_rho(masked_uint64_t state[5][5]) {
 8001390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001394:	b088      	sub	sp, #32
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
    for (int x = 0; x < 5; x++) {
 800139a:	2100      	movs	r1, #0
 800139c:	61f9      	str	r1, [r7, #28]
 800139e:	e06d      	b.n	800147c <masked_rho+0xec>
        for (int y = 0; y < 5; y++) {
 80013a0:	2100      	movs	r1, #0
 80013a2:	61b9      	str	r1, [r7, #24]
 80013a4:	e064      	b.n	8001470 <masked_rho+0xe0>
            uint8_t r = keccak_rho_offsets[x][y];
 80013a6:	4e3a      	ldr	r6, [pc, #232]	@ (8001490 <masked_rho+0x100>)
 80013a8:	69f8      	ldr	r0, [r7, #28]
 80013aa:	4601      	mov	r1, r0
 80013ac:	0089      	lsls	r1, r1, #2
 80013ae:	4401      	add	r1, r0
 80013b0:	1870      	adds	r0, r6, r1
 80013b2:	69b9      	ldr	r1, [r7, #24]
 80013b4:	4401      	add	r1, r0
 80013b6:	7809      	ldrb	r1, [r1, #0]
 80013b8:	74f9      	strb	r1, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 80013ba:	2100      	movs	r1, #0
 80013bc:	6179      	str	r1, [r7, #20]
 80013be:	e051      	b.n	8001464 <masked_rho+0xd4>
                uint64_t value = state[x][y].share[i];
 80013c0:	69f8      	ldr	r0, [r7, #28]
 80013c2:	4601      	mov	r1, r0
 80013c4:	0089      	lsls	r1, r1, #2
 80013c6:	4401      	add	r1, r0
 80013c8:	0149      	lsls	r1, r1, #5
 80013ca:	4608      	mov	r0, r1
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4408      	add	r0, r1
 80013d0:	69b9      	ldr	r1, [r7, #24]
 80013d2:	008e      	lsls	r6, r1, #2
 80013d4:	6979      	ldr	r1, [r7, #20]
 80013d6:	4431      	add	r1, r6
 80013d8:	00c9      	lsls	r1, r1, #3
 80013da:	4401      	add	r1, r0
 80013dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
                state[x][y].share[i] = (value << r) | (value >> (64 - r));
 80013e4:	7cfe      	ldrb	r6, [r7, #19]
 80013e6:	69f8      	ldr	r0, [r7, #28]
 80013e8:	4601      	mov	r1, r0
 80013ea:	0089      	lsls	r1, r1, #2
 80013ec:	4401      	add	r1, r0
 80013ee:	0149      	lsls	r1, r1, #5
 80013f0:	4608      	mov	r0, r1
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	eb01 0a00 	add.w	sl, r1, r0
 80013f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80013fc:	f1a6 0e20 	sub.w	lr, r6, #32
 8001400:	f1c6 0c20 	rsb	ip, r6, #32
 8001404:	fa01 f506 	lsl.w	r5, r1, r6
 8001408:	fa00 fe0e 	lsl.w	lr, r0, lr
 800140c:	ea45 050e 	orr.w	r5, r5, lr
 8001410:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001414:	ea45 050c 	orr.w	r5, r5, ip
 8001418:	fa00 f406 	lsl.w	r4, r0, r6
 800141c:	4276      	negs	r6, r6
 800141e:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8001422:	f1c6 0e20 	rsb	lr, r6, #32
 8001426:	f1a6 0c20 	sub.w	ip, r6, #32
 800142a:	fa20 f206 	lsr.w	r2, r0, r6
 800142e:	fa01 fe0e 	lsl.w	lr, r1, lr
 8001432:	ea42 020e 	orr.w	r2, r2, lr
 8001436:	fa21 fc0c 	lsr.w	ip, r1, ip
 800143a:	ea42 020c 	orr.w	r2, r2, ip
 800143e:	fa21 f306 	lsr.w	r3, r1, r6
 8001442:	ea44 0802 	orr.w	r8, r4, r2
 8001446:	ea45 0903 	orr.w	r9, r5, r3
 800144a:	4642      	mov	r2, r8
 800144c:	464b      	mov	r3, r9
 800144e:	69b9      	ldr	r1, [r7, #24]
 8001450:	0088      	lsls	r0, r1, #2
 8001452:	6979      	ldr	r1, [r7, #20]
 8001454:	4401      	add	r1, r0
 8001456:	00c9      	lsls	r1, r1, #3
 8001458:	4451      	add	r1, sl
 800145a:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 800145e:	6979      	ldr	r1, [r7, #20]
 8001460:	3101      	adds	r1, #1
 8001462:	6179      	str	r1, [r7, #20]
 8001464:	6979      	ldr	r1, [r7, #20]
 8001466:	2903      	cmp	r1, #3
 8001468:	ddaa      	ble.n	80013c0 <masked_rho+0x30>
        for (int y = 0; y < 5; y++) {
 800146a:	69b9      	ldr	r1, [r7, #24]
 800146c:	3101      	adds	r1, #1
 800146e:	61b9      	str	r1, [r7, #24]
 8001470:	69b9      	ldr	r1, [r7, #24]
 8001472:	2904      	cmp	r1, #4
 8001474:	dd97      	ble.n	80013a6 <masked_rho+0x16>
    for (int x = 0; x < 5; x++) {
 8001476:	69f9      	ldr	r1, [r7, #28]
 8001478:	3101      	adds	r1, #1
 800147a:	61f9      	str	r1, [r7, #28]
 800147c:	69f9      	ldr	r1, [r7, #28]
 800147e:	2904      	cmp	r1, #4
 8001480:	dd8e      	ble.n	80013a0 <masked_rho+0x10>
            }
        }
    }
}
 8001482:	bf00      	nop
 8001484:	bf00      	nop
 8001486:	3720      	adds	r7, #32
 8001488:	46bd      	mov	sp, r7
 800148a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800148e:	bf00      	nop
 8001490:	0800c3fc 	.word	0x0800c3fc

08001494 <masked_pi>:

// === PI ===
void masked_pi(masked_uint64_t state[5][5]) {
 8001494:	b4b0      	push	{r4, r5, r7}
 8001496:	f5ad 7d4f 	sub.w	sp, sp, #828	@ 0x33c
 800149a:	af00      	add	r7, sp, #0
 800149c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80014a0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80014a4:	6018      	str	r0, [r3, #0]
    masked_uint64_t temp[5][5];

    for (int x = 0; x < 5; x++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80014ac:	e038      	b.n	8001520 <masked_pi+0x8c>
        for (int y = 0; y < 5; y++) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80014b4:	e02b      	b.n	800150e <masked_pi+0x7a>
            temp[x][y] = state[x][y];
 80014b6:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	015b      	lsls	r3, r3, #5
 80014c2:	461a      	mov	r2, r3
 80014c4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80014c8:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	1899      	adds	r1, r3, r2
 80014d0:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80014d4:	f5a3 704c 	sub.w	r0, r3, #816	@ 0x330
 80014d8:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 80014e6:	4413      	add	r3, r2
 80014e8:	015b      	lsls	r3, r3, #5
 80014ea:	18c2      	adds	r2, r0, r3
 80014ec:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80014f0:	015b      	lsls	r3, r3, #5
 80014f2:	440b      	add	r3, r1
 80014f4:	4614      	mov	r4, r2
 80014f6:	461d      	mov	r5, r3
 80014f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001500:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; y++) {
 8001504:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001508:	3301      	adds	r3, #1
 800150a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 800150e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001512:	2b04      	cmp	r3, #4
 8001514:	ddcf      	ble.n	80014b6 <masked_pi+0x22>
    for (int x = 0; x < 5; x++) {
 8001516:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800151a:	3301      	adds	r3, #1
 800151c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001520:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001524:	2b04      	cmp	r3, #4
 8001526:	ddc2      	ble.n	80014ae <masked_pi+0x1a>
        }
    }

    for (int x = 0; x < 5; x++) {
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 800152e:	e049      	b.n	80015c4 <masked_pi+0x130>
        for (int y = 0; y < 5; y++) {
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 8001536:	e03c      	b.n	80015b2 <masked_pi+0x11e>
            state[y][(2 * x + 3 * y) % 5] = temp[x][y];
 8001538:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	015b      	lsls	r3, r3, #5
 8001544:	461a      	mov	r2, r3
 8001546:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800154a:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	1898      	adds	r0, r3, r2
 8001552:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 8001556:	0059      	lsls	r1, r3, #1
 8001558:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	4419      	add	r1, r3
 8001564:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <masked_pi+0x148>)
 8001566:	fb83 2301 	smull	r2, r3, r3, r1
 800156a:	105a      	asrs	r2, r3, #1
 800156c:	17cb      	asrs	r3, r1, #31
 800156e:	1ad2      	subs	r2, r2, r3
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	1aca      	subs	r2, r1, r3
 8001578:	0153      	lsls	r3, r2, #5
 800157a:	4418      	add	r0, r3
 800157c:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001580:	f5a3 714c 	sub.w	r1, r3, #816	@ 0x330
 8001584:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8001592:	4413      	add	r3, r2
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	440b      	add	r3, r1
 8001598:	4604      	mov	r4, r0
 800159a:	461d      	mov	r5, r3
 800159c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; y++) {
 80015a8:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80015ac:	3301      	adds	r3, #1
 80015ae:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80015b2:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	ddbe      	ble.n	8001538 <masked_pi+0xa4>
    for (int x = 0; x < 5; x++) {
 80015ba:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80015be:	3301      	adds	r3, #1
 80015c0:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 80015c4:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80015c8:	2b04      	cmp	r3, #4
 80015ca:	ddb1      	ble.n	8001530 <masked_pi+0x9c>
        }
    }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	f507 774f 	add.w	r7, r7, #828	@ 0x33c
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bcb0      	pop	{r4, r5, r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	66666667 	.word	0x66666667

080015e0 <masked_chi>:

// === CHI ===
void masked_chi(masked_uint64_t state[5][5],
                uint64_t r[5][5][MASKING_N][MASKING_N]) {
 80015e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015e4:	b0be      	sub	sp, #248	@ 0xf8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
    masked_uint64_t temp[5];

    for (int y = 0; y < 5; y++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80015f2:	e0a7      	b.n	8001744 <masked_chi+0x164>
        for (int x = 0; x < 5; x++) {
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80015fa:	e020      	b.n	800163e <masked_chi+0x5e>
            temp[x] = state[x][y];
 80015fc:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8001600:	4613      	mov	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4413      	add	r3, r2
 8001606:	015b      	lsls	r3, r3, #5
 8001608:	461a      	mov	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	441a      	add	r2, r3
 800160e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001612:	015b      	lsls	r3, r3, #5
 8001614:	33f8      	adds	r3, #248	@ 0xf8
 8001616:	443b      	add	r3, r7
 8001618:	f1a3 01b0 	sub.w	r1, r3, #176	@ 0xb0
 800161c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001620:	015b      	lsls	r3, r3, #5
 8001622:	4413      	add	r3, r2
 8001624:	460c      	mov	r4, r1
 8001626:	461d      	mov	r5, r3
 8001628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int x = 0; x < 5; x++) {
 8001634:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001638:	3301      	adds	r3, #1
 800163a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800163e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001642:	2b04      	cmp	r3, #4
 8001644:	ddda      	ble.n	80015fc <masked_chi+0x1c>
        }

        for (int x = 0; x < 5; x++) {
 8001646:	2300      	movs	r3, #0
 8001648:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800164c:	e071      	b.n	8001732 <masked_chi+0x152>
            masked_uint64_t notA1;
            for (int i = 0; i < MASKING_N; i++) {
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001654:	e027      	b.n	80016a6 <masked_chi+0xc6>
                notA1.share[i] = ~temp[(x + 1) % 5].share[i];
 8001656:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800165a:	1c59      	adds	r1, r3, #1
 800165c:	4b3f      	ldr	r3, [pc, #252]	@ (800175c <masked_chi+0x17c>)
 800165e:	fb83 2301 	smull	r2, r3, r3, r1
 8001662:	105a      	asrs	r2, r3, #1
 8001664:	17cb      	asrs	r3, r1, #31
 8001666:	1ad2      	subs	r2, r2, r3
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	1aca      	subs	r2, r1, r3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	33f8      	adds	r3, #248	@ 0xf8
 800167c:	443b      	add	r3, r7
 800167e:	3bb0      	subs	r3, #176	@ 0xb0
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	ea6f 0802 	mvn.w	r8, r2
 8001688:	ea6f 0903 	mvn.w	r9, r3
 800168c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	33f8      	adds	r3, #248	@ 0xf8
 8001694:	443b      	add	r3, r7
 8001696:	3bf0      	subs	r3, #240	@ 0xf0
 8001698:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 800169c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80016a0:	3301      	adds	r3, #1
 80016a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80016a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	ddd3      	ble.n	8001656 <masked_chi+0x76>
            }

            masked_uint64_t and_result;
            masked_and(&and_result,
                       &notA1,
                       &temp[(x + 2) % 5],
 80016ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80016b2:	1c99      	adds	r1, r3, #2
 80016b4:	4b29      	ldr	r3, [pc, #164]	@ (800175c <masked_chi+0x17c>)
 80016b6:	fb83 2301 	smull	r2, r3, r3, r1
 80016ba:	105a      	asrs	r2, r3, #1
 80016bc:	17cb      	asrs	r3, r1, #31
 80016be:	1ad2      	subs	r2, r2, r3
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	1aca      	subs	r2, r1, r3
 80016c8:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80016cc:	0153      	lsls	r3, r2, #5
 80016ce:	18cc      	adds	r4, r1, r3
                       r[x][y]);
 80016d0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80016d4:	4613      	mov	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	01db      	lsls	r3, r3, #7
 80016dc:	461a      	mov	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	441a      	add	r2, r3
 80016e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016e6:	01db      	lsls	r3, r3, #7
 80016e8:	4413      	add	r3, r2
            masked_and(&and_result,
 80016ea:	f107 0108 	add.w	r1, r7, #8
 80016ee:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80016f2:	4622      	mov	r2, r4
 80016f4:	f000 fc58 	bl	8001fa8 <masked_and>

            masked_xor(&state[x][y], &temp[x], &and_result);
 80016f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	015b      	lsls	r3, r3, #5
 8001704:	461a      	mov	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	441a      	add	r2, r3
 800170a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	18d0      	adds	r0, r2, r3
 8001712:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001716:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	4413      	add	r3, r2
 800171e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001722:	4619      	mov	r1, r3
 8001724:	f000 fc15 	bl	8001f52 <masked_xor>
        for (int x = 0; x < 5; x++) {
 8001728:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800172c:	3301      	adds	r3, #1
 800172e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001732:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001736:	2b04      	cmp	r3, #4
 8001738:	dd89      	ble.n	800164e <masked_chi+0x6e>
    for (int y = 0; y < 5; y++) {
 800173a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800173e:	3301      	adds	r3, #1
 8001740:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001748:	2b04      	cmp	r3, #4
 800174a:	f77f af53 	ble.w	80015f4 <masked_chi+0x14>
        }
    }
}
 800174e:	bf00      	nop
 8001750:	bf00      	nop
 8001752:	37f8      	adds	r7, #248	@ 0xf8
 8001754:	46bd      	mov	sp, r7
 8001756:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800175a:	bf00      	nop
 800175c:	66666667 	.word	0x66666667

08001760 <masked_iota>:

void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 8001760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001764:	b08e      	sub	sp, #56	@ 0x38
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	e9c7 2300 	strd	r2, r3, [r7]
    // Split rc into shares that XOR to rc
    uint64_t r[MASKING_N];
    r[0] = rc;
 800176e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001772:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 1; i < MASKING_N; i++) {
 8001776:	2301      	movs	r3, #1
 8001778:	637b      	str	r3, [r7, #52]	@ 0x34
 800177a:	e01c      	b.n	80017b6 <masked_iota+0x56>
        r[i] = get_random64();       // Get a fresh random share
 800177c:	f7ff fcbc 	bl	80010f8 <get_random64>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001786:	00c9      	lsls	r1, r1, #3
 8001788:	3138      	adds	r1, #56	@ 0x38
 800178a:	4439      	add	r1, r7
 800178c:	3928      	subs	r1, #40	@ 0x28
 800178e:	e9c1 2300 	strd	r2, r3, [r1]
        r[0] ^= r[i];                // Ensure all shares XOR to original rc
 8001792:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	3338      	adds	r3, #56	@ 0x38
 800179c:	443b      	add	r3, r7
 800179e:	3b28      	subs	r3, #40	@ 0x28
 80017a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a4:	ea80 0802 	eor.w	r8, r0, r2
 80017a8:	ea81 0903 	eor.w	r9, r1, r3
 80017ac:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (int i = 1; i < MASKING_N; i++) {
 80017b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b2:	3301      	adds	r3, #1
 80017b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80017b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b8:	2b03      	cmp	r3, #3
 80017ba:	dddf      	ble.n	800177c <masked_iota+0x1c>
    }

    for (int i = 0; i < MASKING_N; i++) {
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	@ 0x30
 80017c0:	e019      	b.n	80017f6 <masked_iota+0x96>
        state[0][0].share[i] ^= r[i];
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	3338      	adds	r3, #56	@ 0x38
 80017d4:	443b      	add	r3, r7
 80017d6:	3b28      	subs	r3, #40	@ 0x28
 80017d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017dc:	ea80 0402 	eor.w	r4, r0, r2
 80017e0:	ea81 0503 	eor.w	r5, r1, r3
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	4413      	add	r3, r2
 80017ec:	e9c3 4500 	strd	r4, r5, [r3]
    for (int i = 0; i < MASKING_N; i++) {
 80017f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f2:	3301      	adds	r3, #1
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80017f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	dde2      	ble.n	80017c2 <masked_iota+0x62>
    }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3738      	adds	r7, #56	@ 0x38
 8001802:	46bd      	mov	sp, r7
 8001804:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001808 <print_recombined_state>:
// Helper function (add this)
void print_recombined_state(masked_uint64_t state[5][5], const char *label) {
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af02      	add	r7, sp, #8
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
    printf("== %s (Recombined) ==\n", label);
 8001812:	6839      	ldr	r1, [r7, #0]
 8001814:	482a      	ldr	r0, [pc, #168]	@ (80018c0 <print_recombined_state+0xb8>)
 8001816:	f009 fd79 	bl	800b30c <iprintf>
    for (int x = 0; x < 5; x++) {
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
 800181e:	e046      	b.n	80018ae <print_recombined_state+0xa6>
        for (int y = 0; y < 5; y++) {
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	e03d      	b.n	80018a2 <print_recombined_state+0x9a>
            uint64_t val = 0;
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (int i = 0; i < MASKING_N; i++) {
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e01a      	b.n	800186e <print_recombined_state+0x66>
                val ^= state[x][y].share[i];
 8001838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	015b      	lsls	r3, r3, #5
 8001842:	461a      	mov	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	441a      	add	r2, r3
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	0099      	lsls	r1, r3, #2
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	440b      	add	r3, r1
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4413      	add	r3, r2
 8001854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001858:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800185c:	ea80 0402 	eor.w	r4, r0, r2
 8001860:	ea81 0503 	eor.w	r5, r1, r3
 8001864:	e9c7 4506 	strd	r4, r5, [r7, #24]
            for (int i = 0; i < MASKING_N; i++) {
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3301      	adds	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b03      	cmp	r3, #3
 8001872:	dde1      	ble.n	8001838 <print_recombined_state+0x30>
            }
            uint32_t hi = (uint32_t)(val >> 32);
 8001874:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	000a      	movs	r2, r1
 8001882:	2300      	movs	r3, #0
 8001884:	4613      	mov	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
            uint32_t lo = (uint32_t)(val & 0xFFFFFFFF);
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	60fb      	str	r3, [r7, #12]
            printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	6a3a      	ldr	r2, [r7, #32]
 8001894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001896:	480b      	ldr	r0, [pc, #44]	@ (80018c4 <print_recombined_state+0xbc>)
 8001898:	f009 fd38 	bl	800b30c <iprintf>
        for (int y = 0; y < 5; y++) {
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	3301      	adds	r3, #1
 80018a0:	623b      	str	r3, [r7, #32]
 80018a2:	6a3b      	ldr	r3, [r7, #32]
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	ddbe      	ble.n	8001826 <print_recombined_state+0x1e>
    for (int x = 0; x < 5; x++) {
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	3301      	adds	r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	2b04      	cmp	r3, #4
 80018b2:	ddb5      	ble.n	8001820 <print_recombined_state+0x18>
        }
    }
}
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	@ 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bdb0      	pop	{r4, r5, r7, pc}
 80018be:	bf00      	nop
 80018c0:	0800c26c 	.word	0x0800c26c
 80018c4:	0800c284 	.word	0x0800c284

080018c8 <masked_keccak_round>:


void masked_keccak_round(masked_uint64_t state[5][5], uint64_t rc) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	f6ad 4d98 	subw	sp, sp, #3224	@ 0xc98
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	f607 4198 	addw	r1, r7, #3224	@ 0xc98
 80018d4:	f6a1 418c 	subw	r1, r1, #3212	@ 0xc8c
 80018d8:	6008      	str	r0, [r1, #0]
 80018da:	f107 0108 	add.w	r1, r7, #8
 80018de:	e941 2302 	strd	r2, r3, [r1, #-8]
    // Allocate fresh randomness for Chi step
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];

    // Fill randomness for each (x, y) lane
    for (int x = 0; x < 5; x++) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 3c94 	str.w	r3, [r7, #3220]	@ 0xc94
 80018e8:	e020      	b.n	800192c <masked_keccak_round+0x64>
        for (int y = 0; y < 5; y++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	f8c7 3c90 	str.w	r3, [r7, #3216]	@ 0xc90
 80018f0:	e013      	b.n	800191a <masked_keccak_round+0x52>
            fill_random_matrix(r_chi[x][y]);
 80018f2:	f107 0110 	add.w	r1, r7, #16
 80018f6:	f8d7 2c94 	ldr.w	r2, [r7, #3220]	@ 0xc94
 80018fa:	4613      	mov	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4413      	add	r3, r2
 8001900:	f8d7 2c90 	ldr.w	r2, [r7, #3216]	@ 0xc90
 8001904:	4413      	add	r3, r2
 8001906:	01db      	lsls	r3, r3, #7
 8001908:	440b      	add	r3, r1
 800190a:	4618      	mov	r0, r3
 800190c:	f000 fada 	bl	8001ec4 <fill_random_matrix>
        for (int y = 0; y < 5; y++) {
 8001910:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	@ 0xc90
 8001914:	3301      	adds	r3, #1
 8001916:	f8c7 3c90 	str.w	r3, [r7, #3216]	@ 0xc90
 800191a:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	@ 0xc90
 800191e:	2b04      	cmp	r3, #4
 8001920:	dde7      	ble.n	80018f2 <masked_keccak_round+0x2a>
    for (int x = 0; x < 5; x++) {
 8001922:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	@ 0xc94
 8001926:	3301      	adds	r3, #1
 8001928:	f8c7 3c94 	str.w	r3, [r7, #3220]	@ 0xc94
 800192c:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	@ 0xc94
 8001930:	2b04      	cmp	r3, #4
 8001932:	ddda      	ble.n	80018ea <masked_keccak_round+0x22>
        }
    }

    // Apply the five Keccak round steps
    print_recombined_state(state, "Before Theta");
 8001934:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001938:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 800193c:	492d      	ldr	r1, [pc, #180]	@ (80019f4 <masked_keccak_round+0x12c>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	f7ff ff62 	bl	8001808 <print_recombined_state>
    masked_theta(state);
 8001944:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001948:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f7ff fbfd 	bl	800114c <masked_theta>

    print_recombined_state(state, "After Theta");
 8001952:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001956:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 800195a:	4927      	ldr	r1, [pc, #156]	@ (80019f8 <masked_keccak_round+0x130>)
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	f7ff ff53 	bl	8001808 <print_recombined_state>
    masked_rho(state);
 8001962:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001966:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 800196a:	6818      	ldr	r0, [r3, #0]
 800196c:	f7ff fd10 	bl	8001390 <masked_rho>

    print_recombined_state(state, "After Rho");
 8001970:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001974:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001978:	4920      	ldr	r1, [pc, #128]	@ (80019fc <masked_keccak_round+0x134>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f7ff ff44 	bl	8001808 <print_recombined_state>
    masked_pi(state);
 8001980:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001984:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f7ff fd83 	bl	8001494 <masked_pi>

    print_recombined_state(state, "After Pi");
 800198e:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001992:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001996:	491a      	ldr	r1, [pc, #104]	@ (8001a00 <masked_keccak_round+0x138>)
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	f7ff ff35 	bl	8001808 <print_recombined_state>
    masked_chi(state, r_chi);
 800199e:	f107 0210 	add.w	r2, r7, #16
 80019a2:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 80019a6:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 80019aa:	4611      	mov	r1, r2
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	f7ff fe17 	bl	80015e0 <masked_chi>

    print_recombined_state(state, "After Chi");
 80019b2:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 80019b6:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 80019ba:	4912      	ldr	r1, [pc, #72]	@ (8001a04 <masked_keccak_round+0x13c>)
 80019bc:	6818      	ldr	r0, [r3, #0]
 80019be:	f7ff ff23 	bl	8001808 <print_recombined_state>
    masked_iota(state, rc);
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	461a      	mov	r2, r3
 80019c8:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 80019cc:	f6a3 418c 	subw	r1, r3, #3212	@ 0xc8c
 80019d0:	e952 2302 	ldrd	r2, r3, [r2, #-8]
 80019d4:	6808      	ldr	r0, [r1, #0]
 80019d6:	f7ff fec3 	bl	8001760 <masked_iota>

    print_recombined_state(state, "After Iota");
 80019da:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 80019de:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 80019e2:	4909      	ldr	r1, [pc, #36]	@ (8001a08 <masked_keccak_round+0x140>)
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f7ff ff0f 	bl	8001808 <print_recombined_state>

}
 80019ea:	bf00      	nop
 80019ec:	f607 4798 	addw	r7, r7, #3224	@ 0xc98
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	0800c2a0 	.word	0x0800c2a0
 80019f8:	0800c2b0 	.word	0x0800c2b0
 80019fc:	0800c2bc 	.word	0x0800c2bc
 8001a00:	0800c2c8 	.word	0x0800c2c8
 8001a04:	0800c2d4 	.word	0x0800c2d4
 8001a08:	0800c2e0 	.word	0x0800c2e0

08001a0c <masked_value_set>:



extern RNG_HandleTypeDef hrng;

void masked_value_set(masked_uint64_t *out, uint64_t value) {
 8001a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a10:	b08c      	sub	sp, #48	@ 0x30
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6178      	str	r0, [r7, #20]
 8001a16:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint64_t acc = value;
 8001a1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a1e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28


    for (int i = 0; i < MASKING_N - 1; i++) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a26:	e03f      	b.n	8001aa8 <masked_value_set+0x9c>
        uint32_t lo = 0, hi = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
        	HAL_StatusTypeDef status1 = HAL_RNG_GenerateRandomNumber(&hrng, &lo);
 8001a30:	f107 031c 	add.w	r3, r7, #28
 8001a34:	4619      	mov	r1, r3
 8001a36:	4823      	ldr	r0, [pc, #140]	@ (8001ac4 <masked_value_set+0xb8>)
 8001a38:	f005 f906 	bl	8006c48 <HAL_RNG_GenerateRandomNumber>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
           HAL_StatusTypeDef status2 = HAL_RNG_GenerateRandomNumber(&hrng, &hi);
 8001a42:	f107 0318 	add.w	r3, r7, #24
 8001a46:	4619      	mov	r1, r3
 8001a48:	481e      	ldr	r0, [pc, #120]	@ (8001ac4 <masked_value_set+0xb8>)
 8001a4a:	f005 f8fd 	bl	8006c48 <HAL_RNG_GenerateRandomNumber>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        out->share[i] = ((uint64_t)hi << 32) | lo;
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2200      	movs	r2, #0
 8001a58:	603b      	str	r3, [r7, #0]
 8001a5a:	607a      	str	r2, [r7, #4]
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	000b      	movs	r3, r1
 8001a68:	2200      	movs	r2, #0
 8001a6a:	69f9      	ldr	r1, [r7, #28]
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	460c      	mov	r4, r1
 8001a70:	4605      	mov	r5, r0
 8001a72:	ea42 0804 	orr.w	r8, r2, r4
 8001a76:	ea43 0905 	orr.w	r9, r3, r5
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	e9c3 8900 	strd	r8, r9, [r3]
        acc ^= out->share[i];
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a96:	ea80 0a02 	eor.w	sl, r0, r2
 8001a9a:	ea81 0b03 	eor.w	fp, r1, r3
 8001a9e:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N - 1; i++) {
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	ddbc      	ble.n	8001a28 <masked_value_set+0x1c>
    }

    out->share[MASKING_N - 1] = acc;
 8001aae:	6979      	ldr	r1, [r7, #20]
 8001ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001ab4:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001ab8:	bf00      	nop
 8001aba:	3730      	adds	r7, #48	@ 0x30
 8001abc:	46bd      	mov	sp, r7
 8001abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000140 	.word	0x20000140

08001ac8 <masked_absorb>:
void masked_absorb(masked_uint64_t state[5][5], const uint8_t *input, size_t input_len) {
 8001ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001acc:	b0ce      	sub	sp, #312	@ 0x138
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ad4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ad8:	6018      	str	r0, [r3, #0]
 8001ada:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ade:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001ae2:	6019      	str	r1, [r3, #0]
 8001ae4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ae8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001aec:	601a      	str	r2, [r3, #0]
    // Zero the state
    for (int x = 0; x < 5; x++) {
 8001aee:	2300      	movs	r3, #0
 8001af0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001af4:	e039      	b.n	8001b6a <masked_absorb+0xa2>
        for (int y = 0; y < 5; y++) {
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001afc:	e02c      	b.n	8001b58 <masked_absorb+0x90>
            for (int i = 0; i < MASKING_N; i++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001b04:	e01f      	b.n	8001b46 <masked_absorb+0x7e>
                state[x][y].share[i] = 0;
 8001b06:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	015b      	lsls	r3, r3, #5
 8001b12:	461a      	mov	r2, r3
 8001b14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001b18:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	1899      	adds	r1, r3, r2
 8001b20:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001b24:	009a      	lsls	r2, r3, #2
 8001b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b2a:	4413      	add	r3, r2
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4419      	add	r1, r3
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8001b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b40:	3301      	adds	r3, #1
 8001b42:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001b46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	dddb      	ble.n	8001b06 <masked_absorb+0x3e>
        for (int y = 0; y < 5; y++) {
 8001b4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001b52:	3301      	adds	r3, #1
 8001b54:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001b58:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	ddce      	ble.n	8001afe <masked_absorb+0x36>
    for (int x = 0; x < 5; x++) {
 8001b60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001b64:	3301      	adds	r3, #1
 8001b66:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001b6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	ddc1      	ble.n	8001af6 <masked_absorb+0x2e>
            }
        }
    }

    size_t offset = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    // Process complete blocks
    while (input_len >= KECCAK_RATE) {
 8001b78:	e0b8      	b.n	8001cec <masked_absorb+0x224>
        for (int i = 0; i < KECCAK_RATE; i += 8) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001b80:	e098      	b.n	8001cb4 <masked_absorb+0x1ec>
            uint64_t lane = 0;
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 0300 	mov.w	r3, #0
 8001b8a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            // Correctly load 8 bytes as a 64-bit value (little-endian)
            for (int j = 0; j < 8; j++) {
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001b94:	e03a      	b.n	8001c0c <masked_absorb+0x144>
                lane |= ((uint64_t)input[offset + i + j]) << (8 * j);
 8001b96:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001b9e:	441a      	add	r2, r3
 8001ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ba4:	441a      	add	r2, r3
 8001ba6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001baa:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	617a      	str	r2, [r7, #20]
 8001bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	f1a3 0120 	sub.w	r1, r3, #32
 8001bc6:	f1c3 0220 	rsb	r2, r3, #32
 8001bca:	6978      	ldr	r0, [r7, #20]
 8001bcc:	fa00 f903 	lsl.w	r9, r0, r3
 8001bd0:	6938      	ldr	r0, [r7, #16]
 8001bd2:	fa00 f101 	lsl.w	r1, r0, r1
 8001bd6:	ea49 0901 	orr.w	r9, r9, r1
 8001bda:	6939      	ldr	r1, [r7, #16]
 8001bdc:	fa21 f202 	lsr.w	r2, r1, r2
 8001be0:	ea49 0902 	orr.w	r9, r9, r2
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	fa02 f803 	lsl.w	r8, r2, r3
 8001bea:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bee:	ea42 0108 	orr.w	r1, r2, r8
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	ea43 0309 	orr.w	r3, r3, r9
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bfe:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            for (int j = 0; j < 8; j++) {
 8001c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c06:	3301      	adds	r3, #1
 8001c08:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001c10:	2b07      	cmp	r3, #7
 8001c12:	ddc0      	ble.n	8001b96 <masked_absorb+0xce>
            }

            size_t x = (i / 8) % 5;
 8001c14:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	da00      	bge.n	8001c1e <masked_absorb+0x156>
 8001c1c:	3307      	adds	r3, #7
 8001c1e:	10db      	asrs	r3, r3, #3
 8001c20:	4619      	mov	r1, r3
 8001c22:	4ba7      	ldr	r3, [pc, #668]	@ (8001ec0 <masked_absorb+0x3f8>)
 8001c24:	fb83 2301 	smull	r2, r3, r3, r1
 8001c28:	105a      	asrs	r2, r3, #1
 8001c2a:	17cb      	asrs	r3, r1, #31
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	0092      	lsls	r2, r2, #2
 8001c32:	441a      	add	r2, r3
 8001c34:	1a8b      	subs	r3, r1, r2
 8001c36:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
            size_t y = (i / 8) / 5;
 8001c3a:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8001c3e:	4ba0      	ldr	r3, [pc, #640]	@ (8001ec0 <masked_absorb+0x3f8>)
 8001c40:	fb83 2301 	smull	r2, r3, r3, r1
 8001c44:	111a      	asrs	r2, r3, #4
 8001c46:	17cb      	asrs	r3, r1, #31
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

            // Securely mask the input value
            masked_uint64_t masked_lane;
            masked_value_set(&masked_lane, lane);
 8001c4e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001c52:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c56:	4608      	mov	r0, r1
 8001c58:	f7ff fed8 	bl	8001a0c <masked_value_set>

            // XOR into the state
            masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8001c5c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	015b      	lsls	r3, r3, #5
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c6e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	441a      	add	r2, r3
 8001c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	18d0      	adds	r0, r2, r3
 8001c7e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001c90:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	441a      	add	r2, r3
 8001c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c9c:	015b      	lsls	r3, r3, #5
 8001c9e:	18d1      	adds	r1, r2, r3
 8001ca0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	f000 f954 	bl	8001f52 <masked_xor>
        for (int i = 0; i < KECCAK_RATE; i += 8) {
 8001caa:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001cae:	3308      	adds	r3, #8
 8001cb0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001cb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001cb8:	2ba7      	cmp	r3, #167	@ 0xa7
 8001cba:	f77f af62 	ble.w	8001b82 <masked_absorb+0xba>
        }

        // Apply the permutation
        masked_keccak_f1600(state);
 8001cbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001cc2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	f000 fae2 	bl	8002290 <masked_keccak_f1600>

        offset += KECCAK_RATE;
 8001ccc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001cd0:	33a8      	adds	r3, #168	@ 0xa8
 8001cd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        input_len -= KECCAK_RATE;
 8001cd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001cda:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 8001cde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001ce2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3ba8      	subs	r3, #168	@ 0xa8
 8001cea:	6013      	str	r3, [r2, #0]
    while (input_len >= KECCAK_RATE) {
 8001cec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001cf0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2ba7      	cmp	r3, #167	@ 0xa7
 8001cf8:	f63f af3f 	bhi.w	8001b7a <masked_absorb+0xb2>
    }

    // Final block with padding
    uint8_t block[KECCAK_RATE] = {0};
 8001cfc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d00:	22a8      	movs	r2, #168	@ 0xa8
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f009 fd15 	bl	800b734 <memset>
    memcpy(block, input + offset, input_len);
 8001d0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d0e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001d18:	18d1      	adds	r1, r2, r3
 8001d1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d22:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f009 fd8f 	bl	800b84a <memcpy>
    block[input_len] ^= 0x06;  // Apply domain separation
 8001d2c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001d30:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d34:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	f083 0306 	eor.w	r3, r3, #6
 8001d42:	b2d9      	uxtb	r1, r3
 8001d44:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d4c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	460a      	mov	r2, r1
 8001d56:	701a      	strb	r2, [r3, #0]
    block[KECCAK_RATE - 1] ^= 0x80;  // Apply padding
 8001d58:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8001d5c:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8001d60:	43db      	mvns	r3, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3

    // Process the final block
    for (int i = 0; i < KECCAK_RATE; i += 8) {
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001d6e:	e095      	b.n	8001e9c <masked_absorb+0x3d4>
        uint64_t lane = 0;
 8001d70:	f04f 0200 	mov.w	r2, #0
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < 8 && (i + j) < KECCAK_RATE; j++) {  // Added bounds check
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001d82:	e030      	b.n	8001de6 <masked_absorb+0x31e>
            lane |= ((uint64_t)block[i + j]) << (8 * j);
 8001d84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001d92:	f107 0218 	add.w	r2, r7, #24
 8001d96:	4413      	add	r3, r2
 8001d98:	f813 3cec 	ldrb.w	r3, [r3, #-236]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2200      	movs	r2, #0
 8001da0:	469a      	mov	sl, r3
 8001da2:	4693      	mov	fp, r2
 8001da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	f1a3 0120 	sub.w	r1, r3, #32
 8001dae:	f1c3 0220 	rsb	r2, r3, #32
 8001db2:	fa0b f503 	lsl.w	r5, fp, r3
 8001db6:	fa0a f101 	lsl.w	r1, sl, r1
 8001dba:	430d      	orrs	r5, r1
 8001dbc:	fa2a f202 	lsr.w	r2, sl, r2
 8001dc0:	4315      	orrs	r5, r2
 8001dc2:	fa0a f403 	lsl.w	r4, sl, r3
 8001dc6:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8001dca:	ea42 0104 	orr.w	r1, r2, r4
 8001dce:	6039      	str	r1, [r7, #0]
 8001dd0:	432b      	orrs	r3, r5
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dd8:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < 8 && (i + j) < KECCAK_RATE; j++) {  // Added bounds check
 8001ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001de0:	3301      	adds	r3, #1
 8001de2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001dea:	2b07      	cmp	r3, #7
 8001dec:	dc06      	bgt.n	8001dfc <masked_absorb+0x334>
 8001dee:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001df6:	4413      	add	r3, r2
 8001df8:	2ba7      	cmp	r3, #167	@ 0xa7
 8001dfa:	ddc3      	ble.n	8001d84 <masked_absorb+0x2bc>
        }

        size_t x = (i / 8) % 5;
 8001dfc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	da00      	bge.n	8001e06 <masked_absorb+0x33e>
 8001e04:	3307      	adds	r3, #7
 8001e06:	10db      	asrs	r3, r3, #3
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec0 <masked_absorb+0x3f8>)
 8001e0c:	fb83 2301 	smull	r2, r3, r3, r1
 8001e10:	105a      	asrs	r2, r3, #1
 8001e12:	17cb      	asrs	r3, r1, #31
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	1aca      	subs	r2, r1, r3
 8001e1e:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
        size_t y = (i / 8) / 5;
 8001e22:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001e26:	4a26      	ldr	r2, [pc, #152]	@ (8001ec0 <masked_absorb+0x3f8>)
 8001e28:	fb82 1203 	smull	r1, r2, r2, r3
 8001e2c:	1112      	asrs	r2, r2, #4
 8001e2e:	17db      	asrs	r3, r3, #31
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

        masked_uint64_t masked_lane;
        masked_value_set(&masked_lane, lane);
 8001e36:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001e3a:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8001e3e:	4608      	mov	r0, r1
 8001e40:	f7ff fde4 	bl	8001a0c <masked_value_set>
        masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8001e44:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001e48:	4613      	mov	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	015b      	lsls	r3, r3, #5
 8001e50:	461a      	mov	r2, r3
 8001e52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e56:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	441a      	add	r2, r3
 8001e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e62:	015b      	lsls	r3, r3, #5
 8001e64:	18d0      	adds	r0, r2, r3
 8001e66:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	015b      	lsls	r3, r3, #5
 8001e72:	461a      	mov	r2, r3
 8001e74:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e78:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	441a      	add	r2, r3
 8001e80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e84:	015b      	lsls	r3, r3, #5
 8001e86:	4413      	add	r3, r2
 8001e88:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f000 f860 	bl	8001f52 <masked_xor>
    for (int i = 0; i < KECCAK_RATE; i += 8) {
 8001e92:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001e96:	3308      	adds	r3, #8
 8001e98:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001e9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ea0:	2ba7      	cmp	r3, #167	@ 0xa7
 8001ea2:	f77f af65 	ble.w	8001d70 <masked_absorb+0x2a8>
    }

    // Final permutation
    masked_keccak_f1600(state);
 8001ea6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001eaa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	f000 f9ee 	bl	8002290 <masked_keccak_f1600>
}
 8001eb4:	bf00      	nop
 8001eb6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec0:	66666667 	.word	0x66666667

08001ec4 <fill_random_matrix>:
#include "masked_types.h"
#include "global_rng.h"  // ensure this includes `extern RNG_HandleTypeDef hrng`
#include "stm32f4xx_hal_rng.h"  // required for HAL RNG
#include <stddef.h>  // for size_t

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	e037      	b.n	8001f42 <fill_random_matrix+0x7e>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	e020      	b.n	8001f1c <fill_random_matrix+0x58>
            uint64_t val = get_random64();
 8001eda:	f7ff f90d 	bl	80010f8 <get_random64>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	17da      	asrs	r2, r3, #31
 8001ee2:	461c      	mov	r4, r3
 8001ee4:	4615      	mov	r5, r2
 8001ee6:	e9c7 4502 	strd	r4, r5, [r7, #8]
            r[i][j] = val;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	015b      	lsls	r3, r3, #5
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	441a      	add	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	18d1      	adds	r1, r2, r3
 8001ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001efc:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry!
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	015b      	lsls	r3, r3, #5
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	441a      	add	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	18d1      	adds	r1, r2, r3
 8001f0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f12:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d9db      	bls.n	8001eda <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	015b      	lsls	r3, r3, #5
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	441a      	add	r2, r3
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	18d1      	adds	r1, r2, r3
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 0300 	mov.w	r3, #0
 8001f38:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d9c4      	bls.n	8001ed2 <fill_random_matrix+0xe>
    }
}
 8001f48:	bf00      	nop
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bdb0      	pop	{r4, r5, r7, pc}

08001f52 <masked_xor>:



void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 8001f52:	b4b0      	push	{r4, r5, r7}
 8001f54:	b087      	sub	sp, #28
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e018      	b.n	8001f96 <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	ea80 0402 	eor.w	r4, r0, r2
 8001f80:	ea81 0503 	eor.w	r5, r1, r3
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	3301      	adds	r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d9e3      	bls.n	8001f64 <masked_xor+0x12>
    }
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bcb0      	pop	{r4, r5, r7}
 8001fa6:	4770      	bx	lr

08001fa8 <masked_and>:

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 8001fa8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fac:	b092      	sub	sp, #72	@ 0x48
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001fb2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001fb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fb6:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 8001fb8:	2300      	movs	r3, #0
 8001fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fbc:	e018      	b.n	8001ff0 <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 8001fbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	ea00 0402 	and.w	r4, r0, r2
 8001fda:	ea01 0503 	and.w	r5, r1, r3
 8001fde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fec:	3301      	adds	r3, #1
 8001fee:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d9e3      	bls.n	8001fbe <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ffa:	e078      	b.n	80020ee <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001ffc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ffe:	3301      	adds	r3, #1
 8002000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002002:	e06e      	b.n	80020e2 <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8002004:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4413      	add	r3, r2
 800200c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	ea00 0802 	and.w	r8, r0, r2
 8002020:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 8002024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	ea00 0a02 	and.w	sl, r0, r2
 8002040:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8002044:	ea88 030a 	eor.w	r3, r8, sl
 8002048:	603b      	str	r3, [r7, #0]
 800204a:	ea89 030b 	eor.w	r3, r9, fp
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002054:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 8002058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800205a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002066:	015a      	lsls	r2, r3, #5
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	441a      	add	r2, r3
 800206c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	ea80 0402 	eor.w	r4, r0, r2
 800207a:	61bc      	str	r4, [r7, #24]
 800207c:	404b      	eors	r3, r1
 800207e:	61fb      	str	r3, [r7, #28]
 8002080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800208c:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 8002090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	e9d3 4500 	ldrd	r4, r5, [r3]
 800209c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800209e:	015a      	lsls	r2, r3, #5
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	441a      	add	r2, r3
 80020a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	4413      	add	r3, r2
 80020aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80020b2:	ea80 0602 	eor.w	r6, r0, r2
 80020b6:	613e      	str	r6, [r7, #16]
 80020b8:	404b      	eors	r3, r1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80020c0:	460b      	mov	r3, r1
 80020c2:	4063      	eors	r3, r4
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	4613      	mov	r3, r2
 80020c8:	406b      	eors	r3, r5
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80020d8:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80020dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020de:	3301      	adds	r3, #1
 80020e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d98d      	bls.n	8002004 <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 80020e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ea:	3301      	adds	r3, #1
 80020ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d983      	bls.n	8001ffc <masked_and+0x54>
        }
    }
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	3748      	adds	r7, #72	@ 0x48
 80020fa:	46bd      	mov	sp, r7
 80020fc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002100:	4770      	bx	lr

08002102 <masked_recombine>:
#include "masked_types.h"
#include "masked_gadgets.h"
#include "stm32f4xx_hal.h"
#include <stdio.h>

uint64_t masked_recombine(const masked_uint64_t *m) {
 8002102:	b4b0      	push	{r4, r5, r7}
 8002104:	b087      	sub	sp, #28
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
    uint64_t result = 0;
 800210a:	f04f 0000 	mov.w	r0, #0
 800210e:	f04f 0100 	mov.w	r1, #0
 8002112:	e9c7 0104 	strd	r0, r1, [r7, #16]
    for (int i = 0; i < MASKING_N; i++) {
 8002116:	2100      	movs	r1, #0
 8002118:	60f9      	str	r1, [r7, #12]
 800211a:	e010      	b.n	800213e <masked_recombine+0x3c>
        result ^= m->share[i];
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	68f9      	ldr	r1, [r7, #12]
 8002120:	00c9      	lsls	r1, r1, #3
 8002122:	4401      	add	r1, r0
 8002124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002128:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800212c:	ea84 0200 	eor.w	r2, r4, r0
 8002130:	ea85 0301 	eor.w	r3, r5, r1
 8002134:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < MASKING_N; i++) {
 8002138:	68f9      	ldr	r1, [r7, #12]
 800213a:	3101      	adds	r1, #1
 800213c:	60f9      	str	r1, [r7, #12]
 800213e:	68f9      	ldr	r1, [r7, #12]
 8002140:	2903      	cmp	r1, #3
 8002142:	ddeb      	ble.n	800211c <masked_recombine+0x1a>
    }
    return result;
 8002144:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	bcb0      	pop	{r4, r5, r7}
 8002152:	4770      	bx	lr

08002154 <debug_print_masked_state>:
void debug_print_masked_state(masked_uint64_t state[5][5]) {
 8002154:	b5b0      	push	{r4, r5, r7, lr}
 8002156:	b08e      	sub	sp, #56	@ 0x38
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
    printf("=== Full Masked State (Shares + Recombined) ===\n");
 800215c:	4848      	ldr	r0, [pc, #288]	@ (8002280 <debug_print_masked_state+0x12c>)
 800215e:	f009 f945 	bl	800b3ec <puts>
    for (int y = 0; y < 5; y++) {
 8002162:	2300      	movs	r3, #0
 8002164:	637b      	str	r3, [r7, #52]	@ 0x34
 8002166:	e081      	b.n	800226c <debug_print_masked_state+0x118>
        for (int x = 0; x < 5; x++) {
 8002168:	2300      	movs	r3, #0
 800216a:	633b      	str	r3, [r7, #48]	@ 0x30
 800216c:	e078      	b.n	8002260 <debug_print_masked_state+0x10c>
            printf("State[%d][%d]: ", x, y);
 800216e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002170:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002172:	4844      	ldr	r0, [pc, #272]	@ (8002284 <debug_print_masked_state+0x130>)
 8002174:	f009 f8ca 	bl	800b30c <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 8002178:	2300      	movs	r3, #0
 800217a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800217c:	e032      	b.n	80021e4 <debug_print_masked_state+0x90>
                uint32_t hi = (uint32_t)(state[x][y].share[i] >> 32);
 800217e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	015b      	lsls	r3, r3, #5
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	441a      	add	r2, r3
 800218e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002190:	0099      	lsls	r1, r3, #2
 8002192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002194:	440b      	add	r3, r1
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	000a      	movs	r2, r1
 80021a8:	2300      	movs	r3, #0
 80021aa:	4613      	mov	r3, r2
 80021ac:	613b      	str	r3, [r7, #16]
                uint32_t lo = (uint32_t)(state[x][y].share[i] & 0xFFFFFFFF);
 80021ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	461a      	mov	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	441a      	add	r2, r3
 80021be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c0:	0099      	lsls	r1, r3, #2
 80021c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c4:	440b      	add	r3, r1
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4413      	add	r3, r2
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	4613      	mov	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
                printf("S[%d]=0x%08X%08X ", i, hi, lo);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021d8:	482b      	ldr	r0, [pc, #172]	@ (8002288 <debug_print_masked_state+0x134>)
 80021da:	f009 f897 	bl	800b30c <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 80021de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e0:	3301      	adds	r3, #1
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e6:	2b03      	cmp	r3, #3
 80021e8:	ddc9      	ble.n	800217e <debug_print_masked_state+0x2a>
            }
            // Recombined value
            uint64_t val = 0;
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	f04f 0300 	mov.w	r3, #0
 80021f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int i = 0; i < MASKING_N; i++) {
 80021f6:	2300      	movs	r3, #0
 80021f8:	61fb      	str	r3, [r7, #28]
 80021fa:	e01a      	b.n	8002232 <debug_print_masked_state+0xde>
                val ^= state[x][y].share[i];
 80021fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	015b      	lsls	r3, r3, #5
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	441a      	add	r2, r3
 800220c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800220e:	0099      	lsls	r1, r3, #2
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	440b      	add	r3, r1
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002220:	ea80 0402 	eor.w	r4, r0, r2
 8002224:	ea81 0503 	eor.w	r5, r1, r3
 8002228:	e9c7 4508 	strd	r4, r5, [r7, #32]
            for (int i = 0; i < MASKING_N; i++) {
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3301      	adds	r3, #1
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	2b03      	cmp	r3, #3
 8002236:	dde1      	ble.n	80021fc <debug_print_masked_state+0xa8>
            }
            uint32_t r_hi = (uint32_t)(val >> 32);
 8002238:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	000a      	movs	r2, r1
 8002246:	2300      	movs	r3, #0
 8002248:	4613      	mov	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
            uint32_t r_lo = (uint32_t)(val & 0xFFFFFFFF);
 800224c:	6a3b      	ldr	r3, [r7, #32]
 800224e:	617b      	str	r3, [r7, #20]
            printf(" | R=0x%08X%08X\n", r_hi, r_lo);
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	480d      	ldr	r0, [pc, #52]	@ (800228c <debug_print_masked_state+0x138>)
 8002256:	f009 f859 	bl	800b30c <iprintf>
        for (int x = 0; x < 5; x++) {
 800225a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225c:	3301      	adds	r3, #1
 800225e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002262:	2b04      	cmp	r3, #4
 8002264:	dd83      	ble.n	800216e <debug_print_masked_state+0x1a>
    for (int y = 0; y < 5; y++) {
 8002266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002268:	3301      	adds	r3, #1
 800226a:	637b      	str	r3, [r7, #52]	@ 0x34
 800226c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226e:	2b04      	cmp	r3, #4
 8002270:	f77f af7a 	ble.w	8002168 <debug_print_masked_state+0x14>
        }
    }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3738      	adds	r7, #56	@ 0x38
 800227a:	46bd      	mov	sp, r7
 800227c:	bdb0      	pop	{r4, r5, r7, pc}
 800227e:	bf00      	nop
 8002280:	0800c2ec 	.word	0x0800c2ec
 8002284:	0800c31c 	.word	0x0800c31c
 8002288:	0800c32c 	.word	0x0800c32c
 800228c:	0800c340 	.word	0x0800c340

08002290 <masked_keccak_f1600>:
    0x000000000000800aULL, 0x800000008000000aULL,
    0x8000000080008081ULL, 0x8000000000008080ULL,
    0x0000000080000001ULL, 0x8000000080008008ULL
};

void masked_keccak_f1600(masked_uint64_t state[5][5]) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b090      	sub	sp, #64	@ 0x40
 8002294:	af02      	add	r7, sp, #8
 8002296:	6078      	str	r0, [r7, #4]
	debug_print_masked_state(state);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff5b 	bl	8002154 <debug_print_masked_state>
	printf("== Before masked_keccak_f1600 ==\n");
 800229e:	4854      	ldr	r0, [pc, #336]	@ (80023f0 <masked_keccak_f1600+0x160>)
 80022a0:	f009 f8a4 	bl	800b3ec <puts>
	for (int x = 0; x < 5; x++) {
 80022a4:	2300      	movs	r3, #0
 80022a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022a8:	e02f      	b.n	800230a <masked_keccak_f1600+0x7a>
	    for (int y = 0; y < 5; y++) {
 80022aa:	2300      	movs	r3, #0
 80022ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80022ae:	e026      	b.n	80022fe <masked_keccak_f1600+0x6e>
	        uint64_t recombined = masked_recombine(&state[x][y]);
 80022b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	015b      	lsls	r3, r3, #5
 80022ba:	461a      	mov	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	441a      	add	r2, r3
 80022c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c2:	015b      	lsls	r3, r3, #5
 80022c4:	4413      	add	r3, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff ff1b 	bl	8002102 <masked_recombine>
 80022cc:	e9c7 0104 	strd	r0, r1, [r7, #16]
	        uint32_t hi = (uint32_t)(recombined >> 32);
 80022d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	000a      	movs	r2, r1
 80022de:	2300      	movs	r3, #0
 80022e0:	4613      	mov	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
	        uint32_t lo = (uint32_t)(recombined & 0xFFFFFFFF);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	60bb      	str	r3, [r7, #8]
	        printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80022f2:	4840      	ldr	r0, [pc, #256]	@ (80023f4 <masked_keccak_f1600+0x164>)
 80022f4:	f009 f80a 	bl	800b30c <iprintf>
	    for (int y = 0; y < 5; y++) {
 80022f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022fa:	3301      	adds	r3, #1
 80022fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80022fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002300:	2b04      	cmp	r3, #4
 8002302:	ddd5      	ble.n	80022b0 <masked_keccak_f1600+0x20>
	for (int x = 0; x < 5; x++) {
 8002304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002306:	3301      	adds	r3, #1
 8002308:	637b      	str	r3, [r7, #52]	@ 0x34
 800230a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800230c:	2b04      	cmp	r3, #4
 800230e:	ddcc      	ble.n	80022aa <masked_keccak_f1600+0x1a>

	    }
	}


    for (int i = 0; i < 24; i++) {
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002314:	e00b      	b.n	800232e <masked_keccak_f1600+0x9e>
        masked_keccak_round(state, keccak_round_constants[i]);
 8002316:	4a38      	ldr	r2, [pc, #224]	@ (80023f8 <masked_keccak_f1600+0x168>)
 8002318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fad0 	bl	80018c8 <masked_keccak_round>
    for (int i = 0; i < 24; i++) {
 8002328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232a:	3301      	adds	r3, #1
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002330:	2b17      	cmp	r3, #23
 8002332:	ddf0      	ble.n	8002316 <masked_keccak_f1600+0x86>
    }
    debug_print_masked_state(state);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ff0d 	bl	8002154 <debug_print_masked_state>
    printf("== After masked_keccak_f1600 ==\n");
 800233a:	4830      	ldr	r0, [pc, #192]	@ (80023fc <masked_keccak_f1600+0x16c>)
 800233c:	f009 f856 	bl	800b3ec <puts>
    for (int x = 0; x < 5; x++) {
 8002340:	2300      	movs	r3, #0
 8002342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002344:	e04b      	b.n	80023de <masked_keccak_f1600+0x14e>
        for (int y = 0; y < 5; y++) {
 8002346:	2300      	movs	r3, #0
 8002348:	627b      	str	r3, [r7, #36]	@ 0x24
 800234a:	e042      	b.n	80023d2 <masked_keccak_f1600+0x142>
            printf("State[%d][%d]:", x, y);
 800234c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800234e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002350:	482b      	ldr	r0, [pc, #172]	@ (8002400 <masked_keccak_f1600+0x170>)
 8002352:	f008 ffdb 	bl	800b30c <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
 800235a:	e031      	b.n	80023c0 <masked_keccak_f1600+0x130>
                uint32_t hi = (uint32_t)(state[x][y].share[i] >> 32);
 800235c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	015b      	lsls	r3, r3, #5
 8002366:	461a      	mov	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	441a      	add	r2, r3
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	0099      	lsls	r1, r3, #2
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	440b      	add	r3, r1
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	e9d3 0100 	ldrd	r0, r1, [r3]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	f04f 0300 	mov.w	r3, #0
 8002384:	000a      	movs	r2, r1
 8002386:	2300      	movs	r3, #0
 8002388:	4613      	mov	r3, r2
 800238a:	61fb      	str	r3, [r7, #28]
                uint32_t lo = (uint32_t)(state[x][y].share[i] & 0xFFFFFFFF);
 800238c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	015b      	lsls	r3, r3, #5
 8002396:	461a      	mov	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	441a      	add	r2, r3
 800239c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239e:	0099      	lsls	r1, r3, #2
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	440b      	add	r3, r1
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	4613      	mov	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
                printf(" %08lX%08lX", hi, lo);
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	69f9      	ldr	r1, [r7, #28]
 80023b4:	4813      	ldr	r0, [pc, #76]	@ (8002404 <masked_keccak_f1600+0x174>)
 80023b6:	f008 ffa9 	bl	800b30c <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 80023ba:	6a3b      	ldr	r3, [r7, #32]
 80023bc:	3301      	adds	r3, #1
 80023be:	623b      	str	r3, [r7, #32]
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	ddca      	ble.n	800235c <masked_keccak_f1600+0xcc>
            }
            printf("\n");
 80023c6:	200a      	movs	r0, #10
 80023c8:	f008 ffb2 	bl	800b330 <putchar>
        for (int y = 0; y < 5; y++) {
 80023cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ce:	3301      	adds	r3, #1
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	ddb9      	ble.n	800234c <masked_keccak_f1600+0xbc>
    for (int x = 0; x < 5; x++) {
 80023d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023da:	3301      	adds	r3, #1
 80023dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	ddb0      	ble.n	8002346 <masked_keccak_f1600+0xb6>
        }
    }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3738      	adds	r7, #56	@ 0x38
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	0800c354 	.word	0x0800c354
 80023f4:	0800c378 	.word	0x0800c378
 80023f8:	0800c418 	.word	0x0800c418
 80023fc:	0800c394 	.word	0x0800c394
 8002400:	0800c3b4 	.word	0x0800c3b4
 8002404:	0800c3c4 	.word	0x0800c3c4

08002408 <masked_sha3_512>:
#include "masked_squeeze.h"

#define SHA3_512_RATE 72             // SHA3-512 rate in bytes
#define SHA3_512_OUTPUT_SIZE 64      // SHA3-512 output in bytes

void masked_sha3_512(uint8_t *output, const uint8_t *input, size_t input_len) {
 8002408:	b580      	push	{r7, lr}
 800240a:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 800240e:	af00      	add	r7, sp, #0
 8002410:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002414:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002418:	6018      	str	r0, [r3, #0]
 800241a:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800241e:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002422:	6019      	str	r1, [r3, #0]
 8002424:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002428:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 800242c:	601a      	str	r2, [r3, #0]
    masked_uint64_t state[5][5];

    // === Zero the state ===
    for (int x = 0; x < 5; x++) {
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002434:	e036      	b.n	80024a4 <masked_sha3_512+0x9c>
        for (int y = 0; y < 5; y++) {
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 800243c:	e029      	b.n	8002492 <masked_sha3_512+0x8a>
            for (int i = 0; i < MASKING_N; i++) {
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002444:	e01c      	b.n	8002480 <masked_sha3_512+0x78>
                state[x][y].share[i] = 0;
 8002446:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800244a:	f5a3 714c 	sub.w	r1, r3, #816	@ 0x330
 800244e:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002452:	4613      	mov	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	4413      	add	r3, r2
 8002458:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 800245c:	4413      	add	r3, r2
 800245e:	009a      	lsls	r2, r3, #2
 8002460:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4419      	add	r1, r3
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8002476:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800247a:	3301      	adds	r3, #1
 800247c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002480:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002484:	2b03      	cmp	r3, #3
 8002486:	ddde      	ble.n	8002446 <masked_sha3_512+0x3e>
        for (int y = 0; y < 5; y++) {
 8002488:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800248c:	3301      	adds	r3, #1
 800248e:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8002492:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002496:	2b04      	cmp	r3, #4
 8002498:	ddd1      	ble.n	800243e <masked_sha3_512+0x36>
    for (int x = 0; x < 5; x++) {
 800249a:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800249e:	3301      	adds	r3, #1
 80024a0:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80024a4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80024a8:	2b04      	cmp	r3, #4
 80024aa:	ddc4      	ble.n	8002436 <masked_sha3_512+0x2e>
            }
        }
    }

    // === Absorb input using masked absorb ===
    printf("Starting masked_absorb\n");
 80024ac:	4811      	ldr	r0, [pc, #68]	@ (80024f4 <masked_sha3_512+0xec>)
 80024ae:	f008 ff9d 	bl	800b3ec <puts>
    masked_absorb(state, input, input_len);
 80024b2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80024b6:	f5a3 724f 	sub.w	r2, r3, #828	@ 0x33c
 80024ba:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80024be:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80024c2:	f107 0010 	add.w	r0, r7, #16
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	6819      	ldr	r1, [r3, #0]
 80024ca:	f7ff fafd 	bl	8001ac8 <masked_absorb>
    printf("Finished absorb\n");
 80024ce:	480a      	ldr	r0, [pc, #40]	@ (80024f8 <masked_sha3_512+0xf0>)
 80024d0:	f008 ff8c 	bl	800b3ec <puts>

    // === Squeeze output using masked squeeze ===
    masked_squeeze(output, SHA3_512_OUTPUT_SIZE, state);
 80024d4:	f107 0210 	add.w	r2, r7, #16
 80024d8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80024dc:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80024e0:	2140      	movs	r1, #64	@ 0x40
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	f000 f80a 	bl	80024fc <masked_squeeze>
}
 80024e8:	bf00      	nop
 80024ea:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	0800c3d0 	.word	0x0800c3d0
 80024f8:	0800c3e8 	.word	0x0800c3e8

080024fc <masked_squeeze>:

#include <stddef.h>

#define KECCAK_RATE 168  // SHAKE128 rate in bytes

void masked_squeeze(uint8_t *output, size_t output_len, masked_uint64_t state[5][5]) {
 80024fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002500:	b08d      	sub	sp, #52	@ 0x34
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
    size_t offset = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (offset < output_len) {
 800250e:	e075      	b.n	80025fc <masked_squeeze+0x100>
        // Squeeze up to KECCAK_RATE bytes per iteration
        for (int i = 0; i < KECCAK_RATE && offset < output_len; i++) {
 8002510:	2300      	movs	r3, #0
 8002512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002514:	e064      	b.n	80025e0 <masked_squeeze+0xe4>
            size_t x = (i / 8) % 5;
 8002516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	da00      	bge.n	800251e <masked_squeeze+0x22>
 800251c:	3307      	adds	r3, #7
 800251e:	10db      	asrs	r3, r3, #3
 8002520:	4619      	mov	r1, r3
 8002522:	4b3b      	ldr	r3, [pc, #236]	@ (8002610 <masked_squeeze+0x114>)
 8002524:	fb83 2301 	smull	r2, r3, r3, r1
 8002528:	105a      	asrs	r2, r3, #1
 800252a:	17cb      	asrs	r3, r1, #31
 800252c:	1ad2      	subs	r2, r2, r3
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	1aca      	subs	r2, r1, r3
 8002536:	61ba      	str	r2, [r7, #24]
            size_t y = (i / 8) / 5;
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	4a35      	ldr	r2, [pc, #212]	@ (8002610 <masked_squeeze+0x114>)
 800253c:	fb82 1203 	smull	r1, r2, r2, r3
 8002540:	1112      	asrs	r2, r2, #4
 8002542:	17db      	asrs	r3, r3, #31
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
            size_t byte_pos = i % 8;
 8002548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254a:	425a      	negs	r2, r3
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	f002 0207 	and.w	r2, r2, #7
 8002554:	bf58      	it	pl
 8002556:	4253      	negpl	r3, r2
 8002558:	613b      	str	r3, [r7, #16]

            // Recombine shares to get the true output byte
            uint64_t lane = 0;
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	e01a      	b.n	80025a2 <masked_squeeze+0xa6>
                lane ^= state[x][y].share[j];
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	015b      	lsls	r3, r3, #5
 8002576:	461a      	mov	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	441a      	add	r2, r3
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	0099      	lsls	r1, r3, #2
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	440b      	add	r3, r1
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002590:	ea80 0802 	eor.w	r8, r0, r2
 8002594:	ea81 0903 	eor.w	r9, r1, r3
 8002598:	e9c7 8908 	strd	r8, r9, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	3301      	adds	r3, #1
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	dde1      	ble.n	800256c <masked_squeeze+0x70>
            }

            output[offset++] = (lane >> (8 * byte_pos)) & 0xFF;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	00d9      	lsls	r1, r3, #3
 80025ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025b0:	f1c1 0620 	rsb	r6, r1, #32
 80025b4:	f1a1 0020 	sub.w	r0, r1, #32
 80025b8:	fa22 f401 	lsr.w	r4, r2, r1
 80025bc:	fa03 f606 	lsl.w	r6, r3, r6
 80025c0:	4334      	orrs	r4, r6
 80025c2:	fa23 f000 	lsr.w	r0, r3, r0
 80025c6:	4304      	orrs	r4, r0
 80025c8:	fa23 f501 	lsr.w	r5, r3, r1
 80025cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4413      	add	r3, r2
 80025d6:	b2e2      	uxtb	r2, r4
 80025d8:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < KECCAK_RATE && offset < output_len; i++) {
 80025da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025dc:	3301      	adds	r3, #1
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	2ba7      	cmp	r3, #167	@ 0xa7
 80025e4:	dc03      	bgt.n	80025ee <masked_squeeze+0xf2>
 80025e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d393      	bcc.n	8002516 <masked_squeeze+0x1a>
        }

        // If we haven’t yet squeezed enough, permute again
        if (offset < output_len) {
 80025ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d202      	bcs.n	80025fc <masked_squeeze+0x100>
            masked_keccak_f1600(state);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fe4a 	bl	8002290 <masked_keccak_f1600>
    while (offset < output_len) {
 80025fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	429a      	cmp	r2, r3
 8002602:	d385      	bcc.n	8002510 <masked_squeeze+0x14>
        }
    }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3734      	adds	r7, #52	@ 0x34
 800260a:	46bd      	mov	sp, r7
 800260c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002610:	66666667 	.word	0x66666667

08002614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	4b10      	ldr	r3, [pc, #64]	@ (8002660 <HAL_MspInit+0x4c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	4a0f      	ldr	r2, [pc, #60]	@ (8002660 <HAL_MspInit+0x4c>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002628:	6453      	str	r3, [r2, #68]	@ 0x44
 800262a:	4b0d      	ldr	r3, [pc, #52]	@ (8002660 <HAL_MspInit+0x4c>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002632:	607b      	str	r3, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	603b      	str	r3, [r7, #0]
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_MspInit+0x4c>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263e:	4a08      	ldr	r2, [pc, #32]	@ (8002660 <HAL_MspInit+0x4c>)
 8002640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002644:	6413      	str	r3, [r2, #64]	@ 0x40
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_MspInit+0x4c>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002652:	2007      	movs	r0, #7
 8002654:	f000 fbe4 	bl	8002e20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800

08002664 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08a      	sub	sp, #40	@ 0x28
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a19      	ldr	r2, [pc, #100]	@ (80026e8 <HAL_I2C_MspInit+0x84>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d12c      	bne.n	80026e0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <HAL_I2C_MspInit+0x88>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a17      	ldr	r2, [pc, #92]	@ (80026ec <HAL_I2C_MspInit+0x88>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b15      	ldr	r3, [pc, #84]	@ (80026ec <HAL_I2C_MspInit+0x88>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80026a2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80026a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026a8:	2312      	movs	r3, #18
 80026aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ac:	2301      	movs	r3, #1
 80026ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026b4:	2304      	movs	r3, #4
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	4619      	mov	r1, r3
 80026be:	480c      	ldr	r0, [pc, #48]	@ (80026f0 <HAL_I2C_MspInit+0x8c>)
 80026c0:	f000 fbf0 	bl	8002ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	4b08      	ldr	r3, [pc, #32]	@ (80026ec <HAL_I2C_MspInit+0x88>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	4a07      	ldr	r2, [pc, #28]	@ (80026ec <HAL_I2C_MspInit+0x88>)
 80026ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <HAL_I2C_MspInit+0x88>)
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026e0:	bf00      	nop
 80026e2:	3728      	adds	r7, #40	@ 0x28
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40005400 	.word	0x40005400
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40020400 	.word	0x40020400

080026f4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b08e      	sub	sp, #56	@ 0x38
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a31      	ldr	r2, [pc, #196]	@ (80027e4 <HAL_I2S_MspInit+0xf0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d15a      	bne.n	80027da <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002724:	2301      	movs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002728:	23c0      	movs	r3, #192	@ 0xc0
 800272a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800272c:	2302      	movs	r3, #2
 800272e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4618      	mov	r0, r3
 8002736:	f004 f91b 	bl	8006970 <HAL_RCCEx_PeriphCLKConfig>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002740:	f7fe fcd4 	bl	80010ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
 8002748:	4b27      	ldr	r3, [pc, #156]	@ (80027e8 <HAL_I2S_MspInit+0xf4>)
 800274a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274c:	4a26      	ldr	r2, [pc, #152]	@ (80027e8 <HAL_I2S_MspInit+0xf4>)
 800274e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002752:	6413      	str	r3, [r2, #64]	@ 0x40
 8002754:	4b24      	ldr	r3, [pc, #144]	@ (80027e8 <HAL_I2S_MspInit+0xf4>)
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002760:	2300      	movs	r3, #0
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <HAL_I2S_MspInit+0xf4>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <HAL_I2S_MspInit+0xf4>)
 800276a:	f043 0301 	orr.w	r3, r3, #1
 800276e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002770:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <HAL_I2S_MspInit+0xf4>)
 8002772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800277c:	2300      	movs	r3, #0
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	4b19      	ldr	r3, [pc, #100]	@ (80027e8 <HAL_I2S_MspInit+0xf4>)
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	4a18      	ldr	r2, [pc, #96]	@ (80027e8 <HAL_I2S_MspInit+0xf4>)
 8002786:	f043 0304 	orr.w	r3, r3, #4
 800278a:	6313      	str	r3, [r2, #48]	@ 0x30
 800278c:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <HAL_I2S_MspInit+0xf4>)
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002798:	2310      	movs	r3, #16
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279c:	2302      	movs	r3, #2
 800279e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a4:	2300      	movs	r3, #0
 80027a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027a8:	2306      	movs	r3, #6
 80027aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80027ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b0:	4619      	mov	r1, r3
 80027b2:	480e      	ldr	r0, [pc, #56]	@ (80027ec <HAL_I2S_MspInit+0xf8>)
 80027b4:	f000 fb76 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80027b8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027be:	2302      	movs	r3, #2
 80027c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c6:	2300      	movs	r3, #0
 80027c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027ca:	2306      	movs	r3, #6
 80027cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d2:	4619      	mov	r1, r3
 80027d4:	4806      	ldr	r0, [pc, #24]	@ (80027f0 <HAL_I2S_MspInit+0xfc>)
 80027d6:	f000 fb65 	bl	8002ea4 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80027da:	bf00      	nop
 80027dc:	3738      	adds	r7, #56	@ 0x38
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40003c00 	.word	0x40003c00
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40020800 	.word	0x40020800

080027f4 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a0b      	ldr	r2, [pc, #44]	@ (8002830 <HAL_RNG_MspInit+0x3c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d10d      	bne.n	8002822 <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <HAL_RNG_MspInit+0x40>)
 800280c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280e:	4a09      	ldr	r2, [pc, #36]	@ (8002834 <HAL_RNG_MspInit+0x40>)
 8002810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002814:	6353      	str	r3, [r2, #52]	@ 0x34
 8002816:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <HAL_RNG_MspInit+0x40>)
 8002818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	50060800 	.word	0x50060800
 8002834:	40023800 	.word	0x40023800

08002838 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	@ 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a19      	ldr	r2, [pc, #100]	@ (80028bc <HAL_SPI_MspInit+0x84>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d12b      	bne.n	80028b2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	4b18      	ldr	r3, [pc, #96]	@ (80028c0 <HAL_SPI_MspInit+0x88>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	4a17      	ldr	r2, [pc, #92]	@ (80028c0 <HAL_SPI_MspInit+0x88>)
 8002864:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002868:	6453      	str	r3, [r2, #68]	@ 0x44
 800286a:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <HAL_SPI_MspInit+0x88>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002872:	613b      	str	r3, [r7, #16]
 8002874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_SPI_MspInit+0x88>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	4a10      	ldr	r2, [pc, #64]	@ (80028c0 <HAL_SPI_MspInit+0x88>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6313      	str	r3, [r2, #48]	@ 0x30
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_SPI_MspInit+0x88>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002892:	23e0      	movs	r3, #224	@ 0xe0
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028a2:	2305      	movs	r3, #5
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <HAL_SPI_MspInit+0x8c>)
 80028ae:	f000 faf9 	bl	8002ea4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	@ 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40013000 	.word	0x40013000
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020000 	.word	0x40020000

080028c8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	@ 0x28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a19      	ldr	r2, [pc, #100]	@ (800294c <HAL_UART_MspInit+0x84>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d12b      	bne.n	8002942 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	613b      	str	r3, [r7, #16]
 80028ee:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <HAL_UART_MspInit+0x88>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	4a17      	ldr	r2, [pc, #92]	@ (8002950 <HAL_UART_MspInit+0x88>)
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fa:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <HAL_UART_MspInit+0x88>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
 800290a:	4b11      	ldr	r3, [pc, #68]	@ (8002950 <HAL_UART_MspInit+0x88>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	4a10      	ldr	r2, [pc, #64]	@ (8002950 <HAL_UART_MspInit+0x88>)
 8002910:	f043 0301 	orr.w	r3, r3, #1
 8002914:	6313      	str	r3, [r2, #48]	@ 0x30
 8002916:	4b0e      	ldr	r3, [pc, #56]	@ (8002950 <HAL_UART_MspInit+0x88>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002922:	230c      	movs	r3, #12
 8002924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002932:	2307      	movs	r3, #7
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4805      	ldr	r0, [pc, #20]	@ (8002954 <HAL_UART_MspInit+0x8c>)
 800293e:	f000 fab1 	bl	8002ea4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002942:	bf00      	nop
 8002944:	3728      	adds	r7, #40	@ 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40004400 	.word	0x40004400
 8002950:	40023800 	.word	0x40023800
 8002954:	40020000 	.word	0x40020000

08002958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800295c:	bf00      	nop
 800295e:	e7fd      	b.n	800295c <NMI_Handler+0x4>

08002960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002964:	bf00      	nop
 8002966:	e7fd      	b.n	8002964 <HardFault_Handler+0x4>

08002968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800296c:	bf00      	nop
 800296e:	e7fd      	b.n	800296c <MemManage_Handler+0x4>

08002970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <BusFault_Handler+0x4>

08002978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800297c:	bf00      	nop
 800297e:	e7fd      	b.n	800297c <UsageFault_Handler+0x4>

08002980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029ae:	f000 f923 	bl	8002bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80029bc:	4802      	ldr	r0, [pc, #8]	@ (80029c8 <OTG_FS_IRQHandler+0x10>)
 80029be:	f000 ff07 	bl	80037d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200005d4 	.word	0x200005d4

080029cc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	e00a      	b.n	80029f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029de:	f3af 8000 	nop.w
 80029e2:	4601      	mov	r1, r0
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	60ba      	str	r2, [r7, #8]
 80029ea:	b2ca      	uxtb	r2, r1
 80029ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	3301      	adds	r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	dbf0      	blt.n	80029de <_read+0x12>
  }

  return len;
 80029fc:	687b      	ldr	r3, [r7, #4]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a2e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <_isatty>:

int _isatty(int file)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a46:	2301      	movs	r3, #1
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a78:	4a14      	ldr	r2, [pc, #80]	@ (8002acc <_sbrk+0x5c>)
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <_sbrk+0x60>)
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <_sbrk+0x64>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <_sbrk+0x68>)
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d207      	bcs.n	8002ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa0:	f008 fea6 	bl	800b7f0 <__errno>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e009      	b.n	8002ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <_sbrk+0x64>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	4a05      	ldr	r2, [pc, #20]	@ (8002ad4 <_sbrk+0x64>)
 8002ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20020000 	.word	0x20020000
 8002ad0:	00000400 	.word	0x00000400
 8002ad4:	200001f0 	.word	0x200001f0
 8002ad8:	20000b00 	.word	0x20000b00

08002adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ae0:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <SystemInit+0x20>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae6:	4a05      	ldr	r2, [pc, #20]	@ (8002afc <SystemInit+0x20>)
 8002ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b04:	f7ff ffea 	bl	8002adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b08:	480c      	ldr	r0, [pc, #48]	@ (8002b3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b0a:	490d      	ldr	r1, [pc, #52]	@ (8002b40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b10:	e002      	b.n	8002b18 <LoopCopyDataInit>

08002b12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b16:	3304      	adds	r3, #4

08002b18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b1c:	d3f9      	bcc.n	8002b12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b20:	4c0a      	ldr	r4, [pc, #40]	@ (8002b4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b24:	e001      	b.n	8002b2a <LoopFillZerobss>

08002b26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b28:	3204      	adds	r2, #4

08002b2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b2c:	d3fb      	bcc.n	8002b26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b2e:	f008 fe65 	bl	800b7fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b32:	f7fd fe6f 	bl	8000814 <main>
  bx  lr    
 8002b36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b40:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002b44:	0800c534 	.word	0x0800c534
  ldr r2, =_sbss
 8002b48:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002b4c:	20000b00 	.word	0x20000b00

08002b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b50:	e7fe      	b.n	8002b50 <ADC_IRQHandler>
	...

08002b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b58:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <HAL_Init+0x40>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b94 <HAL_Init+0x40>)
 8002b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b64:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <HAL_Init+0x40>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0a      	ldr	r2, [pc, #40]	@ (8002b94 <HAL_Init+0x40>)
 8002b6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b70:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <HAL_Init+0x40>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a07      	ldr	r2, [pc, #28]	@ (8002b94 <HAL_Init+0x40>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f000 f94f 	bl	8002e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b82:	2000      	movs	r0, #0
 8002b84:	f000 f808 	bl	8002b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b88:	f7ff fd44 	bl	8002614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023c00 	.word	0x40023c00

08002b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba0:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <HAL_InitTick+0x54>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <HAL_InitTick+0x58>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f967 	bl	8002e8a <HAL_SYSTICK_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e00e      	b.n	8002be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b0f      	cmp	r3, #15
 8002bca:	d80a      	bhi.n	8002be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	f000 f92f 	bl	8002e36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bd8:	4a06      	ldr	r2, [pc, #24]	@ (8002bf4 <HAL_InitTick+0x5c>)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e000      	b.n	8002be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000008 	.word	0x20000008
 8002bf4:	20000004 	.word	0x20000004

08002bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bfc:	4b06      	ldr	r3, [pc, #24]	@ (8002c18 <HAL_IncTick+0x20>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b06      	ldr	r3, [pc, #24]	@ (8002c1c <HAL_IncTick+0x24>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4413      	add	r3, r2
 8002c08:	4a04      	ldr	r2, [pc, #16]	@ (8002c1c <HAL_IncTick+0x24>)
 8002c0a:	6013      	str	r3, [r2, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000008 	.word	0x20000008
 8002c1c:	200001f4 	.word	0x200001f4

08002c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b03      	ldr	r3, [pc, #12]	@ (8002c34 <HAL_GetTick+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	200001f4 	.word	0x200001f4

08002c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c40:	f7ff ffee 	bl	8002c20 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d005      	beq.n	8002c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_Delay+0x44>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	461a      	mov	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c5e:	bf00      	nop
 8002c60:	f7ff ffde 	bl	8002c20 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d8f7      	bhi.n	8002c60 <HAL_Delay+0x28>
  {
  }
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000008 	.word	0x20000008

08002c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c90:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb2:	4a04      	ldr	r2, [pc, #16]	@ (8002cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	60d3      	str	r3, [r2, #12]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ccc:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	f003 0307 	and.w	r3, r3, #7
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	db0b      	blt.n	8002d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	f003 021f 	and.w	r2, r3, #31
 8002cfc:	4907      	ldr	r1, [pc, #28]	@ (8002d1c <__NVIC_EnableIRQ+0x38>)
 8002cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	2001      	movs	r0, #1
 8002d06:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000e100 	.word	0xe000e100

08002d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	6039      	str	r1, [r7, #0]
 8002d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	db0a      	blt.n	8002d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	490c      	ldr	r1, [pc, #48]	@ (8002d6c <__NVIC_SetPriority+0x4c>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	440b      	add	r3, r1
 8002d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d48:	e00a      	b.n	8002d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4908      	ldr	r1, [pc, #32]	@ (8002d70 <__NVIC_SetPriority+0x50>)
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	3b04      	subs	r3, #4
 8002d58:	0112      	lsls	r2, r2, #4
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	761a      	strb	r2, [r3, #24]
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	e000e100 	.word	0xe000e100
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	@ 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f1c3 0307 	rsb	r3, r3, #7
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	bf28      	it	cs
 8002d92:	2304      	movcs	r3, #4
 8002d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	2b06      	cmp	r3, #6
 8002d9c:	d902      	bls.n	8002da4 <NVIC_EncodePriority+0x30>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	3b03      	subs	r3, #3
 8002da2:	e000      	b.n	8002da6 <NVIC_EncodePriority+0x32>
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43da      	mvns	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	401a      	ands	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc6:	43d9      	mvns	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dcc:	4313      	orrs	r3, r2
         );
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3724      	adds	r7, #36	@ 0x24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
	...

08002ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dec:	d301      	bcc.n	8002df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00f      	b.n	8002e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <SysTick_Config+0x40>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dfa:	210f      	movs	r1, #15
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002e00:	f7ff ff8e 	bl	8002d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e04:	4b05      	ldr	r3, [pc, #20]	@ (8002e1c <SysTick_Config+0x40>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0a:	4b04      	ldr	r3, [pc, #16]	@ (8002e1c <SysTick_Config+0x40>)
 8002e0c:	2207      	movs	r2, #7
 8002e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	e000e010 	.word	0xe000e010

08002e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff29 	bl	8002c80 <__NVIC_SetPriorityGrouping>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b086      	sub	sp, #24
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e48:	f7ff ff3e 	bl	8002cc8 <__NVIC_GetPriorityGrouping>
 8002e4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff ff8e 	bl	8002d74 <NVIC_EncodePriority>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff5d 	bl	8002d20 <__NVIC_SetPriority>
}
 8002e66:	bf00      	nop
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff31 	bl	8002ce4 <__NVIC_EnableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ffa2 	bl	8002ddc <SysTick_Config>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b089      	sub	sp, #36	@ 0x24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	e16b      	b.n	8003198 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	f040 815a 	bne.w	8003192 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d005      	beq.n	8002ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d130      	bne.n	8002f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	2203      	movs	r2, #3
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 0201 	and.w	r2, r3, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d017      	beq.n	8002f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 0303 	and.w	r3, r3, #3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d123      	bne.n	8002fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	08da      	lsrs	r2, r3, #3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3208      	adds	r2, #8
 8002fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fae:	69fb      	ldr	r3, [r7, #28]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	08da      	lsrs	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	69b9      	ldr	r1, [r7, #24]
 8002fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0203 	and.w	r2, r3, #3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80b4 	beq.w	8003192 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b60      	ldr	r3, [pc, #384]	@ (80031b0 <HAL_GPIO_Init+0x30c>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003032:	4a5f      	ldr	r2, [pc, #380]	@ (80031b0 <HAL_GPIO_Init+0x30c>)
 8003034:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003038:	6453      	str	r3, [r2, #68]	@ 0x44
 800303a:	4b5d      	ldr	r3, [pc, #372]	@ (80031b0 <HAL_GPIO_Init+0x30c>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003046:	4a5b      	ldr	r2, [pc, #364]	@ (80031b4 <HAL_GPIO_Init+0x310>)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	3302      	adds	r3, #2
 800304e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	220f      	movs	r2, #15
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a52      	ldr	r2, [pc, #328]	@ (80031b8 <HAL_GPIO_Init+0x314>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d02b      	beq.n	80030ca <HAL_GPIO_Init+0x226>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a51      	ldr	r2, [pc, #324]	@ (80031bc <HAL_GPIO_Init+0x318>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d025      	beq.n	80030c6 <HAL_GPIO_Init+0x222>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a50      	ldr	r2, [pc, #320]	@ (80031c0 <HAL_GPIO_Init+0x31c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d01f      	beq.n	80030c2 <HAL_GPIO_Init+0x21e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4f      	ldr	r2, [pc, #316]	@ (80031c4 <HAL_GPIO_Init+0x320>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d019      	beq.n	80030be <HAL_GPIO_Init+0x21a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4e      	ldr	r2, [pc, #312]	@ (80031c8 <HAL_GPIO_Init+0x324>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0x216>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a4d      	ldr	r2, [pc, #308]	@ (80031cc <HAL_GPIO_Init+0x328>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00d      	beq.n	80030b6 <HAL_GPIO_Init+0x212>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a4c      	ldr	r2, [pc, #304]	@ (80031d0 <HAL_GPIO_Init+0x32c>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x20e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a4b      	ldr	r2, [pc, #300]	@ (80031d4 <HAL_GPIO_Init+0x330>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d101      	bne.n	80030ae <HAL_GPIO_Init+0x20a>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e00e      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030ae:	2308      	movs	r3, #8
 80030b0:	e00c      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030b2:	2306      	movs	r3, #6
 80030b4:	e00a      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030b6:	2305      	movs	r3, #5
 80030b8:	e008      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030ba:	2304      	movs	r3, #4
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030be:	2303      	movs	r3, #3
 80030c0:	e004      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030c6:	2301      	movs	r3, #1
 80030c8:	e000      	b.n	80030cc <HAL_GPIO_Init+0x228>
 80030ca:	2300      	movs	r3, #0
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	f002 0203 	and.w	r2, r2, #3
 80030d2:	0092      	lsls	r2, r2, #2
 80030d4:	4093      	lsls	r3, r2
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030dc:	4935      	ldr	r1, [pc, #212]	@ (80031b4 <HAL_GPIO_Init+0x310>)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	089b      	lsrs	r3, r3, #2
 80030e2:	3302      	adds	r3, #2
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ea:	4b3b      	ldr	r3, [pc, #236]	@ (80031d8 <HAL_GPIO_Init+0x334>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800310e:	4a32      	ldr	r2, [pc, #200]	@ (80031d8 <HAL_GPIO_Init+0x334>)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003114:	4b30      	ldr	r3, [pc, #192]	@ (80031d8 <HAL_GPIO_Init+0x334>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003138:	4a27      	ldr	r2, [pc, #156]	@ (80031d8 <HAL_GPIO_Init+0x334>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800313e:	4b26      	ldr	r3, [pc, #152]	@ (80031d8 <HAL_GPIO_Init+0x334>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003162:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <HAL_GPIO_Init+0x334>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <HAL_GPIO_Init+0x334>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800318c:	4a12      	ldr	r2, [pc, #72]	@ (80031d8 <HAL_GPIO_Init+0x334>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3301      	adds	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b0f      	cmp	r3, #15
 800319c:	f67f ae90 	bls.w	8002ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031a0:	bf00      	nop
 80031a2:	bf00      	nop
 80031a4:	3724      	adds	r7, #36	@ 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40013800 	.word	0x40013800
 80031b8:	40020000 	.word	0x40020000
 80031bc:	40020400 	.word	0x40020400
 80031c0:	40020800 	.word	0x40020800
 80031c4:	40020c00 	.word	0x40020c00
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40021400 	.word	0x40021400
 80031d0:	40021800 	.word	0x40021800
 80031d4:	40021c00 	.word	0x40021c00
 80031d8:	40013c00 	.word	0x40013c00

080031dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
 80031e8:	4613      	mov	r3, r2
 80031ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ec:	787b      	ldrb	r3, [r7, #1]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031f8:	e003      	b.n	8003202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031fa:	887b      	ldrh	r3, [r7, #2]
 80031fc:	041a      	lsls	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	619a      	str	r2, [r3, #24]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b086      	sub	sp, #24
 8003212:	af02      	add	r7, sp, #8
 8003214:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e059      	b.n	80032d4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f007 fc3a 	bl	800aab4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2203      	movs	r2, #3
 8003244:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800324e:	d102      	bne.n	8003256 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f004 fa53 	bl	8007706 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7c1a      	ldrb	r2, [r3, #16]
 8003268:	f88d 2000 	strb.w	r2, [sp]
 800326c:	3304      	adds	r3, #4
 800326e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003270:	f004 f9d4 	bl	800761c <USB_CoreInit>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e026      	b.n	80032d4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2101      	movs	r1, #1
 800328c:	4618      	mov	r0, r3
 800328e:	f004 fa4b 	bl	8007728 <USB_SetCurrentMode>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e017      	b.n	80032d4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7c1a      	ldrb	r2, [r3, #16]
 80032ac:	f88d 2000 	strb.w	r2, [sp]
 80032b0:	3304      	adds	r3, #4
 80032b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032b4:	f004 fbee 	bl	8007a94 <USB_HostInit>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d005      	beq.n	80032ca <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e004      	b.n	80032d4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80032dc:	b590      	push	{r4, r7, lr}
 80032de:	b08b      	sub	sp, #44	@ 0x2c
 80032e0:	af04      	add	r7, sp, #16
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	4608      	mov	r0, r1
 80032e6:	4611      	mov	r1, r2
 80032e8:	461a      	mov	r2, r3
 80032ea:	4603      	mov	r3, r0
 80032ec:	70fb      	strb	r3, [r7, #3]
 80032ee:	460b      	mov	r3, r1
 80032f0:	70bb      	strb	r3, [r7, #2]
 80032f2:	4613      	mov	r3, r2
 80032f4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80032f6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80032f8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_HCD_HC_Init+0x2c>
 8003304:	2302      	movs	r3, #2
 8003306:	e09d      	b.n	8003444 <HAL_HCD_HC_Init+0x168>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003310:	78fa      	ldrb	r2, [r7, #3]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	1a9b      	subs	r3, r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3319      	adds	r3, #25
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3314      	adds	r3, #20
 8003334:	787a      	ldrb	r2, [r7, #1]
 8003336:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003338:	78fa      	ldrb	r2, [r7, #3]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	011b      	lsls	r3, r3, #4
 8003340:	1a9b      	subs	r3, r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3315      	adds	r3, #21
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	3326      	adds	r3, #38	@ 0x26
 800335c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003360:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	78bb      	ldrb	r3, [r7, #2]
 8003366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800336a:	b2d8      	uxtb	r0, r3
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	3316      	adds	r3, #22
 800337a:	4602      	mov	r2, r0
 800337c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 fbc8 	bl	8003b18 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003388:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800338c:	2b00      	cmp	r3, #0
 800338e:	da0a      	bge.n	80033a6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3317      	adds	r3, #23
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
 80033a4:	e009      	b.n	80033ba <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	3317      	adds	r3, #23
 80033b6:	2200      	movs	r2, #0
 80033b8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f004 fccc 	bl	8007d5c <USB_GetHostSpeed>
 80033c4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80033c6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d10b      	bne.n	80033e6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80033ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_HCD_HC_Init+0x10a>
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2bbc      	cmp	r3, #188	@ 0xbc
 80033e0:	d901      	bls.n	80033e6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80033e2:	23bc      	movs	r3, #188	@ 0xbc
 80033e4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3318      	adds	r3, #24
 80033f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80033fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	b298      	uxth	r0, r3
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3328      	adds	r3, #40	@ 0x28
 8003410:	4602      	mov	r2, r0
 8003412:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	b29b      	uxth	r3, r3
 800341c:	787c      	ldrb	r4, [r7, #1]
 800341e:	78ba      	ldrb	r2, [r7, #2]
 8003420:	78f9      	ldrb	r1, [r7, #3]
 8003422:	9302      	str	r3, [sp, #8]
 8003424:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003428:	9301      	str	r3, [sp, #4]
 800342a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800342e:	9300      	str	r3, [sp, #0]
 8003430:	4623      	mov	r3, r4
 8003432:	f004 fcbb 	bl	8007dac <USB_HC_Init>
 8003436:	4603      	mov	r3, r0
 8003438:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003442:	7bfb      	ldrb	r3, [r7, #15]
}
 8003444:	4618      	mov	r0, r3
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}

0800344c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_HCD_HC_Halt+0x1e>
 8003466:	2302      	movs	r3, #2
 8003468:	e00f      	b.n	800348a <HAL_HCD_HC_Halt+0x3e>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	4611      	mov	r1, r2
 800347a:	4618      	mov	r0, r3
 800347c:	f005 f84d 	bl	800851a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	4608      	mov	r0, r1
 800349e:	4611      	mov	r1, r2
 80034a0:	461a      	mov	r2, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	70fb      	strb	r3, [r7, #3]
 80034a6:	460b      	mov	r3, r1
 80034a8:	70bb      	strb	r3, [r7, #2]
 80034aa:	4613      	mov	r3, r2
 80034ac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80034ae:	78fa      	ldrb	r2, [r7, #3]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3317      	adds	r3, #23
 80034be:	78ba      	ldrb	r2, [r7, #2]
 80034c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3326      	adds	r3, #38	@ 0x26
 80034d2:	787a      	ldrb	r2, [r7, #1]
 80034d4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80034d6:	7c3b      	ldrb	r3, [r7, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d114      	bne.n	8003506 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80034dc:	78fa      	ldrb	r2, [r7, #3]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	332a      	adds	r3, #42	@ 0x2a
 80034ec:	2203      	movs	r2, #3
 80034ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3319      	adds	r3, #25
 8003500:	7f3a      	ldrb	r2, [r7, #28]
 8003502:	701a      	strb	r2, [r3, #0]
 8003504:	e009      	b.n	800351a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	011b      	lsls	r3, r3, #4
 800350e:	1a9b      	subs	r3, r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	332a      	adds	r3, #42	@ 0x2a
 8003516:	2202      	movs	r2, #2
 8003518:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800351a:	787b      	ldrb	r3, [r7, #1]
 800351c:	2b03      	cmp	r3, #3
 800351e:	f200 8102 	bhi.w	8003726 <HAL_HCD_HC_SubmitRequest+0x292>
 8003522:	a201      	add	r2, pc, #4	@ (adr r2, 8003528 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	08003539 	.word	0x08003539
 800352c:	08003711 	.word	0x08003711
 8003530:	080035fd 	.word	0x080035fd
 8003534:	08003687 	.word	0x08003687
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003538:	7c3b      	ldrb	r3, [r7, #16]
 800353a:	2b01      	cmp	r3, #1
 800353c:	f040 80f5 	bne.w	800372a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003540:	78bb      	ldrb	r3, [r7, #2]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d12d      	bne.n	80035a2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8003546:	8b3b      	ldrh	r3, [r7, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	333d      	adds	r3, #61	@ 0x3d
 800355c:	2201      	movs	r2, #1
 800355e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	333d      	adds	r3, #61	@ 0x3d
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10a      	bne.n	800358c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	332a      	adds	r3, #42	@ 0x2a
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800358a:	e0ce      	b.n	800372a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	332a      	adds	r3, #42	@ 0x2a
 800359c:	2202      	movs	r2, #2
 800359e:	701a      	strb	r2, [r3, #0]
      break;
 80035a0:	e0c3      	b.n	800372a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	331a      	adds	r3, #26
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	f040 80b8 	bne.w	800372a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	333c      	adds	r3, #60	@ 0x3c
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	332a      	adds	r3, #42	@ 0x2a
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
      break;
 80035e4:	e0a1      	b.n	800372a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	332a      	adds	r3, #42	@ 0x2a
 80035f6:	2202      	movs	r2, #2
 80035f8:	701a      	strb	r2, [r3, #0]
      break;
 80035fa:	e096      	b.n	800372a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80035fc:	78bb      	ldrb	r3, [r7, #2]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d120      	bne.n	8003644 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	333d      	adds	r3, #61	@ 0x3d
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10a      	bne.n	800362e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	332a      	adds	r3, #42	@ 0x2a
 8003628:	2200      	movs	r2, #0
 800362a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800362c:	e07e      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	332a      	adds	r3, #42	@ 0x2a
 800363e:	2202      	movs	r2, #2
 8003640:	701a      	strb	r2, [r3, #0]
      break;
 8003642:	e073      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	333c      	adds	r3, #60	@ 0x3c
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10a      	bne.n	8003670 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	332a      	adds	r3, #42	@ 0x2a
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
      break;
 800366e:	e05d      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003670:	78fa      	ldrb	r2, [r7, #3]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	011b      	lsls	r3, r3, #4
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	332a      	adds	r3, #42	@ 0x2a
 8003680:	2202      	movs	r2, #2
 8003682:	701a      	strb	r2, [r3, #0]
      break;
 8003684:	e052      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003686:	78bb      	ldrb	r3, [r7, #2]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d120      	bne.n	80036ce <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	333d      	adds	r3, #61	@ 0x3d
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	332a      	adds	r3, #42	@ 0x2a
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80036b6:	e039      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	332a      	adds	r3, #42	@ 0x2a
 80036c8:	2202      	movs	r2, #2
 80036ca:	701a      	strb	r2, [r3, #0]
      break;
 80036cc:	e02e      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	333c      	adds	r3, #60	@ 0x3c
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10a      	bne.n	80036fa <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	332a      	adds	r3, #42	@ 0x2a
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
      break;
 80036f8:	e018      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	332a      	adds	r3, #42	@ 0x2a
 800370a:	2202      	movs	r2, #2
 800370c:	701a      	strb	r2, [r3, #0]
      break;
 800370e:	e00d      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	332a      	adds	r3, #42	@ 0x2a
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
      break;
 8003724:	e002      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800372a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	332c      	adds	r3, #44	@ 0x2c
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	8b39      	ldrh	r1, [r7, #24]
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4403      	add	r3, r0
 8003750:	3334      	adds	r3, #52	@ 0x34
 8003752:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	334c      	adds	r3, #76	@ 0x4c
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3338      	adds	r3, #56	@ 0x38
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3315      	adds	r3, #21
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	1a9b      	subs	r3, r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	334d      	adds	r3, #77	@ 0x4d
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	4613      	mov	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3310      	adds	r3, #16
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	1d19      	adds	r1, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	799b      	ldrb	r3, [r3, #6]
 80037be:	461a      	mov	r2, r3
 80037c0:	f004 fc20 	bl	8008004 <USB_HC_StartXfer>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop

080037d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f004 f914 	bl	8007a14 <USB_GetMode>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	f040 80fb 	bne.w	80039ea <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f004 f8d7 	bl	80079ac <USB_ReadInterrupts>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80f1 	beq.w	80039e8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f004 f8ce 	bl	80079ac <USB_ReadInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003816:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800381a:	d104      	bne.n	8003826 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003824:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f004 f8be 	bl	80079ac <USB_ReadInterrupts>
 8003830:	4603      	mov	r3, r0
 8003832:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003836:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800383a:	d104      	bne.n	8003846 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003844:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f004 f8ae 	bl	80079ac <USB_ReadInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003856:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800385a:	d104      	bne.n	8003866 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003864:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f004 f89e 	bl	80079ac <USB_ReadInterrupts>
 8003870:	4603      	mov	r3, r0
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b02      	cmp	r3, #2
 8003878:	d103      	bne.n	8003882 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2202      	movs	r2, #2
 8003880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4618      	mov	r0, r3
 8003888:	f004 f890 	bl	80079ac <USB_ReadInterrupts>
 800388c:	4603      	mov	r3, r0
 800388e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003896:	d120      	bne.n	80038da <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80038a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80038b2:	2110      	movs	r1, #16
 80038b4:	6938      	ldr	r0, [r7, #16]
 80038b6:	f003 ff83 	bl	80077c0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80038ba:	6938      	ldr	r0, [r7, #16]
 80038bc:	f003 ffb2 	bl	8007824 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	7a5b      	ldrb	r3, [r3, #9]
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d105      	bne.n	80038d4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f004 f9a4 	bl	8007c1c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f007 f96b 	bl	800abb0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f004 f864 	bl	80079ac <USB_ReadInterrupts>
 80038e4:	4603      	mov	r3, r0
 80038e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038ee:	d102      	bne.n	80038f6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f001 fd4d 	bl	8005390 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f004 f856 	bl	80079ac <USB_ReadInterrupts>
 8003900:	4603      	mov	r3, r0
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d106      	bne.n	8003918 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f007 f934 	bl	800ab78 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2208      	movs	r2, #8
 8003916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f004 f845 	bl	80079ac <USB_ReadInterrupts>
 8003922:	4603      	mov	r3, r0
 8003924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003928:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800392c:	d139      	bne.n	80039a2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 fde0 	bl	80084f8 <USB_HC_ReadInterrupt>
 8003938:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
 800393e:	e025      	b.n	800398c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	68ba      	ldr	r2, [r7, #8]
 8003948:	fa22 f303 	lsr.w	r3, r2, r3
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d018      	beq.n	8003986 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003966:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800396a:	d106      	bne.n	800397a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	4619      	mov	r1, r3
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 f905 	bl	8003b82 <HCD_HC_IN_IRQHandler>
 8003978:	e005      	b.n	8003986 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	4619      	mov	r1, r3
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 ff67 	bl	8004854 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	3301      	adds	r3, #1
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	795b      	ldrb	r3, [r3, #5]
 8003990:	461a      	mov	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	4293      	cmp	r3, r2
 8003996:	d3d3      	bcc.n	8003940 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 f800 	bl	80079ac <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f003 0310 	and.w	r3, r3, #16
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d101      	bne.n	80039ba <HAL_HCD_IRQHandler+0x1ea>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <HAL_HCD_IRQHandler+0x1ec>
 80039ba:	2300      	movs	r3, #0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d014      	beq.n	80039ea <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699a      	ldr	r2, [r3, #24]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0210 	bic.w	r2, r2, #16
 80039ce:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f001 fbfe 	bl	80051d2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699a      	ldr	r2, [r3, #24]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0210 	orr.w	r2, r2, #16
 80039e4:	619a      	str	r2, [r3, #24]
 80039e6:	e000      	b.n	80039ea <HAL_HCD_IRQHandler+0x21a>
      return;
 80039e8:	bf00      	nop
    }
  }
}
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_HCD_Start+0x16>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e013      	b.n	8003a2e <HAL_HCD_Start+0x3e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2101      	movs	r1, #1
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 f968 	bl	8007cea <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f003 fe60 	bl	80076e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d101      	bne.n	8003a4c <HAL_HCD_Stop+0x16>
 8003a48:	2302      	movs	r3, #2
 8003a4a:	e00d      	b.n	8003a68 <HAL_HCD_Stop+0x32>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f004 febb 	bl	80087d4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f004 f90a 	bl	8007c96 <USB_ResetPort>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	334c      	adds	r3, #76	@ 0x4c
 8003aa8:	781b      	ldrb	r3, [r3, #0]
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	1a9b      	subs	r3, r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3338      	adds	r3, #56	@ 0x38
 8003ad2:	681b      	ldr	r3, [r3, #0]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f004 f94c 	bl	8007d8a <USB_GetCurrentFrame>
 8003af2:	4603      	mov	r3, r0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 f927 	bl	8007d5c <USB_GetHostSpeed>
 8003b0e:	4603      	mov	r3, r0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	460b      	mov	r3, r1
 8003b22:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	331a      	adds	r3, #26
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	331b      	adds	r3, #27
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3325      	adds	r3, #37	@ 0x25
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3324      	adds	r3, #36	@ 0x24
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f003 ff16 	bl	80079d2 <USB_ReadChInterrupts>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d11a      	bne.n	8003be6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2304      	movs	r3, #4
 8003bc0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	334d      	adds	r3, #77	@ 0x4d
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	4611      	mov	r1, r2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f004 fc9b 	bl	800851a <USB_HC_Halt>
 8003be4:	e09e      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	4611      	mov	r1, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f003 feef 	bl	80079d2 <USB_ReadChInterrupts>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bfe:	d11b      	bne.n	8003c38 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	334d      	adds	r3, #77	@ 0x4d
 8003c24:	2208      	movs	r2, #8
 8003c26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f004 fc72 	bl	800851a <USB_HC_Halt>
 8003c36:	e075      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fec6 	bl	80079d2 <USB_ReadChInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d11a      	bne.n	8003c86 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2308      	movs	r3, #8
 8003c60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334d      	adds	r3, #77	@ 0x4d
 8003c72:	2206      	movs	r2, #6
 8003c74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f004 fc4b 	bl	800851a <USB_HC_Halt>
 8003c84:	e04e      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f003 fe9f 	bl	80079d2 <USB_ReadChInterrupts>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9e:	d11b      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cac:	461a      	mov	r2, r3
 8003cae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003cb4:	78fa      	ldrb	r2, [r7, #3]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	334d      	adds	r3, #77	@ 0x4d
 8003cc4:	2209      	movs	r2, #9
 8003cc6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f004 fc22 	bl	800851a <USB_HC_Halt>
 8003cd6:	e025      	b.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fe76 	bl	80079d2 <USB_ReadChInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cec:	2b80      	cmp	r3, #128	@ 0x80
 8003cee:	d119      	bne.n	8003d24 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	2380      	movs	r3, #128	@ 0x80
 8003d00:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334d      	adds	r3, #77	@ 0x4d
 8003d12:	2207      	movs	r2, #7
 8003d14:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 fbfb 	bl	800851a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f003 fe50 	bl	80079d2 <USB_ReadChInterrupts>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d3c:	d112      	bne.n	8003d64 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 fbe7 	bl	800851a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d5e:	6093      	str	r3, [r2, #8]
 8003d60:	f000 bd75 	b.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	4611      	mov	r1, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f003 fe30 	bl	80079d2 <USB_ReadChInterrupts>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	f040 8128 	bne.w	8003fce <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d90:	78fa      	ldrb	r2, [r7, #3]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	011b      	lsls	r3, r3, #4
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	331b      	adds	r3, #27
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d119      	bne.n	8003dda <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	331b      	adds	r3, #27
 8003db6:	2200      	movs	r2, #0
 8003db8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dd8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	799b      	ldrb	r3, [r3, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d01b      	beq.n	8003e1a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	3330      	adds	r3, #48	@ 0x30
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	1ac9      	subs	r1, r1, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4403      	add	r3, r0
 8003e16:	3338      	adds	r3, #56	@ 0x38
 8003e18:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	334d      	adds	r3, #77	@ 0x4d
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	6879      	ldr	r1, [r7, #4]
 8003e32:	4613      	mov	r3, r2
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	1a9b      	subs	r3, r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	3344      	adds	r3, #68	@ 0x44
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2301      	movs	r3, #1
 8003e52:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	3326      	adds	r3, #38	@ 0x26
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	1a9b      	subs	r3, r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	440b      	add	r3, r1
 8003e78:	3326      	adds	r3, #38	@ 0x26
 8003e7a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d110      	bne.n	8003ea2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f004 fb46 	bl	800851a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2310      	movs	r3, #16
 8003e9e:	6093      	str	r3, [r2, #8]
 8003ea0:	e03d      	b.n	8003f1e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	3326      	adds	r3, #38	@ 0x26
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d00a      	beq.n	8003ece <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	3326      	adds	r3, #38	@ 0x26
 8003ec8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d127      	bne.n	8003f1e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	0151      	lsls	r1, r2, #5
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	440a      	add	r2, r1
 8003ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ee8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003eec:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	334c      	adds	r3, #76	@ 0x4c
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f02:	78fa      	ldrb	r2, [r7, #3]
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	440b      	add	r3, r1
 8003f10:	334c      	adds	r3, #76	@ 0x4c
 8003f12:	781a      	ldrb	r2, [r3, #0]
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f006 fe57 	bl	800abcc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	799b      	ldrb	r3, [r3, #6]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d13b      	bne.n	8003f9e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	3338      	adds	r3, #56	@ 0x38
 8003f36:	6819      	ldr	r1, [r3, #0]
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	4403      	add	r3, r0
 8003f46:	3328      	adds	r3, #40	@ 0x28
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	440b      	add	r3, r1
 8003f4c:	1e59      	subs	r1, r3, #1
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4403      	add	r3, r0
 8003f5c:	3328      	adds	r3, #40	@ 0x28
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8470 	beq.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	333c      	adds	r3, #60	@ 0x3c
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	78fa      	ldrb	r2, [r7, #3]
 8003f82:	f083 0301 	eor.w	r3, r3, #1
 8003f86:	b2d8      	uxtb	r0, r3
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	333c      	adds	r3, #60	@ 0x3c
 8003f96:	4602      	mov	r2, r0
 8003f98:	701a      	strb	r2, [r3, #0]
 8003f9a:	f000 bc58 	b.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	333c      	adds	r3, #60	@ 0x3c
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	f083 0301 	eor.w	r3, r3, #1
 8003fb6:	b2d8      	uxtb	r0, r3
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	333c      	adds	r3, #60	@ 0x3c
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	f000 bc40 	b.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	4611      	mov	r1, r2
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f003 fcfb 	bl	80079d2 <USB_ReadChInterrupts>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d131      	bne.n	800404a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	331a      	adds	r3, #26
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	f040 841f 	bne.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	331b      	adds	r3, #27
 8004020:	2201      	movs	r2, #1
 8004022:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	334d      	adds	r3, #77	@ 0x4d
 8004034:	2203      	movs	r2, #3
 8004036:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f004 fa6a 	bl	800851a <USB_HC_Halt>
 8004046:	f000 bc02 	b.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f003 fcbd 	bl	80079d2 <USB_ReadChInterrupts>
 8004058:	4603      	mov	r3, r0
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	f040 8305 	bne.w	800466e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004070:	461a      	mov	r2, r3
 8004072:	2302      	movs	r3, #2
 8004074:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004076:	78fa      	ldrb	r2, [r7, #3]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	334d      	adds	r3, #77	@ 0x4d
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d114      	bne.n	80040b6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334d      	adds	r3, #77	@ 0x4d
 800409c:	2202      	movs	r2, #2
 800409e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	334c      	adds	r3, #76	@ 0x4c
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e2cc      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334d      	adds	r3, #77	@ 0x4d
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b06      	cmp	r3, #6
 80040ca:	d114      	bne.n	80040f6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	2202      	movs	r2, #2
 80040de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	334c      	adds	r3, #76	@ 0x4c
 80040f0:	2205      	movs	r2, #5
 80040f2:	701a      	strb	r2, [r3, #0]
 80040f4:	e2ac      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	334d      	adds	r3, #77	@ 0x4d
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b07      	cmp	r3, #7
 800410a:	d00b      	beq.n	8004124 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	440b      	add	r3, r1
 800411a:	334d      	adds	r3, #77	@ 0x4d
 800411c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800411e:	2b09      	cmp	r3, #9
 8004120:	f040 80a6 	bne.w	8004270 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	334d      	adds	r3, #77	@ 0x4d
 8004134:	2202      	movs	r2, #2
 8004136:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004138:	78fa      	ldrb	r2, [r7, #3]
 800413a:	6879      	ldr	r1, [r7, #4]
 800413c:	4613      	mov	r3, r2
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	440b      	add	r3, r1
 8004146:	3344      	adds	r3, #68	@ 0x44
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	1c59      	adds	r1, r3, #1
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4403      	add	r3, r0
 8004158:	3344      	adds	r3, #68	@ 0x44
 800415a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800415c:	78fa      	ldrb	r2, [r7, #3]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	3344      	adds	r3, #68	@ 0x44
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d943      	bls.n	80041fa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	3344      	adds	r3, #68	@ 0x44
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	331a      	adds	r3, #26
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d123      	bne.n	80041e4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	6879      	ldr	r1, [r7, #4]
 80041a0:	4613      	mov	r3, r2
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	1a9b      	subs	r3, r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	331b      	adds	r3, #27
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80041b0:	78fa      	ldrb	r2, [r7, #3]
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	4613      	mov	r3, r2
 80041b6:	011b      	lsls	r3, r3, #4
 80041b8:	1a9b      	subs	r3, r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	331c      	adds	r3, #28
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	0151      	lsls	r1, r2, #5
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	440a      	add	r2, r1
 80041da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041e2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	334c      	adds	r3, #76	@ 0x4c
 80041f4:	2204      	movs	r2, #4
 80041f6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041f8:	e229      	b.n	800464e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	334c      	adds	r3, #76	@ 0x4c
 800420a:	2202      	movs	r2, #2
 800420c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3326      	adds	r3, #38	@ 0x26
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00b      	beq.n	800423c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004224:	78fa      	ldrb	r2, [r7, #3]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	4613      	mov	r3, r2
 800422a:	011b      	lsls	r3, r3, #4
 800422c:	1a9b      	subs	r3, r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	440b      	add	r3, r1
 8004232:	3326      	adds	r3, #38	@ 0x26
 8004234:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004236:	2b02      	cmp	r3, #2
 8004238:	f040 8209 	bne.w	800464e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	015a      	lsls	r2, r3, #5
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4413      	add	r3, r2
 8004244:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004252:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800425a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800425c:	78fb      	ldrb	r3, [r7, #3]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004268:	461a      	mov	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800426e:	e1ee      	b.n	800464e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	334d      	adds	r3, #77	@ 0x4d
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b05      	cmp	r3, #5
 8004284:	f040 80c8 	bne.w	8004418 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	334d      	adds	r3, #77	@ 0x4d
 8004298:	2202      	movs	r2, #2
 800429a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800429c:	78fa      	ldrb	r2, [r7, #3]
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	4613      	mov	r3, r2
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	1a9b      	subs	r3, r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	331b      	adds	r3, #27
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	f040 81ce 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	3326      	adds	r3, #38	@ 0x26
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d16b      	bne.n	80043a2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	3348      	adds	r3, #72	@ 0x48
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	1c59      	adds	r1, r3, #1
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4403      	add	r3, r0
 80042ea:	3348      	adds	r3, #72	@ 0x48
 80042ec:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	3348      	adds	r3, #72	@ 0x48
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d943      	bls.n	800438c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	3348      	adds	r3, #72	@ 0x48
 8004314:	2200      	movs	r2, #0
 8004316:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	440b      	add	r3, r1
 8004326:	331b      	adds	r3, #27
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800432c:	78fa      	ldrb	r2, [r7, #3]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	1a9b      	subs	r3, r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	440b      	add	r3, r1
 800433a:	3344      	adds	r3, #68	@ 0x44
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d809      	bhi.n	8004356 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	331c      	adds	r3, #28
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	4413      	add	r3, r2
 800435e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	78fa      	ldrb	r2, [r7, #3]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	440a      	add	r2, r1
 800436c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004374:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004376:	78fa      	ldrb	r2, [r7, #3]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	1a9b      	subs	r3, r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	334c      	adds	r3, #76	@ 0x4c
 8004386:	2204      	movs	r2, #4
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	e014      	b.n	80043b6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	334c      	adds	r3, #76	@ 0x4c
 800439c:	2202      	movs	r2, #2
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e009      	b.n	80043b6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	334c      	adds	r3, #76	@ 0x4c
 80043b2:	2202      	movs	r2, #2
 80043b4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043b6:	78fa      	ldrb	r2, [r7, #3]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	011b      	lsls	r3, r3, #4
 80043be:	1a9b      	subs	r3, r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	3326      	adds	r3, #38	@ 0x26
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00b      	beq.n	80043e4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	3326      	adds	r3, #38	@ 0x26
 80043dc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043de:	2b02      	cmp	r3, #2
 80043e0:	f040 8136 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043fa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004402:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004410:	461a      	mov	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e11b      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	2b03      	cmp	r3, #3
 800442c:	f040 8081 	bne.w	8004532 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	4613      	mov	r3, r2
 8004436:	011b      	lsls	r3, r3, #4
 8004438:	1a9b      	subs	r3, r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	334d      	adds	r3, #77	@ 0x4d
 8004440:	2202      	movs	r2, #2
 8004442:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	331b      	adds	r3, #27
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b01      	cmp	r3, #1
 8004458:	f040 80fa 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	334c      	adds	r3, #76	@ 0x4c
 800446c:	2202      	movs	r2, #2
 800446e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004470:	78fb      	ldrb	r3, [r7, #3]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	0151      	lsls	r1, r2, #5
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	440a      	add	r2, r1
 8004486:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800448a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4413      	add	r3, r2
 8004498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	0151      	lsls	r1, r2, #5
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	440a      	add	r2, r1
 80044a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ae:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	0151      	lsls	r1, r2, #5
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	440a      	add	r2, r1
 80044c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044ca:	f023 0320 	bic.w	r3, r3, #32
 80044ce:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	3326      	adds	r3, #38	@ 0x26
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044e6:	78fa      	ldrb	r2, [r7, #3]
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	4613      	mov	r3, r2
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	1a9b      	subs	r3, r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	440b      	add	r3, r1
 80044f4:	3326      	adds	r3, #38	@ 0x26
 80044f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	f040 80a9 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80044fe:	78fb      	ldrb	r3, [r7, #3]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4413      	add	r3, r2
 8004506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004514:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800451c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800452a:	461a      	mov	r2, r3
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e08e      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	334d      	adds	r3, #77	@ 0x4d
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d143      	bne.n	80045d0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	1a9b      	subs	r3, r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	334d      	adds	r3, #77	@ 0x4d
 8004558:	2202      	movs	r2, #2
 800455a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800455c:	78fa      	ldrb	r2, [r7, #3]
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	1a9b      	subs	r3, r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	334c      	adds	r3, #76	@ 0x4c
 800456c:	2202      	movs	r2, #2
 800456e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	3326      	adds	r3, #38	@ 0x26
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004586:	78fa      	ldrb	r2, [r7, #3]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	011b      	lsls	r3, r3, #4
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	440b      	add	r3, r1
 8004594:	3326      	adds	r3, #38	@ 0x26
 8004596:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004598:	2b02      	cmp	r3, #2
 800459a:	d159      	bne.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80045b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80045ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	015a      	lsls	r2, r3, #5
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c8:	461a      	mov	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6013      	str	r3, [r2, #0]
 80045ce:	e03f      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6879      	ldr	r1, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	334d      	adds	r3, #77	@ 0x4d
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d126      	bne.n	8004634 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	334d      	adds	r3, #77	@ 0x4d
 80045f6:	2202      	movs	r2, #2
 80045f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	3344      	adds	r3, #68	@ 0x44
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	1c59      	adds	r1, r3, #1
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4403      	add	r3, r0
 800461a:	3344      	adds	r3, #68	@ 0x44
 800461c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	4613      	mov	r3, r2
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	1a9b      	subs	r3, r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	440b      	add	r3, r1
 800462c:	334c      	adds	r3, #76	@ 0x4c
 800462e:	2204      	movs	r2, #4
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	e00d      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	334d      	adds	r3, #77	@ 0x4d
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	2b02      	cmp	r3, #2
 8004648:	f000 8100 	beq.w	800484c <HCD_HC_IN_IRQHandler+0xcca>
 800464c:	e000      	b.n	8004650 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800464e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004650:	78fa      	ldrb	r2, [r7, #3]
 8004652:	6879      	ldr	r1, [r7, #4]
 8004654:	4613      	mov	r3, r2
 8004656:	011b      	lsls	r3, r3, #4
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	334c      	adds	r3, #76	@ 0x4c
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f006 fab0 	bl	800abcc <HAL_HCD_HC_NotifyURBChange_Callback>
 800466c:	e0ef      	b.n	800484e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	4611      	mov	r1, r2
 8004676:	4618      	mov	r0, r3
 8004678:	f003 f9ab 	bl	80079d2 <USB_ReadChInterrupts>
 800467c:	4603      	mov	r3, r0
 800467e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004682:	2b40      	cmp	r3, #64	@ 0x40
 8004684:	d12f      	bne.n	80046e6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4413      	add	r3, r2
 800468e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004692:	461a      	mov	r2, r3
 8004694:	2340      	movs	r3, #64	@ 0x40
 8004696:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004698:	78fa      	ldrb	r2, [r7, #3]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	334d      	adds	r3, #77	@ 0x4d
 80046a8:	2205      	movs	r2, #5
 80046aa:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	331a      	adds	r3, #26
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3344      	adds	r3, #68	@ 0x44
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f003 ff1b 	bl	800851a <USB_HC_Halt>
 80046e4:	e0b3      	b.n	800484e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	4611      	mov	r1, r2
 80046ee:	4618      	mov	r0, r3
 80046f0:	f003 f96f 	bl	80079d2 <USB_ReadChInterrupts>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	f040 80a7 	bne.w	800484e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	3326      	adds	r3, #38	@ 0x26
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b03      	cmp	r3, #3
 8004714:	d11b      	bne.n	800474e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3344      	adds	r3, #68	@ 0x44
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	334d      	adds	r3, #77	@ 0x4d
 800473a:	2204      	movs	r2, #4
 800473c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f003 fee7 	bl	800851a <USB_HC_Halt>
 800474c:	e03f      	b.n	80047ce <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	3326      	adds	r3, #38	@ 0x26
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3326      	adds	r3, #38	@ 0x26
 8004774:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004776:	2b02      	cmp	r3, #2
 8004778:	d129      	bne.n	80047ce <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	3344      	adds	r3, #68	@ 0x44
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	799b      	ldrb	r3, [r3, #6]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <HCD_HC_IN_IRQHandler+0xc2a>
 8004796:	78fa      	ldrb	r2, [r7, #3]
 8004798:	6879      	ldr	r1, [r7, #4]
 800479a:	4613      	mov	r3, r2
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	1a9b      	subs	r3, r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	440b      	add	r3, r1
 80047a4:	331b      	adds	r3, #27
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d110      	bne.n	80047ce <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80047ac:	78fa      	ldrb	r2, [r7, #3]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	1a9b      	subs	r3, r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	334d      	adds	r3, #77	@ 0x4d
 80047bc:	2204      	movs	r2, #4
 80047be:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	78fa      	ldrb	r2, [r7, #3]
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f003 fea6 	bl	800851a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	331b      	adds	r3, #27
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d129      	bne.n	8004838 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80047e4:	78fa      	ldrb	r2, [r7, #3]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	331b      	adds	r3, #27
 80047f4:	2200      	movs	r2, #0
 80047f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	78fa      	ldrb	r2, [r7, #3]
 8004808:	0151      	lsls	r1, r2, #5
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	440a      	add	r2, r1
 800480e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004816:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	440a      	add	r2, r1
 800482e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004832:	f043 0320 	orr.w	r3, r3, #32
 8004836:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004838:	78fb      	ldrb	r3, [r7, #3]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	4413      	add	r3, r2
 8004840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004844:	461a      	mov	r2, r3
 8004846:	2310      	movs	r3, #16
 8004848:	6093      	str	r3, [r2, #8]
 800484a:	e000      	b.n	800484e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800484c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	4611      	mov	r1, r2
 8004872:	4618      	mov	r0, r3
 8004874:	f003 f8ad 	bl	80079d2 <USB_ReadChInterrupts>
 8004878:	4603      	mov	r3, r0
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b04      	cmp	r3, #4
 8004880:	d11b      	bne.n	80048ba <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	4413      	add	r3, r2
 800488a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800488e:	461a      	mov	r2, r3
 8004890:	2304      	movs	r3, #4
 8004892:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004894:	78fa      	ldrb	r2, [r7, #3]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	334d      	adds	r3, #77	@ 0x4d
 80048a4:	2207      	movs	r2, #7
 80048a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	4611      	mov	r1, r2
 80048b0:	4618      	mov	r0, r3
 80048b2:	f003 fe32 	bl	800851a <USB_HC_Halt>
 80048b6:	f000 bc89 	b.w	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	4611      	mov	r1, r2
 80048c2:	4618      	mov	r0, r3
 80048c4:	f003 f885 	bl	80079d2 <USB_ReadChInterrupts>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	f040 8082 	bne.w	80049d8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80048d4:	78fb      	ldrb	r3, [r7, #3]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048e0:	461a      	mov	r2, r3
 80048e2:	2320      	movs	r3, #32
 80048e4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	3319      	adds	r3, #25
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d124      	bne.n	8004946 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	3319      	adds	r3, #25
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	334c      	adds	r3, #76	@ 0x4c
 8004920:	2202      	movs	r2, #2
 8004922:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004924:	78fa      	ldrb	r2, [r7, #3]
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	011b      	lsls	r3, r3, #4
 800492c:	1a9b      	subs	r3, r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	334d      	adds	r3, #77	@ 0x4d
 8004934:	2203      	movs	r2, #3
 8004936:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	78fa      	ldrb	r2, [r7, #3]
 800493e:	4611      	mov	r1, r2
 8004940:	4618      	mov	r0, r3
 8004942:	f003 fdea 	bl	800851a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004946:	78fa      	ldrb	r2, [r7, #3]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	331a      	adds	r3, #26
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	f040 8437 	bne.w	80051cc <HCD_HC_OUT_IRQHandler+0x978>
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	331b      	adds	r3, #27
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	f040 842b 	bne.w	80051cc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3326      	adds	r3, #38	@ 0x26
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d009      	beq.n	80049a0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	331b      	adds	r3, #27
 800499c:	2201      	movs	r2, #1
 800499e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	1a9b      	subs	r3, r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	334d      	adds	r3, #77	@ 0x4d
 80049b0:	2203      	movs	r2, #3
 80049b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	4611      	mov	r1, r2
 80049bc:	4618      	mov	r0, r3
 80049be:	f003 fdac 	bl	800851a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	3344      	adds	r3, #68	@ 0x44
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	e3f9      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	78fa      	ldrb	r2, [r7, #3]
 80049de:	4611      	mov	r1, r2
 80049e0:	4618      	mov	r0, r3
 80049e2:	f002 fff6 	bl	80079d2 <USB_ReadChInterrupts>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049f0:	d111      	bne.n	8004a16 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	015a      	lsls	r2, r3, #5
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4413      	add	r3, r2
 80049fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049fe:	461a      	mov	r2, r3
 8004a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004a04:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	4611      	mov	r1, r2
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f003 fd83 	bl	800851a <USB_HC_Halt>
 8004a14:	e3da      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	78fa      	ldrb	r2, [r7, #3]
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f002 ffd7 	bl	80079d2 <USB_ReadChInterrupts>
 8004a24:	4603      	mov	r3, r0
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d168      	bne.n	8004b00 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	3344      	adds	r3, #68	@ 0x44
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	78fa      	ldrb	r2, [r7, #3]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f002 ffc1 	bl	80079d2 <USB_ReadChInterrupts>
 8004a50:	4603      	mov	r3, r0
 8004a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a56:	2b40      	cmp	r3, #64	@ 0x40
 8004a58:	d112      	bne.n	8004a80 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3319      	adds	r3, #25
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2340      	movs	r3, #64	@ 0x40
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004a80:	78fa      	ldrb	r2, [r7, #3]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	331b      	adds	r3, #27
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d019      	beq.n	8004aca <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	331b      	adds	r3, #27
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	78fa      	ldrb	r2, [r7, #3]
 8004aba:	0151      	lsls	r1, r2, #5
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	440a      	add	r2, r1
 8004ac0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	2301      	movs	r3, #1
 8004ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	334d      	adds	r3, #77	@ 0x4d
 8004aec:	2201      	movs	r2, #1
 8004aee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	4611      	mov	r1, r2
 8004af8:	4618      	mov	r0, r3
 8004afa:	f003 fd0e 	bl	800851a <USB_HC_Halt>
 8004afe:	e365      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f002 ff62 	bl	80079d2 <USB_ReadChInterrupts>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	d139      	bne.n	8004b8c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	1a9b      	subs	r3, r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	334d      	adds	r3, #77	@ 0x4d
 8004b28:	2205      	movs	r2, #5
 8004b2a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004b2c:	78fa      	ldrb	r2, [r7, #3]
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4613      	mov	r3, r2
 8004b32:	011b      	lsls	r3, r3, #4
 8004b34:	1a9b      	subs	r3, r3, r2
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	331a      	adds	r3, #26
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	6879      	ldr	r1, [r7, #4]
 8004b46:	4613      	mov	r3, r2
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	1a9b      	subs	r3, r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	440b      	add	r3, r1
 8004b50:	3319      	adds	r3, #25
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004b56:	78fa      	ldrb	r2, [r7, #3]
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	1a9b      	subs	r3, r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	3344      	adds	r3, #68	@ 0x44
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	4611      	mov	r1, r2
 8004b72:	4618      	mov	r0, r3
 8004b74:	f003 fcd1 	bl	800851a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004b78:	78fb      	ldrb	r3, [r7, #3]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b84:	461a      	mov	r2, r3
 8004b86:	2340      	movs	r3, #64	@ 0x40
 8004b88:	6093      	str	r3, [r2, #8]
 8004b8a:	e31f      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	78fa      	ldrb	r2, [r7, #3]
 8004b92:	4611      	mov	r1, r2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f002 ff1c 	bl	80079d2 <USB_ReadChInterrupts>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d11a      	bne.n	8004bda <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	015a      	lsls	r2, r3, #5
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	4413      	add	r3, r2
 8004bac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2308      	movs	r3, #8
 8004bb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	1a9b      	subs	r3, r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	334d      	adds	r3, #77	@ 0x4d
 8004bc6:	2206      	movs	r2, #6
 8004bc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 fca1 	bl	800851a <USB_HC_Halt>
 8004bd8:	e2f8      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	4611      	mov	r1, r2
 8004be2:	4618      	mov	r0, r3
 8004be4:	f002 fef5 	bl	80079d2 <USB_ReadChInterrupts>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d144      	bne.n	8004c7c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3344      	adds	r3, #68	@ 0x44
 8004c02:	2200      	movs	r2, #0
 8004c04:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004c06:	78fa      	ldrb	r2, [r7, #3]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	011b      	lsls	r3, r3, #4
 8004c0e:	1a9b      	subs	r3, r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	334d      	adds	r3, #77	@ 0x4d
 8004c16:	2204      	movs	r2, #4
 8004c18:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004c1a:	78fa      	ldrb	r2, [r7, #3]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	011b      	lsls	r3, r3, #4
 8004c22:	1a9b      	subs	r3, r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	440b      	add	r3, r1
 8004c28:	3319      	adds	r3, #25
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d114      	bne.n	8004c5a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004c30:	78fa      	ldrb	r2, [r7, #3]
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	011b      	lsls	r3, r3, #4
 8004c38:	1a9b      	subs	r3, r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	3318      	adds	r3, #24
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004c46:	78fa      	ldrb	r2, [r7, #3]
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	3319      	adds	r3, #25
 8004c56:	2201      	movs	r2, #1
 8004c58:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	4611      	mov	r1, r2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f003 fc59 	bl	800851a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c74:	461a      	mov	r2, r3
 8004c76:	2310      	movs	r3, #16
 8004c78:	6093      	str	r3, [r2, #8]
 8004c7a:	e2a7      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	78fa      	ldrb	r2, [r7, #3]
 8004c82:	4611      	mov	r1, r2
 8004c84:	4618      	mov	r0, r3
 8004c86:	f002 fea4 	bl	80079d2 <USB_ReadChInterrupts>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c90:	2b80      	cmp	r3, #128	@ 0x80
 8004c92:	f040 8083 	bne.w	8004d9c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	799b      	ldrb	r3, [r3, #6]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d111      	bne.n	8004cc2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004c9e:	78fa      	ldrb	r2, [r7, #3]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	1a9b      	subs	r3, r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	440b      	add	r3, r1
 8004cac:	334d      	adds	r3, #77	@ 0x4d
 8004cae:	2207      	movs	r2, #7
 8004cb0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	4611      	mov	r1, r2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f003 fc2d 	bl	800851a <USB_HC_Halt>
 8004cc0:	e062      	b.n	8004d88 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	1a9b      	subs	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	3344      	adds	r3, #68	@ 0x44
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	1c59      	adds	r1, r3, #1
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4613      	mov	r3, r2
 8004cda:	011b      	lsls	r3, r3, #4
 8004cdc:	1a9b      	subs	r3, r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4403      	add	r3, r0
 8004ce2:	3344      	adds	r3, #68	@ 0x44
 8004ce4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6879      	ldr	r1, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	440b      	add	r3, r1
 8004cf4:	3344      	adds	r3, #68	@ 0x44
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d922      	bls.n	8004d42 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	3344      	adds	r3, #68	@ 0x44
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	440b      	add	r3, r1
 8004d1e:	334c      	adds	r3, #76	@ 0x4c
 8004d20:	2204      	movs	r2, #4
 8004d22:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	011b      	lsls	r3, r3, #4
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	334c      	adds	r3, #76	@ 0x4c
 8004d34:	781a      	ldrb	r2, [r3, #0]
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f005 ff46 	bl	800abcc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004d40:	e022      	b.n	8004d88 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	334c      	adds	r3, #76	@ 0x4c
 8004d52:	2202      	movs	r2, #2
 8004d54:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d6c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d74:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d82:	461a      	mov	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d94:	461a      	mov	r2, r3
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	6093      	str	r3, [r2, #8]
 8004d9a:	e217      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	78fa      	ldrb	r2, [r7, #3]
 8004da2:	4611      	mov	r1, r2
 8004da4:	4618      	mov	r0, r3
 8004da6:	f002 fe14 	bl	80079d2 <USB_ReadChInterrupts>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004db4:	d11b      	bne.n	8004dee <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	011b      	lsls	r3, r3, #4
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	334d      	adds	r3, #77	@ 0x4d
 8004dc6:	2209      	movs	r2, #9
 8004dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f003 fba1 	bl	800851a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de4:	461a      	mov	r2, r3
 8004de6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dea:	6093      	str	r3, [r2, #8]
 8004dec:	e1ee      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	4611      	mov	r1, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f002 fdeb 	bl	80079d2 <USB_ReadChInterrupts>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	f040 81df 	bne.w	80051c6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e14:	461a      	mov	r2, r3
 8004e16:	2302      	movs	r3, #2
 8004e18:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	334d      	adds	r3, #77	@ 0x4d
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 8093 	bne.w	8004f58 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e32:	78fa      	ldrb	r2, [r7, #3]
 8004e34:	6879      	ldr	r1, [r7, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	1a9b      	subs	r3, r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	440b      	add	r3, r1
 8004e40:	334d      	adds	r3, #77	@ 0x4d
 8004e42:	2202      	movs	r2, #2
 8004e44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	334c      	adds	r3, #76	@ 0x4c
 8004e56:	2201      	movs	r2, #1
 8004e58:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004e5a:	78fa      	ldrb	r2, [r7, #3]
 8004e5c:	6879      	ldr	r1, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	011b      	lsls	r3, r3, #4
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	440b      	add	r3, r1
 8004e68:	3326      	adds	r3, #38	@ 0x26
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d00b      	beq.n	8004e88 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004e70:	78fa      	ldrb	r2, [r7, #3]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	4613      	mov	r3, r2
 8004e76:	011b      	lsls	r3, r3, #4
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	3326      	adds	r3, #38	@ 0x26
 8004e80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	f040 8190 	bne.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	799b      	ldrb	r3, [r3, #6]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d115      	bne.n	8004ebc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004e90:	78fa      	ldrb	r2, [r7, #3]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	1a9b      	subs	r3, r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	333d      	adds	r3, #61	@ 0x3d
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	f083 0301 	eor.w	r3, r3, #1
 8004ea8:	b2d8      	uxtb	r0, r3
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	333d      	adds	r3, #61	@ 0x3d
 8004eb8:	4602      	mov	r2, r0
 8004eba:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	799b      	ldrb	r3, [r3, #6]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	f040 8171 	bne.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	3334      	adds	r3, #52	@ 0x34
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8165 	beq.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3334      	adds	r3, #52	@ 0x34
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4403      	add	r3, r0
 8004efe:	3328      	adds	r3, #40	@ 0x28
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	440b      	add	r3, r1
 8004f04:	1e59      	subs	r1, r3, #1
 8004f06:	78fa      	ldrb	r2, [r7, #3]
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	1a9b      	subs	r3, r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4403      	add	r3, r0
 8004f14:	3328      	adds	r3, #40	@ 0x28
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f1c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 813f 	beq.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004f2a:	78fa      	ldrb	r2, [r7, #3]
 8004f2c:	6879      	ldr	r1, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	333d      	adds	r3, #61	@ 0x3d
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	f083 0301 	eor.w	r3, r3, #1
 8004f42:	b2d8      	uxtb	r0, r3
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	4613      	mov	r3, r2
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	440b      	add	r3, r1
 8004f50:	333d      	adds	r3, #61	@ 0x3d
 8004f52:	4602      	mov	r2, r0
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	e127      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	1a9b      	subs	r3, r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	334d      	adds	r3, #77	@ 0x4d
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d120      	bne.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	334d      	adds	r3, #77	@ 0x4d
 8004f7e:	2202      	movs	r2, #2
 8004f80:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004f82:	78fa      	ldrb	r2, [r7, #3]
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	4613      	mov	r3, r2
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	1a9b      	subs	r3, r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	331b      	adds	r3, #27
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	f040 8107 	bne.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	1a9b      	subs	r3, r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	334c      	adds	r3, #76	@ 0x4c
 8004faa:	2202      	movs	r2, #2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e0fb      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	334d      	adds	r3, #77	@ 0x4d
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d13a      	bne.n	800503c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	334d      	adds	r3, #77	@ 0x4d
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	334c      	adds	r3, #76	@ 0x4c
 8004fea:	2202      	movs	r2, #2
 8004fec:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004fee:	78fa      	ldrb	r2, [r7, #3]
 8004ff0:	6879      	ldr	r1, [r7, #4]
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	440b      	add	r3, r1
 8004ffc:	331b      	adds	r3, #27
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	f040 80d1 	bne.w	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	331b      	adds	r3, #27
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	0151      	lsls	r1, r2, #5
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	440a      	add	r2, r1
 8005030:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005034:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005038:	6053      	str	r3, [r2, #4]
 800503a:	e0b5      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800503c:	78fa      	ldrb	r2, [r7, #3]
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	4613      	mov	r3, r2
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	1a9b      	subs	r3, r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	334d      	adds	r3, #77	@ 0x4d
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b05      	cmp	r3, #5
 8005050:	d114      	bne.n	800507c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005052:	78fa      	ldrb	r2, [r7, #3]
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4613      	mov	r3, r2
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	1a9b      	subs	r3, r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	334d      	adds	r3, #77	@ 0x4d
 8005062:	2202      	movs	r2, #2
 8005064:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	440b      	add	r3, r1
 8005074:	334c      	adds	r3, #76	@ 0x4c
 8005076:	2202      	movs	r2, #2
 8005078:	701a      	strb	r2, [r3, #0]
 800507a:	e095      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	334d      	adds	r3, #77	@ 0x4d
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b06      	cmp	r3, #6
 8005090:	d114      	bne.n	80050bc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005092:	78fa      	ldrb	r2, [r7, #3]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	011b      	lsls	r3, r3, #4
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	334d      	adds	r3, #77	@ 0x4d
 80050a2:	2202      	movs	r2, #2
 80050a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80050a6:	78fa      	ldrb	r2, [r7, #3]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	1a9b      	subs	r3, r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	334c      	adds	r3, #76	@ 0x4c
 80050b6:	2205      	movs	r2, #5
 80050b8:	701a      	strb	r2, [r3, #0]
 80050ba:	e075      	b.n	80051a8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80050bc:	78fa      	ldrb	r2, [r7, #3]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	1a9b      	subs	r3, r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	334d      	adds	r3, #77	@ 0x4d
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b07      	cmp	r3, #7
 80050d0:	d00a      	beq.n	80050e8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	334d      	adds	r3, #77	@ 0x4d
 80050e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80050e4:	2b09      	cmp	r3, #9
 80050e6:	d170      	bne.n	80051ca <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	334d      	adds	r3, #77	@ 0x4d
 80050f8:	2202      	movs	r2, #2
 80050fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	1a9b      	subs	r3, r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	3344      	adds	r3, #68	@ 0x44
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	1c59      	adds	r1, r3, #1
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4403      	add	r3, r0
 800511c:	3344      	adds	r3, #68	@ 0x44
 800511e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005120:	78fa      	ldrb	r2, [r7, #3]
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	4613      	mov	r3, r2
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	1a9b      	subs	r3, r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	3344      	adds	r3, #68	@ 0x44
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b02      	cmp	r3, #2
 8005134:	d914      	bls.n	8005160 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	6879      	ldr	r1, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	1a9b      	subs	r3, r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	440b      	add	r3, r1
 8005144:	3344      	adds	r3, #68	@ 0x44
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800514a:	78fa      	ldrb	r2, [r7, #3]
 800514c:	6879      	ldr	r1, [r7, #4]
 800514e:	4613      	mov	r3, r2
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	440b      	add	r3, r1
 8005158:	334c      	adds	r3, #76	@ 0x4c
 800515a:	2204      	movs	r2, #4
 800515c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800515e:	e022      	b.n	80051a6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	6879      	ldr	r1, [r7, #4]
 8005164:	4613      	mov	r3, r2
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	1a9b      	subs	r3, r3, r2
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	334c      	adds	r3, #76	@ 0x4c
 8005170:	2202      	movs	r2, #2
 8005172:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800518a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005192:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	4413      	add	r3, r2
 800519c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a0:	461a      	mov	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80051a6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80051a8:	78fa      	ldrb	r2, [r7, #3]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	334c      	adds	r3, #76	@ 0x4c
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	78fb      	ldrb	r3, [r7, #3]
 80051bc:	4619      	mov	r1, r3
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f005 fd04 	bl	800abcc <HAL_HCD_HC_NotifyURBChange_Callback>
 80051c4:	e002      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80051c6:	bf00      	nop
 80051c8:	e000      	b.n	80051cc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80051ca:	bf00      	nop
  }
}
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b08a      	sub	sp, #40	@ 0x28
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	f003 030f 	and.w	r3, r3, #15
 80051f2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	0c5b      	lsrs	r3, r3, #17
 80051f8:	f003 030f 	and.w	r3, r3, #15
 80051fc:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005206:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2b02      	cmp	r3, #2
 800520c:	d004      	beq.n	8005218 <HCD_RXQLVL_IRQHandler+0x46>
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2b05      	cmp	r3, #5
 8005212:	f000 80b6 	beq.w	8005382 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005216:	e0b7      	b.n	8005388 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 80b3 	beq.w	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005220:	6879      	ldr	r1, [r7, #4]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	4613      	mov	r3, r2
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	332c      	adds	r3, #44	@ 0x2c
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	f000 80a7 	beq.w	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	3338      	adds	r3, #56	@ 0x38
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	18d1      	adds	r1, r2, r3
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4613      	mov	r3, r2
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	1a9b      	subs	r3, r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4403      	add	r3, r0
 800525c:	3334      	adds	r3, #52	@ 0x34
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4299      	cmp	r1, r3
 8005262:	f200 8083 	bhi.w	800536c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4613      	mov	r3, r2
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	1a9b      	subs	r3, r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	440b      	add	r3, r1
 8005278:	332c      	adds	r3, #44	@ 0x2c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	b292      	uxth	r2, r2
 8005280:	4619      	mov	r1, r3
 8005282:	f002 fb3b 	bl	80078fc <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	4613      	mov	r3, r2
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	1a9b      	subs	r3, r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	440b      	add	r3, r1
 8005294:	332c      	adds	r3, #44	@ 0x2c
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	18d1      	adds	r1, r2, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4613      	mov	r3, r2
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4403      	add	r3, r0
 80052aa:	332c      	adds	r3, #44	@ 0x2c
 80052ac:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4613      	mov	r3, r2
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	1a9b      	subs	r3, r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	440b      	add	r3, r1
 80052bc:	3338      	adds	r3, #56	@ 0x38
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	18d1      	adds	r1, r2, r3
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4613      	mov	r3, r2
 80052ca:	011b      	lsls	r3, r3, #4
 80052cc:	1a9b      	subs	r3, r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4403      	add	r3, r0
 80052d2:	3338      	adds	r3, #56	@ 0x38
 80052d4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	0cdb      	lsrs	r3, r3, #19
 80052e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ea:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4613      	mov	r3, r2
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	1a9b      	subs	r3, r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	3328      	adds	r3, #40	@ 0x28
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	4293      	cmp	r3, r2
 8005304:	d13f      	bne.n	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d03c      	beq.n	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	015a      	lsls	r2, r3, #5
 8005310:	6a3b      	ldr	r3, [r7, #32]
 8005312:	4413      	add	r3, r2
 8005314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005322:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800532a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	015a      	lsls	r2, r3, #5
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	4413      	add	r3, r2
 8005334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005338:	461a      	mov	r2, r3
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4613      	mov	r3, r2
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	440b      	add	r3, r1
 800534c:	333c      	adds	r3, #60	@ 0x3c
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	f083 0301 	eor.w	r3, r3, #1
 8005354:	b2d8      	uxtb	r0, r3
 8005356:	6879      	ldr	r1, [r7, #4]
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4613      	mov	r3, r2
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	440b      	add	r3, r1
 8005364:	333c      	adds	r3, #60	@ 0x3c
 8005366:	4602      	mov	r2, r0
 8005368:	701a      	strb	r2, [r3, #0]
      break;
 800536a:	e00c      	b.n	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4613      	mov	r3, r2
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	440b      	add	r3, r1
 800537a:	334c      	adds	r3, #76	@ 0x4c
 800537c:	2204      	movs	r2, #4
 800537e:	701a      	strb	r2, [r3, #0]
      break;
 8005380:	e001      	b.n	8005386 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005382:	bf00      	nop
 8005384:	e000      	b.n	8005388 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005386:	bf00      	nop
  }
}
 8005388:	bf00      	nop
 800538a:	3728      	adds	r7, #40	@ 0x28
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80053bc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d10b      	bne.n	80053e0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d102      	bne.n	80053d8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f005 fbde 	bl	800ab94 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f043 0302 	orr.w	r3, r3, #2
 80053de:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d132      	bne.n	8005450 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f043 0308 	orr.w	r3, r3, #8
 80053f0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d126      	bne.n	800544a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7a5b      	ldrb	r3, [r3, #9]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d113      	bne.n	800542c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800540a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800540e:	d106      	bne.n	800541e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2102      	movs	r1, #2
 8005416:	4618      	mov	r0, r3
 8005418:	f002 fc00 	bl	8007c1c <USB_InitFSLSPClkSel>
 800541c:	e011      	b.n	8005442 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2101      	movs	r1, #1
 8005424:	4618      	mov	r0, r3
 8005426:	f002 fbf9 	bl	8007c1c <USB_InitFSLSPClkSel>
 800542a:	e00a      	b.n	8005442 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	79db      	ldrb	r3, [r3, #7]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d106      	bne.n	8005442 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800543a:	461a      	mov	r2, r3
 800543c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005440:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f005 fbd0 	bl	800abe8 <HAL_HCD_PortEnabled_Callback>
 8005448:	e002      	b.n	8005450 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f005 fbda 	bl	800ac04 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d103      	bne.n	8005462 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	f043 0320 	orr.w	r3, r3, #32
 8005460:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	6013      	str	r3, [r2, #0]
}
 800546e:	bf00      	nop
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
	...

08005478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e12b      	b.n	80056e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fd f8e0 	bl	8002664 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2224      	movs	r2, #36	@ 0x24
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054dc:	f001 fa20 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 80054e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4a81      	ldr	r2, [pc, #516]	@ (80056ec <HAL_I2C_Init+0x274>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d807      	bhi.n	80054fc <HAL_I2C_Init+0x84>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4a80      	ldr	r2, [pc, #512]	@ (80056f0 <HAL_I2C_Init+0x278>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	bf94      	ite	ls
 80054f4:	2301      	movls	r3, #1
 80054f6:	2300      	movhi	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e006      	b.n	800550a <HAL_I2C_Init+0x92>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a7d      	ldr	r2, [pc, #500]	@ (80056f4 <HAL_I2C_Init+0x27c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	bf94      	ite	ls
 8005504:	2301      	movls	r3, #1
 8005506:	2300      	movhi	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e0e7      	b.n	80056e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4a78      	ldr	r2, [pc, #480]	@ (80056f8 <HAL_I2C_Init+0x280>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	0c9b      	lsrs	r3, r3, #18
 800551c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	430a      	orrs	r2, r1
 8005530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	4a6a      	ldr	r2, [pc, #424]	@ (80056ec <HAL_I2C_Init+0x274>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d802      	bhi.n	800554c <HAL_I2C_Init+0xd4>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	3301      	adds	r3, #1
 800554a:	e009      	b.n	8005560 <HAL_I2C_Init+0xe8>
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	4a69      	ldr	r2, [pc, #420]	@ (80056fc <HAL_I2C_Init+0x284>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	3301      	adds	r3, #1
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6812      	ldr	r2, [r2, #0]
 8005564:	430b      	orrs	r3, r1
 8005566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005572:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	495c      	ldr	r1, [pc, #368]	@ (80056ec <HAL_I2C_Init+0x274>)
 800557c:	428b      	cmp	r3, r1
 800557e:	d819      	bhi.n	80055b4 <HAL_I2C_Init+0x13c>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	1e59      	subs	r1, r3, #1
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	fbb1 f3f3 	udiv	r3, r1, r3
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005594:	400b      	ands	r3, r1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_I2C_Init+0x138>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1e59      	subs	r1, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80055a8:	3301      	adds	r3, #1
 80055aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055ae:	e051      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 80055b0:	2304      	movs	r3, #4
 80055b2:	e04f      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d111      	bne.n	80055e0 <HAL_I2C_Init+0x168>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	1e58      	subs	r0, r3, #1
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6859      	ldr	r1, [r3, #4]
 80055c4:	460b      	mov	r3, r1
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	440b      	add	r3, r1
 80055ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80055ce:	3301      	adds	r3, #1
 80055d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	e012      	b.n	8005606 <HAL_I2C_Init+0x18e>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1e58      	subs	r0, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	460b      	mov	r3, r1
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	440b      	add	r3, r1
 80055ee:	0099      	lsls	r1, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f6:	3301      	adds	r3, #1
 80055f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf0c      	ite	eq
 8005600:	2301      	moveq	r3, #1
 8005602:	2300      	movne	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_I2C_Init+0x196>
 800560a:	2301      	movs	r3, #1
 800560c:	e022      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10e      	bne.n	8005634 <HAL_I2C_Init+0x1bc>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	1e58      	subs	r0, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6859      	ldr	r1, [r3, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	440b      	add	r3, r1
 8005624:	fbb0 f3f3 	udiv	r3, r0, r3
 8005628:	3301      	adds	r3, #1
 800562a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005632:	e00f      	b.n	8005654 <HAL_I2C_Init+0x1dc>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1e58      	subs	r0, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	0099      	lsls	r1, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	fbb0 f3f3 	udiv	r3, r0, r3
 800564a:	3301      	adds	r3, #1
 800564c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005650:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	6809      	ldr	r1, [r1, #0]
 8005658:	4313      	orrs	r3, r2
 800565a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005682:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6911      	ldr	r1, [r2, #16]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	68d2      	ldr	r2, [r2, #12]
 800568e:	4311      	orrs	r1, r2
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	430b      	orrs	r3, r1
 8005696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	000186a0 	.word	0x000186a0
 80056f0:	001e847f 	.word	0x001e847f
 80056f4:	003d08ff 	.word	0x003d08ff
 80056f8:	431bde83 	.word	0x431bde83
 80056fc:	10624dd3 	.word	0x10624dd3

08005700 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e128      	b.n	8005964 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d109      	bne.n	8005732 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a90      	ldr	r2, [pc, #576]	@ (800596c <HAL_I2S_Init+0x26c>)
 800572a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7fc ffe1 	bl	80026f4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	6812      	ldr	r2, [r2, #0]
 8005744:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005748:	f023 030f 	bic.w	r3, r3, #15
 800574c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2202      	movs	r2, #2
 8005754:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d060      	beq.n	8005820 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005766:	2310      	movs	r3, #16
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e001      	b.n	8005770 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800576c:	2320      	movs	r3, #32
 800576e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b20      	cmp	r3, #32
 8005776:	d802      	bhi.n	800577e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	005b      	lsls	r3, r3, #1
 800577c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800577e:	2001      	movs	r0, #1
 8005780:	f001 f9d8 	bl	8006b34 <HAL_RCCEx_GetPeriphCLKFreq>
 8005784:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800578e:	d125      	bne.n	80057dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d010      	beq.n	80057ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	fbb2 f2f3 	udiv	r2, r2, r3
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	3305      	adds	r3, #5
 80057b6:	613b      	str	r3, [r7, #16]
 80057b8:	e01f      	b.n	80057fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	00db      	lsls	r3, r3, #3
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c4:	4613      	mov	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	461a      	mov	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d6:	3305      	adds	r3, #5
 80057d8:	613b      	str	r3, [r7, #16]
 80057da:	e00e      	b.n	80057fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	461a      	mov	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f6:	3305      	adds	r3, #5
 80057f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4a5c      	ldr	r2, [pc, #368]	@ (8005970 <HAL_I2S_Init+0x270>)
 80057fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005802:	08db      	lsrs	r3, r3, #3
 8005804:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	085b      	lsrs	r3, r3, #1
 8005816:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	e003      	b.n	8005828 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005820:	2302      	movs	r3, #2
 8005822:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d902      	bls.n	8005834 <HAL_I2S_Init+0x134>
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	2bff      	cmp	r3, #255	@ 0xff
 8005832:	d907      	bls.n	8005844 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005838:	f043 0210 	orr.w	r2, r3, #16
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e08f      	b.n	8005964 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	ea42 0103 	orr.w	r1, r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	430a      	orrs	r2, r1
 8005856:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005862:	f023 030f 	bic.w	r3, r3, #15
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6851      	ldr	r1, [r2, #4]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6892      	ldr	r2, [r2, #8]
 800586e:	4311      	orrs	r1, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68d2      	ldr	r2, [r2, #12]
 8005874:	4311      	orrs	r1, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6992      	ldr	r2, [r2, #24]
 800587a:	430a      	orrs	r2, r1
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005886:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d161      	bne.n	8005954 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a38      	ldr	r2, [pc, #224]	@ (8005974 <HAL_I2S_Init+0x274>)
 8005894:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a37      	ldr	r2, [pc, #220]	@ (8005978 <HAL_I2S_Init+0x278>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d101      	bne.n	80058a4 <HAL_I2S_Init+0x1a4>
 80058a0:	4b36      	ldr	r3, [pc, #216]	@ (800597c <HAL_I2S_Init+0x27c>)
 80058a2:	e001      	b.n	80058a8 <HAL_I2S_Init+0x1a8>
 80058a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	4932      	ldr	r1, [pc, #200]	@ (8005978 <HAL_I2S_Init+0x278>)
 80058b0:	428a      	cmp	r2, r1
 80058b2:	d101      	bne.n	80058b8 <HAL_I2S_Init+0x1b8>
 80058b4:	4a31      	ldr	r2, [pc, #196]	@ (800597c <HAL_I2S_Init+0x27c>)
 80058b6:	e001      	b.n	80058bc <HAL_I2S_Init+0x1bc>
 80058b8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80058bc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80058c0:	f023 030f 	bic.w	r3, r3, #15
 80058c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005978 <HAL_I2S_Init+0x278>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <HAL_I2S_Init+0x1d4>
 80058d0:	4b2a      	ldr	r3, [pc, #168]	@ (800597c <HAL_I2S_Init+0x27c>)
 80058d2:	e001      	b.n	80058d8 <HAL_I2S_Init+0x1d8>
 80058d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058d8:	2202      	movs	r2, #2
 80058da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a25      	ldr	r2, [pc, #148]	@ (8005978 <HAL_I2S_Init+0x278>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d101      	bne.n	80058ea <HAL_I2S_Init+0x1ea>
 80058e6:	4b25      	ldr	r3, [pc, #148]	@ (800597c <HAL_I2S_Init+0x27c>)
 80058e8:	e001      	b.n	80058ee <HAL_I2S_Init+0x1ee>
 80058ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058fa:	d003      	beq.n	8005904 <HAL_I2S_Init+0x204>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d103      	bne.n	800590c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005904:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	e001      	b.n	8005910 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800591a:	4313      	orrs	r3, r2
 800591c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005924:	4313      	orrs	r3, r2
 8005926:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800592e:	4313      	orrs	r3, r2
 8005930:	b29a      	uxth	r2, r3
 8005932:	897b      	ldrh	r3, [r7, #10]
 8005934:	4313      	orrs	r3, r2
 8005936:	b29b      	uxth	r3, r3
 8005938:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800593c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a0d      	ldr	r2, [pc, #52]	@ (8005978 <HAL_I2S_Init+0x278>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d101      	bne.n	800594c <HAL_I2S_Init+0x24c>
 8005948:	4b0c      	ldr	r3, [pc, #48]	@ (800597c <HAL_I2S_Init+0x27c>)
 800594a:	e001      	b.n	8005950 <HAL_I2S_Init+0x250>
 800594c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005950:	897a      	ldrh	r2, [r7, #10]
 8005952:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	08005a77 	.word	0x08005a77
 8005970:	cccccccd 	.word	0xcccccccd
 8005974:	08005b8d 	.word	0x08005b8d
 8005978:	40003800 	.word	0x40003800
 800597c:	40003400 	.word	0x40003400

08005980 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	881a      	ldrh	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	1c9a      	adds	r2, r3, #2
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10e      	bne.n	8005a10 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a00:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff ffb8 	bl	8005980 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a10:	bf00      	nop
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	1c9a      	adds	r2, r3, #2
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	b29a      	uxth	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10e      	bne.n	8005a6e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ff93 	bl	8005994 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a6e:	bf00      	nop
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b086      	sub	sp, #24
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d13a      	bne.n	8005b08 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d109      	bne.n	8005ab0 <I2S_IRQHandler+0x3a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa6:	2b40      	cmp	r3, #64	@ 0x40
 8005aa8:	d102      	bne.n	8005ab0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff ffb4 	bl	8005a18 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab6:	2b40      	cmp	r3, #64	@ 0x40
 8005ab8:	d126      	bne.n	8005b08 <I2S_IRQHandler+0x92>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 0320 	and.w	r3, r3, #32
 8005ac4:	2b20      	cmp	r3, #32
 8005ac6:	d11f      	bne.n	8005b08 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ad6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	613b      	str	r3, [r7, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005afa:	f043 0202 	orr.w	r2, r3, #2
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7ff ff50 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b03      	cmp	r3, #3
 8005b12:	d136      	bne.n	8005b82 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d109      	bne.n	8005b32 <I2S_IRQHandler+0xbc>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b28:	2b80      	cmp	r3, #128	@ 0x80
 8005b2a:	d102      	bne.n	8005b32 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff ff45 	bl	80059bc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d122      	bne.n	8005b82 <I2S_IRQHandler+0x10c>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f003 0320 	and.w	r3, r3, #32
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d11b      	bne.n	8005b82 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005b58:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b74:	f043 0204 	orr.w	r2, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ff13 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b82:	bf00      	nop
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b088      	sub	sp, #32
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a92      	ldr	r2, [pc, #584]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d101      	bne.n	8005baa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005ba6:	4b92      	ldr	r3, [pc, #584]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ba8:	e001      	b.n	8005bae <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005baa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a8b      	ldr	r2, [pc, #556]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d101      	bne.n	8005bc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bc6:	e001      	b.n	8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005bc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bd8:	d004      	beq.n	8005be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f040 8099 	bne.w	8005d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d107      	bne.n	8005bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d002      	beq.n	8005bfe <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 f925 	bl	8005e48 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d107      	bne.n	8005c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f9c8 	bl	8005fa8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	d13a      	bne.n	8005c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0320 	and.w	r3, r3, #32
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d035      	beq.n	8005c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a6e      	ldr	r2, [pc, #440]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005c36:	4b6e      	ldr	r3, [pc, #440]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c38:	e001      	b.n	8005c3e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005c3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4969      	ldr	r1, [pc, #420]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c46:	428b      	cmp	r3, r1
 8005c48:	d101      	bne.n	8005c4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005c4a:	4b69      	ldr	r3, [pc, #420]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c4c:	e001      	b.n	8005c52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005c4e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c52:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c56:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c66:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8a:	f043 0202 	orr.w	r2, r3, #2
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f7ff fe88 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	f003 0308 	and.w	r3, r3, #8
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	f040 80c3 	bne.w	8005e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80bd 	beq.w	8005e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005cbe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a49      	ldr	r2, [pc, #292]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d101      	bne.n	8005cce <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005cca:	4b49      	ldr	r3, [pc, #292]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ccc:	e001      	b.n	8005cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005cce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4944      	ldr	r1, [pc, #272]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cda:	428b      	cmp	r3, r1
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005cde:	4b44      	ldr	r3, [pc, #272]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ce0:	e001      	b.n	8005ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005ce2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ce6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005cea:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005cec:	2300      	movs	r3, #0
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d06:	f043 0204 	orr.w	r2, r3, #4
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fe4a 	bl	80059a8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d14:	e089      	b.n	8005e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d107      	bne.n	8005d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f8be 	bl	8005eac <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d107      	bne.n	8005d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f8fd 	bl	8005f44 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d50:	2b40      	cmp	r3, #64	@ 0x40
 8005d52:	d12f      	bne.n	8005db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f003 0320 	and.w	r3, r3, #32
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d02a      	beq.n	8005db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d6c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1e      	ldr	r2, [pc, #120]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005d78:	4b1d      	ldr	r3, [pc, #116]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d7a:	e001      	b.n	8005d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005d7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4919      	ldr	r1, [pc, #100]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d88:	428b      	cmp	r3, r1
 8005d8a:	d101      	bne.n	8005d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005d8c:	4b18      	ldr	r3, [pc, #96]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d8e:	e001      	b.n	8005d94 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d98:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da6:	f043 0202 	orr.w	r2, r3, #2
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fdfa 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b08      	cmp	r3, #8
 8005dbc:	d136      	bne.n	8005e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f003 0320 	and.w	r3, r3, #32
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d031      	beq.n	8005e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a07      	ldr	r2, [pc, #28]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005dd2:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dd4:	e001      	b.n	8005dda <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005dd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4902      	ldr	r1, [pc, #8]	@ (8005dec <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005de2:	428b      	cmp	r3, r1
 8005de4:	d106      	bne.n	8005df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005de6:	4b02      	ldr	r3, [pc, #8]	@ (8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005de8:	e006      	b.n	8005df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005dea:	bf00      	nop
 8005dec:	40003800 	.word	0x40003800
 8005df0:	40003400 	.word	0x40003400
 8005df4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005df8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005dfc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1a:	f043 0204 	orr.w	r2, r3, #4
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7ff fdc0 	bl	80059a8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e28:	e000      	b.n	8005e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e2a:	bf00      	nop
}
 8005e2c:	bf00      	nop
 8005e2e:	3720      	adds	r7, #32
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	1c99      	adds	r1, r3, #2
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6251      	str	r1, [r2, #36]	@ 0x24
 8005e5a:	881a      	ldrh	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d113      	bne.n	8005ea2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d106      	bne.n	8005ea2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f7ff ffc9 	bl	8005e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	1c99      	adds	r1, r3, #2
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6251      	str	r1, [r2, #36]	@ 0x24
 8005ebe:	8819      	ldrh	r1, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f3c <I2SEx_TxISR_I2SExt+0x90>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d101      	bne.n	8005ece <I2SEx_TxISR_I2SExt+0x22>
 8005eca:	4b1d      	ldr	r3, [pc, #116]	@ (8005f40 <I2SEx_TxISR_I2SExt+0x94>)
 8005ecc:	e001      	b.n	8005ed2 <I2SEx_TxISR_I2SExt+0x26>
 8005ece:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ed2:	460a      	mov	r2, r1
 8005ed4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d121      	bne.n	8005f32 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a12      	ldr	r2, [pc, #72]	@ (8005f3c <I2SEx_TxISR_I2SExt+0x90>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d101      	bne.n	8005efc <I2SEx_TxISR_I2SExt+0x50>
 8005ef8:	4b11      	ldr	r3, [pc, #68]	@ (8005f40 <I2SEx_TxISR_I2SExt+0x94>)
 8005efa:	e001      	b.n	8005f00 <I2SEx_TxISR_I2SExt+0x54>
 8005efc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	490d      	ldr	r1, [pc, #52]	@ (8005f3c <I2SEx_TxISR_I2SExt+0x90>)
 8005f08:	428b      	cmp	r3, r1
 8005f0a:	d101      	bne.n	8005f10 <I2SEx_TxISR_I2SExt+0x64>
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <I2SEx_TxISR_I2SExt+0x94>)
 8005f0e:	e001      	b.n	8005f14 <I2SEx_TxISR_I2SExt+0x68>
 8005f10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f14:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005f18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff ff81 	bl	8005e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f32:	bf00      	nop
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	40003800 	.word	0x40003800
 8005f40:	40003400 	.word	0x40003400

08005f44 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68d8      	ldr	r0, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f56:	1c99      	adds	r1, r3, #2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005f5c:	b282      	uxth	r2, r0
 8005f5e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d113      	bne.n	8005fa0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f86:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d106      	bne.n	8005fa0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f7ff ff4a 	bl	8005e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a20      	ldr	r2, [pc, #128]	@ (8006038 <I2SEx_RxISR_I2SExt+0x90>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <I2SEx_RxISR_I2SExt+0x16>
 8005fba:	4b20      	ldr	r3, [pc, #128]	@ (800603c <I2SEx_RxISR_I2SExt+0x94>)
 8005fbc:	e001      	b.n	8005fc2 <I2SEx_RxISR_I2SExt+0x1a>
 8005fbe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fc2:	68d8      	ldr	r0, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc8:	1c99      	adds	r1, r3, #2
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005fce:	b282      	uxth	r2, r0
 8005fd0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d121      	bne.n	800602e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a12      	ldr	r2, [pc, #72]	@ (8006038 <I2SEx_RxISR_I2SExt+0x90>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d101      	bne.n	8005ff8 <I2SEx_RxISR_I2SExt+0x50>
 8005ff4:	4b11      	ldr	r3, [pc, #68]	@ (800603c <I2SEx_RxISR_I2SExt+0x94>)
 8005ff6:	e001      	b.n	8005ffc <I2SEx_RxISR_I2SExt+0x54>
 8005ff8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	490d      	ldr	r1, [pc, #52]	@ (8006038 <I2SEx_RxISR_I2SExt+0x90>)
 8006004:	428b      	cmp	r3, r1
 8006006:	d101      	bne.n	800600c <I2SEx_RxISR_I2SExt+0x64>
 8006008:	4b0c      	ldr	r3, [pc, #48]	@ (800603c <I2SEx_RxISR_I2SExt+0x94>)
 800600a:	e001      	b.n	8006010 <I2SEx_RxISR_I2SExt+0x68>
 800600c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006010:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006014:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d106      	bne.n	800602e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ff03 	bl	8005e34 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40003800 	.word	0x40003800
 800603c:	40003400 	.word	0x40003400

08006040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d101      	bne.n	8006052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e267      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d075      	beq.n	800614a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800605e:	4b88      	ldr	r3, [pc, #544]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b04      	cmp	r3, #4
 8006068:	d00c      	beq.n	8006084 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800606a:	4b85      	ldr	r3, [pc, #532]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006072:	2b08      	cmp	r3, #8
 8006074:	d112      	bne.n	800609c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006076:	4b82      	ldr	r3, [pc, #520]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800607e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006082:	d10b      	bne.n	800609c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006084:	4b7e      	ldr	r3, [pc, #504]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d05b      	beq.n	8006148 <HAL_RCC_OscConfig+0x108>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d157      	bne.n	8006148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e242      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a4:	d106      	bne.n	80060b4 <HAL_RCC_OscConfig+0x74>
 80060a6:	4b76      	ldr	r3, [pc, #472]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a75      	ldr	r2, [pc, #468]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	e01d      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060bc:	d10c      	bne.n	80060d8 <HAL_RCC_OscConfig+0x98>
 80060be:	4b70      	ldr	r3, [pc, #448]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a6f      	ldr	r2, [pc, #444]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a6c      	ldr	r2, [pc, #432]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	e00b      	b.n	80060f0 <HAL_RCC_OscConfig+0xb0>
 80060d8:	4b69      	ldr	r3, [pc, #420]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a68      	ldr	r2, [pc, #416]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	4b66      	ldr	r3, [pc, #408]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a65      	ldr	r2, [pc, #404]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80060ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80060ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d013      	beq.n	8006120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fc fd92 	bl	8002c20 <HAL_GetTick>
 80060fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fe:	e008      	b.n	8006112 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006100:	f7fc fd8e 	bl	8002c20 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	2b64      	cmp	r3, #100	@ 0x64
 800610c:	d901      	bls.n	8006112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e207      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006112:	4b5b      	ldr	r3, [pc, #364]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0f0      	beq.n	8006100 <HAL_RCC_OscConfig+0xc0>
 800611e:	e014      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006120:	f7fc fd7e 	bl	8002c20 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006126:	e008      	b.n	800613a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006128:	f7fc fd7a 	bl	8002c20 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	2b64      	cmp	r3, #100	@ 0x64
 8006134:	d901      	bls.n	800613a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e1f3      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800613a:	4b51      	ldr	r3, [pc, #324]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f0      	bne.n	8006128 <HAL_RCC_OscConfig+0xe8>
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d063      	beq.n	800621e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006156:	4b4a      	ldr	r3, [pc, #296]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00b      	beq.n	800617a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006162:	4b47      	ldr	r3, [pc, #284]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800616a:	2b08      	cmp	r3, #8
 800616c:	d11c      	bne.n	80061a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800616e:	4b44      	ldr	r3, [pc, #272]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d116      	bne.n	80061a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800617a:	4b41      	ldr	r3, [pc, #260]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_RCC_OscConfig+0x152>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d001      	beq.n	8006192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e1c7      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006192:	4b3b      	ldr	r3, [pc, #236]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	00db      	lsls	r3, r3, #3
 80061a0:	4937      	ldr	r1, [pc, #220]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a6:	e03a      	b.n	800621e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d020      	beq.n	80061f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061b0:	4b34      	ldr	r3, [pc, #208]	@ (8006284 <HAL_RCC_OscConfig+0x244>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b6:	f7fc fd33 	bl	8002c20 <HAL_GetTick>
 80061ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061bc:	e008      	b.n	80061d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061be:	f7fc fd2f 	bl	8002c20 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e1a8      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d0f0      	beq.n	80061be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061dc:	4b28      	ldr	r3, [pc, #160]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	00db      	lsls	r3, r3, #3
 80061ea:	4925      	ldr	r1, [pc, #148]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	600b      	str	r3, [r1, #0]
 80061f0:	e015      	b.n	800621e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061f2:	4b24      	ldr	r3, [pc, #144]	@ (8006284 <HAL_RCC_OscConfig+0x244>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f8:	f7fc fd12 	bl	8002c20 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006200:	f7fc fd0e 	bl	8002c20 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e187      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006212:	4b1b      	ldr	r3, [pc, #108]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0302 	and.w	r3, r3, #2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1f0      	bne.n	8006200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0308 	and.w	r3, r3, #8
 8006226:	2b00      	cmp	r3, #0
 8006228:	d036      	beq.n	8006298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006232:	4b15      	ldr	r3, [pc, #84]	@ (8006288 <HAL_RCC_OscConfig+0x248>)
 8006234:	2201      	movs	r2, #1
 8006236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fc fcf2 	bl	8002c20 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006240:	f7fc fcee 	bl	8002c20 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e167      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006252:	4b0b      	ldr	r3, [pc, #44]	@ (8006280 <HAL_RCC_OscConfig+0x240>)
 8006254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006256:	f003 0302 	and.w	r3, r3, #2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0x200>
 800625e:	e01b      	b.n	8006298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006260:	4b09      	ldr	r3, [pc, #36]	@ (8006288 <HAL_RCC_OscConfig+0x248>)
 8006262:	2200      	movs	r2, #0
 8006264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006266:	f7fc fcdb 	bl	8002c20 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800626c:	e00e      	b.n	800628c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800626e:	f7fc fcd7 	bl	8002c20 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d907      	bls.n	800628c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e150      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
 8006280:	40023800 	.word	0x40023800
 8006284:	42470000 	.word	0x42470000
 8006288:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800628c:	4b88      	ldr	r3, [pc, #544]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800628e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1ea      	bne.n	800626e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0304 	and.w	r3, r3, #4
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f000 8097 	beq.w	80063d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062a6:	2300      	movs	r3, #0
 80062a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062aa:	4b81      	ldr	r3, [pc, #516]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d10f      	bne.n	80062d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062b6:	2300      	movs	r3, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	4b7d      	ldr	r3, [pc, #500]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062be:	4a7c      	ldr	r2, [pc, #496]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80062c6:	4b7a      	ldr	r3, [pc, #488]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ce:	60bb      	str	r3, [r7, #8]
 80062d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062d2:	2301      	movs	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d6:	4b77      	ldr	r3, [pc, #476]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d118      	bne.n	8006314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062e2:	4b74      	ldr	r3, [pc, #464]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a73      	ldr	r2, [pc, #460]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 80062e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ee:	f7fc fc97 	bl	8002c20 <HAL_GetTick>
 80062f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f6:	f7fc fc93 	bl	8002c20 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e10c      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006308:	4b6a      	ldr	r3, [pc, #424]	@ (80064b4 <HAL_RCC_OscConfig+0x474>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d106      	bne.n	800632a <HAL_RCC_OscConfig+0x2ea>
 800631c:	4b64      	ldr	r3, [pc, #400]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006320:	4a63      	ldr	r2, [pc, #396]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	6713      	str	r3, [r2, #112]	@ 0x70
 8006328:	e01c      	b.n	8006364 <HAL_RCC_OscConfig+0x324>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	2b05      	cmp	r3, #5
 8006330:	d10c      	bne.n	800634c <HAL_RCC_OscConfig+0x30c>
 8006332:	4b5f      	ldr	r3, [pc, #380]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006336:	4a5e      	ldr	r2, [pc, #376]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006338:	f043 0304 	orr.w	r3, r3, #4
 800633c:	6713      	str	r3, [r2, #112]	@ 0x70
 800633e:	4b5c      	ldr	r3, [pc, #368]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006342:	4a5b      	ldr	r2, [pc, #364]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006344:	f043 0301 	orr.w	r3, r3, #1
 8006348:	6713      	str	r3, [r2, #112]	@ 0x70
 800634a:	e00b      	b.n	8006364 <HAL_RCC_OscConfig+0x324>
 800634c:	4b58      	ldr	r3, [pc, #352]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800634e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006350:	4a57      	ldr	r2, [pc, #348]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006352:	f023 0301 	bic.w	r3, r3, #1
 8006356:	6713      	str	r3, [r2, #112]	@ 0x70
 8006358:	4b55      	ldr	r3, [pc, #340]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800635c:	4a54      	ldr	r2, [pc, #336]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800635e:	f023 0304 	bic.w	r3, r3, #4
 8006362:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d015      	beq.n	8006398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800636c:	f7fc fc58 	bl	8002c20 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006372:	e00a      	b.n	800638a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006374:	f7fc fc54 	bl	8002c20 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006382:	4293      	cmp	r3, r2
 8006384:	d901      	bls.n	800638a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e0cb      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800638a:	4b49      	ldr	r3, [pc, #292]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	f003 0302 	and.w	r3, r3, #2
 8006392:	2b00      	cmp	r3, #0
 8006394:	d0ee      	beq.n	8006374 <HAL_RCC_OscConfig+0x334>
 8006396:	e014      	b.n	80063c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006398:	f7fc fc42 	bl	8002c20 <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800639e:	e00a      	b.n	80063b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063a0:	f7fc fc3e 	bl	8002c20 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d901      	bls.n	80063b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e0b5      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b6:	4b3e      	ldr	r3, [pc, #248]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ba:	f003 0302 	and.w	r3, r3, #2
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1ee      	bne.n	80063a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d105      	bne.n	80063d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063c8:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063cc:	4a38      	ldr	r2, [pc, #224]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80a1 	beq.w	8006520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063de:	4b34      	ldr	r3, [pc, #208]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	f003 030c 	and.w	r3, r3, #12
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d05c      	beq.n	80064a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d141      	bne.n	8006476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063f2:	4b31      	ldr	r3, [pc, #196]	@ (80064b8 <HAL_RCC_OscConfig+0x478>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f8:	f7fc fc12 	bl	8002c20 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006400:	f7fc fc0e 	bl	8002c20 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e087      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006412:	4b27      	ldr	r3, [pc, #156]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f0      	bne.n	8006400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69da      	ldr	r2, [r3, #28]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642c:	019b      	lsls	r3, r3, #6
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	085b      	lsrs	r3, r3, #1
 8006436:	3b01      	subs	r3, #1
 8006438:	041b      	lsls	r3, r3, #16
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006440:	061b      	lsls	r3, r3, #24
 8006442:	491b      	ldr	r1, [pc, #108]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006444:	4313      	orrs	r3, r2
 8006446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006448:	4b1b      	ldr	r3, [pc, #108]	@ (80064b8 <HAL_RCC_OscConfig+0x478>)
 800644a:	2201      	movs	r2, #1
 800644c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644e:	f7fc fbe7 	bl	8002c20 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006456:	f7fc fbe3 	bl	8002c20 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e05c      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006468:	4b11      	ldr	r3, [pc, #68]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0x416>
 8006474:	e054      	b.n	8006520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006476:	4b10      	ldr	r3, [pc, #64]	@ (80064b8 <HAL_RCC_OscConfig+0x478>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800647c:	f7fc fbd0 	bl	8002c20 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006484:	f7fc fbcc 	bl	8002c20 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e045      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	4b06      	ldr	r3, [pc, #24]	@ (80064b0 <HAL_RCC_OscConfig+0x470>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x444>
 80064a2:	e03d      	b.n	8006520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d107      	bne.n	80064bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e038      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
 80064b0:	40023800 	.word	0x40023800
 80064b4:	40007000 	.word	0x40007000
 80064b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064bc:	4b1b      	ldr	r3, [pc, #108]	@ (800652c <HAL_RCC_OscConfig+0x4ec>)
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d028      	beq.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d121      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d11a      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d111      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	3b01      	subs	r3, #1
 8006506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006508:	429a      	cmp	r2, r3
 800650a:	d107      	bne.n	800651c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e000      	b.n	8006522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	40023800 	.word	0x40023800

08006530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d101      	bne.n	8006544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0cc      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006544:	4b68      	ldr	r3, [pc, #416]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	429a      	cmp	r2, r3
 8006550:	d90c      	bls.n	800656c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006552:	4b65      	ldr	r3, [pc, #404]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800655a:	4b63      	ldr	r3, [pc, #396]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d001      	beq.n	800656c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e0b8      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d020      	beq.n	80065ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006584:	4b59      	ldr	r3, [pc, #356]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4a58      	ldr	r2, [pc, #352]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800658e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0308 	and.w	r3, r3, #8
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800659c:	4b53      	ldr	r3, [pc, #332]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4a52      	ldr	r2, [pc, #328]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a8:	4b50      	ldr	r3, [pc, #320]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	494d      	ldr	r1, [pc, #308]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d044      	beq.n	8006650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d107      	bne.n	80065de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065ce:	4b47      	ldr	r3, [pc, #284]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d119      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e07f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d003      	beq.n	80065ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d107      	bne.n	80065fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065ee:	4b3f      	ldr	r3, [pc, #252]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d109      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e06f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065fe:	4b3b      	ldr	r3, [pc, #236]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e067      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800660e:	4b37      	ldr	r3, [pc, #220]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f023 0203 	bic.w	r2, r3, #3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	4934      	ldr	r1, [pc, #208]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 800661c:	4313      	orrs	r3, r2
 800661e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006620:	f7fc fafe 	bl	8002c20 <HAL_GetTick>
 8006624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	e00a      	b.n	800663e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006628:	f7fc fafa 	bl	8002c20 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006636:	4293      	cmp	r3, r2
 8006638:	d901      	bls.n	800663e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e04f      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800663e:	4b2b      	ldr	r3, [pc, #172]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f003 020c 	and.w	r2, r3, #12
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	429a      	cmp	r2, r3
 800664e:	d1eb      	bne.n	8006628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006650:	4b25      	ldr	r3, [pc, #148]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d20c      	bcs.n	8006678 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800665e:	4b22      	ldr	r3, [pc, #136]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006666:	4b20      	ldr	r3, [pc, #128]	@ (80066e8 <HAL_RCC_ClockConfig+0x1b8>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d001      	beq.n	8006678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e032      	b.n	80066de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006684:	4b19      	ldr	r3, [pc, #100]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4916      	ldr	r1, [pc, #88]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0308 	and.w	r3, r3, #8
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066a2:	4b12      	ldr	r3, [pc, #72]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	490e      	ldr	r1, [pc, #56]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80066b6:	f000 f821 	bl	80066fc <HAL_RCC_GetSysClockFreq>
 80066ba:	4602      	mov	r2, r0
 80066bc:	4b0b      	ldr	r3, [pc, #44]	@ (80066ec <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	f003 030f 	and.w	r3, r3, #15
 80066c6:	490a      	ldr	r1, [pc, #40]	@ (80066f0 <HAL_RCC_ClockConfig+0x1c0>)
 80066c8:	5ccb      	ldrb	r3, [r1, r3]
 80066ca:	fa22 f303 	lsr.w	r3, r2, r3
 80066ce:	4a09      	ldr	r2, [pc, #36]	@ (80066f4 <HAL_RCC_ClockConfig+0x1c4>)
 80066d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80066d2:	4b09      	ldr	r3, [pc, #36]	@ (80066f8 <HAL_RCC_ClockConfig+0x1c8>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fc fa5e 	bl	8002b98 <HAL_InitTick>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40023c00 	.word	0x40023c00
 80066ec:	40023800 	.word	0x40023800
 80066f0:	0800c4d8 	.word	0x0800c4d8
 80066f4:	20000000 	.word	0x20000000
 80066f8:	20000004 	.word	0x20000004

080066fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006700:	b094      	sub	sp, #80	@ 0x50
 8006702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006714:	4b79      	ldr	r3, [pc, #484]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b08      	cmp	r3, #8
 800671e:	d00d      	beq.n	800673c <HAL_RCC_GetSysClockFreq+0x40>
 8006720:	2b08      	cmp	r3, #8
 8006722:	f200 80e1 	bhi.w	80068e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <HAL_RCC_GetSysClockFreq+0x34>
 800672a:	2b04      	cmp	r3, #4
 800672c:	d003      	beq.n	8006736 <HAL_RCC_GetSysClockFreq+0x3a>
 800672e:	e0db      	b.n	80068e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006730:	4b73      	ldr	r3, [pc, #460]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x204>)
 8006732:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006734:	e0db      	b.n	80068ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006736:	4b73      	ldr	r3, [pc, #460]	@ (8006904 <HAL_RCC_GetSysClockFreq+0x208>)
 8006738:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800673a:	e0d8      	b.n	80068ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800673c:	4b6f      	ldr	r3, [pc, #444]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006744:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006746:	4b6d      	ldr	r3, [pc, #436]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d063      	beq.n	800681a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006752:	4b6a      	ldr	r3, [pc, #424]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	099b      	lsrs	r3, r3, #6
 8006758:	2200      	movs	r2, #0
 800675a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800675c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800675e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006760:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006764:	633b      	str	r3, [r7, #48]	@ 0x30
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	@ 0x34
 800676a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800676e:	4622      	mov	r2, r4
 8006770:	462b      	mov	r3, r5
 8006772:	f04f 0000 	mov.w	r0, #0
 8006776:	f04f 0100 	mov.w	r1, #0
 800677a:	0159      	lsls	r1, r3, #5
 800677c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006780:	0150      	lsls	r0, r2, #5
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4621      	mov	r1, r4
 8006788:	1a51      	subs	r1, r2, r1
 800678a:	6139      	str	r1, [r7, #16]
 800678c:	4629      	mov	r1, r5
 800678e:	eb63 0301 	sbc.w	r3, r3, r1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067a0:	4659      	mov	r1, fp
 80067a2:	018b      	lsls	r3, r1, #6
 80067a4:	4651      	mov	r1, sl
 80067a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80067aa:	4651      	mov	r1, sl
 80067ac:	018a      	lsls	r2, r1, #6
 80067ae:	4651      	mov	r1, sl
 80067b0:	ebb2 0801 	subs.w	r8, r2, r1
 80067b4:	4659      	mov	r1, fp
 80067b6:	eb63 0901 	sbc.w	r9, r3, r1
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067ce:	4690      	mov	r8, r2
 80067d0:	4699      	mov	r9, r3
 80067d2:	4623      	mov	r3, r4
 80067d4:	eb18 0303 	adds.w	r3, r8, r3
 80067d8:	60bb      	str	r3, [r7, #8]
 80067da:	462b      	mov	r3, r5
 80067dc:	eb49 0303 	adc.w	r3, r9, r3
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	f04f 0200 	mov.w	r2, #0
 80067e6:	f04f 0300 	mov.w	r3, #0
 80067ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067ee:	4629      	mov	r1, r5
 80067f0:	024b      	lsls	r3, r1, #9
 80067f2:	4621      	mov	r1, r4
 80067f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067f8:	4621      	mov	r1, r4
 80067fa:	024a      	lsls	r2, r1, #9
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006802:	2200      	movs	r2, #0
 8006804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006808:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800680c:	f7f9 fd30 	bl	8000270 <__aeabi_uldivmod>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4613      	mov	r3, r2
 8006816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006818:	e058      	b.n	80068cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800681a:	4b38      	ldr	r3, [pc, #224]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	099b      	lsrs	r3, r3, #6
 8006820:	2200      	movs	r2, #0
 8006822:	4618      	mov	r0, r3
 8006824:	4611      	mov	r1, r2
 8006826:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800682a:	623b      	str	r3, [r7, #32]
 800682c:	2300      	movs	r3, #0
 800682e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006830:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006834:	4642      	mov	r2, r8
 8006836:	464b      	mov	r3, r9
 8006838:	f04f 0000 	mov.w	r0, #0
 800683c:	f04f 0100 	mov.w	r1, #0
 8006840:	0159      	lsls	r1, r3, #5
 8006842:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006846:	0150      	lsls	r0, r2, #5
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4641      	mov	r1, r8
 800684e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006852:	4649      	mov	r1, r9
 8006854:	eb63 0b01 	sbc.w	fp, r3, r1
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006864:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006868:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800686c:	ebb2 040a 	subs.w	r4, r2, sl
 8006870:	eb63 050b 	sbc.w	r5, r3, fp
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	00eb      	lsls	r3, r5, #3
 800687e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006882:	00e2      	lsls	r2, r4, #3
 8006884:	4614      	mov	r4, r2
 8006886:	461d      	mov	r5, r3
 8006888:	4643      	mov	r3, r8
 800688a:	18e3      	adds	r3, r4, r3
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	464b      	mov	r3, r9
 8006890:	eb45 0303 	adc.w	r3, r5, r3
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	f04f 0200 	mov.w	r2, #0
 800689a:	f04f 0300 	mov.w	r3, #0
 800689e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068a2:	4629      	mov	r1, r5
 80068a4:	028b      	lsls	r3, r1, #10
 80068a6:	4621      	mov	r1, r4
 80068a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068ac:	4621      	mov	r1, r4
 80068ae:	028a      	lsls	r2, r1, #10
 80068b0:	4610      	mov	r0, r2
 80068b2:	4619      	mov	r1, r3
 80068b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b6:	2200      	movs	r2, #0
 80068b8:	61bb      	str	r3, [r7, #24]
 80068ba:	61fa      	str	r2, [r7, #28]
 80068bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c0:	f7f9 fcd6 	bl	8000270 <__aeabi_uldivmod>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4613      	mov	r3, r2
 80068ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80068cc:	4b0b      	ldr	r3, [pc, #44]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x200>)
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	0c1b      	lsrs	r3, r3, #16
 80068d2:	f003 0303 	and.w	r3, r3, #3
 80068d6:	3301      	adds	r3, #1
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80068dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068e6:	e002      	b.n	80068ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068e8:	4b05      	ldr	r3, [pc, #20]	@ (8006900 <HAL_RCC_GetSysClockFreq+0x204>)
 80068ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80068ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3750      	adds	r7, #80	@ 0x50
 80068f4:	46bd      	mov	sp, r7
 80068f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068fa:	bf00      	nop
 80068fc:	40023800 	.word	0x40023800
 8006900:	00f42400 	.word	0x00f42400
 8006904:	007a1200 	.word	0x007a1200

08006908 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800690c:	4b03      	ldr	r3, [pc, #12]	@ (800691c <HAL_RCC_GetHCLKFreq+0x14>)
 800690e:	681b      	ldr	r3, [r3, #0]
}
 8006910:	4618      	mov	r0, r3
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000000 	.word	0x20000000

08006920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006924:	f7ff fff0 	bl	8006908 <HAL_RCC_GetHCLKFreq>
 8006928:	4602      	mov	r2, r0
 800692a:	4b05      	ldr	r3, [pc, #20]	@ (8006940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	0a9b      	lsrs	r3, r3, #10
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	4903      	ldr	r1, [pc, #12]	@ (8006944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006936:	5ccb      	ldrb	r3, [r1, r3]
 8006938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800693c:	4618      	mov	r0, r3
 800693e:	bd80      	pop	{r7, pc}
 8006940:	40023800 	.word	0x40023800
 8006944:	0800c4e8 	.word	0x0800c4e8

08006948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800694c:	f7ff ffdc 	bl	8006908 <HAL_RCC_GetHCLKFreq>
 8006950:	4602      	mov	r2, r0
 8006952:	4b05      	ldr	r3, [pc, #20]	@ (8006968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	0b5b      	lsrs	r3, r3, #13
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	4903      	ldr	r1, [pc, #12]	@ (800696c <HAL_RCC_GetPCLK2Freq+0x24>)
 800695e:	5ccb      	ldrb	r3, [r1, r3]
 8006960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006964:	4618      	mov	r0, r3
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40023800 	.word	0x40023800
 800696c:	0800c4e8 	.word	0x0800c4e8

08006970 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b086      	sub	sp, #24
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006994:	2b00      	cmp	r3, #0
 8006996:	d035      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006998:	4b62      	ldr	r3, [pc, #392]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800699e:	f7fc f93f 	bl	8002c20 <HAL_GetTick>
 80069a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069a4:	e008      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069a6:	f7fc f93b 	bl	8002c20 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d901      	bls.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e0b0      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069b8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1f0      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	019a      	lsls	r2, r3, #6
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	071b      	lsls	r3, r3, #28
 80069d0:	4955      	ldr	r1, [pc, #340]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80069d8:	4b52      	ldr	r3, [pc, #328]	@ (8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069de:	f7fc f91f 	bl	8002c20 <HAL_GetTick>
 80069e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069e4:	e008      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80069e6:	f7fc f91b 	bl	8002c20 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e090      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80069f8:	4b4b      	ldr	r3, [pc, #300]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8083 	beq.w	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a12:	2300      	movs	r3, #0
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	4b44      	ldr	r3, [pc, #272]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	4a43      	ldr	r2, [pc, #268]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a22:	4b41      	ldr	r3, [pc, #260]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a3e      	ldr	r2, [pc, #248]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a3a:	f7fc f8f1 	bl	8002c20 <HAL_GetTick>
 8006a3e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a40:	e008      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a42:	f7fc f8ed 	bl	8002c20 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d901      	bls.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e062      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006a54:	4b35      	ldr	r3, [pc, #212]	@ (8006b2c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d0f0      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a60:	4b31      	ldr	r3, [pc, #196]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a68:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d02f      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d028      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a86:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a88:	4b29      	ldr	r3, [pc, #164]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a8e:	4b28      	ldr	r3, [pc, #160]	@ (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a94:	4a24      	ldr	r2, [pc, #144]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a9a:	4b23      	ldr	r3, [pc, #140]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d114      	bne.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006aa6:	f7fc f8bb 	bl	8002c20 <HAL_GetTick>
 8006aaa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aac:	e00a      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aae:	f7fc f8b7 	bl	8002c20 <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e02a      	b.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac4:	4b18      	ldr	r3, [pc, #96]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0ee      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006adc:	d10d      	bne.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006ade:	4b12      	ldr	r3, [pc, #72]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006aee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af2:	490d      	ldr	r1, [pc, #52]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006af4:	4313      	orrs	r3, r2
 8006af6:	608b      	str	r3, [r1, #8]
 8006af8:	e005      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006afa:	4b0b      	ldr	r3, [pc, #44]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	4a0a      	ldr	r2, [pc, #40]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b00:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006b04:	6093      	str	r3, [r2, #8]
 8006b06:	4b08      	ldr	r3, [pc, #32]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b12:	4905      	ldr	r1, [pc, #20]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	42470068 	.word	0x42470068
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	40007000 	.word	0x40007000
 8006b30:	42470e40 	.word	0x42470e40

08006b34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d13f      	bne.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006b52:	4b24      	ldr	r3, [pc, #144]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b5a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d006      	beq.n	8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b68:	d12f      	bne.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006b6c:	617b      	str	r3, [r7, #20]
          break;
 8006b6e:	e02f      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b70:	4b1c      	ldr	r3, [pc, #112]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b7c:	d108      	bne.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b7e:	4b19      	ldr	r3, [pc, #100]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b86:	4a19      	ldr	r2, [pc, #100]	@ (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	e007      	b.n	8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b90:	4b14      	ldr	r3, [pc, #80]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b98:	4a15      	ldr	r2, [pc, #84]	@ (8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b9e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006ba0:	4b10      	ldr	r3, [pc, #64]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ba6:	099b      	lsrs	r3, r3, #6
 8006ba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	fb02 f303 	mul.w	r3, r2, r3
 8006bb2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bba:	0f1b      	lsrs	r3, r3, #28
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc6:	617b      	str	r3, [r7, #20]
          break;
 8006bc8:	e002      	b.n	8006bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	617b      	str	r3, [r7, #20]
          break;
 8006bce:	bf00      	nop
        }
      }
      break;
 8006bd0:	e000      	b.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006bd2:	bf00      	nop
    }
  }
  return frequency;
 8006bd4:	697b      	ldr	r3, [r7, #20]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40023800 	.word	0x40023800
 8006be8:	00bb8000 	.word	0x00bb8000
 8006bec:	007a1200 	.word	0x007a1200
 8006bf0:	00f42400 	.word	0x00f42400

08006bf4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e01c      	b.n	8006c40 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	795b      	ldrb	r3, [r3, #5]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f7fb fdec 	bl	80027f4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0204 	orr.w	r2, r2, #4
 8006c30:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c52:	2300      	movs	r3, #0
 8006c54:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	791b      	ldrb	r3, [r3, #4]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e044      	b.n	8006cec <HAL_RNG_GenerateRandomNumber+0xa4>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	795b      	ldrb	r3, [r3, #5]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d133      	bne.n	8006cda <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2202      	movs	r2, #2
 8006c76:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c78:	f7fb ffd2 	bl	8002c20 <HAL_GetTick>
 8006c7c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006c7e:	e018      	b.n	8006cb2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006c80:	f7fb ffce 	bl	8002c20 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d911      	bls.n	8006cb2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d00a      	beq.n	8006cb2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e01c      	b.n	8006cec <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f003 0301 	and.w	r3, r3, #1
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d1df      	bne.n	8006c80 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68da      	ldr	r2, [r3, #12]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	715a      	strb	r2, [r3, #5]
 8006cd8:	e004      	b.n	8006ce4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2204      	movs	r2, #4
 8006cde:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	711a      	strb	r2, [r3, #4]

  return status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e07b      	b.n	8006dfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d108      	bne.n	8006d20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d16:	d009      	beq.n	8006d2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	61da      	str	r2, [r3, #28]
 8006d1e:	e005      	b.n	8006d2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7fb fd76 	bl	8002838 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	431a      	orrs	r2, r3
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	699b      	ldr	r3, [r3, #24]
 8006d98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d9c:	431a      	orrs	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006db0:	ea42 0103 	orr.w	r1, r2, r3
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006db8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	0c1b      	lsrs	r3, r3, #16
 8006dca:	f003 0104 	and.w	r1, r3, #4
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd2:	f003 0210 	and.w	r2, r3, #16
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b082      	sub	sp, #8
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e042      	b.n	8006e9e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d106      	bne.n	8006e32 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f7fb fd4b 	bl	80028c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2224      	movs	r2, #36	@ 0x24
 8006e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e48:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f972 	bl	8007134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e5e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695a      	ldr	r2, [r3, #20]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e6e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e7e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b08a      	sub	sp, #40	@ 0x28
 8006eaa:	af02      	add	r7, sp, #8
 8006eac:	60f8      	str	r0, [r7, #12]
 8006eae:	60b9      	str	r1, [r7, #8]
 8006eb0:	603b      	str	r3, [r7, #0]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b20      	cmp	r3, #32
 8006ec4:	d175      	bne.n	8006fb2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <HAL_UART_Transmit+0x2c>
 8006ecc:	88fb      	ldrh	r3, [r7, #6]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e06e      	b.n	8006fb4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2221      	movs	r2, #33	@ 0x21
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ee4:	f7fb fe9c 	bl	8002c20 <HAL_GetTick>
 8006ee8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	88fa      	ldrh	r2, [r7, #6]
 8006eee:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006efe:	d108      	bne.n	8006f12 <HAL_UART_Transmit+0x6c>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d104      	bne.n	8006f12 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	61bb      	str	r3, [r7, #24]
 8006f10:	e003      	b.n	8006f1a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f1a:	e02e      	b.n	8006f7a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2200      	movs	r2, #0
 8006f24:	2180      	movs	r1, #128	@ 0x80
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 f848 	bl	8006fbc <UART_WaitOnFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e03a      	b.n	8006fb4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f52:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	3302      	adds	r3, #2
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	e007      	b.n	8006f6c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	781a      	ldrb	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1cb      	bne.n	8006f1c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	2140      	movs	r1, #64	@ 0x40
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 f814 	bl	8006fbc <UART_WaitOnFlagUntilTimeout>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e006      	b.n	8006fb4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	e000      	b.n	8006fb4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006fb2:	2302      	movs	r3, #2
  }
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3720      	adds	r7, #32
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	603b      	str	r3, [r7, #0]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fcc:	e03b      	b.n	8007046 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d037      	beq.n	8007046 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd6:	f7fb fe23 	bl	8002c20 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	6a3a      	ldr	r2, [r7, #32]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d302      	bcc.n	8006fec <UART_WaitOnFlagUntilTimeout+0x30>
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e03a      	b.n	8007066 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d023      	beq.n	8007046 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b80      	cmp	r3, #128	@ 0x80
 8007002:	d020      	beq.n	8007046 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b40      	cmp	r3, #64	@ 0x40
 8007008:	d01d      	beq.n	8007046 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b08      	cmp	r3, #8
 8007016:	d116      	bne.n	8007046 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800702e:	68f8      	ldr	r0, [r7, #12]
 8007030:	f000 f81d 	bl	800706e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2208      	movs	r2, #8
 8007038:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e00f      	b.n	8007066 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4013      	ands	r3, r2
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	429a      	cmp	r2, r3
 8007054:	bf0c      	ite	eq
 8007056:	2301      	moveq	r3, #1
 8007058:	2300      	movne	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	429a      	cmp	r2, r3
 8007062:	d0b4      	beq.n	8006fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800706e:	b480      	push	{r7}
 8007070:	b095      	sub	sp, #84	@ 0x54
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	330c      	adds	r3, #12
 800707c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800708c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	330c      	adds	r3, #12
 8007094:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007096:	643a      	str	r2, [r7, #64]	@ 0x40
 8007098:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800709c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e5      	bne.n	8007076 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3314      	adds	r3, #20
 80070b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3314      	adds	r3, #20
 80070c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070d2:	e841 2300 	strex	r3, r2, [r1]
 80070d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1e5      	bne.n	80070aa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d119      	bne.n	800711a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	330c      	adds	r3, #12
 80070ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f023 0310 	bic.w	r3, r3, #16
 80070fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	330c      	adds	r3, #12
 8007104:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007106:	61ba      	str	r2, [r7, #24]
 8007108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6979      	ldr	r1, [r7, #20]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	613b      	str	r3, [r7, #16]
   return(result);
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e5      	bne.n	80070e6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007128:	bf00      	nop
 800712a:	3754      	adds	r7, #84	@ 0x54
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007138:	b0c0      	sub	sp, #256	@ 0x100
 800713a:	af00      	add	r7, sp, #0
 800713c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007150:	68d9      	ldr	r1, [r3, #12]
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	ea40 0301 	orr.w	r3, r0, r1
 800715c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800715e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	431a      	orrs	r2, r3
 800716c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	431a      	orrs	r2, r3
 8007174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800718c:	f021 010c 	bic.w	r1, r1, #12
 8007190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800719a:	430b      	orrs	r3, r1
 800719c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80071aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ae:	6999      	ldr	r1, [r3, #24]
 80071b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	ea40 0301 	orr.w	r3, r0, r1
 80071ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	4b8f      	ldr	r3, [pc, #572]	@ (8007400 <UART_SetConfig+0x2cc>)
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d005      	beq.n	80071d4 <UART_SetConfig+0xa0>
 80071c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007404 <UART_SetConfig+0x2d0>)
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d104      	bne.n	80071de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071d4:	f7ff fbb8 	bl	8006948 <HAL_RCC_GetPCLK2Freq>
 80071d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80071dc:	e003      	b.n	80071e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071de:	f7ff fb9f 	bl	8006920 <HAL_RCC_GetPCLK1Freq>
 80071e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ea:	69db      	ldr	r3, [r3, #28]
 80071ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071f0:	f040 810c 	bne.w	800740c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071f8:	2200      	movs	r2, #0
 80071fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007202:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007206:	4622      	mov	r2, r4
 8007208:	462b      	mov	r3, r5
 800720a:	1891      	adds	r1, r2, r2
 800720c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800720e:	415b      	adcs	r3, r3
 8007210:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007212:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007216:	4621      	mov	r1, r4
 8007218:	eb12 0801 	adds.w	r8, r2, r1
 800721c:	4629      	mov	r1, r5
 800721e:	eb43 0901 	adc.w	r9, r3, r1
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800722e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007232:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007236:	4690      	mov	r8, r2
 8007238:	4699      	mov	r9, r3
 800723a:	4623      	mov	r3, r4
 800723c:	eb18 0303 	adds.w	r3, r8, r3
 8007240:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007244:	462b      	mov	r3, r5
 8007246:	eb49 0303 	adc.w	r3, r9, r3
 800724a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800724e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800725a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800725e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007262:	460b      	mov	r3, r1
 8007264:	18db      	adds	r3, r3, r3
 8007266:	653b      	str	r3, [r7, #80]	@ 0x50
 8007268:	4613      	mov	r3, r2
 800726a:	eb42 0303 	adc.w	r3, r2, r3
 800726e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007270:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007274:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007278:	f7f8 fffa 	bl	8000270 <__aeabi_uldivmod>
 800727c:	4602      	mov	r2, r0
 800727e:	460b      	mov	r3, r1
 8007280:	4b61      	ldr	r3, [pc, #388]	@ (8007408 <UART_SetConfig+0x2d4>)
 8007282:	fba3 2302 	umull	r2, r3, r3, r2
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	011c      	lsls	r4, r3, #4
 800728a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800728e:	2200      	movs	r2, #0
 8007290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007294:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007298:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	1891      	adds	r1, r2, r2
 80072a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072a4:	415b      	adcs	r3, r3
 80072a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80072ac:	4641      	mov	r1, r8
 80072ae:	eb12 0a01 	adds.w	sl, r2, r1
 80072b2:	4649      	mov	r1, r9
 80072b4:	eb43 0b01 	adc.w	fp, r3, r1
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072cc:	4692      	mov	sl, r2
 80072ce:	469b      	mov	fp, r3
 80072d0:	4643      	mov	r3, r8
 80072d2:	eb1a 0303 	adds.w	r3, sl, r3
 80072d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80072da:	464b      	mov	r3, r9
 80072dc:	eb4b 0303 	adc.w	r3, fp, r3
 80072e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80072e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80072f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80072f8:	460b      	mov	r3, r1
 80072fa:	18db      	adds	r3, r3, r3
 80072fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80072fe:	4613      	mov	r3, r2
 8007300:	eb42 0303 	adc.w	r3, r2, r3
 8007304:	647b      	str	r3, [r7, #68]	@ 0x44
 8007306:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800730a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800730e:	f7f8 ffaf 	bl	8000270 <__aeabi_uldivmod>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4611      	mov	r1, r2
 8007318:	4b3b      	ldr	r3, [pc, #236]	@ (8007408 <UART_SetConfig+0x2d4>)
 800731a:	fba3 2301 	umull	r2, r3, r3, r1
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	2264      	movs	r2, #100	@ 0x64
 8007322:	fb02 f303 	mul.w	r3, r2, r3
 8007326:	1acb      	subs	r3, r1, r3
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800732e:	4b36      	ldr	r3, [pc, #216]	@ (8007408 <UART_SetConfig+0x2d4>)
 8007330:	fba3 2302 	umull	r2, r3, r3, r2
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800733c:	441c      	add	r4, r3
 800733e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007342:	2200      	movs	r2, #0
 8007344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007348:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800734c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007350:	4642      	mov	r2, r8
 8007352:	464b      	mov	r3, r9
 8007354:	1891      	adds	r1, r2, r2
 8007356:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007358:	415b      	adcs	r3, r3
 800735a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800735c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007360:	4641      	mov	r1, r8
 8007362:	1851      	adds	r1, r2, r1
 8007364:	6339      	str	r1, [r7, #48]	@ 0x30
 8007366:	4649      	mov	r1, r9
 8007368:	414b      	adcs	r3, r1
 800736a:	637b      	str	r3, [r7, #52]	@ 0x34
 800736c:	f04f 0200 	mov.w	r2, #0
 8007370:	f04f 0300 	mov.w	r3, #0
 8007374:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007378:	4659      	mov	r1, fp
 800737a:	00cb      	lsls	r3, r1, #3
 800737c:	4651      	mov	r1, sl
 800737e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007382:	4651      	mov	r1, sl
 8007384:	00ca      	lsls	r2, r1, #3
 8007386:	4610      	mov	r0, r2
 8007388:	4619      	mov	r1, r3
 800738a:	4603      	mov	r3, r0
 800738c:	4642      	mov	r2, r8
 800738e:	189b      	adds	r3, r3, r2
 8007390:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007394:	464b      	mov	r3, r9
 8007396:	460a      	mov	r2, r1
 8007398:	eb42 0303 	adc.w	r3, r2, r3
 800739c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80073ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80073b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80073b4:	460b      	mov	r3, r1
 80073b6:	18db      	adds	r3, r3, r3
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073ba:	4613      	mov	r3, r2
 80073bc:	eb42 0303 	adc.w	r3, r2, r3
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80073ca:	f7f8 ff51 	bl	8000270 <__aeabi_uldivmod>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007408 <UART_SetConfig+0x2d4>)
 80073d4:	fba3 1302 	umull	r1, r3, r3, r2
 80073d8:	095b      	lsrs	r3, r3, #5
 80073da:	2164      	movs	r1, #100	@ 0x64
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	3332      	adds	r3, #50	@ 0x32
 80073e6:	4a08      	ldr	r2, [pc, #32]	@ (8007408 <UART_SetConfig+0x2d4>)
 80073e8:	fba2 2303 	umull	r2, r3, r2, r3
 80073ec:	095b      	lsrs	r3, r3, #5
 80073ee:	f003 0207 	and.w	r2, r3, #7
 80073f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4422      	add	r2, r4
 80073fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073fc:	e106      	b.n	800760c <UART_SetConfig+0x4d8>
 80073fe:	bf00      	nop
 8007400:	40011000 	.word	0x40011000
 8007404:	40011400 	.word	0x40011400
 8007408:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800740c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007410:	2200      	movs	r2, #0
 8007412:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007416:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800741a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800741e:	4642      	mov	r2, r8
 8007420:	464b      	mov	r3, r9
 8007422:	1891      	adds	r1, r2, r2
 8007424:	6239      	str	r1, [r7, #32]
 8007426:	415b      	adcs	r3, r3
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
 800742a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800742e:	4641      	mov	r1, r8
 8007430:	1854      	adds	r4, r2, r1
 8007432:	4649      	mov	r1, r9
 8007434:	eb43 0501 	adc.w	r5, r3, r1
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	00eb      	lsls	r3, r5, #3
 8007442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007446:	00e2      	lsls	r2, r4, #3
 8007448:	4614      	mov	r4, r2
 800744a:	461d      	mov	r5, r3
 800744c:	4643      	mov	r3, r8
 800744e:	18e3      	adds	r3, r4, r3
 8007450:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007454:	464b      	mov	r3, r9
 8007456:	eb45 0303 	adc.w	r3, r5, r3
 800745a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800745e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800746a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	f04f 0300 	mov.w	r3, #0
 8007476:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800747a:	4629      	mov	r1, r5
 800747c:	008b      	lsls	r3, r1, #2
 800747e:	4621      	mov	r1, r4
 8007480:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007484:	4621      	mov	r1, r4
 8007486:	008a      	lsls	r2, r1, #2
 8007488:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800748c:	f7f8 fef0 	bl	8000270 <__aeabi_uldivmod>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4b60      	ldr	r3, [pc, #384]	@ (8007618 <UART_SetConfig+0x4e4>)
 8007496:	fba3 2302 	umull	r2, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	011c      	lsls	r4, r3, #4
 800749e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80074a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80074ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	61b9      	str	r1, [r7, #24]
 80074b8:	415b      	adcs	r3, r3
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c0:	4641      	mov	r1, r8
 80074c2:	1851      	adds	r1, r2, r1
 80074c4:	6139      	str	r1, [r7, #16]
 80074c6:	4649      	mov	r1, r9
 80074c8:	414b      	adcs	r3, r1
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074d8:	4659      	mov	r1, fp
 80074da:	00cb      	lsls	r3, r1, #3
 80074dc:	4651      	mov	r1, sl
 80074de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e2:	4651      	mov	r1, sl
 80074e4:	00ca      	lsls	r2, r1, #3
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	4642      	mov	r2, r8
 80074ee:	189b      	adds	r3, r3, r2
 80074f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074f4:	464b      	mov	r3, r9
 80074f6:	460a      	mov	r2, r1
 80074f8:	eb42 0303 	adc.w	r3, r2, r3
 80074fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	67bb      	str	r3, [r7, #120]	@ 0x78
 800750a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800750c:	f04f 0200 	mov.w	r2, #0
 8007510:	f04f 0300 	mov.w	r3, #0
 8007514:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007518:	4649      	mov	r1, r9
 800751a:	008b      	lsls	r3, r1, #2
 800751c:	4641      	mov	r1, r8
 800751e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007522:	4641      	mov	r1, r8
 8007524:	008a      	lsls	r2, r1, #2
 8007526:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800752a:	f7f8 fea1 	bl	8000270 <__aeabi_uldivmod>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	4611      	mov	r1, r2
 8007534:	4b38      	ldr	r3, [pc, #224]	@ (8007618 <UART_SetConfig+0x4e4>)
 8007536:	fba3 2301 	umull	r2, r3, r3, r1
 800753a:	095b      	lsrs	r3, r3, #5
 800753c:	2264      	movs	r2, #100	@ 0x64
 800753e:	fb02 f303 	mul.w	r3, r2, r3
 8007542:	1acb      	subs	r3, r1, r3
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	3332      	adds	r3, #50	@ 0x32
 8007548:	4a33      	ldr	r2, [pc, #204]	@ (8007618 <UART_SetConfig+0x4e4>)
 800754a:	fba2 2303 	umull	r2, r3, r2, r3
 800754e:	095b      	lsrs	r3, r3, #5
 8007550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007554:	441c      	add	r4, r3
 8007556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800755a:	2200      	movs	r2, #0
 800755c:	673b      	str	r3, [r7, #112]	@ 0x70
 800755e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007560:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	1891      	adds	r1, r2, r2
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	415b      	adcs	r3, r3
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007574:	4641      	mov	r1, r8
 8007576:	1851      	adds	r1, r2, r1
 8007578:	6039      	str	r1, [r7, #0]
 800757a:	4649      	mov	r1, r9
 800757c:	414b      	adcs	r3, r1
 800757e:	607b      	str	r3, [r7, #4]
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800758c:	4659      	mov	r1, fp
 800758e:	00cb      	lsls	r3, r1, #3
 8007590:	4651      	mov	r1, sl
 8007592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007596:	4651      	mov	r1, sl
 8007598:	00ca      	lsls	r2, r1, #3
 800759a:	4610      	mov	r0, r2
 800759c:	4619      	mov	r1, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	4642      	mov	r2, r8
 80075a2:	189b      	adds	r3, r3, r2
 80075a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075a6:	464b      	mov	r3, r9
 80075a8:	460a      	mov	r2, r1
 80075aa:	eb42 0303 	adc.w	r3, r2, r3
 80075ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80075b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80075ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	f04f 0300 	mov.w	r3, #0
 80075c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80075c8:	4649      	mov	r1, r9
 80075ca:	008b      	lsls	r3, r1, #2
 80075cc:	4641      	mov	r1, r8
 80075ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d2:	4641      	mov	r1, r8
 80075d4:	008a      	lsls	r2, r1, #2
 80075d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80075da:	f7f8 fe49 	bl	8000270 <__aeabi_uldivmod>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007618 <UART_SetConfig+0x4e4>)
 80075e4:	fba3 1302 	umull	r1, r3, r3, r2
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	2164      	movs	r1, #100	@ 0x64
 80075ec:	fb01 f303 	mul.w	r3, r1, r3
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	3332      	adds	r3, #50	@ 0x32
 80075f6:	4a08      	ldr	r2, [pc, #32]	@ (8007618 <UART_SetConfig+0x4e4>)
 80075f8:	fba2 2303 	umull	r2, r3, r2, r3
 80075fc:	095b      	lsrs	r3, r3, #5
 80075fe:	f003 020f 	and.w	r2, r3, #15
 8007602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4422      	add	r2, r4
 800760a:	609a      	str	r2, [r3, #8]
}
 800760c:	bf00      	nop
 800760e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007612:	46bd      	mov	sp, r7
 8007614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007618:	51eb851f 	.word	0x51eb851f

0800761c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800761c:	b084      	sub	sp, #16
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	f107 001c 	add.w	r0, r7, #28
 800762a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800762e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007632:	2b01      	cmp	r3, #1
 8007634:	d123      	bne.n	800767e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800764a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800765e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007662:	2b01      	cmp	r3, #1
 8007664:	d105      	bne.n	8007672 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f9dc 	bl	8007a30 <USB_CoreReset>
 8007678:	4603      	mov	r3, r0
 800767a:	73fb      	strb	r3, [r7, #15]
 800767c:	e01b      	b.n	80076b6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f9d0 	bl	8007a30 <USB_CoreReset>
 8007690:	4603      	mov	r3, r0
 8007692:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007694:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007698:	2b00      	cmp	r3, #0
 800769a:	d106      	bne.n	80076aa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	639a      	str	r2, [r3, #56]	@ 0x38
 80076a8:	e005      	b.n	80076b6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076b6:	7fbb      	ldrb	r3, [r7, #30]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d10b      	bne.n	80076d4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f043 0206 	orr.w	r2, r3, #6
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	f043 0220 	orr.w	r2, r3, #32
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076e0:	b004      	add	sp, #16
 80076e2:	4770      	bx	lr

080076e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f043 0201 	orr.w	r2, r3, #1
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007706:	b480      	push	{r7}
 8007708:	b083      	sub	sp, #12
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f023 0201 	bic.w	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007744:	78fb      	ldrb	r3, [r7, #3]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d115      	bne.n	8007776 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007756:	200a      	movs	r0, #10
 8007758:	f7fb fa6e 	bl	8002c38 <HAL_Delay>
      ms += 10U;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	330a      	adds	r3, #10
 8007760:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f956 	bl	8007a14 <USB_GetMode>
 8007768:	4603      	mov	r3, r0
 800776a:	2b01      	cmp	r3, #1
 800776c:	d01e      	beq.n	80077ac <USB_SetCurrentMode+0x84>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2bc7      	cmp	r3, #199	@ 0xc7
 8007772:	d9f0      	bls.n	8007756 <USB_SetCurrentMode+0x2e>
 8007774:	e01a      	b.n	80077ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007776:	78fb      	ldrb	r3, [r7, #3]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d115      	bne.n	80077a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007788:	200a      	movs	r0, #10
 800778a:	f7fb fa55 	bl	8002c38 <HAL_Delay>
      ms += 10U;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	330a      	adds	r3, #10
 8007792:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f93d 	bl	8007a14 <USB_GetMode>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d005      	beq.n	80077ac <USB_SetCurrentMode+0x84>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80077a4:	d9f0      	bls.n	8007788 <USB_SetCurrentMode+0x60>
 80077a6:	e001      	b.n	80077ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e005      	b.n	80077b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80077b0:	d101      	bne.n	80077b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077ca:	2300      	movs	r3, #0
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3301      	adds	r3, #1
 80077d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077da:	d901      	bls.n	80077e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077dc:	2303      	movs	r3, #3
 80077de:	e01b      	b.n	8007818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	daf2      	bge.n	80077ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	019b      	lsls	r3, r3, #6
 80077f0:	f043 0220 	orr.w	r2, r3, #32
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007804:	d901      	bls.n	800780a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e006      	b.n	8007818 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b20      	cmp	r3, #32
 8007814:	d0f0      	beq.n	80077f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007816:	2300      	movs	r3, #0
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800783c:	d901      	bls.n	8007842 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e018      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	daf2      	bge.n	8007830 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2210      	movs	r2, #16
 8007852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007860:	d901      	bls.n	8007866 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e006      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b10      	cmp	r3, #16
 8007870:	d0f0      	beq.n	8007854 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007880:	b480      	push	{r7}
 8007882:	b089      	sub	sp, #36	@ 0x24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	4611      	mov	r1, r2
 800788c:	461a      	mov	r2, r3
 800788e:	460b      	mov	r3, r1
 8007890:	71fb      	strb	r3, [r7, #7]
 8007892:	4613      	mov	r3, r2
 8007894:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800789e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d123      	bne.n	80078ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80078a6:	88bb      	ldrh	r3, [r7, #4]
 80078a8:	3303      	adds	r3, #3
 80078aa:	089b      	lsrs	r3, r3, #2
 80078ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	61bb      	str	r3, [r7, #24]
 80078b2:	e018      	b.n	80078e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	031a      	lsls	r2, r3, #12
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078c0:	461a      	mov	r2, r3
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	3301      	adds	r3, #1
 80078cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	3301      	adds	r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	3301      	adds	r3, #1
 80078d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	3301      	adds	r3, #1
 80078de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	3301      	adds	r3, #1
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d3e2      	bcc.n	80078b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078ee:	2300      	movs	r3, #0
}
 80078f0:	4618      	mov	r0, r3
 80078f2:	3724      	adds	r7, #36	@ 0x24
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b08b      	sub	sp, #44	@ 0x2c
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	4613      	mov	r3, r2
 8007908:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007912:	88fb      	ldrh	r3, [r7, #6]
 8007914:	089b      	lsrs	r3, r3, #2
 8007916:	b29b      	uxth	r3, r3
 8007918:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800791a:	88fb      	ldrh	r3, [r7, #6]
 800791c:	f003 0303 	and.w	r3, r3, #3
 8007920:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007922:	2300      	movs	r3, #0
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	e014      	b.n	8007952 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	601a      	str	r2, [r3, #0]
    pDest++;
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	3301      	adds	r3, #1
 8007938:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800793a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793c:	3301      	adds	r3, #1
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	3301      	adds	r3, #1
 8007944:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	3301      	adds	r3, #1
 800794a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800794c:	6a3b      	ldr	r3, [r7, #32]
 800794e:	3301      	adds	r3, #1
 8007950:	623b      	str	r3, [r7, #32]
 8007952:	6a3a      	ldr	r2, [r7, #32]
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	429a      	cmp	r2, r3
 8007958:	d3e6      	bcc.n	8007928 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800795a:	8bfb      	ldrh	r3, [r7, #30]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01e      	beq.n	800799e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800796a:	461a      	mov	r2, r3
 800796c:	f107 0310 	add.w	r3, r7, #16
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	00db      	lsls	r3, r3, #3
 800797c:	fa22 f303 	lsr.w	r3, r2, r3
 8007980:	b2da      	uxtb	r2, r3
 8007982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007984:	701a      	strb	r2, [r3, #0]
      i++;
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	3301      	adds	r3, #1
 800798a:	623b      	str	r3, [r7, #32]
      pDest++;
 800798c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798e:	3301      	adds	r3, #1
 8007990:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007992:	8bfb      	ldrh	r3, [r7, #30]
 8007994:	3b01      	subs	r3, #1
 8007996:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007998:	8bfb      	ldrh	r3, [r7, #30]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1ea      	bne.n	8007974 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	372c      	adds	r7, #44	@ 0x2c
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4013      	ands	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80079c4:	68fb      	ldr	r3, [r7, #12]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80079d2:	b480      	push	{r7}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80079e2:	78fb      	ldrb	r3, [r7, #3]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80079f2:	78fb      	ldrb	r3, [r7, #3]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	4013      	ands	r3, r2
 8007a04:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007a06:	68bb      	ldr	r3, [r7, #8]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	f003 0301 	and.w	r3, r3, #1
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a48:	d901      	bls.n	8007a4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e01b      	b.n	8007a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	daf2      	bge.n	8007a3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f043 0201 	orr.w	r2, r3, #1
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a72:	d901      	bls.n	8007a78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d0f0      	beq.n	8007a66 <USB_CoreReset+0x36>

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
	...

08007a94 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a94:	b084      	sub	sp, #16
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b086      	sub	sp, #24
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
 8007a9e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007abe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d119      	bne.n	8007b1e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007aea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d10a      	bne.n	8007b08 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007b00:	f043 0304 	orr.w	r3, r3, #4
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	e014      	b.n	8007b32 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007b16:	f023 0304 	bic.w	r3, r3, #4
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	e009      	b.n	8007b32 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007b2c:	f023 0304 	bic.w	r3, r3, #4
 8007b30:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007b32:	2110      	movs	r1, #16
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff fe43 	bl	80077c0 <USB_FlushTxFifo>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff fe6d 	bl	8007824 <USB_FlushRxFifo>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d001      	beq.n	8007b54 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b54:	2300      	movs	r3, #0
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	e015      	b.n	8007b86 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	015a      	lsls	r2, r3, #5
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	4413      	add	r3, r2
 8007b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b66:	461a      	mov	r2, r3
 8007b68:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3301      	adds	r3, #1
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d3e3      	bcc.n	8007b5a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a18      	ldr	r2, [pc, #96]	@ (8007c04 <USB_HostInit+0x170>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d10b      	bne.n	8007bc0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bae:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	4a15      	ldr	r2, [pc, #84]	@ (8007c08 <USB_HostInit+0x174>)
 8007bb4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a14      	ldr	r2, [pc, #80]	@ (8007c0c <USB_HostInit+0x178>)
 8007bba:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007bbe:	e009      	b.n	8007bd4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2280      	movs	r2, #128	@ 0x80
 8007bc4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a11      	ldr	r2, [pc, #68]	@ (8007c10 <USB_HostInit+0x17c>)
 8007bca:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a11      	ldr	r2, [pc, #68]	@ (8007c14 <USB_HostInit+0x180>)
 8007bd0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d105      	bne.n	8007be8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	f043 0210 	orr.w	r2, r3, #16
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	699a      	ldr	r2, [r3, #24]
 8007bec:	4b0a      	ldr	r3, [pc, #40]	@ (8007c18 <USB_HostInit+0x184>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c00:	b004      	add	sp, #16
 8007c02:	4770      	bx	lr
 8007c04:	40040000 	.word	0x40040000
 8007c08:	01000200 	.word	0x01000200
 8007c0c:	00e00300 	.word	0x00e00300
 8007c10:	00600080 	.word	0x00600080
 8007c14:	004000e0 	.word	0x004000e0
 8007c18:	a3200008 	.word	0xa3200008

08007c1c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007c3a:	f023 0303 	bic.w	r3, r3, #3
 8007c3e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	78fb      	ldrb	r3, [r7, #3]
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007c54:	4313      	orrs	r3, r2
 8007c56:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d107      	bne.n	8007c6e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c64:	461a      	mov	r2, r3
 8007c66:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007c6a:	6053      	str	r3, [r2, #4]
 8007c6c:	e00c      	b.n	8007c88 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	2b02      	cmp	r3, #2
 8007c72:	d107      	bne.n	8007c84 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007c80:	6053      	str	r3, [r2, #4]
 8007c82:	e001      	b.n	8007c88 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e000      	b.n	8007c8a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007cb6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cc4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007cc6:	2064      	movs	r0, #100	@ 0x64
 8007cc8:	f7fa ffb6 	bl	8002c38 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	68fa      	ldr	r2, [r7, #12]
 8007cd0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cd8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007cda:	200a      	movs	r0, #10
 8007cdc:	f7fa ffac 	bl	8002c38 <HAL_Delay>

  return HAL_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007d0e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <USB_DriveVbus+0x44>
 8007d1a:	78fb      	ldrb	r3, [r7, #3]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d106      	bne.n	8007d2e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007d28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d2c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d38:	d109      	bne.n	8007d4e <USB_DriveVbus+0x64>
 8007d3a:	78fb      	ldrb	r3, [r7, #3]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d106      	bne.n	8007d4e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007d48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d4c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	0c5b      	lsrs	r3, r3, #17
 8007d7a:	f003 0303 	and.w	r3, r3, #3
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	b29b      	uxth	r3, r3
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	4608      	mov	r0, r1
 8007db6:	4611      	mov	r1, r2
 8007db8:	461a      	mov	r2, r3
 8007dba:	4603      	mov	r3, r0
 8007dbc:	70fb      	strb	r3, [r7, #3]
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	70bb      	strb	r3, [r7, #2]
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8007de0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007de2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d87c      	bhi.n	8007ee4 <USB_HC_Init+0x138>
 8007dea:	a201      	add	r2, pc, #4	@ (adr r2, 8007df0 <USB_HC_Init+0x44>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e01 	.word	0x08007e01
 8007df4:	08007ea7 	.word	0x08007ea7
 8007df8:	08007e01 	.word	0x08007e01
 8007dfc:	08007e69 	.word	0x08007e69
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e00:	78fb      	ldrb	r3, [r7, #3]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007e12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007e14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da10      	bge.n	8007e3e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	0151      	lsls	r1, r2, #5
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	440a      	add	r2, r1
 8007e32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e3a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007e3c:	e055      	b.n	8007eea <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a6f      	ldr	r2, [pc, #444]	@ (8008000 <USB_HC_Init+0x254>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d151      	bne.n	8007eea <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	78fa      	ldrb	r2, [r7, #3]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e60:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007e64:	60d3      	str	r3, [r2, #12]
      break;
 8007e66:	e040      	b.n	8007eea <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e74:	461a      	mov	r2, r3
 8007e76:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007e7a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	da34      	bge.n	8007eee <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	78fa      	ldrb	r2, [r7, #3]
 8007e94:	0151      	lsls	r1, r2, #5
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	440a      	add	r2, r1
 8007e9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ea2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ea4:	e023      	b.n	8007eee <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ea6:	78fb      	ldrb	r3, [r7, #3]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	f240 2325 	movw	r3, #549	@ 0x225
 8007eb8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007eba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	da17      	bge.n	8007ef2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007ec2:	78fb      	ldrb	r3, [r7, #3]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	78fa      	ldrb	r2, [r7, #3]
 8007ed2:	0151      	lsls	r1, r2, #5
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	440a      	add	r2, r1
 8007ed8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007edc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007ee0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007ee2:	e006      	b.n	8007ef2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	77fb      	strb	r3, [r7, #31]
      break;
 8007ee8:	e004      	b.n	8007ef4 <USB_HC_Init+0x148>
      break;
 8007eea:	bf00      	nop
 8007eec:	e002      	b.n	8007ef4 <USB_HC_Init+0x148>
      break;
 8007eee:	bf00      	nop
 8007ef0:	e000      	b.n	8007ef4 <USB_HC_Init+0x148>
      break;
 8007ef2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f00:	461a      	mov	r2, r3
 8007f02:	2300      	movs	r3, #0
 8007f04:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	78fa      	ldrb	r2, [r7, #3]
 8007f16:	0151      	lsls	r1, r2, #5
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	440a      	add	r2, r1
 8007f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f20:	f043 0302 	orr.w	r3, r3, #2
 8007f24:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f2c:	699a      	ldr	r2, [r3, #24]
 8007f2e:	78fb      	ldrb	r3, [r7, #3]
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	2101      	movs	r1, #1
 8007f36:	fa01 f303 	lsl.w	r3, r1, r3
 8007f3a:	6939      	ldr	r1, [r7, #16]
 8007f3c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007f40:	4313      	orrs	r3, r2
 8007f42:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	699b      	ldr	r3, [r3, #24]
 8007f48:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007f50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	da03      	bge.n	8007f60 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007f58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f5c:	61bb      	str	r3, [r7, #24]
 8007f5e:	e001      	b.n	8007f64 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007f60:	2300      	movs	r3, #0
 8007f62:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff fef9 	bl	8007d5c <USB_GetHostSpeed>
 8007f6a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007f6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d106      	bne.n	8007f82 <USB_HC_Init+0x1d6>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d003      	beq.n	8007f82 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007f7a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	e001      	b.n	8007f86 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f86:	787b      	ldrb	r3, [r7, #1]
 8007f88:	059b      	lsls	r3, r3, #22
 8007f8a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f8e:	78bb      	ldrb	r3, [r7, #2]
 8007f90:	02db      	lsls	r3, r3, #11
 8007f92:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f96:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f98:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f9c:	049b      	lsls	r3, r3, #18
 8007f9e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007fa2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007fa4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007faa:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007fac:	69bb      	ldr	r3, [r7, #24]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fb4:	78fa      	ldrb	r2, [r7, #3]
 8007fb6:	0151      	lsls	r1, r2, #5
 8007fb8:	693a      	ldr	r2, [r7, #16]
 8007fba:	440a      	add	r2, r1
 8007fbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007fc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007fc4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007fc6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d003      	beq.n	8007fd6 <USB_HC_Init+0x22a>
 8007fce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d10f      	bne.n	8007ff6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ff0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ff4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007ff6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3720      	adds	r7, #32
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40040000 	.word	0x40040000

08008004 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08c      	sub	sp, #48	@ 0x30
 8008008:	af02      	add	r7, sp, #8
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	785b      	ldrb	r3, [r3, #1]
 800801a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800801c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008020:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4a5d      	ldr	r2, [pc, #372]	@ (800819c <USB_HC_StartXfer+0x198>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d12f      	bne.n	800808a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d11c      	bne.n	800806a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	7c9b      	ldrb	r3, [r3, #18]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <USB_HC_StartXfer+0x3c>
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	7c9b      	ldrb	r3, [r3, #18]
 800803c:	2b02      	cmp	r3, #2
 800803e:	d124      	bne.n	800808a <USB_HC_StartXfer+0x86>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	799b      	ldrb	r3, [r3, #6]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d120      	bne.n	800808a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	4413      	add	r3, r2
 8008050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	69fa      	ldr	r2, [r7, #28]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	6a3a      	ldr	r2, [r7, #32]
 800805c:	440a      	add	r2, r1
 800805e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008066:	60d3      	str	r3, [r2, #12]
 8008068:	e00f      	b.n	800808a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	791b      	ldrb	r3, [r3, #4]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10b      	bne.n	800808a <USB_HC_StartXfer+0x86>
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	795b      	ldrb	r3, [r3, #5]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d107      	bne.n	800808a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	785b      	ldrb	r3, [r3, #1]
 800807e:	4619      	mov	r1, r3
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 fb6b 	bl	800875c <USB_DoPing>
        return HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	e232      	b.n	80084f0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	799b      	ldrb	r3, [r3, #6]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d158      	bne.n	8008144 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008092:	2301      	movs	r3, #1
 8008094:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	78db      	ldrb	r3, [r3, #3]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800809e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	8a92      	ldrh	r2, [r2, #20]
 80080a4:	fb03 f202 	mul.w	r2, r3, r2
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	61da      	str	r2, [r3, #28]
 80080ac:	e07c      	b.n	80081a8 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	7c9b      	ldrb	r3, [r3, #18]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d130      	bne.n	8008118 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	2bbc      	cmp	r3, #188	@ 0xbc
 80080bc:	d918      	bls.n	80080f0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	8a9b      	ldrh	r3, [r3, #20]
 80080c2:	461a      	mov	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	69da      	ldr	r2, [r3, #28]
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d003      	beq.n	80080e0 <USB_HC_StartXfer+0xdc>
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d103      	bne.n	80080e8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2202      	movs	r2, #2
 80080e4:	60da      	str	r2, [r3, #12]
 80080e6:	e05f      	b.n	80081a8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2201      	movs	r2, #1
 80080ec:	60da      	str	r2, [r3, #12]
 80080ee:	e05b      	b.n	80081a8 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	6a1a      	ldr	r2, [r3, #32]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d007      	beq.n	8008110 <USB_HC_StartXfer+0x10c>
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	68db      	ldr	r3, [r3, #12]
 8008104:	2b02      	cmp	r3, #2
 8008106:	d003      	beq.n	8008110 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2204      	movs	r2, #4
 800810c:	60da      	str	r2, [r3, #12]
 800810e:	e04b      	b.n	80081a8 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2203      	movs	r2, #3
 8008114:	60da      	str	r2, [r3, #12]
 8008116:	e047      	b.n	80081a8 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008118:	79fb      	ldrb	r3, [r7, #7]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d10d      	bne.n	800813a <USB_HC_StartXfer+0x136>
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6a1b      	ldr	r3, [r3, #32]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	8a92      	ldrh	r2, [r2, #20]
 8008126:	4293      	cmp	r3, r2
 8008128:	d907      	bls.n	800813a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800812a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	8a92      	ldrh	r2, [r2, #20]
 8008130:	fb03 f202 	mul.w	r2, r3, r2
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	61da      	str	r2, [r3, #28]
 8008138:	e036      	b.n	80081a8 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6a1a      	ldr	r2, [r3, #32]
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	61da      	str	r2, [r3, #28]
 8008142:	e031      	b.n	80081a8 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d018      	beq.n	800817e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	68ba      	ldr	r2, [r7, #8]
 8008152:	8a92      	ldrh	r2, [r2, #20]
 8008154:	4413      	add	r3, r2
 8008156:	3b01      	subs	r3, #1
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	8a92      	ldrh	r2, [r2, #20]
 800815c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008160:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008162:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008164:	8b7b      	ldrh	r3, [r7, #26]
 8008166:	429a      	cmp	r2, r3
 8008168:	d90b      	bls.n	8008182 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800816a:	8b7b      	ldrh	r3, [r7, #26]
 800816c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800816e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	8a92      	ldrh	r2, [r2, #20]
 8008174:	fb03 f202 	mul.w	r2, r3, r2
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	61da      	str	r2, [r3, #28]
 800817c:	e001      	b.n	8008182 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800817e:	2301      	movs	r3, #1
 8008180:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	78db      	ldrb	r3, [r3, #3]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800818a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800818c:	68ba      	ldr	r2, [r7, #8]
 800818e:	8a92      	ldrh	r2, [r2, #20]
 8008190:	fb03 f202 	mul.w	r2, r3, r2
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	61da      	str	r2, [r3, #28]
 8008198:	e006      	b.n	80081a8 <USB_HC_StartXfer+0x1a4>
 800819a:	bf00      	nop
 800819c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6a1a      	ldr	r2, [r3, #32]
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	69db      	ldr	r3, [r3, #28]
 80081ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081b0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081b2:	04d9      	lsls	r1, r3, #19
 80081b4:	4ba3      	ldr	r3, [pc, #652]	@ (8008444 <USB_HC_StartXfer+0x440>)
 80081b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	7d9b      	ldrb	r3, [r3, #22]
 80081be:	075b      	lsls	r3, r3, #29
 80081c0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081c4:	69f9      	ldr	r1, [r7, #28]
 80081c6:	0148      	lsls	r0, r1, #5
 80081c8:	6a39      	ldr	r1, [r7, #32]
 80081ca:	4401      	add	r1, r0
 80081cc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80081d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80081d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80081d4:	79fb      	ldrb	r3, [r7, #7]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d009      	beq.n	80081ee <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	6999      	ldr	r1, [r3, #24]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ea:	460a      	mov	r2, r1
 80081ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	bf0c      	ite	eq
 80081fe:	2301      	moveq	r3, #1
 8008200:	2300      	movne	r3, #0
 8008202:	b2db      	uxtb	r3, r3
 8008204:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	4413      	add	r3, r2
 800820e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69fa      	ldr	r2, [r7, #28]
 8008216:	0151      	lsls	r1, r2, #5
 8008218:	6a3a      	ldr	r2, [r7, #32]
 800821a:	440a      	add	r2, r1
 800821c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008220:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008224:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	4413      	add	r3, r2
 800822e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	7e7b      	ldrb	r3, [r7, #25]
 8008236:	075b      	lsls	r3, r3, #29
 8008238:	69f9      	ldr	r1, [r7, #28]
 800823a:	0148      	lsls	r0, r1, #5
 800823c:	6a39      	ldr	r1, [r7, #32]
 800823e:	4401      	add	r1, r0
 8008240:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008244:	4313      	orrs	r3, r2
 8008246:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	799b      	ldrb	r3, [r3, #6]
 800824c:	2b01      	cmp	r3, #1
 800824e:	f040 80c3 	bne.w	80083d8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	7c5b      	ldrb	r3, [r3, #17]
 8008256:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800825c:	4313      	orrs	r3, r2
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	0151      	lsls	r1, r2, #5
 8008262:	6a3a      	ldr	r2, [r7, #32]
 8008264:	440a      	add	r2, r1
 8008266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800826a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800826e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	4413      	add	r3, r2
 8008278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	6a3a      	ldr	r2, [r7, #32]
 8008284:	440a      	add	r2, r1
 8008286:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800828a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800828e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	79db      	ldrb	r3, [r3, #7]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d123      	bne.n	80082e0 <USB_HC_StartXfer+0x2dc>
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	78db      	ldrb	r3, [r3, #3]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d11f      	bne.n	80082e0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	69fa      	ldr	r2, [r7, #28]
 80082b0:	0151      	lsls	r1, r2, #5
 80082b2:	6a3a      	ldr	r2, [r7, #32]
 80082b4:	440a      	add	r2, r1
 80082b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082be:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	015a      	lsls	r2, r3, #5
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	4413      	add	r3, r2
 80082c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	69fa      	ldr	r2, [r7, #28]
 80082d0:	0151      	lsls	r1, r2, #5
 80082d2:	6a3a      	ldr	r2, [r7, #32]
 80082d4:	440a      	add	r2, r1
 80082d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082de:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	7c9b      	ldrb	r3, [r3, #18]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d003      	beq.n	80082f0 <USB_HC_StartXfer+0x2ec>
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	7c9b      	ldrb	r3, [r3, #18]
 80082ec:	2b03      	cmp	r3, #3
 80082ee:	d117      	bne.n	8008320 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d113      	bne.n	8008320 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	78db      	ldrb	r3, [r3, #3]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d10f      	bne.n	8008320 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008300:	69fb      	ldr	r3, [r7, #28]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	4413      	add	r3, r2
 8008308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	69fa      	ldr	r2, [r7, #28]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	6a3a      	ldr	r2, [r7, #32]
 8008314:	440a      	add	r2, r1
 8008316:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800831a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800831e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	7c9b      	ldrb	r3, [r3, #18]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d162      	bne.n	80083ee <USB_HC_StartXfer+0x3ea>
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	78db      	ldrb	r3, [r3, #3]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d15e      	bne.n	80083ee <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	3b01      	subs	r3, #1
 8008336:	2b03      	cmp	r3, #3
 8008338:	d858      	bhi.n	80083ec <USB_HC_StartXfer+0x3e8>
 800833a:	a201      	add	r2, pc, #4	@ (adr r2, 8008340 <USB_HC_StartXfer+0x33c>)
 800833c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008340:	08008351 	.word	0x08008351
 8008344:	08008373 	.word	0x08008373
 8008348:	08008395 	.word	0x08008395
 800834c:	080083b7 	.word	0x080083b7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	4413      	add	r3, r2
 8008358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	0151      	lsls	r1, r2, #5
 8008362:	6a3a      	ldr	r2, [r7, #32]
 8008364:	440a      	add	r2, r1
 8008366:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800836a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800836e:	6053      	str	r3, [r2, #4]
          break;
 8008370:	e03d      	b.n	80083ee <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	4413      	add	r3, r2
 800837a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	69fa      	ldr	r2, [r7, #28]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	6a3a      	ldr	r2, [r7, #32]
 8008386:	440a      	add	r2, r1
 8008388:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800838c:	f043 030e 	orr.w	r3, r3, #14
 8008390:	6053      	str	r3, [r2, #4]
          break;
 8008392:	e02c      	b.n	80083ee <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	4413      	add	r3, r2
 800839c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	69fa      	ldr	r2, [r7, #28]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	6a3a      	ldr	r2, [r7, #32]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083b2:	6053      	str	r3, [r2, #4]
          break;
 80083b4:	e01b      	b.n	80083ee <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	015a      	lsls	r2, r3, #5
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	4413      	add	r3, r2
 80083be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	69fa      	ldr	r2, [r7, #28]
 80083c6:	0151      	lsls	r1, r2, #5
 80083c8:	6a3a      	ldr	r2, [r7, #32]
 80083ca:	440a      	add	r2, r1
 80083cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083d4:	6053      	str	r3, [r2, #4]
          break;
 80083d6:	e00a      	b.n	80083ee <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	015a      	lsls	r2, r3, #5
 80083dc:	6a3b      	ldr	r3, [r7, #32]
 80083de:	4413      	add	r3, r2
 80083e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e4:	461a      	mov	r2, r3
 80083e6:	2300      	movs	r3, #0
 80083e8:	6053      	str	r3, [r2, #4]
 80083ea:	e000      	b.n	80083ee <USB_HC_StartXfer+0x3ea>
          break;
 80083ec:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008404:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	78db      	ldrb	r3, [r3, #3]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008414:	613b      	str	r3, [r7, #16]
 8008416:	e003      	b.n	8008420 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800841e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008426:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	4413      	add	r3, r2
 8008430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008434:	461a      	mov	r2, r3
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	e055      	b.n	80084f0 <USB_HC_StartXfer+0x4ec>
 8008444:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	78db      	ldrb	r3, [r3, #3]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d14e      	bne.n	80084ee <USB_HC_StartXfer+0x4ea>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	6a1b      	ldr	r3, [r3, #32]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d04a      	beq.n	80084ee <USB_HC_StartXfer+0x4ea>
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	79db      	ldrb	r3, [r3, #7]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d146      	bne.n	80084ee <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	7c9b      	ldrb	r3, [r3, #18]
 8008464:	2b03      	cmp	r3, #3
 8008466:	d831      	bhi.n	80084cc <USB_HC_StartXfer+0x4c8>
 8008468:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <USB_HC_StartXfer+0x46c>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008481 	.word	0x08008481
 8008474:	080084a5 	.word	0x080084a5
 8008478:	08008481 	.word	0x08008481
 800847c:	080084a5 	.word	0x080084a5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	6a1b      	ldr	r3, [r3, #32]
 8008484:	3303      	adds	r3, #3
 8008486:	089b      	lsrs	r3, r3, #2
 8008488:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800848a:	8afa      	ldrh	r2, [r7, #22]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008490:	b29b      	uxth	r3, r3
 8008492:	429a      	cmp	r2, r3
 8008494:	d91c      	bls.n	80084d0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	f043 0220 	orr.w	r2, r3, #32
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	619a      	str	r2, [r3, #24]
        }
        break;
 80084a2:	e015      	b.n	80084d0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6a1b      	ldr	r3, [r3, #32]
 80084a8:	3303      	adds	r3, #3
 80084aa:	089b      	lsrs	r3, r3, #2
 80084ac:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80084ae:	8afa      	ldrh	r2, [r7, #22]
 80084b0:	6a3b      	ldr	r3, [r7, #32]
 80084b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d90a      	bls.n	80084d4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80084ca:	e003      	b.n	80084d4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80084cc:	bf00      	nop
 80084ce:	e002      	b.n	80084d6 <USB_HC_StartXfer+0x4d2>
        break;
 80084d0:	bf00      	nop
 80084d2:	e000      	b.n	80084d6 <USB_HC_StartXfer+0x4d2>
        break;
 80084d4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	6999      	ldr	r1, [r3, #24]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	785a      	ldrb	r2, [r3, #1]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	2000      	movs	r0, #0
 80084e6:	9000      	str	r0, [sp, #0]
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f7ff f9c9 	bl	8007880 <USB_WritePacket>
  }

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3728      	adds	r7, #40	@ 0x28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800850a:	695b      	ldr	r3, [r3, #20]
 800850c:	b29b      	uxth	r3, r3
}
 800850e:	4618      	mov	r0, r3
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800851a:	b480      	push	{r7}
 800851c:	b089      	sub	sp, #36	@ 0x24
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800852a:	78fb      	ldrb	r3, [r7, #3]
 800852c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	015a      	lsls	r2, r3, #5
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	4413      	add	r3, r2
 800853a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	0c9b      	lsrs	r3, r3, #18
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	4413      	add	r3, r2
 8008550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	0fdb      	lsrs	r3, r3, #31
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800855e:	69bb      	ldr	r3, [r7, #24]
 8008560:	015a      	lsls	r2, r3, #5
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	4413      	add	r3, r2
 8008566:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	0fdb      	lsrs	r3, r3, #31
 800856e:	f003 0301 	and.w	r3, r3, #1
 8008572:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b20      	cmp	r3, #32
 800857e:	d10d      	bne.n	800859c <USB_HC_Halt+0x82>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10a      	bne.n	800859c <USB_HC_Halt+0x82>
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d005      	beq.n	8008598 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2b01      	cmp	r3, #1
 8008590:	d002      	beq.n	8008598 <USB_HC_Halt+0x7e>
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2b03      	cmp	r3, #3
 8008596:	d101      	bne.n	800859c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	e0d8      	b.n	800874e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <USB_HC_Halt+0x8e>
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d173      	bne.n	8008690 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	69ba      	ldr	r2, [r7, #24]
 80085b8:	0151      	lsls	r1, r2, #5
 80085ba:	69fa      	ldr	r2, [r7, #28]
 80085bc:	440a      	add	r2, r1
 80085be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085c6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f003 0320 	and.w	r3, r3, #32
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d14a      	bne.n	800866a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d133      	bne.n	8008648 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	015a      	lsls	r2, r3, #5
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	4413      	add	r3, r2
 80085e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	69ba      	ldr	r2, [r7, #24]
 80085f0:	0151      	lsls	r1, r2, #5
 80085f2:	69fa      	ldr	r2, [r7, #28]
 80085f4:	440a      	add	r2, r1
 80085f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085fe:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	4413      	add	r3, r2
 8008608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	69ba      	ldr	r2, [r7, #24]
 8008610:	0151      	lsls	r1, r2, #5
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	440a      	add	r2, r1
 8008616:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800861a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800861e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	3301      	adds	r3, #1
 8008624:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800862c:	d82e      	bhi.n	800868c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	69fb      	ldr	r3, [r7, #28]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008644:	d0ec      	beq.n	8008620 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008646:	e081      	b.n	800874c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	4413      	add	r3, r2
 8008650:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	0151      	lsls	r1, r2, #5
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	440a      	add	r2, r1
 800865e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008662:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008666:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008668:	e070      	b.n	800874c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	015a      	lsls	r2, r3, #5
 800866e:	69fb      	ldr	r3, [r7, #28]
 8008670:	4413      	add	r3, r2
 8008672:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	0151      	lsls	r1, r2, #5
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	440a      	add	r2, r1
 8008680:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008684:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008688:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800868a:	e05f      	b.n	800874c <USB_HC_Halt+0x232>
            break;
 800868c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800868e:	e05d      	b.n	800874c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	4413      	add	r3, r2
 8008698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	0151      	lsls	r1, r2, #5
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	440a      	add	r2, r1
 80086a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086ae:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d133      	bne.n	8008728 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	69fa      	ldr	r2, [r7, #28]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	69ba      	ldr	r2, [r7, #24]
 80086f0:	0151      	lsls	r1, r2, #5
 80086f2:	69fa      	ldr	r2, [r7, #28]
 80086f4:	440a      	add	r2, r1
 80086f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086fe:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	3301      	adds	r3, #1
 8008704:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800870c:	d81d      	bhi.n	800874a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	4413      	add	r3, r2
 8008716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008720:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008724:	d0ec      	beq.n	8008700 <USB_HC_Halt+0x1e6>
 8008726:	e011      	b.n	800874c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	015a      	lsls	r2, r3, #5
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	4413      	add	r3, r2
 8008730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	0151      	lsls	r1, r2, #5
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	440a      	add	r2, r1
 800873e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008742:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008746:	6013      	str	r3, [r2, #0]
 8008748:	e000      	b.n	800874c <USB_HC_Halt+0x232>
          break;
 800874a:	bf00      	nop
    }
  }

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3724      	adds	r7, #36	@ 0x24
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
	...

0800875c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	460b      	mov	r3, r1
 8008766:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008770:	2301      	movs	r3, #1
 8008772:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	04da      	lsls	r2, r3, #19
 8008778:	4b15      	ldr	r3, [pc, #84]	@ (80087d0 <USB_DoPing+0x74>)
 800877a:	4013      	ands	r3, r2
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	0151      	lsls	r1, r2, #5
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	440a      	add	r2, r1
 8008784:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008788:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800878c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	4413      	add	r3, r2
 8008796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087a4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087ac:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087ba:	461a      	mov	r2, r3
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	371c      	adds	r7, #28
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	1ff80000 	.word	0x1ff80000

080087d4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7fe ff8c 	bl	8007706 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087ee:	2110      	movs	r1, #16
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f7fe ffe5 	bl	80077c0 <USB_FlushTxFifo>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d001      	beq.n	8008800 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f7ff f80f 	bl	8007824 <USB_FlushRxFifo>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008810:	2300      	movs	r3, #0
 8008812:	61bb      	str	r3, [r7, #24]
 8008814:	e01f      	b.n	8008856 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	4413      	add	r3, r2
 800881e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800882c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008834:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800883c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	015a      	lsls	r2, r3, #5
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	4413      	add	r3, r2
 8008846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800884a:	461a      	mov	r2, r3
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	3301      	adds	r3, #1
 8008854:	61bb      	str	r3, [r7, #24]
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b0f      	cmp	r3, #15
 800885a:	d9dc      	bls.n	8008816 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800885c:	2300      	movs	r3, #0
 800885e:	61bb      	str	r3, [r7, #24]
 8008860:	e034      	b.n	80088cc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	015a      	lsls	r2, r3, #5
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	4413      	add	r3, r2
 800886a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008878:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008880:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008888:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	4413      	add	r3, r2
 8008892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008896:	461a      	mov	r2, r3
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3301      	adds	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088a8:	d80c      	bhi.n	80088c4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088c0:	d0ec      	beq.n	800889c <USB_StopHost+0xc8>
 80088c2:	e000      	b.n	80088c6 <USB_StopHost+0xf2>
        break;
 80088c4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	3301      	adds	r3, #1
 80088ca:	61bb      	str	r3, [r7, #24]
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	2b0f      	cmp	r3, #15
 80088d0:	d9c7      	bls.n	8008862 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088d8:	461a      	mov	r2, r3
 80088da:	f04f 33ff 	mov.w	r3, #4294967295
 80088de:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f04f 32ff 	mov.w	r2, #4294967295
 80088e6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7fe fefb 	bl	80076e4 <USB_EnableGlobalInt>

  return ret;
 80088ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3720      	adds	r7, #32
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80088f8:	b590      	push	{r4, r7, lr}
 80088fa:	b089      	sub	sp, #36	@ 0x24
 80088fc:	af04      	add	r7, sp, #16
 80088fe:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008900:	2301      	movs	r3, #1
 8008902:	2202      	movs	r2, #2
 8008904:	2102      	movs	r1, #2
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fc85 	bl	8009216 <USBH_FindInterface>
 800890c:	4603      	mov	r3, r0
 800890e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008910:	7bfb      	ldrb	r3, [r7, #15]
 8008912:	2bff      	cmp	r3, #255	@ 0xff
 8008914:	d002      	beq.n	800891c <USBH_CDC_InterfaceInit+0x24>
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	2b01      	cmp	r3, #1
 800891a:	d901      	bls.n	8008920 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800891c:	2302      	movs	r3, #2
 800891e:	e13d      	b.n	8008b9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008920:	7bfb      	ldrb	r3, [r7, #15]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fc5a 	bl	80091de <USBH_SelectInterface>
 800892a:	4603      	mov	r3, r0
 800892c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800892e:	7bbb      	ldrb	r3, [r7, #14]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008934:	2302      	movs	r3, #2
 8008936:	e131      	b.n	8008b9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800893e:	2050      	movs	r0, #80	@ 0x50
 8008940:	f002 fb64 	bl	800b00c <malloc>
 8008944:	4603      	mov	r3, r0
 8008946:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800894e:	69db      	ldr	r3, [r3, #28]
 8008950:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008958:	2302      	movs	r3, #2
 800895a:	e11f      	b.n	8008b9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800895c:	2250      	movs	r2, #80	@ 0x50
 800895e:	2100      	movs	r1, #0
 8008960:	68b8      	ldr	r0, [r7, #8]
 8008962:	f002 fee7 	bl	800b734 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008966:	7bfb      	ldrb	r3, [r7, #15]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	211a      	movs	r1, #26
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	4413      	add	r3, r2
 8008972:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	b25b      	sxtb	r3, r3
 800897a:	2b00      	cmp	r3, #0
 800897c:	da15      	bge.n	80089aa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800897e:	7bfb      	ldrb	r3, [r7, #15]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	211a      	movs	r1, #26
 8008984:	fb01 f303 	mul.w	r3, r1, r3
 8008988:	4413      	add	r3, r2
 800898a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800898e:	781a      	ldrb	r2, [r3, #0]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	211a      	movs	r1, #26
 800899a:	fb01 f303 	mul.w	r3, r1, r3
 800899e:	4413      	add	r3, r2
 80089a0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80089a4:	881a      	ldrh	r2, [r3, #0]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	785b      	ldrb	r3, [r3, #1]
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f001 ffbe 	bl	800a932 <USBH_AllocPipe>
 80089b6:	4603      	mov	r3, r0
 80089b8:	461a      	mov	r2, r3
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	7819      	ldrb	r1, [r3, #0]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	7858      	ldrb	r0, [r3, #1]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089d2:	68ba      	ldr	r2, [r7, #8]
 80089d4:	8952      	ldrh	r2, [r2, #10]
 80089d6:	9202      	str	r2, [sp, #8]
 80089d8:	2203      	movs	r2, #3
 80089da:	9201      	str	r2, [sp, #4]
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	4623      	mov	r3, r4
 80089e0:	4602      	mov	r2, r0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f001 ff76 	bl	800a8d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2200      	movs	r2, #0
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f002 fa85 	bl	800af00 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80089f6:	2300      	movs	r3, #0
 80089f8:	2200      	movs	r2, #0
 80089fa:	210a      	movs	r1, #10
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc0a 	bl	8009216 <USBH_FindInterface>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2bff      	cmp	r3, #255	@ 0xff
 8008a0a:	d002      	beq.n	8008a12 <USBH_CDC_InterfaceInit+0x11a>
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d901      	bls.n	8008a16 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008a12:	2302      	movs	r3, #2
 8008a14:	e0c2      	b.n	8008b9c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	211a      	movs	r1, #26
 8008a1c:	fb01 f303 	mul.w	r3, r1, r3
 8008a20:	4413      	add	r3, r2
 8008a22:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	b25b      	sxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	da16      	bge.n	8008a5c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a2e:	7bfb      	ldrb	r3, [r7, #15]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	211a      	movs	r1, #26
 8008a34:	fb01 f303 	mul.w	r3, r1, r3
 8008a38:	4413      	add	r3, r2
 8008a3a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a3e:	781a      	ldrb	r2, [r3, #0]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	211a      	movs	r1, #26
 8008a4a:	fb01 f303 	mul.w	r3, r1, r3
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008a54:	881a      	ldrh	r2, [r3, #0]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	835a      	strh	r2, [r3, #26]
 8008a5a:	e015      	b.n	8008a88 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	211a      	movs	r1, #26
 8008a62:	fb01 f303 	mul.w	r3, r1, r3
 8008a66:	4413      	add	r3, r2
 8008a68:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	211a      	movs	r1, #26
 8008a78:	fb01 f303 	mul.w	r3, r1, r3
 8008a7c:	4413      	add	r3, r2
 8008a7e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008a82:	881a      	ldrh	r2, [r3, #0]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008a88:	7bfb      	ldrb	r3, [r7, #15]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	211a      	movs	r1, #26
 8008a8e:	fb01 f303 	mul.w	r3, r1, r3
 8008a92:	4413      	add	r3, r2
 8008a94:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	b25b      	sxtb	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	da16      	bge.n	8008ace <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	211a      	movs	r1, #26
 8008aa6:	fb01 f303 	mul.w	r3, r1, r3
 8008aaa:	4413      	add	r3, r2
 8008aac:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008ab0:	781a      	ldrb	r2, [r3, #0]
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ab6:	7bfb      	ldrb	r3, [r7, #15]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	211a      	movs	r1, #26
 8008abc:	fb01 f303 	mul.w	r3, r1, r3
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008ac6:	881a      	ldrh	r2, [r3, #0]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	835a      	strh	r2, [r3, #26]
 8008acc:	e015      	b.n	8008afa <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008ace:	7bfb      	ldrb	r3, [r7, #15]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	211a      	movs	r1, #26
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	4413      	add	r3, r2
 8008ada:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008ade:	781a      	ldrb	r2, [r3, #0]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	211a      	movs	r1, #26
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	4413      	add	r3, r2
 8008af0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008af4:	881a      	ldrh	r2, [r3, #0]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	7b9b      	ldrb	r3, [r3, #14]
 8008afe:	4619      	mov	r1, r3
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f001 ff16 	bl	800a932 <USBH_AllocPipe>
 8008b06:	4603      	mov	r3, r0
 8008b08:	461a      	mov	r2, r3
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	7bdb      	ldrb	r3, [r3, #15]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 ff0c 	bl	800a932 <USBH_AllocPipe>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	7b59      	ldrb	r1, [r3, #13]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	7b98      	ldrb	r0, [r3, #14]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b36:	68ba      	ldr	r2, [r7, #8]
 8008b38:	8b12      	ldrh	r2, [r2, #24]
 8008b3a:	9202      	str	r2, [sp, #8]
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	9201      	str	r2, [sp, #4]
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	4623      	mov	r3, r4
 8008b44:	4602      	mov	r2, r0
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f001 fec4 	bl	800a8d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	7b19      	ldrb	r1, [r3, #12]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	7bd8      	ldrb	r0, [r3, #15]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	8b52      	ldrh	r2, [r2, #26]
 8008b64:	9202      	str	r2, [sp, #8]
 8008b66:	2202      	movs	r2, #2
 8008b68:	9201      	str	r2, [sp, #4]
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	4623      	mov	r3, r4
 8008b6e:	4602      	mov	r2, r0
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f001 feaf 	bl	800a8d4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	7b5b      	ldrb	r3, [r3, #13]
 8008b82:	2200      	movs	r2, #0
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f002 f9ba 	bl	800af00 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	7b1b      	ldrb	r3, [r3, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f002 f9b3 	bl	800af00 <USBH_LL_SetToggle>

  return USBH_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd90      	pop	{r4, r7, pc}

08008ba4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00e      	beq.n	8008bdc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 fea4 	bl	800a912 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	4619      	mov	r1, r3
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f001 fecf 	bl	800a974 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	7b1b      	ldrb	r3, [r3, #12]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00e      	beq.n	8008c02 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	7b1b      	ldrb	r3, [r3, #12]
 8008be8:	4619      	mov	r1, r3
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 fe91 	bl	800a912 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	7b1b      	ldrb	r3, [r3, #12]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 febc 	bl	800a974 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2200      	movs	r2, #0
 8008c00:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	7b5b      	ldrb	r3, [r3, #13]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00e      	beq.n	8008c28 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	7b5b      	ldrb	r3, [r3, #13]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 fe7e 	bl	800a912 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	7b5b      	ldrb	r3, [r3, #13]
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fea9 	bl	800a974 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f002 f9ed 	bl	800b01c <free>
    phost->pActiveClass->pData = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c48:	2200      	movs	r2, #0
 8008c4a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b084      	sub	sp, #16
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c64:	69db      	ldr	r3, [r3, #28]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3340      	adds	r3, #64	@ 0x40
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f8b1 	bl	8008dd6 <GetLineCoding>
 8008c74:	4603      	mov	r3, r0
 8008c76:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008c78:	7afb      	ldrb	r3, [r7, #11]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d105      	bne.n	8008c8a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c84:	2102      	movs	r1, #2
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d877      	bhi.n	8008da8 <USBH_CDC_Process+0x114>
 8008cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc0 <USBH_CDC_Process+0x2c>)
 8008cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cbe:	bf00      	nop
 8008cc0:	08008cd5 	.word	0x08008cd5
 8008cc4:	08008cdb 	.word	0x08008cdb
 8008cc8:	08008d0b 	.word	0x08008d0b
 8008ccc:	08008d7f 	.word	0x08008d7f
 8008cd0:	08008d8d 	.word	0x08008d8d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd8:	e06d      	b.n	8008db6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f897 	bl	8008e14 <SetLineCoding>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008cea:	7bbb      	ldrb	r3, [r7, #14]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d104      	bne.n	8008cfa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008cf8:	e058      	b.n	8008dac <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d055      	beq.n	8008dac <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2204      	movs	r2, #4
 8008d04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008d08:	e050      	b.n	8008dac <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	3340      	adds	r3, #64	@ 0x40
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f860 	bl	8008dd6 <GetLineCoding>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d126      	bne.n	8008d6e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d32:	791b      	ldrb	r3, [r3, #4]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d13b      	bne.n	8008db0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d42:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d133      	bne.n	8008db0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d52:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d12b      	bne.n	8008db0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d60:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d124      	bne.n	8008db0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 f958 	bl	800901c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008d6c:	e020      	b.n	8008db0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d01d      	beq.n	8008db0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	2204      	movs	r2, #4
 8008d78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008d7c:	e018      	b.n	8008db0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f867 	bl	8008e52 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f8da 	bl	8008f3e <CDC_ProcessReception>
      break;
 8008d8a:	e014      	b.n	8008db6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008d8c:	2100      	movs	r1, #0
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 f81a 	bl	8009dc8 <USBH_ClrFeature>
 8008d94:	4603      	mov	r3, r0
 8008d96:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d98:	7bbb      	ldrb	r3, [r7, #14]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d10a      	bne.n	8008db4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008da6:	e005      	b.n	8008db4 <USBH_CDC_Process+0x120>

    default:
      break;
 8008da8:	bf00      	nop
 8008daa:	e004      	b.n	8008db6 <USBH_CDC_Process+0x122>
      break;
 8008dac:	bf00      	nop
 8008dae:	e002      	b.n	8008db6 <USBH_CDC_Process+0x122>
      break;
 8008db0:	bf00      	nop
 8008db2:	e000      	b.n	8008db6 <USBH_CDC_Process+0x122>
      break;
 8008db4:	bf00      	nop

  }

  return status;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3710      	adds	r7, #16
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b082      	sub	sp, #8
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	22a1      	movs	r2, #161	@ 0xa1
 8008de4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2221      	movs	r2, #33	@ 0x21
 8008dea:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2207      	movs	r2, #7
 8008dfc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	2207      	movs	r2, #7
 8008e02:	4619      	mov	r1, r3
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f001 fb14 	bl	800a432 <USBH_CtlReq>
 8008e0a:	4603      	mov	r3, r0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
 8008e1c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2221      	movs	r2, #33	@ 0x21
 8008e22:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2220      	movs	r2, #32
 8008e28:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2207      	movs	r2, #7
 8008e3a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	2207      	movs	r2, #7
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f001 faf5 	bl	800a432 <USBH_CtlReq>
 8008e48:	4603      	mov	r3, r0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b086      	sub	sp, #24
 8008e56:	af02      	add	r7, sp, #8
 8008e58:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d002      	beq.n	8008e78 <CDC_ProcessTransmission+0x26>
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d023      	beq.n	8008ebe <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008e76:	e05e      	b.n	8008f36 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	8b12      	ldrh	r2, [r2, #24]
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d90b      	bls.n	8008e9c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	69d9      	ldr	r1, [r3, #28]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	8b1a      	ldrh	r2, [r3, #24]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	7b5b      	ldrb	r3, [r3, #13]
 8008e90:	2001      	movs	r0, #1
 8008e92:	9000      	str	r0, [sp, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 fcda 	bl	800a84e <USBH_BulkSendData>
 8008e9a:	e00b      	b.n	8008eb4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	7b5b      	ldrb	r3, [r3, #13]
 8008eaa:	2001      	movs	r0, #1
 8008eac:	9000      	str	r0, [sp, #0]
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 fccd 	bl	800a84e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008ebc:	e03b      	b.n	8008f36 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	7b5b      	ldrb	r3, [r3, #13]
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f001 fff1 	bl	800aeac <USBH_LL_GetURBState>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008ece:	7afb      	ldrb	r3, [r7, #11]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d128      	bne.n	8008f26 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	8b12      	ldrh	r2, [r2, #24]
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d90e      	bls.n	8008efe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	8b12      	ldrh	r2, [r2, #24]
 8008ee8:	1a9a      	subs	r2, r3, r2
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	8b12      	ldrh	r2, [r2, #24]
 8008ef6:	441a      	add	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	61da      	str	r2, [r3, #28]
 8008efc:	e002      	b.n	8008f04 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2200      	movs	r2, #0
 8008f02:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d004      	beq.n	8008f16 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008f14:	e00e      	b.n	8008f34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f868 	bl	8008ff4 <USBH_CDC_TransmitCallback>
      break;
 8008f24:	e006      	b.n	8008f34 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008f26:	7afb      	ldrb	r3, [r7, #11]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d103      	bne.n	8008f34 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008f34:	bf00      	nop
  }
}
 8008f36:	bf00      	nop
 8008f38:	3710      	adds	r7, #16
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}

08008f3e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008f3e:	b580      	push	{r7, lr}
 8008f40:	b086      	sub	sp, #24
 8008f42:	af00      	add	r7, sp, #0
 8008f44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f4c:	69db      	ldr	r3, [r3, #28]
 8008f4e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f50:	2300      	movs	r3, #0
 8008f52:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d002      	beq.n	8008f64 <CDC_ProcessReception+0x26>
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d00e      	beq.n	8008f80 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008f62:	e043      	b.n	8008fec <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	6a19      	ldr	r1, [r3, #32]
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	8b5a      	ldrh	r2, [r3, #26]
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	7b1b      	ldrb	r3, [r3, #12]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f001 fc91 	bl	800a898 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	2204      	movs	r2, #4
 8008f7a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008f7e:	e035      	b.n	8008fec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	7b1b      	ldrb	r3, [r3, #12]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 ff90 	bl	800aeac <USBH_LL_GetURBState>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008f90:	7cfb      	ldrb	r3, [r7, #19]
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d129      	bne.n	8008fea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	7b1b      	ldrb	r3, [r3, #12]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 fef3 	bl	800ad88 <USBH_LL_GetLastXferSize>
 8008fa2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d016      	beq.n	8008fdc <CDC_ProcessReception+0x9e>
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	8b5b      	ldrh	r3, [r3, #26]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d110      	bne.n	8008fdc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	1ad2      	subs	r2, r2, r3
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	6a1a      	ldr	r2, [r3, #32]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	441a      	add	r2, r3
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008fda:	e006      	b.n	8008fea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f80f 	bl	8009008 <USBH_CDC_ReceiveCallback>
      break;
 8008fea:	bf00      	nop
  }
}
 8008fec:	bf00      	nop
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	4613      	mov	r3, r2
 800903c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009044:	2302      	movs	r3, #2
 8009046:	e029      	b.n	800909c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	79fa      	ldrb	r2, [r7, #7]
 800904c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2200      	movs	r2, #0
 8009054:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009060:	68f8      	ldr	r0, [r7, #12]
 8009062:	f000 f81f 	bl	80090a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d003      	beq.n	8009094 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f001 fdc3 	bl	800ac20 <USBH_LL_Init>

  return USBH_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80090b0:	2300      	movs	r3, #0
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	e009      	b.n	80090ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	33e0      	adds	r3, #224	@ 0xe0
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	2200      	movs	r2, #0
 80090c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	3301      	adds	r3, #1
 80090c8:	60fb      	str	r3, [r7, #12]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2b0f      	cmp	r3, #15
 80090ce:	d9f2      	bls.n	80090b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e009      	b.n	80090ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80090e0:	2200      	movs	r2, #0
 80090e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	60fb      	str	r3, [r7, #12]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090f0:	d3f1      	bcc.n	80090d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2201      	movs	r2, #1
 8009102:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2240      	movs	r2, #64	@ 0x40
 8009116:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	331c      	adds	r3, #28
 8009142:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009146:	2100      	movs	r1, #0
 8009148:	4618      	mov	r0, r3
 800914a:	f002 faf3 	bl	800b734 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f002 faea 	bl	800b734 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009166:	2212      	movs	r2, #18
 8009168:	2100      	movs	r1, #0
 800916a:	4618      	mov	r0, r3
 800916c:	f002 fae2 	bl	800b734 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009176:	223e      	movs	r2, #62	@ 0x3e
 8009178:	2100      	movs	r1, #0
 800917a:	4618      	mov	r0, r3
 800917c:	f002 fada 	bl	800b734 <memset>

  return USBH_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800918a:	b480      	push	{r7}
 800918c:	b085      	sub	sp, #20
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d016      	beq.n	80091cc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d10e      	bne.n	80091c6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80091ae:	1c59      	adds	r1, r3, #1
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	33de      	adds	r3, #222	@ 0xde
 80091ba:	6839      	ldr	r1, [r7, #0]
 80091bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80091c0:	2300      	movs	r3, #0
 80091c2:	73fb      	strb	r3, [r7, #15]
 80091c4:	e004      	b.n	80091d0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80091c6:	2302      	movs	r3, #2
 80091c8:	73fb      	strb	r3, [r7, #15]
 80091ca:	e001      	b.n	80091d0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80091cc:	2302      	movs	r3, #2
 80091ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3714      	adds	r7, #20
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	460b      	mov	r3, r1
 80091e8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80091ea:	2300      	movs	r3, #0
 80091ec:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80091f4:	78fa      	ldrb	r2, [r7, #3]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d204      	bcs.n	8009204 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	78fa      	ldrb	r2, [r7, #3]
 80091fe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009202:	e001      	b.n	8009208 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009204:	2302      	movs	r3, #2
 8009206:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009208:	7bfb      	ldrb	r3, [r7, #15]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3714      	adds	r7, #20
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009216:	b480      	push	{r7}
 8009218:	b087      	sub	sp, #28
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	4608      	mov	r0, r1
 8009220:	4611      	mov	r1, r2
 8009222:	461a      	mov	r2, r3
 8009224:	4603      	mov	r3, r0
 8009226:	70fb      	strb	r3, [r7, #3]
 8009228:	460b      	mov	r3, r1
 800922a:	70bb      	strb	r3, [r7, #2]
 800922c:	4613      	mov	r3, r2
 800922e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009230:	2300      	movs	r3, #0
 8009232:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009234:	2300      	movs	r3, #0
 8009236:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800923e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009240:	e025      	b.n	800928e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009242:	7dfb      	ldrb	r3, [r7, #23]
 8009244:	221a      	movs	r2, #26
 8009246:	fb02 f303 	mul.w	r3, r2, r3
 800924a:	3308      	adds	r3, #8
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	3302      	adds	r3, #2
 8009252:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	795b      	ldrb	r3, [r3, #5]
 8009258:	78fa      	ldrb	r2, [r7, #3]
 800925a:	429a      	cmp	r2, r3
 800925c:	d002      	beq.n	8009264 <USBH_FindInterface+0x4e>
 800925e:	78fb      	ldrb	r3, [r7, #3]
 8009260:	2bff      	cmp	r3, #255	@ 0xff
 8009262:	d111      	bne.n	8009288 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009268:	78ba      	ldrb	r2, [r7, #2]
 800926a:	429a      	cmp	r2, r3
 800926c:	d002      	beq.n	8009274 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800926e:	78bb      	ldrb	r3, [r7, #2]
 8009270:	2bff      	cmp	r3, #255	@ 0xff
 8009272:	d109      	bne.n	8009288 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009278:	787a      	ldrb	r2, [r7, #1]
 800927a:	429a      	cmp	r2, r3
 800927c:	d002      	beq.n	8009284 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800927e:	787b      	ldrb	r3, [r7, #1]
 8009280:	2bff      	cmp	r3, #255	@ 0xff
 8009282:	d101      	bne.n	8009288 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	e006      	b.n	8009296 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009288:	7dfb      	ldrb	r3, [r7, #23]
 800928a:	3301      	adds	r3, #1
 800928c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d9d6      	bls.n	8009242 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009294:	23ff      	movs	r3, #255	@ 0xff
}
 8009296:	4618      	mov	r0, r3
 8009298:	371c      	adds	r7, #28
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr

080092a2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b082      	sub	sp, #8
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 fcf4 	bl	800ac98 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80092b0:	2101      	movs	r1, #1
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f001 fe0d 	bl	800aed2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80092b8:	2300      	movs	r3, #0
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b088      	sub	sp, #32
 80092c8:	af04      	add	r7, sp, #16
 80092ca:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80092cc:	2302      	movs	r3, #2
 80092ce:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d102      	bne.n	80092e6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2203      	movs	r2, #3
 80092e4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b0b      	cmp	r3, #11
 80092ee:	f200 81bb 	bhi.w	8009668 <USBH_Process+0x3a4>
 80092f2:	a201      	add	r2, pc, #4	@ (adr r2, 80092f8 <USBH_Process+0x34>)
 80092f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f8:	08009329 	.word	0x08009329
 80092fc:	0800935b 	.word	0x0800935b
 8009300:	080093c3 	.word	0x080093c3
 8009304:	08009603 	.word	0x08009603
 8009308:	08009669 	.word	0x08009669
 800930c:	08009463 	.word	0x08009463
 8009310:	080095a9 	.word	0x080095a9
 8009314:	08009499 	.word	0x08009499
 8009318:	080094b9 	.word	0x080094b9
 800931c:	080094d7 	.word	0x080094d7
 8009320:	0800951b 	.word	0x0800951b
 8009324:	080095eb 	.word	0x080095eb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 819b 	beq.w	800966c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2201      	movs	r2, #1
 800933a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800933c:	20c8      	movs	r0, #200	@ 0xc8
 800933e:	f001 fe12 	bl	800af66 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 fd05 	bl	800ad52 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009358:	e188      	b.n	800966c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009360:	2b01      	cmp	r3, #1
 8009362:	d107      	bne.n	8009374 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009372:	e18a      	b.n	800968a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800937a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800937e:	d914      	bls.n	80093aa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009386:	3301      	adds	r3, #1
 8009388:	b2da      	uxtb	r2, r3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009396:	2b03      	cmp	r3, #3
 8009398:	d903      	bls.n	80093a2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	220d      	movs	r2, #13
 800939e:	701a      	strb	r2, [r3, #0]
      break;
 80093a0:	e173      	b.n	800968a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	701a      	strb	r2, [r3, #0]
      break;
 80093a8:	e16f      	b.n	800968a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80093b0:	f103 020a 	add.w	r2, r3, #10
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80093ba:	200a      	movs	r0, #10
 80093bc:	f001 fdd3 	bl	800af66 <USBH_Delay>
      break;
 80093c0:	e163      	b.n	800968a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d005      	beq.n	80093d8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093d2:	2104      	movs	r1, #4
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80093d8:	2064      	movs	r0, #100	@ 0x64
 80093da:	f001 fdc4 	bl	800af66 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f001 fc90 	bl	800ad04 <USBH_LL_GetSpeed>
 80093e4:	4603      	mov	r3, r0
 80093e6:	461a      	mov	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2205      	movs	r2, #5
 80093f2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80093f4:	2100      	movs	r1, #0
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 fa9b 	bl	800a932 <USBH_AllocPipe>
 80093fc:	4603      	mov	r3, r0
 80093fe:	461a      	mov	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009404:	2180      	movs	r1, #128	@ 0x80
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 fa93 	bl	800a932 <USBH_AllocPipe>
 800940c:	4603      	mov	r3, r0
 800940e:	461a      	mov	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7919      	ldrb	r1, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009428:	9202      	str	r2, [sp, #8]
 800942a:	2200      	movs	r2, #0
 800942c:	9201      	str	r2, [sp, #4]
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	4603      	mov	r3, r0
 8009432:	2280      	movs	r2, #128	@ 0x80
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f001 fa4d 	bl	800a8d4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	7959      	ldrb	r1, [r3, #5]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800944e:	9202      	str	r2, [sp, #8]
 8009450:	2200      	movs	r2, #0
 8009452:	9201      	str	r2, [sp, #4]
 8009454:	9300      	str	r3, [sp, #0]
 8009456:	4603      	mov	r3, r0
 8009458:	2200      	movs	r2, #0
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 fa3a 	bl	800a8d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009460:	e113      	b.n	800968a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f916 	bl	8009694 <USBH_HandleEnum>
 8009468:	4603      	mov	r3, r0
 800946a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	f040 80fd 	bne.w	8009670 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009484:	2b01      	cmp	r3, #1
 8009486:	d103      	bne.n	8009490 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2208      	movs	r2, #8
 800948c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800948e:	e0ef      	b.n	8009670 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2207      	movs	r2, #7
 8009494:	701a      	strb	r2, [r3, #0]
      break;
 8009496:	e0eb      	b.n	8009670 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f000 80e8 	beq.w	8009674 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80094aa:	2101      	movs	r1, #1
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2208      	movs	r2, #8
 80094b4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80094b6:	e0dd      	b.n	8009674 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fc3a 	bl	8009d3a <USBH_SetCfg>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f040 80d5 	bne.w	8009678 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2209      	movs	r2, #9
 80094d2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094d4:	e0d0      	b.n	8009678 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80094dc:	f003 0320 	and.w	r3, r3, #32
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d016      	beq.n	8009512 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80094e4:	2101      	movs	r1, #1
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fc4a 	bl	8009d80 <USBH_SetFeature>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80094f0:	7bbb      	ldrb	r3, [r7, #14]
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d103      	bne.n	8009500 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	220a      	movs	r2, #10
 80094fc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094fe:	e0bd      	b.n	800967c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b03      	cmp	r3, #3
 8009506:	f040 80b9 	bne.w	800967c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	220a      	movs	r2, #10
 800950e:	701a      	strb	r2, [r3, #0]
      break;
 8009510:	e0b4      	b.n	800967c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	220a      	movs	r2, #10
 8009516:	701a      	strb	r2, [r3, #0]
      break;
 8009518:	e0b0      	b.n	800967c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 80ad 	beq.w	8009680 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
 8009532:	e016      	b.n	8009562 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009534:	7bfa      	ldrb	r2, [r7, #15]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	32de      	adds	r2, #222	@ 0xde
 800953a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953e:	791a      	ldrb	r2, [r3, #4]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009546:	429a      	cmp	r2, r3
 8009548:	d108      	bne.n	800955c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800954a:	7bfa      	ldrb	r2, [r7, #15]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	32de      	adds	r2, #222	@ 0xde
 8009550:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800955a:	e005      	b.n	8009568 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	3301      	adds	r3, #1
 8009560:	73fb      	strb	r3, [r7, #15]
 8009562:	7bfb      	ldrb	r3, [r7, #15]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d0e5      	beq.n	8009534 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d016      	beq.n	80095a0 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	4798      	blx	r3
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d109      	bne.n	8009598 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2206      	movs	r2, #6
 8009588:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009590:	2103      	movs	r1, #3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009596:	e073      	b.n	8009680 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	220d      	movs	r2, #13
 800959c:	701a      	strb	r2, [r3, #0]
      break;
 800959e:	e06f      	b.n	8009680 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	220d      	movs	r2, #13
 80095a4:	701a      	strb	r2, [r3, #0]
      break;
 80095a6:	e06b      	b.n	8009680 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d017      	beq.n	80095e2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
 80095be:	4603      	mov	r3, r0
 80095c0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d103      	bne.n	80095d2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	220b      	movs	r2, #11
 80095ce:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095d0:	e058      	b.n	8009684 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80095d2:	7bbb      	ldrb	r3, [r7, #14]
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d154      	bne.n	8009684 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	220d      	movs	r2, #13
 80095de:	701a      	strb	r2, [r3, #0]
      break;
 80095e0:	e050      	b.n	8009684 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	220d      	movs	r2, #13
 80095e6:	701a      	strb	r2, [r3, #0]
      break;
 80095e8:	e04c      	b.n	8009684 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d049      	beq.n	8009688 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	4798      	blx	r3
      }
      break;
 8009600:	e042      	b.n	8009688 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7ff fd4a 	bl	80090a4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d009      	beq.n	800962e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009634:	2b00      	cmp	r3, #0
 8009636:	d005      	beq.n	8009644 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800963e:	2105      	movs	r1, #5
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b01      	cmp	r3, #1
 800964e:	d107      	bne.n	8009660 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff fe22 	bl	80092a2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800965e:	e014      	b.n	800968a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 fb19 	bl	800ac98 <USBH_LL_Start>
      break;
 8009666:	e010      	b.n	800968a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009668:	bf00      	nop
 800966a:	e00e      	b.n	800968a <USBH_Process+0x3c6>
      break;
 800966c:	bf00      	nop
 800966e:	e00c      	b.n	800968a <USBH_Process+0x3c6>
      break;
 8009670:	bf00      	nop
 8009672:	e00a      	b.n	800968a <USBH_Process+0x3c6>
    break;
 8009674:	bf00      	nop
 8009676:	e008      	b.n	800968a <USBH_Process+0x3c6>
      break;
 8009678:	bf00      	nop
 800967a:	e006      	b.n	800968a <USBH_Process+0x3c6>
      break;
 800967c:	bf00      	nop
 800967e:	e004      	b.n	800968a <USBH_Process+0x3c6>
      break;
 8009680:	bf00      	nop
 8009682:	e002      	b.n	800968a <USBH_Process+0x3c6>
      break;
 8009684:	bf00      	nop
 8009686:	e000      	b.n	800968a <USBH_Process+0x3c6>
      break;
 8009688:	bf00      	nop
  }
  return USBH_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b088      	sub	sp, #32
 8009698:	af04      	add	r7, sp, #16
 800969a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800969c:	2301      	movs	r3, #1
 800969e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80096a0:	2301      	movs	r3, #1
 80096a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	785b      	ldrb	r3, [r3, #1]
 80096a8:	2b07      	cmp	r3, #7
 80096aa:	f200 81bd 	bhi.w	8009a28 <USBH_HandleEnum+0x394>
 80096ae:	a201      	add	r2, pc, #4	@ (adr r2, 80096b4 <USBH_HandleEnum+0x20>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	080096d5 	.word	0x080096d5
 80096b8:	0800978f 	.word	0x0800978f
 80096bc:	080097f9 	.word	0x080097f9
 80096c0:	08009883 	.word	0x08009883
 80096c4:	080098ed 	.word	0x080098ed
 80096c8:	0800995d 	.word	0x0800995d
 80096cc:	080099a3 	.word	0x080099a3
 80096d0:	080099e9 	.word	0x080099e9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80096d4:	2108      	movs	r1, #8
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa4c 	bl	8009b74 <USBH_Get_DevDesc>
 80096dc:	4603      	mov	r3, r0
 80096de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096e0:	7bbb      	ldrb	r3, [r7, #14]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d12e      	bne.n	8009744 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	7919      	ldrb	r1, [r3, #4]
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800970a:	9202      	str	r2, [sp, #8]
 800970c:	2200      	movs	r2, #0
 800970e:	9201      	str	r2, [sp, #4]
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	4603      	mov	r3, r0
 8009714:	2280      	movs	r2, #128	@ 0x80
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 f8dc 	bl	800a8d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	7959      	ldrb	r1, [r3, #5]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009730:	9202      	str	r2, [sp, #8]
 8009732:	2200      	movs	r2, #0
 8009734:	9201      	str	r2, [sp, #4]
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	4603      	mov	r3, r0
 800973a:	2200      	movs	r2, #0
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f001 f8c9 	bl	800a8d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009742:	e173      	b.n	8009a2c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	2b03      	cmp	r3, #3
 8009748:	f040 8170 	bne.w	8009a2c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009752:	3301      	adds	r3, #1
 8009754:	b2da      	uxtb	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009762:	2b03      	cmp	r3, #3
 8009764:	d903      	bls.n	800976e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	220d      	movs	r2, #13
 800976a:	701a      	strb	r2, [r3, #0]
      break;
 800976c:	e15e      	b.n	8009a2c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	795b      	ldrb	r3, [r3, #5]
 8009772:	4619      	mov	r1, r3
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f001 f8fd 	bl	800a974 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	791b      	ldrb	r3, [r3, #4]
 800977e:	4619      	mov	r1, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f001 f8f7 	bl	800a974 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	701a      	strb	r2, [r3, #0]
      break;
 800978c:	e14e      	b.n	8009a2c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800978e:	2112      	movs	r1, #18
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f9ef 	bl	8009b74 <USBH_Get_DevDesc>
 8009796:	4603      	mov	r3, r0
 8009798:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800979a:	7bbb      	ldrb	r3, [r7, #14]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d103      	bne.n	80097a8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80097a6:	e143      	b.n	8009a30 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2b03      	cmp	r3, #3
 80097ac:	f040 8140 	bne.w	8009a30 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80097b6:	3301      	adds	r3, #1
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d903      	bls.n	80097d2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	220d      	movs	r2, #13
 80097ce:	701a      	strb	r2, [r3, #0]
      break;
 80097d0:	e12e      	b.n	8009a30 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	795b      	ldrb	r3, [r3, #5]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 f8cb 	bl	800a974 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	791b      	ldrb	r3, [r3, #4]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f001 f8c5 	bl	800a974 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	701a      	strb	r2, [r3, #0]
      break;
 80097f6:	e11b      	b.n	8009a30 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80097f8:	2101      	movs	r1, #1
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fa79 	bl	8009cf2 <USBH_SetAddress>
 8009800:	4603      	mov	r3, r0
 8009802:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009804:	7bbb      	ldrb	r3, [r7, #14]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d130      	bne.n	800986c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800980a:	2002      	movs	r0, #2
 800980c:	f001 fbab 	bl	800af66 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2203      	movs	r2, #3
 800981c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	7919      	ldrb	r1, [r3, #4]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009832:	9202      	str	r2, [sp, #8]
 8009834:	2200      	movs	r2, #0
 8009836:	9201      	str	r2, [sp, #4]
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4603      	mov	r3, r0
 800983c:	2280      	movs	r2, #128	@ 0x80
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 f848 	bl	800a8d4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	7959      	ldrb	r1, [r3, #5]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009858:	9202      	str	r2, [sp, #8]
 800985a:	2200      	movs	r2, #0
 800985c:	9201      	str	r2, [sp, #4]
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	4603      	mov	r3, r0
 8009862:	2200      	movs	r2, #0
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f001 f835 	bl	800a8d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800986a:	e0e3      	b.n	8009a34 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800986c:	7bbb      	ldrb	r3, [r7, #14]
 800986e:	2b03      	cmp	r3, #3
 8009870:	f040 80e0 	bne.w	8009a34 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	220d      	movs	r2, #13
 8009878:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	705a      	strb	r2, [r3, #1]
      break;
 8009880:	e0d8      	b.n	8009a34 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009882:	2109      	movs	r1, #9
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f9a1 	bl	8009bcc <USBH_Get_CfgDesc>
 800988a:	4603      	mov	r3, r0
 800988c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800988e:	7bbb      	ldrb	r3, [r7, #14]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d103      	bne.n	800989c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2204      	movs	r2, #4
 8009898:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800989a:	e0cd      	b.n	8009a38 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	2b03      	cmp	r3, #3
 80098a0:	f040 80ca 	bne.w	8009a38 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80098aa:	3301      	adds	r3, #1
 80098ac:	b2da      	uxtb	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d903      	bls.n	80098c6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	220d      	movs	r2, #13
 80098c2:	701a      	strb	r2, [r3, #0]
      break;
 80098c4:	e0b8      	b.n	8009a38 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	795b      	ldrb	r3, [r3, #5]
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 f851 	bl	800a974 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	791b      	ldrb	r3, [r3, #4]
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 f84b 	bl	800a974 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	701a      	strb	r2, [r3, #0]
      break;
 80098ea:	e0a5      	b.n	8009a38 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f969 	bl	8009bcc <USBH_Get_CfgDesc>
 80098fa:	4603      	mov	r3, r0
 80098fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d103      	bne.n	800990c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2205      	movs	r2, #5
 8009908:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800990a:	e097      	b.n	8009a3c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800990c:	7bbb      	ldrb	r3, [r7, #14]
 800990e:	2b03      	cmp	r3, #3
 8009910:	f040 8094 	bne.w	8009a3c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800991a:	3301      	adds	r3, #1
 800991c:	b2da      	uxtb	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800992a:	2b03      	cmp	r3, #3
 800992c:	d903      	bls.n	8009936 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	220d      	movs	r2, #13
 8009932:	701a      	strb	r2, [r3, #0]
      break;
 8009934:	e082      	b.n	8009a3c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	795b      	ldrb	r3, [r3, #5]
 800993a:	4619      	mov	r1, r3
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f001 f819 	bl	800a974 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	791b      	ldrb	r3, [r3, #4]
 8009946:	4619      	mov	r1, r3
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f001 f813 	bl	800a974 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	701a      	strb	r2, [r3, #0]
      break;
 800995a:	e06f      	b.n	8009a3c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009962:	2b00      	cmp	r3, #0
 8009964:	d019      	beq.n	800999a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009972:	23ff      	movs	r3, #255	@ 0xff
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f953 	bl	8009c20 <USBH_Get_StringDesc>
 800997a:	4603      	mov	r3, r0
 800997c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d103      	bne.n	800998c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2206      	movs	r2, #6
 8009988:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800998a:	e059      	b.n	8009a40 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	2b03      	cmp	r3, #3
 8009990:	d156      	bne.n	8009a40 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2206      	movs	r2, #6
 8009996:	705a      	strb	r2, [r3, #1]
      break;
 8009998:	e052      	b.n	8009a40 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2206      	movs	r2, #6
 800999e:	705a      	strb	r2, [r3, #1]
      break;
 80099a0:	e04e      	b.n	8009a40 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d019      	beq.n	80099e0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80099b8:	23ff      	movs	r3, #255	@ 0xff
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f000 f930 	bl	8009c20 <USBH_Get_StringDesc>
 80099c0:	4603      	mov	r3, r0
 80099c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80099c4:	7bbb      	ldrb	r3, [r7, #14]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d103      	bne.n	80099d2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2207      	movs	r2, #7
 80099ce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80099d0:	e038      	b.n	8009a44 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099d2:	7bbb      	ldrb	r3, [r7, #14]
 80099d4:	2b03      	cmp	r3, #3
 80099d6:	d135      	bne.n	8009a44 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2207      	movs	r2, #7
 80099dc:	705a      	strb	r2, [r3, #1]
      break;
 80099de:	e031      	b.n	8009a44 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2207      	movs	r2, #7
 80099e4:	705a      	strb	r2, [r3, #1]
      break;
 80099e6:	e02d      	b.n	8009a44 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d017      	beq.n	8009a22 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80099fe:	23ff      	movs	r3, #255	@ 0xff
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f90d 	bl	8009c20 <USBH_Get_StringDesc>
 8009a06:	4603      	mov	r3, r0
 8009a08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d102      	bne.n	8009a16 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009a14:	e018      	b.n	8009a48 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	2b03      	cmp	r3, #3
 8009a1a:	d115      	bne.n	8009a48 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a20:	e012      	b.n	8009a48 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
      break;
 8009a26:	e00f      	b.n	8009a48 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009a28:	bf00      	nop
 8009a2a:	e00e      	b.n	8009a4a <USBH_HandleEnum+0x3b6>
      break;
 8009a2c:	bf00      	nop
 8009a2e:	e00c      	b.n	8009a4a <USBH_HandleEnum+0x3b6>
      break;
 8009a30:	bf00      	nop
 8009a32:	e00a      	b.n	8009a4a <USBH_HandleEnum+0x3b6>
      break;
 8009a34:	bf00      	nop
 8009a36:	e008      	b.n	8009a4a <USBH_HandleEnum+0x3b6>
      break;
 8009a38:	bf00      	nop
 8009a3a:	e006      	b.n	8009a4a <USBH_HandleEnum+0x3b6>
      break;
 8009a3c:	bf00      	nop
 8009a3e:	e004      	b.n	8009a4a <USBH_HandleEnum+0x3b6>
      break;
 8009a40:	bf00      	nop
 8009a42:	e002      	b.n	8009a4a <USBH_HandleEnum+0x3b6>
      break;
 8009a44:	bf00      	nop
 8009a46:	e000      	b.n	8009a4a <USBH_HandleEnum+0x3b6>
      break;
 8009a48:	bf00      	nop
  }
  return Status;
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009a66:	bf00      	nop
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009a80:	1c5a      	adds	r2, r3, #1
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f804 	bl	8009a96 <USBH_HandleSof>
}
 8009a8e:	bf00      	nop
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b082      	sub	sp, #8
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b0b      	cmp	r3, #11
 8009aa6:	d10a      	bne.n	8009abe <USBH_HandleSof+0x28>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d005      	beq.n	8009abe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	4798      	blx	r3
  }
}
 8009abe:	bf00      	nop
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009ad6:	bf00      	nop
}
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009af2:	bf00      	nop
}
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f001 f8be 	bl	800acce <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	791b      	ldrb	r3, [r3, #4]
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 ff0b 	bl	800a974 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	795b      	ldrb	r3, [r3, #5]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 ff05 	bl	800a974 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b086      	sub	sp, #24
 8009b78:	af02      	add	r7, sp, #8
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009b80:	887b      	ldrh	r3, [r7, #2]
 8009b82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b86:	d901      	bls.n	8009b8c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	e01b      	b.n	8009bc4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009b92:	887b      	ldrh	r3, [r7, #2]
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	4613      	mov	r3, r2
 8009b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b9c:	2100      	movs	r1, #0
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f872 	bl	8009c88 <USBH_GetDescriptor>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d109      	bne.n	8009bc2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009bb4:	887a      	ldrh	r2, [r7, #2]
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 f929 	bl	8009e10 <USBH_ParseDevDesc>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3710      	adds	r7, #16
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	331c      	adds	r3, #28
 8009bdc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009bde:	887b      	ldrh	r3, [r7, #2]
 8009be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009be4:	d901      	bls.n	8009bea <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009be6:	2303      	movs	r3, #3
 8009be8:	e016      	b.n	8009c18 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009bea:	887b      	ldrh	r3, [r7, #2]
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f846 	bl	8009c88 <USBH_GetDescriptor>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009c00:	7bfb      	ldrb	r3, [r7, #15]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d107      	bne.n	8009c16 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009c06:	887b      	ldrh	r3, [r7, #2]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	68b9      	ldr	r1, [r7, #8]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 f9af 	bl	8009f70 <USBH_ParseCfgDesc>
 8009c12:	4603      	mov	r3, r0
 8009c14:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	607a      	str	r2, [r7, #4]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	72fb      	strb	r3, [r7, #11]
 8009c30:	4613      	mov	r3, r2
 8009c32:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009c34:	893b      	ldrh	r3, [r7, #8]
 8009c36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c3a:	d802      	bhi.n	8009c42 <USBH_Get_StringDesc+0x22>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e01c      	b.n	8009c80 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009c46:	7afb      	ldrb	r3, [r7, #11]
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009c4e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009c56:	893b      	ldrh	r3, [r7, #8]
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f812 	bl	8009c88 <USBH_GetDescriptor>
 8009c64:	4603      	mov	r3, r0
 8009c66:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009c68:	7dfb      	ldrb	r3, [r7, #23]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d107      	bne.n	8009c7e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009c74:	893a      	ldrh	r2, [r7, #8]
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 fb8d 	bl	800a398 <USBH_ParseStringDesc>
  }

  return status;
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3718      	adds	r7, #24
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	607b      	str	r3, [r7, #4]
 8009c92:	460b      	mov	r3, r1
 8009c94:	72fb      	strb	r3, [r7, #11]
 8009c96:	4613      	mov	r3, r2
 8009c98:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	789b      	ldrb	r3, [r3, #2]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d11c      	bne.n	8009cdc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ca2:	7afb      	ldrb	r3, [r7, #11]
 8009ca4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ca8:	b2da      	uxtb	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2206      	movs	r2, #6
 8009cb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	893a      	ldrh	r2, [r7, #8]
 8009cb8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009cba:	893b      	ldrh	r3, [r7, #8]
 8009cbc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009cc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cc4:	d104      	bne.n	8009cd0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f240 4209 	movw	r2, #1033	@ 0x409
 8009ccc:	829a      	strh	r2, [r3, #20]
 8009cce:	e002      	b.n	8009cd6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	8b3a      	ldrh	r2, [r7, #24]
 8009cda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009cdc:	8b3b      	ldrh	r3, [r7, #24]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	6879      	ldr	r1, [r7, #4]
 8009ce2:	68f8      	ldr	r0, [r7, #12]
 8009ce4:	f000 fba5 	bl	800a432 <USBH_CtlReq>
 8009ce8:	4603      	mov	r3, r0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	789b      	ldrb	r3, [r3, #2]
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d10f      	bne.n	8009d26 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2205      	movs	r2, #5
 8009d10:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009d12:	78fb      	ldrb	r3, [r7, #3]
 8009d14:	b29a      	uxth	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d26:	2200      	movs	r2, #0
 8009d28:	2100      	movs	r1, #0
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fb81 	bl	800a432 <USBH_CtlReq>
 8009d30:	4603      	mov	r3, r0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3708      	adds	r7, #8
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	460b      	mov	r3, r1
 8009d44:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	789b      	ldrb	r3, [r3, #2]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d10e      	bne.n	8009d6c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2209      	movs	r2, #9
 8009d58:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	887a      	ldrh	r2, [r7, #2]
 8009d5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2100      	movs	r1, #0
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fb5e 	bl	800a432 <USBH_CtlReq>
 8009d76:	4603      	mov	r3, r0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	789b      	ldrb	r3, [r3, #2]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d10f      	bne.n	8009db4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009da0:	78fb      	ldrb	r3, [r7, #3]
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009db4:	2200      	movs	r2, #0
 8009db6:	2100      	movs	r1, #0
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 fb3a 	bl	800a432 <USBH_CtlReq>
 8009dbe:	4603      	mov	r3, r0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3708      	adds	r7, #8
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	789b      	ldrb	r3, [r3, #2]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d10f      	bne.n	8009dfc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009dee:	78fb      	ldrb	r3, [r7, #3]
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2100      	movs	r1, #0
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fb16 	bl	800a432 <USBH_CtlReq>
 8009e06:	4603      	mov	r3, r0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3708      	adds	r7, #8
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009e24:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009e26:	2300      	movs	r3, #0
 8009e28:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d101      	bne.n	8009e34 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009e30:	2302      	movs	r3, #2
 8009e32:	e094      	b.n	8009f5e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	781a      	ldrb	r2, [r3, #0]
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	785a      	ldrb	r2, [r3, #1]
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	3302      	adds	r3, #2
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	3303      	adds	r3, #3
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	021b      	lsls	r3, r3, #8
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	4313      	orrs	r3, r2
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	791a      	ldrb	r2, [r3, #4]
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	795a      	ldrb	r2, [r3, #5]
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	799a      	ldrb	r2, [r3, #6]
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	79da      	ldrb	r2, [r3, #7]
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d004      	beq.n	8009e92 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d11b      	bne.n	8009eca <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	79db      	ldrb	r3, [r3, #7]
 8009e96:	2b20      	cmp	r3, #32
 8009e98:	dc0f      	bgt.n	8009eba <USBH_ParseDevDesc+0xaa>
 8009e9a:	2b08      	cmp	r3, #8
 8009e9c:	db0f      	blt.n	8009ebe <USBH_ParseDevDesc+0xae>
 8009e9e:	3b08      	subs	r3, #8
 8009ea0:	4a32      	ldr	r2, [pc, #200]	@ (8009f6c <USBH_ParseDevDesc+0x15c>)
 8009ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	bf14      	ite	ne
 8009eae:	2301      	movne	r3, #1
 8009eb0:	2300      	moveq	r3, #0
 8009eb2:	b2db      	uxtb	r3, r3
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d106      	bne.n	8009ec6 <USBH_ParseDevDesc+0xb6>
 8009eb8:	e001      	b.n	8009ebe <USBH_ParseDevDesc+0xae>
 8009eba:	2b40      	cmp	r3, #64	@ 0x40
 8009ebc:	d003      	beq.n	8009ec6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2208      	movs	r2, #8
 8009ec2:	71da      	strb	r2, [r3, #7]
        break;
 8009ec4:	e000      	b.n	8009ec8 <USBH_ParseDevDesc+0xb8>
        break;
 8009ec6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009ec8:	e00e      	b.n	8009ee8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ed0:	2b02      	cmp	r3, #2
 8009ed2:	d107      	bne.n	8009ee4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	79db      	ldrb	r3, [r3, #7]
 8009ed8:	2b08      	cmp	r3, #8
 8009eda:	d005      	beq.n	8009ee8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	2208      	movs	r2, #8
 8009ee0:	71da      	strb	r2, [r3, #7]
 8009ee2:	e001      	b.n	8009ee8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009ee8:	88fb      	ldrh	r3, [r7, #6]
 8009eea:	2b08      	cmp	r3, #8
 8009eec:	d936      	bls.n	8009f5c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	3309      	adds	r3, #9
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	021b      	lsls	r3, r3, #8
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	4313      	orrs	r3, r2
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	330a      	adds	r3, #10
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	330b      	adds	r3, #11
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	021b      	lsls	r3, r3, #8
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	330c      	adds	r3, #12
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	330d      	adds	r3, #13
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	021b      	lsls	r3, r3, #8
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	4313      	orrs	r3, r2
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	7b9a      	ldrb	r2, [r3, #14]
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	7bda      	ldrb	r2, [r3, #15]
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	7c1a      	ldrb	r2, [r3, #16]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	7c5a      	ldrb	r2, [r3, #17]
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	371c      	adds	r7, #28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	01000101 	.word	0x01000101

08009f70 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08c      	sub	sp, #48	@ 0x30
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	60b9      	str	r1, [r7, #8]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009f84:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009f92:	2300      	movs	r3, #0
 8009f94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	e0da      	b.n	800a158 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b09      	cmp	r3, #9
 8009fac:	d002      	beq.n	8009fb4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb0:	2209      	movs	r2, #9
 8009fb2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	781a      	ldrb	r2, [r3, #0]
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	785a      	ldrb	r2, [r3, #1]
 8009fc0:	6a3b      	ldr	r3, [r7, #32]
 8009fc2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	3302      	adds	r3, #2
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	3303      	adds	r3, #3
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fde:	bf28      	it	cs
 8009fe0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	791a      	ldrb	r2, [r3, #4]
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	795a      	ldrb	r2, [r3, #5]
 8009ff6:	6a3b      	ldr	r3, [r7, #32]
 8009ff8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	799a      	ldrb	r2, [r3, #6]
 8009ffe:	6a3b      	ldr	r3, [r7, #32]
 800a000:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	79da      	ldrb	r2, [r3, #7]
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	7a1a      	ldrb	r2, [r3, #8]
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a012:	88fb      	ldrh	r3, [r7, #6]
 800a014:	2b09      	cmp	r3, #9
 800a016:	f240 809d 	bls.w	800a154 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a01a:	2309      	movs	r3, #9
 800a01c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a022:	e081      	b.n	800a128 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a024:	f107 0316 	add.w	r3, r7, #22
 800a028:	4619      	mov	r1, r3
 800a02a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a02c:	f000 f9e7 	bl	800a3fe <USBH_GetNextDesc>
 800a030:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a034:	785b      	ldrb	r3, [r3, #1]
 800a036:	2b04      	cmp	r3, #4
 800a038:	d176      	bne.n	800a128 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	2b09      	cmp	r3, #9
 800a040:	d002      	beq.n	800a048 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a044:	2209      	movs	r2, #9
 800a046:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a04c:	221a      	movs	r2, #26
 800a04e:	fb02 f303 	mul.w	r3, r2, r3
 800a052:	3308      	adds	r3, #8
 800a054:	6a3a      	ldr	r2, [r7, #32]
 800a056:	4413      	add	r3, r2
 800a058:	3302      	adds	r3, #2
 800a05a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a05c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a05e:	69f8      	ldr	r0, [r7, #28]
 800a060:	f000 f87e 	bl	800a160 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a064:	2300      	movs	r3, #0
 800a066:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a06e:	e043      	b.n	800a0f8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a070:	f107 0316 	add.w	r3, r7, #22
 800a074:	4619      	mov	r1, r3
 800a076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a078:	f000 f9c1 	bl	800a3fe <USBH_GetNextDesc>
 800a07c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a080:	785b      	ldrb	r3, [r3, #1]
 800a082:	2b05      	cmp	r3, #5
 800a084:	d138      	bne.n	800a0f8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	795b      	ldrb	r3, [r3, #5]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d113      	bne.n	800a0b6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a092:	2b02      	cmp	r3, #2
 800a094:	d003      	beq.n	800a09e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	799b      	ldrb	r3, [r3, #6]
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d10b      	bne.n	800a0b6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	79db      	ldrb	r3, [r3, #7]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10b      	bne.n	800a0be <USBH_ParseCfgDesc+0x14e>
 800a0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b09      	cmp	r3, #9
 800a0ac:	d007      	beq.n	800a0be <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b0:	2209      	movs	r2, #9
 800a0b2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0b4:	e003      	b.n	800a0be <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b8:	2207      	movs	r2, #7
 800a0ba:	701a      	strb	r2, [r3, #0]
 800a0bc:	e000      	b.n	800a0c0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a0be:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0c4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a0c8:	3201      	adds	r2, #1
 800a0ca:	00d2      	lsls	r2, r2, #3
 800a0cc:	211a      	movs	r1, #26
 800a0ce:	fb01 f303 	mul.w	r3, r1, r3
 800a0d2:	4413      	add	r3, r2
 800a0d4:	3308      	adds	r3, #8
 800a0d6:	6a3a      	ldr	r2, [r7, #32]
 800a0d8:	4413      	add	r3, r2
 800a0da:	3304      	adds	r3, #4
 800a0dc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a0de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a0e0:	69b9      	ldr	r1, [r7, #24]
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 f870 	bl	800a1c8 <USBH_ParseEPDesc>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a0ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0f8:	69fb      	ldr	r3, [r7, #28]
 800a0fa:	791b      	ldrb	r3, [r3, #4]
 800a0fc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a100:	429a      	cmp	r2, r3
 800a102:	d204      	bcs.n	800a10e <USBH_ParseCfgDesc+0x19e>
 800a104:	6a3b      	ldr	r3, [r7, #32]
 800a106:	885a      	ldrh	r2, [r3, #2]
 800a108:	8afb      	ldrh	r3, [r7, #22]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d8b0      	bhi.n	800a070 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	791b      	ldrb	r3, [r3, #4]
 800a112:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a116:	429a      	cmp	r2, r3
 800a118:	d201      	bcs.n	800a11e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e01c      	b.n	800a158 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a11e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a122:	3301      	adds	r3, #1
 800a124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d805      	bhi.n	800a13c <USBH_ParseCfgDesc+0x1cc>
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	885a      	ldrh	r2, [r3, #2]
 800a134:	8afb      	ldrh	r3, [r7, #22]
 800a136:	429a      	cmp	r2, r3
 800a138:	f63f af74 	bhi.w	800a024 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	791b      	ldrb	r3, [r3, #4]
 800a140:	2b02      	cmp	r3, #2
 800a142:	bf28      	it	cs
 800a144:	2302      	movcs	r3, #2
 800a146:	b2db      	uxtb	r3, r3
 800a148:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d201      	bcs.n	800a154 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a150:	2303      	movs	r3, #3
 800a152:	e001      	b.n	800a158 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a154:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3730      	adds	r7, #48	@ 0x30
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781a      	ldrb	r2, [r3, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	785a      	ldrb	r2, [r3, #1]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	789a      	ldrb	r2, [r3, #2]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	78da      	ldrb	r2, [r3, #3]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	3304      	adds	r3, #4
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	2b02      	cmp	r3, #2
 800a192:	bf28      	it	cs
 800a194:	2302      	movcs	r3, #2
 800a196:	b2da      	uxtb	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	795a      	ldrb	r2, [r3, #5]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	799a      	ldrb	r2, [r3, #6]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	79da      	ldrb	r2, [r3, #7]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	7a1a      	ldrb	r2, [r3, #8]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	721a      	strb	r2, [r3, #8]
}
 800a1bc:	bf00      	nop
 800a1be:	370c      	adds	r7, #12
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b087      	sub	sp, #28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	781a      	ldrb	r2, [r3, #0]
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	785a      	ldrb	r2, [r3, #1]
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	789a      	ldrb	r2, [r3, #2]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	78da      	ldrb	r2, [r3, #3]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3304      	adds	r3, #4
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3305      	adds	r3, #5
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	021b      	lsls	r3, r3, #8
 800a208:	b29b      	uxth	r3, r3
 800a20a:	4313      	orrs	r3, r2
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	799a      	ldrb	r2, [r3, #6]
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	889b      	ldrh	r3, [r3, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d009      	beq.n	800a236 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a22a:	d804      	bhi.n	800a236 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a234:	d901      	bls.n	800a23a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a236:	2303      	movs	r3, #3
 800a238:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a240:	2b00      	cmp	r3, #0
 800a242:	d136      	bne.n	800a2b2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	78db      	ldrb	r3, [r3, #3]
 800a248:	f003 0303 	and.w	r3, r3, #3
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d108      	bne.n	800a262 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	889b      	ldrh	r3, [r3, #4]
 800a254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a258:	f240 8097 	bls.w	800a38a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a25c:	2303      	movs	r3, #3
 800a25e:	75fb      	strb	r3, [r7, #23]
 800a260:	e093      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	78db      	ldrb	r3, [r3, #3]
 800a266:	f003 0303 	and.w	r3, r3, #3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d107      	bne.n	800a27e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	889b      	ldrh	r3, [r3, #4]
 800a272:	2b40      	cmp	r3, #64	@ 0x40
 800a274:	f240 8089 	bls.w	800a38a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a278:	2303      	movs	r3, #3
 800a27a:	75fb      	strb	r3, [r7, #23]
 800a27c:	e085      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	78db      	ldrb	r3, [r3, #3]
 800a282:	f003 0303 	and.w	r3, r3, #3
 800a286:	2b01      	cmp	r3, #1
 800a288:	d005      	beq.n	800a296 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	78db      	ldrb	r3, [r3, #3]
 800a28e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a292:	2b03      	cmp	r3, #3
 800a294:	d10a      	bne.n	800a2ac <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	799b      	ldrb	r3, [r3, #6]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d003      	beq.n	800a2a6 <USBH_ParseEPDesc+0xde>
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	799b      	ldrb	r3, [r3, #6]
 800a2a2:	2b10      	cmp	r3, #16
 800a2a4:	d970      	bls.n	800a388 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a2aa:	e06d      	b.n	800a388 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	75fb      	strb	r3, [r7, #23]
 800a2b0:	e06b      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d13c      	bne.n	800a336 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	78db      	ldrb	r3, [r3, #3]
 800a2c0:	f003 0303 	and.w	r3, r3, #3
 800a2c4:	2b02      	cmp	r3, #2
 800a2c6:	d005      	beq.n	800a2d4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	78db      	ldrb	r3, [r3, #3]
 800a2cc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d106      	bne.n	800a2e2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	889b      	ldrh	r3, [r3, #4]
 800a2d8:	2b40      	cmp	r3, #64	@ 0x40
 800a2da:	d956      	bls.n	800a38a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a2e0:	e053      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	78db      	ldrb	r3, [r3, #3]
 800a2e6:	f003 0303 	and.w	r3, r3, #3
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d10e      	bne.n	800a30c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	799b      	ldrb	r3, [r3, #6]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d007      	beq.n	800a306 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a2fa:	2b10      	cmp	r3, #16
 800a2fc:	d803      	bhi.n	800a306 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a302:	2b40      	cmp	r3, #64	@ 0x40
 800a304:	d941      	bls.n	800a38a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a306:	2303      	movs	r3, #3
 800a308:	75fb      	strb	r3, [r7, #23]
 800a30a:	e03e      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	78db      	ldrb	r3, [r3, #3]
 800a310:	f003 0303 	and.w	r3, r3, #3
 800a314:	2b03      	cmp	r3, #3
 800a316:	d10b      	bne.n	800a330 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	799b      	ldrb	r3, [r3, #6]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <USBH_ParseEPDesc+0x162>
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	889b      	ldrh	r3, [r3, #4]
 800a324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a328:	d32f      	bcc.n	800a38a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a32a:	2303      	movs	r3, #3
 800a32c:	75fb      	strb	r3, [r7, #23]
 800a32e:	e02c      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a330:	2303      	movs	r3, #3
 800a332:	75fb      	strb	r3, [r7, #23]
 800a334:	e029      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d120      	bne.n	800a382 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	78db      	ldrb	r3, [r3, #3]
 800a344:	f003 0303 	and.w	r3, r3, #3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d106      	bne.n	800a35a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	889b      	ldrh	r3, [r3, #4]
 800a350:	2b08      	cmp	r3, #8
 800a352:	d01a      	beq.n	800a38a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a354:	2303      	movs	r3, #3
 800a356:	75fb      	strb	r3, [r7, #23]
 800a358:	e017      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	78db      	ldrb	r3, [r3, #3]
 800a35e:	f003 0303 	and.w	r3, r3, #3
 800a362:	2b03      	cmp	r3, #3
 800a364:	d10a      	bne.n	800a37c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	799b      	ldrb	r3, [r3, #6]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <USBH_ParseEPDesc+0x1ae>
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	889b      	ldrh	r3, [r3, #4]
 800a372:	2b08      	cmp	r3, #8
 800a374:	d909      	bls.n	800a38a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a376:	2303      	movs	r3, #3
 800a378:	75fb      	strb	r3, [r7, #23]
 800a37a:	e006      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a37c:	2303      	movs	r3, #3
 800a37e:	75fb      	strb	r3, [r7, #23]
 800a380:	e003      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a382:	2303      	movs	r3, #3
 800a384:	75fb      	strb	r3, [r7, #23]
 800a386:	e000      	b.n	800a38a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a388:	bf00      	nop
  }

  return status;
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	371c      	adds	r7, #28
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a398:	b480      	push	{r7}
 800a39a:	b087      	sub	sp, #28
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	3301      	adds	r3, #1
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d120      	bne.n	800a3f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	1e9a      	subs	r2, r3, #2
 800a3b6:	88fb      	ldrh	r3, [r7, #6]
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	bf28      	it	cs
 800a3bc:	4613      	movcs	r3, r2
 800a3be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	3302      	adds	r3, #2
 800a3c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	82fb      	strh	r3, [r7, #22]
 800a3ca:	e00b      	b.n	800a3e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a3cc:	8afb      	ldrh	r3, [r7, #22]
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	781a      	ldrb	r2, [r3, #0]
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a3de:	8afb      	ldrh	r3, [r7, #22]
 800a3e0:	3302      	adds	r3, #2
 800a3e2:	82fb      	strh	r3, [r7, #22]
 800a3e4:	8afa      	ldrh	r2, [r7, #22]
 800a3e6:	8abb      	ldrh	r3, [r7, #20]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d3ef      	bcc.n	800a3cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	701a      	strb	r2, [r3, #0]
  }
}
 800a3f2:	bf00      	nop
 800a3f4:	371c      	adds	r7, #28
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a3fe:	b480      	push	{r7}
 800a400:	b085      	sub	sp, #20
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	7812      	ldrb	r2, [r2, #0]
 800a410:	4413      	add	r3, r2
 800a412:	b29a      	uxth	r2, r3
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4413      	add	r3, r2
 800a422:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a424:	68fb      	ldr	r3, [r7, #12]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b086      	sub	sp, #24
 800a436:	af00      	add	r7, sp, #0
 800a438:	60f8      	str	r0, [r7, #12]
 800a43a:	60b9      	str	r1, [r7, #8]
 800a43c:	4613      	mov	r3, r2
 800a43e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a440:	2301      	movs	r3, #1
 800a442:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	789b      	ldrb	r3, [r3, #2]
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d002      	beq.n	800a452 <USBH_CtlReq+0x20>
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d00f      	beq.n	800a470 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a450:	e027      	b.n	800a4a2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	88fa      	ldrh	r2, [r7, #6]
 800a45c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2201      	movs	r2, #1
 800a462:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2202      	movs	r2, #2
 800a468:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a46a:	2301      	movs	r3, #1
 800a46c:	75fb      	strb	r3, [r7, #23]
      break;
 800a46e:	e018      	b.n	800a4a2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 f81b 	bl	800a4ac <USBH_HandleControl>
 800a476:	4603      	mov	r3, r0
 800a478:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a47a:	7dfb      	ldrb	r3, [r7, #23]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <USBH_CtlReq+0x54>
 800a480:	7dfb      	ldrb	r3, [r7, #23]
 800a482:	2b03      	cmp	r3, #3
 800a484:	d106      	bne.n	800a494 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2201      	movs	r2, #1
 800a48a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	761a      	strb	r2, [r3, #24]
      break;
 800a492:	e005      	b.n	800a4a0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	2b02      	cmp	r3, #2
 800a498:	d102      	bne.n	800a4a0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2201      	movs	r2, #1
 800a49e:	709a      	strb	r2, [r3, #2]
      break;
 800a4a0:	bf00      	nop
  }
  return status;
 800a4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3718      	adds	r7, #24
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af02      	add	r7, sp, #8
 800a4b2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	7e1b      	ldrb	r3, [r3, #24]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	2b0a      	cmp	r3, #10
 800a4c4:	f200 8156 	bhi.w	800a774 <USBH_HandleControl+0x2c8>
 800a4c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d0 <USBH_HandleControl+0x24>)
 800a4ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ce:	bf00      	nop
 800a4d0:	0800a4fd 	.word	0x0800a4fd
 800a4d4:	0800a517 	.word	0x0800a517
 800a4d8:	0800a581 	.word	0x0800a581
 800a4dc:	0800a5a7 	.word	0x0800a5a7
 800a4e0:	0800a5df 	.word	0x0800a5df
 800a4e4:	0800a609 	.word	0x0800a609
 800a4e8:	0800a65b 	.word	0x0800a65b
 800a4ec:	0800a67d 	.word	0x0800a67d
 800a4f0:	0800a6b9 	.word	0x0800a6b9
 800a4f4:	0800a6df 	.word	0x0800a6df
 800a4f8:	0800a71d 	.word	0x0800a71d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f103 0110 	add.w	r1, r3, #16
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	795b      	ldrb	r3, [r3, #5]
 800a506:	461a      	mov	r2, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f943 	bl	800a794 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2202      	movs	r2, #2
 800a512:	761a      	strb	r2, [r3, #24]
      break;
 800a514:	e139      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	795b      	ldrb	r3, [r3, #5]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fcc5 	bl	800aeac <USBH_LL_GetURBState>
 800a522:	4603      	mov	r3, r0
 800a524:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d11e      	bne.n	800a56a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	7c1b      	ldrb	r3, [r3, #16]
 800a530:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a534:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	8adb      	ldrh	r3, [r3, #22]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00a      	beq.n	800a554 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a53e:	7b7b      	ldrb	r3, [r7, #13]
 800a540:	2b80      	cmp	r3, #128	@ 0x80
 800a542:	d103      	bne.n	800a54c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2203      	movs	r2, #3
 800a548:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a54a:	e115      	b.n	800a778 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2205      	movs	r2, #5
 800a550:	761a      	strb	r2, [r3, #24]
      break;
 800a552:	e111      	b.n	800a778 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a554:	7b7b      	ldrb	r3, [r7, #13]
 800a556:	2b80      	cmp	r3, #128	@ 0x80
 800a558:	d103      	bne.n	800a562 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2209      	movs	r2, #9
 800a55e:	761a      	strb	r2, [r3, #24]
      break;
 800a560:	e10a      	b.n	800a778 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2207      	movs	r2, #7
 800a566:	761a      	strb	r2, [r3, #24]
      break;
 800a568:	e106      	b.n	800a778 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	2b04      	cmp	r3, #4
 800a56e:	d003      	beq.n	800a578 <USBH_HandleControl+0xcc>
 800a570:	7bbb      	ldrb	r3, [r7, #14]
 800a572:	2b02      	cmp	r3, #2
 800a574:	f040 8100 	bne.w	800a778 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	220b      	movs	r2, #11
 800a57c:	761a      	strb	r2, [r3, #24]
      break;
 800a57e:	e0fb      	b.n	800a778 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a586:	b29a      	uxth	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6899      	ldr	r1, [r3, #8]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	899a      	ldrh	r2, [r3, #12]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	791b      	ldrb	r3, [r3, #4]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f93a 	bl	800a812 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	761a      	strb	r2, [r3, #24]
      break;
 800a5a4:	e0f1      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	791b      	ldrb	r3, [r3, #4]
 800a5aa:	4619      	mov	r1, r3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fc7d 	bl	800aeac <USBH_LL_GetURBState>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a5b6:	7bbb      	ldrb	r3, [r7, #14]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d102      	bne.n	800a5c2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2209      	movs	r2, #9
 800a5c0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a5c2:	7bbb      	ldrb	r3, [r7, #14]
 800a5c4:	2b05      	cmp	r3, #5
 800a5c6:	d102      	bne.n	800a5ce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a5cc:	e0d6      	b.n	800a77c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a5ce:	7bbb      	ldrb	r3, [r7, #14]
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	f040 80d3 	bne.w	800a77c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	220b      	movs	r2, #11
 800a5da:	761a      	strb	r2, [r3, #24]
      break;
 800a5dc:	e0ce      	b.n	800a77c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6899      	ldr	r1, [r3, #8]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	899a      	ldrh	r2, [r3, #12]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	795b      	ldrb	r3, [r3, #5]
 800a5ea:	2001      	movs	r0, #1
 800a5ec:	9000      	str	r0, [sp, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f8ea 	bl	800a7c8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2206      	movs	r2, #6
 800a604:	761a      	strb	r2, [r3, #24]
      break;
 800a606:	e0c0      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	795b      	ldrb	r3, [r3, #5]
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 fc4c 	bl	800aeac <USBH_LL_GetURBState>
 800a614:	4603      	mov	r3, r0
 800a616:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a618:	7bbb      	ldrb	r3, [r7, #14]
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d103      	bne.n	800a626 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2207      	movs	r2, #7
 800a622:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a624:	e0ac      	b.n	800a780 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	2b05      	cmp	r3, #5
 800a62a:	d105      	bne.n	800a638 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	220c      	movs	r2, #12
 800a630:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a632:	2303      	movs	r3, #3
 800a634:	73fb      	strb	r3, [r7, #15]
      break;
 800a636:	e0a3      	b.n	800a780 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d103      	bne.n	800a646 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2205      	movs	r2, #5
 800a642:	761a      	strb	r2, [r3, #24]
      break;
 800a644:	e09c      	b.n	800a780 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a646:	7bbb      	ldrb	r3, [r7, #14]
 800a648:	2b04      	cmp	r3, #4
 800a64a:	f040 8099 	bne.w	800a780 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	220b      	movs	r2, #11
 800a652:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a654:	2302      	movs	r3, #2
 800a656:	73fb      	strb	r3, [r7, #15]
      break;
 800a658:	e092      	b.n	800a780 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	791b      	ldrb	r3, [r3, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	2100      	movs	r1, #0
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f8d5 	bl	800a812 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a66e:	b29a      	uxth	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2208      	movs	r2, #8
 800a678:	761a      	strb	r2, [r3, #24]

      break;
 800a67a:	e086      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	791b      	ldrb	r3, [r3, #4]
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fc12 	bl	800aeac <USBH_LL_GetURBState>
 800a688:	4603      	mov	r3, r0
 800a68a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a68c:	7bbb      	ldrb	r3, [r7, #14]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d105      	bne.n	800a69e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	220d      	movs	r2, #13
 800a696:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a69c:	e072      	b.n	800a784 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a69e:	7bbb      	ldrb	r3, [r7, #14]
 800a6a0:	2b04      	cmp	r3, #4
 800a6a2:	d103      	bne.n	800a6ac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	220b      	movs	r2, #11
 800a6a8:	761a      	strb	r2, [r3, #24]
      break;
 800a6aa:	e06b      	b.n	800a784 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a6ac:	7bbb      	ldrb	r3, [r7, #14]
 800a6ae:	2b05      	cmp	r3, #5
 800a6b0:	d168      	bne.n	800a784 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b6:	e065      	b.n	800a784 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	795b      	ldrb	r3, [r3, #5]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	9200      	str	r2, [sp, #0]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f87f 	bl	800a7c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	220a      	movs	r2, #10
 800a6da:	761a      	strb	r2, [r3, #24]
      break;
 800a6dc:	e055      	b.n	800a78a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	795b      	ldrb	r3, [r3, #5]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fbe1 	bl	800aeac <USBH_LL_GetURBState>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d105      	bne.n	800a700 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	220d      	movs	r2, #13
 800a6fc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6fe:	e043      	b.n	800a788 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a700:	7bbb      	ldrb	r3, [r7, #14]
 800a702:	2b02      	cmp	r3, #2
 800a704:	d103      	bne.n	800a70e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2209      	movs	r2, #9
 800a70a:	761a      	strb	r2, [r3, #24]
      break;
 800a70c:	e03c      	b.n	800a788 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
 800a710:	2b04      	cmp	r3, #4
 800a712:	d139      	bne.n	800a788 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	220b      	movs	r2, #11
 800a718:	761a      	strb	r2, [r3, #24]
      break;
 800a71a:	e035      	b.n	800a788 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7e5b      	ldrb	r3, [r3, #25]
 800a720:	3301      	adds	r3, #1
 800a722:	b2da      	uxtb	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	765a      	strb	r2, [r3, #25]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	7e5b      	ldrb	r3, [r3, #25]
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d806      	bhi.n	800a73e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a73c:	e025      	b.n	800a78a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a744:	2106      	movs	r1, #6
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2200      	movs	r2, #0
 800a74e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	795b      	ldrb	r3, [r3, #5]
 800a754:	4619      	mov	r1, r3
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f90c 	bl	800a974 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	791b      	ldrb	r3, [r3, #4]
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f906 	bl	800a974 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a76e:	2302      	movs	r3, #2
 800a770:	73fb      	strb	r3, [r7, #15]
      break;
 800a772:	e00a      	b.n	800a78a <USBH_HandleControl+0x2de>

    default:
      break;
 800a774:	bf00      	nop
 800a776:	e008      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a778:	bf00      	nop
 800a77a:	e006      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a77c:	bf00      	nop
 800a77e:	e004      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a780:	bf00      	nop
 800a782:	e002      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a784:	bf00      	nop
 800a786:	e000      	b.n	800a78a <USBH_HandleControl+0x2de>
      break;
 800a788:	bf00      	nop
  }

  return status;
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af04      	add	r7, sp, #16
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7a2:	79f9      	ldrb	r1, [r7, #7]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9303      	str	r3, [sp, #12]
 800a7a8:	2308      	movs	r3, #8
 800a7aa:	9302      	str	r3, [sp, #8]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	9301      	str	r3, [sp, #4]
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	f000 fb46 	bl	800ae4a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af04      	add	r7, sp, #16
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	4611      	mov	r1, r2
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	80fb      	strh	r3, [r7, #6]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7ec:	7979      	ldrb	r1, [r7, #5]
 800a7ee:	7e3b      	ldrb	r3, [r7, #24]
 800a7f0:	9303      	str	r3, [sp, #12]
 800a7f2:	88fb      	ldrh	r3, [r7, #6]
 800a7f4:	9302      	str	r3, [sp, #8]
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	9301      	str	r3, [sp, #4]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	2300      	movs	r3, #0
 800a800:	2200      	movs	r2, #0
 800a802:	68f8      	ldr	r0, [r7, #12]
 800a804:	f000 fb21 	bl	800ae4a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b088      	sub	sp, #32
 800a816:	af04      	add	r7, sp, #16
 800a818:	60f8      	str	r0, [r7, #12]
 800a81a:	60b9      	str	r1, [r7, #8]
 800a81c:	4611      	mov	r1, r2
 800a81e:	461a      	mov	r2, r3
 800a820:	460b      	mov	r3, r1
 800a822:	80fb      	strh	r3, [r7, #6]
 800a824:	4613      	mov	r3, r2
 800a826:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a828:	7979      	ldrb	r1, [r7, #5]
 800a82a:	2300      	movs	r3, #0
 800a82c:	9303      	str	r3, [sp, #12]
 800a82e:	88fb      	ldrh	r3, [r7, #6]
 800a830:	9302      	str	r3, [sp, #8]
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	2301      	movs	r3, #1
 800a838:	9300      	str	r3, [sp, #0]
 800a83a:	2300      	movs	r3, #0
 800a83c:	2201      	movs	r2, #1
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 fb03 	bl	800ae4a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a844:	2300      	movs	r3, #0

}
 800a846:	4618      	mov	r0, r3
 800a848:	3710      	adds	r7, #16
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}

0800a84e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a84e:	b580      	push	{r7, lr}
 800a850:	b088      	sub	sp, #32
 800a852:	af04      	add	r7, sp, #16
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	4611      	mov	r1, r2
 800a85a:	461a      	mov	r2, r3
 800a85c:	460b      	mov	r3, r1
 800a85e:	80fb      	strh	r3, [r7, #6]
 800a860:	4613      	mov	r3, r2
 800a862:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a872:	7979      	ldrb	r1, [r7, #5]
 800a874:	7e3b      	ldrb	r3, [r7, #24]
 800a876:	9303      	str	r3, [sp, #12]
 800a878:	88fb      	ldrh	r3, [r7, #6]
 800a87a:	9302      	str	r3, [sp, #8]
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	2301      	movs	r3, #1
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	2302      	movs	r3, #2
 800a886:	2200      	movs	r2, #0
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 fade 	bl	800ae4a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b088      	sub	sp, #32
 800a89c:	af04      	add	r7, sp, #16
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	80fb      	strh	r3, [r7, #6]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8ae:	7979      	ldrb	r1, [r7, #5]
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	9303      	str	r3, [sp, #12]
 800a8b4:	88fb      	ldrh	r3, [r7, #6]
 800a8b6:	9302      	str	r3, [sp, #8]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	9301      	str	r3, [sp, #4]
 800a8bc:	2301      	movs	r3, #1
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	68f8      	ldr	r0, [r7, #12]
 800a8c6:	f000 fac0 	bl	800ae4a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b086      	sub	sp, #24
 800a8d8:	af04      	add	r7, sp, #16
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	4608      	mov	r0, r1
 800a8de:	4611      	mov	r1, r2
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	70fb      	strb	r3, [r7, #3]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	70bb      	strb	r3, [r7, #2]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a8ee:	7878      	ldrb	r0, [r7, #1]
 800a8f0:	78ba      	ldrb	r2, [r7, #2]
 800a8f2:	78f9      	ldrb	r1, [r7, #3]
 800a8f4:	8b3b      	ldrh	r3, [r7, #24]
 800a8f6:	9302      	str	r3, [sp, #8]
 800a8f8:	7d3b      	ldrb	r3, [r7, #20]
 800a8fa:	9301      	str	r3, [sp, #4]
 800a8fc:	7c3b      	ldrb	r3, [r7, #16]
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	4603      	mov	r3, r0
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fa53 	bl	800adae <USBH_LL_OpenPipe>

  return USBH_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3708      	adds	r7, #8
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b082      	sub	sp, #8
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	460b      	mov	r3, r1
 800a91c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	4619      	mov	r1, r3
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa72 	bl	800ae0c <USBH_LL_ClosePipe>

  return USBH_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3708      	adds	r7, #8
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b084      	sub	sp, #16
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
 800a93a:	460b      	mov	r3, r1
 800a93c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 f836 	bl	800a9b0 <USBH_GetFreePipe>
 800a944:	4603      	mov	r3, r0
 800a946:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a948:	89fb      	ldrh	r3, [r7, #14]
 800a94a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a94e:	4293      	cmp	r3, r2
 800a950:	d00a      	beq.n	800a968 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a952:	78fa      	ldrb	r2, [r7, #3]
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	f003 030f 	and.w	r3, r3, #15
 800a95a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a95e:	6879      	ldr	r1, [r7, #4]
 800a960:	33e0      	adds	r3, #224	@ 0xe0
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	440b      	add	r3, r1
 800a966:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a968:	89fb      	ldrh	r3, [r7, #14]
 800a96a:	b2db      	uxtb	r3, r3
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a980:	78fb      	ldrb	r3, [r7, #3]
 800a982:	2b0f      	cmp	r3, #15
 800a984:	d80d      	bhi.n	800a9a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a986:	78fb      	ldrb	r3, [r7, #3]
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	33e0      	adds	r3, #224	@ 0xe0
 800a98c:	009b      	lsls	r3, r3, #2
 800a98e:	4413      	add	r3, r2
 800a990:	685a      	ldr	r2, [r3, #4]
 800a992:	78fb      	ldrb	r3, [r7, #3]
 800a994:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a998:	6879      	ldr	r1, [r7, #4]
 800a99a:	33e0      	adds	r3, #224	@ 0xe0
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	440b      	add	r3, r1
 800a9a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73fb      	strb	r3, [r7, #15]
 800a9c0:	e00f      	b.n	800a9e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a9c2:	7bfb      	ldrb	r3, [r7, #15]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	33e0      	adds	r3, #224	@ 0xe0
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	4413      	add	r3, r2
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d102      	bne.n	800a9dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	e007      	b.n	800a9ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a9dc:	7bfb      	ldrb	r3, [r7, #15]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	73fb      	strb	r3, [r7, #15]
 800a9e2:	7bfb      	ldrb	r3, [r7, #15]
 800a9e4:	2b0f      	cmp	r3, #15
 800a9e6:	d9ec      	bls.n	800a9c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a9e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	490e      	ldr	r1, [pc, #56]	@ (800aa38 <MX_USB_HOST_Init+0x40>)
 800aa00:	480e      	ldr	r0, [pc, #56]	@ (800aa3c <MX_USB_HOST_Init+0x44>)
 800aa02:	f7fe fb15 	bl	8009030 <USBH_Init>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800aa0c:	f7f6 fb6e 	bl	80010ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800aa10:	490b      	ldr	r1, [pc, #44]	@ (800aa40 <MX_USB_HOST_Init+0x48>)
 800aa12:	480a      	ldr	r0, [pc, #40]	@ (800aa3c <MX_USB_HOST_Init+0x44>)
 800aa14:	f7fe fbb9 	bl	800918a <USBH_RegisterClass>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800aa1e:	f7f6 fb65 	bl	80010ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800aa22:	4806      	ldr	r0, [pc, #24]	@ (800aa3c <MX_USB_HOST_Init+0x44>)
 800aa24:	f7fe fc3d 	bl	80092a2 <USBH_Start>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aa2e:	f7f6 fb5d 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aa32:	bf00      	nop
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	0800aa59 	.word	0x0800aa59
 800aa3c:	200001f8 	.word	0x200001f8
 800aa40:	2000000c 	.word	0x2000000c

0800aa44 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800aa48:	4802      	ldr	r0, [pc, #8]	@ (800aa54 <MX_USB_HOST_Process+0x10>)
 800aa4a:	f7fe fc3b 	bl	80092c4 <USBH_Process>
}
 800aa4e:	bf00      	nop
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	200001f8 	.word	0x200001f8

0800aa58 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa64:	78fb      	ldrb	r3, [r7, #3]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d819      	bhi.n	800aaa0 <USBH_UserProcess+0x48>
 800aa6c:	a201      	add	r2, pc, #4	@ (adr r2, 800aa74 <USBH_UserProcess+0x1c>)
 800aa6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa72:	bf00      	nop
 800aa74:	0800aaa1 	.word	0x0800aaa1
 800aa78:	0800aa91 	.word	0x0800aa91
 800aa7c:	0800aaa1 	.word	0x0800aaa1
 800aa80:	0800aa99 	.word	0x0800aa99
 800aa84:	0800aa89 	.word	0x0800aa89
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa88:	4b09      	ldr	r3, [pc, #36]	@ (800aab0 <USBH_UserProcess+0x58>)
 800aa8a:	2203      	movs	r2, #3
 800aa8c:	701a      	strb	r2, [r3, #0]
  break;
 800aa8e:	e008      	b.n	800aaa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa90:	4b07      	ldr	r3, [pc, #28]	@ (800aab0 <USBH_UserProcess+0x58>)
 800aa92:	2202      	movs	r2, #2
 800aa94:	701a      	strb	r2, [r3, #0]
  break;
 800aa96:	e004      	b.n	800aaa2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa98:	4b05      	ldr	r3, [pc, #20]	@ (800aab0 <USBH_UserProcess+0x58>)
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	701a      	strb	r2, [r3, #0]
  break;
 800aa9e:	e000      	b.n	800aaa2 <USBH_UserProcess+0x4a>

  default:
  break;
 800aaa0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aaa2:	bf00      	nop
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	200005d0 	.word	0x200005d0

0800aab4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b08a      	sub	sp, #40	@ 0x28
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aabc:	f107 0314 	add.w	r3, r7, #20
 800aac0:	2200      	movs	r2, #0
 800aac2:	601a      	str	r2, [r3, #0]
 800aac4:	605a      	str	r2, [r3, #4]
 800aac6:	609a      	str	r2, [r3, #8]
 800aac8:	60da      	str	r2, [r3, #12]
 800aaca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aad4:	d147      	bne.n	800ab66 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aad6:	2300      	movs	r3, #0
 800aad8:	613b      	str	r3, [r7, #16]
 800aada:	4b25      	ldr	r3, [pc, #148]	@ (800ab70 <HAL_HCD_MspInit+0xbc>)
 800aadc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aade:	4a24      	ldr	r2, [pc, #144]	@ (800ab70 <HAL_HCD_MspInit+0xbc>)
 800aae0:	f043 0301 	orr.w	r3, r3, #1
 800aae4:	6313      	str	r3, [r2, #48]	@ 0x30
 800aae6:	4b22      	ldr	r3, [pc, #136]	@ (800ab70 <HAL_HCD_MspInit+0xbc>)
 800aae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaea:	f003 0301 	and.w	r3, r3, #1
 800aaee:	613b      	str	r3, [r7, #16]
 800aaf0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aaf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aaf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aafc:	2300      	movs	r3, #0
 800aafe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ab00:	f107 0314 	add.w	r3, r7, #20
 800ab04:	4619      	mov	r1, r3
 800ab06:	481b      	ldr	r0, [pc, #108]	@ (800ab74 <HAL_HCD_MspInit+0xc0>)
 800ab08:	f7f8 f9cc 	bl	8002ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ab0c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ab10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab12:	2302      	movs	r3, #2
 800ab14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ab1e:	230a      	movs	r3, #10
 800ab20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab22:	f107 0314 	add.w	r3, r7, #20
 800ab26:	4619      	mov	r1, r3
 800ab28:	4812      	ldr	r0, [pc, #72]	@ (800ab74 <HAL_HCD_MspInit+0xc0>)
 800ab2a:	f7f8 f9bb 	bl	8002ea4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ab2e:	4b10      	ldr	r3, [pc, #64]	@ (800ab70 <HAL_HCD_MspInit+0xbc>)
 800ab30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab32:	4a0f      	ldr	r2, [pc, #60]	@ (800ab70 <HAL_HCD_MspInit+0xbc>)
 800ab34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab38:	6353      	str	r3, [r2, #52]	@ 0x34
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
 800ab3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ab70 <HAL_HCD_MspInit+0xbc>)
 800ab40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab42:	4a0b      	ldr	r2, [pc, #44]	@ (800ab70 <HAL_HCD_MspInit+0xbc>)
 800ab44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ab48:	6453      	str	r3, [r2, #68]	@ 0x44
 800ab4a:	4b09      	ldr	r3, [pc, #36]	@ (800ab70 <HAL_HCD_MspInit+0xbc>)
 800ab4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab52:	60fb      	str	r3, [r7, #12]
 800ab54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ab56:	2200      	movs	r2, #0
 800ab58:	2100      	movs	r1, #0
 800ab5a:	2043      	movs	r0, #67	@ 0x43
 800ab5c:	f7f8 f96b 	bl	8002e36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab60:	2043      	movs	r0, #67	@ 0x43
 800ab62:	f7f8 f984 	bl	8002e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab66:	bf00      	nop
 800ab68:	3728      	adds	r7, #40	@ 0x28
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	40023800 	.word	0x40023800
 800ab74:	40020000 	.word	0x40020000

0800ab78 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe ff73 	bl	8009a72 <USBH_LL_IncTimer>
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aba2:	4618      	mov	r0, r3
 800aba4:	f7fe ffab 	bl	8009afe <USBH_LL_Connect>
}
 800aba8:	bf00      	nop
 800abaa:	3708      	adds	r7, #8
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b082      	sub	sp, #8
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7fe ffb4 	bl	8009b2c <USBH_LL_Disconnect>
}
 800abc4:	bf00      	nop
 800abc6:	3708      	adds	r7, #8
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	460b      	mov	r3, r1
 800abd6:	70fb      	strb	r3, [r7, #3]
 800abd8:	4613      	mov	r3, r2
 800abda:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fe ff65 	bl	8009ac6 <USBH_LL_PortEnabled>
}
 800abfc:	bf00      	nop
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe ff65 	bl	8009ae2 <USBH_LL_PortDisabled>
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ac2e:	2b01      	cmp	r3, #1
 800ac30:	d12a      	bne.n	800ac88 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ac32:	4a18      	ldr	r2, [pc, #96]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a15      	ldr	r2, [pc, #84]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac3e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac42:	4b14      	ldr	r3, [pc, #80]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ac48:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ac4a:	4b12      	ldr	r3, [pc, #72]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac4c:	2208      	movs	r2, #8
 800ac4e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ac50:	4b10      	ldr	r3, [pc, #64]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac52:	2201      	movs	r2, #1
 800ac54:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac56:	4b0f      	ldr	r3, [pc, #60]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ac5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac5e:	2202      	movs	r2, #2
 800ac60:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac62:	4b0c      	ldr	r3, [pc, #48]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac68:	480a      	ldr	r0, [pc, #40]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac6a:	f7f8 fad0 	bl	800320e <HAL_HCD_Init>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d001      	beq.n	800ac78 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ac74:	f7f6 fa3a 	bl	80010ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ac78:	4806      	ldr	r0, [pc, #24]	@ (800ac94 <USBH_LL_Init+0x74>)
 800ac7a:	f7f8 ff31 	bl	8003ae0 <HAL_HCD_GetCurrentFrame>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	4619      	mov	r1, r3
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7fe fee6 	bl	8009a54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	200005d4 	.word	0x200005d4

0800ac98 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca0:	2300      	movs	r3, #0
 800aca2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800acae:	4618      	mov	r0, r3
 800acb0:	f7f8 fe9e 	bl	80039f0 <HAL_HCD_Start>
 800acb4:	4603      	mov	r3, r0
 800acb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
 800acba:	4618      	mov	r0, r3
 800acbc:	f000 f95e 	bl	800af7c <USBH_Get_USB_Status>
 800acc0:	4603      	mov	r3, r0
 800acc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b084      	sub	sp, #16
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd6:	2300      	movs	r3, #0
 800acd8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ace4:	4618      	mov	r0, r3
 800ace6:	f7f8 fea6 	bl	8003a36 <HAL_HCD_Stop>
 800acea:	4603      	mov	r3, r0
 800acec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acee:	7bfb      	ldrb	r3, [r7, #15]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f000 f943 	bl	800af7c <USBH_Get_USB_Status>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7f8 fef0 	bl	8003afc <HAL_HCD_GetCurrentSpeed>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d00c      	beq.n	800ad3c <USBH_LL_GetSpeed+0x38>
 800ad22:	2b02      	cmp	r3, #2
 800ad24:	d80d      	bhi.n	800ad42 <USBH_LL_GetSpeed+0x3e>
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <USBH_LL_GetSpeed+0x2c>
 800ad2a:	2b01      	cmp	r3, #1
 800ad2c:	d003      	beq.n	800ad36 <USBH_LL_GetSpeed+0x32>
 800ad2e:	e008      	b.n	800ad42 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73fb      	strb	r3, [r7, #15]
    break;
 800ad34:	e008      	b.n	800ad48 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ad36:	2301      	movs	r3, #1
 800ad38:	73fb      	strb	r3, [r7, #15]
    break;
 800ad3a:	e005      	b.n	800ad48 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad40:	e002      	b.n	800ad48 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ad42:	2301      	movs	r3, #1
 800ad44:	73fb      	strb	r3, [r7, #15]
    break;
 800ad46:	bf00      	nop
  }
  return  speed;
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ad52:	b580      	push	{r7, lr}
 800ad54:	b084      	sub	sp, #16
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7f8 fe81 	bl	8003a70 <HAL_HCD_ResetPort>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
 800ad74:	4618      	mov	r0, r3
 800ad76:	f000 f901 	bl	800af7c <USBH_Get_USB_Status>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	460b      	mov	r3, r1
 800ad92:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad9a:	78fa      	ldrb	r2, [r7, #3]
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7f8 fe89 	bl	8003ab6 <HAL_HCD_HC_GetXferCount>
 800ada4:	4603      	mov	r3, r0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3708      	adds	r7, #8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}

0800adae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800adae:	b590      	push	{r4, r7, lr}
 800adb0:	b089      	sub	sp, #36	@ 0x24
 800adb2:	af04      	add	r7, sp, #16
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	4608      	mov	r0, r1
 800adb8:	4611      	mov	r1, r2
 800adba:	461a      	mov	r2, r3
 800adbc:	4603      	mov	r3, r0
 800adbe:	70fb      	strb	r3, [r7, #3]
 800adc0:	460b      	mov	r3, r1
 800adc2:	70bb      	strb	r3, [r7, #2]
 800adc4:	4613      	mov	r3, r2
 800adc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800add6:	787c      	ldrb	r4, [r7, #1]
 800add8:	78ba      	ldrb	r2, [r7, #2]
 800adda:	78f9      	ldrb	r1, [r7, #3]
 800addc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800adde:	9302      	str	r3, [sp, #8]
 800ade0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ade4:	9301      	str	r3, [sp, #4]
 800ade6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	4623      	mov	r3, r4
 800adee:	f7f8 fa75 	bl	80032dc <HAL_HCD_HC_Init>
 800adf2:	4603      	mov	r3, r0
 800adf4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800adf6:	7bfb      	ldrb	r3, [r7, #15]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f000 f8bf 	bl	800af7c <USBH_Get_USB_Status>
 800adfe:	4603      	mov	r3, r0
 800ae00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3714      	adds	r7, #20
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd90      	pop	{r4, r7, pc}

0800ae0c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	460b      	mov	r3, r1
 800ae16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae26:	78fa      	ldrb	r2, [r7, #3]
 800ae28:	4611      	mov	r1, r2
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7f8 fb0e 	bl	800344c <HAL_HCD_HC_Halt>
 800ae30:	4603      	mov	r3, r0
 800ae32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 f8a0 	bl	800af7c <USBH_Get_USB_Status>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ae4a:	b590      	push	{r4, r7, lr}
 800ae4c:	b089      	sub	sp, #36	@ 0x24
 800ae4e:	af04      	add	r7, sp, #16
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	4608      	mov	r0, r1
 800ae54:	4611      	mov	r1, r2
 800ae56:	461a      	mov	r2, r3
 800ae58:	4603      	mov	r3, r0
 800ae5a:	70fb      	strb	r3, [r7, #3]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	70bb      	strb	r3, [r7, #2]
 800ae60:	4613      	mov	r3, r2
 800ae62:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ae72:	787c      	ldrb	r4, [r7, #1]
 800ae74:	78ba      	ldrb	r2, [r7, #2]
 800ae76:	78f9      	ldrb	r1, [r7, #3]
 800ae78:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ae7c:	9303      	str	r3, [sp, #12]
 800ae7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	9301      	str	r3, [sp, #4]
 800ae86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	4623      	mov	r3, r4
 800ae8e:	f7f8 fb01 	bl	8003494 <HAL_HCD_HC_SubmitRequest>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 f86f 	bl	800af7c <USBH_Get_USB_Status>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aea2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd90      	pop	{r4, r7, pc}

0800aeac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aebe:	78fa      	ldrb	r2, [r7, #3]
 800aec0:	4611      	mov	r1, r2
 800aec2:	4618      	mov	r0, r3
 800aec4:	f7f8 fde2 	bl	8003a8c <HAL_HCD_HC_GetURBState>
 800aec8:	4603      	mov	r3, r0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}

0800aed2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800aed2:	b580      	push	{r7, lr}
 800aed4:	b082      	sub	sp, #8
 800aed6:	af00      	add	r7, sp, #0
 800aed8:	6078      	str	r0, [r7, #4]
 800aeda:	460b      	mov	r3, r1
 800aedc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d103      	bne.n	800aef0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800aee8:	78fb      	ldrb	r3, [r7, #3]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 f872 	bl	800afd4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800aef0:	20c8      	movs	r0, #200	@ 0xc8
 800aef2:	f7f7 fea1 	bl	8002c38 <HAL_Delay>
  return USBH_OK;
 800aef6:	2300      	movs	r3, #0
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3708      	adds	r7, #8
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	460b      	mov	r3, r1
 800af0a:	70fb      	strb	r3, [r7, #3]
 800af0c:	4613      	mov	r3, r2
 800af0e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af16:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800af18:	78fa      	ldrb	r2, [r7, #3]
 800af1a:	68f9      	ldr	r1, [r7, #12]
 800af1c:	4613      	mov	r3, r2
 800af1e:	011b      	lsls	r3, r3, #4
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	440b      	add	r3, r1
 800af26:	3317      	adds	r3, #23
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00a      	beq.n	800af44 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800af2e:	78fa      	ldrb	r2, [r7, #3]
 800af30:	68f9      	ldr	r1, [r7, #12]
 800af32:	4613      	mov	r3, r2
 800af34:	011b      	lsls	r3, r3, #4
 800af36:	1a9b      	subs	r3, r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	440b      	add	r3, r1
 800af3c:	333c      	adds	r3, #60	@ 0x3c
 800af3e:	78ba      	ldrb	r2, [r7, #2]
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	e009      	b.n	800af58 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800af44:	78fa      	ldrb	r2, [r7, #3]
 800af46:	68f9      	ldr	r1, [r7, #12]
 800af48:	4613      	mov	r3, r2
 800af4a:	011b      	lsls	r3, r3, #4
 800af4c:	1a9b      	subs	r3, r3, r2
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	440b      	add	r3, r1
 800af52:	333d      	adds	r3, #61	@ 0x3d
 800af54:	78ba      	ldrb	r2, [r7, #2]
 800af56:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800af58:	2300      	movs	r3, #0
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3714      	adds	r7, #20
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b082      	sub	sp, #8
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f7f7 fe62 	bl	8002c38 <HAL_Delay>
}
 800af74:	bf00      	nop
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d817      	bhi.n	800afc0 <USBH_Get_USB_Status+0x44>
 800af90:	a201      	add	r2, pc, #4	@ (adr r2, 800af98 <USBH_Get_USB_Status+0x1c>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afa9 	.word	0x0800afa9
 800af9c:	0800afaf 	.word	0x0800afaf
 800afa0:	0800afb5 	.word	0x0800afb5
 800afa4:	0800afbb 	.word	0x0800afbb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73fb      	strb	r3, [r7, #15]
    break;
 800afac:	e00b      	b.n	800afc6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800afae:	2302      	movs	r3, #2
 800afb0:	73fb      	strb	r3, [r7, #15]
    break;
 800afb2:	e008      	b.n	800afc6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800afb4:	2301      	movs	r3, #1
 800afb6:	73fb      	strb	r3, [r7, #15]
    break;
 800afb8:	e005      	b.n	800afc6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800afba:	2302      	movs	r3, #2
 800afbc:	73fb      	strb	r3, [r7, #15]
    break;
 800afbe:	e002      	b.n	800afc6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800afc0:	2302      	movs	r3, #2
 800afc2:	73fb      	strb	r3, [r7, #15]
    break;
 800afc4:	bf00      	nop
  }
  return usb_status;
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	4603      	mov	r3, r0
 800afdc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800afe2:	79fb      	ldrb	r3, [r7, #7]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d102      	bne.n	800afee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800afe8:	2300      	movs	r3, #0
 800afea:	73fb      	strb	r3, [r7, #15]
 800afec:	e001      	b.n	800aff2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800afee:	2301      	movs	r3, #1
 800aff0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
 800aff4:	461a      	mov	r2, r3
 800aff6:	2101      	movs	r1, #1
 800aff8:	4803      	ldr	r0, [pc, #12]	@ (800b008 <MX_DriverVbusFS+0x34>)
 800affa:	f7f8 f8ef 	bl	80031dc <HAL_GPIO_WritePin>
}
 800affe:	bf00      	nop
 800b000:	3710      	adds	r7, #16
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	40020800 	.word	0x40020800

0800b00c <malloc>:
 800b00c:	4b02      	ldr	r3, [pc, #8]	@ (800b018 <malloc+0xc>)
 800b00e:	4601      	mov	r1, r0
 800b010:	6818      	ldr	r0, [r3, #0]
 800b012:	f000 b82d 	b.w	800b070 <_malloc_r>
 800b016:	bf00      	nop
 800b018:	20000038 	.word	0x20000038

0800b01c <free>:
 800b01c:	4b02      	ldr	r3, [pc, #8]	@ (800b028 <free+0xc>)
 800b01e:	4601      	mov	r1, r0
 800b020:	6818      	ldr	r0, [r3, #0]
 800b022:	f000 bc21 	b.w	800b868 <_free_r>
 800b026:	bf00      	nop
 800b028:	20000038 	.word	0x20000038

0800b02c <sbrk_aligned>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	4e0f      	ldr	r6, [pc, #60]	@ (800b06c <sbrk_aligned+0x40>)
 800b030:	460c      	mov	r4, r1
 800b032:	6831      	ldr	r1, [r6, #0]
 800b034:	4605      	mov	r5, r0
 800b036:	b911      	cbnz	r1, 800b03e <sbrk_aligned+0x12>
 800b038:	f000 fbb8 	bl	800b7ac <_sbrk_r>
 800b03c:	6030      	str	r0, [r6, #0]
 800b03e:	4621      	mov	r1, r4
 800b040:	4628      	mov	r0, r5
 800b042:	f000 fbb3 	bl	800b7ac <_sbrk_r>
 800b046:	1c43      	adds	r3, r0, #1
 800b048:	d103      	bne.n	800b052 <sbrk_aligned+0x26>
 800b04a:	f04f 34ff 	mov.w	r4, #4294967295
 800b04e:	4620      	mov	r0, r4
 800b050:	bd70      	pop	{r4, r5, r6, pc}
 800b052:	1cc4      	adds	r4, r0, #3
 800b054:	f024 0403 	bic.w	r4, r4, #3
 800b058:	42a0      	cmp	r0, r4
 800b05a:	d0f8      	beq.n	800b04e <sbrk_aligned+0x22>
 800b05c:	1a21      	subs	r1, r4, r0
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 fba4 	bl	800b7ac <_sbrk_r>
 800b064:	3001      	adds	r0, #1
 800b066:	d1f2      	bne.n	800b04e <sbrk_aligned+0x22>
 800b068:	e7ef      	b.n	800b04a <sbrk_aligned+0x1e>
 800b06a:	bf00      	nop
 800b06c:	200009b4 	.word	0x200009b4

0800b070 <_malloc_r>:
 800b070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b074:	1ccd      	adds	r5, r1, #3
 800b076:	f025 0503 	bic.w	r5, r5, #3
 800b07a:	3508      	adds	r5, #8
 800b07c:	2d0c      	cmp	r5, #12
 800b07e:	bf38      	it	cc
 800b080:	250c      	movcc	r5, #12
 800b082:	2d00      	cmp	r5, #0
 800b084:	4606      	mov	r6, r0
 800b086:	db01      	blt.n	800b08c <_malloc_r+0x1c>
 800b088:	42a9      	cmp	r1, r5
 800b08a:	d904      	bls.n	800b096 <_malloc_r+0x26>
 800b08c:	230c      	movs	r3, #12
 800b08e:	6033      	str	r3, [r6, #0]
 800b090:	2000      	movs	r0, #0
 800b092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b096:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b16c <_malloc_r+0xfc>
 800b09a:	f000 f869 	bl	800b170 <__malloc_lock>
 800b09e:	f8d8 3000 	ldr.w	r3, [r8]
 800b0a2:	461c      	mov	r4, r3
 800b0a4:	bb44      	cbnz	r4, 800b0f8 <_malloc_r+0x88>
 800b0a6:	4629      	mov	r1, r5
 800b0a8:	4630      	mov	r0, r6
 800b0aa:	f7ff ffbf 	bl	800b02c <sbrk_aligned>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	d158      	bne.n	800b166 <_malloc_r+0xf6>
 800b0b4:	f8d8 4000 	ldr.w	r4, [r8]
 800b0b8:	4627      	mov	r7, r4
 800b0ba:	2f00      	cmp	r7, #0
 800b0bc:	d143      	bne.n	800b146 <_malloc_r+0xd6>
 800b0be:	2c00      	cmp	r4, #0
 800b0c0:	d04b      	beq.n	800b15a <_malloc_r+0xea>
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	eb04 0903 	add.w	r9, r4, r3
 800b0cc:	f000 fb6e 	bl	800b7ac <_sbrk_r>
 800b0d0:	4581      	cmp	r9, r0
 800b0d2:	d142      	bne.n	800b15a <_malloc_r+0xea>
 800b0d4:	6821      	ldr	r1, [r4, #0]
 800b0d6:	1a6d      	subs	r5, r5, r1
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7ff ffa6 	bl	800b02c <sbrk_aligned>
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d03a      	beq.n	800b15a <_malloc_r+0xea>
 800b0e4:	6823      	ldr	r3, [r4, #0]
 800b0e6:	442b      	add	r3, r5
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	f8d8 3000 	ldr.w	r3, [r8]
 800b0ee:	685a      	ldr	r2, [r3, #4]
 800b0f0:	bb62      	cbnz	r2, 800b14c <_malloc_r+0xdc>
 800b0f2:	f8c8 7000 	str.w	r7, [r8]
 800b0f6:	e00f      	b.n	800b118 <_malloc_r+0xa8>
 800b0f8:	6822      	ldr	r2, [r4, #0]
 800b0fa:	1b52      	subs	r2, r2, r5
 800b0fc:	d420      	bmi.n	800b140 <_malloc_r+0xd0>
 800b0fe:	2a0b      	cmp	r2, #11
 800b100:	d917      	bls.n	800b132 <_malloc_r+0xc2>
 800b102:	1961      	adds	r1, r4, r5
 800b104:	42a3      	cmp	r3, r4
 800b106:	6025      	str	r5, [r4, #0]
 800b108:	bf18      	it	ne
 800b10a:	6059      	strne	r1, [r3, #4]
 800b10c:	6863      	ldr	r3, [r4, #4]
 800b10e:	bf08      	it	eq
 800b110:	f8c8 1000 	streq.w	r1, [r8]
 800b114:	5162      	str	r2, [r4, r5]
 800b116:	604b      	str	r3, [r1, #4]
 800b118:	4630      	mov	r0, r6
 800b11a:	f000 f82f 	bl	800b17c <__malloc_unlock>
 800b11e:	f104 000b 	add.w	r0, r4, #11
 800b122:	1d23      	adds	r3, r4, #4
 800b124:	f020 0007 	bic.w	r0, r0, #7
 800b128:	1ac2      	subs	r2, r0, r3
 800b12a:	bf1c      	itt	ne
 800b12c:	1a1b      	subne	r3, r3, r0
 800b12e:	50a3      	strne	r3, [r4, r2]
 800b130:	e7af      	b.n	800b092 <_malloc_r+0x22>
 800b132:	6862      	ldr	r2, [r4, #4]
 800b134:	42a3      	cmp	r3, r4
 800b136:	bf0c      	ite	eq
 800b138:	f8c8 2000 	streq.w	r2, [r8]
 800b13c:	605a      	strne	r2, [r3, #4]
 800b13e:	e7eb      	b.n	800b118 <_malloc_r+0xa8>
 800b140:	4623      	mov	r3, r4
 800b142:	6864      	ldr	r4, [r4, #4]
 800b144:	e7ae      	b.n	800b0a4 <_malloc_r+0x34>
 800b146:	463c      	mov	r4, r7
 800b148:	687f      	ldr	r7, [r7, #4]
 800b14a:	e7b6      	b.n	800b0ba <_malloc_r+0x4a>
 800b14c:	461a      	mov	r2, r3
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	42a3      	cmp	r3, r4
 800b152:	d1fb      	bne.n	800b14c <_malloc_r+0xdc>
 800b154:	2300      	movs	r3, #0
 800b156:	6053      	str	r3, [r2, #4]
 800b158:	e7de      	b.n	800b118 <_malloc_r+0xa8>
 800b15a:	230c      	movs	r3, #12
 800b15c:	6033      	str	r3, [r6, #0]
 800b15e:	4630      	mov	r0, r6
 800b160:	f000 f80c 	bl	800b17c <__malloc_unlock>
 800b164:	e794      	b.n	800b090 <_malloc_r+0x20>
 800b166:	6005      	str	r5, [r0, #0]
 800b168:	e7d6      	b.n	800b118 <_malloc_r+0xa8>
 800b16a:	bf00      	nop
 800b16c:	200009b8 	.word	0x200009b8

0800b170 <__malloc_lock>:
 800b170:	4801      	ldr	r0, [pc, #4]	@ (800b178 <__malloc_lock+0x8>)
 800b172:	f000 bb68 	b.w	800b846 <__retarget_lock_acquire_recursive>
 800b176:	bf00      	nop
 800b178:	20000afc 	.word	0x20000afc

0800b17c <__malloc_unlock>:
 800b17c:	4801      	ldr	r0, [pc, #4]	@ (800b184 <__malloc_unlock+0x8>)
 800b17e:	f000 bb63 	b.w	800b848 <__retarget_lock_release_recursive>
 800b182:	bf00      	nop
 800b184:	20000afc 	.word	0x20000afc

0800b188 <std>:
 800b188:	2300      	movs	r3, #0
 800b18a:	b510      	push	{r4, lr}
 800b18c:	4604      	mov	r4, r0
 800b18e:	e9c0 3300 	strd	r3, r3, [r0]
 800b192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b196:	6083      	str	r3, [r0, #8]
 800b198:	8181      	strh	r1, [r0, #12]
 800b19a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b19c:	81c2      	strh	r2, [r0, #14]
 800b19e:	6183      	str	r3, [r0, #24]
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	2208      	movs	r2, #8
 800b1a4:	305c      	adds	r0, #92	@ 0x5c
 800b1a6:	f000 fac5 	bl	800b734 <memset>
 800b1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e0 <std+0x58>)
 800b1ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800b1ae:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e4 <std+0x5c>)
 800b1b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e8 <std+0x60>)
 800b1b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b1b6:	4b0d      	ldr	r3, [pc, #52]	@ (800b1ec <std+0x64>)
 800b1b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b1f0 <std+0x68>)
 800b1bc:	6224      	str	r4, [r4, #32]
 800b1be:	429c      	cmp	r4, r3
 800b1c0:	d006      	beq.n	800b1d0 <std+0x48>
 800b1c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b1c6:	4294      	cmp	r4, r2
 800b1c8:	d002      	beq.n	800b1d0 <std+0x48>
 800b1ca:	33d0      	adds	r3, #208	@ 0xd0
 800b1cc:	429c      	cmp	r4, r3
 800b1ce:	d105      	bne.n	800b1dc <std+0x54>
 800b1d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1d8:	f000 bb34 	b.w	800b844 <__retarget_lock_init_recursive>
 800b1dc:	bd10      	pop	{r4, pc}
 800b1de:	bf00      	nop
 800b1e0:	0800b565 	.word	0x0800b565
 800b1e4:	0800b587 	.word	0x0800b587
 800b1e8:	0800b5bf 	.word	0x0800b5bf
 800b1ec:	0800b5e3 	.word	0x0800b5e3
 800b1f0:	200009bc 	.word	0x200009bc

0800b1f4 <stdio_exit_handler>:
 800b1f4:	4a02      	ldr	r2, [pc, #8]	@ (800b200 <stdio_exit_handler+0xc>)
 800b1f6:	4903      	ldr	r1, [pc, #12]	@ (800b204 <stdio_exit_handler+0x10>)
 800b1f8:	4803      	ldr	r0, [pc, #12]	@ (800b208 <stdio_exit_handler+0x14>)
 800b1fa:	f000 b869 	b.w	800b2d0 <_fwalk_sglue>
 800b1fe:	bf00      	nop
 800b200:	2000002c 	.word	0x2000002c
 800b204:	0800bfa1 	.word	0x0800bfa1
 800b208:	2000003c 	.word	0x2000003c

0800b20c <cleanup_stdio>:
 800b20c:	6841      	ldr	r1, [r0, #4]
 800b20e:	4b0c      	ldr	r3, [pc, #48]	@ (800b240 <cleanup_stdio+0x34>)
 800b210:	4299      	cmp	r1, r3
 800b212:	b510      	push	{r4, lr}
 800b214:	4604      	mov	r4, r0
 800b216:	d001      	beq.n	800b21c <cleanup_stdio+0x10>
 800b218:	f000 fec2 	bl	800bfa0 <_fflush_r>
 800b21c:	68a1      	ldr	r1, [r4, #8]
 800b21e:	4b09      	ldr	r3, [pc, #36]	@ (800b244 <cleanup_stdio+0x38>)
 800b220:	4299      	cmp	r1, r3
 800b222:	d002      	beq.n	800b22a <cleanup_stdio+0x1e>
 800b224:	4620      	mov	r0, r4
 800b226:	f000 febb 	bl	800bfa0 <_fflush_r>
 800b22a:	68e1      	ldr	r1, [r4, #12]
 800b22c:	4b06      	ldr	r3, [pc, #24]	@ (800b248 <cleanup_stdio+0x3c>)
 800b22e:	4299      	cmp	r1, r3
 800b230:	d004      	beq.n	800b23c <cleanup_stdio+0x30>
 800b232:	4620      	mov	r0, r4
 800b234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b238:	f000 beb2 	b.w	800bfa0 <_fflush_r>
 800b23c:	bd10      	pop	{r4, pc}
 800b23e:	bf00      	nop
 800b240:	200009bc 	.word	0x200009bc
 800b244:	20000a24 	.word	0x20000a24
 800b248:	20000a8c 	.word	0x20000a8c

0800b24c <global_stdio_init.part.0>:
 800b24c:	b510      	push	{r4, lr}
 800b24e:	4b0b      	ldr	r3, [pc, #44]	@ (800b27c <global_stdio_init.part.0+0x30>)
 800b250:	4c0b      	ldr	r4, [pc, #44]	@ (800b280 <global_stdio_init.part.0+0x34>)
 800b252:	4a0c      	ldr	r2, [pc, #48]	@ (800b284 <global_stdio_init.part.0+0x38>)
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	4620      	mov	r0, r4
 800b258:	2200      	movs	r2, #0
 800b25a:	2104      	movs	r1, #4
 800b25c:	f7ff ff94 	bl	800b188 <std>
 800b260:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b264:	2201      	movs	r2, #1
 800b266:	2109      	movs	r1, #9
 800b268:	f7ff ff8e 	bl	800b188 <std>
 800b26c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b270:	2202      	movs	r2, #2
 800b272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b276:	2112      	movs	r1, #18
 800b278:	f7ff bf86 	b.w	800b188 <std>
 800b27c:	20000af4 	.word	0x20000af4
 800b280:	200009bc 	.word	0x200009bc
 800b284:	0800b1f5 	.word	0x0800b1f5

0800b288 <__sfp_lock_acquire>:
 800b288:	4801      	ldr	r0, [pc, #4]	@ (800b290 <__sfp_lock_acquire+0x8>)
 800b28a:	f000 badc 	b.w	800b846 <__retarget_lock_acquire_recursive>
 800b28e:	bf00      	nop
 800b290:	20000afd 	.word	0x20000afd

0800b294 <__sfp_lock_release>:
 800b294:	4801      	ldr	r0, [pc, #4]	@ (800b29c <__sfp_lock_release+0x8>)
 800b296:	f000 bad7 	b.w	800b848 <__retarget_lock_release_recursive>
 800b29a:	bf00      	nop
 800b29c:	20000afd 	.word	0x20000afd

0800b2a0 <__sinit>:
 800b2a0:	b510      	push	{r4, lr}
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	f7ff fff0 	bl	800b288 <__sfp_lock_acquire>
 800b2a8:	6a23      	ldr	r3, [r4, #32]
 800b2aa:	b11b      	cbz	r3, 800b2b4 <__sinit+0x14>
 800b2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2b0:	f7ff bff0 	b.w	800b294 <__sfp_lock_release>
 800b2b4:	4b04      	ldr	r3, [pc, #16]	@ (800b2c8 <__sinit+0x28>)
 800b2b6:	6223      	str	r3, [r4, #32]
 800b2b8:	4b04      	ldr	r3, [pc, #16]	@ (800b2cc <__sinit+0x2c>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1f5      	bne.n	800b2ac <__sinit+0xc>
 800b2c0:	f7ff ffc4 	bl	800b24c <global_stdio_init.part.0>
 800b2c4:	e7f2      	b.n	800b2ac <__sinit+0xc>
 800b2c6:	bf00      	nop
 800b2c8:	0800b20d 	.word	0x0800b20d
 800b2cc:	20000af4 	.word	0x20000af4

0800b2d0 <_fwalk_sglue>:
 800b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	4607      	mov	r7, r0
 800b2d6:	4688      	mov	r8, r1
 800b2d8:	4614      	mov	r4, r2
 800b2da:	2600      	movs	r6, #0
 800b2dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2e0:	f1b9 0901 	subs.w	r9, r9, #1
 800b2e4:	d505      	bpl.n	800b2f2 <_fwalk_sglue+0x22>
 800b2e6:	6824      	ldr	r4, [r4, #0]
 800b2e8:	2c00      	cmp	r4, #0
 800b2ea:	d1f7      	bne.n	800b2dc <_fwalk_sglue+0xc>
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2f2:	89ab      	ldrh	r3, [r5, #12]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d907      	bls.n	800b308 <_fwalk_sglue+0x38>
 800b2f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	d003      	beq.n	800b308 <_fwalk_sglue+0x38>
 800b300:	4629      	mov	r1, r5
 800b302:	4638      	mov	r0, r7
 800b304:	47c0      	blx	r8
 800b306:	4306      	orrs	r6, r0
 800b308:	3568      	adds	r5, #104	@ 0x68
 800b30a:	e7e9      	b.n	800b2e0 <_fwalk_sglue+0x10>

0800b30c <iprintf>:
 800b30c:	b40f      	push	{r0, r1, r2, r3}
 800b30e:	b507      	push	{r0, r1, r2, lr}
 800b310:	4906      	ldr	r1, [pc, #24]	@ (800b32c <iprintf+0x20>)
 800b312:	ab04      	add	r3, sp, #16
 800b314:	6808      	ldr	r0, [r1, #0]
 800b316:	f853 2b04 	ldr.w	r2, [r3], #4
 800b31a:	6881      	ldr	r1, [r0, #8]
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	f000 fb17 	bl	800b950 <_vfiprintf_r>
 800b322:	b003      	add	sp, #12
 800b324:	f85d eb04 	ldr.w	lr, [sp], #4
 800b328:	b004      	add	sp, #16
 800b32a:	4770      	bx	lr
 800b32c:	20000038 	.word	0x20000038

0800b330 <putchar>:
 800b330:	4b02      	ldr	r3, [pc, #8]	@ (800b33c <putchar+0xc>)
 800b332:	4601      	mov	r1, r0
 800b334:	6818      	ldr	r0, [r3, #0]
 800b336:	6882      	ldr	r2, [r0, #8]
 800b338:	f000 bebc 	b.w	800c0b4 <_putc_r>
 800b33c:	20000038 	.word	0x20000038

0800b340 <_puts_r>:
 800b340:	6a03      	ldr	r3, [r0, #32]
 800b342:	b570      	push	{r4, r5, r6, lr}
 800b344:	6884      	ldr	r4, [r0, #8]
 800b346:	4605      	mov	r5, r0
 800b348:	460e      	mov	r6, r1
 800b34a:	b90b      	cbnz	r3, 800b350 <_puts_r+0x10>
 800b34c:	f7ff ffa8 	bl	800b2a0 <__sinit>
 800b350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b352:	07db      	lsls	r3, r3, #31
 800b354:	d405      	bmi.n	800b362 <_puts_r+0x22>
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	0598      	lsls	r0, r3, #22
 800b35a:	d402      	bmi.n	800b362 <_puts_r+0x22>
 800b35c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b35e:	f000 fa72 	bl	800b846 <__retarget_lock_acquire_recursive>
 800b362:	89a3      	ldrh	r3, [r4, #12]
 800b364:	0719      	lsls	r1, r3, #28
 800b366:	d502      	bpl.n	800b36e <_puts_r+0x2e>
 800b368:	6923      	ldr	r3, [r4, #16]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d135      	bne.n	800b3da <_puts_r+0x9a>
 800b36e:	4621      	mov	r1, r4
 800b370:	4628      	mov	r0, r5
 800b372:	f000 f979 	bl	800b668 <__swsetup_r>
 800b376:	b380      	cbz	r0, 800b3da <_puts_r+0x9a>
 800b378:	f04f 35ff 	mov.w	r5, #4294967295
 800b37c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b37e:	07da      	lsls	r2, r3, #31
 800b380:	d405      	bmi.n	800b38e <_puts_r+0x4e>
 800b382:	89a3      	ldrh	r3, [r4, #12]
 800b384:	059b      	lsls	r3, r3, #22
 800b386:	d402      	bmi.n	800b38e <_puts_r+0x4e>
 800b388:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b38a:	f000 fa5d 	bl	800b848 <__retarget_lock_release_recursive>
 800b38e:	4628      	mov	r0, r5
 800b390:	bd70      	pop	{r4, r5, r6, pc}
 800b392:	2b00      	cmp	r3, #0
 800b394:	da04      	bge.n	800b3a0 <_puts_r+0x60>
 800b396:	69a2      	ldr	r2, [r4, #24]
 800b398:	429a      	cmp	r2, r3
 800b39a:	dc17      	bgt.n	800b3cc <_puts_r+0x8c>
 800b39c:	290a      	cmp	r1, #10
 800b39e:	d015      	beq.n	800b3cc <_puts_r+0x8c>
 800b3a0:	6823      	ldr	r3, [r4, #0]
 800b3a2:	1c5a      	adds	r2, r3, #1
 800b3a4:	6022      	str	r2, [r4, #0]
 800b3a6:	7019      	strb	r1, [r3, #0]
 800b3a8:	68a3      	ldr	r3, [r4, #8]
 800b3aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	60a3      	str	r3, [r4, #8]
 800b3b2:	2900      	cmp	r1, #0
 800b3b4:	d1ed      	bne.n	800b392 <_puts_r+0x52>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	da11      	bge.n	800b3de <_puts_r+0x9e>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	210a      	movs	r1, #10
 800b3be:	4628      	mov	r0, r5
 800b3c0:	f000 f913 	bl	800b5ea <__swbuf_r>
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d0d7      	beq.n	800b378 <_puts_r+0x38>
 800b3c8:	250a      	movs	r5, #10
 800b3ca:	e7d7      	b.n	800b37c <_puts_r+0x3c>
 800b3cc:	4622      	mov	r2, r4
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f000 f90b 	bl	800b5ea <__swbuf_r>
 800b3d4:	3001      	adds	r0, #1
 800b3d6:	d1e7      	bne.n	800b3a8 <_puts_r+0x68>
 800b3d8:	e7ce      	b.n	800b378 <_puts_r+0x38>
 800b3da:	3e01      	subs	r6, #1
 800b3dc:	e7e4      	b.n	800b3a8 <_puts_r+0x68>
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	1c5a      	adds	r2, r3, #1
 800b3e2:	6022      	str	r2, [r4, #0]
 800b3e4:	220a      	movs	r2, #10
 800b3e6:	701a      	strb	r2, [r3, #0]
 800b3e8:	e7ee      	b.n	800b3c8 <_puts_r+0x88>
	...

0800b3ec <puts>:
 800b3ec:	4b02      	ldr	r3, [pc, #8]	@ (800b3f8 <puts+0xc>)
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	f7ff bfa5 	b.w	800b340 <_puts_r>
 800b3f6:	bf00      	nop
 800b3f8:	20000038 	.word	0x20000038

0800b3fc <setvbuf>:
 800b3fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b400:	461d      	mov	r5, r3
 800b402:	4b57      	ldr	r3, [pc, #348]	@ (800b560 <setvbuf+0x164>)
 800b404:	681f      	ldr	r7, [r3, #0]
 800b406:	4604      	mov	r4, r0
 800b408:	460e      	mov	r6, r1
 800b40a:	4690      	mov	r8, r2
 800b40c:	b127      	cbz	r7, 800b418 <setvbuf+0x1c>
 800b40e:	6a3b      	ldr	r3, [r7, #32]
 800b410:	b913      	cbnz	r3, 800b418 <setvbuf+0x1c>
 800b412:	4638      	mov	r0, r7
 800b414:	f7ff ff44 	bl	800b2a0 <__sinit>
 800b418:	f1b8 0f02 	cmp.w	r8, #2
 800b41c:	d006      	beq.n	800b42c <setvbuf+0x30>
 800b41e:	f1b8 0f01 	cmp.w	r8, #1
 800b422:	f200 809a 	bhi.w	800b55a <setvbuf+0x15e>
 800b426:	2d00      	cmp	r5, #0
 800b428:	f2c0 8097 	blt.w	800b55a <setvbuf+0x15e>
 800b42c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b42e:	07d9      	lsls	r1, r3, #31
 800b430:	d405      	bmi.n	800b43e <setvbuf+0x42>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	059a      	lsls	r2, r3, #22
 800b436:	d402      	bmi.n	800b43e <setvbuf+0x42>
 800b438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b43a:	f000 fa04 	bl	800b846 <__retarget_lock_acquire_recursive>
 800b43e:	4621      	mov	r1, r4
 800b440:	4638      	mov	r0, r7
 800b442:	f000 fdad 	bl	800bfa0 <_fflush_r>
 800b446:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b448:	b141      	cbz	r1, 800b45c <setvbuf+0x60>
 800b44a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b44e:	4299      	cmp	r1, r3
 800b450:	d002      	beq.n	800b458 <setvbuf+0x5c>
 800b452:	4638      	mov	r0, r7
 800b454:	f000 fa08 	bl	800b868 <_free_r>
 800b458:	2300      	movs	r3, #0
 800b45a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b45c:	2300      	movs	r3, #0
 800b45e:	61a3      	str	r3, [r4, #24]
 800b460:	6063      	str	r3, [r4, #4]
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	061b      	lsls	r3, r3, #24
 800b466:	d503      	bpl.n	800b470 <setvbuf+0x74>
 800b468:	6921      	ldr	r1, [r4, #16]
 800b46a:	4638      	mov	r0, r7
 800b46c:	f000 f9fc 	bl	800b868 <_free_r>
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b476:	f023 0303 	bic.w	r3, r3, #3
 800b47a:	f1b8 0f02 	cmp.w	r8, #2
 800b47e:	81a3      	strh	r3, [r4, #12]
 800b480:	d061      	beq.n	800b546 <setvbuf+0x14a>
 800b482:	ab01      	add	r3, sp, #4
 800b484:	466a      	mov	r2, sp
 800b486:	4621      	mov	r1, r4
 800b488:	4638      	mov	r0, r7
 800b48a:	f000 fdb1 	bl	800bff0 <__swhatbuf_r>
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	4318      	orrs	r0, r3
 800b492:	81a0      	strh	r0, [r4, #12]
 800b494:	bb2d      	cbnz	r5, 800b4e2 <setvbuf+0xe6>
 800b496:	9d00      	ldr	r5, [sp, #0]
 800b498:	4628      	mov	r0, r5
 800b49a:	f7ff fdb7 	bl	800b00c <malloc>
 800b49e:	4606      	mov	r6, r0
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d152      	bne.n	800b54a <setvbuf+0x14e>
 800b4a4:	f8dd 9000 	ldr.w	r9, [sp]
 800b4a8:	45a9      	cmp	r9, r5
 800b4aa:	d140      	bne.n	800b52e <setvbuf+0x132>
 800b4ac:	f04f 35ff 	mov.w	r5, #4294967295
 800b4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4b4:	f043 0202 	orr.w	r2, r3, #2
 800b4b8:	81a2      	strh	r2, [r4, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	60a2      	str	r2, [r4, #8]
 800b4be:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b4c2:	6022      	str	r2, [r4, #0]
 800b4c4:	6122      	str	r2, [r4, #16]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	6162      	str	r2, [r4, #20]
 800b4ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4cc:	07d6      	lsls	r6, r2, #31
 800b4ce:	d404      	bmi.n	800b4da <setvbuf+0xde>
 800b4d0:	0598      	lsls	r0, r3, #22
 800b4d2:	d402      	bmi.n	800b4da <setvbuf+0xde>
 800b4d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4d6:	f000 f9b7 	bl	800b848 <__retarget_lock_release_recursive>
 800b4da:	4628      	mov	r0, r5
 800b4dc:	b003      	add	sp, #12
 800b4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4e2:	2e00      	cmp	r6, #0
 800b4e4:	d0d8      	beq.n	800b498 <setvbuf+0x9c>
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	b913      	cbnz	r3, 800b4f0 <setvbuf+0xf4>
 800b4ea:	4638      	mov	r0, r7
 800b4ec:	f7ff fed8 	bl	800b2a0 <__sinit>
 800b4f0:	f1b8 0f01 	cmp.w	r8, #1
 800b4f4:	bf08      	it	eq
 800b4f6:	89a3      	ldrheq	r3, [r4, #12]
 800b4f8:	6026      	str	r6, [r4, #0]
 800b4fa:	bf04      	itt	eq
 800b4fc:	f043 0301 	orreq.w	r3, r3, #1
 800b500:	81a3      	strheq	r3, [r4, #12]
 800b502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b506:	f013 0208 	ands.w	r2, r3, #8
 800b50a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b50e:	d01e      	beq.n	800b54e <setvbuf+0x152>
 800b510:	07d9      	lsls	r1, r3, #31
 800b512:	bf41      	itttt	mi
 800b514:	2200      	movmi	r2, #0
 800b516:	426d      	negmi	r5, r5
 800b518:	60a2      	strmi	r2, [r4, #8]
 800b51a:	61a5      	strmi	r5, [r4, #24]
 800b51c:	bf58      	it	pl
 800b51e:	60a5      	strpl	r5, [r4, #8]
 800b520:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b522:	07d2      	lsls	r2, r2, #31
 800b524:	d401      	bmi.n	800b52a <setvbuf+0x12e>
 800b526:	059b      	lsls	r3, r3, #22
 800b528:	d513      	bpl.n	800b552 <setvbuf+0x156>
 800b52a:	2500      	movs	r5, #0
 800b52c:	e7d5      	b.n	800b4da <setvbuf+0xde>
 800b52e:	4648      	mov	r0, r9
 800b530:	f7ff fd6c 	bl	800b00c <malloc>
 800b534:	4606      	mov	r6, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	d0b8      	beq.n	800b4ac <setvbuf+0xb0>
 800b53a:	89a3      	ldrh	r3, [r4, #12]
 800b53c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b540:	81a3      	strh	r3, [r4, #12]
 800b542:	464d      	mov	r5, r9
 800b544:	e7cf      	b.n	800b4e6 <setvbuf+0xea>
 800b546:	2500      	movs	r5, #0
 800b548:	e7b2      	b.n	800b4b0 <setvbuf+0xb4>
 800b54a:	46a9      	mov	r9, r5
 800b54c:	e7f5      	b.n	800b53a <setvbuf+0x13e>
 800b54e:	60a2      	str	r2, [r4, #8]
 800b550:	e7e6      	b.n	800b520 <setvbuf+0x124>
 800b552:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b554:	f000 f978 	bl	800b848 <__retarget_lock_release_recursive>
 800b558:	e7e7      	b.n	800b52a <setvbuf+0x12e>
 800b55a:	f04f 35ff 	mov.w	r5, #4294967295
 800b55e:	e7bc      	b.n	800b4da <setvbuf+0xde>
 800b560:	20000038 	.word	0x20000038

0800b564 <__sread>:
 800b564:	b510      	push	{r4, lr}
 800b566:	460c      	mov	r4, r1
 800b568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b56c:	f000 f90c 	bl	800b788 <_read_r>
 800b570:	2800      	cmp	r0, #0
 800b572:	bfab      	itete	ge
 800b574:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b576:	89a3      	ldrhlt	r3, [r4, #12]
 800b578:	181b      	addge	r3, r3, r0
 800b57a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b57e:	bfac      	ite	ge
 800b580:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b582:	81a3      	strhlt	r3, [r4, #12]
 800b584:	bd10      	pop	{r4, pc}

0800b586 <__swrite>:
 800b586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b58a:	461f      	mov	r7, r3
 800b58c:	898b      	ldrh	r3, [r1, #12]
 800b58e:	05db      	lsls	r3, r3, #23
 800b590:	4605      	mov	r5, r0
 800b592:	460c      	mov	r4, r1
 800b594:	4616      	mov	r6, r2
 800b596:	d505      	bpl.n	800b5a4 <__swrite+0x1e>
 800b598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59c:	2302      	movs	r3, #2
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f000 f8e0 	bl	800b764 <_lseek_r>
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b5ae:	81a3      	strh	r3, [r4, #12]
 800b5b0:	4632      	mov	r2, r6
 800b5b2:	463b      	mov	r3, r7
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ba:	f000 b907 	b.w	800b7cc <_write_r>

0800b5be <__sseek>:
 800b5be:	b510      	push	{r4, lr}
 800b5c0:	460c      	mov	r4, r1
 800b5c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5c6:	f000 f8cd 	bl	800b764 <_lseek_r>
 800b5ca:	1c43      	adds	r3, r0, #1
 800b5cc:	89a3      	ldrh	r3, [r4, #12]
 800b5ce:	bf15      	itete	ne
 800b5d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5da:	81a3      	strheq	r3, [r4, #12]
 800b5dc:	bf18      	it	ne
 800b5de:	81a3      	strhne	r3, [r4, #12]
 800b5e0:	bd10      	pop	{r4, pc}

0800b5e2 <__sclose>:
 800b5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5e6:	f000 b8ad 	b.w	800b744 <_close_r>

0800b5ea <__swbuf_r>:
 800b5ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ec:	460e      	mov	r6, r1
 800b5ee:	4614      	mov	r4, r2
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	b118      	cbz	r0, 800b5fc <__swbuf_r+0x12>
 800b5f4:	6a03      	ldr	r3, [r0, #32]
 800b5f6:	b90b      	cbnz	r3, 800b5fc <__swbuf_r+0x12>
 800b5f8:	f7ff fe52 	bl	800b2a0 <__sinit>
 800b5fc:	69a3      	ldr	r3, [r4, #24]
 800b5fe:	60a3      	str	r3, [r4, #8]
 800b600:	89a3      	ldrh	r3, [r4, #12]
 800b602:	071a      	lsls	r2, r3, #28
 800b604:	d501      	bpl.n	800b60a <__swbuf_r+0x20>
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	b943      	cbnz	r3, 800b61c <__swbuf_r+0x32>
 800b60a:	4621      	mov	r1, r4
 800b60c:	4628      	mov	r0, r5
 800b60e:	f000 f82b 	bl	800b668 <__swsetup_r>
 800b612:	b118      	cbz	r0, 800b61c <__swbuf_r+0x32>
 800b614:	f04f 37ff 	mov.w	r7, #4294967295
 800b618:	4638      	mov	r0, r7
 800b61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b61c:	6823      	ldr	r3, [r4, #0]
 800b61e:	6922      	ldr	r2, [r4, #16]
 800b620:	1a98      	subs	r0, r3, r2
 800b622:	6963      	ldr	r3, [r4, #20]
 800b624:	b2f6      	uxtb	r6, r6
 800b626:	4283      	cmp	r3, r0
 800b628:	4637      	mov	r7, r6
 800b62a:	dc05      	bgt.n	800b638 <__swbuf_r+0x4e>
 800b62c:	4621      	mov	r1, r4
 800b62e:	4628      	mov	r0, r5
 800b630:	f000 fcb6 	bl	800bfa0 <_fflush_r>
 800b634:	2800      	cmp	r0, #0
 800b636:	d1ed      	bne.n	800b614 <__swbuf_r+0x2a>
 800b638:	68a3      	ldr	r3, [r4, #8]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	60a3      	str	r3, [r4, #8]
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	6022      	str	r2, [r4, #0]
 800b644:	701e      	strb	r6, [r3, #0]
 800b646:	6962      	ldr	r2, [r4, #20]
 800b648:	1c43      	adds	r3, r0, #1
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d004      	beq.n	800b658 <__swbuf_r+0x6e>
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	07db      	lsls	r3, r3, #31
 800b652:	d5e1      	bpl.n	800b618 <__swbuf_r+0x2e>
 800b654:	2e0a      	cmp	r6, #10
 800b656:	d1df      	bne.n	800b618 <__swbuf_r+0x2e>
 800b658:	4621      	mov	r1, r4
 800b65a:	4628      	mov	r0, r5
 800b65c:	f000 fca0 	bl	800bfa0 <_fflush_r>
 800b660:	2800      	cmp	r0, #0
 800b662:	d0d9      	beq.n	800b618 <__swbuf_r+0x2e>
 800b664:	e7d6      	b.n	800b614 <__swbuf_r+0x2a>
	...

0800b668 <__swsetup_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4b29      	ldr	r3, [pc, #164]	@ (800b710 <__swsetup_r+0xa8>)
 800b66c:	4605      	mov	r5, r0
 800b66e:	6818      	ldr	r0, [r3, #0]
 800b670:	460c      	mov	r4, r1
 800b672:	b118      	cbz	r0, 800b67c <__swsetup_r+0x14>
 800b674:	6a03      	ldr	r3, [r0, #32]
 800b676:	b90b      	cbnz	r3, 800b67c <__swsetup_r+0x14>
 800b678:	f7ff fe12 	bl	800b2a0 <__sinit>
 800b67c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b680:	0719      	lsls	r1, r3, #28
 800b682:	d422      	bmi.n	800b6ca <__swsetup_r+0x62>
 800b684:	06da      	lsls	r2, r3, #27
 800b686:	d407      	bmi.n	800b698 <__swsetup_r+0x30>
 800b688:	2209      	movs	r2, #9
 800b68a:	602a      	str	r2, [r5, #0]
 800b68c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b690:	81a3      	strh	r3, [r4, #12]
 800b692:	f04f 30ff 	mov.w	r0, #4294967295
 800b696:	e033      	b.n	800b700 <__swsetup_r+0x98>
 800b698:	0758      	lsls	r0, r3, #29
 800b69a:	d512      	bpl.n	800b6c2 <__swsetup_r+0x5a>
 800b69c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b69e:	b141      	cbz	r1, 800b6b2 <__swsetup_r+0x4a>
 800b6a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6a4:	4299      	cmp	r1, r3
 800b6a6:	d002      	beq.n	800b6ae <__swsetup_r+0x46>
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f000 f8dd 	bl	800b868 <_free_r>
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6b2:	89a3      	ldrh	r3, [r4, #12]
 800b6b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6b8:	81a3      	strh	r3, [r4, #12]
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	6063      	str	r3, [r4, #4]
 800b6be:	6923      	ldr	r3, [r4, #16]
 800b6c0:	6023      	str	r3, [r4, #0]
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	f043 0308 	orr.w	r3, r3, #8
 800b6c8:	81a3      	strh	r3, [r4, #12]
 800b6ca:	6923      	ldr	r3, [r4, #16]
 800b6cc:	b94b      	cbnz	r3, 800b6e2 <__swsetup_r+0x7a>
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6d8:	d003      	beq.n	800b6e2 <__swsetup_r+0x7a>
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f000 fcad 	bl	800c03c <__smakebuf_r>
 800b6e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e6:	f013 0201 	ands.w	r2, r3, #1
 800b6ea:	d00a      	beq.n	800b702 <__swsetup_r+0x9a>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	60a2      	str	r2, [r4, #8]
 800b6f0:	6962      	ldr	r2, [r4, #20]
 800b6f2:	4252      	negs	r2, r2
 800b6f4:	61a2      	str	r2, [r4, #24]
 800b6f6:	6922      	ldr	r2, [r4, #16]
 800b6f8:	b942      	cbnz	r2, 800b70c <__swsetup_r+0xa4>
 800b6fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6fe:	d1c5      	bne.n	800b68c <__swsetup_r+0x24>
 800b700:	bd38      	pop	{r3, r4, r5, pc}
 800b702:	0799      	lsls	r1, r3, #30
 800b704:	bf58      	it	pl
 800b706:	6962      	ldrpl	r2, [r4, #20]
 800b708:	60a2      	str	r2, [r4, #8]
 800b70a:	e7f4      	b.n	800b6f6 <__swsetup_r+0x8e>
 800b70c:	2000      	movs	r0, #0
 800b70e:	e7f7      	b.n	800b700 <__swsetup_r+0x98>
 800b710:	20000038 	.word	0x20000038

0800b714 <memcmp>:
 800b714:	b510      	push	{r4, lr}
 800b716:	3901      	subs	r1, #1
 800b718:	4402      	add	r2, r0
 800b71a:	4290      	cmp	r0, r2
 800b71c:	d101      	bne.n	800b722 <memcmp+0xe>
 800b71e:	2000      	movs	r0, #0
 800b720:	e005      	b.n	800b72e <memcmp+0x1a>
 800b722:	7803      	ldrb	r3, [r0, #0]
 800b724:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b728:	42a3      	cmp	r3, r4
 800b72a:	d001      	beq.n	800b730 <memcmp+0x1c>
 800b72c:	1b18      	subs	r0, r3, r4
 800b72e:	bd10      	pop	{r4, pc}
 800b730:	3001      	adds	r0, #1
 800b732:	e7f2      	b.n	800b71a <memcmp+0x6>

0800b734 <memset>:
 800b734:	4402      	add	r2, r0
 800b736:	4603      	mov	r3, r0
 800b738:	4293      	cmp	r3, r2
 800b73a:	d100      	bne.n	800b73e <memset+0xa>
 800b73c:	4770      	bx	lr
 800b73e:	f803 1b01 	strb.w	r1, [r3], #1
 800b742:	e7f9      	b.n	800b738 <memset+0x4>

0800b744 <_close_r>:
 800b744:	b538      	push	{r3, r4, r5, lr}
 800b746:	4d06      	ldr	r5, [pc, #24]	@ (800b760 <_close_r+0x1c>)
 800b748:	2300      	movs	r3, #0
 800b74a:	4604      	mov	r4, r0
 800b74c:	4608      	mov	r0, r1
 800b74e:	602b      	str	r3, [r5, #0]
 800b750:	f7f7 f959 	bl	8002a06 <_close>
 800b754:	1c43      	adds	r3, r0, #1
 800b756:	d102      	bne.n	800b75e <_close_r+0x1a>
 800b758:	682b      	ldr	r3, [r5, #0]
 800b75a:	b103      	cbz	r3, 800b75e <_close_r+0x1a>
 800b75c:	6023      	str	r3, [r4, #0]
 800b75e:	bd38      	pop	{r3, r4, r5, pc}
 800b760:	20000af8 	.word	0x20000af8

0800b764 <_lseek_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d07      	ldr	r5, [pc, #28]	@ (800b784 <_lseek_r+0x20>)
 800b768:	4604      	mov	r4, r0
 800b76a:	4608      	mov	r0, r1
 800b76c:	4611      	mov	r1, r2
 800b76e:	2200      	movs	r2, #0
 800b770:	602a      	str	r2, [r5, #0]
 800b772:	461a      	mov	r2, r3
 800b774:	f7f7 f96e 	bl	8002a54 <_lseek>
 800b778:	1c43      	adds	r3, r0, #1
 800b77a:	d102      	bne.n	800b782 <_lseek_r+0x1e>
 800b77c:	682b      	ldr	r3, [r5, #0]
 800b77e:	b103      	cbz	r3, 800b782 <_lseek_r+0x1e>
 800b780:	6023      	str	r3, [r4, #0]
 800b782:	bd38      	pop	{r3, r4, r5, pc}
 800b784:	20000af8 	.word	0x20000af8

0800b788 <_read_r>:
 800b788:	b538      	push	{r3, r4, r5, lr}
 800b78a:	4d07      	ldr	r5, [pc, #28]	@ (800b7a8 <_read_r+0x20>)
 800b78c:	4604      	mov	r4, r0
 800b78e:	4608      	mov	r0, r1
 800b790:	4611      	mov	r1, r2
 800b792:	2200      	movs	r2, #0
 800b794:	602a      	str	r2, [r5, #0]
 800b796:	461a      	mov	r2, r3
 800b798:	f7f7 f918 	bl	80029cc <_read>
 800b79c:	1c43      	adds	r3, r0, #1
 800b79e:	d102      	bne.n	800b7a6 <_read_r+0x1e>
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	b103      	cbz	r3, 800b7a6 <_read_r+0x1e>
 800b7a4:	6023      	str	r3, [r4, #0]
 800b7a6:	bd38      	pop	{r3, r4, r5, pc}
 800b7a8:	20000af8 	.word	0x20000af8

0800b7ac <_sbrk_r>:
 800b7ac:	b538      	push	{r3, r4, r5, lr}
 800b7ae:	4d06      	ldr	r5, [pc, #24]	@ (800b7c8 <_sbrk_r+0x1c>)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4604      	mov	r4, r0
 800b7b4:	4608      	mov	r0, r1
 800b7b6:	602b      	str	r3, [r5, #0]
 800b7b8:	f7f7 f95a 	bl	8002a70 <_sbrk>
 800b7bc:	1c43      	adds	r3, r0, #1
 800b7be:	d102      	bne.n	800b7c6 <_sbrk_r+0x1a>
 800b7c0:	682b      	ldr	r3, [r5, #0]
 800b7c2:	b103      	cbz	r3, 800b7c6 <_sbrk_r+0x1a>
 800b7c4:	6023      	str	r3, [r4, #0]
 800b7c6:	bd38      	pop	{r3, r4, r5, pc}
 800b7c8:	20000af8 	.word	0x20000af8

0800b7cc <_write_r>:
 800b7cc:	b538      	push	{r3, r4, r5, lr}
 800b7ce:	4d07      	ldr	r5, [pc, #28]	@ (800b7ec <_write_r+0x20>)
 800b7d0:	4604      	mov	r4, r0
 800b7d2:	4608      	mov	r0, r1
 800b7d4:	4611      	mov	r1, r2
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	602a      	str	r2, [r5, #0]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f7f5 f804 	bl	80007e8 <_write>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_write_r+0x1e>
 800b7e4:	682b      	ldr	r3, [r5, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_write_r+0x1e>
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20000af8 	.word	0x20000af8

0800b7f0 <__errno>:
 800b7f0:	4b01      	ldr	r3, [pc, #4]	@ (800b7f8 <__errno+0x8>)
 800b7f2:	6818      	ldr	r0, [r3, #0]
 800b7f4:	4770      	bx	lr
 800b7f6:	bf00      	nop
 800b7f8:	20000038 	.word	0x20000038

0800b7fc <__libc_init_array>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	4d0d      	ldr	r5, [pc, #52]	@ (800b834 <__libc_init_array+0x38>)
 800b800:	4c0d      	ldr	r4, [pc, #52]	@ (800b838 <__libc_init_array+0x3c>)
 800b802:	1b64      	subs	r4, r4, r5
 800b804:	10a4      	asrs	r4, r4, #2
 800b806:	2600      	movs	r6, #0
 800b808:	42a6      	cmp	r6, r4
 800b80a:	d109      	bne.n	800b820 <__libc_init_array+0x24>
 800b80c:	4d0b      	ldr	r5, [pc, #44]	@ (800b83c <__libc_init_array+0x40>)
 800b80e:	4c0c      	ldr	r4, [pc, #48]	@ (800b840 <__libc_init_array+0x44>)
 800b810:	f000 fca6 	bl	800c160 <_init>
 800b814:	1b64      	subs	r4, r4, r5
 800b816:	10a4      	asrs	r4, r4, #2
 800b818:	2600      	movs	r6, #0
 800b81a:	42a6      	cmp	r6, r4
 800b81c:	d105      	bne.n	800b82a <__libc_init_array+0x2e>
 800b81e:	bd70      	pop	{r4, r5, r6, pc}
 800b820:	f855 3b04 	ldr.w	r3, [r5], #4
 800b824:	4798      	blx	r3
 800b826:	3601      	adds	r6, #1
 800b828:	e7ee      	b.n	800b808 <__libc_init_array+0xc>
 800b82a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b82e:	4798      	blx	r3
 800b830:	3601      	adds	r6, #1
 800b832:	e7f2      	b.n	800b81a <__libc_init_array+0x1e>
 800b834:	0800c52c 	.word	0x0800c52c
 800b838:	0800c52c 	.word	0x0800c52c
 800b83c:	0800c52c 	.word	0x0800c52c
 800b840:	0800c530 	.word	0x0800c530

0800b844 <__retarget_lock_init_recursive>:
 800b844:	4770      	bx	lr

0800b846 <__retarget_lock_acquire_recursive>:
 800b846:	4770      	bx	lr

0800b848 <__retarget_lock_release_recursive>:
 800b848:	4770      	bx	lr

0800b84a <memcpy>:
 800b84a:	440a      	add	r2, r1
 800b84c:	4291      	cmp	r1, r2
 800b84e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b852:	d100      	bne.n	800b856 <memcpy+0xc>
 800b854:	4770      	bx	lr
 800b856:	b510      	push	{r4, lr}
 800b858:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b85c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b860:	4291      	cmp	r1, r2
 800b862:	d1f9      	bne.n	800b858 <memcpy+0xe>
 800b864:	bd10      	pop	{r4, pc}
	...

0800b868 <_free_r>:
 800b868:	b538      	push	{r3, r4, r5, lr}
 800b86a:	4605      	mov	r5, r0
 800b86c:	2900      	cmp	r1, #0
 800b86e:	d041      	beq.n	800b8f4 <_free_r+0x8c>
 800b870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b874:	1f0c      	subs	r4, r1, #4
 800b876:	2b00      	cmp	r3, #0
 800b878:	bfb8      	it	lt
 800b87a:	18e4      	addlt	r4, r4, r3
 800b87c:	f7ff fc78 	bl	800b170 <__malloc_lock>
 800b880:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f8 <_free_r+0x90>)
 800b882:	6813      	ldr	r3, [r2, #0]
 800b884:	b933      	cbnz	r3, 800b894 <_free_r+0x2c>
 800b886:	6063      	str	r3, [r4, #4]
 800b888:	6014      	str	r4, [r2, #0]
 800b88a:	4628      	mov	r0, r5
 800b88c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b890:	f7ff bc74 	b.w	800b17c <__malloc_unlock>
 800b894:	42a3      	cmp	r3, r4
 800b896:	d908      	bls.n	800b8aa <_free_r+0x42>
 800b898:	6820      	ldr	r0, [r4, #0]
 800b89a:	1821      	adds	r1, r4, r0
 800b89c:	428b      	cmp	r3, r1
 800b89e:	bf01      	itttt	eq
 800b8a0:	6819      	ldreq	r1, [r3, #0]
 800b8a2:	685b      	ldreq	r3, [r3, #4]
 800b8a4:	1809      	addeq	r1, r1, r0
 800b8a6:	6021      	streq	r1, [r4, #0]
 800b8a8:	e7ed      	b.n	800b886 <_free_r+0x1e>
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	b10b      	cbz	r3, 800b8b4 <_free_r+0x4c>
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	d9fa      	bls.n	800b8aa <_free_r+0x42>
 800b8b4:	6811      	ldr	r1, [r2, #0]
 800b8b6:	1850      	adds	r0, r2, r1
 800b8b8:	42a0      	cmp	r0, r4
 800b8ba:	d10b      	bne.n	800b8d4 <_free_r+0x6c>
 800b8bc:	6820      	ldr	r0, [r4, #0]
 800b8be:	4401      	add	r1, r0
 800b8c0:	1850      	adds	r0, r2, r1
 800b8c2:	4283      	cmp	r3, r0
 800b8c4:	6011      	str	r1, [r2, #0]
 800b8c6:	d1e0      	bne.n	800b88a <_free_r+0x22>
 800b8c8:	6818      	ldr	r0, [r3, #0]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	6053      	str	r3, [r2, #4]
 800b8ce:	4408      	add	r0, r1
 800b8d0:	6010      	str	r0, [r2, #0]
 800b8d2:	e7da      	b.n	800b88a <_free_r+0x22>
 800b8d4:	d902      	bls.n	800b8dc <_free_r+0x74>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	602b      	str	r3, [r5, #0]
 800b8da:	e7d6      	b.n	800b88a <_free_r+0x22>
 800b8dc:	6820      	ldr	r0, [r4, #0]
 800b8de:	1821      	adds	r1, r4, r0
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	bf04      	itt	eq
 800b8e4:	6819      	ldreq	r1, [r3, #0]
 800b8e6:	685b      	ldreq	r3, [r3, #4]
 800b8e8:	6063      	str	r3, [r4, #4]
 800b8ea:	bf04      	itt	eq
 800b8ec:	1809      	addeq	r1, r1, r0
 800b8ee:	6021      	streq	r1, [r4, #0]
 800b8f0:	6054      	str	r4, [r2, #4]
 800b8f2:	e7ca      	b.n	800b88a <_free_r+0x22>
 800b8f4:	bd38      	pop	{r3, r4, r5, pc}
 800b8f6:	bf00      	nop
 800b8f8:	200009b8 	.word	0x200009b8

0800b8fc <__sfputc_r>:
 800b8fc:	6893      	ldr	r3, [r2, #8]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	2b00      	cmp	r3, #0
 800b902:	b410      	push	{r4}
 800b904:	6093      	str	r3, [r2, #8]
 800b906:	da08      	bge.n	800b91a <__sfputc_r+0x1e>
 800b908:	6994      	ldr	r4, [r2, #24]
 800b90a:	42a3      	cmp	r3, r4
 800b90c:	db01      	blt.n	800b912 <__sfputc_r+0x16>
 800b90e:	290a      	cmp	r1, #10
 800b910:	d103      	bne.n	800b91a <__sfputc_r+0x1e>
 800b912:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b916:	f7ff be68 	b.w	800b5ea <__swbuf_r>
 800b91a:	6813      	ldr	r3, [r2, #0]
 800b91c:	1c58      	adds	r0, r3, #1
 800b91e:	6010      	str	r0, [r2, #0]
 800b920:	7019      	strb	r1, [r3, #0]
 800b922:	4608      	mov	r0, r1
 800b924:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b928:	4770      	bx	lr

0800b92a <__sfputs_r>:
 800b92a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92c:	4606      	mov	r6, r0
 800b92e:	460f      	mov	r7, r1
 800b930:	4614      	mov	r4, r2
 800b932:	18d5      	adds	r5, r2, r3
 800b934:	42ac      	cmp	r4, r5
 800b936:	d101      	bne.n	800b93c <__sfputs_r+0x12>
 800b938:	2000      	movs	r0, #0
 800b93a:	e007      	b.n	800b94c <__sfputs_r+0x22>
 800b93c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b940:	463a      	mov	r2, r7
 800b942:	4630      	mov	r0, r6
 800b944:	f7ff ffda 	bl	800b8fc <__sfputc_r>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	d1f3      	bne.n	800b934 <__sfputs_r+0xa>
 800b94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b950 <_vfiprintf_r>:
 800b950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b954:	460d      	mov	r5, r1
 800b956:	b09d      	sub	sp, #116	@ 0x74
 800b958:	4614      	mov	r4, r2
 800b95a:	4698      	mov	r8, r3
 800b95c:	4606      	mov	r6, r0
 800b95e:	b118      	cbz	r0, 800b968 <_vfiprintf_r+0x18>
 800b960:	6a03      	ldr	r3, [r0, #32]
 800b962:	b90b      	cbnz	r3, 800b968 <_vfiprintf_r+0x18>
 800b964:	f7ff fc9c 	bl	800b2a0 <__sinit>
 800b968:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b96a:	07d9      	lsls	r1, r3, #31
 800b96c:	d405      	bmi.n	800b97a <_vfiprintf_r+0x2a>
 800b96e:	89ab      	ldrh	r3, [r5, #12]
 800b970:	059a      	lsls	r2, r3, #22
 800b972:	d402      	bmi.n	800b97a <_vfiprintf_r+0x2a>
 800b974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b976:	f7ff ff66 	bl	800b846 <__retarget_lock_acquire_recursive>
 800b97a:	89ab      	ldrh	r3, [r5, #12]
 800b97c:	071b      	lsls	r3, r3, #28
 800b97e:	d501      	bpl.n	800b984 <_vfiprintf_r+0x34>
 800b980:	692b      	ldr	r3, [r5, #16]
 800b982:	b99b      	cbnz	r3, 800b9ac <_vfiprintf_r+0x5c>
 800b984:	4629      	mov	r1, r5
 800b986:	4630      	mov	r0, r6
 800b988:	f7ff fe6e 	bl	800b668 <__swsetup_r>
 800b98c:	b170      	cbz	r0, 800b9ac <_vfiprintf_r+0x5c>
 800b98e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b990:	07dc      	lsls	r4, r3, #31
 800b992:	d504      	bpl.n	800b99e <_vfiprintf_r+0x4e>
 800b994:	f04f 30ff 	mov.w	r0, #4294967295
 800b998:	b01d      	add	sp, #116	@ 0x74
 800b99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99e:	89ab      	ldrh	r3, [r5, #12]
 800b9a0:	0598      	lsls	r0, r3, #22
 800b9a2:	d4f7      	bmi.n	800b994 <_vfiprintf_r+0x44>
 800b9a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b9a6:	f7ff ff4f 	bl	800b848 <__retarget_lock_release_recursive>
 800b9aa:	e7f3      	b.n	800b994 <_vfiprintf_r+0x44>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9b0:	2320      	movs	r3, #32
 800b9b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b9b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9ba:	2330      	movs	r3, #48	@ 0x30
 800b9bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb6c <_vfiprintf_r+0x21c>
 800b9c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b9c4:	f04f 0901 	mov.w	r9, #1
 800b9c8:	4623      	mov	r3, r4
 800b9ca:	469a      	mov	sl, r3
 800b9cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9d0:	b10a      	cbz	r2, 800b9d6 <_vfiprintf_r+0x86>
 800b9d2:	2a25      	cmp	r2, #37	@ 0x25
 800b9d4:	d1f9      	bne.n	800b9ca <_vfiprintf_r+0x7a>
 800b9d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b9da:	d00b      	beq.n	800b9f4 <_vfiprintf_r+0xa4>
 800b9dc:	465b      	mov	r3, fp
 800b9de:	4622      	mov	r2, r4
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	4630      	mov	r0, r6
 800b9e4:	f7ff ffa1 	bl	800b92a <__sfputs_r>
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	f000 80a7 	beq.w	800bb3c <_vfiprintf_r+0x1ec>
 800b9ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9f0:	445a      	add	r2, fp
 800b9f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 809f 	beq.w	800bb3c <_vfiprintf_r+0x1ec>
 800b9fe:	2300      	movs	r3, #0
 800ba00:	f04f 32ff 	mov.w	r2, #4294967295
 800ba04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba08:	f10a 0a01 	add.w	sl, sl, #1
 800ba0c:	9304      	str	r3, [sp, #16]
 800ba0e:	9307      	str	r3, [sp, #28]
 800ba10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ba14:	931a      	str	r3, [sp, #104]	@ 0x68
 800ba16:	4654      	mov	r4, sl
 800ba18:	2205      	movs	r2, #5
 800ba1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba1e:	4853      	ldr	r0, [pc, #332]	@ (800bb6c <_vfiprintf_r+0x21c>)
 800ba20:	f7f4 fbd6 	bl	80001d0 <memchr>
 800ba24:	9a04      	ldr	r2, [sp, #16]
 800ba26:	b9d8      	cbnz	r0, 800ba60 <_vfiprintf_r+0x110>
 800ba28:	06d1      	lsls	r1, r2, #27
 800ba2a:	bf44      	itt	mi
 800ba2c:	2320      	movmi	r3, #32
 800ba2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba32:	0713      	lsls	r3, r2, #28
 800ba34:	bf44      	itt	mi
 800ba36:	232b      	movmi	r3, #43	@ 0x2b
 800ba38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ba3c:	f89a 3000 	ldrb.w	r3, [sl]
 800ba40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba42:	d015      	beq.n	800ba70 <_vfiprintf_r+0x120>
 800ba44:	9a07      	ldr	r2, [sp, #28]
 800ba46:	4654      	mov	r4, sl
 800ba48:	2000      	movs	r0, #0
 800ba4a:	f04f 0c0a 	mov.w	ip, #10
 800ba4e:	4621      	mov	r1, r4
 800ba50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba54:	3b30      	subs	r3, #48	@ 0x30
 800ba56:	2b09      	cmp	r3, #9
 800ba58:	d94b      	bls.n	800baf2 <_vfiprintf_r+0x1a2>
 800ba5a:	b1b0      	cbz	r0, 800ba8a <_vfiprintf_r+0x13a>
 800ba5c:	9207      	str	r2, [sp, #28]
 800ba5e:	e014      	b.n	800ba8a <_vfiprintf_r+0x13a>
 800ba60:	eba0 0308 	sub.w	r3, r0, r8
 800ba64:	fa09 f303 	lsl.w	r3, r9, r3
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	46a2      	mov	sl, r4
 800ba6e:	e7d2      	b.n	800ba16 <_vfiprintf_r+0xc6>
 800ba70:	9b03      	ldr	r3, [sp, #12]
 800ba72:	1d19      	adds	r1, r3, #4
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	9103      	str	r1, [sp, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	bfbb      	ittet	lt
 800ba7c:	425b      	neglt	r3, r3
 800ba7e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba82:	9307      	strge	r3, [sp, #28]
 800ba84:	9307      	strlt	r3, [sp, #28]
 800ba86:	bfb8      	it	lt
 800ba88:	9204      	strlt	r2, [sp, #16]
 800ba8a:	7823      	ldrb	r3, [r4, #0]
 800ba8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba8e:	d10a      	bne.n	800baa6 <_vfiprintf_r+0x156>
 800ba90:	7863      	ldrb	r3, [r4, #1]
 800ba92:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba94:	d132      	bne.n	800bafc <_vfiprintf_r+0x1ac>
 800ba96:	9b03      	ldr	r3, [sp, #12]
 800ba98:	1d1a      	adds	r2, r3, #4
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	9203      	str	r2, [sp, #12]
 800ba9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800baa2:	3402      	adds	r4, #2
 800baa4:	9305      	str	r3, [sp, #20]
 800baa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb7c <_vfiprintf_r+0x22c>
 800baaa:	7821      	ldrb	r1, [r4, #0]
 800baac:	2203      	movs	r2, #3
 800baae:	4650      	mov	r0, sl
 800bab0:	f7f4 fb8e 	bl	80001d0 <memchr>
 800bab4:	b138      	cbz	r0, 800bac6 <_vfiprintf_r+0x176>
 800bab6:	9b04      	ldr	r3, [sp, #16]
 800bab8:	eba0 000a 	sub.w	r0, r0, sl
 800babc:	2240      	movs	r2, #64	@ 0x40
 800babe:	4082      	lsls	r2, r0
 800bac0:	4313      	orrs	r3, r2
 800bac2:	3401      	adds	r4, #1
 800bac4:	9304      	str	r3, [sp, #16]
 800bac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baca:	4829      	ldr	r0, [pc, #164]	@ (800bb70 <_vfiprintf_r+0x220>)
 800bacc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bad0:	2206      	movs	r2, #6
 800bad2:	f7f4 fb7d 	bl	80001d0 <memchr>
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d03f      	beq.n	800bb5a <_vfiprintf_r+0x20a>
 800bada:	4b26      	ldr	r3, [pc, #152]	@ (800bb74 <_vfiprintf_r+0x224>)
 800badc:	bb1b      	cbnz	r3, 800bb26 <_vfiprintf_r+0x1d6>
 800bade:	9b03      	ldr	r3, [sp, #12]
 800bae0:	3307      	adds	r3, #7
 800bae2:	f023 0307 	bic.w	r3, r3, #7
 800bae6:	3308      	adds	r3, #8
 800bae8:	9303      	str	r3, [sp, #12]
 800baea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baec:	443b      	add	r3, r7
 800baee:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf0:	e76a      	b.n	800b9c8 <_vfiprintf_r+0x78>
 800baf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800baf6:	460c      	mov	r4, r1
 800baf8:	2001      	movs	r0, #1
 800bafa:	e7a8      	b.n	800ba4e <_vfiprintf_r+0xfe>
 800bafc:	2300      	movs	r3, #0
 800bafe:	3401      	adds	r4, #1
 800bb00:	9305      	str	r3, [sp, #20]
 800bb02:	4619      	mov	r1, r3
 800bb04:	f04f 0c0a 	mov.w	ip, #10
 800bb08:	4620      	mov	r0, r4
 800bb0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb0e:	3a30      	subs	r2, #48	@ 0x30
 800bb10:	2a09      	cmp	r2, #9
 800bb12:	d903      	bls.n	800bb1c <_vfiprintf_r+0x1cc>
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d0c6      	beq.n	800baa6 <_vfiprintf_r+0x156>
 800bb18:	9105      	str	r1, [sp, #20]
 800bb1a:	e7c4      	b.n	800baa6 <_vfiprintf_r+0x156>
 800bb1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb20:	4604      	mov	r4, r0
 800bb22:	2301      	movs	r3, #1
 800bb24:	e7f0      	b.n	800bb08 <_vfiprintf_r+0x1b8>
 800bb26:	ab03      	add	r3, sp, #12
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	462a      	mov	r2, r5
 800bb2c:	4b12      	ldr	r3, [pc, #72]	@ (800bb78 <_vfiprintf_r+0x228>)
 800bb2e:	a904      	add	r1, sp, #16
 800bb30:	4630      	mov	r0, r6
 800bb32:	f3af 8000 	nop.w
 800bb36:	4607      	mov	r7, r0
 800bb38:	1c78      	adds	r0, r7, #1
 800bb3a:	d1d6      	bne.n	800baea <_vfiprintf_r+0x19a>
 800bb3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb3e:	07d9      	lsls	r1, r3, #31
 800bb40:	d405      	bmi.n	800bb4e <_vfiprintf_r+0x1fe>
 800bb42:	89ab      	ldrh	r3, [r5, #12]
 800bb44:	059a      	lsls	r2, r3, #22
 800bb46:	d402      	bmi.n	800bb4e <_vfiprintf_r+0x1fe>
 800bb48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb4a:	f7ff fe7d 	bl	800b848 <__retarget_lock_release_recursive>
 800bb4e:	89ab      	ldrh	r3, [r5, #12]
 800bb50:	065b      	lsls	r3, r3, #25
 800bb52:	f53f af1f 	bmi.w	800b994 <_vfiprintf_r+0x44>
 800bb56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb58:	e71e      	b.n	800b998 <_vfiprintf_r+0x48>
 800bb5a:	ab03      	add	r3, sp, #12
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	462a      	mov	r2, r5
 800bb60:	4b05      	ldr	r3, [pc, #20]	@ (800bb78 <_vfiprintf_r+0x228>)
 800bb62:	a904      	add	r1, sp, #16
 800bb64:	4630      	mov	r0, r6
 800bb66:	f000 f879 	bl	800bc5c <_printf_i>
 800bb6a:	e7e4      	b.n	800bb36 <_vfiprintf_r+0x1e6>
 800bb6c:	0800c4f0 	.word	0x0800c4f0
 800bb70:	0800c4fa 	.word	0x0800c4fa
 800bb74:	00000000 	.word	0x00000000
 800bb78:	0800b92b 	.word	0x0800b92b
 800bb7c:	0800c4f6 	.word	0x0800c4f6

0800bb80 <_printf_common>:
 800bb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb84:	4616      	mov	r6, r2
 800bb86:	4698      	mov	r8, r3
 800bb88:	688a      	ldr	r2, [r1, #8]
 800bb8a:	690b      	ldr	r3, [r1, #16]
 800bb8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb90:	4293      	cmp	r3, r2
 800bb92:	bfb8      	it	lt
 800bb94:	4613      	movlt	r3, r2
 800bb96:	6033      	str	r3, [r6, #0]
 800bb98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb9c:	4607      	mov	r7, r0
 800bb9e:	460c      	mov	r4, r1
 800bba0:	b10a      	cbz	r2, 800bba6 <_printf_common+0x26>
 800bba2:	3301      	adds	r3, #1
 800bba4:	6033      	str	r3, [r6, #0]
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	0699      	lsls	r1, r3, #26
 800bbaa:	bf42      	ittt	mi
 800bbac:	6833      	ldrmi	r3, [r6, #0]
 800bbae:	3302      	addmi	r3, #2
 800bbb0:	6033      	strmi	r3, [r6, #0]
 800bbb2:	6825      	ldr	r5, [r4, #0]
 800bbb4:	f015 0506 	ands.w	r5, r5, #6
 800bbb8:	d106      	bne.n	800bbc8 <_printf_common+0x48>
 800bbba:	f104 0a19 	add.w	sl, r4, #25
 800bbbe:	68e3      	ldr	r3, [r4, #12]
 800bbc0:	6832      	ldr	r2, [r6, #0]
 800bbc2:	1a9b      	subs	r3, r3, r2
 800bbc4:	42ab      	cmp	r3, r5
 800bbc6:	dc26      	bgt.n	800bc16 <_printf_common+0x96>
 800bbc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bbcc:	6822      	ldr	r2, [r4, #0]
 800bbce:	3b00      	subs	r3, #0
 800bbd0:	bf18      	it	ne
 800bbd2:	2301      	movne	r3, #1
 800bbd4:	0692      	lsls	r2, r2, #26
 800bbd6:	d42b      	bmi.n	800bc30 <_printf_common+0xb0>
 800bbd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bbdc:	4641      	mov	r1, r8
 800bbde:	4638      	mov	r0, r7
 800bbe0:	47c8      	blx	r9
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	d01e      	beq.n	800bc24 <_printf_common+0xa4>
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	6922      	ldr	r2, [r4, #16]
 800bbea:	f003 0306 	and.w	r3, r3, #6
 800bbee:	2b04      	cmp	r3, #4
 800bbf0:	bf02      	ittt	eq
 800bbf2:	68e5      	ldreq	r5, [r4, #12]
 800bbf4:	6833      	ldreq	r3, [r6, #0]
 800bbf6:	1aed      	subeq	r5, r5, r3
 800bbf8:	68a3      	ldr	r3, [r4, #8]
 800bbfa:	bf0c      	ite	eq
 800bbfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc00:	2500      	movne	r5, #0
 800bc02:	4293      	cmp	r3, r2
 800bc04:	bfc4      	itt	gt
 800bc06:	1a9b      	subgt	r3, r3, r2
 800bc08:	18ed      	addgt	r5, r5, r3
 800bc0a:	2600      	movs	r6, #0
 800bc0c:	341a      	adds	r4, #26
 800bc0e:	42b5      	cmp	r5, r6
 800bc10:	d11a      	bne.n	800bc48 <_printf_common+0xc8>
 800bc12:	2000      	movs	r0, #0
 800bc14:	e008      	b.n	800bc28 <_printf_common+0xa8>
 800bc16:	2301      	movs	r3, #1
 800bc18:	4652      	mov	r2, sl
 800bc1a:	4641      	mov	r1, r8
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	47c8      	blx	r9
 800bc20:	3001      	adds	r0, #1
 800bc22:	d103      	bne.n	800bc2c <_printf_common+0xac>
 800bc24:	f04f 30ff 	mov.w	r0, #4294967295
 800bc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc2c:	3501      	adds	r5, #1
 800bc2e:	e7c6      	b.n	800bbbe <_printf_common+0x3e>
 800bc30:	18e1      	adds	r1, r4, r3
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	2030      	movs	r0, #48	@ 0x30
 800bc36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bc3a:	4422      	add	r2, r4
 800bc3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bc40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bc44:	3302      	adds	r3, #2
 800bc46:	e7c7      	b.n	800bbd8 <_printf_common+0x58>
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4622      	mov	r2, r4
 800bc4c:	4641      	mov	r1, r8
 800bc4e:	4638      	mov	r0, r7
 800bc50:	47c8      	blx	r9
 800bc52:	3001      	adds	r0, #1
 800bc54:	d0e6      	beq.n	800bc24 <_printf_common+0xa4>
 800bc56:	3601      	adds	r6, #1
 800bc58:	e7d9      	b.n	800bc0e <_printf_common+0x8e>
	...

0800bc5c <_printf_i>:
 800bc5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc60:	7e0f      	ldrb	r7, [r1, #24]
 800bc62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bc64:	2f78      	cmp	r7, #120	@ 0x78
 800bc66:	4691      	mov	r9, r2
 800bc68:	4680      	mov	r8, r0
 800bc6a:	460c      	mov	r4, r1
 800bc6c:	469a      	mov	sl, r3
 800bc6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bc72:	d807      	bhi.n	800bc84 <_printf_i+0x28>
 800bc74:	2f62      	cmp	r7, #98	@ 0x62
 800bc76:	d80a      	bhi.n	800bc8e <_printf_i+0x32>
 800bc78:	2f00      	cmp	r7, #0
 800bc7a:	f000 80d1 	beq.w	800be20 <_printf_i+0x1c4>
 800bc7e:	2f58      	cmp	r7, #88	@ 0x58
 800bc80:	f000 80b8 	beq.w	800bdf4 <_printf_i+0x198>
 800bc84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bc8c:	e03a      	b.n	800bd04 <_printf_i+0xa8>
 800bc8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bc92:	2b15      	cmp	r3, #21
 800bc94:	d8f6      	bhi.n	800bc84 <_printf_i+0x28>
 800bc96:	a101      	add	r1, pc, #4	@ (adr r1, 800bc9c <_printf_i+0x40>)
 800bc98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc9c:	0800bcf5 	.word	0x0800bcf5
 800bca0:	0800bd09 	.word	0x0800bd09
 800bca4:	0800bc85 	.word	0x0800bc85
 800bca8:	0800bc85 	.word	0x0800bc85
 800bcac:	0800bc85 	.word	0x0800bc85
 800bcb0:	0800bc85 	.word	0x0800bc85
 800bcb4:	0800bd09 	.word	0x0800bd09
 800bcb8:	0800bc85 	.word	0x0800bc85
 800bcbc:	0800bc85 	.word	0x0800bc85
 800bcc0:	0800bc85 	.word	0x0800bc85
 800bcc4:	0800bc85 	.word	0x0800bc85
 800bcc8:	0800be07 	.word	0x0800be07
 800bccc:	0800bd33 	.word	0x0800bd33
 800bcd0:	0800bdc1 	.word	0x0800bdc1
 800bcd4:	0800bc85 	.word	0x0800bc85
 800bcd8:	0800bc85 	.word	0x0800bc85
 800bcdc:	0800be29 	.word	0x0800be29
 800bce0:	0800bc85 	.word	0x0800bc85
 800bce4:	0800bd33 	.word	0x0800bd33
 800bce8:	0800bc85 	.word	0x0800bc85
 800bcec:	0800bc85 	.word	0x0800bc85
 800bcf0:	0800bdc9 	.word	0x0800bdc9
 800bcf4:	6833      	ldr	r3, [r6, #0]
 800bcf6:	1d1a      	adds	r2, r3, #4
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6032      	str	r2, [r6, #0]
 800bcfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bd04:	2301      	movs	r3, #1
 800bd06:	e09c      	b.n	800be42 <_printf_i+0x1e6>
 800bd08:	6833      	ldr	r3, [r6, #0]
 800bd0a:	6820      	ldr	r0, [r4, #0]
 800bd0c:	1d19      	adds	r1, r3, #4
 800bd0e:	6031      	str	r1, [r6, #0]
 800bd10:	0606      	lsls	r6, r0, #24
 800bd12:	d501      	bpl.n	800bd18 <_printf_i+0xbc>
 800bd14:	681d      	ldr	r5, [r3, #0]
 800bd16:	e003      	b.n	800bd20 <_printf_i+0xc4>
 800bd18:	0645      	lsls	r5, r0, #25
 800bd1a:	d5fb      	bpl.n	800bd14 <_printf_i+0xb8>
 800bd1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bd20:	2d00      	cmp	r5, #0
 800bd22:	da03      	bge.n	800bd2c <_printf_i+0xd0>
 800bd24:	232d      	movs	r3, #45	@ 0x2d
 800bd26:	426d      	negs	r5, r5
 800bd28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd2c:	4858      	ldr	r0, [pc, #352]	@ (800be90 <_printf_i+0x234>)
 800bd2e:	230a      	movs	r3, #10
 800bd30:	e011      	b.n	800bd56 <_printf_i+0xfa>
 800bd32:	6821      	ldr	r1, [r4, #0]
 800bd34:	6833      	ldr	r3, [r6, #0]
 800bd36:	0608      	lsls	r0, r1, #24
 800bd38:	f853 5b04 	ldr.w	r5, [r3], #4
 800bd3c:	d402      	bmi.n	800bd44 <_printf_i+0xe8>
 800bd3e:	0649      	lsls	r1, r1, #25
 800bd40:	bf48      	it	mi
 800bd42:	b2ad      	uxthmi	r5, r5
 800bd44:	2f6f      	cmp	r7, #111	@ 0x6f
 800bd46:	4852      	ldr	r0, [pc, #328]	@ (800be90 <_printf_i+0x234>)
 800bd48:	6033      	str	r3, [r6, #0]
 800bd4a:	bf14      	ite	ne
 800bd4c:	230a      	movne	r3, #10
 800bd4e:	2308      	moveq	r3, #8
 800bd50:	2100      	movs	r1, #0
 800bd52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bd56:	6866      	ldr	r6, [r4, #4]
 800bd58:	60a6      	str	r6, [r4, #8]
 800bd5a:	2e00      	cmp	r6, #0
 800bd5c:	db05      	blt.n	800bd6a <_printf_i+0x10e>
 800bd5e:	6821      	ldr	r1, [r4, #0]
 800bd60:	432e      	orrs	r6, r5
 800bd62:	f021 0104 	bic.w	r1, r1, #4
 800bd66:	6021      	str	r1, [r4, #0]
 800bd68:	d04b      	beq.n	800be02 <_printf_i+0x1a6>
 800bd6a:	4616      	mov	r6, r2
 800bd6c:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd70:	fb03 5711 	mls	r7, r3, r1, r5
 800bd74:	5dc7      	ldrb	r7, [r0, r7]
 800bd76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd7a:	462f      	mov	r7, r5
 800bd7c:	42bb      	cmp	r3, r7
 800bd7e:	460d      	mov	r5, r1
 800bd80:	d9f4      	bls.n	800bd6c <_printf_i+0x110>
 800bd82:	2b08      	cmp	r3, #8
 800bd84:	d10b      	bne.n	800bd9e <_printf_i+0x142>
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	07df      	lsls	r7, r3, #31
 800bd8a:	d508      	bpl.n	800bd9e <_printf_i+0x142>
 800bd8c:	6923      	ldr	r3, [r4, #16]
 800bd8e:	6861      	ldr	r1, [r4, #4]
 800bd90:	4299      	cmp	r1, r3
 800bd92:	bfde      	ittt	le
 800bd94:	2330      	movle	r3, #48	@ 0x30
 800bd96:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd9e:	1b92      	subs	r2, r2, r6
 800bda0:	6122      	str	r2, [r4, #16]
 800bda2:	f8cd a000 	str.w	sl, [sp]
 800bda6:	464b      	mov	r3, r9
 800bda8:	aa03      	add	r2, sp, #12
 800bdaa:	4621      	mov	r1, r4
 800bdac:	4640      	mov	r0, r8
 800bdae:	f7ff fee7 	bl	800bb80 <_printf_common>
 800bdb2:	3001      	adds	r0, #1
 800bdb4:	d14a      	bne.n	800be4c <_printf_i+0x1f0>
 800bdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdba:	b004      	add	sp, #16
 800bdbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdc0:	6823      	ldr	r3, [r4, #0]
 800bdc2:	f043 0320 	orr.w	r3, r3, #32
 800bdc6:	6023      	str	r3, [r4, #0]
 800bdc8:	4832      	ldr	r0, [pc, #200]	@ (800be94 <_printf_i+0x238>)
 800bdca:	2778      	movs	r7, #120	@ 0x78
 800bdcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bdd0:	6823      	ldr	r3, [r4, #0]
 800bdd2:	6831      	ldr	r1, [r6, #0]
 800bdd4:	061f      	lsls	r7, r3, #24
 800bdd6:	f851 5b04 	ldr.w	r5, [r1], #4
 800bdda:	d402      	bmi.n	800bde2 <_printf_i+0x186>
 800bddc:	065f      	lsls	r7, r3, #25
 800bdde:	bf48      	it	mi
 800bde0:	b2ad      	uxthmi	r5, r5
 800bde2:	6031      	str	r1, [r6, #0]
 800bde4:	07d9      	lsls	r1, r3, #31
 800bde6:	bf44      	itt	mi
 800bde8:	f043 0320 	orrmi.w	r3, r3, #32
 800bdec:	6023      	strmi	r3, [r4, #0]
 800bdee:	b11d      	cbz	r5, 800bdf8 <_printf_i+0x19c>
 800bdf0:	2310      	movs	r3, #16
 800bdf2:	e7ad      	b.n	800bd50 <_printf_i+0xf4>
 800bdf4:	4826      	ldr	r0, [pc, #152]	@ (800be90 <_printf_i+0x234>)
 800bdf6:	e7e9      	b.n	800bdcc <_printf_i+0x170>
 800bdf8:	6823      	ldr	r3, [r4, #0]
 800bdfa:	f023 0320 	bic.w	r3, r3, #32
 800bdfe:	6023      	str	r3, [r4, #0]
 800be00:	e7f6      	b.n	800bdf0 <_printf_i+0x194>
 800be02:	4616      	mov	r6, r2
 800be04:	e7bd      	b.n	800bd82 <_printf_i+0x126>
 800be06:	6833      	ldr	r3, [r6, #0]
 800be08:	6825      	ldr	r5, [r4, #0]
 800be0a:	6961      	ldr	r1, [r4, #20]
 800be0c:	1d18      	adds	r0, r3, #4
 800be0e:	6030      	str	r0, [r6, #0]
 800be10:	062e      	lsls	r6, r5, #24
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	d501      	bpl.n	800be1a <_printf_i+0x1be>
 800be16:	6019      	str	r1, [r3, #0]
 800be18:	e002      	b.n	800be20 <_printf_i+0x1c4>
 800be1a:	0668      	lsls	r0, r5, #25
 800be1c:	d5fb      	bpl.n	800be16 <_printf_i+0x1ba>
 800be1e:	8019      	strh	r1, [r3, #0]
 800be20:	2300      	movs	r3, #0
 800be22:	6123      	str	r3, [r4, #16]
 800be24:	4616      	mov	r6, r2
 800be26:	e7bc      	b.n	800bda2 <_printf_i+0x146>
 800be28:	6833      	ldr	r3, [r6, #0]
 800be2a:	1d1a      	adds	r2, r3, #4
 800be2c:	6032      	str	r2, [r6, #0]
 800be2e:	681e      	ldr	r6, [r3, #0]
 800be30:	6862      	ldr	r2, [r4, #4]
 800be32:	2100      	movs	r1, #0
 800be34:	4630      	mov	r0, r6
 800be36:	f7f4 f9cb 	bl	80001d0 <memchr>
 800be3a:	b108      	cbz	r0, 800be40 <_printf_i+0x1e4>
 800be3c:	1b80      	subs	r0, r0, r6
 800be3e:	6060      	str	r0, [r4, #4]
 800be40:	6863      	ldr	r3, [r4, #4]
 800be42:	6123      	str	r3, [r4, #16]
 800be44:	2300      	movs	r3, #0
 800be46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be4a:	e7aa      	b.n	800bda2 <_printf_i+0x146>
 800be4c:	6923      	ldr	r3, [r4, #16]
 800be4e:	4632      	mov	r2, r6
 800be50:	4649      	mov	r1, r9
 800be52:	4640      	mov	r0, r8
 800be54:	47d0      	blx	sl
 800be56:	3001      	adds	r0, #1
 800be58:	d0ad      	beq.n	800bdb6 <_printf_i+0x15a>
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	079b      	lsls	r3, r3, #30
 800be5e:	d413      	bmi.n	800be88 <_printf_i+0x22c>
 800be60:	68e0      	ldr	r0, [r4, #12]
 800be62:	9b03      	ldr	r3, [sp, #12]
 800be64:	4298      	cmp	r0, r3
 800be66:	bfb8      	it	lt
 800be68:	4618      	movlt	r0, r3
 800be6a:	e7a6      	b.n	800bdba <_printf_i+0x15e>
 800be6c:	2301      	movs	r3, #1
 800be6e:	4632      	mov	r2, r6
 800be70:	4649      	mov	r1, r9
 800be72:	4640      	mov	r0, r8
 800be74:	47d0      	blx	sl
 800be76:	3001      	adds	r0, #1
 800be78:	d09d      	beq.n	800bdb6 <_printf_i+0x15a>
 800be7a:	3501      	adds	r5, #1
 800be7c:	68e3      	ldr	r3, [r4, #12]
 800be7e:	9903      	ldr	r1, [sp, #12]
 800be80:	1a5b      	subs	r3, r3, r1
 800be82:	42ab      	cmp	r3, r5
 800be84:	dcf2      	bgt.n	800be6c <_printf_i+0x210>
 800be86:	e7eb      	b.n	800be60 <_printf_i+0x204>
 800be88:	2500      	movs	r5, #0
 800be8a:	f104 0619 	add.w	r6, r4, #25
 800be8e:	e7f5      	b.n	800be7c <_printf_i+0x220>
 800be90:	0800c501 	.word	0x0800c501
 800be94:	0800c512 	.word	0x0800c512

0800be98 <__sflush_r>:
 800be98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea0:	0716      	lsls	r6, r2, #28
 800bea2:	4605      	mov	r5, r0
 800bea4:	460c      	mov	r4, r1
 800bea6:	d454      	bmi.n	800bf52 <__sflush_r+0xba>
 800bea8:	684b      	ldr	r3, [r1, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	dc02      	bgt.n	800beb4 <__sflush_r+0x1c>
 800beae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	dd48      	ble.n	800bf46 <__sflush_r+0xae>
 800beb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800beb6:	2e00      	cmp	r6, #0
 800beb8:	d045      	beq.n	800bf46 <__sflush_r+0xae>
 800beba:	2300      	movs	r3, #0
 800bebc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bec0:	682f      	ldr	r7, [r5, #0]
 800bec2:	6a21      	ldr	r1, [r4, #32]
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	d030      	beq.n	800bf2a <__sflush_r+0x92>
 800bec8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	0759      	lsls	r1, r3, #29
 800bece:	d505      	bpl.n	800bedc <__sflush_r+0x44>
 800bed0:	6863      	ldr	r3, [r4, #4]
 800bed2:	1ad2      	subs	r2, r2, r3
 800bed4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bed6:	b10b      	cbz	r3, 800bedc <__sflush_r+0x44>
 800bed8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800beda:	1ad2      	subs	r2, r2, r3
 800bedc:	2300      	movs	r3, #0
 800bede:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bee0:	6a21      	ldr	r1, [r4, #32]
 800bee2:	4628      	mov	r0, r5
 800bee4:	47b0      	blx	r6
 800bee6:	1c43      	adds	r3, r0, #1
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	d106      	bne.n	800befa <__sflush_r+0x62>
 800beec:	6829      	ldr	r1, [r5, #0]
 800beee:	291d      	cmp	r1, #29
 800bef0:	d82b      	bhi.n	800bf4a <__sflush_r+0xb2>
 800bef2:	4a2a      	ldr	r2, [pc, #168]	@ (800bf9c <__sflush_r+0x104>)
 800bef4:	40ca      	lsrs	r2, r1
 800bef6:	07d6      	lsls	r6, r2, #31
 800bef8:	d527      	bpl.n	800bf4a <__sflush_r+0xb2>
 800befa:	2200      	movs	r2, #0
 800befc:	6062      	str	r2, [r4, #4]
 800befe:	04d9      	lsls	r1, r3, #19
 800bf00:	6922      	ldr	r2, [r4, #16]
 800bf02:	6022      	str	r2, [r4, #0]
 800bf04:	d504      	bpl.n	800bf10 <__sflush_r+0x78>
 800bf06:	1c42      	adds	r2, r0, #1
 800bf08:	d101      	bne.n	800bf0e <__sflush_r+0x76>
 800bf0a:	682b      	ldr	r3, [r5, #0]
 800bf0c:	b903      	cbnz	r3, 800bf10 <__sflush_r+0x78>
 800bf0e:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf12:	602f      	str	r7, [r5, #0]
 800bf14:	b1b9      	cbz	r1, 800bf46 <__sflush_r+0xae>
 800bf16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf1a:	4299      	cmp	r1, r3
 800bf1c:	d002      	beq.n	800bf24 <__sflush_r+0x8c>
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f7ff fca2 	bl	800b868 <_free_r>
 800bf24:	2300      	movs	r3, #0
 800bf26:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf28:	e00d      	b.n	800bf46 <__sflush_r+0xae>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	47b0      	blx	r6
 800bf30:	4602      	mov	r2, r0
 800bf32:	1c50      	adds	r0, r2, #1
 800bf34:	d1c9      	bne.n	800beca <__sflush_r+0x32>
 800bf36:	682b      	ldr	r3, [r5, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0c6      	beq.n	800beca <__sflush_r+0x32>
 800bf3c:	2b1d      	cmp	r3, #29
 800bf3e:	d001      	beq.n	800bf44 <__sflush_r+0xac>
 800bf40:	2b16      	cmp	r3, #22
 800bf42:	d11e      	bne.n	800bf82 <__sflush_r+0xea>
 800bf44:	602f      	str	r7, [r5, #0]
 800bf46:	2000      	movs	r0, #0
 800bf48:	e022      	b.n	800bf90 <__sflush_r+0xf8>
 800bf4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf4e:	b21b      	sxth	r3, r3
 800bf50:	e01b      	b.n	800bf8a <__sflush_r+0xf2>
 800bf52:	690f      	ldr	r7, [r1, #16]
 800bf54:	2f00      	cmp	r7, #0
 800bf56:	d0f6      	beq.n	800bf46 <__sflush_r+0xae>
 800bf58:	0793      	lsls	r3, r2, #30
 800bf5a:	680e      	ldr	r6, [r1, #0]
 800bf5c:	bf08      	it	eq
 800bf5e:	694b      	ldreq	r3, [r1, #20]
 800bf60:	600f      	str	r7, [r1, #0]
 800bf62:	bf18      	it	ne
 800bf64:	2300      	movne	r3, #0
 800bf66:	eba6 0807 	sub.w	r8, r6, r7
 800bf6a:	608b      	str	r3, [r1, #8]
 800bf6c:	f1b8 0f00 	cmp.w	r8, #0
 800bf70:	dde9      	ble.n	800bf46 <__sflush_r+0xae>
 800bf72:	6a21      	ldr	r1, [r4, #32]
 800bf74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf76:	4643      	mov	r3, r8
 800bf78:	463a      	mov	r2, r7
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	47b0      	blx	r6
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	dc08      	bgt.n	800bf94 <__sflush_r+0xfc>
 800bf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf8a:	81a3      	strh	r3, [r4, #12]
 800bf8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf94:	4407      	add	r7, r0
 800bf96:	eba8 0800 	sub.w	r8, r8, r0
 800bf9a:	e7e7      	b.n	800bf6c <__sflush_r+0xd4>
 800bf9c:	20400001 	.word	0x20400001

0800bfa0 <_fflush_r>:
 800bfa0:	b538      	push	{r3, r4, r5, lr}
 800bfa2:	690b      	ldr	r3, [r1, #16]
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	b913      	cbnz	r3, 800bfb0 <_fflush_r+0x10>
 800bfaa:	2500      	movs	r5, #0
 800bfac:	4628      	mov	r0, r5
 800bfae:	bd38      	pop	{r3, r4, r5, pc}
 800bfb0:	b118      	cbz	r0, 800bfba <_fflush_r+0x1a>
 800bfb2:	6a03      	ldr	r3, [r0, #32]
 800bfb4:	b90b      	cbnz	r3, 800bfba <_fflush_r+0x1a>
 800bfb6:	f7ff f973 	bl	800b2a0 <__sinit>
 800bfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0f3      	beq.n	800bfaa <_fflush_r+0xa>
 800bfc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bfc4:	07d0      	lsls	r0, r2, #31
 800bfc6:	d404      	bmi.n	800bfd2 <_fflush_r+0x32>
 800bfc8:	0599      	lsls	r1, r3, #22
 800bfca:	d402      	bmi.n	800bfd2 <_fflush_r+0x32>
 800bfcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfce:	f7ff fc3a 	bl	800b846 <__retarget_lock_acquire_recursive>
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	f7ff ff5f 	bl	800be98 <__sflush_r>
 800bfda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bfdc:	07da      	lsls	r2, r3, #31
 800bfde:	4605      	mov	r5, r0
 800bfe0:	d4e4      	bmi.n	800bfac <_fflush_r+0xc>
 800bfe2:	89a3      	ldrh	r3, [r4, #12]
 800bfe4:	059b      	lsls	r3, r3, #22
 800bfe6:	d4e1      	bmi.n	800bfac <_fflush_r+0xc>
 800bfe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfea:	f7ff fc2d 	bl	800b848 <__retarget_lock_release_recursive>
 800bfee:	e7dd      	b.n	800bfac <_fflush_r+0xc>

0800bff0 <__swhatbuf_r>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	460c      	mov	r4, r1
 800bff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff8:	2900      	cmp	r1, #0
 800bffa:	b096      	sub	sp, #88	@ 0x58
 800bffc:	4615      	mov	r5, r2
 800bffe:	461e      	mov	r6, r3
 800c000:	da0d      	bge.n	800c01e <__swhatbuf_r+0x2e>
 800c002:	89a3      	ldrh	r3, [r4, #12]
 800c004:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c008:	f04f 0100 	mov.w	r1, #0
 800c00c:	bf14      	ite	ne
 800c00e:	2340      	movne	r3, #64	@ 0x40
 800c010:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c014:	2000      	movs	r0, #0
 800c016:	6031      	str	r1, [r6, #0]
 800c018:	602b      	str	r3, [r5, #0]
 800c01a:	b016      	add	sp, #88	@ 0x58
 800c01c:	bd70      	pop	{r4, r5, r6, pc}
 800c01e:	466a      	mov	r2, sp
 800c020:	f000 f87c 	bl	800c11c <_fstat_r>
 800c024:	2800      	cmp	r0, #0
 800c026:	dbec      	blt.n	800c002 <__swhatbuf_r+0x12>
 800c028:	9901      	ldr	r1, [sp, #4]
 800c02a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c02e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c032:	4259      	negs	r1, r3
 800c034:	4159      	adcs	r1, r3
 800c036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c03a:	e7eb      	b.n	800c014 <__swhatbuf_r+0x24>

0800c03c <__smakebuf_r>:
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c040:	079d      	lsls	r5, r3, #30
 800c042:	4606      	mov	r6, r0
 800c044:	460c      	mov	r4, r1
 800c046:	d507      	bpl.n	800c058 <__smakebuf_r+0x1c>
 800c048:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	6123      	str	r3, [r4, #16]
 800c050:	2301      	movs	r3, #1
 800c052:	6163      	str	r3, [r4, #20]
 800c054:	b003      	add	sp, #12
 800c056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c058:	ab01      	add	r3, sp, #4
 800c05a:	466a      	mov	r2, sp
 800c05c:	f7ff ffc8 	bl	800bff0 <__swhatbuf_r>
 800c060:	9f00      	ldr	r7, [sp, #0]
 800c062:	4605      	mov	r5, r0
 800c064:	4639      	mov	r1, r7
 800c066:	4630      	mov	r0, r6
 800c068:	f7ff f802 	bl	800b070 <_malloc_r>
 800c06c:	b948      	cbnz	r0, 800c082 <__smakebuf_r+0x46>
 800c06e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c072:	059a      	lsls	r2, r3, #22
 800c074:	d4ee      	bmi.n	800c054 <__smakebuf_r+0x18>
 800c076:	f023 0303 	bic.w	r3, r3, #3
 800c07a:	f043 0302 	orr.w	r3, r3, #2
 800c07e:	81a3      	strh	r3, [r4, #12]
 800c080:	e7e2      	b.n	800c048 <__smakebuf_r+0xc>
 800c082:	89a3      	ldrh	r3, [r4, #12]
 800c084:	6020      	str	r0, [r4, #0]
 800c086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c08a:	81a3      	strh	r3, [r4, #12]
 800c08c:	9b01      	ldr	r3, [sp, #4]
 800c08e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c092:	b15b      	cbz	r3, 800c0ac <__smakebuf_r+0x70>
 800c094:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c098:	4630      	mov	r0, r6
 800c09a:	f000 f851 	bl	800c140 <_isatty_r>
 800c09e:	b128      	cbz	r0, 800c0ac <__smakebuf_r+0x70>
 800c0a0:	89a3      	ldrh	r3, [r4, #12]
 800c0a2:	f023 0303 	bic.w	r3, r3, #3
 800c0a6:	f043 0301 	orr.w	r3, r3, #1
 800c0aa:	81a3      	strh	r3, [r4, #12]
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	431d      	orrs	r5, r3
 800c0b0:	81a5      	strh	r5, [r4, #12]
 800c0b2:	e7cf      	b.n	800c054 <__smakebuf_r+0x18>

0800c0b4 <_putc_r>:
 800c0b4:	b570      	push	{r4, r5, r6, lr}
 800c0b6:	460d      	mov	r5, r1
 800c0b8:	4614      	mov	r4, r2
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	b118      	cbz	r0, 800c0c6 <_putc_r+0x12>
 800c0be:	6a03      	ldr	r3, [r0, #32]
 800c0c0:	b90b      	cbnz	r3, 800c0c6 <_putc_r+0x12>
 800c0c2:	f7ff f8ed 	bl	800b2a0 <__sinit>
 800c0c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0c8:	07d8      	lsls	r0, r3, #31
 800c0ca:	d405      	bmi.n	800c0d8 <_putc_r+0x24>
 800c0cc:	89a3      	ldrh	r3, [r4, #12]
 800c0ce:	0599      	lsls	r1, r3, #22
 800c0d0:	d402      	bmi.n	800c0d8 <_putc_r+0x24>
 800c0d2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0d4:	f7ff fbb7 	bl	800b846 <__retarget_lock_acquire_recursive>
 800c0d8:	68a3      	ldr	r3, [r4, #8]
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	60a3      	str	r3, [r4, #8]
 800c0e0:	da05      	bge.n	800c0ee <_putc_r+0x3a>
 800c0e2:	69a2      	ldr	r2, [r4, #24]
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	db12      	blt.n	800c10e <_putc_r+0x5a>
 800c0e8:	b2eb      	uxtb	r3, r5
 800c0ea:	2b0a      	cmp	r3, #10
 800c0ec:	d00f      	beq.n	800c10e <_putc_r+0x5a>
 800c0ee:	6823      	ldr	r3, [r4, #0]
 800c0f0:	1c5a      	adds	r2, r3, #1
 800c0f2:	6022      	str	r2, [r4, #0]
 800c0f4:	701d      	strb	r5, [r3, #0]
 800c0f6:	b2ed      	uxtb	r5, r5
 800c0f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0fa:	07da      	lsls	r2, r3, #31
 800c0fc:	d405      	bmi.n	800c10a <_putc_r+0x56>
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	059b      	lsls	r3, r3, #22
 800c102:	d402      	bmi.n	800c10a <_putc_r+0x56>
 800c104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c106:	f7ff fb9f 	bl	800b848 <__retarget_lock_release_recursive>
 800c10a:	4628      	mov	r0, r5
 800c10c:	bd70      	pop	{r4, r5, r6, pc}
 800c10e:	4629      	mov	r1, r5
 800c110:	4622      	mov	r2, r4
 800c112:	4630      	mov	r0, r6
 800c114:	f7ff fa69 	bl	800b5ea <__swbuf_r>
 800c118:	4605      	mov	r5, r0
 800c11a:	e7ed      	b.n	800c0f8 <_putc_r+0x44>

0800c11c <_fstat_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d07      	ldr	r5, [pc, #28]	@ (800c13c <_fstat_r+0x20>)
 800c120:	2300      	movs	r3, #0
 800c122:	4604      	mov	r4, r0
 800c124:	4608      	mov	r0, r1
 800c126:	4611      	mov	r1, r2
 800c128:	602b      	str	r3, [r5, #0]
 800c12a:	f7f6 fc78 	bl	8002a1e <_fstat>
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	d102      	bne.n	800c138 <_fstat_r+0x1c>
 800c132:	682b      	ldr	r3, [r5, #0]
 800c134:	b103      	cbz	r3, 800c138 <_fstat_r+0x1c>
 800c136:	6023      	str	r3, [r4, #0]
 800c138:	bd38      	pop	{r3, r4, r5, pc}
 800c13a:	bf00      	nop
 800c13c:	20000af8 	.word	0x20000af8

0800c140 <_isatty_r>:
 800c140:	b538      	push	{r3, r4, r5, lr}
 800c142:	4d06      	ldr	r5, [pc, #24]	@ (800c15c <_isatty_r+0x1c>)
 800c144:	2300      	movs	r3, #0
 800c146:	4604      	mov	r4, r0
 800c148:	4608      	mov	r0, r1
 800c14a:	602b      	str	r3, [r5, #0]
 800c14c:	f7f6 fc77 	bl	8002a3e <_isatty>
 800c150:	1c43      	adds	r3, r0, #1
 800c152:	d102      	bne.n	800c15a <_isatty_r+0x1a>
 800c154:	682b      	ldr	r3, [r5, #0]
 800c156:	b103      	cbz	r3, 800c15a <_isatty_r+0x1a>
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	bd38      	pop	{r3, r4, r5, pc}
 800c15c:	20000af8 	.word	0x20000af8

0800c160 <_init>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	bf00      	nop
 800c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c166:	bc08      	pop	{r3}
 800c168:	469e      	mov	lr, r3
 800c16a:	4770      	bx	lr

0800c16c <_fini>:
 800c16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16e:	bf00      	nop
 800c170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c172:	bc08      	pop	{r3}
 800c174:	469e      	mov	lr, r3
 800c176:	4770      	bx	lr
