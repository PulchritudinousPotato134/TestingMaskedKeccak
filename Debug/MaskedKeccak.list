
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3c4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  0800f558  0800f558  00010558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9fc  0800f9fc  00011088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f9fc  0800f9fc  000109fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa04  0800fa04  00011088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa04  0800fa04  00010a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fa08  0800fa08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800fa0c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  00011088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  00011088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba8d  00000000  00000000  000110b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a7d  00000000  00000000  0002cb45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  000315c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000117a  00000000  00000000  00032ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00007239  00000000  00000000  00033e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020830  00000000  00000000  0003b05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f8a  00000000  00000000  0005b88b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012d815  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006804  00000000  00000000  0012d858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0013405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f53c 	.word	0x0800f53c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800f53c 	.word	0x0800f53c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <print_keccak_state>:
#include <stdint.h>
#include "fips202.h"
#include "structs.h"
#include <inttypes.h>

void print_keccak_state(uint64_t *state, const char *label, int round) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
    printf("== %s (Round %d) ==\r\n", label, round);
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	68b9      	ldr	r1, [r7, #8]
 80005ac:	4812      	ldr	r0, [pc, #72]	@ (80005f8 <print_keccak_state+0x5c>)
 80005ae:	f00e f89b 	bl	800e6e8 <iprintf>
    for (int i = 0; i < 25; i++) {
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
 80005b6:	e017      	b.n	80005e8 <print_keccak_state+0x4c>
        uint64_t val = state[i];
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	68fa      	ldr	r2, [r7, #12]
 80005be:	4413      	add	r3, r2
 80005c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
        printf("State[%02d]: %08lx%08lx\r\n", i,
               (unsigned long)(val >> 32),
 80005c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005cc:	f04f 0200 	mov.w	r2, #0
 80005d0:	f04f 0300 	mov.w	r3, #0
 80005d4:	000a      	movs	r2, r1
 80005d6:	2300      	movs	r3, #0
        printf("State[%02d]: %08lx%08lx\r\n", i,
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	69f9      	ldr	r1, [r7, #28]
 80005dc:	4807      	ldr	r0, [pc, #28]	@ (80005fc <print_keccak_state+0x60>)
 80005de:	f00e f883 	bl	800e6e8 <iprintf>
    for (int i = 0; i < 25; i++) {
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3301      	adds	r3, #1
 80005e6:	61fb      	str	r3, [r7, #28]
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	2b18      	cmp	r3, #24
 80005ec:	dde4      	ble.n	80005b8 <print_keccak_state+0x1c>
               (unsigned long)(val & 0xFFFFFFFF));
    }
}
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	0800f558 	.word	0x0800f558
 80005fc:	0800f570 	.word	0x0800f570

08000600 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 8000600:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000604:	b086      	sub	sp, #24
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 800060a:	f04f 0000 	mov.w	r0, #0
 800060e:	f04f 0100 	mov.w	r1, #0
 8000612:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 8000616:	2100      	movs	r1, #0
 8000618:	6179      	str	r1, [r7, #20]
 800061a:	e022      	b.n	8000662 <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	6979      	ldr	r1, [r7, #20]
 8000620:	4401      	add	r1, r0
 8000622:	7809      	ldrb	r1, [r1, #0]
 8000624:	b2c9      	uxtb	r1, r1
 8000626:	2000      	movs	r0, #0
 8000628:	460c      	mov	r4, r1
 800062a:	4605      	mov	r5, r0
 800062c:	6979      	ldr	r1, [r7, #20]
 800062e:	00c9      	lsls	r1, r1, #3
 8000630:	f1a1 0620 	sub.w	r6, r1, #32
 8000634:	f1c1 0020 	rsb	r0, r1, #32
 8000638:	fa05 f301 	lsl.w	r3, r5, r1
 800063c:	fa04 f606 	lsl.w	r6, r4, r6
 8000640:	4333      	orrs	r3, r6
 8000642:	fa24 f000 	lsr.w	r0, r4, r0
 8000646:	4303      	orrs	r3, r0
 8000648:	fa04 f201 	lsl.w	r2, r4, r1
 800064c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000650:	ea40 0802 	orr.w	r8, r0, r2
 8000654:	ea41 0903 	orr.w	r9, r1, r3
 8000658:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 800065c:	6979      	ldr	r1, [r7, #20]
 800065e:	3101      	adds	r1, #1
 8000660:	6179      	str	r1, [r7, #20]
 8000662:	6979      	ldr	r1, [r7, #20]
 8000664:	2907      	cmp	r1, #7
 8000666:	d9d9      	bls.n	800061c <load64+0x1c>

  return r;
 8000668:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800066c:	4610      	mov	r0, r2
 800066e:	4619      	mov	r1, r3
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000678:	4770      	bx	lr

0800067a <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800067a:	b4f0      	push	{r4, r5, r6, r7}
 800067c:	b086      	sub	sp, #24
 800067e:	af00      	add	r7, sp, #0
 8000680:	60f8      	str	r0, [r7, #12]
 8000682:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 8000686:	2300      	movs	r3, #0
 8000688:	617b      	str	r3, [r7, #20]
 800068a:	e019      	b.n	80006c0 <store64+0x46>
    x[i] = u >> 8*i;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	00d9      	lsls	r1, r3, #3
 8000690:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000694:	f1c1 0620 	rsb	r6, r1, #32
 8000698:	f1a1 0020 	sub.w	r0, r1, #32
 800069c:	fa22 f401 	lsr.w	r4, r2, r1
 80006a0:	fa03 f606 	lsl.w	r6, r3, r6
 80006a4:	4334      	orrs	r4, r6
 80006a6:	fa23 f000 	lsr.w	r0, r3, r0
 80006aa:	4304      	orrs	r4, r0
 80006ac:	fa23 f501 	lsr.w	r5, r3, r1
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	4413      	add	r3, r2
 80006b6:	b2e2      	uxtb	r2, r4
 80006b8:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	3301      	adds	r3, #1
 80006be:	617b      	str	r3, [r7, #20]
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2b07      	cmp	r3, #7
 80006c4:	d9e2      	bls.n	800068c <store64+0x12>
}
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bcf0      	pop	{r4, r5, r6, r7}
 80006d0:	4770      	bx	lr
	...

080006d4 <KeccakF1600_StatePermute>:
*
**************************************************/


static void KeccakF1600_StatePermute(uint64_t state[25])
{
 80006d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006d8:	f6ad 4d54 	subw	sp, sp, #3156	@ 0xc54
 80006dc:	af00      	add	r7, sp, #0
 80006de:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80006e2:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80006e6:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 80006e8:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80006ec:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f6:	f507 6144 	add.w	r1, r7, #3136	@ 0xc40
 80006fa:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 80006fe:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000702:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800070c:	f607 4138 	addw	r1, r7, #3128	@ 0xc38
 8000710:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 8000714:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000718:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000722:	f507 6143 	add.w	r1, r7, #3120	@ 0xc30
 8000726:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 800072a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800072e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000738:	f607 4128 	addw	r1, r7, #3112	@ 0xc28
 800073c:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 8000740:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000744:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800074e:	f507 6142 	add.w	r1, r7, #3104	@ 0xc20
 8000752:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 8000756:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800075a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000764:	f607 4118 	addw	r1, r7, #3096	@ 0xc18
 8000768:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 800076c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000770:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800077a:	f507 6141 	add.w	r1, r7, #3088	@ 0xc10
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 8000782:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000786:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000790:	f607 4108 	addw	r1, r7, #3080	@ 0xc08
 8000794:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 8000798:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800079c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80007a6:	f507 6140 	add.w	r1, r7, #3072	@ 0xc00
 80007aa:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 80007ae:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80007b2:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80007bc:	f607 31f8 	addw	r1, r7, #3064	@ 0xbf8
 80007c0:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 80007c4:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80007c8:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80007d2:	f507 613f 	add.w	r1, r7, #3056	@ 0xbf0
 80007d6:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 80007da:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80007de:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80007e8:	f607 31e8 	addw	r1, r7, #3048	@ 0xbe8
 80007ec:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 80007f0:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80007f4:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80007fe:	f507 613e 	add.w	r1, r7, #3040	@ 0xbe0
 8000802:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 8000806:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800080a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8000814:	f607 31d8 	addw	r1, r7, #3032	@ 0xbd8
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 800081c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000820:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 800082a:	f507 613d 	add.w	r1, r7, #3024	@ 0xbd0
 800082e:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 8000832:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000836:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8000840:	f607 31c8 	addw	r1, r7, #3016	@ 0xbc8
 8000844:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 8000848:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800084c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8000856:	f507 613c 	add.w	r1, r7, #3008	@ 0xbc0
 800085a:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 800085e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000862:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800086c:	f607 31b8 	addw	r1, r7, #3000	@ 0xbb8
 8000870:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 8000874:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000878:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8000882:	f507 613b 	add.w	r1, r7, #2992	@ 0xbb0
 8000886:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 800088a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800088e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8000898:	f607 31a8 	addw	r1, r7, #2984	@ 0xba8
 800089c:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 80008a0:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80008a4:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 80008ae:	f507 613a 	add.w	r1, r7, #2976	@ 0xba0
 80008b2:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 80008b6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80008ba:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80008c4:	f607 3198 	addw	r1, r7, #2968	@ 0xb98
 80008c8:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 80008cc:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80008d0:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 80008da:	f507 6139 	add.w	r1, r7, #2960	@ 0xb90
 80008de:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 80008e2:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80008e6:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 80008f0:	f607 3188 	addw	r1, r7, #2952	@ 0xb88
 80008f4:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 80008f8:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80008fc:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 8000906:	f507 6138 	add.w	r1, r7, #2944	@ 0xb80
 800090a:	e9c1 2300 	strd	r2, r3, [r1]

        for(round = 0; round < NROUNDS; round += 2) {
 800090e:	2300      	movs	r3, #0
 8000910:	f8c7 3c4c 	str.w	r3, [r7, #3148]	@ 0xc4c
 8000914:	f003 b877 	b.w	8003a06 <KeccakF1600_StatePermute+0x3332>

        	// Debug: Start of round
        	            state[ 0] = Aba; state[ 1] = Abe; state[ 2] = Abi; state[ 3] = Abo; state[ 4] = Abu;
 8000918:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800091c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	f507 6344 	add.w	r3, r7, #3136	@ 0xc40
 8000926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800092a:	e9c1 2300 	strd	r2, r3, [r1]
 800092e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000932:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f103 0108 	add.w	r1, r3, #8
 800093c:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 8000940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000944:	e9c1 2300 	strd	r2, r3, [r1]
 8000948:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800094c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f103 0110 	add.w	r1, r3, #16
 8000956:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800095e:	e9c1 2300 	strd	r2, r3, [r1]
 8000962:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000966:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f103 0118 	add.w	r1, r3, #24
 8000970:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8000974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000978:	e9c1 2300 	strd	r2, r3, [r1]
 800097c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000980:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f103 0120 	add.w	r1, r3, #32
 800098a:	f507 6342 	add.w	r3, r7, #3104	@ 0xc20
 800098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000992:	e9c1 2300 	strd	r2, r3, [r1]
        	            state[ 5] = Aga; state[ 6] = Age; state[ 7] = Agi; state[ 8] = Ago; state[ 9] = Agu;
 8000996:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800099a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80009a4:	f607 4318 	addw	r3, r7, #3096	@ 0xc18
 80009a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ac:	e9c1 2300 	strd	r2, r3, [r1]
 80009b0:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80009b4:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80009be:	f507 6341 	add.w	r3, r7, #3088	@ 0xc10
 80009c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c6:	e9c1 2300 	strd	r2, r3, [r1]
 80009ca:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80009ce:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80009d8:	f607 4308 	addw	r3, r7, #3080	@ 0xc08
 80009dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e0:	e9c1 2300 	strd	r2, r3, [r1]
 80009e4:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80009e8:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80009f2:	f507 6340 	add.w	r3, r7, #3072	@ 0xc00
 80009f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fa:	e9c1 2300 	strd	r2, r3, [r1]
 80009fe:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000a02:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8000a0c:	f607 33f8 	addw	r3, r7, #3064	@ 0xbf8
 8000a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a14:	e9c1 2300 	strd	r2, r3, [r1]
        	            state[10] = Aka; state[11] = Ake; state[12] = Aki; state[13] = Ako; state[14] = Aku;
 8000a18:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000a1c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8000a26:	f507 633f 	add.w	r3, r7, #3056	@ 0xbf0
 8000a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a2e:	e9c1 2300 	strd	r2, r3, [r1]
 8000a32:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000a36:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8000a40:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 8000a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a48:	e9c1 2300 	strd	r2, r3, [r1]
 8000a4c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000a50:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8000a5a:	f507 633e 	add.w	r3, r7, #3040	@ 0xbe0
 8000a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a62:	e9c1 2300 	strd	r2, r3, [r1]
 8000a66:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000a6a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8000a74:	f607 33d8 	addw	r3, r7, #3032	@ 0xbd8
 8000a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7c:	e9c1 2300 	strd	r2, r3, [r1]
 8000a80:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000a84:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8000a8e:	f507 633d 	add.w	r3, r7, #3024	@ 0xbd0
 8000a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a96:	e9c1 2300 	strd	r2, r3, [r1]
        	            state[15] = Ama; state[16] = Ame; state[17] = Ami; state[18] = Amo; state[19] = Amu;
 8000a9a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000a9e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8000aa8:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8000aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab0:	e9c1 2300 	strd	r2, r3, [r1]
 8000ab4:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000ab8:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8000ac2:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 8000ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aca:	e9c1 2300 	strd	r2, r3, [r1]
 8000ace:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000ad2:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8000adc:	f607 33b8 	addw	r3, r7, #3000	@ 0xbb8
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	e9c1 2300 	strd	r2, r3, [r1]
 8000ae8:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000aec:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8000af6:	f507 633b 	add.w	r3, r7, #2992	@ 0xbb0
 8000afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afe:	e9c1 2300 	strd	r2, r3, [r1]
 8000b02:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000b06:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8000b10:	f607 33a8 	addw	r3, r7, #2984	@ 0xba8
 8000b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b18:	e9c1 2300 	strd	r2, r3, [r1]
        	            state[20] = Asa; state[21] = Ase; state[22] = Asi; state[23] = Aso; state[24] = Asu;
 8000b1c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000b20:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 8000b2a:	f507 633a 	add.w	r3, r7, #2976	@ 0xba0
 8000b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b32:	e9c1 2300 	strd	r2, r3, [r1]
 8000b36:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000b3a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 8000b44:	f607 3398 	addw	r3, r7, #2968	@ 0xb98
 8000b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4c:	e9c1 2300 	strd	r2, r3, [r1]
 8000b50:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000b54:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 8000b5e:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 8000b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b66:	e9c1 2300 	strd	r2, r3, [r1]
 8000b6a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000b6e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8000b78:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b80:	e9c1 2300 	strd	r2, r3, [r1]
 8000b84:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000b88:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8000b92:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8000b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9a:	e9c1 2300 	strd	r2, r3, [r1]
        	            print_keccak_state(state, "Start of Round", round);
 8000b9e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8000ba2:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8000ba6:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	@ 0xc4c
 8000baa:	49fd      	ldr	r1, [pc, #1012]	@ (8000fa0 <KeccakF1600_StatePermute+0x8cc>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	f7ff fcf5 	bl	800059c <print_keccak_state>

            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8000bb2:	f507 6344 	add.w	r3, r7, #3136	@ 0xc40
 8000bb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bba:	f607 4318 	addw	r3, r7, #3096	@ 0xc18
 8000bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bc2:	ea80 0602 	eor.w	r6, r0, r2
 8000bc6:	f8c7 6990 	str.w	r6, [r7, #2448]	@ 0x990
 8000bca:	404b      	eors	r3, r1
 8000bcc:	f8c7 3994 	str.w	r3, [r7, #2452]	@ 0x994
 8000bd0:	f507 633f 	add.w	r3, r7, #3056	@ 0xbf0
 8000bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd8:	f8d7 1990 	ldr.w	r1, [r7, #2448]	@ 0x990
 8000bdc:	4051      	eors	r1, r2
 8000bde:	f8c7 1988 	str.w	r1, [r7, #2440]	@ 0x988
 8000be2:	f8d7 1994 	ldr.w	r1, [r7, #2452]	@ 0x994
 8000be6:	404b      	eors	r3, r1
 8000be8:	f8c7 398c 	str.w	r3, [r7, #2444]	@ 0x98c
 8000bec:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8000bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf4:	f8d7 1988 	ldr.w	r1, [r7, #2440]	@ 0x988
 8000bf8:	4051      	eors	r1, r2
 8000bfa:	f8c7 1980 	str.w	r1, [r7, #2432]	@ 0x980
 8000bfe:	f8d7 198c 	ldr.w	r1, [r7, #2444]	@ 0x98c
 8000c02:	404b      	eors	r3, r1
 8000c04:	f8c7 3984 	str.w	r3, [r7, #2436]	@ 0x984
 8000c08:	f507 633a 	add.w	r3, r7, #2976	@ 0xba0
 8000c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c10:	f8d7 1980 	ldr.w	r1, [r7, #2432]	@ 0x980
 8000c14:	4051      	eors	r1, r2
 8000c16:	f8c7 1548 	str.w	r1, [r7, #1352]	@ 0x548
 8000c1a:	f8d7 1984 	ldr.w	r1, [r7, #2436]	@ 0x984
 8000c1e:	404b      	eors	r3, r1
 8000c20:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 8000c24:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 8000c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2c:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8000c30:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8000c34:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 8000c38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c3c:	f507 6341 	add.w	r3, r7, #3088	@ 0xc10
 8000c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c44:	ea80 0602 	eor.w	r6, r0, r2
 8000c48:	f8c7 6978 	str.w	r6, [r7, #2424]	@ 0x978
 8000c4c:	404b      	eors	r3, r1
 8000c4e:	f8c7 397c 	str.w	r3, [r7, #2428]	@ 0x97c
 8000c52:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 8000c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5a:	f8d7 1978 	ldr.w	r1, [r7, #2424]	@ 0x978
 8000c5e:	4051      	eors	r1, r2
 8000c60:	f8c7 1970 	str.w	r1, [r7, #2416]	@ 0x970
 8000c64:	f8d7 197c 	ldr.w	r1, [r7, #2428]	@ 0x97c
 8000c68:	404b      	eors	r3, r1
 8000c6a:	f8c7 3974 	str.w	r3, [r7, #2420]	@ 0x974
 8000c6e:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	f8d7 1970 	ldr.w	r1, [r7, #2416]	@ 0x970
 8000c7a:	4051      	eors	r1, r2
 8000c7c:	f8c7 1968 	str.w	r1, [r7, #2408]	@ 0x968
 8000c80:	f8d7 1974 	ldr.w	r1, [r7, #2420]	@ 0x974
 8000c84:	404b      	eors	r3, r1
 8000c86:	f8c7 396c 	str.w	r3, [r7, #2412]	@ 0x96c
 8000c8a:	f607 3398 	addw	r3, r7, #2968	@ 0xb98
 8000c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c92:	f8d7 1968 	ldr.w	r1, [r7, #2408]	@ 0x968
 8000c96:	4051      	eors	r1, r2
 8000c98:	f8c7 1540 	str.w	r1, [r7, #1344]	@ 0x540
 8000c9c:	f8d7 196c 	ldr.w	r1, [r7, #2412]	@ 0x96c
 8000ca0:	404b      	eors	r3, r1
 8000ca2:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 8000ca6:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 8000caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cae:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8000cb2:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000cb6:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8000cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cbe:	f607 4308 	addw	r3, r7, #3080	@ 0xc08
 8000cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc6:	ea80 0602 	eor.w	r6, r0, r2
 8000cca:	f8c7 6960 	str.w	r6, [r7, #2400]	@ 0x960
 8000cce:	404b      	eors	r3, r1
 8000cd0:	f8c7 3964 	str.w	r3, [r7, #2404]	@ 0x964
 8000cd4:	f507 633e 	add.w	r3, r7, #3040	@ 0xbe0
 8000cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cdc:	f8d7 1960 	ldr.w	r1, [r7, #2400]	@ 0x960
 8000ce0:	4051      	eors	r1, r2
 8000ce2:	f8c7 1958 	str.w	r1, [r7, #2392]	@ 0x958
 8000ce6:	f8d7 1964 	ldr.w	r1, [r7, #2404]	@ 0x964
 8000cea:	404b      	eors	r3, r1
 8000cec:	f8c7 395c 	str.w	r3, [r7, #2396]	@ 0x95c
 8000cf0:	f607 33b8 	addw	r3, r7, #3000	@ 0xbb8
 8000cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf8:	f8d7 1958 	ldr.w	r1, [r7, #2392]	@ 0x958
 8000cfc:	4051      	eors	r1, r2
 8000cfe:	f8c7 1950 	str.w	r1, [r7, #2384]	@ 0x950
 8000d02:	f8d7 195c 	ldr.w	r1, [r7, #2396]	@ 0x95c
 8000d06:	404b      	eors	r3, r1
 8000d08:	f8c7 3954 	str.w	r3, [r7, #2388]	@ 0x954
 8000d0c:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 8000d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d14:	f8d7 1950 	ldr.w	r1, [r7, #2384]	@ 0x950
 8000d18:	4051      	eors	r1, r2
 8000d1a:	f8c7 1538 	str.w	r1, [r7, #1336]	@ 0x538
 8000d1e:	f8d7 1954 	ldr.w	r1, [r7, #2388]	@ 0x954
 8000d22:	404b      	eors	r3, r1
 8000d24:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8000d28:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8000d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d30:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8000d34:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000d38:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8000d3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d40:	f507 6340 	add.w	r3, r7, #3072	@ 0xc00
 8000d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d48:	ea80 0602 	eor.w	r6, r0, r2
 8000d4c:	f8c7 6948 	str.w	r6, [r7, #2376]	@ 0x948
 8000d50:	404b      	eors	r3, r1
 8000d52:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 8000d56:	f607 33d8 	addw	r3, r7, #3032	@ 0xbd8
 8000d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5e:	f8d7 1948 	ldr.w	r1, [r7, #2376]	@ 0x948
 8000d62:	4051      	eors	r1, r2
 8000d64:	f8c7 1940 	str.w	r1, [r7, #2368]	@ 0x940
 8000d68:	f8d7 194c 	ldr.w	r1, [r7, #2380]	@ 0x94c
 8000d6c:	404b      	eors	r3, r1
 8000d6e:	f8c7 3944 	str.w	r3, [r7, #2372]	@ 0x944
 8000d72:	f507 633b 	add.w	r3, r7, #2992	@ 0xbb0
 8000d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7a:	f8d7 1940 	ldr.w	r1, [r7, #2368]	@ 0x940
 8000d7e:	4051      	eors	r1, r2
 8000d80:	f8c7 1938 	str.w	r1, [r7, #2360]	@ 0x938
 8000d84:	f8d7 1944 	ldr.w	r1, [r7, #2372]	@ 0x944
 8000d88:	404b      	eors	r3, r1
 8000d8a:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 8000d8e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d96:	f8d7 1938 	ldr.w	r1, [r7, #2360]	@ 0x938
 8000d9a:	4051      	eors	r1, r2
 8000d9c:	f8c7 1530 	str.w	r1, [r7, #1328]	@ 0x530
 8000da0:	f8d7 193c 	ldr.w	r1, [r7, #2364]	@ 0x93c
 8000da4:	404b      	eors	r3, r1
 8000da6:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 8000daa:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8000db6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000dba:	f507 6342 	add.w	r3, r7, #3104	@ 0xc20
 8000dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dc2:	f607 33f8 	addw	r3, r7, #3064	@ 0xbf8
 8000dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dca:	ea80 0602 	eor.w	r6, r0, r2
 8000dce:	f8c7 6930 	str.w	r6, [r7, #2352]	@ 0x930
 8000dd2:	404b      	eors	r3, r1
 8000dd4:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 8000dd8:	f507 633d 	add.w	r3, r7, #3024	@ 0xbd0
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	f8d7 1930 	ldr.w	r1, [r7, #2352]	@ 0x930
 8000de4:	4051      	eors	r1, r2
 8000de6:	f8c7 1928 	str.w	r1, [r7, #2344]	@ 0x928
 8000dea:	f8d7 1934 	ldr.w	r1, [r7, #2356]	@ 0x934
 8000dee:	404b      	eors	r3, r1
 8000df0:	f8c7 392c 	str.w	r3, [r7, #2348]	@ 0x92c
 8000df4:	f607 33a8 	addw	r3, r7, #2984	@ 0xba8
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	f8d7 1928 	ldr.w	r1, [r7, #2344]	@ 0x928
 8000e00:	4051      	eors	r1, r2
 8000e02:	f8c7 1920 	str.w	r1, [r7, #2336]	@ 0x920
 8000e06:	f8d7 192c 	ldr.w	r1, [r7, #2348]	@ 0x92c
 8000e0a:	404b      	eors	r3, r1
 8000e0c:	f8c7 3924 	str.w	r3, [r7, #2340]	@ 0x924
 8000e10:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8000e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e18:	f8d7 1920 	ldr.w	r1, [r7, #2336]	@ 0x920
 8000e1c:	4051      	eors	r1, r2
 8000e1e:	f8c7 1528 	str.w	r1, [r7, #1320]	@ 0x528
 8000e22:	f8d7 1924 	ldr.w	r1, [r7, #2340]	@ 0x924
 8000e26:	404b      	eors	r3, r1
 8000e28:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8000e2c:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e34:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8000e38:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
 8000e3c:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8000e40:	0fda      	lsrs	r2, r3, #31
 8000e42:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	f8c7 391c 	str.w	r3, [r7, #2332]	@ 0x91c
 8000e4e:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8000e52:	0fda      	lsrs	r2, r3, #31
 8000e54:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	f8c7 3918 	str.w	r3, [r7, #2328]	@ 0x918
 8000e60:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	f8d7 1918 	ldr.w	r1, [r7, #2328]	@ 0x918
 8000e6c:	4051      	eors	r1, r2
 8000e6e:	f8c7 1520 	str.w	r1, [r7, #1312]	@ 0x520
 8000e72:	f8d7 191c 	ldr.w	r1, [r7, #2332]	@ 0x91c
 8000e76:	404b      	eors	r3, r1
 8000e78:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8000e7c:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e84:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 8000e88:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8000e8c:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8000e90:	0fda      	lsrs	r2, r3, #31
 8000e92:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	f8c7 3914 	str.w	r3, [r7, #2324]	@ 0x914
 8000e9e:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 8000ea2:	0fda      	lsrs	r2, r3, #31
 8000ea4:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	f8c7 3910 	str.w	r3, [r7, #2320]	@ 0x910
 8000eb0:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	f8d7 1910 	ldr.w	r1, [r7, #2320]	@ 0x910
 8000ebc:	4051      	eors	r1, r2
 8000ebe:	f8c7 1518 	str.w	r1, [r7, #1304]	@ 0x518
 8000ec2:	f8d7 1914 	ldr.w	r1, [r7, #2324]	@ 0x914
 8000ec6:	404b      	eors	r3, r1
 8000ec8:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8000ecc:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8000ed8:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8000edc:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8000ee0:	0fda      	lsrs	r2, r3, #31
 8000ee2:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	f8c7 390c 	str.w	r3, [r7, #2316]	@ 0x90c
 8000eee:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 8000ef2:	0fda      	lsrs	r2, r3, #31
 8000ef4:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4313      	orrs	r3, r2
 8000efc:	f8c7 3908 	str.w	r3, [r7, #2312]	@ 0x908
 8000f00:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8000f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f08:	f8d7 1908 	ldr.w	r1, [r7, #2312]	@ 0x908
 8000f0c:	4051      	eors	r1, r2
 8000f0e:	f8c7 1510 	str.w	r1, [r7, #1296]	@ 0x510
 8000f12:	f8d7 190c 	ldr.w	r1, [r7, #2316]	@ 0x90c
 8000f16:	404b      	eors	r3, r1
 8000f18:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 8000f1c:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f24:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 8000f28:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8000f2c:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 8000f30:	0fda      	lsrs	r2, r3, #31
 8000f32:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	f8c7 3904 	str.w	r3, [r7, #2308]	@ 0x904
 8000f3e:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8000f42:	0fda      	lsrs	r2, r3, #31
 8000f44:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	f8c7 3900 	str.w	r3, [r7, #2304]	@ 0x900
 8000f50:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f8d7 1900 	ldr.w	r1, [r7, #2304]	@ 0x900
 8000f5c:	4051      	eors	r1, r2
 8000f5e:	f8c7 1508 	str.w	r1, [r7, #1288]	@ 0x508
 8000f62:	f8d7 1904 	ldr.w	r1, [r7, #2308]	@ 0x904
 8000f66:	404b      	eors	r3, r1
 8000f68:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 8000f6c:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f74:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8000f78:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8000f7c:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 8000f80:	0fda      	lsrs	r2, r3, #31
 8000f82:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	@ 0xb7c
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	f8c7 38fc 	str.w	r3, [r7, #2300]	@ 0x8fc
 8000f8e:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	@ 0xb7c
 8000f92:	0fda      	lsrs	r2, r3, #31
 8000f94:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	e002      	b.n	8000fa4 <KeccakF1600_StatePermute+0x8d0>
 8000f9e:	bf00      	nop
 8000fa0:	0800f58c 	.word	0x0800f58c
 8000fa4:	f8c7 38f8 	str.w	r3, [r7, #2296]	@ 0x8f8
 8000fa8:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8000fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb0:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	@ 0x8f8
 8000fb4:	4051      	eors	r1, r2
 8000fb6:	f8c7 1500 	str.w	r1, [r7, #1280]	@ 0x500
 8000fba:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	@ 0x8fc
 8000fbe:	404b      	eors	r3, r1
 8000fc0:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8000fc4:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8000fd0:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 8000fd4:	f507 6344 	add.w	r3, r7, #3136	@ 0xc40
 8000fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fdc:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	ea80 0602 	eor.w	r6, r0, r2
 8000fe8:	f8c7 64f8 	str.w	r6, [r7, #1272]	@ 0x4f8
 8000fec:	404b      	eors	r3, r1
 8000fee:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 8000ff2:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8000ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffa:	f507 6144 	add.w	r1, r7, #3136	@ 0xc40
 8000ffe:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8001002:	f507 6344 	add.w	r3, r7, #3136	@ 0xc40
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 800100e:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8001012:	f507 6341 	add.w	r3, r7, #3088	@ 0xc10
 8001016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800101a:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	ea80 0602 	eor.w	r6, r0, r2
 8001026:	f8c7 64f0 	str.w	r6, [r7, #1264]	@ 0x4f0
 800102a:	404b      	eors	r3, r1
 800102c:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8001030:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f507 6141 	add.w	r1, r7, #3088	@ 0xc10
 800103c:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 8001040:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 8001044:	031a      	lsls	r2, r3, #12
 8001046:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 800104a:	0d1b      	lsrs	r3, r3, #20
 800104c:	4313      	orrs	r3, r2
 800104e:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8001052:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	@ 0xc10
 8001056:	031a      	lsls	r2, r3, #12
 8001058:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	@ 0xc14
 800105c:	0d1b      	lsrs	r3, r3, #20
 800105e:	4313      	orrs	r3, r2
 8001060:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8001064:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8001070:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 8001074:	f507 633e 	add.w	r3, r7, #3040	@ 0xbe0
 8001078:	e9d3 0100 	ldrd	r0, r1, [r3]
 800107c:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	ea80 0602 	eor.w	r6, r0, r2
 8001088:	f8c7 64e0 	str.w	r6, [r7, #1248]	@ 0x4e0
 800108c:	404b      	eors	r3, r1
 800108e:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 8001092:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f507 613e 	add.w	r1, r7, #3040	@ 0xbe0
 800109e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 80010a2:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	@ 0xbe4
 80010a6:	02da      	lsls	r2, r3, #11
 80010a8:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	@ 0xbe0
 80010ac:	0d5b      	lsrs	r3, r3, #21
 80010ae:	4313      	orrs	r3, r2
 80010b0:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 80010b4:	f8d7 3be0 	ldr.w	r3, [r7, #3040]	@ 0xbe0
 80010b8:	02da      	lsls	r2, r3, #11
 80010ba:	f8d7 3be4 	ldr.w	r3, [r7, #3044]	@ 0xbe4
 80010be:	0d5b      	lsrs	r3, r3, #21
 80010c0:	4313      	orrs	r3, r2
 80010c2:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 80010c6:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 80010d2:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 80010d6:	f507 633b 	add.w	r3, r7, #2992	@ 0xbb0
 80010da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010de:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	ea80 0602 	eor.w	r6, r0, r2
 80010ea:	f8c7 64d0 	str.w	r6, [r7, #1232]	@ 0x4d0
 80010ee:	404b      	eors	r3, r1
 80010f0:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80010f4:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f507 613b 	add.w	r1, r7, #2992	@ 0xbb0
 8001100:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 8001104:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	@ 0xbb0
 8001108:	0ada      	lsrs	r2, r3, #11
 800110a:	f8d7 3bb4 	ldr.w	r3, [r7, #2996]	@ 0xbb4
 800110e:	055b      	lsls	r3, r3, #21
 8001110:	4313      	orrs	r3, r2
 8001112:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8001116:	f8d7 3bb4 	ldr.w	r3, [r7, #2996]	@ 0xbb4
 800111a:	0ada      	lsrs	r2, r3, #11
 800111c:	f8d7 3bb0 	ldr.w	r3, [r7, #2992]	@ 0xbb0
 8001120:	055b      	lsls	r3, r3, #21
 8001122:	4313      	orrs	r3, r2
 8001124:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8001128:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8001134:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 8001138:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 800113c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001140:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	ea80 0602 	eor.w	r6, r0, r2
 800114c:	f8c7 64c0 	str.w	r6, [r7, #1216]	@ 0x4c0
 8001150:	404b      	eors	r3, r1
 8001152:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001156:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f507 6138 	add.w	r1, r7, #2944	@ 0xb80
 8001162:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 8001166:	f8d7 3b80 	ldr.w	r3, [r7, #2944]	@ 0xb80
 800116a:	0c9a      	lsrs	r2, r3, #18
 800116c:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8001170:	039b      	lsls	r3, r3, #14
 8001172:	4313      	orrs	r3, r2
 8001174:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001178:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 800117c:	0c9a      	lsrs	r2, r3, #18
 800117e:	f8d7 3b80 	ldr.w	r3, [r7, #2944]	@ 0xb80
 8001182:	039b      	lsls	r3, r3, #14
 8001184:	4313      	orrs	r3, r2
 8001186:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
 800118a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8001196:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 800119a:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	43d1      	mvns	r1, r2
 80011a4:	f8c7 18f0 	str.w	r1, [r7, #2288]	@ 0x8f0
 80011a8:	43db      	mvns	r3, r3
 80011aa:	f8c7 38f4 	str.w	r3, [r7, #2292]	@ 0x8f4
 80011ae:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	@ 0x8f0
 80011ba:	4011      	ands	r1, r2
 80011bc:	f8c7 18e8 	str.w	r1, [r7, #2280]	@ 0x8e8
 80011c0:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	@ 0x8f4
 80011c4:	400b      	ands	r3, r1
 80011c6:	f8c7 38ec 	str.w	r3, [r7, #2284]	@ 0x8ec
 80011ca:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	@ 0x8e8
 80011d6:	4051      	eors	r1, r2
 80011d8:	f8c7 14b0 	str.w	r1, [r7, #1200]	@ 0x4b0
 80011dc:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	@ 0x8ec
 80011e0:	404b      	eors	r3, r1
 80011e2:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 80011e6:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 80011f2:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80011f6:	4afd      	ldr	r2, [pc, #1012]	@ (80015ec <KeccakF1600_StatePermute+0xf18>)
 80011f8:	f8d7 3c4c 	ldr.w	r3, [r7, #3148]	@ 0xc4c
 80011fc:	00db      	lsls	r3, r3, #3
 80011fe:	4413      	add	r3, r2
 8001200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001204:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	ea82 0600 	eor.w	r6, r2, r0
 8001210:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8
 8001214:	404b      	eors	r3, r1
 8001216:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 800121a:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 8001226:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 800122a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	43d1      	mvns	r1, r2
 8001234:	f8c7 18e0 	str.w	r1, [r7, #2272]	@ 0x8e0
 8001238:	43db      	mvns	r3, r3
 800123a:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
 800123e:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	@ 0x8e0
 800124a:	4011      	ands	r1, r2
 800124c:	f8c7 18d8 	str.w	r1, [r7, #2264]	@ 0x8d8
 8001250:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	@ 0x8e4
 8001254:	400b      	ands	r3, r1
 8001256:	f8c7 38dc 	str.w	r3, [r7, #2268]	@ 0x8dc
 800125a:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	@ 0x8d8
 8001266:	4051      	eors	r1, r2
 8001268:	f8c7 14a0 	str.w	r1, [r7, #1184]	@ 0x4a0
 800126c:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	@ 0x8dc
 8001270:	404b      	eors	r3, r1
 8001272:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 8001276:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8001282:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 8001286:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800128a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128e:	43d1      	mvns	r1, r2
 8001290:	f8c7 18d0 	str.w	r1, [r7, #2256]	@ 0x8d0
 8001294:	43db      	mvns	r3, r3
 8001296:	f8c7 38d4 	str.w	r3, [r7, #2260]	@ 0x8d4
 800129a:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	@ 0x8d0
 80012a6:	4011      	ands	r1, r2
 80012a8:	f8c7 18c8 	str.w	r1, [r7, #2248]	@ 0x8c8
 80012ac:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	@ 0x8d4
 80012b0:	400b      	ands	r3, r1
 80012b2:	f8c7 38cc 	str.w	r3, [r7, #2252]	@ 0x8cc
 80012b6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	@ 0x8c8
 80012c2:	4051      	eors	r1, r2
 80012c4:	f8c7 1498 	str.w	r1, [r7, #1176]	@ 0x498
 80012c8:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	@ 0x8cc
 80012cc:	404b      	eors	r3, r1
 80012ce:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 80012d2:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 80012de:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 80012e2:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	43d1      	mvns	r1, r2
 80012ec:	f8c7 18c0 	str.w	r1, [r7, #2240]	@ 0x8c0
 80012f0:	43db      	mvns	r3, r3
 80012f2:	f8c7 38c4 	str.w	r3, [r7, #2244]	@ 0x8c4
 80012f6:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	@ 0x8c0
 8001302:	4011      	ands	r1, r2
 8001304:	f8c7 18b8 	str.w	r1, [r7, #2232]	@ 0x8b8
 8001308:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	@ 0x8c4
 800130c:	400b      	ands	r3, r1
 800130e:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
 8001312:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	@ 0x8b8
 800131e:	4051      	eors	r1, r2
 8001320:	f8c7 1490 	str.w	r1, [r7, #1168]	@ 0x490
 8001324:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	@ 0x8bc
 8001328:	404b      	eors	r3, r1
 800132a:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 800132e:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 800133a:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 800133e:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	43d1      	mvns	r1, r2
 8001348:	f8c7 18b0 	str.w	r1, [r7, #2224]	@ 0x8b0
 800134c:	43db      	mvns	r3, r3
 800134e:	f8c7 38b4 	str.w	r3, [r7, #2228]	@ 0x8b4
 8001352:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	@ 0x8b0
 800135e:	4011      	ands	r1, r2
 8001360:	f8c7 18a8 	str.w	r1, [r7, #2216]	@ 0x8a8
 8001364:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	@ 0x8b4
 8001368:	400b      	ands	r3, r1
 800136a:	f8c7 38ac 	str.w	r3, [r7, #2220]	@ 0x8ac
 800136e:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	@ 0x8a8
 800137a:	4051      	eors	r1, r2
 800137c:	f8c7 1488 	str.w	r1, [r7, #1160]	@ 0x488
 8001380:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	@ 0x8ac
 8001384:	404b      	eors	r3, r1
 8001386:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 800138a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8001396:	e9c1 2300 	strd	r2, r3, [r1]

            print_keccak_state((uint64_t[]){Eba,Ebe,Ebi,Ebo,Ebu}, "After Theta", round);
 800139a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800139e:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 80013a2:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9c1 2300 	strd	r2, r3, [r1]
 80013ae:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80013b2:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 80013b6:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80013c2:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80013c6:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 80013ca:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80013d6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80013da:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 80013de:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80013ea:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80013ee:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 80013f2:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 80013f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
 80013fe:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 8001402:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	@ 0xc4c
 8001406:	497a      	ldr	r1, [pc, #488]	@ (80015f0 <KeccakF1600_StatePermute+0xf1c>)
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8c7 	bl	800059c <print_keccak_state>

            Abo ^= Do;
 800140e:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8001412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001416:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	ea80 0602 	eor.w	r6, r0, r2
 8001422:	f8c7 6480 	str.w	r6, [r7, #1152]	@ 0x480
 8001426:	404b      	eors	r3, r1
 8001428:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 800142c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f607 4128 	addw	r1, r7, #3112	@ 0xc28
 8001438:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 800143c:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	@ 0xc28
 8001440:	091a      	lsrs	r2, r3, #4
 8001442:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	@ 0xc2c
 8001446:	071b      	lsls	r3, r3, #28
 8001448:	4313      	orrs	r3, r2
 800144a:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
 800144e:	f8d7 3c2c 	ldr.w	r3, [r7, #3116]	@ 0xc2c
 8001452:	091a      	lsrs	r2, r3, #4
 8001454:	f8d7 3c28 	ldr.w	r3, [r7, #3112]	@ 0xc28
 8001458:	071b      	lsls	r3, r3, #28
 800145a:	4313      	orrs	r3, r2
 800145c:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
 8001460:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 800146c:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 8001470:	f607 33f8 	addw	r3, r7, #3064	@ 0xbf8
 8001474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001478:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 800147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001480:	ea80 0602 	eor.w	r6, r0, r2
 8001484:	f8c7 6470 	str.w	r6, [r7, #1136]	@ 0x470
 8001488:	404b      	eors	r3, r1
 800148a:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
 800148e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f607 31f8 	addw	r1, r7, #3064	@ 0xbf8
 800149a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 800149e:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	@ 0xbf8
 80014a2:	0b1a      	lsrs	r2, r3, #12
 80014a4:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	@ 0xbfc
 80014a8:	051b      	lsls	r3, r3, #20
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 80014b0:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	@ 0xbfc
 80014b4:	0b1a      	lsrs	r2, r3, #12
 80014b6:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	@ 0xbf8
 80014ba:	051b      	lsls	r3, r3, #20
 80014bc:	4313      	orrs	r3, r2
 80014be:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
 80014c2:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 80014ce:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 80014d2:	f507 633f 	add.w	r3, r7, #3056	@ 0xbf0
 80014d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014da:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	ea80 0602 	eor.w	r6, r0, r2
 80014e6:	f8c7 6460 	str.w	r6, [r7, #1120]	@ 0x460
 80014ea:	404b      	eors	r3, r1
 80014ec:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 80014f0:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f507 613f 	add.w	r1, r7, #3056	@ 0xbf0
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 8001500:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	@ 0xbf0
 8001504:	0f5a      	lsrs	r2, r3, #29
 8001506:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4313      	orrs	r3, r2
 800150e:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 8001512:	f8d7 3bf4 	ldr.w	r3, [r7, #3060]	@ 0xbf4
 8001516:	0f5a      	lsrs	r2, r3, #29
 8001518:	f8d7 3bf0 	ldr.w	r3, [r7, #3056]	@ 0xbf0
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	4313      	orrs	r3, r2
 8001520:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 8001524:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8001530:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 8001534:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 8001538:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153c:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	ea80 0602 	eor.w	r6, r0, r2
 8001548:	f8c7 6450 	str.w	r6, [r7, #1104]	@ 0x450
 800154c:	404b      	eors	r3, r1
 800154e:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 8001552:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155a:	f507 613c 	add.w	r1, r7, #3008	@ 0xbc0
 800155e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 8001562:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 8001566:	035a      	lsls	r2, r3, #13
 8001568:	f8d7 3bc0 	ldr.w	r3, [r7, #3008]	@ 0xbc0
 800156c:	0cdb      	lsrs	r3, r3, #19
 800156e:	4313      	orrs	r3, r2
 8001570:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 8001574:	f8d7 3bc0 	ldr.w	r3, [r7, #3008]	@ 0xbc0
 8001578:	035a      	lsls	r2, r3, #13
 800157a:	f8d7 3bc4 	ldr.w	r3, [r7, #3012]	@ 0xbc4
 800157e:	0cdb      	lsrs	r3, r3, #19
 8001580:	4313      	orrs	r3, r2
 8001582:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 8001586:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8001592:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 8001596:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 800159a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800159e:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 80015a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a6:	ea80 0602 	eor.w	r6, r0, r2
 80015aa:	f8c7 6440 	str.w	r6, [r7, #1088]	@ 0x440
 80015ae:	404b      	eors	r3, r1
 80015b0:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 80015b4:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f507 6139 	add.w	r1, r7, #2960	@ 0xb90
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 80015c4:	f8d7 3b94 	ldr.w	r3, [r7, #2964]	@ 0xb94
 80015c8:	075a      	lsls	r2, r3, #29
 80015ca:	f8d7 3b90 	ldr.w	r3, [r7, #2960]	@ 0xb90
 80015ce:	08db      	lsrs	r3, r3, #3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 80015d6:	f8d7 3b90 	ldr.w	r3, [r7, #2960]	@ 0xb90
 80015da:	075a      	lsls	r2, r3, #29
 80015dc:	f8d7 3b94 	ldr.w	r3, [r7, #2964]	@ 0xb94
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 80015e8:	e004      	b.n	80015f4 <KeccakF1600_StatePermute+0xf20>
 80015ea:	bf00      	nop
 80015ec:	0800f810 	.word	0x0800f810
 80015f0:	0800f59c 	.word	0x0800f59c
 80015f4:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8001600:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 8001604:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	43d1      	mvns	r1, r2
 800160e:	f8c7 18a0 	str.w	r1, [r7, #2208]	@ 0x8a0
 8001612:	43db      	mvns	r3, r3
 8001614:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
 8001618:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	@ 0x8a0
 8001624:	4011      	ands	r1, r2
 8001626:	f8c7 1898 	str.w	r1, [r7, #2200]	@ 0x898
 800162a:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	@ 0x8a4
 800162e:	400b      	ands	r3, r1
 8001630:	f8c7 389c 	str.w	r3, [r7, #2204]	@ 0x89c
 8001634:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f8d7 1898 	ldr.w	r1, [r7, #2200]	@ 0x898
 8001640:	4051      	eors	r1, r2
 8001642:	f8c7 1430 	str.w	r1, [r7, #1072]	@ 0x430
 8001646:	f8d7 189c 	ldr.w	r1, [r7, #2204]	@ 0x89c
 800164a:	404b      	eors	r3, r1
 800164c:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8001650:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 800165c:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 8001660:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8001664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001668:	43d1      	mvns	r1, r2
 800166a:	f8c7 1890 	str.w	r1, [r7, #2192]	@ 0x890
 800166e:	43db      	mvns	r3, r3
 8001670:	f8c7 3894 	str.w	r3, [r7, #2196]	@ 0x894
 8001674:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f8d7 1890 	ldr.w	r1, [r7, #2192]	@ 0x890
 8001680:	4011      	ands	r1, r2
 8001682:	f8c7 1888 	str.w	r1, [r7, #2184]	@ 0x888
 8001686:	f8d7 1894 	ldr.w	r1, [r7, #2196]	@ 0x894
 800168a:	400b      	ands	r3, r1
 800168c:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
 8001690:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f8d7 1888 	ldr.w	r1, [r7, #2184]	@ 0x888
 800169c:	4051      	eors	r1, r2
 800169e:	f8c7 1428 	str.w	r1, [r7, #1064]	@ 0x428
 80016a2:	f8d7 188c 	ldr.w	r1, [r7, #2188]	@ 0x88c
 80016a6:	404b      	eors	r3, r1
 80016a8:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 80016ac:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 80016b8:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 80016bc:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	43d1      	mvns	r1, r2
 80016c6:	f8c7 1880 	str.w	r1, [r7, #2176]	@ 0x880
 80016ca:	43db      	mvns	r3, r3
 80016cc:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
 80016d0:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80016d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d8:	f8d7 1880 	ldr.w	r1, [r7, #2176]	@ 0x880
 80016dc:	4011      	ands	r1, r2
 80016de:	f8c7 1878 	str.w	r1, [r7, #2168]	@ 0x878
 80016e2:	f8d7 1884 	ldr.w	r1, [r7, #2180]	@ 0x884
 80016e6:	400b      	ands	r3, r1
 80016e8:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 80016ec:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f8d7 1878 	ldr.w	r1, [r7, #2168]	@ 0x878
 80016f8:	4051      	eors	r1, r2
 80016fa:	f8c7 1420 	str.w	r1, [r7, #1056]	@ 0x420
 80016fe:	f8d7 187c 	ldr.w	r1, [r7, #2172]	@ 0x87c
 8001702:	404b      	eors	r3, r1
 8001704:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 8001708:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8001714:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 8001718:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 800171c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001720:	43d1      	mvns	r1, r2
 8001722:	f8c7 1870 	str.w	r1, [r7, #2160]	@ 0x870
 8001726:	43db      	mvns	r3, r3
 8001728:	f8c7 3874 	str.w	r3, [r7, #2164]	@ 0x874
 800172c:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f8d7 1870 	ldr.w	r1, [r7, #2160]	@ 0x870
 8001738:	4011      	ands	r1, r2
 800173a:	f8c7 1868 	str.w	r1, [r7, #2152]	@ 0x868
 800173e:	f8d7 1874 	ldr.w	r1, [r7, #2164]	@ 0x874
 8001742:	400b      	ands	r3, r1
 8001744:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c
 8001748:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f8d7 1868 	ldr.w	r1, [r7, #2152]	@ 0x868
 8001754:	4051      	eors	r1, r2
 8001756:	f8c7 1418 	str.w	r1, [r7, #1048]	@ 0x418
 800175a:	f8d7 186c 	ldr.w	r1, [r7, #2156]	@ 0x86c
 800175e:	404b      	eors	r3, r1
 8001760:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001764:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8001770:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 8001774:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	43d1      	mvns	r1, r2
 800177e:	f8c7 1860 	str.w	r1, [r7, #2144]	@ 0x860
 8001782:	43db      	mvns	r3, r3
 8001784:	f8c7 3864 	str.w	r3, [r7, #2148]	@ 0x864
 8001788:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f8d7 1860 	ldr.w	r1, [r7, #2144]	@ 0x860
 8001794:	4011      	ands	r1, r2
 8001796:	f8c7 1858 	str.w	r1, [r7, #2136]	@ 0x858
 800179a:	f8d7 1864 	ldr.w	r1, [r7, #2148]	@ 0x864
 800179e:	400b      	ands	r3, r1
 80017a0:	f8c7 385c 	str.w	r3, [r7, #2140]	@ 0x85c
 80017a4:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f8d7 1858 	ldr.w	r1, [r7, #2136]	@ 0x858
 80017b0:	4051      	eors	r1, r2
 80017b2:	f8c7 1410 	str.w	r1, [r7, #1040]	@ 0x410
 80017b6:	f8d7 185c 	ldr.w	r1, [r7, #2140]	@ 0x85c
 80017ba:	404b      	eors	r3, r1
 80017bc:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 80017c0:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80017c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c8:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 80017cc:	e9c1 2300 	strd	r2, r3, [r1]

            print_keccak_state((uint64_t[]){Ega,Ege,Egi,Ego,Egu}, "After Rho", round);
 80017d0:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80017d4:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 80017d8:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	e9c1 2300 	strd	r2, r3, [r1]
 80017e4:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80017e8:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 80017ec:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80017f8:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80017fc:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8001800:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 8001804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001808:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800180c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001810:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8001814:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001820:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001824:	f5a3 7122 	sub.w	r1, r3, #648	@ 0x288
 8001828:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001834:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8001838:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	@ 0xc4c
 800183c:	49fd      	ldr	r1, [pc, #1012]	@ (8001c34 <KeccakF1600_StatePermute+0x1560>)
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe feac 	bl	800059c <print_keccak_state>

            Abe ^= De;
 8001844:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 8001848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184c:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	ea80 0602 	eor.w	r6, r0, r2
 8001858:	f8c7 6408 	str.w	r6, [r7, #1032]	@ 0x408
 800185c:	404b      	eors	r3, r1
 800185e:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8001862:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f607 4138 	addw	r1, r7, #3128	@ 0xc38
 800186e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 8001872:	f8d7 3c38 	ldr.w	r3, [r7, #3128]	@ 0xc38
 8001876:	0fda      	lsrs	r2, r3, #31
 8001878:	f8d7 3c3c 	ldr.w	r3, [r7, #3132]	@ 0xc3c
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4313      	orrs	r3, r2
 8001880:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8001884:	f8d7 3c3c 	ldr.w	r3, [r7, #3132]	@ 0xc3c
 8001888:	0fda      	lsrs	r2, r3, #31
 800188a:	f8d7 3c38 	ldr.w	r3, [r7, #3128]	@ 0xc38
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4313      	orrs	r3, r2
 8001892:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 8001896:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800189a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189e:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 80018a2:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 80018a6:	f607 4308 	addw	r3, r7, #3080	@ 0xc08
 80018aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ae:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	ea80 0602 	eor.w	r6, r0, r2
 80018ba:	f8c7 63f8 	str.w	r6, [r7, #1016]	@ 0x3f8
 80018be:	404b      	eors	r3, r1
 80018c0:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 80018c4:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 80018c8:	f607 4108 	addw	r1, r7, #3080	@ 0xc08
 80018cc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 80018d0:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	@ 0xc08
 80018d4:	0e9a      	lsrs	r2, r3, #26
 80018d6:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	@ 0xc0c
 80018da:	019b      	lsls	r3, r3, #6
 80018dc:	4313      	orrs	r3, r2
 80018de:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80018e2:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	@ 0xc0c
 80018e6:	0e9a      	lsrs	r2, r3, #26
 80018e8:	f8d7 3c08 	ldr.w	r3, [r7, #3080]	@ 0xc08
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	4313      	orrs	r3, r2
 80018f0:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 80018f4:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 80018f8:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 80018fc:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 8001900:	f607 33d8 	addw	r3, r7, #3032	@ 0xbd8
 8001904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001908:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	ea80 0602 	eor.w	r6, r0, r2
 8001914:	f8c7 63e8 	str.w	r6, [r7, #1000]	@ 0x3e8
 8001918:	404b      	eors	r3, r1
 800191a:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 800191e:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8001922:	f607 31d8 	addw	r1, r7, #3032	@ 0xbd8
 8001926:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 800192a:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	@ 0xbd8
 800192e:	09da      	lsrs	r2, r3, #7
 8001930:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	@ 0xbdc
 8001934:	065b      	lsls	r3, r3, #25
 8001936:	4313      	orrs	r3, r2
 8001938:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 800193c:	f8d7 3bdc 	ldr.w	r3, [r7, #3036]	@ 0xbdc
 8001940:	09da      	lsrs	r2, r3, #7
 8001942:	f8d7 3bd8 	ldr.w	r3, [r7, #3032]	@ 0xbd8
 8001946:	065b      	lsls	r3, r3, #25
 8001948:	4313      	orrs	r3, r2
 800194a:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 800194e:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8001952:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8001956:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 800195a:	f607 33a8 	addw	r3, r7, #2984	@ 0xba8
 800195e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001962:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	ea80 0602 	eor.w	r6, r0, r2
 800196e:	f8c7 63d8 	str.w	r6, [r7, #984]	@ 0x3d8
 8001972:	404b      	eors	r3, r1
 8001974:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8001978:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 800197c:	f607 31a8 	addw	r1, r7, #2984	@ 0xba8
 8001980:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 8001984:	f8d7 3ba8 	ldr.w	r3, [r7, #2984]	@ 0xba8
 8001988:	0e1a      	lsrs	r2, r3, #24
 800198a:	f8d7 3bac 	ldr.w	r3, [r7, #2988]	@ 0xbac
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	4313      	orrs	r3, r2
 8001992:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8001996:	f8d7 3bac 	ldr.w	r3, [r7, #2988]	@ 0xbac
 800199a:	0e1a      	lsrs	r2, r3, #24
 800199c:	f8d7 3ba8 	ldr.w	r3, [r7, #2984]	@ 0xba8
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	4313      	orrs	r3, r2
 80019a4:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 80019a8:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	@ 0x3d0
 80019ac:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 80019b0:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 80019b4:	f507 633a 	add.w	r3, r7, #2976	@ 0xba0
 80019b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019bc:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 80019c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c4:	ea80 0602 	eor.w	r6, r0, r2
 80019c8:	f8c7 63c8 	str.w	r6, [r7, #968]	@ 0x3c8
 80019cc:	404b      	eors	r3, r1
 80019ce:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80019d2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 80019d6:	f507 613a 	add.w	r1, r7, #2976	@ 0xba0
 80019da:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 80019de:	f8d7 3ba0 	ldr.w	r3, [r7, #2976]	@ 0xba0
 80019e2:	0b9a      	lsrs	r2, r3, #14
 80019e4:	f8d7 3ba4 	ldr.w	r3, [r7, #2980]	@ 0xba4
 80019e8:	049b      	lsls	r3, r3, #18
 80019ea:	4313      	orrs	r3, r2
 80019ec:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80019f0:	f8d7 3ba4 	ldr.w	r3, [r7, #2980]	@ 0xba4
 80019f4:	0b9a      	lsrs	r2, r3, #14
 80019f6:	f8d7 3ba0 	ldr.w	r3, [r7, #2976]	@ 0xba0
 80019fa:	049b      	lsls	r3, r3, #18
 80019fc:	4313      	orrs	r3, r2
 80019fe:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8001a02:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 8001a06:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8001a0a:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 8001a0e:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	43d1      	mvns	r1, r2
 8001a18:	f8c7 1850 	str.w	r1, [r7, #2128]	@ 0x850
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
 8001a22:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f8d7 1850 	ldr.w	r1, [r7, #2128]	@ 0x850
 8001a2e:	4011      	ands	r1, r2
 8001a30:	f8c7 1848 	str.w	r1, [r7, #2120]	@ 0x848
 8001a34:	f8d7 1854 	ldr.w	r1, [r7, #2132]	@ 0x854
 8001a38:	400b      	ands	r3, r1
 8001a3a:	f8c7 384c 	str.w	r3, [r7, #2124]	@ 0x84c
 8001a3e:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a46:	f8d7 1848 	ldr.w	r1, [r7, #2120]	@ 0x848
 8001a4a:	4051      	eors	r1, r2
 8001a4c:	f8c7 13b8 	str.w	r1, [r7, #952]	@ 0x3b8
 8001a50:	f8d7 184c 	ldr.w	r1, [r7, #2124]	@ 0x84c
 8001a54:	404b      	eors	r3, r1
 8001a56:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001a5a:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 8001a5e:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 8001a62:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 8001a66:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	43d1      	mvns	r1, r2
 8001a70:	f8c7 1840 	str.w	r1, [r7, #2112]	@ 0x840
 8001a74:	43db      	mvns	r3, r3
 8001a76:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 8001a7a:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f8d7 1840 	ldr.w	r1, [r7, #2112]	@ 0x840
 8001a86:	4011      	ands	r1, r2
 8001a88:	f8c7 1838 	str.w	r1, [r7, #2104]	@ 0x838
 8001a8c:	f8d7 1844 	ldr.w	r1, [r7, #2116]	@ 0x844
 8001a90:	400b      	ands	r3, r1
 8001a92:	f8c7 383c 	str.w	r3, [r7, #2108]	@ 0x83c
 8001a96:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9e:	f8d7 1838 	ldr.w	r1, [r7, #2104]	@ 0x838
 8001aa2:	4051      	eors	r1, r2
 8001aa4:	f8c7 13b0 	str.w	r1, [r7, #944]	@ 0x3b0
 8001aa8:	f8d7 183c 	ldr.w	r1, [r7, #2108]	@ 0x83c
 8001aac:	404b      	eors	r3, r1
 8001aae:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001ab2:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 8001ab6:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8001aba:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 8001abe:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	43d1      	mvns	r1, r2
 8001ac8:	f8c7 1830 	str.w	r1, [r7, #2096]	@ 0x830
 8001acc:	43db      	mvns	r3, r3
 8001ace:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 8001ad2:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f8d7 1830 	ldr.w	r1, [r7, #2096]	@ 0x830
 8001ade:	4011      	ands	r1, r2
 8001ae0:	f8c7 1828 	str.w	r1, [r7, #2088]	@ 0x828
 8001ae4:	f8d7 1834 	ldr.w	r1, [r7, #2100]	@ 0x834
 8001ae8:	400b      	ands	r3, r1
 8001aea:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 8001aee:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	f8d7 1828 	ldr.w	r1, [r7, #2088]	@ 0x828
 8001afa:	4051      	eors	r1, r2
 8001afc:	f8c7 13a8 	str.w	r1, [r7, #936]	@ 0x3a8
 8001b00:	f8d7 182c 	ldr.w	r1, [r7, #2092]	@ 0x82c
 8001b04:	404b      	eors	r3, r1
 8001b06:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8001b0a:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8001b0e:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 8001b12:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 8001b16:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	43d1      	mvns	r1, r2
 8001b20:	f8c7 1820 	str.w	r1, [r7, #2080]	@ 0x820
 8001b24:	43db      	mvns	r3, r3
 8001b26:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001b2a:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b32:	f8d7 1820 	ldr.w	r1, [r7, #2080]	@ 0x820
 8001b36:	4011      	ands	r1, r2
 8001b38:	f8c7 1818 	str.w	r1, [r7, #2072]	@ 0x818
 8001b3c:	f8d7 1824 	ldr.w	r1, [r7, #2084]	@ 0x824
 8001b40:	400b      	ands	r3, r1
 8001b42:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 8001b46:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4e:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 8001b52:	4051      	eors	r1, r2
 8001b54:	f8c7 13a0 	str.w	r1, [r7, #928]	@ 0x3a0
 8001b58:	f8d7 181c 	ldr.w	r1, [r7, #2076]	@ 0x81c
 8001b5c:	404b      	eors	r3, r1
 8001b5e:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8001b62:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	@ 0x3a0
 8001b66:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 8001b6a:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 8001b6e:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	43d1      	mvns	r1, r2
 8001b78:	f8c7 1810 	str.w	r1, [r7, #2064]	@ 0x810
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 8001b82:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 8001b8e:	4011      	ands	r1, r2
 8001b90:	f8c7 1808 	str.w	r1, [r7, #2056]	@ 0x808
 8001b94:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 8001b98:	400b      	ands	r3, r1
 8001b9a:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 8001b9e:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8001baa:	4051      	eors	r1, r2
 8001bac:	f8c7 1398 	str.w	r1, [r7, #920]	@ 0x398
 8001bb0:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 8001bb4:	404b      	eors	r3, r1
 8001bb6:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001bba:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 8001bbe:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 8001bc2:	e9c1 2300 	strd	r2, r3, [r1]

            print_keccak_state((uint64_t[]){Eka,Eke,Eki,Eko,Eku}, "After Pi", round);
 8001bc6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001bca:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001bce:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 8001bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd6:	e9c1 2300 	strd	r2, r3, [r1]
 8001bda:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001bde:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001be2:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8001be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bea:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001bee:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001bf2:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001bf6:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001c02:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001c06:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001c0a:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001c16:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001c1a:	f5a3 7118 	sub.w	r1, r3, #608	@ 0x260
 8001c1e:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8001c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c26:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8001c2a:	f507 631f 	add.w	r3, r7, #2544	@ 0x9f0
 8001c2e:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	@ 0xc4c
 8001c32:	e001      	b.n	8001c38 <KeccakF1600_StatePermute+0x1564>
 8001c34:	0800f5a8 	.word	0x0800f5a8
 8001c38:	49fc      	ldr	r1, [pc, #1008]	@ (800202c <KeccakF1600_StatePermute+0x1958>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fcae 	bl	800059c <print_keccak_state>

            Abu ^= Du;
 8001c40:	f507 6342 	add.w	r3, r7, #3104	@ 0xc20
 8001c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c48:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8001c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c50:	ea80 0602 	eor.w	r6, r0, r2
 8001c54:	f8c7 6390 	str.w	r6, [r7, #912]	@ 0x390
 8001c58:	404b      	eors	r3, r1
 8001c5a:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8001c5e:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	@ 0x390
 8001c62:	f507 6142 	add.w	r1, r7, #3104	@ 0xc20
 8001c66:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 8001c6a:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8001c6e:	095a      	lsrs	r2, r3, #5
 8001c70:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 8001c74:	06db      	lsls	r3, r3, #27
 8001c76:	4313      	orrs	r3, r2
 8001c78:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001c7c:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	@ 0xc24
 8001c80:	095a      	lsrs	r2, r3, #5
 8001c82:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	@ 0xc20
 8001c86:	06db      	lsls	r3, r3, #27
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 8001c8e:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	@ 0x388
 8001c92:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8001c96:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 8001c9a:	f607 4318 	addw	r3, r7, #3096	@ 0xc18
 8001c9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca2:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8001ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001caa:	ea80 0602 	eor.w	r6, r0, r2
 8001cae:	f8c7 6380 	str.w	r6, [r7, #896]	@ 0x380
 8001cb2:	404b      	eors	r3, r1
 8001cb4:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001cb8:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	@ 0x380
 8001cbc:	f607 4118 	addw	r1, r7, #3096	@ 0xc18
 8001cc0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8001cc4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8001cc8:	011a      	lsls	r2, r3, #4
 8001cca:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8001cce:	0f1b      	lsrs	r3, r3, #28
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 8001cd6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	@ 0xc18
 8001cda:	011a      	lsls	r2, r3, #4
 8001cdc:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	@ 0xc1c
 8001ce0:	0f1b      	lsrs	r3, r3, #28
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 8001ce8:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	@ 0x378
 8001cec:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8001cf0:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8001cf4:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 8001cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cfc:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	ea80 0602 	eor.w	r6, r0, r2
 8001d08:	f8c7 6370 	str.w	r6, [r7, #880]	@ 0x370
 8001d0c:	404b      	eors	r3, r1
 8001d0e:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001d12:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	@ 0x370
 8001d16:	f607 31e8 	addw	r1, r7, #3048	@ 0xbe8
 8001d1a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 8001d1e:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	@ 0xbe8
 8001d22:	0d9a      	lsrs	r2, r3, #22
 8001d24:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	@ 0xbec
 8001d28:	029b      	lsls	r3, r3, #10
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 8001d30:	f8d7 3bec 	ldr.w	r3, [r7, #3052]	@ 0xbec
 8001d34:	0d9a      	lsrs	r2, r3, #22
 8001d36:	f8d7 3be8 	ldr.w	r3, [r7, #3048]	@ 0xbe8
 8001d3a:	029b      	lsls	r3, r3, #10
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 8001d42:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	@ 0x368
 8001d46:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8001d4a:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 8001d4e:	f607 33b8 	addw	r3, r7, #3000	@ 0xbb8
 8001d52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d56:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	ea80 0602 	eor.w	r6, r0, r2
 8001d62:	f8c7 6360 	str.w	r6, [r7, #864]	@ 0x360
 8001d66:	404b      	eors	r3, r1
 8001d68:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001d6c:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	@ 0x360
 8001d70:	f607 31b8 	addw	r1, r7, #3000	@ 0xbb8
 8001d74:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 8001d78:	f8d7 3bb8 	ldr.w	r3, [r7, #3000]	@ 0xbb8
 8001d7c:	0c5a      	lsrs	r2, r3, #17
 8001d7e:	f8d7 3bbc 	ldr.w	r3, [r7, #3004]	@ 0xbbc
 8001d82:	03db      	lsls	r3, r3, #15
 8001d84:	4313      	orrs	r3, r2
 8001d86:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001d8a:	f8d7 3bbc 	ldr.w	r3, [r7, #3004]	@ 0xbbc
 8001d8e:	0c5a      	lsrs	r2, r3, #17
 8001d90:	f8d7 3bb8 	ldr.w	r3, [r7, #3000]	@ 0xbb8
 8001d94:	03db      	lsls	r3, r3, #15
 8001d96:	4313      	orrs	r3, r2
 8001d98:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8001d9c:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8001da0:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8001da4:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 8001da8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8001dac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001db0:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8001db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db8:	ea80 0602 	eor.w	r6, r0, r2
 8001dbc:	f8c7 6350 	str.w	r6, [r7, #848]	@ 0x350
 8001dc0:	404b      	eors	r3, r1
 8001dc2:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001dc6:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 8001dca:	f607 3188 	addw	r1, r7, #2952	@ 0xb88
 8001dce:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8001dd2:	f8d7 3b8c 	ldr.w	r3, [r7, #2956]	@ 0xb8c
 8001dd6:	061a      	lsls	r2, r3, #24
 8001dd8:	f8d7 3b88 	ldr.w	r3, [r7, #2952]	@ 0xb88
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8001de4:	f8d7 3b88 	ldr.w	r3, [r7, #2952]	@ 0xb88
 8001de8:	061a      	lsls	r2, r3, #24
 8001dea:	f8d7 3b8c 	ldr.w	r3, [r7, #2956]	@ 0xb8c
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	4313      	orrs	r3, r2
 8001df2:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8001df6:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 8001dfa:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8001dfe:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8001e02:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	43d1      	mvns	r1, r2
 8001e0c:	f8c7 1800 	str.w	r1, [r7, #2048]	@ 0x800
 8001e10:	43db      	mvns	r3, r3
 8001e12:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8001e16:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	f8d7 1800 	ldr.w	r1, [r7, #2048]	@ 0x800
 8001e22:	4011      	ands	r1, r2
 8001e24:	f8c7 17f8 	str.w	r1, [r7, #2040]	@ 0x7f8
 8001e28:	f8d7 1804 	ldr.w	r1, [r7, #2052]	@ 0x804
 8001e2c:	400b      	ands	r3, r1
 8001e2e:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
 8001e32:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	@ 0x7f8
 8001e3e:	4051      	eors	r1, r2
 8001e40:	f8c7 1340 	str.w	r1, [r7, #832]	@ 0x340
 8001e44:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	@ 0x7fc
 8001e48:	404b      	eors	r3, r1
 8001e4a:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001e4e:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 8001e52:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8001e56:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 8001e5a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	43d1      	mvns	r1, r2
 8001e64:	f8c7 17f0 	str.w	r1, [r7, #2032]	@ 0x7f0
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8001e6e:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e76:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	@ 0x7f0
 8001e7a:	4011      	ands	r1, r2
 8001e7c:	f8c7 17e8 	str.w	r1, [r7, #2024]	@ 0x7e8
 8001e80:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	@ 0x7f4
 8001e84:	400b      	ands	r3, r1
 8001e86:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8001e8a:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e92:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	@ 0x7e8
 8001e96:	4051      	eors	r1, r2
 8001e98:	f8c7 1338 	str.w	r1, [r7, #824]	@ 0x338
 8001e9c:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 8001ea0:	404b      	eors	r3, r1
 8001ea2:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001ea6:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8001eaa:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8001eae:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8001eb2:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	43d1      	mvns	r1, r2
 8001ebc:	f8c7 17e0 	str.w	r1, [r7, #2016]	@ 0x7e0
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
 8001ec6:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	@ 0x7e0
 8001ed2:	4011      	ands	r1, r2
 8001ed4:	f8c7 17d8 	str.w	r1, [r7, #2008]	@ 0x7d8
 8001ed8:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	@ 0x7e4
 8001edc:	400b      	ands	r3, r1
 8001ede:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
 8001ee2:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	@ 0x7d8
 8001eee:	4051      	eors	r1, r2
 8001ef0:	f8c7 1330 	str.w	r1, [r7, #816]	@ 0x330
 8001ef4:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	@ 0x7dc
 8001ef8:	404b      	eors	r3, r1
 8001efa:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001efe:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 8001f02:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8001f06:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8001f0a:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	43d1      	mvns	r1, r2
 8001f14:	f8c7 17d0 	str.w	r1, [r7, #2000]	@ 0x7d0
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 8001f1e:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f26:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	@ 0x7d0
 8001f2a:	4011      	ands	r1, r2
 8001f2c:	f8c7 17c8 	str.w	r1, [r7, #1992]	@ 0x7c8
 8001f30:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	@ 0x7d4
 8001f34:	400b      	ands	r3, r1
 8001f36:	f8c7 37cc 	str.w	r3, [r7, #1996]	@ 0x7cc
 8001f3a:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	@ 0x7c8
 8001f46:	4051      	eors	r1, r2
 8001f48:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 8001f4c:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	@ 0x7cc
 8001f50:	404b      	eors	r3, r1
 8001f52:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8001f56:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 8001f5a:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8001f5e:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8001f62:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	43d1      	mvns	r1, r2
 8001f6c:	f8c7 17c0 	str.w	r1, [r7, #1984]	@ 0x7c0
 8001f70:	43db      	mvns	r3, r3
 8001f72:	f8c7 37c4 	str.w	r3, [r7, #1988]	@ 0x7c4
 8001f76:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	@ 0x7c0
 8001f82:	4011      	ands	r1, r2
 8001f84:	f8c7 17b8 	str.w	r1, [r7, #1976]	@ 0x7b8
 8001f88:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	@ 0x7c4
 8001f8c:	400b      	ands	r3, r1
 8001f8e:	f8c7 37bc 	str.w	r3, [r7, #1980]	@ 0x7bc
 8001f92:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	@ 0x7b8
 8001f9e:	4051      	eors	r1, r2
 8001fa0:	f8c7 1320 	str.w	r1, [r7, #800]	@ 0x320
 8001fa4:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	@ 0x7bc
 8001fa8:	404b      	eors	r3, r1
 8001faa:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8001fae:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 8001fb2:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8001fb6:	e9c1 2300 	strd	r2, r3, [r1]

            print_keccak_state((uint64_t[]){Ema,Eme,Emi,Emo,Emu}, "After Chi", round);
 8001fba:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001fbe:	f5a3 710e 	sub.w	r1, r3, #568	@ 0x238
 8001fc2:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fca:	e9c1 2300 	strd	r2, r3, [r1]
 8001fce:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001fd2:	f5a3 710e 	sub.w	r1, r3, #568	@ 0x238
 8001fd6:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001fe2:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001fe6:	f5a3 710e 	sub.w	r1, r3, #568	@ 0x238
 8001fea:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001ff6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8001ffa:	f5a3 710e 	sub.w	r1, r3, #568	@ 0x238
 8001ffe:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800200a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800200e:	f5a3 710e 	sub.w	r1, r3, #568	@ 0x238
 8002012:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201a:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800201e:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8002022:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	@ 0xc4c
 8002026:	4902      	ldr	r1, [pc, #8]	@ (8002030 <KeccakF1600_StatePermute+0x195c>)
 8002028:	4618      	mov	r0, r3
 800202a:	e003      	b.n	8002034 <KeccakF1600_StatePermute+0x1960>
 800202c:	0800f5b4 	.word	0x0800f5b4
 8002030:	0800f5c0 	.word	0x0800f5c0
 8002034:	f7fe fab2 	bl	800059c <print_keccak_state>

            Abi ^= Di;
 8002038:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 800203c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002040:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	ea80 0602 	eor.w	r6, r0, r2
 800204c:	f8c7 6318 	str.w	r6, [r7, #792]	@ 0x318
 8002050:	404b      	eors	r3, r1
 8002052:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8002056:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	@ 0x318
 800205a:	f507 6143 	add.w	r1, r7, #3120	@ 0xc30
 800205e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8002062:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	@ 0xc34
 8002066:	079a      	lsls	r2, r3, #30
 8002068:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	@ 0xc30
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8002074:	f8d7 3c30 	ldr.w	r3, [r7, #3120]	@ 0xc30
 8002078:	079a      	lsls	r2, r3, #30
 800207a:	f8d7 3c34 	ldr.w	r3, [r7, #3124]	@ 0xc34
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8002086:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 800208a:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 800208e:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8002092:	f507 6340 	add.w	r3, r7, #3072	@ 0xc00
 8002096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800209a:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 800209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a2:	ea80 0602 	eor.w	r6, r0, r2
 80020a6:	f8c7 6308 	str.w	r6, [r7, #776]	@ 0x308
 80020aa:	404b      	eors	r3, r1
 80020ac:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 80020b0:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	@ 0x308
 80020b4:	f507 6140 	add.w	r1, r7, #3072	@ 0xc00
 80020b8:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 80020bc:	f8d7 3c04 	ldr.w	r3, [r7, #3076]	@ 0xc04
 80020c0:	05da      	lsls	r2, r3, #23
 80020c2:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	@ 0xc00
 80020c6:	0a5b      	lsrs	r3, r3, #9
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 80020ce:	f8d7 3c00 	ldr.w	r3, [r7, #3072]	@ 0xc00
 80020d2:	05da      	lsls	r2, r3, #23
 80020d4:	f8d7 3c04 	ldr.w	r3, [r7, #3076]	@ 0xc04
 80020d8:	0a5b      	lsrs	r3, r3, #9
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 80020e0:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 80020e4:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 80020e8:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 80020ec:	f507 633d 	add.w	r3, r7, #3024	@ 0xbd0
 80020f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f4:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 80020f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fc:	ea80 0602 	eor.w	r6, r0, r2
 8002100:	f8c7 62f8 	str.w	r6, [r7, #760]	@ 0x2f8
 8002104:	404b      	eors	r3, r1
 8002106:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 800210a:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 800210e:	f507 613d 	add.w	r1, r7, #3024	@ 0xbd0
 8002112:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8002116:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	@ 0xbd4
 800211a:	01da      	lsls	r2, r3, #7
 800211c:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 8002120:	0e5b      	lsrs	r3, r3, #25
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8002128:	f8d7 3bd0 	ldr.w	r3, [r7, #3024]	@ 0xbd0
 800212c:	01da      	lsls	r2, r3, #7
 800212e:	f8d7 3bd4 	ldr.w	r3, [r7, #3028]	@ 0xbd4
 8002132:	0e5b      	lsrs	r3, r3, #25
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 800213a:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 800213e:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8002142:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8002146:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 800214a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800214e:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8002152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002156:	ea80 0602 	eor.w	r6, r0, r2
 800215a:	f8c7 62e8 	str.w	r6, [r7, #744]	@ 0x2e8
 800215e:	404b      	eors	r3, r1
 8002160:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8002164:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8002168:	f607 31c8 	addw	r1, r7, #3016	@ 0xbc8
 800216c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8002170:	f8d7 3bcc 	ldr.w	r3, [r7, #3020]	@ 0xbcc
 8002174:	025a      	lsls	r2, r3, #9
 8002176:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 800217a:	0ddb      	lsrs	r3, r3, #23
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8002182:	f8d7 3bc8 	ldr.w	r3, [r7, #3016]	@ 0xbc8
 8002186:	025a      	lsls	r2, r3, #9
 8002188:	f8d7 3bcc 	ldr.w	r3, [r7, #3020]	@ 0xbcc
 800218c:	0ddb      	lsrs	r3, r3, #23
 800218e:	4313      	orrs	r3, r2
 8002190:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8002194:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8002198:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 800219c:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 80021a0:	f607 3398 	addw	r3, r7, #2968	@ 0xb98
 80021a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a8:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 80021ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b0:	ea80 0602 	eor.w	r6, r0, r2
 80021b4:	f8c7 62d8 	str.w	r6, [r7, #728]	@ 0x2d8
 80021b8:	404b      	eors	r3, r1
 80021ba:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 80021be:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 80021c2:	f607 3198 	addw	r1, r7, #2968	@ 0xb98
 80021c6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 80021ca:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 80021ce:	0f9a      	lsrs	r2, r3, #30
 80021d0:	f8d7 3b9c 	ldr.w	r3, [r7, #2972]	@ 0xb9c
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 80021dc:	f8d7 3b9c 	ldr.w	r3, [r7, #2972]	@ 0xb9c
 80021e0:	0f9a      	lsrs	r2, r3, #30
 80021e2:	f8d7 3b98 	ldr.w	r3, [r7, #2968]	@ 0xb98
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 80021ee:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	@ 0x2d0
 80021f2:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 80021f6:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 80021fa:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	43d1      	mvns	r1, r2
 8002204:	f8c7 17b0 	str.w	r1, [r7, #1968]	@ 0x7b0
 8002208:	43db      	mvns	r3, r3
 800220a:	f8c7 37b4 	str.w	r3, [r7, #1972]	@ 0x7b4
 800220e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	@ 0x7b0
 800221a:	4011      	ands	r1, r2
 800221c:	f8c7 17a8 	str.w	r1, [r7, #1960]	@ 0x7a8
 8002220:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	@ 0x7b4
 8002224:	400b      	ands	r3, r1
 8002226:	f8c7 37ac 	str.w	r3, [r7, #1964]	@ 0x7ac
 800222a:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 800222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002232:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	@ 0x7a8
 8002236:	4051      	eors	r1, r2
 8002238:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 800223c:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	@ 0x7ac
 8002240:	404b      	eors	r3, r1
 8002242:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8002246:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 800224a:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 800224e:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8002252:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	43d1      	mvns	r1, r2
 800225c:	f8c7 17a0 	str.w	r1, [r7, #1952]	@ 0x7a0
 8002260:	43db      	mvns	r3, r3
 8002262:	f8c7 37a4 	str.w	r3, [r7, #1956]	@ 0x7a4
 8002266:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	@ 0x7a0
 8002272:	4011      	ands	r1, r2
 8002274:	f8c7 1798 	str.w	r1, [r7, #1944]	@ 0x798
 8002278:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	@ 0x7a4
 800227c:	400b      	ands	r3, r1
 800227e:	f8c7 379c 	str.w	r3, [r7, #1948]	@ 0x79c
 8002282:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f8d7 1798 	ldr.w	r1, [r7, #1944]	@ 0x798
 800228e:	4051      	eors	r1, r2
 8002290:	f8c7 12c0 	str.w	r1, [r7, #704]	@ 0x2c0
 8002294:	f8d7 179c 	ldr.w	r1, [r7, #1948]	@ 0x79c
 8002298:	404b      	eors	r3, r1
 800229a:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 800229e:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 80022a2:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 80022a6:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 80022aa:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80022ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b2:	43d1      	mvns	r1, r2
 80022b4:	f8c7 1790 	str.w	r1, [r7, #1936]	@ 0x790
 80022b8:	43db      	mvns	r3, r3
 80022ba:	f8c7 3794 	str.w	r3, [r7, #1940]	@ 0x794
 80022be:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	f8d7 1790 	ldr.w	r1, [r7, #1936]	@ 0x790
 80022ca:	4011      	ands	r1, r2
 80022cc:	f8c7 1788 	str.w	r1, [r7, #1928]	@ 0x788
 80022d0:	f8d7 1794 	ldr.w	r1, [r7, #1940]	@ 0x794
 80022d4:	400b      	ands	r3, r1
 80022d6:	f8c7 378c 	str.w	r3, [r7, #1932]	@ 0x78c
 80022da:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f8d7 1788 	ldr.w	r1, [r7, #1928]	@ 0x788
 80022e6:	4051      	eors	r1, r2
 80022e8:	f8c7 12b8 	str.w	r1, [r7, #696]	@ 0x2b8
 80022ec:	f8d7 178c 	ldr.w	r1, [r7, #1932]	@ 0x78c
 80022f0:	404b      	eors	r3, r1
 80022f2:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 80022f6:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 80022fa:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 80022fe:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8002302:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	43d1      	mvns	r1, r2
 800230c:	f8c7 1780 	str.w	r1, [r7, #1920]	@ 0x780
 8002310:	43db      	mvns	r3, r3
 8002312:	f8c7 3784 	str.w	r3, [r7, #1924]	@ 0x784
 8002316:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 800231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231e:	f8d7 1780 	ldr.w	r1, [r7, #1920]	@ 0x780
 8002322:	4011      	ands	r1, r2
 8002324:	f8c7 1778 	str.w	r1, [r7, #1912]	@ 0x778
 8002328:	f8d7 1784 	ldr.w	r1, [r7, #1924]	@ 0x784
 800232c:	400b      	ands	r3, r1
 800232e:	f8c7 377c 	str.w	r3, [r7, #1916]	@ 0x77c
 8002332:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	f8d7 1778 	ldr.w	r1, [r7, #1912]	@ 0x778
 800233e:	4051      	eors	r1, r2
 8002340:	f8c7 12b0 	str.w	r1, [r7, #688]	@ 0x2b0
 8002344:	f8d7 177c 	ldr.w	r1, [r7, #1916]	@ 0x77c
 8002348:	404b      	eors	r3, r1
 800234a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800234e:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8002352:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 8002356:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 800235a:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 800235e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002362:	43d1      	mvns	r1, r2
 8002364:	f8c7 1770 	str.w	r1, [r7, #1904]	@ 0x770
 8002368:	43db      	mvns	r3, r3
 800236a:	f8c7 3774 	str.w	r3, [r7, #1908]	@ 0x774
 800236e:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8002372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002376:	f8d7 1770 	ldr.w	r1, [r7, #1904]	@ 0x770
 800237a:	4011      	ands	r1, r2
 800237c:	f8c7 1768 	str.w	r1, [r7, #1896]	@ 0x768
 8002380:	f8d7 1774 	ldr.w	r1, [r7, #1908]	@ 0x774
 8002384:	400b      	ands	r3, r1
 8002386:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c
 800238a:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 800238e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002392:	f8d7 1768 	ldr.w	r1, [r7, #1896]	@ 0x768
 8002396:	4051      	eors	r1, r2
 8002398:	f8c7 12a8 	str.w	r1, [r7, #680]	@ 0x2a8
 800239c:	f8d7 176c 	ldr.w	r1, [r7, #1900]	@ 0x76c
 80023a0:	404b      	eors	r3, r1
 80023a2:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80023a6:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 80023aa:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 80023ae:	e9c1 2300 	strd	r2, r3, [r1]
            print_keccak_state((uint64_t[]){Esa,Ese,Esi,Eso,Esu}, "After Iota", round);
 80023b2:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80023b6:	f5a3 7104 	sub.w	r1, r3, #528	@ 0x210
 80023ba:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 80023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c2:	e9c1 2300 	strd	r2, r3, [r1]
 80023c6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80023ca:	f5a3 7104 	sub.w	r1, r3, #528	@ 0x210
 80023ce:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80023d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80023da:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80023de:	f5a3 7104 	sub.w	r1, r3, #528	@ 0x210
 80023e2:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80023ee:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80023f2:	f5a3 7104 	sub.w	r1, r3, #528	@ 0x210
 80023f6:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8002402:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002406:	f5a3 7104 	sub.w	r1, r3, #528	@ 0x210
 800240a:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 800240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002412:	e9c1 2308 	strd	r2, r3, [r1, #32]
 8002416:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 800241a:	f8d7 2c4c 	ldr.w	r2, [r7, #3148]	@ 0xc4c
 800241e:	49fe      	ldr	r1, [pc, #1016]	@ (8002818 <KeccakF1600_StatePermute+0x2144>)
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f8bb 	bl	800059c <print_keccak_state>
            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8002426:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 800242a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800242e:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 8002432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002436:	ea80 0602 	eor.w	r6, r0, r2
 800243a:	f8c7 6760 	str.w	r6, [r7, #1888]	@ 0x760
 800243e:	404b      	eors	r3, r1
 8002440:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 8002444:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 8002450:	4051      	eors	r1, r2
 8002452:	f8c7 1758 	str.w	r1, [r7, #1880]	@ 0x758
 8002456:	f8d7 1764 	ldr.w	r1, [r7, #1892]	@ 0x764
 800245a:	404b      	eors	r3, r1
 800245c:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
 8002460:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f8d7 1758 	ldr.w	r1, [r7, #1880]	@ 0x758
 800246c:	4051      	eors	r1, r2
 800246e:	f8c7 1750 	str.w	r1, [r7, #1872]	@ 0x750
 8002472:	f8d7 175c 	ldr.w	r1, [r7, #1884]	@ 0x75c
 8002476:	404b      	eors	r3, r1
 8002478:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
 800247c:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f8d7 1750 	ldr.w	r1, [r7, #1872]	@ 0x750
 8002488:	4051      	eors	r1, r2
 800248a:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 800248e:	f8d7 1754 	ldr.w	r1, [r7, #1876]	@ 0x754
 8002492:	404b      	eors	r3, r1
 8002494:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8002498:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 800249c:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 80024a0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 80024a4:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80024a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ac:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	ea80 0602 	eor.w	r6, r0, r2
 80024b8:	f8c7 6748 	str.w	r6, [r7, #1864]	@ 0x748
 80024bc:	404b      	eors	r3, r1
 80024be:	f8c7 374c 	str.w	r3, [r7, #1868]	@ 0x74c
 80024c2:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f8d7 1748 	ldr.w	r1, [r7, #1864]	@ 0x748
 80024ce:	4051      	eors	r1, r2
 80024d0:	f8c7 1740 	str.w	r1, [r7, #1856]	@ 0x740
 80024d4:	f8d7 174c 	ldr.w	r1, [r7, #1868]	@ 0x74c
 80024d8:	404b      	eors	r3, r1
 80024da:	f8c7 3744 	str.w	r3, [r7, #1860]	@ 0x744
 80024de:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f8d7 1740 	ldr.w	r1, [r7, #1856]	@ 0x740
 80024ea:	4051      	eors	r1, r2
 80024ec:	f8c7 1738 	str.w	r1, [r7, #1848]	@ 0x738
 80024f0:	f8d7 1744 	ldr.w	r1, [r7, #1860]	@ 0x744
 80024f4:	404b      	eors	r3, r1
 80024f6:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
 80024fa:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80024fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002502:	f8d7 1738 	ldr.w	r1, [r7, #1848]	@ 0x738
 8002506:	4051      	eors	r1, r2
 8002508:	f8c7 1298 	str.w	r1, [r7, #664]	@ 0x298
 800250c:	f8d7 173c 	ldr.w	r1, [r7, #1852]	@ 0x73c
 8002510:	404b      	eors	r3, r1
 8002512:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8002516:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 800251a:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 800251e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8002522:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8002526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800252a:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	ea80 0602 	eor.w	r6, r0, r2
 8002536:	f8c7 6730 	str.w	r6, [r7, #1840]	@ 0x730
 800253a:	404b      	eors	r3, r1
 800253c:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734
 8002540:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 8002544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002548:	f8d7 1730 	ldr.w	r1, [r7, #1840]	@ 0x730
 800254c:	4051      	eors	r1, r2
 800254e:	f8c7 1728 	str.w	r1, [r7, #1832]	@ 0x728
 8002552:	f8d7 1734 	ldr.w	r1, [r7, #1844]	@ 0x734
 8002556:	404b      	eors	r3, r1
 8002558:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
 800255c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002564:	f8d7 1728 	ldr.w	r1, [r7, #1832]	@ 0x728
 8002568:	4051      	eors	r1, r2
 800256a:	f8c7 1720 	str.w	r1, [r7, #1824]	@ 0x720
 800256e:	f8d7 172c 	ldr.w	r1, [r7, #1836]	@ 0x72c
 8002572:	404b      	eors	r3, r1
 8002574:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
 8002578:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f8d7 1720 	ldr.w	r1, [r7, #1824]	@ 0x720
 8002584:	4051      	eors	r1, r2
 8002586:	f8c7 1290 	str.w	r1, [r7, #656]	@ 0x290
 800258a:	f8d7 1724 	ldr.w	r1, [r7, #1828]	@ 0x724
 800258e:	404b      	eors	r3, r1
 8002590:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8002594:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 8002598:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 800259c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 80025a0:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 80025a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a8:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	ea80 0602 	eor.w	r6, r0, r2
 80025b4:	f8c7 6718 	str.w	r6, [r7, #1816]	@ 0x718
 80025b8:	404b      	eors	r3, r1
 80025ba:	f8c7 371c 	str.w	r3, [r7, #1820]	@ 0x71c
 80025be:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	f8d7 1718 	ldr.w	r1, [r7, #1816]	@ 0x718
 80025ca:	4051      	eors	r1, r2
 80025cc:	f8c7 1710 	str.w	r1, [r7, #1808]	@ 0x710
 80025d0:	f8d7 171c 	ldr.w	r1, [r7, #1820]	@ 0x71c
 80025d4:	404b      	eors	r3, r1
 80025d6:	f8c7 3714 	str.w	r3, [r7, #1812]	@ 0x714
 80025da:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f8d7 1710 	ldr.w	r1, [r7, #1808]	@ 0x710
 80025e6:	4051      	eors	r1, r2
 80025e8:	f8c7 1708 	str.w	r1, [r7, #1800]	@ 0x708
 80025ec:	f8d7 1714 	ldr.w	r1, [r7, #1812]	@ 0x714
 80025f0:	404b      	eors	r3, r1
 80025f2:	f8c7 370c 	str.w	r3, [r7, #1804]	@ 0x70c
 80025f6:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f8d7 1708 	ldr.w	r1, [r7, #1800]	@ 0x708
 8002602:	4051      	eors	r1, r2
 8002604:	f8c7 1288 	str.w	r1, [r7, #648]	@ 0x288
 8002608:	f8d7 170c 	ldr.w	r1, [r7, #1804]	@ 0x70c
 800260c:	404b      	eors	r3, r1
 800260e:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 8002612:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 8002616:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 800261a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 800261e:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8002622:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002626:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262e:	ea80 0602 	eor.w	r6, r0, r2
 8002632:	f8c7 6700 	str.w	r6, [r7, #1792]	@ 0x700
 8002636:	404b      	eors	r3, r1
 8002638:	f8c7 3704 	str.w	r3, [r7, #1796]	@ 0x704
 800263c:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	f8d7 1700 	ldr.w	r1, [r7, #1792]	@ 0x700
 8002648:	4051      	eors	r1, r2
 800264a:	f8c7 16f8 	str.w	r1, [r7, #1784]	@ 0x6f8
 800264e:	f8d7 1704 	ldr.w	r1, [r7, #1796]	@ 0x704
 8002652:	404b      	eors	r3, r1
 8002654:	f8c7 36fc 	str.w	r3, [r7, #1788]	@ 0x6fc
 8002658:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 8002664:	4051      	eors	r1, r2
 8002666:	f8c7 16f0 	str.w	r1, [r7, #1776]	@ 0x6f0
 800266a:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	@ 0x6fc
 800266e:	404b      	eors	r3, r1
 8002670:	f8c7 36f4 	str.w	r3, [r7, #1780]	@ 0x6f4
 8002674:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8002678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267c:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 8002680:	4051      	eors	r1, r2
 8002682:	f8c7 1280 	str.w	r1, [r7, #640]	@ 0x280
 8002686:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	@ 0x6f4
 800268a:	404b      	eors	r3, r1
 800268c:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002690:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8002694:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8002698:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 800269c:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 80026a0:	0fda      	lsrs	r2, r3, #31
 80026a2:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 80026ae:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 80026b2:	0fda      	lsrs	r2, r3, #31
 80026b4:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c7 36e8 	str.w	r3, [r7, #1768]	@ 0x6e8
 80026c0:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80026c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c8:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	@ 0x6e8
 80026cc:	4051      	eors	r1, r2
 80026ce:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 80026d2:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	@ 0x6ec
 80026d6:	404b      	eors	r3, r1
 80026d8:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 80026dc:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 80026e0:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 80026e4:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 80026e8:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 80026ec:	0fda      	lsrs	r2, r3, #31
 80026ee:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 80026fa:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 80026fe:	0fda      	lsrs	r2, r3, #31
 8002700:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c7 36e0 	str.w	r3, [r7, #1760]	@ 0x6e0
 800270c:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 8002718:	4051      	eors	r1, r2
 800271a:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
 800271e:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	@ 0x6e4
 8002722:	404b      	eors	r3, r1
 8002724:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 8002728:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 800272c:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8002730:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8002734:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8002738:	0fda      	lsrs	r2, r3, #31
 800273a:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 8002746:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 800274a:	0fda      	lsrs	r2, r3, #31
 800274c:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c7 36d8 	str.w	r3, [r7, #1752]	@ 0x6d8
 8002758:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800275c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002760:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	@ 0x6d8
 8002764:	4051      	eors	r1, r2
 8002766:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
 800276a:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	@ 0x6dc
 800276e:	404b      	eors	r3, r1
 8002770:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8002774:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 8002778:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 800277c:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8002780:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 8002784:	0fda      	lsrs	r2, r3, #31
 8002786:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c7 36d4 	str.w	r3, [r7, #1748]	@ 0x6d4
 8002792:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8002796:	0fda      	lsrs	r2, r3, #31
 8002798:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 80027a4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80027a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ac:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	@ 0x6d0
 80027b0:	4051      	eors	r1, r2
 80027b2:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 80027b6:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	@ 0x6d4
 80027ba:	404b      	eors	r3, r1
 80027bc:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 80027c0:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 80027c4:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 80027c8:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 80027cc:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 80027d0:	0fda      	lsrs	r2, r3, #31
 80027d2:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	@ 0xb7c
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c7 36cc 	str.w	r3, [r7, #1740]	@ 0x6cc
 80027de:	f8d7 3b7c 	ldr.w	r3, [r7, #2940]	@ 0xb7c
 80027e2:	0fda      	lsrs	r2, r3, #31
 80027e4:	f8d7 3b78 	ldr.w	r3, [r7, #2936]	@ 0xb78
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 80027f0:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80027f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f8:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	@ 0x6c8
 80027fc:	4051      	eors	r1, r2
 80027fe:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
 8002802:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	@ 0x6cc
 8002806:	404b      	eors	r3, r1
 8002808:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800280c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 8002810:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8002814:	e002      	b.n	800281c <KeccakF1600_StatePermute+0x2148>
 8002816:	bf00      	nop
 8002818:	0800f5cc 	.word	0x0800f5cc
 800281c:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 8002820:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 8002824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002828:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	ea80 0602 	eor.w	r6, r0, r2
 8002834:	f8c7 6250 	str.w	r6, [r7, #592]	@ 0x250
 8002838:	404b      	eors	r3, r1
 800283a:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 800283e:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 8002842:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 8002846:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 800284a:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8002856:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 800285a:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 800285e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002862:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8002866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286a:	ea80 0602 	eor.w	r6, r0, r2
 800286e:	f8c7 6248 	str.w	r6, [r7, #584]	@ 0x248
 8002872:	404b      	eors	r3, r1
 8002874:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8002878:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 800287c:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 8002880:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 8002884:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002888:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 800288c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002890:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 8002894:	6803      	ldr	r3, [r0, #0]
 8002896:	031a      	lsls	r2, r3, #12
 8002898:	680b      	ldr	r3, [r1, #0]
 800289a:	0d1b      	lsrs	r3, r3, #20
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 80028a2:	680b      	ldr	r3, [r1, #0]
 80028a4:	031a      	lsls	r2, r3, #12
 80028a6:	6803      	ldr	r3, [r0, #0]
 80028a8:	0d1b      	lsrs	r3, r3, #20
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 80028b0:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 80028b4:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 80028b8:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 80028bc:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 80028c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028c4:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	ea80 0602 	eor.w	r6, r0, r2
 80028d0:	f8c7 6238 	str.w	r6, [r7, #568]	@ 0x238
 80028d4:	404b      	eors	r3, r1
 80028d6:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 80028da:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 80028de:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 80028e2:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 80028e6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80028ea:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 80028ee:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80028f2:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 80028f6:	6803      	ldr	r3, [r0, #0]
 80028f8:	02da      	lsls	r2, r3, #11
 80028fa:	680b      	ldr	r3, [r1, #0]
 80028fc:	0d5b      	lsrs	r3, r3, #21
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 8002904:	680b      	ldr	r3, [r1, #0]
 8002906:	02da      	lsls	r2, r3, #11
 8002908:	6803      	ldr	r3, [r0, #0]
 800290a:	0d5b      	lsrs	r3, r3, #21
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8002912:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 8002916:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 800291a:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 800291e:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002926:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	ea80 0602 	eor.w	r6, r0, r2
 8002932:	f8c7 6228 	str.w	r6, [r7, #552]	@ 0x228
 8002936:	404b      	eors	r3, r1
 8002938:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 800293c:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 8002940:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8002944:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 8002948:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800294c:	f5a3 70dc 	sub.w	r0, r3, #440	@ 0x1b8
 8002950:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002954:	f5a3 71da 	sub.w	r1, r3, #436	@ 0x1b4
 8002958:	6803      	ldr	r3, [r0, #0]
 800295a:	0ada      	lsrs	r2, r3, #11
 800295c:	680b      	ldr	r3, [r1, #0]
 800295e:	055b      	lsls	r3, r3, #21
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8002966:	680b      	ldr	r3, [r1, #0]
 8002968:	0ada      	lsrs	r2, r3, #11
 800296a:	6803      	ldr	r3, [r0, #0]
 800296c:	055b      	lsls	r3, r3, #21
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8002974:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8002978:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 800297c:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 8002980:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8002984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002988:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	ea80 0602 	eor.w	r6, r0, r2
 8002994:	f8c7 6218 	str.w	r6, [r7, #536]	@ 0x218
 8002998:	404b      	eors	r3, r1
 800299a:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 800299e:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 80029a2:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 80029a6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 80029aa:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80029ae:	f5a3 70f4 	sub.w	r0, r3, #488	@ 0x1e8
 80029b2:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80029b6:	f5a3 71f2 	sub.w	r1, r3, #484	@ 0x1e4
 80029ba:	6803      	ldr	r3, [r0, #0]
 80029bc:	0c9a      	lsrs	r2, r3, #18
 80029be:	680b      	ldr	r3, [r1, #0]
 80029c0:	039b      	lsls	r3, r3, #14
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 80029c8:	680b      	ldr	r3, [r1, #0]
 80029ca:	0c9a      	lsrs	r2, r3, #18
 80029cc:	6803      	ldr	r3, [r0, #0]
 80029ce:	039b      	lsls	r3, r3, #14
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80029d6:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 80029da:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 80029de:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 80029e2:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	43d1      	mvns	r1, r2
 80029ec:	f8c7 16c0 	str.w	r1, [r7, #1728]	@ 0x6c0
 80029f0:	43db      	mvns	r3, r3
 80029f2:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
 80029f6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80029fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fe:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	@ 0x6c0
 8002a02:	4011      	ands	r1, r2
 8002a04:	f8c7 16b8 	str.w	r1, [r7, #1720]	@ 0x6b8
 8002a08:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	@ 0x6c4
 8002a0c:	400b      	ands	r3, r1
 8002a0e:	f8c7 36bc 	str.w	r3, [r7, #1724]	@ 0x6bc
 8002a12:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	@ 0x6b8
 8002a1e:	4051      	eors	r1, r2
 8002a20:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 8002a24:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	@ 0x6bc
 8002a28:	404b      	eors	r3, r1
 8002a2a:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 8002a2e:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 8002a32:	f507 6144 	add.w	r1, r7, #3136	@ 0xc40
 8002a36:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8002a3a:	f8d7 3c4c 	ldr.w	r3, [r7, #3148]	@ 0xc4c
 8002a3e:	3301      	adds	r3, #1
 8002a40:	4af3      	ldr	r2, [pc, #972]	@ (8002e10 <KeccakF1600_StatePermute+0x273c>)
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a4a:	f507 6344 	add.w	r3, r7, #3136	@ 0xc40
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	ea82 0600 	eor.w	r6, r2, r0
 8002a56:	f8c7 6200 	str.w	r6, [r7, #512]	@ 0x200
 8002a5a:	404b      	eors	r3, r1
 8002a5c:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8002a60:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 8002a64:	f507 6144 	add.w	r1, r7, #3136	@ 0xc40
 8002a68:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 8002a6c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	43d1      	mvns	r1, r2
 8002a76:	f8c7 16b0 	str.w	r1, [r7, #1712]	@ 0x6b0
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
 8002a80:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	@ 0x6b0
 8002a8c:	4011      	ands	r1, r2
 8002a8e:	f8c7 16a8 	str.w	r1, [r7, #1704]	@ 0x6a8
 8002a92:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	@ 0x6b4
 8002a96:	400b      	ands	r3, r1
 8002a98:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 8002a9c:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	@ 0x6a8
 8002aa8:	4051      	eors	r1, r2
 8002aaa:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
 8002aae:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	@ 0x6ac
 8002ab2:	404b      	eors	r3, r1
 8002ab4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8002ab8:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8002abc:	f607 4138 	addw	r1, r7, #3128	@ 0xc38
 8002ac0:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 8002ac4:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002acc:	43d1      	mvns	r1, r2
 8002ace:	f8c7 16a0 	str.w	r1, [r7, #1696]	@ 0x6a0
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	f8c7 36a4 	str.w	r3, [r7, #1700]	@ 0x6a4
 8002ad8:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	@ 0x6a0
 8002ae4:	4011      	ands	r1, r2
 8002ae6:	f8c7 1698 	str.w	r1, [r7, #1688]	@ 0x698
 8002aea:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	@ 0x6a4
 8002aee:	400b      	ands	r3, r1
 8002af0:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 8002af4:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f8d7 1698 	ldr.w	r1, [r7, #1688]	@ 0x698
 8002b00:	4051      	eors	r1, r2
 8002b02:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 8002b06:	f8d7 169c 	ldr.w	r1, [r7, #1692]	@ 0x69c
 8002b0a:	404b      	eors	r3, r1
 8002b0c:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 8002b10:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 8002b14:	f507 6143 	add.w	r1, r7, #3120	@ 0xc30
 8002b18:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 8002b1c:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8002b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b24:	43d1      	mvns	r1, r2
 8002b26:	f8c7 1690 	str.w	r1, [r7, #1680]	@ 0x690
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 8002b30:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	f8d7 1690 	ldr.w	r1, [r7, #1680]	@ 0x690
 8002b3c:	4011      	ands	r1, r2
 8002b3e:	f8c7 1688 	str.w	r1, [r7, #1672]	@ 0x688
 8002b42:	f8d7 1694 	ldr.w	r1, [r7, #1684]	@ 0x694
 8002b46:	400b      	ands	r3, r1
 8002b48:	f8c7 368c 	str.w	r3, [r7, #1676]	@ 0x68c
 8002b4c:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b54:	f8d7 1688 	ldr.w	r1, [r7, #1672]	@ 0x688
 8002b58:	4051      	eors	r1, r2
 8002b5a:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 8002b5e:	f8d7 168c 	ldr.w	r1, [r7, #1676]	@ 0x68c
 8002b62:	404b      	eors	r3, r1
 8002b64:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8002b68:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8002b6c:	f607 4128 	addw	r1, r7, #3112	@ 0xc28
 8002b70:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 8002b74:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	43d1      	mvns	r1, r2
 8002b7e:	f8c7 1680 	str.w	r1, [r7, #1664]	@ 0x680
 8002b82:	43db      	mvns	r3, r3
 8002b84:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 8002b88:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	f8d7 1680 	ldr.w	r1, [r7, #1664]	@ 0x680
 8002b94:	4011      	ands	r1, r2
 8002b96:	f8c7 1678 	str.w	r1, [r7, #1656]	@ 0x678
 8002b9a:	f8d7 1684 	ldr.w	r1, [r7, #1668]	@ 0x684
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 8002ba4:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8002ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bac:	f8d7 1678 	ldr.w	r1, [r7, #1656]	@ 0x678
 8002bb0:	4051      	eors	r1, r2
 8002bb2:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
 8002bb6:	f8d7 167c 	ldr.w	r1, [r7, #1660]	@ 0x67c
 8002bba:	404b      	eors	r3, r1
 8002bbc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002bc0:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 8002bc4:	f507 6142 	add.w	r1, r7, #3104	@ 0xc20
 8002bc8:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 8002bcc:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8002bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd4:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8002bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bdc:	ea80 0602 	eor.w	r6, r0, r2
 8002be0:	f8c7 61d8 	str.w	r6, [r7, #472]	@ 0x1d8
 8002be4:	404b      	eors	r3, r1
 8002be6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002bea:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8002bee:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 8002bf2:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8002bf6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002bfa:	f5a3 70a0 	sub.w	r0, r3, #320	@ 0x140
 8002bfe:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002c02:	f5a3 719e 	sub.w	r1, r3, #316	@ 0x13c
 8002c06:	6803      	ldr	r3, [r0, #0]
 8002c08:	091a      	lsrs	r2, r3, #4
 8002c0a:	680b      	ldr	r3, [r1, #0]
 8002c0c:	071b      	lsls	r3, r3, #28
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8002c14:	680b      	ldr	r3, [r1, #0]
 8002c16:	091a      	lsrs	r2, r3, #4
 8002c18:	6803      	ldr	r3, [r0, #0]
 8002c1a:	071b      	lsls	r3, r3, #28
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8002c22:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 8002c26:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8002c2a:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 8002c2e:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 8002c32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c36:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	ea80 0602 	eor.w	r6, r0, r2
 8002c42:	f8c7 61c8 	str.w	r6, [r7, #456]	@ 0x1c8
 8002c46:	404b      	eors	r3, r1
 8002c48:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8002c4c:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 8002c50:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 8002c54:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8002c58:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002c5c:	f5a3 70b8 	sub.w	r0, r3, #368	@ 0x170
 8002c60:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002c64:	f5a3 71b6 	sub.w	r1, r3, #364	@ 0x16c
 8002c68:	6803      	ldr	r3, [r0, #0]
 8002c6a:	0b1a      	lsrs	r2, r3, #12
 8002c6c:	680b      	ldr	r3, [r1, #0]
 8002c6e:	051b      	lsls	r3, r3, #20
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002c76:	680b      	ldr	r3, [r1, #0]
 8002c78:	0b1a      	lsrs	r2, r3, #12
 8002c7a:	6803      	ldr	r3, [r0, #0]
 8002c7c:	051b      	lsls	r3, r3, #20
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002c84:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8002c88:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8002c8c:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8002c90:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 8002c94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c98:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	ea80 0602 	eor.w	r6, r0, r2
 8002ca4:	f8c7 61b8 	str.w	r6, [r7, #440]	@ 0x1b8
 8002ca8:	404b      	eors	r3, r1
 8002caa:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002cae:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 8002cb2:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 8002cb6:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8002cba:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002cbe:	f5a3 70bc 	sub.w	r0, r3, #376	@ 0x178
 8002cc2:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002cc6:	f5a3 71ba 	sub.w	r1, r3, #372	@ 0x174
 8002cca:	6803      	ldr	r3, [r0, #0]
 8002ccc:	0f5a      	lsrs	r2, r3, #29
 8002cce:	680b      	ldr	r3, [r1, #0]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002cd8:	680b      	ldr	r3, [r1, #0]
 8002cda:	0f5a      	lsrs	r2, r3, #29
 8002cdc:	6803      	ldr	r3, [r0, #0]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002ce6:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8002cea:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8002cee:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8002cf2:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cfa:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8002cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d02:	ea80 0602 	eor.w	r6, r0, r2
 8002d06:	f8c7 61a8 	str.w	r6, [r7, #424]	@ 0x1a8
 8002d0a:	404b      	eors	r3, r1
 8002d0c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8002d10:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 8002d14:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8002d18:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8002d1c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002d20:	f5a3 70d2 	sub.w	r0, r3, #420	@ 0x1a4
 8002d24:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002d28:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 8002d2c:	6803      	ldr	r3, [r0, #0]
 8002d2e:	035a      	lsls	r2, r3, #13
 8002d30:	680b      	ldr	r3, [r1, #0]
 8002d32:	0cdb      	lsrs	r3, r3, #19
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002d3a:	680b      	ldr	r3, [r1, #0]
 8002d3c:	035a      	lsls	r2, r3, #13
 8002d3e:	6803      	ldr	r3, [r0, #0]
 8002d40:	0cdb      	lsrs	r3, r3, #19
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002d48:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 8002d4c:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8002d50:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8002d54:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8002d58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d5c:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	ea80 0602 	eor.w	r6, r0, r2
 8002d68:	f8c7 6198 	str.w	r6, [r7, #408]	@ 0x198
 8002d6c:	404b      	eors	r3, r1
 8002d6e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002d72:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8002d76:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 8002d7a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8002d7e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002d82:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8002d86:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002d8a:	f5a3 71ec 	sub.w	r1, r3, #472	@ 0x1d8
 8002d8e:	6803      	ldr	r3, [r0, #0]
 8002d90:	075a      	lsls	r2, r3, #29
 8002d92:	680b      	ldr	r3, [r1, #0]
 8002d94:	08db      	lsrs	r3, r3, #3
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002d9c:	680b      	ldr	r3, [r1, #0]
 8002d9e:	075a      	lsls	r2, r3, #29
 8002da0:	6803      	ldr	r3, [r0, #0]
 8002da2:	08db      	lsrs	r3, r3, #3
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8002daa:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8002dae:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8002db2:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8002db6:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8002dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbe:	43d1      	mvns	r1, r2
 8002dc0:	f8c7 1670 	str.w	r1, [r7, #1648]	@ 0x670
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
 8002dca:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8002dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd2:	f8d7 1670 	ldr.w	r1, [r7, #1648]	@ 0x670
 8002dd6:	4011      	ands	r1, r2
 8002dd8:	f8c7 1668 	str.w	r1, [r7, #1640]	@ 0x668
 8002ddc:	f8d7 1674 	ldr.w	r1, [r7, #1652]	@ 0x674
 8002de0:	400b      	ands	r3, r1
 8002de2:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 8002de6:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f8d7 1668 	ldr.w	r1, [r7, #1640]	@ 0x668
 8002df2:	4051      	eors	r1, r2
 8002df4:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 8002df8:	f8d7 166c 	ldr.w	r1, [r7, #1644]	@ 0x66c
 8002dfc:	404b      	eors	r3, r1
 8002dfe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8002e02:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8002e06:	f607 4118 	addw	r1, r7, #3096	@ 0xc18
 8002e0a:	e9c1 2300 	strd	r2, r3, [r1]
 8002e0e:	e001      	b.n	8002e14 <KeccakF1600_StatePermute+0x2740>
 8002e10:	0800f810 	.word	0x0800f810
            Age =   BCe ^((~BCi)&  BCo );
 8002e14:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	43d1      	mvns	r1, r2
 8002e1e:	f8c7 1660 	str.w	r1, [r7, #1632]	@ 0x660
 8002e22:	43db      	mvns	r3, r3
 8002e24:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 8002e28:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	f8d7 1660 	ldr.w	r1, [r7, #1632]	@ 0x660
 8002e34:	4011      	ands	r1, r2
 8002e36:	f8c7 1658 	str.w	r1, [r7, #1624]	@ 0x658
 8002e3a:	f8d7 1664 	ldr.w	r1, [r7, #1636]	@ 0x664
 8002e3e:	400b      	ands	r3, r1
 8002e40:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 8002e44:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	f8d7 1658 	ldr.w	r1, [r7, #1624]	@ 0x658
 8002e50:	4051      	eors	r1, r2
 8002e52:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
 8002e56:	f8d7 165c 	ldr.w	r1, [r7, #1628]	@ 0x65c
 8002e5a:	404b      	eors	r3, r1
 8002e5c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002e60:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8002e64:	f507 6141 	add.w	r1, r7, #3088	@ 0xc10
 8002e68:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8002e6c:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e74:	43d1      	mvns	r1, r2
 8002e76:	f8c7 1650 	str.w	r1, [r7, #1616]	@ 0x650
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 8002e80:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f8d7 1650 	ldr.w	r1, [r7, #1616]	@ 0x650
 8002e8c:	4011      	ands	r1, r2
 8002e8e:	f8c7 1648 	str.w	r1, [r7, #1608]	@ 0x648
 8002e92:	f8d7 1654 	ldr.w	r1, [r7, #1620]	@ 0x654
 8002e96:	400b      	ands	r3, r1
 8002e98:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8002e9c:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f8d7 1648 	ldr.w	r1, [r7, #1608]	@ 0x648
 8002ea8:	4051      	eors	r1, r2
 8002eaa:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 8002eae:	f8d7 164c 	ldr.w	r1, [r7, #1612]	@ 0x64c
 8002eb2:	404b      	eors	r3, r1
 8002eb4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002eb8:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8002ebc:	f607 4108 	addw	r1, r7, #3080	@ 0xc08
 8002ec0:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8002ec4:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8002ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ecc:	43d1      	mvns	r1, r2
 8002ece:	f8c7 1640 	str.w	r1, [r7, #1600]	@ 0x640
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 8002ed8:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8002edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee0:	f8d7 1640 	ldr.w	r1, [r7, #1600]	@ 0x640
 8002ee4:	4011      	ands	r1, r2
 8002ee6:	f8c7 1638 	str.w	r1, [r7, #1592]	@ 0x638
 8002eea:	f8d7 1644 	ldr.w	r1, [r7, #1604]	@ 0x644
 8002eee:	400b      	ands	r3, r1
 8002ef0:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 8002ef4:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f8d7 1638 	ldr.w	r1, [r7, #1592]	@ 0x638
 8002f00:	4051      	eors	r1, r2
 8002f02:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 8002f06:	f8d7 163c 	ldr.w	r1, [r7, #1596]	@ 0x63c
 8002f0a:	404b      	eors	r3, r1
 8002f0c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8002f10:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 8002f14:	f507 6140 	add.w	r1, r7, #3072	@ 0xc00
 8002f18:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8002f1c:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8002f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f24:	43d1      	mvns	r1, r2
 8002f26:	f8c7 1630 	str.w	r1, [r7, #1584]	@ 0x630
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 8002f30:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f8d7 1630 	ldr.w	r1, [r7, #1584]	@ 0x630
 8002f3c:	4011      	ands	r1, r2
 8002f3e:	f8c7 1628 	str.w	r1, [r7, #1576]	@ 0x628
 8002f42:	f8d7 1634 	ldr.w	r1, [r7, #1588]	@ 0x634
 8002f46:	400b      	ands	r3, r1
 8002f48:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 8002f4c:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f8d7 1628 	ldr.w	r1, [r7, #1576]	@ 0x628
 8002f58:	4051      	eors	r1, r2
 8002f5a:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
 8002f5e:	f8d7 162c 	ldr.w	r1, [r7, #1580]	@ 0x62c
 8002f62:	404b      	eors	r3, r1
 8002f64:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002f68:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8002f6c:	f607 31f8 	addw	r1, r7, #3064	@ 0xbf8
 8002f70:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8002f74:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8002f78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f7c:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	ea80 0602 	eor.w	r6, r0, r2
 8002f88:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8002f8c:	404b      	eors	r3, r1
 8002f8e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002f92:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8002f96:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8002f9a:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8002f9e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002fa2:	f5a3 7098 	sub.w	r0, r3, #304	@ 0x130
 8002fa6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8002faa:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8002fae:	6803      	ldr	r3, [r0, #0]
 8002fb0:	0fda      	lsrs	r2, r3, #31
 8002fb2:	680b      	ldr	r3, [r1, #0]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002fbc:	680b      	ldr	r3, [r1, #0]
 8002fbe:	0fda      	lsrs	r2, r3, #31
 8002fc0:	6803      	ldr	r3, [r0, #0]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002fca:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8002fce:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8002fd2:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8002fd6:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 8002fda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fde:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	ea80 0602 	eor.w	r6, r0, r2
 8002fea:	f8c7 6150 	str.w	r6, [r7, #336]	@ 0x150
 8002fee:	404b      	eors	r3, r1
 8002ff0:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002ff4:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002ff8:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8002ffc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8003000:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003004:	f5a3 70b0 	sub.w	r0, r3, #352	@ 0x160
 8003008:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800300c:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 8003010:	6803      	ldr	r3, [r0, #0]
 8003012:	0e9a      	lsrs	r2, r3, #26
 8003014:	680b      	ldr	r3, [r1, #0]
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800301e:	680b      	ldr	r3, [r1, #0]
 8003020:	0e9a      	lsrs	r2, r3, #26
 8003022:	6803      	ldr	r3, [r0, #0]
 8003024:	019b      	lsls	r3, r3, #6
 8003026:	4313      	orrs	r3, r2
 8003028:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800302c:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8003030:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8003034:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8003038:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 800303c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003040:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	ea80 0602 	eor.w	r6, r0, r2
 800304c:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8003050:	404b      	eors	r3, r1
 8003052:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003056:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800305a:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 800305e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8003062:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003066:	f5a3 70c8 	sub.w	r0, r3, #400	@ 0x190
 800306a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800306e:	f5a3 71c6 	sub.w	r1, r3, #396	@ 0x18c
 8003072:	6803      	ldr	r3, [r0, #0]
 8003074:	09da      	lsrs	r2, r3, #7
 8003076:	680b      	ldr	r3, [r1, #0]
 8003078:	065b      	lsls	r3, r3, #25
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003080:	680b      	ldr	r3, [r1, #0]
 8003082:	09da      	lsrs	r2, r3, #7
 8003084:	6803      	ldr	r3, [r0, #0]
 8003086:	065b      	lsls	r3, r3, #25
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800308e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8003092:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8003096:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 800309a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800309e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030a2:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	ea80 0602 	eor.w	r6, r0, r2
 80030ae:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 80030b2:	404b      	eors	r3, r1
 80030b4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80030b8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80030bc:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 80030c0:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 80030c4:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80030c8:	f5a3 70e0 	sub.w	r0, r3, #448	@ 0x1c0
 80030cc:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80030d0:	f5a3 71de 	sub.w	r1, r3, #444	@ 0x1bc
 80030d4:	6803      	ldr	r3, [r0, #0]
 80030d6:	0e1a      	lsrs	r2, r3, #24
 80030d8:	680b      	ldr	r3, [r1, #0]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80030e2:	680b      	ldr	r3, [r1, #0]
 80030e4:	0e1a      	lsrs	r2, r3, #24
 80030e6:	6803      	ldr	r3, [r0, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	4313      	orrs	r3, r2
 80030ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80030f0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80030f4:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 80030f8:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 80030fc:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8003100:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003104:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	ea80 0602 	eor.w	r6, r0, r2
 8003110:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 8003114:	404b      	eors	r3, r1
 8003116:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800311a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800311e:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 8003122:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8003126:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800312a:	f5a3 70e4 	sub.w	r0, r3, #456	@ 0x1c8
 800312e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003132:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003136:	6803      	ldr	r3, [r0, #0]
 8003138:	0b9a      	lsrs	r2, r3, #14
 800313a:	680b      	ldr	r3, [r1, #0]
 800313c:	049b      	lsls	r3, r3, #18
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003144:	680b      	ldr	r3, [r1, #0]
 8003146:	0b9a      	lsrs	r2, r3, #14
 8003148:	6803      	ldr	r3, [r0, #0]
 800314a:	049b      	lsls	r3, r3, #18
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003152:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8003156:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 800315a:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 800315e:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003166:	43d1      	mvns	r1, r2
 8003168:	f8c7 1620 	str.w	r1, [r7, #1568]	@ 0x620
 800316c:	43db      	mvns	r3, r3
 800316e:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8003172:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f8d7 1620 	ldr.w	r1, [r7, #1568]	@ 0x620
 800317e:	4011      	ands	r1, r2
 8003180:	f8c7 1618 	str.w	r1, [r7, #1560]	@ 0x618
 8003184:	f8d7 1624 	ldr.w	r1, [r7, #1572]	@ 0x624
 8003188:	400b      	ands	r3, r1
 800318a:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 800318e:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f8d7 1618 	ldr.w	r1, [r7, #1560]	@ 0x618
 800319a:	4051      	eors	r1, r2
 800319c:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80031a0:	f8d7 161c 	ldr.w	r1, [r7, #1564]	@ 0x61c
 80031a4:	404b      	eors	r3, r1
 80031a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80031aa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80031ae:	f507 613f 	add.w	r1, r7, #3056	@ 0xbf0
 80031b2:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 80031b6:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80031ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031be:	43d1      	mvns	r1, r2
 80031c0:	f8c7 1610 	str.w	r1, [r7, #1552]	@ 0x610
 80031c4:	43db      	mvns	r3, r3
 80031c6:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 80031ca:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f8d7 1610 	ldr.w	r1, [r7, #1552]	@ 0x610
 80031d6:	4011      	ands	r1, r2
 80031d8:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 80031dc:	f8d7 1614 	ldr.w	r1, [r7, #1556]	@ 0x614
 80031e0:	400b      	ands	r3, r1
 80031e2:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 80031e6:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f8d7 1608 	ldr.w	r1, [r7, #1544]	@ 0x608
 80031f2:	4051      	eors	r1, r2
 80031f4:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 80031f8:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 80031fc:	404b      	eors	r3, r1
 80031fe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003202:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8003206:	f607 31e8 	addw	r1, r7, #3048	@ 0xbe8
 800320a:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 800320e:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8003212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003216:	43d1      	mvns	r1, r2
 8003218:	f8c7 1600 	str.w	r1, [r7, #1536]	@ 0x600
 800321c:	43db      	mvns	r3, r3
 800321e:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8003222:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f8d7 1600 	ldr.w	r1, [r7, #1536]	@ 0x600
 800322e:	4011      	ands	r1, r2
 8003230:	f8c7 15f8 	str.w	r1, [r7, #1528]	@ 0x5f8
 8003234:	f8d7 1604 	ldr.w	r1, [r7, #1540]	@ 0x604
 8003238:	400b      	ands	r3, r1
 800323a:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 800323e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	@ 0x5f8
 800324a:	4051      	eors	r1, r2
 800324c:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8003250:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	@ 0x5fc
 8003254:	404b      	eors	r3, r1
 8003256:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800325a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 800325e:	f507 613e 	add.w	r1, r7, #3040	@ 0xbe0
 8003262:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 8003266:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	43d1      	mvns	r1, r2
 8003270:	f8c7 15f0 	str.w	r1, [r7, #1520]	@ 0x5f0
 8003274:	43db      	mvns	r3, r3
 8003276:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 800327a:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 800327e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003282:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	@ 0x5f0
 8003286:	4011      	ands	r1, r2
 8003288:	f8c7 15e8 	str.w	r1, [r7, #1512]	@ 0x5e8
 800328c:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	@ 0x5f4
 8003290:	400b      	ands	r3, r1
 8003292:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 8003296:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	@ 0x5e8
 80032a2:	4051      	eors	r1, r2
 80032a4:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80032a8:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	@ 0x5ec
 80032ac:	404b      	eors	r3, r1
 80032ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80032b2:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 80032b6:	f607 31d8 	addw	r1, r7, #3032	@ 0xbd8
 80032ba:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 80032be:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80032c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c6:	43d1      	mvns	r1, r2
 80032c8:	f8c7 15e0 	str.w	r1, [r7, #1504]	@ 0x5e0
 80032cc:	43db      	mvns	r3, r3
 80032ce:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 80032d2:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	@ 0x5e0
 80032de:	4011      	ands	r1, r2
 80032e0:	f8c7 15d8 	str.w	r1, [r7, #1496]	@ 0x5d8
 80032e4:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 80032e8:	400b      	ands	r3, r1
 80032ea:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 80032ee:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80032f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f6:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	@ 0x5d8
 80032fa:	4051      	eors	r1, r2
 80032fc:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8003300:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	@ 0x5dc
 8003304:	404b      	eors	r3, r1
 8003306:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800330a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 800330e:	f507 613d 	add.w	r1, r7, #3024	@ 0xbd0
 8003312:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 8003316:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 800331a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800331e:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	ea80 0602 	eor.w	r6, r0, r2
 800332a:	f8c7 60e8 	str.w	r6, [r7, #232]	@ 0xe8
 800332e:	404b      	eors	r3, r1
 8003330:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003334:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8003338:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 800333c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 8003340:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003344:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 8003348:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800334c:	f5a3 71a2 	sub.w	r1, r3, #324	@ 0x144
 8003350:	6803      	ldr	r3, [r0, #0]
 8003352:	095a      	lsrs	r2, r3, #5
 8003354:	680b      	ldr	r3, [r1, #0]
 8003356:	06db      	lsls	r3, r3, #27
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800335e:	680b      	ldr	r3, [r1, #0]
 8003360:	095a      	lsrs	r2, r3, #5
 8003362:	6803      	ldr	r3, [r0, #0]
 8003364:	06db      	lsls	r3, r3, #27
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800336c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8003370:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8003374:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 8003378:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 800337c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003380:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8003384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003388:	ea80 0602 	eor.w	r6, r0, r2
 800338c:	f8c7 60d8 	str.w	r6, [r7, #216]	@ 0xd8
 8003390:	404b      	eors	r3, r1
 8003392:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003396:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 800339a:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 800339e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 80033a2:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80033a6:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 80033aa:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80033ae:	f5a3 71a8 	sub.w	r1, r3, #336	@ 0x150
 80033b2:	6803      	ldr	r3, [r0, #0]
 80033b4:	011a      	lsls	r2, r3, #4
 80033b6:	680b      	ldr	r3, [r1, #0]
 80033b8:	0f1b      	lsrs	r3, r3, #28
 80033ba:	4313      	orrs	r3, r2
 80033bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033c0:	680b      	ldr	r3, [r1, #0]
 80033c2:	011a      	lsls	r2, r3, #4
 80033c4:	6803      	ldr	r3, [r0, #0]
 80033c6:	0f1b      	lsrs	r3, r3, #28
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80033ce:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 80033d2:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 80033d6:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 80033da:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 80033de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033e2:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	ea80 0602 	eor.w	r6, r0, r2
 80033ee:	f8c7 60c8 	str.w	r6, [r7, #200]	@ 0xc8
 80033f2:	404b      	eors	r3, r1
 80033f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033f8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 80033fc:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8003400:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 8003404:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003408:	f5a3 70c0 	sub.w	r0, r3, #384	@ 0x180
 800340c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003410:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003414:	6803      	ldr	r3, [r0, #0]
 8003416:	0d9a      	lsrs	r2, r3, #22
 8003418:	680b      	ldr	r3, [r1, #0]
 800341a:	029b      	lsls	r3, r3, #10
 800341c:	4313      	orrs	r3, r2
 800341e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003422:	680b      	ldr	r3, [r1, #0]
 8003424:	0d9a      	lsrs	r2, r3, #22
 8003426:	6803      	ldr	r3, [r0, #0]
 8003428:	029b      	lsls	r3, r3, #10
 800342a:	4313      	orrs	r3, r2
 800342c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003430:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8003434:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8003438:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 800343c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003440:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003444:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8003448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344c:	ea80 0602 	eor.w	r6, r0, r2
 8003450:	f8c7 60b8 	str.w	r6, [r7, #184]	@ 0xb8
 8003454:	404b      	eors	r3, r1
 8003456:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800345a:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 800345e:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8003462:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 8003466:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800346a:	f5a3 70d8 	sub.w	r0, r3, #432	@ 0x1b0
 800346e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003472:	f5a3 71d6 	sub.w	r1, r3, #428	@ 0x1ac
 8003476:	6803      	ldr	r3, [r0, #0]
 8003478:	0c5a      	lsrs	r2, r3, #17
 800347a:	680b      	ldr	r3, [r1, #0]
 800347c:	03db      	lsls	r3, r3, #15
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003484:	680b      	ldr	r3, [r1, #0]
 8003486:	0c5a      	lsrs	r2, r3, #17
 8003488:	6803      	ldr	r3, [r0, #0]
 800348a:	03db      	lsls	r3, r3, #15
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003492:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8003496:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 800349a:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 800349e:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80034a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034a6:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 80034aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ae:	ea80 0602 	eor.w	r6, r0, r2
 80034b2:	f8c7 60a8 	str.w	r6, [r7, #168]	@ 0xa8
 80034b6:	404b      	eors	r3, r1
 80034b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034bc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 80034c0:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 80034c4:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 80034c8:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80034cc:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 80034d0:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80034d4:	f5a3 71f0 	sub.w	r1, r3, #480	@ 0x1e0
 80034d8:	6803      	ldr	r3, [r0, #0]
 80034da:	061a      	lsls	r2, r3, #24
 80034dc:	680b      	ldr	r3, [r1, #0]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034e6:	680b      	ldr	r3, [r1, #0]
 80034e8:	061a      	lsls	r2, r3, #24
 80034ea:	6803      	ldr	r3, [r0, #0]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80034f4:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80034f8:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 80034fc:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 8003500:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003508:	43d1      	mvns	r1, r2
 800350a:	f8c7 15d0 	str.w	r1, [r7, #1488]	@ 0x5d0
 800350e:	43db      	mvns	r3, r3
 8003510:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 8003514:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8003518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351c:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	@ 0x5d0
 8003520:	4011      	ands	r1, r2
 8003522:	f8c7 15c8 	str.w	r1, [r7, #1480]	@ 0x5c8
 8003526:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	@ 0x5d4
 800352a:	400b      	ands	r3, r1
 800352c:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 8003530:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	@ 0x5c8
 800353c:	4051      	eors	r1, r2
 800353e:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8003542:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	@ 0x5cc
 8003546:	404b      	eors	r3, r1
 8003548:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800354c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8003550:	f607 31c8 	addw	r1, r7, #3016	@ 0xbc8
 8003554:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 8003558:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	43d1      	mvns	r1, r2
 8003562:	f8c7 15c0 	str.w	r1, [r7, #1472]	@ 0x5c0
 8003566:	43db      	mvns	r3, r3
 8003568:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 800356c:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	@ 0x5c0
 8003578:	4011      	ands	r1, r2
 800357a:	f8c7 15b8 	str.w	r1, [r7, #1464]	@ 0x5b8
 800357e:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	@ 0x5c4
 8003582:	400b      	ands	r3, r1
 8003584:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 8003588:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800358c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003590:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	@ 0x5b8
 8003594:	4051      	eors	r1, r2
 8003596:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800359a:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	@ 0x5bc
 800359e:	404b      	eors	r3, r1
 80035a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80035a4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80035a8:	f507 613c 	add.w	r1, r7, #3008	@ 0xbc0
 80035ac:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 80035b0:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	43d1      	mvns	r1, r2
 80035ba:	f8c7 15b0 	str.w	r1, [r7, #1456]	@ 0x5b0
 80035be:	43db      	mvns	r3, r3
 80035c0:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 80035c4:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	@ 0x5b0
 80035d0:	4011      	ands	r1, r2
 80035d2:	f8c7 15a8 	str.w	r1, [r7, #1448]	@ 0x5a8
 80035d6:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	@ 0x5b4
 80035da:	400b      	ands	r3, r1
 80035dc:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 80035e0:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	@ 0x5a8
 80035ec:	4051      	eors	r1, r2
 80035ee:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80035f2:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	@ 0x5ac
 80035f6:	404b      	eors	r3, r1
 80035f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80035fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003600:	f607 31b8 	addw	r1, r7, #3000	@ 0xbb8
 8003604:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 8003608:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	43d1      	mvns	r1, r2
 8003612:	f8c7 15a0 	str.w	r1, [r7, #1440]	@ 0x5a0
 8003616:	43db      	mvns	r3, r3
 8003618:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 800361c:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	@ 0x5a0
 8003628:	4011      	ands	r1, r2
 800362a:	f8c7 1598 	str.w	r1, [r7, #1432]	@ 0x598
 800362e:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	@ 0x5a4
 8003632:	400b      	ands	r3, r1
 8003634:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 8003638:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f8d7 1598 	ldr.w	r1, [r7, #1432]	@ 0x598
 8003644:	4051      	eors	r1, r2
 8003646:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800364a:	f8d7 159c 	ldr.w	r1, [r7, #1436]	@ 0x59c
 800364e:	404b      	eors	r3, r1
 8003650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003654:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8003658:	f507 613b 	add.w	r1, r7, #2992	@ 0xbb0
 800365c:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 8003660:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8003664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003668:	43d1      	mvns	r1, r2
 800366a:	f8c7 1590 	str.w	r1, [r7, #1424]	@ 0x590
 800366e:	43db      	mvns	r3, r3
 8003670:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 8003674:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	f8d7 1590 	ldr.w	r1, [r7, #1424]	@ 0x590
 8003680:	4011      	ands	r1, r2
 8003682:	f8c7 1588 	str.w	r1, [r7, #1416]	@ 0x588
 8003686:	f8d7 1594 	ldr.w	r1, [r7, #1428]	@ 0x594
 800368a:	400b      	ands	r3, r1
 800368c:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 8003690:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8003694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003698:	f8d7 1588 	ldr.w	r1, [r7, #1416]	@ 0x588
 800369c:	4051      	eors	r1, r2
 800369e:	67b9      	str	r1, [r7, #120]	@ 0x78
 80036a0:	f8d7 158c 	ldr.w	r1, [r7, #1420]	@ 0x58c
 80036a4:	404b      	eors	r3, r1
 80036a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036a8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80036ac:	f607 31a8 	addw	r1, r7, #2984	@ 0xba8
 80036b0:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 80036b4:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80036b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036bc:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	ea80 0602 	eor.w	r6, r0, r2
 80036c8:	673e      	str	r6, [r7, #112]	@ 0x70
 80036ca:	404b      	eors	r3, r1
 80036cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80036ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80036d2:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 80036d6:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 80036da:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80036de:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 80036e2:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80036e6:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 80036ea:	6803      	ldr	r3, [r0, #0]
 80036ec:	079a      	lsls	r2, r3, #30
 80036ee:	680b      	ldr	r3, [r1, #0]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	4313      	orrs	r3, r2
 80036f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036f6:	680b      	ldr	r3, [r1, #0]
 80036f8:	079a      	lsls	r2, r3, #30
 80036fa:	6803      	ldr	r3, [r0, #0]
 80036fc:	089b      	lsrs	r3, r3, #2
 80036fe:	4313      	orrs	r3, r2
 8003700:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003702:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003706:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 800370a:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 800370e:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 8003712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003716:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	ea80 0602 	eor.w	r6, r0, r2
 8003722:	663e      	str	r6, [r7, #96]	@ 0x60
 8003724:	404b      	eors	r3, r1
 8003726:	667b      	str	r3, [r7, #100]	@ 0x64
 8003728:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800372c:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8003730:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 8003734:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003738:	f5a3 70b2 	sub.w	r0, r3, #356	@ 0x164
 800373c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003740:	f5a3 71b4 	sub.w	r1, r3, #360	@ 0x168
 8003744:	6803      	ldr	r3, [r0, #0]
 8003746:	05da      	lsls	r2, r3, #23
 8003748:	680b      	ldr	r3, [r1, #0]
 800374a:	0a5b      	lsrs	r3, r3, #9
 800374c:	4313      	orrs	r3, r2
 800374e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003750:	680b      	ldr	r3, [r1, #0]
 8003752:	05da      	lsls	r2, r3, #23
 8003754:	6803      	ldr	r3, [r0, #0]
 8003756:	0a5b      	lsrs	r3, r3, #9
 8003758:	4313      	orrs	r3, r2
 800375a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800375c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003760:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 8003764:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 8003768:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 800376c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003770:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	ea80 0602 	eor.w	r6, r0, r2
 800377c:	653e      	str	r6, [r7, #80]	@ 0x50
 800377e:	404b      	eors	r3, r1
 8003780:	657b      	str	r3, [r7, #84]	@ 0x54
 8003782:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003786:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 800378a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 800378e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003792:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8003796:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800379a:	f5a3 71cc 	sub.w	r1, r3, #408	@ 0x198
 800379e:	6803      	ldr	r3, [r0, #0]
 80037a0:	01da      	lsls	r2, r3, #7
 80037a2:	680b      	ldr	r3, [r1, #0]
 80037a4:	0e5b      	lsrs	r3, r3, #25
 80037a6:	4313      	orrs	r3, r2
 80037a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037aa:	680b      	ldr	r3, [r1, #0]
 80037ac:	01da      	lsls	r2, r3, #7
 80037ae:	6803      	ldr	r3, [r0, #0]
 80037b0:	0e5b      	lsrs	r3, r3, #25
 80037b2:	4313      	orrs	r3, r2
 80037b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037ba:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 80037be:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 80037c2:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80037c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037ca:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 80037ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d2:	ea80 0602 	eor.w	r6, r0, r2
 80037d6:	643e      	str	r6, [r7, #64]	@ 0x40
 80037d8:	404b      	eors	r3, r1
 80037da:	647b      	str	r3, [r7, #68]	@ 0x44
 80037dc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80037e0:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80037e4:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 80037e8:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80037ec:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 80037f0:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 80037f4:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80037f8:	6803      	ldr	r3, [r0, #0]
 80037fa:	025a      	lsls	r2, r3, #9
 80037fc:	680b      	ldr	r3, [r1, #0]
 80037fe:	0ddb      	lsrs	r3, r3, #23
 8003800:	4313      	orrs	r3, r2
 8003802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003804:	680b      	ldr	r3, [r1, #0]
 8003806:	025a      	lsls	r2, r3, #9
 8003808:	6803      	ldr	r3, [r0, #0]
 800380a:	0ddb      	lsrs	r3, r3, #23
 800380c:	4313      	orrs	r3, r2
 800380e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003810:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003814:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 8003818:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 800381c:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8003820:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003824:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	ea80 0602 	eor.w	r6, r0, r2
 8003830:	633e      	str	r6, [r7, #48]	@ 0x30
 8003832:	404b      	eors	r3, r1
 8003834:	637b      	str	r3, [r7, #52]	@ 0x34
 8003836:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800383a:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 800383e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 8003842:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003846:	f5a3 70e8 	sub.w	r0, r3, #464	@ 0x1d0
 800384a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 800384e:	f5a3 71e6 	sub.w	r1, r3, #460	@ 0x1cc
 8003852:	6803      	ldr	r3, [r0, #0]
 8003854:	0f9a      	lsrs	r2, r3, #30
 8003856:	680b      	ldr	r3, [r1, #0]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4313      	orrs	r3, r2
 800385c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800385e:	680b      	ldr	r3, [r1, #0]
 8003860:	0f9a      	lsrs	r2, r3, #30
 8003862:	6803      	ldr	r3, [r0, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4313      	orrs	r3, r2
 8003868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800386a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800386e:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8003872:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 8003876:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	43d1      	mvns	r1, r2
 8003880:	f8c7 1580 	str.w	r1, [r7, #1408]	@ 0x580
 8003884:	43db      	mvns	r3, r3
 8003886:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 800388a:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	f8d7 1580 	ldr.w	r1, [r7, #1408]	@ 0x580
 8003896:	4011      	ands	r1, r2
 8003898:	f8c7 1578 	str.w	r1, [r7, #1400]	@ 0x578
 800389c:	f8d7 1584 	ldr.w	r1, [r7, #1412]	@ 0x584
 80038a0:	400b      	ands	r3, r1
 80038a2:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 80038a6:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f8d7 1578 	ldr.w	r1, [r7, #1400]	@ 0x578
 80038b2:	4051      	eors	r1, r2
 80038b4:	6239      	str	r1, [r7, #32]
 80038b6:	f8d7 157c 	ldr.w	r1, [r7, #1404]	@ 0x57c
 80038ba:	404b      	eors	r3, r1
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038c2:	f507 613a 	add.w	r1, r7, #2976	@ 0xba0
 80038c6:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 80038ca:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	43d1      	mvns	r1, r2
 80038d4:	f8c7 1570 	str.w	r1, [r7, #1392]	@ 0x570
 80038d8:	43db      	mvns	r3, r3
 80038da:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 80038de:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	f8d7 1570 	ldr.w	r1, [r7, #1392]	@ 0x570
 80038ea:	4011      	ands	r1, r2
 80038ec:	f8c7 1568 	str.w	r1, [r7, #1384]	@ 0x568
 80038f0:	f8d7 1574 	ldr.w	r1, [r7, #1396]	@ 0x574
 80038f4:	400b      	ands	r3, r1
 80038f6:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 80038fa:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80038fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003902:	f8d7 1568 	ldr.w	r1, [r7, #1384]	@ 0x568
 8003906:	4051      	eors	r1, r2
 8003908:	61b9      	str	r1, [r7, #24]
 800390a:	f8d7 156c 	ldr.w	r1, [r7, #1388]	@ 0x56c
 800390e:	404b      	eors	r3, r1
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003916:	f607 3198 	addw	r1, r7, #2968	@ 0xb98
 800391a:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 800391e:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8003922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003926:	43d1      	mvns	r1, r2
 8003928:	f8c7 1560 	str.w	r1, [r7, #1376]	@ 0x560
 800392c:	43db      	mvns	r3, r3
 800392e:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
 8003932:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f8d7 1560 	ldr.w	r1, [r7, #1376]	@ 0x560
 800393e:	4011      	ands	r1, r2
 8003940:	f8c7 1558 	str.w	r1, [r7, #1368]	@ 0x558
 8003944:	f8d7 1564 	ldr.w	r1, [r7, #1380]	@ 0x564
 8003948:	400b      	ands	r3, r1
 800394a:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 800394e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f8d7 1558 	ldr.w	r1, [r7, #1368]	@ 0x558
 800395a:	4051      	eors	r1, r2
 800395c:	6139      	str	r1, [r7, #16]
 800395e:	f8d7 155c 	ldr.w	r1, [r7, #1372]	@ 0x55c
 8003962:	404b      	eors	r3, r1
 8003964:	617b      	str	r3, [r7, #20]
 8003966:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800396a:	f507 6139 	add.w	r1, r7, #2960	@ 0xb90
 800396e:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 8003972:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	43d1      	mvns	r1, r2
 800397c:	f8c7 1550 	str.w	r1, [r7, #1360]	@ 0x550
 8003980:	43db      	mvns	r3, r3
 8003982:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 8003986:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f8d7 1550 	ldr.w	r1, [r7, #1360]	@ 0x550
 8003992:	ea01 0a02 	and.w	sl, r1, r2
 8003996:	f8d7 1554 	ldr.w	r1, [r7, #1364]	@ 0x554
 800399a:	ea01 0b03 	and.w	fp, r1, r3
 800399e:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	ea82 010a 	eor.w	r1, r2, sl
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	ea83 030b 	eor.w	r3, r3, fp
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039b6:	f607 3188 	addw	r1, r7, #2952	@ 0xb88
 80039ba:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 80039be:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	ea6f 0802 	mvn.w	r8, r2
 80039ca:	ea6f 0903 	mvn.w	r9, r3
 80039ce:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	ea08 0402 	and.w	r4, r8, r2
 80039da:	ea09 0503 	and.w	r5, r9, r3
 80039de:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	ea82 0104 	eor.w	r1, r2, r4
 80039ea:	6039      	str	r1, [r7, #0]
 80039ec:	406b      	eors	r3, r5
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039f4:	f507 6138 	add.w	r1, r7, #2944	@ 0xb80
 80039f8:	e9c1 2300 	strd	r2, r3, [r1]
        for(round = 0; round < NROUNDS; round += 2) {
 80039fc:	f8d7 3c4c 	ldr.w	r3, [r7, #3148]	@ 0xc4c
 8003a00:	3302      	adds	r3, #2
 8003a02:	f8c7 3c4c 	str.w	r3, [r7, #3148]	@ 0xc4c
 8003a06:	f8d7 3c4c 	ldr.w	r3, [r7, #3148]	@ 0xc4c
 8003a0a:	2b17      	cmp	r3, #23
 8003a0c:	f77c af84 	ble.w	8000918 <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8003a10:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003a14:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003a18:	6819      	ldr	r1, [r3, #0]
 8003a1a:	f507 6344 	add.w	r3, r7, #3136	@ 0xc40
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 8003a26:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003a2a:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f103 0108 	add.w	r1, r3, #8
 8003a34:	f607 4338 	addw	r3, r7, #3128	@ 0xc38
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 8003a40:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003a44:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f103 0110 	add.w	r1, r3, #16
 8003a4e:	f507 6343 	add.w	r3, r7, #3120	@ 0xc30
 8003a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a56:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 8003a5a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003a5e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f103 0118 	add.w	r1, r3, #24
 8003a68:	f607 4328 	addw	r3, r7, #3112	@ 0xc28
 8003a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a70:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 8003a74:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003a78:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f103 0120 	add.w	r1, r3, #32
 8003a82:	f507 6342 	add.w	r3, r7, #3104	@ 0xc20
 8003a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 8003a8e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003a92:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8003a9c:	f607 4318 	addw	r3, r7, #3096	@ 0xc18
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 8003aa8:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003aac:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003ab6:	f507 6341 	add.w	r3, r7, #3088	@ 0xc10
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 8003ac2:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003ac6:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003ad0:	f607 4308 	addw	r3, r7, #3080	@ 0xc08
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 8003adc:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003ae0:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8003aea:	f507 6340 	add.w	r3, r7, #3072	@ 0xc00
 8003aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af2:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 8003af6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003afa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8003b04:	f607 33f8 	addw	r3, r7, #3064	@ 0xbf8
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 8003b10:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003b14:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8003b1e:	f507 633f 	add.w	r3, r7, #3056	@ 0xbf0
 8003b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b26:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 8003b2a:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003b2e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8003b38:	f607 33e8 	addw	r3, r7, #3048	@ 0xbe8
 8003b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b40:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 8003b44:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003b48:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 8003b52:	f507 633e 	add.w	r3, r7, #3040	@ 0xbe0
 8003b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5a:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 8003b5e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003b62:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8003b6c:	f607 33d8 	addw	r3, r7, #3032	@ 0xbd8
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 8003b78:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003b7c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8003b86:	f507 633d 	add.w	r3, r7, #3024	@ 0xbd0
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 8003b92:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003b96:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8003ba0:	f607 33c8 	addw	r3, r7, #3016	@ 0xbc8
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8003bac:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003bb0:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8003bba:	f507 633c 	add.w	r3, r7, #3008	@ 0xbc0
 8003bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc2:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8003bc6:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003bca:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8003bd4:	f607 33b8 	addw	r3, r7, #3000	@ 0xbb8
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8003be0:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003be4:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8003bee:	f507 633b 	add.w	r3, r7, #2992	@ 0xbb0
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 8003bfa:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003bfe:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 8003c08:	f607 33a8 	addw	r3, r7, #2984	@ 0xba8
 8003c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c10:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8003c14:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003c18:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 8003c22:	f507 633a 	add.w	r3, r7, #2976	@ 0xba0
 8003c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2a:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8003c2e:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003c32:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 8003c3c:	f607 3398 	addw	r3, r7, #2968	@ 0xb98
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8003c48:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003c4c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 8003c56:	f507 6339 	add.w	r3, r7, #2960	@ 0xb90
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8003c62:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003c66:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 8003c70:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8003c7c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003c80:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8003c8a:	f507 6338 	add.w	r3, r7, #2944	@ 0xb80
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	e9c1 2300 	strd	r2, r3, [r1]

        print_keccak_state(state, "After Round", round + 1);
 8003c96:	f8d7 3c4c 	ldr.w	r3, [r7, #3148]	@ 0xc4c
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	f507 6345 	add.w	r3, r7, #3152	@ 0xc50
 8003ca0:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003ca4:	4904      	ldr	r1, [pc, #16]	@ (8003cb8 <KeccakF1600_StatePermute+0x35e4>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	f7fc fc78 	bl	800059c <print_keccak_state>
}
 8003cac:	bf00      	nop
 8003cae:	f607 4754 	addw	r7, r7, #3156	@ 0xc54
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb8:	0800f5d8 	.word	0x0800f5d8

08003cbc <keccak_absorb_once>:
static void keccak_absorb_once(uint64_t s[25],
                               unsigned int r,
                               const uint8_t *in,
                               size_t inlen,
                               uint8_t p)
{
 8003cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc0:	b092      	sub	sp, #72	@ 0x48
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003cc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003cc8:	637a      	str	r2, [r7, #52]	@ 0x34
 8003cca:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned int i;

  for(i=0;i<25;i++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd0:	e00c      	b.n	8003cec <keccak_absorb_once+0x30>
    s[i] = 0;
 8003cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cd4:	00da      	lsls	r2, r3, #3
 8003cd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd8:	1899      	adds	r1, r3, r2
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8003ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce8:	3301      	adds	r3, #1
 8003cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cee:	2b18      	cmp	r3, #24
 8003cf0:	d9ef      	bls.n	8003cd2 <keccak_absorb_once+0x16>

  while(inlen >= r) {
 8003cf2:	e032      	b.n	8003d5a <keccak_absorb_once+0x9e>
    for(i=0;i<r/8;i++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf8:	e01f      	b.n	8003d3a <keccak_absorb_once+0x7e>
      s[i] ^= load64(in+8*i);
 8003cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cfc:	00da      	lsls	r2, r3, #3
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d00:	4413      	add	r3, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fc7c 	bl	8000600 <load64>
 8003d08:	4604      	mov	r4, r0
 8003d0a:	460d      	mov	r5, r1
 8003d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d0e:	00da      	lsls	r2, r3, #3
 8003d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d12:	4413      	add	r3, r2
 8003d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d1a:	00da      	lsls	r2, r3, #3
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d1e:	4413      	add	r3, r2
 8003d20:	ea84 0200 	eor.w	r2, r4, r0
 8003d24:	623a      	str	r2, [r7, #32]
 8003d26:	ea85 0201 	eor.w	r2, r5, r1
 8003d2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003d30:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<r/8;i++)
 8003d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d36:	3301      	adds	r3, #1
 8003d38:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3c:	08da      	lsrs	r2, r3, #3
 8003d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d3da      	bcc.n	8003cfa <keccak_absorb_once+0x3e>
    in += r;
 8003d44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	4413      	add	r3, r2
 8003d4a:	637b      	str	r3, [r7, #52]	@ 0x34
    inlen -= r;
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	633b      	str	r3, [r7, #48]	@ 0x30
    KeccakF1600_StatePermute(s);
 8003d54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003d56:	f7fc fcbd 	bl	80006d4 <KeccakF1600_StatePermute>
  while(inlen >= r) {
 8003d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d2c8      	bcs.n	8003cf4 <keccak_absorb_once+0x38>
  }

  for(i=0;i<inlen;i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d66:	e038      	b.n	8003dda <keccak_absorb_once+0x11e>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 8003d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d6a:	f023 0207 	bic.w	r2, r3, #7
 8003d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d70:	4413      	add	r3, r2
 8003d72:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d7a:	4413      	add	r3, r2
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2200      	movs	r2, #0
 8003d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	00d9      	lsls	r1, r3, #3
 8003d8e:	f1a1 0320 	sub.w	r3, r1, #32
 8003d92:	f1c1 0220 	rsb	r2, r1, #32
 8003d96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d98:	fa00 fb01 	lsl.w	fp, r0, r1
 8003d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d9e:	fa00 f303 	lsl.w	r3, r0, r3
 8003da2:	ea4b 0b03 	orr.w	fp, fp, r3
 8003da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da8:	fa23 f202 	lsr.w	r2, r3, r2
 8003dac:	ea4b 0b02 	orr.w	fp, fp, r2
 8003db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db2:	fa03 fa01 	lsl.w	sl, r3, r1
 8003db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db8:	f023 0207 	bic.w	r2, r3, #7
 8003dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dbe:	4413      	add	r3, r2
 8003dc0:	ea84 020a 	eor.w	r2, r4, sl
 8003dc4:	61ba      	str	r2, [r7, #24]
 8003dc6:	ea85 020b 	eor.w	r2, r5, fp
 8003dca:	61fa      	str	r2, [r7, #28]
 8003dcc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003dd0:	e9c3 1200 	strd	r1, r2, [r3]
  for(i=0;i<inlen;i++)
 8003dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d3c2      	bcc.n	8003d68 <keccak_absorb_once+0xac>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
 8003de2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de4:	f023 0307 	bic.w	r3, r3, #7
 8003de8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003dea:	4413      	add	r3, r2
 8003dec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003df0:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8003df4:	2200      	movs	r2, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	617a      	str	r2, [r7, #20]
 8003dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	f1a3 0420 	sub.w	r4, r3, #32
 8003e06:	f1c3 0220 	rsb	r2, r3, #32
 8003e0a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e0e:	465d      	mov	r5, fp
 8003e10:	fa05 f903 	lsl.w	r9, r5, r3
 8003e14:	4655      	mov	r5, sl
 8003e16:	fa05 f404 	lsl.w	r4, r5, r4
 8003e1a:	ea49 0904 	orr.w	r9, r9, r4
 8003e1e:	4654      	mov	r4, sl
 8003e20:	fa24 f202 	lsr.w	r2, r4, r2
 8003e24:	ea49 0902 	orr.w	r9, r9, r2
 8003e28:	4652      	mov	r2, sl
 8003e2a:	fa02 f803 	lsl.w	r8, r2, r3
 8003e2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e30:	f023 0307 	bic.w	r3, r3, #7
 8003e34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e36:	4413      	add	r3, r2
 8003e38:	ea80 0208 	eor.w	r2, r0, r8
 8003e3c:	60ba      	str	r2, [r7, #8]
 8003e3e:	ea81 0209 	eor.w	r2, r1, r9
 8003e42:	60fa      	str	r2, [r7, #12]
 8003e44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e48:	e9c3 1200 	strd	r1, r2, [r3]
  s[(r-1)/8] ^= 1ULL << 63;
 8003e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	f023 0307 	bic.w	r3, r3, #7
 8003e54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e56:	4413      	add	r3, r2
 8003e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e5e:	3901      	subs	r1, #1
 8003e60:	f021 0107 	bic.w	r1, r1, #7
 8003e64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003e66:	4401      	add	r1, r0
 8003e68:	603a      	str	r2, [r7, #0]
 8003e6a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8003e6e:	607b      	str	r3, [r7, #4]
 8003e70:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e74:	e9c1 3400 	strd	r3, r4, [r1]
}
 8003e78:	bf00      	nop
 8003e7a:	3748      	adds	r7, #72	@ 0x48
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e82 <sha3_512>:
* Arguments:   - uint8_t *h: pointer to output (64 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_512(uint8_t h[64], const uint8_t *in, size_t inlen)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b0ba      	sub	sp, #232	@ 0xe8
 8003e86:	af02      	add	r7, sp, #8
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_512_RATE, in, inlen, 0x06);
 8003e8e:	f107 0010 	add.w	r0, r7, #16
 8003e92:	2306      	movs	r3, #6
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	2148      	movs	r1, #72	@ 0x48
 8003e9c:	f7ff ff0e 	bl	8003cbc <keccak_absorb_once>
  KeccakF1600_StatePermute(s);
 8003ea0:	f107 0310 	add.w	r3, r7, #16
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fc fc15 	bl	80006d4 <KeccakF1600_StatePermute>
  for(i=0;i<8;i++)
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003eb0:	e014      	b.n	8003edc <sha3_512+0x5a>
    store64(h+8*i,s[i]);
 8003eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	18d1      	adds	r1, r2, r3
 8003ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	33e0      	adds	r3, #224	@ 0xe0
 8003ec4:	443b      	add	r3, r7
 8003ec6:	3bd0      	subs	r3, #208	@ 0xd0
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	4608      	mov	r0, r1
 8003ece:	f7fc fbd4 	bl	800067a <store64>
  for(i=0;i<8;i++)
 8003ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ee0:	2b07      	cmp	r3, #7
 8003ee2:	d9e6      	bls.n	8003eb2 <sha3_512+0x30>
}
 8003ee4:	bf00      	nop
 8003ee6:	bf00      	nop
 8003ee8:	37e0      	adds	r7, #224	@ 0xe0
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	f04f 33ff 	mov.w	r3, #4294967295
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	4804      	ldr	r0, [pc, #16]	@ (8003f18 <_write+0x28>)
 8003f08:	f006 f9bb 	bl	800a282 <HAL_UART_Transmit>
    return len;
 8003f0c:	687b      	ldr	r3, [r7, #4]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200001a8 	.word	0x200001a8

08003f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f1c:	b5b0      	push	{r4, r5, r7, lr}
 8003f1e:	b0ac      	sub	sp, #176	@ 0xb0
 8003f20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f22:	f002 f805 	bl	8005f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f26:	f000 f8b5 	bl	8004094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f2a:	f000 f9ef 	bl	800430c <MX_GPIO_Init>
  MX_I2C1_Init();
 8003f2e:	f000 f91b 	bl	8004168 <MX_I2C1_Init>
  MX_I2S3_Init();
 8003f32:	f000 f947 	bl	80041c4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8003f36:	f000 f989 	bl	800424c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8003f3a:	f009 ff4b 	bl	800ddd4 <MX_USB_HOST_Init>
  MX_RNG_Init();
 8003f3e:	f000 f971 	bl	8004224 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8003f42:	f000 f9b9 	bl	80042b8 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f4c:	4b48      	ldr	r3, [pc, #288]	@ (8004070 <main+0x154>)
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f50:	4a47      	ldr	r2, [pc, #284]	@ (8004070 <main+0x154>)
 8003f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f56:	6353      	str	r3, [r2, #52]	@ 0x34
 8003f58:	4b45      	ldr	r3, [pc, #276]	@ (8004070 <main+0x154>)
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
  HAL_RNG_Init(&hrng);
 8003f68:	4842      	ldr	r0, [pc, #264]	@ (8004074 <main+0x158>)
 8003f6a:	f006 f831 	bl	8009fd0 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8003f6e:	4b42      	ldr	r3, [pc, #264]	@ (8004078 <main+0x15c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6898      	ldr	r0, [r3, #8]
 8003f74:	2300      	movs	r3, #0
 8003f76:	2202      	movs	r2, #2
 8003f78:	2100      	movs	r1, #0
 8003f7a:	f00a fc2d 	bl	800e7d8 <setvbuf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  const uint8_t input[] = {
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	@ (800407c <main+0x160>)
 8003f80:	463c      	mov	r4, r7
 8003f82:	461d      	mov	r5, r3
 8003f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	         0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	         0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	         0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	         0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
	     };
	     size_t input_len = sizeof(input);
 8003f90:	2320      	movs	r3, #32
 8003f92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

	     uint8_t ref_output[64];
	     uint8_t masked_output[64];

	     // Run reference SHA3-512
	     sha3_512(ref_output, input, input_len);
 8003f96:	4639      	mov	r1, r7
 8003f98:	f107 0320 	add.w	r3, r7, #32
 8003f9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff6e 	bl	8003e82 <sha3_512>

	     // Run masked SHA3-512
	     masked_sha3_512(masked_output, input, input_len);
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003fac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 fc17 	bl	80057e4 <masked_sha3_512>

	     // Print both
	     printf("== Reference SHA3-512 ==\n");
 8003fb6:	4832      	ldr	r0, [pc, #200]	@ (8004080 <main+0x164>)
 8003fb8:	f00a fc06 	bl	800e7c8 <puts>
	     for (int i = 0; i < 64; i++) {
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fc2:	e018      	b.n	8003ff6 <main+0xda>
	         printf("%02X", ref_output[i]);
 8003fc4:	f107 0220 	add.w	r2, r7, #32
 8003fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fcc:	4413      	add	r3, r2
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	482c      	ldr	r0, [pc, #176]	@ (8004084 <main+0x168>)
 8003fd4:	f00a fb88 	bl	800e6e8 <iprintf>
	         if ((i + 1) % 16 == 0) printf("\n");
 8003fd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fdc:	3301      	adds	r3, #1
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <main+0xd0>
 8003fe6:	200a      	movs	r0, #10
 8003fe8:	f00a fb90 	bl	800e70c <putchar>
	     for (int i = 0; i < 64; i++) {
 8003fec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ffa:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ffc:	dde2      	ble.n	8003fc4 <main+0xa8>
	     }

	     printf("== Masked SHA3-512 ==\n");
 8003ffe:	4822      	ldr	r0, [pc, #136]	@ (8004088 <main+0x16c>)
 8004000:	f00a fbe2 	bl	800e7c8 <puts>
	     for (int i = 0; i < 64; i++) {
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800400a:	e018      	b.n	800403e <main+0x122>
	         printf("%02X", masked_output[i]);
 800400c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8004010:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004014:	4413      	add	r3, r2
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	481a      	ldr	r0, [pc, #104]	@ (8004084 <main+0x168>)
 800401c:	f00a fb64 	bl	800e6e8 <iprintf>
	         if ((i + 1) % 16 == 0) printf("\n");
 8004020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004024:	3301      	adds	r3, #1
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <main+0x118>
 800402e:	200a      	movs	r0, #10
 8004030:	f00a fb6c 	bl	800e70c <putchar>
	     for (int i = 0; i < 64; i++) {
 8004034:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004038:	3301      	adds	r3, #1
 800403a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800403e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004042:	2b3f      	cmp	r3, #63	@ 0x3f
 8004044:	dde2      	ble.n	800400c <main+0xf0>
	     }

	     // Compare
	     if (memcmp(ref_output, masked_output, 64) == 0) {
 8004046:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 800404a:	f107 0320 	add.w	r3, r7, #32
 800404e:	2240      	movs	r2, #64	@ 0x40
 8004050:	4618      	mov	r0, r3
 8004052:	f00a fd4d 	bl	800eaf0 <memcmp>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d103      	bne.n	8004064 <main+0x148>
	         printf("✅ masked_sha3_512: PASS\n");
 800405c:	480b      	ldr	r0, [pc, #44]	@ (800408c <main+0x170>)
 800405e:	f00a fbb3 	bl	800e7c8 <puts>
 8004062:	e002      	b.n	800406a <main+0x14e>
	     } else {
	         printf("❌ masked_sha3_512: FAIL\n");
 8004064:	480a      	ldr	r0, [pc, #40]	@ (8004090 <main+0x174>)
 8004066:	f00a fbaf 	bl	800e7c8 <puts>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800406a:	f009 fed9 	bl	800de20 <MX_USB_HOST_Process>
  {
 800406e:	e786      	b.n	8003f7e <main+0x62>
 8004070:	40023800 	.word	0x40023800
 8004074:	20000140 	.word	0x20000140
 8004078:	20000038 	.word	0x20000038
 800407c:	0800f660 	.word	0x0800f660
 8004080:	0800f5f4 	.word	0x0800f5f4
 8004084:	0800f5ec 	.word	0x0800f5ec
 8004088:	0800f610 	.word	0x0800f610
 800408c:	0800f628 	.word	0x0800f628
 8004090:	0800f644 	.word	0x0800f644

08004094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b094      	sub	sp, #80	@ 0x50
 8004098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800409a:	f107 0320 	add.w	r3, r7, #32
 800409e:	2230      	movs	r2, #48	@ 0x30
 80040a0:	2100      	movs	r1, #0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f00a fd34 	bl	800eb10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040a8:	f107 030c 	add.w	r3, r7, #12
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040b8:	2300      	movs	r3, #0
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	4b28      	ldr	r3, [pc, #160]	@ (8004160 <SystemClock_Config+0xcc>)
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	4a27      	ldr	r2, [pc, #156]	@ (8004160 <SystemClock_Config+0xcc>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c8:	4b25      	ldr	r3, [pc, #148]	@ (8004160 <SystemClock_Config+0xcc>)
 80040ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d4:	2300      	movs	r3, #0
 80040d6:	607b      	str	r3, [r7, #4]
 80040d8:	4b22      	ldr	r3, [pc, #136]	@ (8004164 <SystemClock_Config+0xd0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a21      	ldr	r2, [pc, #132]	@ (8004164 <SystemClock_Config+0xd0>)
 80040de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004164 <SystemClock_Config+0xd0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80040f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040fa:	2302      	movs	r3, #2
 80040fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80040fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004102:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004104:	2308      	movs	r3, #8
 8004106:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004108:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800410c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800410e:	2302      	movs	r3, #2
 8004110:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004112:	2307      	movs	r3, #7
 8004114:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004116:	f107 0320 	add.w	r3, r7, #32
 800411a:	4618      	mov	r0, r3
 800411c:	f005 f97e 	bl	800941c <HAL_RCC_OscConfig>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004126:	f000 f9ef 	bl	8004508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800412a:	230f      	movs	r3, #15
 800412c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800412e:	2302      	movs	r3, #2
 8004130:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004132:	2300      	movs	r3, #0
 8004134:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004136:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800413a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800413c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004140:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004142:	f107 030c 	add.w	r3, r7, #12
 8004146:	2105      	movs	r1, #5
 8004148:	4618      	mov	r0, r3
 800414a:	f005 fbdf 	bl	800990c <HAL_RCC_ClockConfig>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004154:	f000 f9d8 	bl	8004508 <Error_Handler>
  }
}
 8004158:	bf00      	nop
 800415a:	3750      	adds	r7, #80	@ 0x50
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40023800 	.word	0x40023800
 8004164:	40007000 	.word	0x40007000

08004168 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800416c:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <MX_I2C1_Init+0x50>)
 800416e:	4a13      	ldr	r2, [pc, #76]	@ (80041bc <MX_I2C1_Init+0x54>)
 8004170:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004172:	4b11      	ldr	r3, [pc, #68]	@ (80041b8 <MX_I2C1_Init+0x50>)
 8004174:	4a12      	ldr	r2, [pc, #72]	@ (80041c0 <MX_I2C1_Init+0x58>)
 8004176:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004178:	4b0f      	ldr	r3, [pc, #60]	@ (80041b8 <MX_I2C1_Init+0x50>)
 800417a:	2200      	movs	r2, #0
 800417c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800417e:	4b0e      	ldr	r3, [pc, #56]	@ (80041b8 <MX_I2C1_Init+0x50>)
 8004180:	2200      	movs	r2, #0
 8004182:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004184:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <MX_I2C1_Init+0x50>)
 8004186:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800418a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800418c:	4b0a      	ldr	r3, [pc, #40]	@ (80041b8 <MX_I2C1_Init+0x50>)
 800418e:	2200      	movs	r2, #0
 8004190:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004192:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <MX_I2C1_Init+0x50>)
 8004194:	2200      	movs	r2, #0
 8004196:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004198:	4b07      	ldr	r3, [pc, #28]	@ (80041b8 <MX_I2C1_Init+0x50>)
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <MX_I2C1_Init+0x50>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041a4:	4804      	ldr	r0, [pc, #16]	@ (80041b8 <MX_I2C1_Init+0x50>)
 80041a6:	f004 fb55 	bl	8008854 <HAL_I2C_Init>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80041b0:	f000 f9aa 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041b4:	bf00      	nop
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	200000a4 	.word	0x200000a4
 80041bc:	40005400 	.word	0x40005400
 80041c0:	000186a0 	.word	0x000186a0

080041c4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80041c8:	4b13      	ldr	r3, [pc, #76]	@ (8004218 <MX_I2S3_Init+0x54>)
 80041ca:	4a14      	ldr	r2, [pc, #80]	@ (800421c <MX_I2S3_Init+0x58>)
 80041cc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80041ce:	4b12      	ldr	r3, [pc, #72]	@ (8004218 <MX_I2S3_Init+0x54>)
 80041d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041d4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80041d6:	4b10      	ldr	r3, [pc, #64]	@ (8004218 <MX_I2S3_Init+0x54>)
 80041d8:	2200      	movs	r2, #0
 80041da:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80041dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004218 <MX_I2S3_Init+0x54>)
 80041de:	2200      	movs	r2, #0
 80041e0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80041e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <MX_I2S3_Init+0x54>)
 80041e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041e8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80041ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <MX_I2S3_Init+0x54>)
 80041ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004220 <MX_I2S3_Init+0x5c>)
 80041ee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80041f0:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <MX_I2S3_Init+0x54>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80041f6:	4b08      	ldr	r3, [pc, #32]	@ (8004218 <MX_I2S3_Init+0x54>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80041fc:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <MX_I2S3_Init+0x54>)
 80041fe:	2200      	movs	r2, #0
 8004200:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8004202:	4805      	ldr	r0, [pc, #20]	@ (8004218 <MX_I2S3_Init+0x54>)
 8004204:	f004 fc6a 	bl	8008adc <HAL_I2S_Init>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800420e:	f000 f97b 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8004212:	bf00      	nop
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	200000f8 	.word	0x200000f8
 800421c:	40003c00 	.word	0x40003c00
 8004220:	00017700 	.word	0x00017700

08004224 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8004228:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <MX_RNG_Init+0x20>)
 800422a:	4a07      	ldr	r2, [pc, #28]	@ (8004248 <MX_RNG_Init+0x24>)
 800422c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800422e:	4805      	ldr	r0, [pc, #20]	@ (8004244 <MX_RNG_Init+0x20>)
 8004230:	f005 fece 	bl	8009fd0 <HAL_RNG_Init>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800423a:	f000 f965 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000140 	.word	0x20000140
 8004248:	50060800 	.word	0x50060800

0800424c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004250:	4b17      	ldr	r3, [pc, #92]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004252:	4a18      	ldr	r2, [pc, #96]	@ (80042b4 <MX_SPI1_Init+0x68>)
 8004254:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004256:	4b16      	ldr	r3, [pc, #88]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004258:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800425c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800425e:	4b14      	ldr	r3, [pc, #80]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004264:	4b12      	ldr	r3, [pc, #72]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004266:	2200      	movs	r2, #0
 8004268:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800426a:	4b11      	ldr	r3, [pc, #68]	@ (80042b0 <MX_SPI1_Init+0x64>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004270:	4b0f      	ldr	r3, [pc, #60]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004272:	2200      	movs	r2, #0
 8004274:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004276:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800427c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800427e:	4b0c      	ldr	r3, [pc, #48]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004280:	2200      	movs	r2, #0
 8004282:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004284:	4b0a      	ldr	r3, [pc, #40]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004286:	2200      	movs	r2, #0
 8004288:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800428a:	4b09      	ldr	r3, [pc, #36]	@ (80042b0 <MX_SPI1_Init+0x64>)
 800428c:	2200      	movs	r2, #0
 800428e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004290:	4b07      	ldr	r3, [pc, #28]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004292:	2200      	movs	r2, #0
 8004294:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004296:	4b06      	ldr	r3, [pc, #24]	@ (80042b0 <MX_SPI1_Init+0x64>)
 8004298:	220a      	movs	r2, #10
 800429a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800429c:	4804      	ldr	r0, [pc, #16]	@ (80042b0 <MX_SPI1_Init+0x64>)
 800429e:	f005 ff17 	bl	800a0d0 <HAL_SPI_Init>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80042a8:	f000 f92e 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80042ac:	bf00      	nop
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20000150 	.word	0x20000150
 80042b4:	40013000 	.word	0x40013000

080042b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042bc:	4b11      	ldr	r3, [pc, #68]	@ (8004304 <MX_USART2_UART_Init+0x4c>)
 80042be:	4a12      	ldr	r2, [pc, #72]	@ (8004308 <MX_USART2_UART_Init+0x50>)
 80042c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80042c2:	4b10      	ldr	r3, [pc, #64]	@ (8004304 <MX_USART2_UART_Init+0x4c>)
 80042c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80042c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004304 <MX_USART2_UART_Init+0x4c>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80042d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <MX_USART2_UART_Init+0x4c>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80042d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <MX_USART2_UART_Init+0x4c>)
 80042d8:	2200      	movs	r2, #0
 80042da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <MX_USART2_UART_Init+0x4c>)
 80042de:	220c      	movs	r2, #12
 80042e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042e2:	4b08      	ldr	r3, [pc, #32]	@ (8004304 <MX_USART2_UART_Init+0x4c>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e8:	4b06      	ldr	r3, [pc, #24]	@ (8004304 <MX_USART2_UART_Init+0x4c>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80042ee:	4805      	ldr	r0, [pc, #20]	@ (8004304 <MX_USART2_UART_Init+0x4c>)
 80042f0:	f005 ff77 	bl	800a1e2 <HAL_UART_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80042fa:	f000 f905 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	200001a8 	.word	0x200001a8
 8004308:	40004400 	.word	0x40004400

0800430c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08c      	sub	sp, #48	@ 0x30
 8004310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004312:	f107 031c 	add.w	r3, r7, #28
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	60da      	str	r2, [r3, #12]
 8004320:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	4b72      	ldr	r3, [pc, #456]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432a:	4a71      	ldr	r2, [pc, #452]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 800432c:	f043 0310 	orr.w	r3, r3, #16
 8004330:	6313      	str	r3, [r2, #48]	@ 0x30
 8004332:	4b6f      	ldr	r3, [pc, #444]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	4b6b      	ldr	r3, [pc, #428]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004346:	4a6a      	ldr	r2, [pc, #424]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004348:	f043 0304 	orr.w	r3, r3, #4
 800434c:	6313      	str	r3, [r2, #48]	@ 0x30
 800434e:	4b68      	ldr	r3, [pc, #416]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	613b      	str	r3, [r7, #16]
 800435e:	4b64      	ldr	r3, [pc, #400]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004362:	4a63      	ldr	r2, [pc, #396]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004368:	6313      	str	r3, [r2, #48]	@ 0x30
 800436a:	4b61      	ldr	r3, [pc, #388]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	4b5d      	ldr	r3, [pc, #372]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800437e:	4a5c      	ldr	r2, [pc, #368]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	6313      	str	r3, [r2, #48]	@ 0x30
 8004386:	4b5a      	ldr	r3, [pc, #360]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	4b56      	ldr	r3, [pc, #344]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800439a:	4a55      	ldr	r2, [pc, #340]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80043a2:	4b53      	ldr	r3, [pc, #332]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	4b4f      	ldr	r3, [pc, #316]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b6:	4a4e      	ldr	r2, [pc, #312]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 80043b8:	f043 0308 	orr.w	r3, r3, #8
 80043bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80043be:	4b4c      	ldr	r3, [pc, #304]	@ (80044f0 <MX_GPIO_Init+0x1e4>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80043ca:	2200      	movs	r2, #0
 80043cc:	2108      	movs	r1, #8
 80043ce:	4849      	ldr	r0, [pc, #292]	@ (80044f4 <MX_GPIO_Init+0x1e8>)
 80043d0:	f002 f8f2 	bl	80065b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80043d4:	2201      	movs	r2, #1
 80043d6:	2101      	movs	r1, #1
 80043d8:	4847      	ldr	r0, [pc, #284]	@ (80044f8 <MX_GPIO_Init+0x1ec>)
 80043da:	f002 f8ed 	bl	80065b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80043de:	2200      	movs	r2, #0
 80043e0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80043e4:	4845      	ldr	r0, [pc, #276]	@ (80044fc <MX_GPIO_Init+0x1f0>)
 80043e6:	f002 f8e7 	bl	80065b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80043ea:	2308      	movs	r3, #8
 80043ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ee:	2301      	movs	r3, #1
 80043f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f6:	2300      	movs	r3, #0
 80043f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80043fa:	f107 031c 	add.w	r3, r7, #28
 80043fe:	4619      	mov	r1, r3
 8004400:	483c      	ldr	r0, [pc, #240]	@ (80044f4 <MX_GPIO_Init+0x1e8>)
 8004402:	f001 ff3d 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8004406:	2301      	movs	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440a:	2301      	movs	r3, #1
 800440c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440e:	2300      	movs	r3, #0
 8004410:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004412:	2300      	movs	r3, #0
 8004414:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004416:	f107 031c 	add.w	r3, r7, #28
 800441a:	4619      	mov	r1, r3
 800441c:	4836      	ldr	r0, [pc, #216]	@ (80044f8 <MX_GPIO_Init+0x1ec>)
 800441e:	f001 ff2f 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8004422:	2308      	movs	r3, #8
 8004424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442a:	2300      	movs	r3, #0
 800442c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442e:	2300      	movs	r3, #0
 8004430:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004432:	2305      	movs	r3, #5
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8004436:	f107 031c 	add.w	r3, r7, #28
 800443a:	4619      	mov	r1, r3
 800443c:	482e      	ldr	r0, [pc, #184]	@ (80044f8 <MX_GPIO_Init+0x1ec>)
 800443e:	f001 ff1f 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004442:	2301      	movs	r3, #1
 8004444:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004446:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800444a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444c:	2300      	movs	r3, #0
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004450:	f107 031c 	add.w	r3, r7, #28
 8004454:	4619      	mov	r1, r3
 8004456:	482a      	ldr	r0, [pc, #168]	@ (8004500 <MX_GPIO_Init+0x1f4>)
 8004458:	f001 ff12 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800445c:	2304      	movs	r3, #4
 800445e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004460:	2300      	movs	r3, #0
 8004462:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004468:	f107 031c 	add.w	r3, r7, #28
 800446c:	4619      	mov	r1, r3
 800446e:	4825      	ldr	r0, [pc, #148]	@ (8004504 <MX_GPIO_Init+0x1f8>)
 8004470:	f001 ff06 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8004474:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447a:	2302      	movs	r3, #2
 800447c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004482:	2300      	movs	r3, #0
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004486:	2305      	movs	r3, #5
 8004488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800448a:	f107 031c 	add.w	r3, r7, #28
 800448e:	4619      	mov	r1, r3
 8004490:	481c      	ldr	r0, [pc, #112]	@ (8004504 <MX_GPIO_Init+0x1f8>)
 8004492:	f001 fef5 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8004496:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800449a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800449c:	2301      	movs	r3, #1
 800449e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a4:	2300      	movs	r3, #0
 80044a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044a8:	f107 031c 	add.w	r3, r7, #28
 80044ac:	4619      	mov	r1, r3
 80044ae:	4813      	ldr	r0, [pc, #76]	@ (80044fc <MX_GPIO_Init+0x1f0>)
 80044b0:	f001 fee6 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80044b4:	2320      	movs	r3, #32
 80044b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b8:	2300      	movs	r3, #0
 80044ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80044c0:	f107 031c 	add.w	r3, r7, #28
 80044c4:	4619      	mov	r1, r3
 80044c6:	480d      	ldr	r0, [pc, #52]	@ (80044fc <MX_GPIO_Init+0x1f0>)
 80044c8:	f001 feda 	bl	8006280 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80044cc:	2302      	movs	r3, #2
 80044ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80044d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80044d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80044da:	f107 031c 	add.w	r3, r7, #28
 80044de:	4619      	mov	r1, r3
 80044e0:	4804      	ldr	r0, [pc, #16]	@ (80044f4 <MX_GPIO_Init+0x1e8>)
 80044e2:	f001 fecd 	bl	8006280 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80044e6:	bf00      	nop
 80044e8:	3730      	adds	r7, #48	@ 0x30
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40021000 	.word	0x40021000
 80044f8:	40020800 	.word	0x40020800
 80044fc:	40020c00 	.word	0x40020c00
 8004500:	40020000 	.word	0x40020000
 8004504:	40020400 	.word	0x40020400

08004508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800450c:	b672      	cpsid	i
}
 800450e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004510:	bf00      	nop
 8004512:	e7fd      	b.n	8004510 <Error_Handler+0x8>

08004514 <get_random64>:
#include "debug_log.h"// for HAL_RNG
  // or your specific STM32 HAL header

extern RNG_HandleTypeDef hrng;

uint64_t get_random64(void) {
 8004514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    HAL_RNG_GenerateRandomNumber(&hrng, &r1);
 800451c:	1d3b      	adds	r3, r7, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4810      	ldr	r0, [pc, #64]	@ (8004564 <get_random64+0x50>)
 8004522:	f005 fd7f 	bl	800a024 <HAL_RNG_GenerateRandomNumber>
    HAL_RNG_GenerateRandomNumber(&hrng, &r2);
 8004526:	463b      	mov	r3, r7
 8004528:	4619      	mov	r1, r3
 800452a:	480e      	ldr	r0, [pc, #56]	@ (8004564 <get_random64+0x50>)
 800452c:	f005 fd7a 	bl	800a024 <HAL_RNG_GenerateRandomNumber>
    return ((uint64_t)r1 << 32) | r2;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	469a      	mov	sl, r3
 8004536:	4693      	mov	fp, r2
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	4653      	mov	r3, sl
 8004542:	2200      	movs	r2, #0
 8004544:	6839      	ldr	r1, [r7, #0]
 8004546:	2000      	movs	r0, #0
 8004548:	460c      	mov	r4, r1
 800454a:	4605      	mov	r5, r0
 800454c:	ea42 0804 	orr.w	r8, r2, r4
 8004550:	ea43 0905 	orr.w	r9, r3, r5
 8004554:	4642      	mov	r2, r8
 8004556:	464b      	mov	r3, r9
}
 8004558:	4610      	mov	r0, r2
 800455a:	4619      	mov	r1, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004564:	20000140 	.word	0x20000140

08004568 <masked_theta>:

// === THETA ===
void masked_theta(masked_uint64_t state[5][5]) {
 8004568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800456c:	b0e0      	sub	sp, #384	@ 0x180
 800456e:	af00      	add	r7, sp, #0
 8004570:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004574:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004578:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5], D[5];

    for (int x = 0; x < 5; x++) {
 800457a:	2300      	movs	r3, #0
 800457c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004580:	e04d      	b.n	800461e <masked_theta+0xb6>
        C[x] = state[x][0];
 8004582:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004586:	4613      	mov	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	015b      	lsls	r3, r3, #5
 800458e:	461a      	mov	r2, r3
 8004590:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004594:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	441a      	add	r2, r3
 800459c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80045a0:	015b      	lsls	r3, r3, #5
 80045a2:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80045a6:	443b      	add	r3, r7
 80045a8:	3bb8      	subs	r3, #184	@ 0xb8
 80045aa:	461c      	mov	r4, r3
 80045ac:	4615      	mov	r5, r2
 80045ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80045b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80045b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80045b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 80045ba:	2301      	movs	r3, #1
 80045bc:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80045c0:	e024      	b.n	800460c <masked_theta+0xa4>
            masked_xor(&C[x], &C[x], &state[x][y]);
 80045c2:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 80045c6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80045ca:	015b      	lsls	r3, r3, #5
 80045cc:	18d0      	adds	r0, r2, r3
 80045ce:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 80045d2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80045d6:	015b      	lsls	r3, r3, #5
 80045d8:	18d1      	adds	r1, r2, r3
 80045da:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	015b      	lsls	r3, r3, #5
 80045e6:	461a      	mov	r2, r3
 80045e8:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80045ec:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	441a      	add	r2, r3
 80045f4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80045f8:	015b      	lsls	r3, r3, #5
 80045fa:	4413      	add	r3, r2
 80045fc:	461a      	mov	r2, r3
 80045fe:	f000 fea2 	bl	8005346 <masked_xor>
        for (int y = 1; y < 5; y++) {
 8004602:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004606:	3301      	adds	r3, #1
 8004608:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800460c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004610:	2b04      	cmp	r3, #4
 8004612:	ddd6      	ble.n	80045c2 <masked_theta+0x5a>
    for (int x = 0; x < 5; x++) {
 8004614:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004618:	3301      	adds	r3, #1
 800461a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800461e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004622:	2b04      	cmp	r3, #4
 8004624:	ddad      	ble.n	8004582 <masked_theta+0x1a>
        }
    }

    for (int x = 0; x < 5; x++) {
 8004626:	2300      	movs	r3, #0
 8004628:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800462c:	e057      	b.n	80046de <masked_theta+0x176>
        masked_uint64_t rot;
        for (int i = 0; i < MASKING_N; i++) {
 800462e:	2300      	movs	r3, #0
 8004630:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004634:	e02e      	b.n	8004694 <masked_theta+0x12c>
            rot.share[i] = (C[(x + 1) % 5].share[i] << 1) |
 8004636:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800463a:	1c59      	adds	r1, r3, #1
 800463c:	4b50      	ldr	r3, [pc, #320]	@ (8004780 <masked_theta+0x218>)
 800463e:	fb83 2301 	smull	r2, r3, r3, r1
 8004642:	105a      	asrs	r2, r3, #1
 8004644:	17cb      	asrs	r3, r1, #31
 8004646:	1ad2      	subs	r2, r2, r3
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	1aca      	subs	r2, r1, r3
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004656:	4413      	add	r3, r2
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800465e:	443b      	add	r3, r7
 8004660:	3bb8      	subs	r3, #184	@ 0xb8
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	0fd0      	lsrs	r0, r2, #31
 8004668:	0059      	lsls	r1, r3, #1
 800466a:	ea40 0901 	orr.w	r9, r0, r1
 800466e:	0fd9      	lsrs	r1, r3, #31
 8004670:	0053      	lsls	r3, r2, #1
 8004672:	ea41 0803 	orr.w	r8, r1, r3
 8004676:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800467a:	f5a3 72bc 	sub.w	r2, r3, #376	@ 0x178
 800467e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	e9c3 8900 	strd	r8, r9, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 800468a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800468e:	3301      	adds	r3, #1
 8004690:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004694:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004698:	2b03      	cmp	r3, #3
 800469a:	ddcc      	ble.n	8004636 <masked_theta+0xce>
                           (C[(x + 1) % 5].share[i] >> (64 - 1));
        }
        masked_xor(&D[x], &C[(x + 4) % 5], &rot);
 800469c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80046a0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80046a4:	015b      	lsls	r3, r3, #5
 80046a6:	18d0      	adds	r0, r2, r3
 80046a8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80046ac:	1d19      	adds	r1, r3, #4
 80046ae:	4b34      	ldr	r3, [pc, #208]	@ (8004780 <masked_theta+0x218>)
 80046b0:	fb83 2301 	smull	r2, r3, r3, r1
 80046b4:	105a      	asrs	r2, r3, #1
 80046b6:	17cb      	asrs	r3, r1, #31
 80046b8:	1ad2      	subs	r2, r2, r3
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	1aca      	subs	r2, r1, r3
 80046c2:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80046c6:	0153      	lsls	r3, r2, #5
 80046c8:	440b      	add	r3, r1
 80046ca:	f107 0208 	add.w	r2, r7, #8
 80046ce:	4619      	mov	r1, r3
 80046d0:	f000 fe39 	bl	8005346 <masked_xor>
    for (int x = 0; x < 5; x++) {
 80046d4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80046d8:	3301      	adds	r3, #1
 80046da:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80046de:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	dda3      	ble.n	800462e <masked_theta+0xc6>
    }

    for (int x = 0; x < 5; x++) {
 80046e6:	2300      	movs	r3, #0
 80046e8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80046ec:	e03c      	b.n	8004768 <masked_theta+0x200>
        for (int y = 0; y < 5; y++) {
 80046ee:	2300      	movs	r3, #0
 80046f0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80046f4:	e02f      	b.n	8004756 <masked_theta+0x1ee>
            masked_xor(&state[x][y], &state[x][y], &D[x]);
 80046f6:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	015b      	lsls	r3, r3, #5
 8004702:	461a      	mov	r2, r3
 8004704:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8004708:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	441a      	add	r2, r3
 8004710:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004714:	015b      	lsls	r3, r3, #5
 8004716:	18d0      	adds	r0, r2, r3
 8004718:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	015b      	lsls	r3, r3, #5
 8004724:	461a      	mov	r2, r3
 8004726:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800472a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	441a      	add	r2, r3
 8004732:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	18d1      	adds	r1, r2, r3
 800473a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800473e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004742:	015b      	lsls	r3, r3, #5
 8004744:	4413      	add	r3, r2
 8004746:	461a      	mov	r2, r3
 8004748:	f000 fdfd 	bl	8005346 <masked_xor>
        for (int y = 0; y < 5; y++) {
 800474c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004750:	3301      	adds	r3, #1
 8004752:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004756:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800475a:	2b04      	cmp	r3, #4
 800475c:	ddcb      	ble.n	80046f6 <masked_theta+0x18e>
    for (int x = 0; x < 5; x++) {
 800475e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004762:	3301      	adds	r3, #1
 8004764:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004768:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800476c:	2b04      	cmp	r3, #4
 800476e:	ddbe      	ble.n	80046ee <masked_theta+0x186>
        }
    }
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8004778:	46bd      	mov	sp, r7
 800477a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800477e:	bf00      	nop
 8004780:	66666667 	.word	0x66666667

08004784 <masked_rho>:
    {190,   6, 153,  15, 253 },
    { 28,  55, 276,  91, 136 },
    { 91, 276, 231, 120,  78 }
};

void masked_rho(masked_uint64_t state[5][5]) {
 8004784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004788:	b088      	sub	sp, #32
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
    for (int x = 0; x < 5; x++) {
 800478e:	2100      	movs	r1, #0
 8004790:	61f9      	str	r1, [r7, #28]
 8004792:	e06d      	b.n	8004870 <masked_rho+0xec>
        for (int y = 0; y < 5; y++) {
 8004794:	2100      	movs	r1, #0
 8004796:	61b9      	str	r1, [r7, #24]
 8004798:	e064      	b.n	8004864 <masked_rho+0xe0>
            uint8_t r = keccak_rho_offsets[x][y];
 800479a:	4e3a      	ldr	r6, [pc, #232]	@ (8004884 <masked_rho+0x100>)
 800479c:	69f8      	ldr	r0, [r7, #28]
 800479e:	4601      	mov	r1, r0
 80047a0:	0089      	lsls	r1, r1, #2
 80047a2:	4401      	add	r1, r0
 80047a4:	1870      	adds	r0, r6, r1
 80047a6:	69b9      	ldr	r1, [r7, #24]
 80047a8:	4401      	add	r1, r0
 80047aa:	7809      	ldrb	r1, [r1, #0]
 80047ac:	74f9      	strb	r1, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 80047ae:	2100      	movs	r1, #0
 80047b0:	6179      	str	r1, [r7, #20]
 80047b2:	e051      	b.n	8004858 <masked_rho+0xd4>
                uint64_t value = state[x][y].share[i];
 80047b4:	69f8      	ldr	r0, [r7, #28]
 80047b6:	4601      	mov	r1, r0
 80047b8:	0089      	lsls	r1, r1, #2
 80047ba:	4401      	add	r1, r0
 80047bc:	0149      	lsls	r1, r1, #5
 80047be:	4608      	mov	r0, r1
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4408      	add	r0, r1
 80047c4:	69b9      	ldr	r1, [r7, #24]
 80047c6:	008e      	lsls	r6, r1, #2
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	4431      	add	r1, r6
 80047cc:	00c9      	lsls	r1, r1, #3
 80047ce:	4401      	add	r1, r0
 80047d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
                state[x][y].share[i] = (value << r) | (value >> (64 - r));
 80047d8:	7cfe      	ldrb	r6, [r7, #19]
 80047da:	69f8      	ldr	r0, [r7, #28]
 80047dc:	4601      	mov	r1, r0
 80047de:	0089      	lsls	r1, r1, #2
 80047e0:	4401      	add	r1, r0
 80047e2:	0149      	lsls	r1, r1, #5
 80047e4:	4608      	mov	r0, r1
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	eb01 0a00 	add.w	sl, r1, r0
 80047ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80047f0:	f1a6 0e20 	sub.w	lr, r6, #32
 80047f4:	f1c6 0c20 	rsb	ip, r6, #32
 80047f8:	fa01 f506 	lsl.w	r5, r1, r6
 80047fc:	fa00 fe0e 	lsl.w	lr, r0, lr
 8004800:	ea45 050e 	orr.w	r5, r5, lr
 8004804:	fa20 fc0c 	lsr.w	ip, r0, ip
 8004808:	ea45 050c 	orr.w	r5, r5, ip
 800480c:	fa00 f406 	lsl.w	r4, r0, r6
 8004810:	4276      	negs	r6, r6
 8004812:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8004816:	f1c6 0e20 	rsb	lr, r6, #32
 800481a:	f1a6 0c20 	sub.w	ip, r6, #32
 800481e:	fa20 f206 	lsr.w	r2, r0, r6
 8004822:	fa01 fe0e 	lsl.w	lr, r1, lr
 8004826:	ea42 020e 	orr.w	r2, r2, lr
 800482a:	fa21 fc0c 	lsr.w	ip, r1, ip
 800482e:	ea42 020c 	orr.w	r2, r2, ip
 8004832:	fa21 f306 	lsr.w	r3, r1, r6
 8004836:	ea44 0802 	orr.w	r8, r4, r2
 800483a:	ea45 0903 	orr.w	r9, r5, r3
 800483e:	4642      	mov	r2, r8
 8004840:	464b      	mov	r3, r9
 8004842:	69b9      	ldr	r1, [r7, #24]
 8004844:	0088      	lsls	r0, r1, #2
 8004846:	6979      	ldr	r1, [r7, #20]
 8004848:	4401      	add	r1, r0
 800484a:	00c9      	lsls	r1, r1, #3
 800484c:	4451      	add	r1, sl
 800484e:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8004852:	6979      	ldr	r1, [r7, #20]
 8004854:	3101      	adds	r1, #1
 8004856:	6179      	str	r1, [r7, #20]
 8004858:	6979      	ldr	r1, [r7, #20]
 800485a:	2903      	cmp	r1, #3
 800485c:	ddaa      	ble.n	80047b4 <masked_rho+0x30>
        for (int y = 0; y < 5; y++) {
 800485e:	69b9      	ldr	r1, [r7, #24]
 8004860:	3101      	adds	r1, #1
 8004862:	61b9      	str	r1, [r7, #24]
 8004864:	69b9      	ldr	r1, [r7, #24]
 8004866:	2904      	cmp	r1, #4
 8004868:	dd97      	ble.n	800479a <masked_rho+0x16>
    for (int x = 0; x < 5; x++) {
 800486a:	69f9      	ldr	r1, [r7, #28]
 800486c:	3101      	adds	r1, #1
 800486e:	61f9      	str	r1, [r7, #28]
 8004870:	69f9      	ldr	r1, [r7, #28]
 8004872:	2904      	cmp	r1, #4
 8004874:	dd8e      	ble.n	8004794 <masked_rho+0x10>
            }
        }
    }
}
 8004876:	bf00      	nop
 8004878:	bf00      	nop
 800487a:	3720      	adds	r7, #32
 800487c:	46bd      	mov	sp, r7
 800487e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004882:	bf00      	nop
 8004884:	0800f8d0 	.word	0x0800f8d0

08004888 <masked_pi>:

// === PI ===
void masked_pi(masked_uint64_t state[5][5]) {
 8004888:	b4b0      	push	{r4, r5, r7}
 800488a:	f5ad 7d4f 	sub.w	sp, sp, #828	@ 0x33c
 800488e:	af00      	add	r7, sp, #0
 8004890:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8004894:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8004898:	6018      	str	r0, [r3, #0]
    masked_uint64_t temp[5][5];

    for (int x = 0; x < 5; x++) {
 800489a:	2300      	movs	r3, #0
 800489c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80048a0:	e038      	b.n	8004914 <masked_pi+0x8c>
        for (int y = 0; y < 5; y++) {
 80048a2:	2300      	movs	r3, #0
 80048a4:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80048a8:	e02b      	b.n	8004902 <masked_pi+0x7a>
            temp[x][y] = state[x][y];
 80048aa:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80048ae:	4613      	mov	r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	4413      	add	r3, r2
 80048b4:	015b      	lsls	r3, r3, #5
 80048b6:	461a      	mov	r2, r3
 80048b8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80048bc:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	1899      	adds	r1, r3, r2
 80048c4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80048c8:	f5a3 704c 	sub.w	r0, r3, #816	@ 0x330
 80048cc:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 80048da:	4413      	add	r3, r2
 80048dc:	015b      	lsls	r3, r3, #5
 80048de:	18c2      	adds	r2, r0, r3
 80048e0:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80048e4:	015b      	lsls	r3, r3, #5
 80048e6:	440b      	add	r3, r1
 80048e8:	4614      	mov	r4, r2
 80048ea:	461d      	mov	r5, r3
 80048ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; y++) {
 80048f8:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80048fc:	3301      	adds	r3, #1
 80048fe:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8004902:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8004906:	2b04      	cmp	r3, #4
 8004908:	ddcf      	ble.n	80048aa <masked_pi+0x22>
    for (int x = 0; x < 5; x++) {
 800490a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800490e:	3301      	adds	r3, #1
 8004910:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8004914:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8004918:	2b04      	cmp	r3, #4
 800491a:	ddc2      	ble.n	80048a2 <masked_pi+0x1a>
        }
    }

    for (int x = 0; x < 5; x++) {
 800491c:	2300      	movs	r3, #0
 800491e:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8004922:	e049      	b.n	80049b8 <masked_pi+0x130>
        for (int y = 0; y < 5; y++) {
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 800492a:	e03c      	b.n	80049a6 <masked_pi+0x11e>
            state[y][(2 * x + 3 * y) % 5] = temp[x][y];
 800492c:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	015b      	lsls	r3, r3, #5
 8004938:	461a      	mov	r2, r3
 800493a:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 800493e:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	1898      	adds	r0, r3, r2
 8004946:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800494a:	0059      	lsls	r1, r3, #1
 800494c:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8004950:	4613      	mov	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4413      	add	r3, r2
 8004956:	4419      	add	r1, r3
 8004958:	4b1d      	ldr	r3, [pc, #116]	@ (80049d0 <masked_pi+0x148>)
 800495a:	fb83 2301 	smull	r2, r3, r3, r1
 800495e:	105a      	asrs	r2, r3, #1
 8004960:	17cb      	asrs	r3, r1, #31
 8004962:	1ad2      	subs	r2, r2, r3
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	1aca      	subs	r2, r1, r3
 800496c:	0153      	lsls	r3, r2, #5
 800496e:	4418      	add	r0, r3
 8004970:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8004974:	f5a3 714c 	sub.w	r1, r3, #816	@ 0x330
 8004978:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8004986:	4413      	add	r3, r2
 8004988:	015b      	lsls	r3, r3, #5
 800498a:	440b      	add	r3, r1
 800498c:	4604      	mov	r4, r0
 800498e:	461d      	mov	r5, r3
 8004990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004994:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; y++) {
 800499c:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80049a0:	3301      	adds	r3, #1
 80049a2:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80049a6:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	ddbe      	ble.n	800492c <masked_pi+0xa4>
    for (int x = 0; x < 5; x++) {
 80049ae:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80049b2:	3301      	adds	r3, #1
 80049b4:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 80049b8:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80049bc:	2b04      	cmp	r3, #4
 80049be:	ddb1      	ble.n	8004924 <masked_pi+0x9c>
        }
    }
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	f507 774f 	add.w	r7, r7, #828	@ 0x33c
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bcb0      	pop	{r4, r5, r7}
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	66666667 	.word	0x66666667

080049d4 <masked_chi>:

// === CHI ===
void masked_chi(masked_uint64_t state[5][5],
                uint64_t r[5][5][MASKING_N][MASKING_N]) {
 80049d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80049d8:	b0be      	sub	sp, #248	@ 0xf8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
    masked_uint64_t temp[5];

    for (int y = 0; y < 5; y++) {
 80049e0:	2300      	movs	r3, #0
 80049e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80049e6:	e0a7      	b.n	8004b38 <masked_chi+0x164>
        for (int x = 0; x < 5; x++) {
 80049e8:	2300      	movs	r3, #0
 80049ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80049ee:	e020      	b.n	8004a32 <masked_chi+0x5e>
            temp[x] = state[x][y];
 80049f0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	015b      	lsls	r3, r3, #5
 80049fc:	461a      	mov	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	441a      	add	r2, r3
 8004a02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004a06:	015b      	lsls	r3, r3, #5
 8004a08:	33f8      	adds	r3, #248	@ 0xf8
 8004a0a:	443b      	add	r3, r7
 8004a0c:	f1a3 01b0 	sub.w	r1, r3, #176	@ 0xb0
 8004a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a14:	015b      	lsls	r3, r3, #5
 8004a16:	4413      	add	r3, r2
 8004a18:	460c      	mov	r4, r1
 8004a1a:	461d      	mov	r5, r3
 8004a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int x = 0; x < 5; x++) {
 8004a28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004a32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	ddda      	ble.n	80049f0 <masked_chi+0x1c>
        }

        for (int x = 0; x < 5; x++) {
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004a40:	e071      	b.n	8004b26 <masked_chi+0x152>
            masked_uint64_t notA1;
            for (int i = 0; i < MASKING_N; i++) {
 8004a42:	2300      	movs	r3, #0
 8004a44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a48:	e027      	b.n	8004a9a <masked_chi+0xc6>
                notA1.share[i] = ~temp[(x + 1) % 5].share[i];
 8004a4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004a4e:	1c59      	adds	r1, r3, #1
 8004a50:	4b3f      	ldr	r3, [pc, #252]	@ (8004b50 <masked_chi+0x17c>)
 8004a52:	fb83 2301 	smull	r2, r3, r3, r1
 8004a56:	105a      	asrs	r2, r3, #1
 8004a58:	17cb      	asrs	r3, r1, #31
 8004a5a:	1ad2      	subs	r2, r2, r3
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	1aca      	subs	r2, r1, r3
 8004a64:	0092      	lsls	r2, r2, #2
 8004a66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004a6a:	4413      	add	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	33f8      	adds	r3, #248	@ 0xf8
 8004a70:	443b      	add	r3, r7
 8004a72:	3bb0      	subs	r3, #176	@ 0xb0
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	ea6f 0802 	mvn.w	r8, r2
 8004a7c:	ea6f 0903 	mvn.w	r9, r3
 8004a80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	33f8      	adds	r3, #248	@ 0xf8
 8004a88:	443b      	add	r3, r7
 8004a8a:	3bf0      	subs	r3, #240	@ 0xf0
 8004a8c:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 8004a90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004a94:	3301      	adds	r3, #1
 8004a96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004a9e:	2b03      	cmp	r3, #3
 8004aa0:	ddd3      	ble.n	8004a4a <masked_chi+0x76>
            }

            masked_uint64_t and_result;
            masked_and(&and_result,
                       &notA1,
                       &temp[(x + 2) % 5],
 8004aa2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004aa6:	1c99      	adds	r1, r3, #2
 8004aa8:	4b29      	ldr	r3, [pc, #164]	@ (8004b50 <masked_chi+0x17c>)
 8004aaa:	fb83 2301 	smull	r2, r3, r3, r1
 8004aae:	105a      	asrs	r2, r3, #1
 8004ab0:	17cb      	asrs	r3, r1, #31
 8004ab2:	1ad2      	subs	r2, r2, r3
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	1aca      	subs	r2, r1, r3
 8004abc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8004ac0:	0153      	lsls	r3, r2, #5
 8004ac2:	18cc      	adds	r4, r1, r3
                       r[x][y]);
 8004ac4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	01db      	lsls	r3, r3, #7
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	441a      	add	r2, r3
 8004ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ada:	01db      	lsls	r3, r3, #7
 8004adc:	4413      	add	r3, r2
            masked_and(&and_result,
 8004ade:	f107 0108 	add.w	r1, r7, #8
 8004ae2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	f000 fc58 	bl	800539c <masked_and>

            masked_xor(&state[x][y], &temp[x], &and_result);
 8004aec:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	015b      	lsls	r3, r3, #5
 8004af8:	461a      	mov	r2, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	441a      	add	r2, r3
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	015b      	lsls	r3, r3, #5
 8004b04:	18d0      	adds	r0, r2, r3
 8004b06:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8004b0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b0e:	015b      	lsls	r3, r3, #5
 8004b10:	4413      	add	r3, r2
 8004b12:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004b16:	4619      	mov	r1, r3
 8004b18:	f000 fc15 	bl	8005346 <masked_xor>
        for (int x = 0; x < 5; x++) {
 8004b1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b20:	3301      	adds	r3, #1
 8004b22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004b26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	dd89      	ble.n	8004a42 <masked_chi+0x6e>
    for (int y = 0; y < 5; y++) {
 8004b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b32:	3301      	adds	r3, #1
 8004b34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	f77f af53 	ble.w	80049e8 <masked_chi+0x14>
        }
    }
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	37f8      	adds	r7, #248	@ 0xf8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b4e:	bf00      	nop
 8004b50:	66666667 	.word	0x66666667

08004b54 <masked_iota>:

void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 8004b54:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b58:	b08e      	sub	sp, #56	@ 0x38
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	60f8      	str	r0, [r7, #12]
 8004b5e:	e9c7 2300 	strd	r2, r3, [r7]
    // Split rc into shares that XOR to rc
    uint64_t r[MASKING_N];
    r[0] = rc;
 8004b62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b66:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 1; i < MASKING_N; i++) {
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b6e:	e01c      	b.n	8004baa <masked_iota+0x56>
        r[i] = get_random64();       // Get a fresh random share
 8004b70:	f7ff fcd0 	bl	8004514 <get_random64>
 8004b74:	4602      	mov	r2, r0
 8004b76:	460b      	mov	r3, r1
 8004b78:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004b7a:	00c9      	lsls	r1, r1, #3
 8004b7c:	3138      	adds	r1, #56	@ 0x38
 8004b7e:	4439      	add	r1, r7
 8004b80:	3928      	subs	r1, #40	@ 0x28
 8004b82:	e9c1 2300 	strd	r2, r3, [r1]
        r[0] ^= r[i];                // Ensure all shares XOR to original rc
 8004b86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	3338      	adds	r3, #56	@ 0x38
 8004b90:	443b      	add	r3, r7
 8004b92:	3b28      	subs	r3, #40	@ 0x28
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	ea80 0802 	eor.w	r8, r0, r2
 8004b9c:	ea81 0903 	eor.w	r9, r1, r3
 8004ba0:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (int i = 1; i < MASKING_N; i++) {
 8004ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	dddf      	ble.n	8004b70 <masked_iota+0x1c>
    }

    for (int i = 0; i < MASKING_N; i++) {
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb4:	e019      	b.n	8004bea <masked_iota+0x96>
        state[0][0].share[i] ^= r[i];
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	3338      	adds	r3, #56	@ 0x38
 8004bc8:	443b      	add	r3, r7
 8004bca:	3b28      	subs	r3, #40	@ 0x28
 8004bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd0:	ea80 0402 	eor.w	r4, r0, r2
 8004bd4:	ea81 0503 	eor.w	r5, r1, r3
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	e9c3 4500 	strd	r4, r5, [r3]
    for (int i = 0; i < MASKING_N; i++) {
 8004be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be6:	3301      	adds	r3, #1
 8004be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	dde2      	ble.n	8004bb6 <masked_iota+0x62>
    }
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3738      	adds	r7, #56	@ 0x38
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004bfc <print_recombined_state>:
// Helper function (add this)
void print_recombined_state(masked_uint64_t state[5][5], const char *label) {
 8004bfc:	b5b0      	push	{r4, r5, r7, lr}
 8004bfe:	b08c      	sub	sp, #48	@ 0x30
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
    printf("== %s (Recombined) ==\n", label);
 8004c06:	6839      	ldr	r1, [r7, #0]
 8004c08:	482a      	ldr	r0, [pc, #168]	@ (8004cb4 <print_recombined_state+0xb8>)
 8004c0a:	f009 fd6d 	bl	800e6e8 <iprintf>
    for (int x = 0; x < 5; x++) {
 8004c0e:	2300      	movs	r3, #0
 8004c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c12:	e046      	b.n	8004ca2 <print_recombined_state+0xa6>
        for (int y = 0; y < 5; y++) {
 8004c14:	2300      	movs	r3, #0
 8004c16:	623b      	str	r3, [r7, #32]
 8004c18:	e03d      	b.n	8004c96 <print_recombined_state+0x9a>
            uint64_t val = 0;
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (int i = 0; i < MASKING_N; i++) {
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	e01a      	b.n	8004c62 <print_recombined_state+0x66>
                val ^= state[x][y].share[i];
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	015b      	lsls	r3, r3, #5
 8004c36:	461a      	mov	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	441a      	add	r2, r3
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	0099      	lsls	r1, r3, #2
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	440b      	add	r3, r1
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4413      	add	r3, r2
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c50:	ea80 0402 	eor.w	r4, r0, r2
 8004c54:	ea81 0503 	eor.w	r5, r1, r3
 8004c58:	e9c7 4506 	strd	r4, r5, [r7, #24]
            for (int i = 0; i < MASKING_N; i++) {
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	dde1      	ble.n	8004c2c <print_recombined_state+0x30>
            }
            uint32_t hi = (uint32_t)(val >> 32);
 8004c68:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	000a      	movs	r2, r1
 8004c76:	2300      	movs	r3, #0
 8004c78:	4613      	mov	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
            uint32_t lo = (uint32_t)(val & 0xFFFFFFFF);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	60fb      	str	r3, [r7, #12]
            printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6a3a      	ldr	r2, [r7, #32]
 8004c88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c8a:	480b      	ldr	r0, [pc, #44]	@ (8004cb8 <print_recombined_state+0xbc>)
 8004c8c:	f009 fd2c 	bl	800e6e8 <iprintf>
        for (int y = 0; y < 5; y++) {
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	3301      	adds	r3, #1
 8004c94:	623b      	str	r3, [r7, #32]
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2b04      	cmp	r3, #4
 8004c9a:	ddbe      	ble.n	8004c1a <print_recombined_state+0x1e>
    for (int x = 0; x < 5; x++) {
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	2b04      	cmp	r3, #4
 8004ca6:	ddb5      	ble.n	8004c14 <print_recombined_state+0x18>
        }
    }
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	3728      	adds	r7, #40	@ 0x28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	0800f680 	.word	0x0800f680
 8004cb8:	0800f698 	.word	0x0800f698

08004cbc <masked_keccak_round>:


void masked_keccak_round(masked_uint64_t state[5][5], uint64_t rc) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	f6ad 4d98 	subw	sp, sp, #3224	@ 0xc98
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	f607 4198 	addw	r1, r7, #3224	@ 0xc98
 8004cc8:	f6a1 418c 	subw	r1, r1, #3212	@ 0xc8c
 8004ccc:	6008      	str	r0, [r1, #0]
 8004cce:	f107 0108 	add.w	r1, r7, #8
 8004cd2:	e941 2302 	strd	r2, r3, [r1, #-8]
    // Allocate fresh randomness for Chi step
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];

    // Fill randomness for each (x, y) lane
    for (int x = 0; x < 5; x++) {
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	f8c7 3c94 	str.w	r3, [r7, #3220]	@ 0xc94
 8004cdc:	e020      	b.n	8004d20 <masked_keccak_round+0x64>
        for (int y = 0; y < 5; y++) {
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f8c7 3c90 	str.w	r3, [r7, #3216]	@ 0xc90
 8004ce4:	e013      	b.n	8004d0e <masked_keccak_round+0x52>
            fill_random_matrix(r_chi[x][y]);
 8004ce6:	f107 0110 	add.w	r1, r7, #16
 8004cea:	f8d7 2c94 	ldr.w	r2, [r7, #3220]	@ 0xc94
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f8d7 2c90 	ldr.w	r2, [r7, #3216]	@ 0xc90
 8004cf8:	4413      	add	r3, r2
 8004cfa:	01db      	lsls	r3, r3, #7
 8004cfc:	440b      	add	r3, r1
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fada 	bl	80052b8 <fill_random_matrix>
        for (int y = 0; y < 5; y++) {
 8004d04:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	@ 0xc90
 8004d08:	3301      	adds	r3, #1
 8004d0a:	f8c7 3c90 	str.w	r3, [r7, #3216]	@ 0xc90
 8004d0e:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	@ 0xc90
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	dde7      	ble.n	8004ce6 <masked_keccak_round+0x2a>
    for (int x = 0; x < 5; x++) {
 8004d16:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	@ 0xc94
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f8c7 3c94 	str.w	r3, [r7, #3220]	@ 0xc94
 8004d20:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	@ 0xc94
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	ddda      	ble.n	8004cde <masked_keccak_round+0x22>
        }
    }

    // Apply the five Keccak round steps
    print_recombined_state(state, "Before Theta");
 8004d28:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004d2c:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004d30:	492d      	ldr	r1, [pc, #180]	@ (8004de8 <masked_keccak_round+0x12c>)
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	f7ff ff62 	bl	8004bfc <print_recombined_state>
    masked_theta(state);
 8004d38:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004d3c:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	f7ff fc11 	bl	8004568 <masked_theta>

    print_recombined_state(state, "After Theta");
 8004d46:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004d4a:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004d4e:	4927      	ldr	r1, [pc, #156]	@ (8004dec <masked_keccak_round+0x130>)
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	f7ff ff53 	bl	8004bfc <print_recombined_state>
    masked_rho(state);
 8004d56:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004d5a:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004d5e:	6818      	ldr	r0, [r3, #0]
 8004d60:	f7ff fd10 	bl	8004784 <masked_rho>

    print_recombined_state(state, "After Rho");
 8004d64:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004d68:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004d6c:	4920      	ldr	r1, [pc, #128]	@ (8004df0 <masked_keccak_round+0x134>)
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	f7ff ff44 	bl	8004bfc <print_recombined_state>
    masked_pi(state);
 8004d74:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004d78:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f7ff fd83 	bl	8004888 <masked_pi>

    print_recombined_state(state, "After Pi");
 8004d82:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004d86:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004d8a:	491a      	ldr	r1, [pc, #104]	@ (8004df4 <masked_keccak_round+0x138>)
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	f7ff ff35 	bl	8004bfc <print_recombined_state>
    masked_chi(state, r_chi);
 8004d92:	f107 0210 	add.w	r2, r7, #16
 8004d96:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004d9a:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004d9e:	4611      	mov	r1, r2
 8004da0:	6818      	ldr	r0, [r3, #0]
 8004da2:	f7ff fe17 	bl	80049d4 <masked_chi>

    print_recombined_state(state, "After Chi");
 8004da6:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004daa:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004dae:	4912      	ldr	r1, [pc, #72]	@ (8004df8 <masked_keccak_round+0x13c>)
 8004db0:	6818      	ldr	r0, [r3, #0]
 8004db2:	f7ff ff23 	bl	8004bfc <print_recombined_state>
    masked_iota(state, rc);
 8004db6:	f107 0308 	add.w	r3, r7, #8
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004dc0:	f6a3 418c 	subw	r1, r3, #3212	@ 0xc8c
 8004dc4:	e952 2302 	ldrd	r2, r3, [r2, #-8]
 8004dc8:	6808      	ldr	r0, [r1, #0]
 8004dca:	f7ff fec3 	bl	8004b54 <masked_iota>

    print_recombined_state(state, "After Iota");
 8004dce:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8004dd2:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8004dd6:	4909      	ldr	r1, [pc, #36]	@ (8004dfc <masked_keccak_round+0x140>)
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	f7ff ff0f 	bl	8004bfc <print_recombined_state>

}
 8004dde:	bf00      	nop
 8004de0:	f607 4798 	addw	r7, r7, #3224	@ 0xc98
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	0800f6b4 	.word	0x0800f6b4
 8004dec:	0800f6c4 	.word	0x0800f6c4
 8004df0:	0800f6d0 	.word	0x0800f6d0
 8004df4:	0800f6dc 	.word	0x0800f6dc
 8004df8:	0800f6e8 	.word	0x0800f6e8
 8004dfc:	0800f6f4 	.word	0x0800f6f4

08004e00 <masked_value_set>:



extern RNG_HandleTypeDef hrng;

void masked_value_set(masked_uint64_t *out, uint64_t value) {
 8004e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e04:	b08c      	sub	sp, #48	@ 0x30
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6178      	str	r0, [r7, #20]
 8004e0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint64_t acc = value;
 8004e0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e12:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28


    for (int i = 0; i < MASKING_N - 1; i++) {
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e1a:	e03f      	b.n	8004e9c <masked_value_set+0x9c>
        uint32_t lo = 0, hi = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]
 8004e20:	2300      	movs	r3, #0
 8004e22:	61bb      	str	r3, [r7, #24]
        	HAL_StatusTypeDef status1 = HAL_RNG_GenerateRandomNumber(&hrng, &lo);
 8004e24:	f107 031c 	add.w	r3, r7, #28
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4823      	ldr	r0, [pc, #140]	@ (8004eb8 <masked_value_set+0xb8>)
 8004e2c:	f005 f8fa 	bl	800a024 <HAL_RNG_GenerateRandomNumber>
 8004e30:	4603      	mov	r3, r0
 8004e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
           HAL_StatusTypeDef status2 = HAL_RNG_GenerateRandomNumber(&hrng, &hi);
 8004e36:	f107 0318 	add.w	r3, r7, #24
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	481e      	ldr	r0, [pc, #120]	@ (8004eb8 <masked_value_set+0xb8>)
 8004e3e:	f005 f8f1 	bl	800a024 <HAL_RNG_GenerateRandomNumber>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        out->share[i] = ((uint64_t)hi << 32) | lo;
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	000b      	movs	r3, r1
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	69f9      	ldr	r1, [r7, #28]
 8004e60:	2000      	movs	r0, #0
 8004e62:	460c      	mov	r4, r1
 8004e64:	4605      	mov	r5, r0
 8004e66:	ea42 0804 	orr.w	r8, r2, r4
 8004e6a:	ea43 0905 	orr.w	r9, r3, r5
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4413      	add	r3, r2
 8004e76:	e9c3 8900 	strd	r8, r9, [r3]
        acc ^= out->share[i];
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004e8a:	ea80 0a02 	eor.w	sl, r0, r2
 8004e8e:	ea81 0b03 	eor.w	fp, r1, r3
 8004e92:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N - 1; i++) {
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	3301      	adds	r3, #1
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	ddbc      	ble.n	8004e1c <masked_value_set+0x1c>
    }

    out->share[MASKING_N - 1] = acc;
 8004ea2:	6979      	ldr	r1, [r7, #20]
 8004ea4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ea8:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8004eac:	bf00      	nop
 8004eae:	3730      	adds	r7, #48	@ 0x30
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20000140 	.word	0x20000140

08004ebc <masked_absorb>:
void masked_absorb(masked_uint64_t state[5][5], const uint8_t *input, size_t input_len) {
 8004ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ec0:	b0ce      	sub	sp, #312	@ 0x138
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004ec8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004ecc:	6018      	str	r0, [r3, #0]
 8004ece:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004ed2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004ed6:	6019      	str	r1, [r3, #0]
 8004ed8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004edc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004ee0:	601a      	str	r2, [r3, #0]
    // Zero the state
    for (int x = 0; x < 5; x++) {
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004ee8:	e039      	b.n	8004f5e <masked_absorb+0xa2>
        for (int y = 0; y < 5; y++) {
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004ef0:	e02c      	b.n	8004f4c <masked_absorb+0x90>
            for (int i = 0; i < MASKING_N; i++) {
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004ef8:	e01f      	b.n	8004f3a <masked_absorb+0x7e>
                state[x][y].share[i] = 0;
 8004efa:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	015b      	lsls	r3, r3, #5
 8004f06:	461a      	mov	r2, r3
 8004f08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f0c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	1899      	adds	r1, r3, r2
 8004f14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004f18:	009a      	lsls	r2, r3, #2
 8004f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f1e:	4413      	add	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4419      	add	r1, r3
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8004f30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f34:	3301      	adds	r3, #1
 8004f36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	dddb      	ble.n	8004efa <masked_absorb+0x3e>
        for (int y = 0; y < 5; y++) {
 8004f42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004f46:	3301      	adds	r3, #1
 8004f48:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004f4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	ddce      	ble.n	8004ef2 <masked_absorb+0x36>
    for (int x = 0; x < 5; x++) {
 8004f54:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004f5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	ddc1      	ble.n	8004eea <masked_absorb+0x2e>
            }
        }
    }

    size_t offset = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    // Process complete blocks
    while (input_len >= KECCAK_RATE) {
 8004f6c:	e0b8      	b.n	80050e0 <masked_absorb+0x224>
        for (int i = 0; i < KECCAK_RATE; i += 8) {
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004f74:	e098      	b.n	80050a8 <masked_absorb+0x1ec>
            uint64_t lane = 0;
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            // Correctly load 8 bytes as a 64-bit value (little-endian)
            for (int j = 0; j < 8; j++) {
 8004f82:	2300      	movs	r3, #0
 8004f84:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8004f88:	e03a      	b.n	8005000 <masked_absorb+0x144>
                lane |= ((uint64_t)input[offset + i + j]) << (8 * j);
 8004f8a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8004f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004f92:	441a      	add	r2, r3
 8004f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f98:	441a      	add	r2, r3
 8004f9a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004f9e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	2200      	movs	r2, #0
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	617a      	str	r2, [r7, #20]
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	f1a3 0120 	sub.w	r1, r3, #32
 8004fba:	f1c3 0220 	rsb	r2, r3, #32
 8004fbe:	6978      	ldr	r0, [r7, #20]
 8004fc0:	fa00 f903 	lsl.w	r9, r0, r3
 8004fc4:	6938      	ldr	r0, [r7, #16]
 8004fc6:	fa00 f101 	lsl.w	r1, r0, r1
 8004fca:	ea49 0901 	orr.w	r9, r9, r1
 8004fce:	6939      	ldr	r1, [r7, #16]
 8004fd0:	fa21 f202 	lsr.w	r2, r1, r2
 8004fd4:	ea49 0902 	orr.w	r9, r9, r2
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	fa02 f803 	lsl.w	r8, r2, r3
 8004fde:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8004fe2:	ea42 0108 	orr.w	r1, r2, r8
 8004fe6:	60b9      	str	r1, [r7, #8]
 8004fe8:	ea43 0309 	orr.w	r3, r3, r9
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ff2:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            for (int j = 0; j < 8; j++) {
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005004:	2b07      	cmp	r3, #7
 8005006:	ddc0      	ble.n	8004f8a <masked_absorb+0xce>
            }

            size_t x = (i / 8) % 5;
 8005008:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800500c:	2b00      	cmp	r3, #0
 800500e:	da00      	bge.n	8005012 <masked_absorb+0x156>
 8005010:	3307      	adds	r3, #7
 8005012:	10db      	asrs	r3, r3, #3
 8005014:	4619      	mov	r1, r3
 8005016:	4ba7      	ldr	r3, [pc, #668]	@ (80052b4 <masked_absorb+0x3f8>)
 8005018:	fb83 2301 	smull	r2, r3, r3, r1
 800501c:	105a      	asrs	r2, r3, #1
 800501e:	17cb      	asrs	r3, r1, #31
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	461a      	mov	r2, r3
 8005024:	0092      	lsls	r2, r2, #2
 8005026:	441a      	add	r2, r3
 8005028:	1a8b      	subs	r3, r1, r2
 800502a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
            size_t y = (i / 8) / 5;
 800502e:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8005032:	4ba0      	ldr	r3, [pc, #640]	@ (80052b4 <masked_absorb+0x3f8>)
 8005034:	fb83 2301 	smull	r2, r3, r3, r1
 8005038:	111a      	asrs	r2, r3, #4
 800503a:	17cb      	asrs	r3, r1, #31
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

            // Securely mask the input value
            masked_uint64_t masked_lane;
            masked_value_set(&masked_lane, lane);
 8005042:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8005046:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800504a:	4608      	mov	r0, r1
 800504c:	f7ff fed8 	bl	8004e00 <masked_value_set>

            // XOR into the state
            masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8005050:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	015b      	lsls	r3, r3, #5
 800505c:	461a      	mov	r2, r3
 800505e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005062:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	441a      	add	r2, r3
 800506a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800506e:	015b      	lsls	r3, r3, #5
 8005070:	18d0      	adds	r0, r2, r3
 8005072:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	015b      	lsls	r3, r3, #5
 800507e:	461a      	mov	r2, r3
 8005080:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005084:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	441a      	add	r2, r3
 800508c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005090:	015b      	lsls	r3, r3, #5
 8005092:	18d1      	adds	r1, r2, r3
 8005094:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005098:	461a      	mov	r2, r3
 800509a:	f000 f954 	bl	8005346 <masked_xor>
        for (int i = 0; i < KECCAK_RATE; i += 8) {
 800509e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050a2:	3308      	adds	r3, #8
 80050a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80050a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80050ac:	2ba7      	cmp	r3, #167	@ 0xa7
 80050ae:	f77f af62 	ble.w	8004f76 <masked_absorb+0xba>
        }

        // Apply the permutation
        masked_keccak_f1600(state);
 80050b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	f000 fae2 	bl	8005684 <masked_keccak_f1600>

        offset += KECCAK_RATE;
 80050c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80050c4:	33a8      	adds	r3, #168	@ 0xa8
 80050c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        input_len -= KECCAK_RATE;
 80050ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050ce:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 80050d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050d6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3ba8      	subs	r3, #168	@ 0xa8
 80050de:	6013      	str	r3, [r2, #0]
    while (input_len >= KECCAK_RATE) {
 80050e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80050e4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2ba7      	cmp	r3, #167	@ 0xa7
 80050ec:	f63f af3f 	bhi.w	8004f6e <masked_absorb+0xb2>
    }

    // Final block with padding
    uint8_t block[KECCAK_RATE] = {0};
 80050f0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80050f4:	22a8      	movs	r2, #168	@ 0xa8
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f009 fd09 	bl	800eb10 <memset>
    memcpy(block, input + offset, input_len);
 80050fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005102:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800510c:	18d1      	adds	r1, r2, r3
 800510e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005112:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005116:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	f009 fd83 	bl	800ec26 <memcpy>
    block[input_len] ^= 0x06;  // Apply domain separation
 8005120:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8005124:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005128:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4413      	add	r3, r2
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	f083 0306 	eor.w	r3, r3, #6
 8005136:	b2d9      	uxtb	r1, r3
 8005138:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800513c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005140:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4413      	add	r3, r2
 8005148:	460a      	mov	r2, r1
 800514a:	701a      	strb	r2, [r3, #0]
    block[KECCAK_RATE - 1] ^= 0x80;  // Apply padding
 800514c:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8005150:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8005154:	43db      	mvns	r3, r3
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3

    // Process the final block
    for (int i = 0; i < KECCAK_RATE; i += 8) {
 800515c:	2300      	movs	r3, #0
 800515e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005162:	e095      	b.n	8005290 <masked_absorb+0x3d4>
        uint64_t lane = 0;
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < 8 && (i + j) < KECCAK_RATE; j++) {  // Added bounds check
 8005170:	2300      	movs	r3, #0
 8005172:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005176:	e030      	b.n	80051da <masked_absorb+0x31e>
            lane |= ((uint64_t)block[i + j]) << (8 * j);
 8005178:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800517c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005180:	4413      	add	r3, r2
 8005182:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005186:	f107 0218 	add.w	r2, r7, #24
 800518a:	4413      	add	r3, r2
 800518c:	f813 3cec 	ldrb.w	r3, [r3, #-236]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2200      	movs	r2, #0
 8005194:	469a      	mov	sl, r3
 8005196:	4693      	mov	fp, r2
 8005198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	f1a3 0120 	sub.w	r1, r3, #32
 80051a2:	f1c3 0220 	rsb	r2, r3, #32
 80051a6:	fa0b f503 	lsl.w	r5, fp, r3
 80051aa:	fa0a f101 	lsl.w	r1, sl, r1
 80051ae:	430d      	orrs	r5, r1
 80051b0:	fa2a f202 	lsr.w	r2, sl, r2
 80051b4:	4315      	orrs	r5, r2
 80051b6:	fa0a f403 	lsl.w	r4, sl, r3
 80051ba:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80051be:	ea42 0104 	orr.w	r1, r2, r4
 80051c2:	6039      	str	r1, [r7, #0]
 80051c4:	432b      	orrs	r3, r5
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051cc:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < 8 && (i + j) < KECCAK_RATE; j++) {  // Added bounds check
 80051d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d4:	3301      	adds	r3, #1
 80051d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80051da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051de:	2b07      	cmp	r3, #7
 80051e0:	dc06      	bgt.n	80051f0 <masked_absorb+0x334>
 80051e2:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80051e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051ea:	4413      	add	r3, r2
 80051ec:	2ba7      	cmp	r3, #167	@ 0xa7
 80051ee:	ddc3      	ble.n	8005178 <masked_absorb+0x2bc>
        }

        size_t x = (i / 8) % 5;
 80051f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	da00      	bge.n	80051fa <masked_absorb+0x33e>
 80051f8:	3307      	adds	r3, #7
 80051fa:	10db      	asrs	r3, r3, #3
 80051fc:	4619      	mov	r1, r3
 80051fe:	4b2d      	ldr	r3, [pc, #180]	@ (80052b4 <masked_absorb+0x3f8>)
 8005200:	fb83 2301 	smull	r2, r3, r3, r1
 8005204:	105a      	asrs	r2, r3, #1
 8005206:	17cb      	asrs	r3, r1, #31
 8005208:	1ad2      	subs	r2, r2, r3
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	1aca      	subs	r2, r1, r3
 8005212:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
        size_t y = (i / 8) / 5;
 8005216:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800521a:	4a26      	ldr	r2, [pc, #152]	@ (80052b4 <masked_absorb+0x3f8>)
 800521c:	fb82 1203 	smull	r1, r2, r2, r3
 8005220:	1112      	asrs	r2, r2, #4
 8005222:	17db      	asrs	r3, r3, #31
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

        masked_uint64_t masked_lane;
        masked_value_set(&masked_lane, lane);
 800522a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800522e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8005232:	4608      	mov	r0, r1
 8005234:	f7ff fde4 	bl	8004e00 <masked_value_set>
        masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8005238:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	015b      	lsls	r3, r3, #5
 8005244:	461a      	mov	r2, r3
 8005246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800524a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	441a      	add	r2, r3
 8005252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005256:	015b      	lsls	r3, r3, #5
 8005258:	18d0      	adds	r0, r2, r3
 800525a:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	015b      	lsls	r3, r3, #5
 8005266:	461a      	mov	r2, r3
 8005268:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800526c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	441a      	add	r2, r3
 8005274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005278:	015b      	lsls	r3, r3, #5
 800527a:	4413      	add	r3, r2
 800527c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005280:	4619      	mov	r1, r3
 8005282:	f000 f860 	bl	8005346 <masked_xor>
    for (int i = 0; i < KECCAK_RATE; i += 8) {
 8005286:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800528a:	3308      	adds	r3, #8
 800528c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005290:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005294:	2ba7      	cmp	r3, #167	@ 0xa7
 8005296:	f77f af65 	ble.w	8005164 <masked_absorb+0x2a8>
    }

    // Final permutation
    masked_keccak_f1600(state);
 800529a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800529e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80052a2:	6818      	ldr	r0, [r3, #0]
 80052a4:	f000 f9ee 	bl	8005684 <masked_keccak_f1600>
}
 80052a8:	bf00      	nop
 80052aa:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80052ae:	46bd      	mov	sp, r7
 80052b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b4:	66666667 	.word	0x66666667

080052b8 <fill_random_matrix>:
#include "masked_types.h"
#include "global_rng.h"  // ensure this includes `extern RNG_HandleTypeDef hrng`
#include "stm32f4xx_hal_rng.h"  // required for HAL RNG
#include <stddef.h>  // for size_t

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 80052b8:	b5b0      	push	{r4, r5, r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e037      	b.n	8005336 <fill_random_matrix+0x7e>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	3301      	adds	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	e020      	b.n	8005310 <fill_random_matrix+0x58>
            uint64_t val = get_random64();
 80052ce:	f7ff f921 	bl	8004514 <get_random64>
 80052d2:	4603      	mov	r3, r0
 80052d4:	17da      	asrs	r2, r3, #31
 80052d6:	461c      	mov	r4, r3
 80052d8:	4615      	mov	r5, r2
 80052da:	e9c7 4502 	strd	r4, r5, [r7, #8]
            r[i][j] = val;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	015b      	lsls	r3, r3, #5
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	441a      	add	r2, r3
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	00db      	lsls	r3, r3, #3
 80052ea:	18d1      	adds	r1, r2, r3
 80052ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052f0:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry!
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015b      	lsls	r3, r3, #5
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	441a      	add	r2, r3
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	18d1      	adds	r1, r2, r3
 8005302:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005306:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	3301      	adds	r3, #1
 800530e:	613b      	str	r3, [r7, #16]
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	2b03      	cmp	r3, #3
 8005314:	d9db      	bls.n	80052ce <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	015b      	lsls	r3, r3, #5
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	441a      	add	r2, r3
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	18d1      	adds	r1, r2, r3
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	3301      	adds	r3, #1
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b03      	cmp	r3, #3
 800533a:	d9c4      	bls.n	80052c6 <fill_random_matrix+0xe>
    }
}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bdb0      	pop	{r4, r5, r7, pc}

08005346 <masked_xor>:



void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 8005346:	b4b0      	push	{r4, r5, r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e018      	b.n	800538a <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4413      	add	r3, r2
 8005360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4413      	add	r3, r2
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	ea80 0402 	eor.w	r4, r0, r2
 8005374:	ea81 0503 	eor.w	r5, r1, r3
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	00db      	lsls	r3, r3, #3
 800537e:	4413      	add	r3, r2
 8005380:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	3301      	adds	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d9e3      	bls.n	8005358 <masked_xor+0x12>
    }
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	bcb0      	pop	{r4, r5, r7}
 800539a:	4770      	bx	lr

0800539c <masked_and>:

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 800539c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053a0:	b092      	sub	sp, #72	@ 0x48
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80053a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80053a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80053aa:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 80053ac:	2300      	movs	r3, #0
 80053ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b0:	e018      	b.n	80053e4 <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 80053b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4413      	add	r3, r2
 80053c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ca:	ea00 0402 	and.w	r4, r0, r2
 80053ce:	ea01 0503 	and.w	r5, r1, r3
 80053d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 80053de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053e0:	3301      	adds	r3, #1
 80053e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d9e3      	bls.n	80053b2 <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 80053ea:	2300      	movs	r3, #0
 80053ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80053ee:	e078      	b.n	80054e2 <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80053f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053f2:	3301      	adds	r3, #1
 80053f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053f6:	e06e      	b.n	80054d6 <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 80053f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	4413      	add	r3, r2
 8005400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4413      	add	r3, r2
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	ea00 0802 	and.w	r8, r0, r2
 8005414:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 8005418:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800541a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	4413      	add	r3, r2
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	ea00 0a02 	and.w	sl, r0, r2
 8005434:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8005438:	ea88 030a 	eor.w	r3, r8, sl
 800543c:	603b      	str	r3, [r7, #0]
 800543e:	ea89 030b 	eor.w	r3, r9, fp
 8005442:	607b      	str	r3, [r7, #4]
 8005444:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005448:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 800544c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800544e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4413      	add	r3, r2
 8005454:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005458:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	441a      	add	r2, r3
 8005460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005462:	00db      	lsls	r3, r3, #3
 8005464:	4413      	add	r3, r2
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	ea80 0402 	eor.w	r4, r0, r2
 800546e:	61bc      	str	r4, [r7, #24]
 8005470:	404b      	eors	r3, r1
 8005472:	61fb      	str	r3, [r7, #28]
 8005474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	4413      	add	r3, r2
 800547c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005480:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 8005484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005486:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005488:	00db      	lsls	r3, r3, #3
 800548a:	4413      	add	r3, r2
 800548c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	441a      	add	r2, r3
 8005498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80054a6:	ea80 0602 	eor.w	r6, r0, r2
 80054aa:	613e      	str	r6, [r7, #16]
 80054ac:	404b      	eors	r3, r1
 80054ae:	617b      	str	r3, [r7, #20]
 80054b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80054b4:	460b      	mov	r3, r1
 80054b6:	4063      	eors	r3, r4
 80054b8:	60bb      	str	r3, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	406b      	eors	r3, r5
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054cc:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80054d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d2:	3301      	adds	r3, #1
 80054d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d98d      	bls.n	80053f8 <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 80054dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054de:	3301      	adds	r3, #1
 80054e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d983      	bls.n	80053f0 <masked_and+0x54>
        }
    }
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	3748      	adds	r7, #72	@ 0x48
 80054ee:	46bd      	mov	sp, r7
 80054f0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80054f4:	4770      	bx	lr

080054f6 <masked_recombine>:
#include "masked_types.h"
#include "masked_gadgets.h"
#include "stm32f4xx_hal.h"
#include <stdio.h>

uint64_t masked_recombine(const masked_uint64_t *m) {
 80054f6:	b4b0      	push	{r4, r5, r7}
 80054f8:	b087      	sub	sp, #28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
    uint64_t result = 0;
 80054fe:	f04f 0000 	mov.w	r0, #0
 8005502:	f04f 0100 	mov.w	r1, #0
 8005506:	e9c7 0104 	strd	r0, r1, [r7, #16]
    for (int i = 0; i < MASKING_N; i++) {
 800550a:	2100      	movs	r1, #0
 800550c:	60f9      	str	r1, [r7, #12]
 800550e:	e010      	b.n	8005532 <masked_recombine+0x3c>
        result ^= m->share[i];
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	68f9      	ldr	r1, [r7, #12]
 8005514:	00c9      	lsls	r1, r1, #3
 8005516:	4401      	add	r1, r0
 8005518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800551c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005520:	ea84 0200 	eor.w	r2, r4, r0
 8005524:	ea85 0301 	eor.w	r3, r5, r1
 8005528:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < MASKING_N; i++) {
 800552c:	68f9      	ldr	r1, [r7, #12]
 800552e:	3101      	adds	r1, #1
 8005530:	60f9      	str	r1, [r7, #12]
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	2903      	cmp	r1, #3
 8005536:	ddeb      	ble.n	8005510 <masked_recombine+0x1a>
    }
    return result;
 8005538:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800553c:	4610      	mov	r0, r2
 800553e:	4619      	mov	r1, r3
 8005540:	371c      	adds	r7, #28
 8005542:	46bd      	mov	sp, r7
 8005544:	bcb0      	pop	{r4, r5, r7}
 8005546:	4770      	bx	lr

08005548 <debug_print_masked_state>:
void debug_print_masked_state(masked_uint64_t state[5][5]) {
 8005548:	b5b0      	push	{r4, r5, r7, lr}
 800554a:	b08e      	sub	sp, #56	@ 0x38
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
    printf("=== Full Masked State (Shares + Recombined) ===\n");
 8005550:	4848      	ldr	r0, [pc, #288]	@ (8005674 <debug_print_masked_state+0x12c>)
 8005552:	f009 f939 	bl	800e7c8 <puts>
    for (int y = 0; y < 5; y++) {
 8005556:	2300      	movs	r3, #0
 8005558:	637b      	str	r3, [r7, #52]	@ 0x34
 800555a:	e081      	b.n	8005660 <debug_print_masked_state+0x118>
        for (int x = 0; x < 5; x++) {
 800555c:	2300      	movs	r3, #0
 800555e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005560:	e078      	b.n	8005654 <debug_print_masked_state+0x10c>
            printf("State[%d][%d]: ", x, y);
 8005562:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005564:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005566:	4844      	ldr	r0, [pc, #272]	@ (8005678 <debug_print_masked_state+0x130>)
 8005568:	f009 f8be 	bl	800e6e8 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 800556c:	2300      	movs	r3, #0
 800556e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005570:	e032      	b.n	80055d8 <debug_print_masked_state+0x90>
                uint32_t hi = (uint32_t)(state[x][y].share[i] >> 32);
 8005572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	015b      	lsls	r3, r3, #5
 800557c:	461a      	mov	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	441a      	add	r2, r3
 8005582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005584:	0099      	lsls	r1, r3, #2
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005588:	440b      	add	r3, r1
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	000a      	movs	r2, r1
 800559c:	2300      	movs	r3, #0
 800559e:	4613      	mov	r3, r2
 80055a0:	613b      	str	r3, [r7, #16]
                uint32_t lo = (uint32_t)(state[x][y].share[i] & 0xFFFFFFFF);
 80055a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	015b      	lsls	r3, r3, #5
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	441a      	add	r2, r3
 80055b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b4:	0099      	lsls	r1, r3, #2
 80055b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b8:	440b      	add	r3, r1
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	4413      	add	r3, r2
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	4613      	mov	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]
                printf("S[%d]=0x%08X%08X ", i, hi, lo);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055cc:	482b      	ldr	r0, [pc, #172]	@ (800567c <debug_print_masked_state+0x134>)
 80055ce:	f009 f88b 	bl	800e6e8 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 80055d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d4:	3301      	adds	r3, #1
 80055d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055da:	2b03      	cmp	r3, #3
 80055dc:	ddc9      	ble.n	8005572 <debug_print_masked_state+0x2a>
            }
            // Recombined value
            uint64_t val = 0;
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int i = 0; i < MASKING_N; i++) {
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e01a      	b.n	8005626 <debug_print_masked_state+0xde>
                val ^= state[x][y].share[i];
 80055f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	015b      	lsls	r3, r3, #5
 80055fa:	461a      	mov	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	441a      	add	r2, r3
 8005600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005602:	0099      	lsls	r1, r3, #2
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	440b      	add	r3, r1
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4413      	add	r3, r2
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005614:	ea80 0402 	eor.w	r4, r0, r2
 8005618:	ea81 0503 	eor.w	r5, r1, r3
 800561c:	e9c7 4508 	strd	r4, r5, [r7, #32]
            for (int i = 0; i < MASKING_N; i++) {
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	3301      	adds	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	2b03      	cmp	r3, #3
 800562a:	dde1      	ble.n	80055f0 <debug_print_masked_state+0xa8>
            }
            uint32_t r_hi = (uint32_t)(val >> 32);
 800562c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	000a      	movs	r2, r1
 800563a:	2300      	movs	r3, #0
 800563c:	4613      	mov	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
            uint32_t r_lo = (uint32_t)(val & 0xFFFFFFFF);
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	617b      	str	r3, [r7, #20]
            printf(" | R=0x%08X%08X\n", r_hi, r_lo);
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	69b9      	ldr	r1, [r7, #24]
 8005648:	480d      	ldr	r0, [pc, #52]	@ (8005680 <debug_print_masked_state+0x138>)
 800564a:	f009 f84d 	bl	800e6e8 <iprintf>
        for (int x = 0; x < 5; x++) {
 800564e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005650:	3301      	adds	r3, #1
 8005652:	633b      	str	r3, [r7, #48]	@ 0x30
 8005654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005656:	2b04      	cmp	r3, #4
 8005658:	dd83      	ble.n	8005562 <debug_print_masked_state+0x1a>
    for (int y = 0; y < 5; y++) {
 800565a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565c:	3301      	adds	r3, #1
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005662:	2b04      	cmp	r3, #4
 8005664:	f77f af7a 	ble.w	800555c <debug_print_masked_state+0x14>
        }
    }
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	3738      	adds	r7, #56	@ 0x38
 800566e:	46bd      	mov	sp, r7
 8005670:	bdb0      	pop	{r4, r5, r7, pc}
 8005672:	bf00      	nop
 8005674:	0800f700 	.word	0x0800f700
 8005678:	0800f730 	.word	0x0800f730
 800567c:	0800f740 	.word	0x0800f740
 8005680:	0800f754 	.word	0x0800f754

08005684 <masked_keccak_f1600>:
    0x000000000000800aULL, 0x800000008000000aULL,
    0x8000000080008081ULL, 0x8000000000008080ULL,
    0x0000000080000001ULL, 0x8000000080008008ULL
};

void masked_keccak_f1600(masked_uint64_t state[5][5]) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b08e      	sub	sp, #56	@ 0x38
 8005688:	af02      	add	r7, sp, #8
 800568a:	6078      	str	r0, [r7, #4]
	debug_print_masked_state(state);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff ff5b 	bl	8005548 <debug_print_masked_state>
	printf("== Before masked_keccak_f1600 ==\n");
 8005692:	484e      	ldr	r0, [pc, #312]	@ (80057cc <masked_keccak_f1600+0x148>)
 8005694:	f009 f898 	bl	800e7c8 <puts>
	for (int x = 0; x < 5; x++) {
 8005698:	2300      	movs	r3, #0
 800569a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800569c:	e024      	b.n	80056e8 <masked_keccak_f1600+0x64>
	    for (int y = 0; y < 5; y++) {
 800569e:	2300      	movs	r3, #0
 80056a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056a2:	e01b      	b.n	80056dc <masked_keccak_f1600+0x58>
	        uint64_t recombined = masked_recombine(&state[x][y]);
 80056a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056a6:	4613      	mov	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	015b      	lsls	r3, r3, #5
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	441a      	add	r2, r3
 80056b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b6:	015b      	lsls	r3, r3, #5
 80056b8:	4413      	add	r3, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff ff1b 	bl	80054f6 <masked_recombine>
 80056c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
	        printf("State[%d][%d]: %016llX\n", x, y, recombined);
 80056c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c8:	e9cd 2300 	strd	r2, r3, [sp]
 80056cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056d0:	483f      	ldr	r0, [pc, #252]	@ (80057d0 <masked_keccak_f1600+0x14c>)
 80056d2:	f009 f809 	bl	800e6e8 <iprintf>
	    for (int y = 0; y < 5; y++) {
 80056d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d8:	3301      	adds	r3, #1
 80056da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	2b04      	cmp	r3, #4
 80056e0:	dde0      	ble.n	80056a4 <masked_keccak_f1600+0x20>
	for (int x = 0; x < 5; x++) {
 80056e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e4:	3301      	adds	r3, #1
 80056e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	ddd7      	ble.n	800569e <masked_keccak_f1600+0x1a>
	    }
	}


    for (int i = 0; i < 24; i++) {
 80056ee:	2300      	movs	r3, #0
 80056f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80056f2:	e00b      	b.n	800570c <masked_keccak_f1600+0x88>
        masked_keccak_round(state, keccak_round_constants[i]);
 80056f4:	4a37      	ldr	r2, [pc, #220]	@ (80057d4 <masked_keccak_f1600+0x150>)
 80056f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f8:	00db      	lsls	r3, r3, #3
 80056fa:	4413      	add	r3, r2
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fadb 	bl	8004cbc <masked_keccak_round>
    for (int i = 0; i < 24; i++) {
 8005706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005708:	3301      	adds	r3, #1
 800570a:	627b      	str	r3, [r7, #36]	@ 0x24
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	2b17      	cmp	r3, #23
 8005710:	ddf0      	ble.n	80056f4 <masked_keccak_f1600+0x70>
    }
    debug_print_masked_state(state);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ff18 	bl	8005548 <debug_print_masked_state>
    printf("== After masked_keccak_f1600 ==\n");
 8005718:	482f      	ldr	r0, [pc, #188]	@ (80057d8 <masked_keccak_f1600+0x154>)
 800571a:	f009 f855 	bl	800e7c8 <puts>
    for (int x = 0; x < 5; x++) {
 800571e:	2300      	movs	r3, #0
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	e04b      	b.n	80057bc <masked_keccak_f1600+0x138>
        for (int y = 0; y < 5; y++) {
 8005724:	2300      	movs	r3, #0
 8005726:	61fb      	str	r3, [r7, #28]
 8005728:	e042      	b.n	80057b0 <masked_keccak_f1600+0x12c>
            printf("State[%d][%d]:", x, y);
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	6a39      	ldr	r1, [r7, #32]
 800572e:	482b      	ldr	r0, [pc, #172]	@ (80057dc <masked_keccak_f1600+0x158>)
 8005730:	f008 ffda 	bl	800e6e8 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 8005734:	2300      	movs	r3, #0
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	e031      	b.n	800579e <masked_keccak_f1600+0x11a>
                uint32_t hi = (uint32_t)(state[x][y].share[i] >> 32);
 800573a:	6a3a      	ldr	r2, [r7, #32]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	015b      	lsls	r3, r3, #5
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	441a      	add	r2, r3
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	0099      	lsls	r1, r3, #2
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	440b      	add	r3, r1
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	e9d3 0100 	ldrd	r0, r1, [r3]
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	f04f 0300 	mov.w	r3, #0
 8005762:	000a      	movs	r2, r1
 8005764:	2300      	movs	r3, #0
 8005766:	4613      	mov	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
                uint32_t lo = (uint32_t)(state[x][y].share[i] & 0xFFFFFFFF);
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	4613      	mov	r3, r2
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	015b      	lsls	r3, r3, #5
 8005774:	461a      	mov	r2, r3
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	441a      	add	r2, r3
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	0099      	lsls	r1, r3, #2
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	440b      	add	r3, r1
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	4613      	mov	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
                printf(" %08lX%08lX", hi, lo);
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	6979      	ldr	r1, [r7, #20]
 8005792:	4813      	ldr	r0, [pc, #76]	@ (80057e0 <masked_keccak_f1600+0x15c>)
 8005794:	f008 ffa8 	bl	800e6e8 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	3301      	adds	r3, #1
 800579c:	61bb      	str	r3, [r7, #24]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	ddca      	ble.n	800573a <masked_keccak_f1600+0xb6>
            }
            printf("\n");
 80057a4:	200a      	movs	r0, #10
 80057a6:	f008 ffb1 	bl	800e70c <putchar>
        for (int y = 0; y < 5; y++) {
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3301      	adds	r3, #1
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	ddb9      	ble.n	800572a <masked_keccak_f1600+0xa6>
    for (int x = 0; x < 5; x++) {
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	3301      	adds	r3, #1
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	2b04      	cmp	r3, #4
 80057c0:	ddb0      	ble.n	8005724 <masked_keccak_f1600+0xa0>
        }
    }
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	3730      	adds	r7, #48	@ 0x30
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	0800f768 	.word	0x0800f768
 80057d0:	0800f78c 	.word	0x0800f78c
 80057d4:	0800f8f0 	.word	0x0800f8f0
 80057d8:	0800f7a4 	.word	0x0800f7a4
 80057dc:	0800f7c4 	.word	0x0800f7c4
 80057e0:	0800f7d4 	.word	0x0800f7d4

080057e4 <masked_sha3_512>:
#include "masked_squeeze.h"

#define SHA3_512_RATE 72             // SHA3-512 rate in bytes
#define SHA3_512_OUTPUT_SIZE 64      // SHA3-512 output in bytes

void masked_sha3_512(uint8_t *output, const uint8_t *input, size_t input_len) {
 80057e4:	b580      	push	{r7, lr}
 80057e6:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80057f0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80057f4:	6018      	str	r0, [r3, #0]
 80057f6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80057fa:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80057fe:	6019      	str	r1, [r3, #0]
 8005800:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8005804:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8005808:	601a      	str	r2, [r3, #0]
    masked_uint64_t state[5][5];

    // === Zero the state ===
    for (int x = 0; x < 5; x++) {
 800580a:	2300      	movs	r3, #0
 800580c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8005810:	e036      	b.n	8005880 <masked_sha3_512+0x9c>
        for (int y = 0; y < 5; y++) {
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8005818:	e029      	b.n	800586e <masked_sha3_512+0x8a>
            for (int i = 0; i < MASKING_N; i++) {
 800581a:	2300      	movs	r3, #0
 800581c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8005820:	e01c      	b.n	800585c <masked_sha3_512+0x78>
                state[x][y].share[i] = 0;
 8005822:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8005826:	f5a3 714c 	sub.w	r1, r3, #816	@ 0x330
 800582a:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 800582e:	4613      	mov	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8005838:	4413      	add	r3, r2
 800583a:	009a      	lsls	r2, r3, #2
 800583c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8005840:	4413      	add	r3, r2
 8005842:	00db      	lsls	r3, r3, #3
 8005844:	4419      	add	r1, r3
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8005852:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8005856:	3301      	adds	r3, #1
 8005858:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800585c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8005860:	2b03      	cmp	r3, #3
 8005862:	ddde      	ble.n	8005822 <masked_sha3_512+0x3e>
        for (int y = 0; y < 5; y++) {
 8005864:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8005868:	3301      	adds	r3, #1
 800586a:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 800586e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8005872:	2b04      	cmp	r3, #4
 8005874:	ddd1      	ble.n	800581a <masked_sha3_512+0x36>
    for (int x = 0; x < 5; x++) {
 8005876:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 800587a:	3301      	adds	r3, #1
 800587c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8005880:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8005884:	2b04      	cmp	r3, #4
 8005886:	ddc4      	ble.n	8005812 <masked_sha3_512+0x2e>
            }
        }
    }

    // === Absorb input using masked absorb ===
    printf("Starting masked_absorb\n");
 8005888:	4811      	ldr	r0, [pc, #68]	@ (80058d0 <masked_sha3_512+0xec>)
 800588a:	f008 ff9d 	bl	800e7c8 <puts>
    masked_absorb(state, input, input_len);
 800588e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8005892:	f5a3 724f 	sub.w	r2, r3, #828	@ 0x33c
 8005896:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800589a:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 800589e:	f107 0010 	add.w	r0, r7, #16
 80058a2:	6812      	ldr	r2, [r2, #0]
 80058a4:	6819      	ldr	r1, [r3, #0]
 80058a6:	f7ff fb09 	bl	8004ebc <masked_absorb>
    printf("Finished absorb\n");
 80058aa:	480a      	ldr	r0, [pc, #40]	@ (80058d4 <masked_sha3_512+0xf0>)
 80058ac:	f008 ff8c 	bl	800e7c8 <puts>

    // === Squeeze output using masked squeeze ===
    masked_squeeze(output, SHA3_512_OUTPUT_SIZE, state);
 80058b0:	f107 0210 	add.w	r2, r7, #16
 80058b4:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80058b8:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80058bc:	2140      	movs	r1, #64	@ 0x40
 80058be:	6818      	ldr	r0, [r3, #0]
 80058c0:	f000 f80a 	bl	80058d8 <masked_squeeze>
}
 80058c4:	bf00      	nop
 80058c6:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	0800f7e0 	.word	0x0800f7e0
 80058d4:	0800f7f8 	.word	0x0800f7f8

080058d8 <masked_squeeze>:
#include "masked_keccak_f1600.h"

#include <stddef.h>

#define KECCAK_RATE 168  // SHAKE128 rate in bytes
void masked_squeeze(uint8_t *output, size_t output_len, masked_uint64_t state[5][5]) {
 80058d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058dc:	b08d      	sub	sp, #52	@ 0x34
 80058de:	af00      	add	r7, sp, #0
 80058e0:	60f8      	str	r0, [r7, #12]
 80058e2:	60b9      	str	r1, [r7, #8]
 80058e4:	607a      	str	r2, [r7, #4]
    size_t offset = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (offset < output_len) {
 80058ea:	e075      	b.n	80059d8 <masked_squeeze+0x100>
        // Squeeze up to KECCAK_RATE bytes per iteration
        for (int i = 0; i < KECCAK_RATE && offset < output_len; i++) {
 80058ec:	2300      	movs	r3, #0
 80058ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058f0:	e064      	b.n	80059bc <masked_squeeze+0xe4>
            size_t x = (i / 8) % 5;
 80058f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	da00      	bge.n	80058fa <masked_squeeze+0x22>
 80058f8:	3307      	adds	r3, #7
 80058fa:	10db      	asrs	r3, r3, #3
 80058fc:	4619      	mov	r1, r3
 80058fe:	4b3b      	ldr	r3, [pc, #236]	@ (80059ec <masked_squeeze+0x114>)
 8005900:	fb83 2301 	smull	r2, r3, r3, r1
 8005904:	105a      	asrs	r2, r3, #1
 8005906:	17cb      	asrs	r3, r1, #31
 8005908:	1ad2      	subs	r2, r2, r3
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	1aca      	subs	r2, r1, r3
 8005912:	61ba      	str	r2, [r7, #24]
            size_t y = (i / 8) / 5;
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	4a35      	ldr	r2, [pc, #212]	@ (80059ec <masked_squeeze+0x114>)
 8005918:	fb82 1203 	smull	r1, r2, r2, r3
 800591c:	1112      	asrs	r2, r2, #4
 800591e:	17db      	asrs	r3, r3, #31
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	617b      	str	r3, [r7, #20]
            size_t byte_pos = i % 8;
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	425a      	negs	r2, r3
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	f002 0207 	and.w	r2, r2, #7
 8005930:	bf58      	it	pl
 8005932:	4253      	negpl	r3, r2
 8005934:	613b      	str	r3, [r7, #16]

            // Recombine shares to get the true output byte
            uint64_t lane = 0;
 8005936:	f04f 0200 	mov.w	r2, #0
 800593a:	f04f 0300 	mov.w	r3, #0
 800593e:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 8005942:	2300      	movs	r3, #0
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	e01a      	b.n	800597e <masked_squeeze+0xa6>
                lane ^= state[x][y].share[j];
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	015b      	lsls	r3, r3, #5
 8005952:	461a      	mov	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	441a      	add	r2, r3
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	0099      	lsls	r1, r3, #2
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	440b      	add	r3, r1
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	4413      	add	r3, r2
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800596c:	ea80 0802 	eor.w	r8, r0, r2
 8005970:	ea81 0903 	eor.w	r9, r1, r3
 8005974:	e9c7 8908 	strd	r8, r9, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	3301      	adds	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	2b03      	cmp	r3, #3
 8005982:	dde1      	ble.n	8005948 <masked_squeeze+0x70>
            }

            output[offset++] = (lane >> (8 * byte_pos)) & 0xFF;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	00d9      	lsls	r1, r3, #3
 8005988:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800598c:	f1c1 0620 	rsb	r6, r1, #32
 8005990:	f1a1 0020 	sub.w	r0, r1, #32
 8005994:	fa22 f401 	lsr.w	r4, r2, r1
 8005998:	fa03 f606 	lsl.w	r6, r3, r6
 800599c:	4334      	orrs	r4, r6
 800599e:	fa23 f000 	lsr.w	r0, r3, r0
 80059a2:	4304      	orrs	r4, r0
 80059a4:	fa23 f501 	lsr.w	r5, r3, r1
 80059a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ae:	68fa      	ldr	r2, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	b2e2      	uxtb	r2, r4
 80059b4:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < KECCAK_RATE && offset < output_len; i++) {
 80059b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b8:	3301      	adds	r3, #1
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	2ba7      	cmp	r3, #167	@ 0xa7
 80059c0:	dc03      	bgt.n	80059ca <masked_squeeze+0xf2>
 80059c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d393      	bcc.n	80058f2 <masked_squeeze+0x1a>
        }

        // If we haven’t yet squeezed enough, permute again
        if (offset < output_len) {
 80059ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d202      	bcs.n	80059d8 <masked_squeeze+0x100>
            masked_keccak_f1600(state);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7ff fe56 	bl	8005684 <masked_keccak_f1600>
    while (offset < output_len) {
 80059d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d385      	bcc.n	80058ec <masked_squeeze+0x14>
        }
    }
}
 80059e0:	bf00      	nop
 80059e2:	bf00      	nop
 80059e4:	3734      	adds	r7, #52	@ 0x34
 80059e6:	46bd      	mov	sp, r7
 80059e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059ec:	66666667 	.word	0x66666667

080059f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	4b10      	ldr	r3, [pc, #64]	@ (8005a3c <HAL_MspInit+0x4c>)
 80059fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fe:	4a0f      	ldr	r2, [pc, #60]	@ (8005a3c <HAL_MspInit+0x4c>)
 8005a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a06:	4b0d      	ldr	r3, [pc, #52]	@ (8005a3c <HAL_MspInit+0x4c>)
 8005a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a0e:	607b      	str	r3, [r7, #4]
 8005a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a12:	2300      	movs	r3, #0
 8005a14:	603b      	str	r3, [r7, #0]
 8005a16:	4b09      	ldr	r3, [pc, #36]	@ (8005a3c <HAL_MspInit+0x4c>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	4a08      	ldr	r2, [pc, #32]	@ (8005a3c <HAL_MspInit+0x4c>)
 8005a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a22:	4b06      	ldr	r3, [pc, #24]	@ (8005a3c <HAL_MspInit+0x4c>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a2a:	603b      	str	r3, [r7, #0]
 8005a2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005a2e:	2007      	movs	r0, #7
 8005a30:	f000 fbe4 	bl	80061fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a34:	bf00      	nop
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	40023800 	.word	0x40023800

08005a40 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08a      	sub	sp, #40	@ 0x28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a48:	f107 0314 	add.w	r3, r7, #20
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	605a      	str	r2, [r3, #4]
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	60da      	str	r2, [r3, #12]
 8005a56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a19      	ldr	r2, [pc, #100]	@ (8005ac4 <HAL_I2C_MspInit+0x84>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d12c      	bne.n	8005abc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	4b18      	ldr	r3, [pc, #96]	@ (8005ac8 <HAL_I2C_MspInit+0x88>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6a:	4a17      	ldr	r2, [pc, #92]	@ (8005ac8 <HAL_I2C_MspInit+0x88>)
 8005a6c:	f043 0302 	orr.w	r3, r3, #2
 8005a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a72:	4b15      	ldr	r3, [pc, #84]	@ (8005ac8 <HAL_I2C_MspInit+0x88>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8005a7e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8005a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005a84:	2312      	movs	r3, #18
 8005a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005a90:	2304      	movs	r3, #4
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a94:	f107 0314 	add.w	r3, r7, #20
 8005a98:	4619      	mov	r1, r3
 8005a9a:	480c      	ldr	r0, [pc, #48]	@ (8005acc <HAL_I2C_MspInit+0x8c>)
 8005a9c:	f000 fbf0 	bl	8006280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	4b08      	ldr	r3, [pc, #32]	@ (8005ac8 <HAL_I2C_MspInit+0x88>)
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	4a07      	ldr	r2, [pc, #28]	@ (8005ac8 <HAL_I2C_MspInit+0x88>)
 8005aaa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ab0:	4b05      	ldr	r3, [pc, #20]	@ (8005ac8 <HAL_I2C_MspInit+0x88>)
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005abc:	bf00      	nop
 8005abe:	3728      	adds	r7, #40	@ 0x28
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40005400 	.word	0x40005400
 8005ac8:	40023800 	.word	0x40023800
 8005acc:	40020400 	.word	0x40020400

08005ad0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08e      	sub	sp, #56	@ 0x38
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	60da      	str	r2, [r3, #12]
 8005ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ae8:	f107 0314 	add.w	r3, r7, #20
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	609a      	str	r2, [r3, #8]
 8005af4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a31      	ldr	r2, [pc, #196]	@ (8005bc0 <HAL_I2S_MspInit+0xf0>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d15a      	bne.n	8005bb6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8005b00:	2301      	movs	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8005b04:	23c0      	movs	r3, #192	@ 0xc0
 8005b06:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8005b08:	2302      	movs	r3, #2
 8005b0a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	4618      	mov	r0, r3
 8005b12:	f004 f91b 	bl	8009d4c <HAL_RCCEx_PeriphCLKConfig>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8005b1c:	f7fe fcf4 	bl	8004508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005b20:	2300      	movs	r3, #0
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	4b27      	ldr	r3, [pc, #156]	@ (8005bc4 <HAL_I2S_MspInit+0xf4>)
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	4a26      	ldr	r2, [pc, #152]	@ (8005bc4 <HAL_I2S_MspInit+0xf4>)
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b30:	4b24      	ldr	r3, [pc, #144]	@ (8005bc4 <HAL_I2S_MspInit+0xf4>)
 8005b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]
 8005b40:	4b20      	ldr	r3, [pc, #128]	@ (8005bc4 <HAL_I2S_MspInit+0xf4>)
 8005b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b44:	4a1f      	ldr	r2, [pc, #124]	@ (8005bc4 <HAL_I2S_MspInit+0xf4>)
 8005b46:	f043 0301 	orr.w	r3, r3, #1
 8005b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc4 <HAL_I2S_MspInit+0xf4>)
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]
 8005b5c:	4b19      	ldr	r3, [pc, #100]	@ (8005bc4 <HAL_I2S_MspInit+0xf4>)
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b60:	4a18      	ldr	r2, [pc, #96]	@ (8005bc4 <HAL_I2S_MspInit+0xf4>)
 8005b62:	f043 0304 	orr.w	r3, r3, #4
 8005b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b68:	4b16      	ldr	r3, [pc, #88]	@ (8005bc4 <HAL_I2S_MspInit+0xf4>)
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	60bb      	str	r3, [r7, #8]
 8005b72:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8005b74:	2310      	movs	r3, #16
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b80:	2300      	movs	r3, #0
 8005b82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005b84:	2306      	movs	r3, #6
 8005b86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8005b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	480e      	ldr	r0, [pc, #56]	@ (8005bc8 <HAL_I2S_MspInit+0xf8>)
 8005b90:	f000 fb76 	bl	8006280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8005b94:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005ba6:	2306      	movs	r3, #6
 8005ba8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4806      	ldr	r0, [pc, #24]	@ (8005bcc <HAL_I2S_MspInit+0xfc>)
 8005bb2:	f000 fb65 	bl	8006280 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8005bb6:	bf00      	nop
 8005bb8:	3738      	adds	r7, #56	@ 0x38
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	40003c00 	.word	0x40003c00
 8005bc4:	40023800 	.word	0x40023800
 8005bc8:	40020000 	.word	0x40020000
 8005bcc:	40020800 	.word	0x40020800

08005bd0 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8005c0c <HAL_RNG_MspInit+0x3c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d10d      	bne.n	8005bfe <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c10 <HAL_RNG_MspInit+0x40>)
 8005be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bea:	4a09      	ldr	r2, [pc, #36]	@ (8005c10 <HAL_RNG_MspInit+0x40>)
 8005bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bf0:	6353      	str	r3, [r2, #52]	@ 0x34
 8005bf2:	4b07      	ldr	r3, [pc, #28]	@ (8005c10 <HAL_RNG_MspInit+0x40>)
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	50060800 	.word	0x50060800
 8005c10:	40023800 	.word	0x40023800

08005c14 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	@ 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c1c:	f107 0314 	add.w	r3, r7, #20
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	605a      	str	r2, [r3, #4]
 8005c26:	609a      	str	r2, [r3, #8]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a19      	ldr	r2, [pc, #100]	@ (8005c98 <HAL_SPI_MspInit+0x84>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d12b      	bne.n	8005c8e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005c36:	2300      	movs	r3, #0
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	4b18      	ldr	r3, [pc, #96]	@ (8005c9c <HAL_SPI_MspInit+0x88>)
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3e:	4a17      	ldr	r2, [pc, #92]	@ (8005c9c <HAL_SPI_MspInit+0x88>)
 8005c40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c46:	4b15      	ldr	r3, [pc, #84]	@ (8005c9c <HAL_SPI_MspInit+0x88>)
 8005c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	4b11      	ldr	r3, [pc, #68]	@ (8005c9c <HAL_SPI_MspInit+0x88>)
 8005c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5a:	4a10      	ldr	r2, [pc, #64]	@ (8005c9c <HAL_SPI_MspInit+0x88>)
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c62:	4b0e      	ldr	r3, [pc, #56]	@ (8005c9c <HAL_SPI_MspInit+0x88>)
 8005c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	60fb      	str	r3, [r7, #12]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005c6e:	23e0      	movs	r3, #224	@ 0xe0
 8005c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c72:	2302      	movs	r3, #2
 8005c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005c7e:	2305      	movs	r3, #5
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c82:	f107 0314 	add.w	r3, r7, #20
 8005c86:	4619      	mov	r1, r3
 8005c88:	4805      	ldr	r0, [pc, #20]	@ (8005ca0 <HAL_SPI_MspInit+0x8c>)
 8005c8a:	f000 faf9 	bl	8006280 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8005c8e:	bf00      	nop
 8005c90:	3728      	adds	r7, #40	@ 0x28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40013000 	.word	0x40013000
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	40020000 	.word	0x40020000

08005ca4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	@ 0x28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cac:	f107 0314 	add.w	r3, r7, #20
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	60da      	str	r2, [r3, #12]
 8005cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a19      	ldr	r2, [pc, #100]	@ (8005d28 <HAL_UART_MspInit+0x84>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d12b      	bne.n	8005d1e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	4b18      	ldr	r3, [pc, #96]	@ (8005d2c <HAL_UART_MspInit+0x88>)
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cce:	4a17      	ldr	r2, [pc, #92]	@ (8005d2c <HAL_UART_MspInit+0x88>)
 8005cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cd6:	4b15      	ldr	r3, [pc, #84]	@ (8005d2c <HAL_UART_MspInit+0x88>)
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	4b11      	ldr	r3, [pc, #68]	@ (8005d2c <HAL_UART_MspInit+0x88>)
 8005ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cea:	4a10      	ldr	r2, [pc, #64]	@ (8005d2c <HAL_UART_MspInit+0x88>)
 8005cec:	f043 0301 	orr.w	r3, r3, #1
 8005cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8005d2c <HAL_UART_MspInit+0x88>)
 8005cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005cfe:	230c      	movs	r3, #12
 8005d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d02:	2302      	movs	r3, #2
 8005d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d0e:	2307      	movs	r3, #7
 8005d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d12:	f107 0314 	add.w	r3, r7, #20
 8005d16:	4619      	mov	r1, r3
 8005d18:	4805      	ldr	r0, [pc, #20]	@ (8005d30 <HAL_UART_MspInit+0x8c>)
 8005d1a:	f000 fab1 	bl	8006280 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8005d1e:	bf00      	nop
 8005d20:	3728      	adds	r7, #40	@ 0x28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	40004400 	.word	0x40004400
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	40020000 	.word	0x40020000

08005d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005d38:	bf00      	nop
 8005d3a:	e7fd      	b.n	8005d38 <NMI_Handler+0x4>

08005d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <HardFault_Handler+0x4>

08005d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d44:	b480      	push	{r7}
 8005d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d48:	bf00      	nop
 8005d4a:	e7fd      	b.n	8005d48 <MemManage_Handler+0x4>

08005d4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <BusFault_Handler+0x4>

08005d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d54:	b480      	push	{r7}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d58:	bf00      	nop
 8005d5a:	e7fd      	b.n	8005d58 <UsageFault_Handler+0x4>

08005d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d60:	bf00      	nop
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d6e:	bf00      	nop
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d7c:	bf00      	nop
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d8a:	f000 f923 	bl	8005fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d8e:	bf00      	nop
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8005d98:	4802      	ldr	r0, [pc, #8]	@ (8005da4 <OTG_FS_IRQHandler+0x10>)
 8005d9a:	f000 ff07 	bl	8006bac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	200005d4 	.word	0x200005d4

08005da8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b086      	sub	sp, #24
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005db4:	2300      	movs	r3, #0
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	e00a      	b.n	8005dd0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005dba:	f3af 8000 	nop.w
 8005dbe:	4601      	mov	r1, r0
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	60ba      	str	r2, [r7, #8]
 8005dc6:	b2ca      	uxtb	r2, r1
 8005dc8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	dbf0      	blt.n	8005dba <_read+0x12>
  }

  return len;
 8005dd8:	687b      	ldr	r3, [r7, #4]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
 8005e02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005e0a:	605a      	str	r2, [r3, #4]
  return 0;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <_isatty>:

int _isatty(int file)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b083      	sub	sp, #12
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005e22:	2301      	movs	r3, #1
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
	...

08005e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e54:	4a14      	ldr	r2, [pc, #80]	@ (8005ea8 <_sbrk+0x5c>)
 8005e56:	4b15      	ldr	r3, [pc, #84]	@ (8005eac <_sbrk+0x60>)
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e60:	4b13      	ldr	r3, [pc, #76]	@ (8005eb0 <_sbrk+0x64>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d102      	bne.n	8005e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e68:	4b11      	ldr	r3, [pc, #68]	@ (8005eb0 <_sbrk+0x64>)
 8005e6a:	4a12      	ldr	r2, [pc, #72]	@ (8005eb4 <_sbrk+0x68>)
 8005e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e6e:	4b10      	ldr	r3, [pc, #64]	@ (8005eb0 <_sbrk+0x64>)
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d207      	bcs.n	8005e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e7c:	f008 fea6 	bl	800ebcc <__errno>
 8005e80:	4603      	mov	r3, r0
 8005e82:	220c      	movs	r2, #12
 8005e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e86:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8a:	e009      	b.n	8005ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e8c:	4b08      	ldr	r3, [pc, #32]	@ (8005eb0 <_sbrk+0x64>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e92:	4b07      	ldr	r3, [pc, #28]	@ (8005eb0 <_sbrk+0x64>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	4a05      	ldr	r2, [pc, #20]	@ (8005eb0 <_sbrk+0x64>)
 8005e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20020000 	.word	0x20020000
 8005eac:	00000400 	.word	0x00000400
 8005eb0:	200001f0 	.word	0x200001f0
 8005eb4:	20000b00 	.word	0x20000b00

08005eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ebc:	4b06      	ldr	r3, [pc, #24]	@ (8005ed8 <SystemInit+0x20>)
 8005ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec2:	4a05      	ldr	r2, [pc, #20]	@ (8005ed8 <SystemInit+0x20>)
 8005ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ecc:	bf00      	nop
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	e000ed00 	.word	0xe000ed00

08005edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005f14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8005ee0:	f7ff ffea 	bl	8005eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ee4:	480c      	ldr	r0, [pc, #48]	@ (8005f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005ee6:	490d      	ldr	r1, [pc, #52]	@ (8005f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8005f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005eec:	e002      	b.n	8005ef4 <LoopCopyDataInit>

08005eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ef2:	3304      	adds	r3, #4

08005ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ef8:	d3f9      	bcc.n	8005eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005efa:	4a0a      	ldr	r2, [pc, #40]	@ (8005f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005efc:	4c0a      	ldr	r4, [pc, #40]	@ (8005f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f00:	e001      	b.n	8005f06 <LoopFillZerobss>

08005f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f04:	3204      	adds	r2, #4

08005f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f08:	d3fb      	bcc.n	8005f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f0a:	f008 fe65 	bl	800ebd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f0e:	f7fe f805 	bl	8003f1c <main>
  bx  lr    
 8005f12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f1c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8005f20:	0800fa0c 	.word	0x0800fa0c
  ldr r2, =_sbss
 8005f24:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8005f28:	20000b00 	.word	0x20000b00

08005f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f2c:	e7fe      	b.n	8005f2c <ADC_IRQHandler>
	...

08005f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f34:	4b0e      	ldr	r3, [pc, #56]	@ (8005f70 <HAL_Init+0x40>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a0d      	ldr	r2, [pc, #52]	@ (8005f70 <HAL_Init+0x40>)
 8005f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005f40:	4b0b      	ldr	r3, [pc, #44]	@ (8005f70 <HAL_Init+0x40>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a0a      	ldr	r2, [pc, #40]	@ (8005f70 <HAL_Init+0x40>)
 8005f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f4c:	4b08      	ldr	r3, [pc, #32]	@ (8005f70 <HAL_Init+0x40>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a07      	ldr	r2, [pc, #28]	@ (8005f70 <HAL_Init+0x40>)
 8005f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005f58:	2003      	movs	r0, #3
 8005f5a:	f000 f94f 	bl	80061fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f000 f808 	bl	8005f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005f64:	f7ff fd44 	bl	80059f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	40023c00 	.word	0x40023c00

08005f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005f7c:	4b12      	ldr	r3, [pc, #72]	@ (8005fc8 <HAL_InitTick+0x54>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b12      	ldr	r3, [pc, #72]	@ (8005fcc <HAL_InitTick+0x58>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	4619      	mov	r1, r3
 8005f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 f967 	bl	8006266 <HAL_SYSTICK_Config>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e00e      	b.n	8005fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b0f      	cmp	r3, #15
 8005fa6:	d80a      	bhi.n	8005fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005fa8:	2200      	movs	r2, #0
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	f000 f92f 	bl	8006212 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005fb4:	4a06      	ldr	r2, [pc, #24]	@ (8005fd0 <HAL_InitTick+0x5c>)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e000      	b.n	8005fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3708      	adds	r7, #8
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000000 	.word	0x20000000
 8005fcc:	20000008 	.word	0x20000008
 8005fd0:	20000004 	.word	0x20000004

08005fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fd8:	4b06      	ldr	r3, [pc, #24]	@ (8005ff4 <HAL_IncTick+0x20>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	4b06      	ldr	r3, [pc, #24]	@ (8005ff8 <HAL_IncTick+0x24>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	4a04      	ldr	r2, [pc, #16]	@ (8005ff8 <HAL_IncTick+0x24>)
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20000008 	.word	0x20000008
 8005ff8:	200001f4 	.word	0x200001f4

08005ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8006000:	4b03      	ldr	r3, [pc, #12]	@ (8006010 <HAL_GetTick+0x14>)
 8006002:	681b      	ldr	r3, [r3, #0]
}
 8006004:	4618      	mov	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	200001f4 	.word	0x200001f4

08006014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800601c:	f7ff ffee 	bl	8005ffc <HAL_GetTick>
 8006020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d005      	beq.n	800603a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800602e:	4b0a      	ldr	r3, [pc, #40]	@ (8006058 <HAL_Delay+0x44>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	461a      	mov	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800603a:	bf00      	nop
 800603c:	f7ff ffde 	bl	8005ffc <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	429a      	cmp	r2, r3
 800604a:	d8f7      	bhi.n	800603c <HAL_Delay+0x28>
  {
  }
}
 800604c:	bf00      	nop
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000008 	.word	0x20000008

0800605c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800606c:	4b0c      	ldr	r3, [pc, #48]	@ (80060a0 <__NVIC_SetPriorityGrouping+0x44>)
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006078:	4013      	ands	r3, r2
 800607a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006084:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800608c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800608e:	4a04      	ldr	r2, [pc, #16]	@ (80060a0 <__NVIC_SetPriorityGrouping+0x44>)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	60d3      	str	r3, [r2, #12]
}
 8006094:	bf00      	nop
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr
 80060a0:	e000ed00 	.word	0xe000ed00

080060a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060a8:	4b04      	ldr	r3, [pc, #16]	@ (80060bc <__NVIC_GetPriorityGrouping+0x18>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	0a1b      	lsrs	r3, r3, #8
 80060ae:	f003 0307 	and.w	r3, r3, #7
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	e000ed00 	.word	0xe000ed00

080060c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	db0b      	blt.n	80060ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060d2:	79fb      	ldrb	r3, [r7, #7]
 80060d4:	f003 021f 	and.w	r2, r3, #31
 80060d8:	4907      	ldr	r1, [pc, #28]	@ (80060f8 <__NVIC_EnableIRQ+0x38>)
 80060da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	2001      	movs	r0, #1
 80060e2:	fa00 f202 	lsl.w	r2, r0, r2
 80060e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80060ea:	bf00      	nop
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	e000e100 	.word	0xe000e100

080060fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	4603      	mov	r3, r0
 8006104:	6039      	str	r1, [r7, #0]
 8006106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610c:	2b00      	cmp	r3, #0
 800610e:	db0a      	blt.n	8006126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	490c      	ldr	r1, [pc, #48]	@ (8006148 <__NVIC_SetPriority+0x4c>)
 8006116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800611a:	0112      	lsls	r2, r2, #4
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	440b      	add	r3, r1
 8006120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006124:	e00a      	b.n	800613c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	b2da      	uxtb	r2, r3
 800612a:	4908      	ldr	r1, [pc, #32]	@ (800614c <__NVIC_SetPriority+0x50>)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	3b04      	subs	r3, #4
 8006134:	0112      	lsls	r2, r2, #4
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	440b      	add	r3, r1
 800613a:	761a      	strb	r2, [r3, #24]
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	e000e100 	.word	0xe000e100
 800614c:	e000ed00 	.word	0xe000ed00

08006150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006150:	b480      	push	{r7}
 8006152:	b089      	sub	sp, #36	@ 0x24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f1c3 0307 	rsb	r3, r3, #7
 800616a:	2b04      	cmp	r3, #4
 800616c:	bf28      	it	cs
 800616e:	2304      	movcs	r3, #4
 8006170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	3304      	adds	r3, #4
 8006176:	2b06      	cmp	r3, #6
 8006178:	d902      	bls.n	8006180 <NVIC_EncodePriority+0x30>
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	3b03      	subs	r3, #3
 800617e:	e000      	b.n	8006182 <NVIC_EncodePriority+0x32>
 8006180:	2300      	movs	r3, #0
 8006182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006184:	f04f 32ff 	mov.w	r2, #4294967295
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	43da      	mvns	r2, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	401a      	ands	r2, r3
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006198:	f04f 31ff 	mov.w	r1, #4294967295
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	fa01 f303 	lsl.w	r3, r1, r3
 80061a2:	43d9      	mvns	r1, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061a8:	4313      	orrs	r3, r2
         );
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3724      	adds	r7, #36	@ 0x24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
	...

080061b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061c8:	d301      	bcc.n	80061ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061ca:	2301      	movs	r3, #1
 80061cc:	e00f      	b.n	80061ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061ce:	4a0a      	ldr	r2, [pc, #40]	@ (80061f8 <SysTick_Config+0x40>)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061d6:	210f      	movs	r1, #15
 80061d8:	f04f 30ff 	mov.w	r0, #4294967295
 80061dc:	f7ff ff8e 	bl	80060fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061e0:	4b05      	ldr	r3, [pc, #20]	@ (80061f8 <SysTick_Config+0x40>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061e6:	4b04      	ldr	r3, [pc, #16]	@ (80061f8 <SysTick_Config+0x40>)
 80061e8:	2207      	movs	r2, #7
 80061ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	e000e010 	.word	0xe000e010

080061fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff ff29 	bl	800605c <__NVIC_SetPriorityGrouping>
}
 800620a:	bf00      	nop
 800620c:	3708      	adds	r7, #8
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006212:	b580      	push	{r7, lr}
 8006214:	b086      	sub	sp, #24
 8006216:	af00      	add	r7, sp, #0
 8006218:	4603      	mov	r3, r0
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	607a      	str	r2, [r7, #4]
 800621e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006220:	2300      	movs	r3, #0
 8006222:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006224:	f7ff ff3e 	bl	80060a4 <__NVIC_GetPriorityGrouping>
 8006228:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	6978      	ldr	r0, [r7, #20]
 8006230:	f7ff ff8e 	bl	8006150 <NVIC_EncodePriority>
 8006234:	4602      	mov	r2, r0
 8006236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800623a:	4611      	mov	r1, r2
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff ff5d 	bl	80060fc <__NVIC_SetPriority>
}
 8006242:	bf00      	nop
 8006244:	3718      	adds	r7, #24
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	4603      	mov	r3, r0
 8006252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff ff31 	bl	80060c0 <__NVIC_EnableIRQ>
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f7ff ffa2 	bl	80061b8 <SysTick_Config>
 8006274:	4603      	mov	r3, r0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006280:	b480      	push	{r7}
 8006282:	b089      	sub	sp, #36	@ 0x24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	e16b      	b.n	8006574 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800629c:	2201      	movs	r2, #1
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	4013      	ands	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	f040 815a 	bne.w	800656e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d005      	beq.n	80062d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d130      	bne.n	8006334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	2203      	movs	r2, #3
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	43db      	mvns	r3, r3
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	4013      	ands	r3, r2
 80062e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	fa02 f303 	lsl.w	r3, r2, r3
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006308:	2201      	movs	r2, #1
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	091b      	lsrs	r3, r3, #4
 800631e:	f003 0201 	and.w	r2, r3, #1
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4313      	orrs	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f003 0303 	and.w	r3, r3, #3
 800633c:	2b03      	cmp	r3, #3
 800633e:	d017      	beq.n	8006370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	2203      	movs	r2, #3
 800634c:	fa02 f303 	lsl.w	r3, r2, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4013      	ands	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4313      	orrs	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f003 0303 	and.w	r3, r3, #3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d123      	bne.n	80063c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	08da      	lsrs	r2, r3, #3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3208      	adds	r2, #8
 8006384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800638a:	69fb      	ldr	r3, [r7, #28]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	220f      	movs	r2, #15
 8006394:	fa02 f303 	lsl.w	r3, r2, r3
 8006398:	43db      	mvns	r3, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	f003 0307 	and.w	r3, r3, #7
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	08da      	lsrs	r2, r3, #3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3208      	adds	r2, #8
 80063be:	69b9      	ldr	r1, [r7, #24]
 80063c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	2203      	movs	r2, #3
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	43db      	mvns	r3, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4013      	ands	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 0203 	and.w	r2, r3, #3
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80b4 	beq.w	800656e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	4b60      	ldr	r3, [pc, #384]	@ (800658c <HAL_GPIO_Init+0x30c>)
 800640c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640e:	4a5f      	ldr	r2, [pc, #380]	@ (800658c <HAL_GPIO_Init+0x30c>)
 8006410:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006414:	6453      	str	r3, [r2, #68]	@ 0x44
 8006416:	4b5d      	ldr	r3, [pc, #372]	@ (800658c <HAL_GPIO_Init+0x30c>)
 8006418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800641e:	60fb      	str	r3, [r7, #12]
 8006420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006422:	4a5b      	ldr	r2, [pc, #364]	@ (8006590 <HAL_GPIO_Init+0x310>)
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	089b      	lsrs	r3, r3, #2
 8006428:	3302      	adds	r3, #2
 800642a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800642e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	f003 0303 	and.w	r3, r3, #3
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	220f      	movs	r2, #15
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	43db      	mvns	r3, r3
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	4013      	ands	r3, r2
 8006444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a52      	ldr	r2, [pc, #328]	@ (8006594 <HAL_GPIO_Init+0x314>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d02b      	beq.n	80064a6 <HAL_GPIO_Init+0x226>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a51      	ldr	r2, [pc, #324]	@ (8006598 <HAL_GPIO_Init+0x318>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d025      	beq.n	80064a2 <HAL_GPIO_Init+0x222>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a50      	ldr	r2, [pc, #320]	@ (800659c <HAL_GPIO_Init+0x31c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d01f      	beq.n	800649e <HAL_GPIO_Init+0x21e>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a4f      	ldr	r2, [pc, #316]	@ (80065a0 <HAL_GPIO_Init+0x320>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d019      	beq.n	800649a <HAL_GPIO_Init+0x21a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a4e      	ldr	r2, [pc, #312]	@ (80065a4 <HAL_GPIO_Init+0x324>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d013      	beq.n	8006496 <HAL_GPIO_Init+0x216>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a4d      	ldr	r2, [pc, #308]	@ (80065a8 <HAL_GPIO_Init+0x328>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d00d      	beq.n	8006492 <HAL_GPIO_Init+0x212>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a4c      	ldr	r2, [pc, #304]	@ (80065ac <HAL_GPIO_Init+0x32c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d007      	beq.n	800648e <HAL_GPIO_Init+0x20e>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a4b      	ldr	r2, [pc, #300]	@ (80065b0 <HAL_GPIO_Init+0x330>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d101      	bne.n	800648a <HAL_GPIO_Init+0x20a>
 8006486:	2307      	movs	r3, #7
 8006488:	e00e      	b.n	80064a8 <HAL_GPIO_Init+0x228>
 800648a:	2308      	movs	r3, #8
 800648c:	e00c      	b.n	80064a8 <HAL_GPIO_Init+0x228>
 800648e:	2306      	movs	r3, #6
 8006490:	e00a      	b.n	80064a8 <HAL_GPIO_Init+0x228>
 8006492:	2305      	movs	r3, #5
 8006494:	e008      	b.n	80064a8 <HAL_GPIO_Init+0x228>
 8006496:	2304      	movs	r3, #4
 8006498:	e006      	b.n	80064a8 <HAL_GPIO_Init+0x228>
 800649a:	2303      	movs	r3, #3
 800649c:	e004      	b.n	80064a8 <HAL_GPIO_Init+0x228>
 800649e:	2302      	movs	r3, #2
 80064a0:	e002      	b.n	80064a8 <HAL_GPIO_Init+0x228>
 80064a2:	2301      	movs	r3, #1
 80064a4:	e000      	b.n	80064a8 <HAL_GPIO_Init+0x228>
 80064a6:	2300      	movs	r3, #0
 80064a8:	69fa      	ldr	r2, [r7, #28]
 80064aa:	f002 0203 	and.w	r2, r2, #3
 80064ae:	0092      	lsls	r2, r2, #2
 80064b0:	4093      	lsls	r3, r2
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80064b8:	4935      	ldr	r1, [pc, #212]	@ (8006590 <HAL_GPIO_Init+0x310>)
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	089b      	lsrs	r3, r3, #2
 80064be:	3302      	adds	r3, #2
 80064c0:	69ba      	ldr	r2, [r7, #24]
 80064c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80064c6:	4b3b      	ldr	r3, [pc, #236]	@ (80065b4 <HAL_GPIO_Init+0x334>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	43db      	mvns	r3, r3
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	4013      	ands	r3, r2
 80064d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80064e2:	69ba      	ldr	r2, [r7, #24]
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80064ea:	4a32      	ldr	r2, [pc, #200]	@ (80065b4 <HAL_GPIO_Init+0x334>)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80064f0:	4b30      	ldr	r3, [pc, #192]	@ (80065b4 <HAL_GPIO_Init+0x334>)
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	43db      	mvns	r3, r3
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	4013      	ands	r3, r2
 80064fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	4313      	orrs	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006514:	4a27      	ldr	r2, [pc, #156]	@ (80065b4 <HAL_GPIO_Init+0x334>)
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800651a:	4b26      	ldr	r3, [pc, #152]	@ (80065b4 <HAL_GPIO_Init+0x334>)
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	43db      	mvns	r3, r3
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4013      	ands	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	4313      	orrs	r3, r2
 800653c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800653e:	4a1d      	ldr	r2, [pc, #116]	@ (80065b4 <HAL_GPIO_Init+0x334>)
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006544:	4b1b      	ldr	r3, [pc, #108]	@ (80065b4 <HAL_GPIO_Init+0x334>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	43db      	mvns	r3, r3
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4013      	ands	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006568:	4a12      	ldr	r2, [pc, #72]	@ (80065b4 <HAL_GPIO_Init+0x334>)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	3301      	adds	r3, #1
 8006572:	61fb      	str	r3, [r7, #28]
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2b0f      	cmp	r3, #15
 8006578:	f67f ae90 	bls.w	800629c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	3724      	adds	r7, #36	@ 0x24
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	40023800 	.word	0x40023800
 8006590:	40013800 	.word	0x40013800
 8006594:	40020000 	.word	0x40020000
 8006598:	40020400 	.word	0x40020400
 800659c:	40020800 	.word	0x40020800
 80065a0:	40020c00 	.word	0x40020c00
 80065a4:	40021000 	.word	0x40021000
 80065a8:	40021400 	.word	0x40021400
 80065ac:	40021800 	.word	0x40021800
 80065b0:	40021c00 	.word	0x40021c00
 80065b4:	40013c00 	.word	0x40013c00

080065b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	807b      	strh	r3, [r7, #2]
 80065c4:	4613      	mov	r3, r2
 80065c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065c8:	787b      	ldrb	r3, [r7, #1]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d003      	beq.n	80065d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065ce:	887a      	ldrh	r2, [r7, #2]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80065d4:	e003      	b.n	80065de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80065d6:	887b      	ldrh	r3, [r7, #2]
 80065d8:	041a      	lsls	r2, r3, #16
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	619a      	str	r2, [r3, #24]
}
 80065de:	bf00      	nop
 80065e0:	370c      	adds	r7, #12
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b086      	sub	sp, #24
 80065ee:	af02      	add	r7, sp, #8
 80065f0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e059      	b.n	80066b0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d106      	bne.n	800661c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f007 fc3a 	bl	800de90 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2203      	movs	r2, #3
 8006620:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800662a:	d102      	bne.n	8006632 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f004 fa53 	bl	800aae2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6818      	ldr	r0, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7c1a      	ldrb	r2, [r3, #16]
 8006644:	f88d 2000 	strb.w	r2, [sp]
 8006648:	3304      	adds	r3, #4
 800664a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800664c:	f004 f9d4 	bl	800a9f8 <USB_CoreInit>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d005      	beq.n	8006662 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2202      	movs	r2, #2
 800665a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e026      	b.n	80066b0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2101      	movs	r1, #1
 8006668:	4618      	mov	r0, r3
 800666a:	f004 fa4b 	bl	800ab04 <USB_SetCurrentMode>
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d005      	beq.n	8006680 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e017      	b.n	80066b0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	7c1a      	ldrb	r2, [r3, #16]
 8006688:	f88d 2000 	strb.w	r2, [sp]
 800668c:	3304      	adds	r3, #4
 800668e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006690:	f004 fbee 	bl	800ae70 <USB_HostInit>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d005      	beq.n	80066a6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e004      	b.n	80066b0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80066b8:	b590      	push	{r4, r7, lr}
 80066ba:	b08b      	sub	sp, #44	@ 0x2c
 80066bc:	af04      	add	r7, sp, #16
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	4608      	mov	r0, r1
 80066c2:	4611      	mov	r1, r2
 80066c4:	461a      	mov	r2, r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	70fb      	strb	r3, [r7, #3]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70bb      	strb	r3, [r7, #2]
 80066ce:	4613      	mov	r3, r2
 80066d0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80066d2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80066d4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d101      	bne.n	80066e4 <HAL_HCD_HC_Init+0x2c>
 80066e0:	2302      	movs	r3, #2
 80066e2:	e09d      	b.n	8006820 <HAL_HCD_HC_Init+0x168>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4613      	mov	r3, r2
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	3319      	adds	r3, #25
 80066fc:	2200      	movs	r2, #0
 80066fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	3314      	adds	r3, #20
 8006710:	787a      	ldrb	r2, [r7, #1]
 8006712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006714:	78fa      	ldrb	r2, [r7, #3]
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	4613      	mov	r3, r2
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	3315      	adds	r3, #21
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	3326      	adds	r3, #38	@ 0x26
 8006738:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800673c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800673e:	78fa      	ldrb	r2, [r7, #3]
 8006740:	78bb      	ldrb	r3, [r7, #2]
 8006742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006746:	b2d8      	uxtb	r0, r3
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	3316      	adds	r3, #22
 8006756:	4602      	mov	r2, r0
 8006758:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fbc8 	bl	8006ef4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8006764:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006768:	2b00      	cmp	r3, #0
 800676a:	da0a      	bge.n	8006782 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800676c:	78fa      	ldrb	r2, [r7, #3]
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	011b      	lsls	r3, r3, #4
 8006774:	1a9b      	subs	r3, r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	3317      	adds	r3, #23
 800677c:	2201      	movs	r2, #1
 800677e:	701a      	strb	r2, [r3, #0]
 8006780:	e009      	b.n	8006796 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006782:	78fa      	ldrb	r2, [r7, #3]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	4613      	mov	r3, r2
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	1a9b      	subs	r3, r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	440b      	add	r3, r1
 8006790:	3317      	adds	r3, #23
 8006792:	2200      	movs	r2, #0
 8006794:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f004 fccc 	bl	800b138 <USB_GetHostSpeed>
 80067a0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80067a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d10b      	bne.n	80067c2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80067aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d107      	bne.n	80067c2 <HAL_HCD_HC_Init+0x10a>
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d104      	bne.n	80067c2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	2bbc      	cmp	r3, #188	@ 0xbc
 80067bc:	d901      	bls.n	80067c2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80067be:	23bc      	movs	r3, #188	@ 0xbc
 80067c0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80067c2:	78fa      	ldrb	r2, [r7, #3]
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	1a9b      	subs	r3, r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	3318      	adds	r3, #24
 80067d2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80067d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80067d8:	78fa      	ldrb	r2, [r7, #3]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	b298      	uxth	r0, r3
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	3328      	adds	r3, #40	@ 0x28
 80067ec:	4602      	mov	r2, r0
 80067ee:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	787c      	ldrb	r4, [r7, #1]
 80067fa:	78ba      	ldrb	r2, [r7, #2]
 80067fc:	78f9      	ldrb	r1, [r7, #3]
 80067fe:	9302      	str	r3, [sp, #8]
 8006800:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006804:	9301      	str	r3, [sp, #4]
 8006806:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800680a:	9300      	str	r3, [sp, #0]
 800680c:	4623      	mov	r3, r4
 800680e:	f004 fcbb 	bl	800b188 <USB_HC_Init>
 8006812:	4603      	mov	r3, r0
 8006814:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}

08006828 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	460b      	mov	r3, r1
 8006832:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800683e:	2b01      	cmp	r3, #1
 8006840:	d101      	bne.n	8006846 <HAL_HCD_HC_Halt+0x1e>
 8006842:	2302      	movs	r3, #2
 8006844:	e00f      	b.n	8006866 <HAL_HCD_HC_Halt+0x3e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f005 f84d 	bl	800b8f6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006864:	7bfb      	ldrb	r3, [r7, #15]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	4608      	mov	r0, r1
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	4603      	mov	r3, r0
 8006880:	70fb      	strb	r3, [r7, #3]
 8006882:	460b      	mov	r3, r1
 8006884:	70bb      	strb	r3, [r7, #2]
 8006886:	4613      	mov	r3, r2
 8006888:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800688a:	78fa      	ldrb	r2, [r7, #3]
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	1a9b      	subs	r3, r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	440b      	add	r3, r1
 8006898:	3317      	adds	r3, #23
 800689a:	78ba      	ldrb	r2, [r7, #2]
 800689c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800689e:	78fa      	ldrb	r2, [r7, #3]
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	011b      	lsls	r3, r3, #4
 80068a6:	1a9b      	subs	r3, r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	440b      	add	r3, r1
 80068ac:	3326      	adds	r3, #38	@ 0x26
 80068ae:	787a      	ldrb	r2, [r7, #1]
 80068b0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80068b2:	7c3b      	ldrb	r3, [r7, #16]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d114      	bne.n	80068e2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80068b8:	78fa      	ldrb	r2, [r7, #3]
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	1a9b      	subs	r3, r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	332a      	adds	r3, #42	@ 0x2a
 80068c8:	2203      	movs	r2, #3
 80068ca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80068cc:	78fa      	ldrb	r2, [r7, #3]
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	4613      	mov	r3, r2
 80068d2:	011b      	lsls	r3, r3, #4
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	3319      	adds	r3, #25
 80068dc:	7f3a      	ldrb	r2, [r7, #28]
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	e009      	b.n	80068f6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80068e2:	78fa      	ldrb	r2, [r7, #3]
 80068e4:	6879      	ldr	r1, [r7, #4]
 80068e6:	4613      	mov	r3, r2
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	1a9b      	subs	r3, r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	332a      	adds	r3, #42	@ 0x2a
 80068f2:	2202      	movs	r2, #2
 80068f4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80068f6:	787b      	ldrb	r3, [r7, #1]
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	f200 8102 	bhi.w	8006b02 <HAL_HCD_HC_SubmitRequest+0x292>
 80068fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006904 <HAL_HCD_HC_SubmitRequest+0x94>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	08006915 	.word	0x08006915
 8006908:	08006aed 	.word	0x08006aed
 800690c:	080069d9 	.word	0x080069d9
 8006910:	08006a63 	.word	0x08006a63
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8006914:	7c3b      	ldrb	r3, [r7, #16]
 8006916:	2b01      	cmp	r3, #1
 8006918:	f040 80f5 	bne.w	8006b06 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800691c:	78bb      	ldrb	r3, [r7, #2]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d12d      	bne.n	800697e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8006922:	8b3b      	ldrh	r3, [r7, #24]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d109      	bne.n	800693c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	4613      	mov	r3, r2
 800692e:	011b      	lsls	r3, r3, #4
 8006930:	1a9b      	subs	r3, r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	333d      	adds	r3, #61	@ 0x3d
 8006938:	2201      	movs	r2, #1
 800693a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800693c:	78fa      	ldrb	r2, [r7, #3]
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	4613      	mov	r3, r2
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	1a9b      	subs	r3, r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	440b      	add	r3, r1
 800694a:	333d      	adds	r3, #61	@ 0x3d
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10a      	bne.n	8006968 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006952:	78fa      	ldrb	r2, [r7, #3]
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	440b      	add	r3, r1
 8006960:	332a      	adds	r3, #42	@ 0x2a
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8006966:	e0ce      	b.n	8006b06 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006968:	78fa      	ldrb	r2, [r7, #3]
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	332a      	adds	r3, #42	@ 0x2a
 8006978:	2202      	movs	r2, #2
 800697a:	701a      	strb	r2, [r3, #0]
      break;
 800697c:	e0c3      	b.n	8006b06 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800697e:	78fa      	ldrb	r2, [r7, #3]
 8006980:	6879      	ldr	r1, [r7, #4]
 8006982:	4613      	mov	r3, r2
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	440b      	add	r3, r1
 800698c:	331a      	adds	r3, #26
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	f040 80b8 	bne.w	8006b06 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8006996:	78fa      	ldrb	r2, [r7, #3]
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	1a9b      	subs	r3, r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	440b      	add	r3, r1
 80069a4:	333c      	adds	r3, #60	@ 0x3c
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10a      	bne.n	80069c2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80069ac:	78fa      	ldrb	r2, [r7, #3]
 80069ae:	6879      	ldr	r1, [r7, #4]
 80069b0:	4613      	mov	r3, r2
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	440b      	add	r3, r1
 80069ba:	332a      	adds	r3, #42	@ 0x2a
 80069bc:	2200      	movs	r2, #0
 80069be:	701a      	strb	r2, [r3, #0]
      break;
 80069c0:	e0a1      	b.n	8006b06 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80069c2:	78fa      	ldrb	r2, [r7, #3]
 80069c4:	6879      	ldr	r1, [r7, #4]
 80069c6:	4613      	mov	r3, r2
 80069c8:	011b      	lsls	r3, r3, #4
 80069ca:	1a9b      	subs	r3, r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	440b      	add	r3, r1
 80069d0:	332a      	adds	r3, #42	@ 0x2a
 80069d2:	2202      	movs	r2, #2
 80069d4:	701a      	strb	r2, [r3, #0]
      break;
 80069d6:	e096      	b.n	8006b06 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80069d8:	78bb      	ldrb	r3, [r7, #2]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d120      	bne.n	8006a20 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80069de:	78fa      	ldrb	r2, [r7, #3]
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	011b      	lsls	r3, r3, #4
 80069e6:	1a9b      	subs	r3, r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	440b      	add	r3, r1
 80069ec:	333d      	adds	r3, #61	@ 0x3d
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80069f4:	78fa      	ldrb	r2, [r7, #3]
 80069f6:	6879      	ldr	r1, [r7, #4]
 80069f8:	4613      	mov	r3, r2
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	1a9b      	subs	r3, r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	440b      	add	r3, r1
 8006a02:	332a      	adds	r3, #42	@ 0x2a
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006a08:	e07e      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006a0a:	78fa      	ldrb	r2, [r7, #3]
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	011b      	lsls	r3, r3, #4
 8006a12:	1a9b      	subs	r3, r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	332a      	adds	r3, #42	@ 0x2a
 8006a1a:	2202      	movs	r2, #2
 8006a1c:	701a      	strb	r2, [r3, #0]
      break;
 8006a1e:	e073      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006a20:	78fa      	ldrb	r2, [r7, #3]
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	1a9b      	subs	r3, r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	333c      	adds	r3, #60	@ 0x3c
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10a      	bne.n	8006a4c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a36:	78fa      	ldrb	r2, [r7, #3]
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	1a9b      	subs	r3, r3, r2
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	440b      	add	r3, r1
 8006a44:	332a      	adds	r3, #42	@ 0x2a
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
      break;
 8006a4a:	e05d      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	4613      	mov	r3, r2
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	1a9b      	subs	r3, r3, r2
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	332a      	adds	r3, #42	@ 0x2a
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	701a      	strb	r2, [r3, #0]
      break;
 8006a60:	e052      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006a62:	78bb      	ldrb	r3, [r7, #2]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d120      	bne.n	8006aaa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006a68:	78fa      	ldrb	r2, [r7, #3]
 8006a6a:	6879      	ldr	r1, [r7, #4]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	440b      	add	r3, r1
 8006a76:	333d      	adds	r3, #61	@ 0x3d
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006a7e:	78fa      	ldrb	r2, [r7, #3]
 8006a80:	6879      	ldr	r1, [r7, #4]
 8006a82:	4613      	mov	r3, r2
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	1a9b      	subs	r3, r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	440b      	add	r3, r1
 8006a8c:	332a      	adds	r3, #42	@ 0x2a
 8006a8e:	2200      	movs	r2, #0
 8006a90:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006a92:	e039      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006a94:	78fa      	ldrb	r2, [r7, #3]
 8006a96:	6879      	ldr	r1, [r7, #4]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	332a      	adds	r3, #42	@ 0x2a
 8006aa4:	2202      	movs	r2, #2
 8006aa6:	701a      	strb	r2, [r3, #0]
      break;
 8006aa8:	e02e      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006aaa:	78fa      	ldrb	r2, [r7, #3]
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	011b      	lsls	r3, r3, #4
 8006ab2:	1a9b      	subs	r3, r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	333c      	adds	r3, #60	@ 0x3c
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	332a      	adds	r3, #42	@ 0x2a
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	701a      	strb	r2, [r3, #0]
      break;
 8006ad4:	e018      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006ad6:	78fa      	ldrb	r2, [r7, #3]
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	4613      	mov	r3, r2
 8006adc:	011b      	lsls	r3, r3, #4
 8006ade:	1a9b      	subs	r3, r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	440b      	add	r3, r1
 8006ae4:	332a      	adds	r3, #42	@ 0x2a
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	701a      	strb	r2, [r3, #0]
      break;
 8006aea:	e00d      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006aec:	78fa      	ldrb	r2, [r7, #3]
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	011b      	lsls	r3, r3, #4
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	332a      	adds	r3, #42	@ 0x2a
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
      break;
 8006b00:	e002      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8006b02:	bf00      	nop
 8006b04:	e000      	b.n	8006b08 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8006b06:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	1a9b      	subs	r3, r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	440b      	add	r3, r1
 8006b16:	332c      	adds	r3, #44	@ 0x2c
 8006b18:	697a      	ldr	r2, [r7, #20]
 8006b1a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	8b39      	ldrh	r1, [r7, #24]
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4403      	add	r3, r0
 8006b2c:	3334      	adds	r3, #52	@ 0x34
 8006b2e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	4613      	mov	r3, r2
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	334c      	adds	r3, #76	@ 0x4c
 8006b40:	2200      	movs	r2, #0
 8006b42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006b44:	78fa      	ldrb	r2, [r7, #3]
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	1a9b      	subs	r3, r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	3338      	adds	r3, #56	@ 0x38
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006b58:	78fa      	ldrb	r2, [r7, #3]
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	3315      	adds	r3, #21
 8006b68:	78fa      	ldrb	r2, [r7, #3]
 8006b6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006b6c:	78fa      	ldrb	r2, [r7, #3]
 8006b6e:	6879      	ldr	r1, [r7, #4]
 8006b70:	4613      	mov	r3, r2
 8006b72:	011b      	lsls	r3, r3, #4
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	334d      	adds	r3, #77	@ 0x4d
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6818      	ldr	r0, [r3, #0]
 8006b84:	78fa      	ldrb	r2, [r7, #3]
 8006b86:	4613      	mov	r3, r2
 8006b88:	011b      	lsls	r3, r3, #4
 8006b8a:	1a9b      	subs	r3, r3, r2
 8006b8c:	009b      	lsls	r3, r3, #2
 8006b8e:	3310      	adds	r3, #16
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4413      	add	r3, r2
 8006b94:	1d19      	adds	r1, r3, #4
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	799b      	ldrb	r3, [r3, #6]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	f004 fc20 	bl	800b3e0 <USB_HC_StartXfer>
 8006ba0:	4603      	mov	r3, r0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop

08006bac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f004 f914 	bl	800adf0 <USB_GetMode>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	f040 80fb 	bne.w	8006dc6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f004 f8d7 	bl	800ad88 <USB_ReadInterrupts>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80f1 	beq.w	8006dc4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f004 f8ce 	bl	800ad88 <USB_ReadInterrupts>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bf6:	d104      	bne.n	8006c02 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006c00:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f004 f8be 	bl	800ad88 <USB_ReadInterrupts>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c16:	d104      	bne.n	8006c22 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f004 f8ae 	bl	800ad88 <USB_ReadInterrupts>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c36:	d104      	bne.n	8006c42 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8006c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f004 f89e 	bl	800ad88 <USB_ReadInterrupts>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d103      	bne.n	8006c5e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f004 f890 	bl	800ad88 <USB_ReadInterrupts>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006c72:	d120      	bne.n	8006cb6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006c7c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d113      	bne.n	8006cb6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006c8e:	2110      	movs	r1, #16
 8006c90:	6938      	ldr	r0, [r7, #16]
 8006c92:	f003 ff83 	bl	800ab9c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006c96:	6938      	ldr	r0, [r7, #16]
 8006c98:	f003 ffb2 	bl	800ac00 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7a5b      	ldrb	r3, [r3, #9]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d105      	bne.n	8006cb0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4618      	mov	r0, r3
 8006cac:	f004 f9a4 	bl	800aff8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f007 f96b 	bl	800df8c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f004 f864 	bl	800ad88 <USB_ReadInterrupts>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cca:	d102      	bne.n	8006cd2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fd4d 	bl	800876c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f004 f856 	bl	800ad88 <USB_ReadInterrupts>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d106      	bne.n	8006cf4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f007 f934 	bl	800df54 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2208      	movs	r2, #8
 8006cf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f004 f845 	bl	800ad88 <USB_ReadInterrupts>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d08:	d139      	bne.n	8006d7e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f004 fde0 	bl	800b8d4 <USB_HC_ReadInterrupt>
 8006d14:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
 8006d1a:	e025      	b.n	8006d68 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f003 030f 	and.w	r3, r3, #15
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d018      	beq.n	8006d62 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d46:	d106      	bne.n	8006d56 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f905 	bl	8006f5e <HCD_HC_IN_IRQHandler>
 8006d54:	e005      	b.n	8006d62 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 ff67 	bl	8007c30 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	3301      	adds	r3, #1
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	795b      	ldrb	r3, [r3, #5]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d3d3      	bcc.n	8006d1c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f004 f800 	bl	800ad88 <USB_ReadInterrupts>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	f003 0310 	and.w	r3, r3, #16
 8006d8e:	2b10      	cmp	r3, #16
 8006d90:	d101      	bne.n	8006d96 <HAL_HCD_IRQHandler+0x1ea>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <HAL_HCD_IRQHandler+0x1ec>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d014      	beq.n	8006dc6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0210 	bic.w	r2, r2, #16
 8006daa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fbfe 	bl	80085ae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	699a      	ldr	r2, [r3, #24]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0210 	orr.w	r2, r2, #16
 8006dc0:	619a      	str	r2, [r3, #24]
 8006dc2:	e000      	b.n	8006dc6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8006dc4:	bf00      	nop
    }
  }
}
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_HCD_Start+0x16>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e013      	b.n	8006e0a <HAL_HCD_Start+0x3e>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2101      	movs	r1, #1
 8006df0:	4618      	mov	r0, r3
 8006df2:	f004 f968 	bl	800b0c6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f003 fe60 	bl	800aac0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_HCD_Stop+0x16>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e00d      	b.n	8006e44 <HAL_HCD_Stop+0x32>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f004 febb 	bl	800bbb0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f004 f90a 	bl	800b072 <USB_ResetPort>
 8006e5e:	4603      	mov	r3, r0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006e74:	78fa      	ldrb	r2, [r7, #3]
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	1a9b      	subs	r3, r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	334c      	adds	r3, #76	@ 0x4c
 8006e84:	781b      	ldrb	r3, [r3, #0]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006e9e:	78fa      	ldrb	r2, [r7, #3]
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	011b      	lsls	r3, r3, #4
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	440b      	add	r3, r1
 8006eac:	3338      	adds	r3, #56	@ 0x38
 8006eae:	681b      	ldr	r3, [r3, #0]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f004 f94c 	bl	800b166 <USB_GetCurrentFrame>
 8006ece:	4603      	mov	r3, r0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f004 f927 	bl	800b138 <USB_GetHostSpeed>
 8006eea:	4603      	mov	r3, r0
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8006f00:	78fa      	ldrb	r2, [r7, #3]
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	4613      	mov	r3, r2
 8006f06:	011b      	lsls	r3, r3, #4
 8006f08:	1a9b      	subs	r3, r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	331a      	adds	r3, #26
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8006f14:	78fa      	ldrb	r2, [r7, #3]
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	1a9b      	subs	r3, r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	331b      	adds	r3, #27
 8006f24:	2200      	movs	r2, #0
 8006f26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	011b      	lsls	r3, r3, #4
 8006f30:	1a9b      	subs	r3, r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	3325      	adds	r3, #37	@ 0x25
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8006f3c:	78fa      	ldrb	r2, [r7, #3]
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	3324      	adds	r3, #36	@ 0x24
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	460b      	mov	r3, r1
 8006f68:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	78fa      	ldrb	r2, [r7, #3]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f003 ff16 	bl	800adae <USB_ReadChInterrupts>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d11a      	bne.n	8006fc2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f98:	461a      	mov	r2, r3
 8006f9a:	2304      	movs	r3, #4
 8006f9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8006f9e:	78fa      	ldrb	r2, [r7, #3]
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	011b      	lsls	r3, r3, #4
 8006fa6:	1a9b      	subs	r3, r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	334d      	adds	r3, #77	@ 0x4d
 8006fae:	2207      	movs	r2, #7
 8006fb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f004 fc9b 	bl	800b8f6 <USB_HC_Halt>
 8006fc0:	e09e      	b.n	8007100 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	78fa      	ldrb	r2, [r7, #3]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f003 feef 	bl	800adae <USB_ReadChInterrupts>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fda:	d11b      	bne.n	8007014 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	015a      	lsls	r2, r3, #5
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006fee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	011b      	lsls	r3, r3, #4
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	440b      	add	r3, r1
 8006ffe:	334d      	adds	r3, #77	@ 0x4d
 8007000:	2208      	movs	r2, #8
 8007002:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	78fa      	ldrb	r2, [r7, #3]
 800700a:	4611      	mov	r1, r2
 800700c:	4618      	mov	r0, r3
 800700e:	f004 fc72 	bl	800b8f6 <USB_HC_Halt>
 8007012:	e075      	b.n	8007100 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	78fa      	ldrb	r2, [r7, #3]
 800701a:	4611      	mov	r1, r2
 800701c:	4618      	mov	r0, r3
 800701e:	f003 fec6 	bl	800adae <USB_ReadChInterrupts>
 8007022:	4603      	mov	r3, r0
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d11a      	bne.n	8007062 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800702c:	78fb      	ldrb	r3, [r7, #3]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	4413      	add	r3, r2
 8007034:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007038:	461a      	mov	r2, r3
 800703a:	2308      	movs	r3, #8
 800703c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800703e:	78fa      	ldrb	r2, [r7, #3]
 8007040:	6879      	ldr	r1, [r7, #4]
 8007042:	4613      	mov	r3, r2
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	440b      	add	r3, r1
 800704c:	334d      	adds	r3, #77	@ 0x4d
 800704e:	2206      	movs	r2, #6
 8007050:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	78fa      	ldrb	r2, [r7, #3]
 8007058:	4611      	mov	r1, r2
 800705a:	4618      	mov	r0, r3
 800705c:	f004 fc4b 	bl	800b8f6 <USB_HC_Halt>
 8007060:	e04e      	b.n	8007100 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	4611      	mov	r1, r2
 800706a:	4618      	mov	r0, r3
 800706c:	f003 fe9f 	bl	800adae <USB_ReadChInterrupts>
 8007070:	4603      	mov	r3, r0
 8007072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007076:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800707a:	d11b      	bne.n	80070b4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4413      	add	r3, r2
 8007084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007088:	461a      	mov	r2, r3
 800708a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800708e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8007090:	78fa      	ldrb	r2, [r7, #3]
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	1a9b      	subs	r3, r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	334d      	adds	r3, #77	@ 0x4d
 80070a0:	2209      	movs	r2, #9
 80070a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	78fa      	ldrb	r2, [r7, #3]
 80070aa:	4611      	mov	r1, r2
 80070ac:	4618      	mov	r0, r3
 80070ae:	f004 fc22 	bl	800b8f6 <USB_HC_Halt>
 80070b2:	e025      	b.n	8007100 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	78fa      	ldrb	r2, [r7, #3]
 80070ba:	4611      	mov	r1, r2
 80070bc:	4618      	mov	r0, r3
 80070be:	f003 fe76 	bl	800adae <USB_ReadChInterrupts>
 80070c2:	4603      	mov	r3, r0
 80070c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070c8:	2b80      	cmp	r3, #128	@ 0x80
 80070ca:	d119      	bne.n	8007100 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80070cc:	78fb      	ldrb	r3, [r7, #3]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d8:	461a      	mov	r2, r3
 80070da:	2380      	movs	r3, #128	@ 0x80
 80070dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80070de:	78fa      	ldrb	r2, [r7, #3]
 80070e0:	6879      	ldr	r1, [r7, #4]
 80070e2:	4613      	mov	r3, r2
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	440b      	add	r3, r1
 80070ec:	334d      	adds	r3, #77	@ 0x4d
 80070ee:	2207      	movs	r2, #7
 80070f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	78fa      	ldrb	r2, [r7, #3]
 80070f8:	4611      	mov	r1, r2
 80070fa:	4618      	mov	r0, r3
 80070fc:	f004 fbfb 	bl	800b8f6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	78fa      	ldrb	r2, [r7, #3]
 8007106:	4611      	mov	r1, r2
 8007108:	4618      	mov	r0, r3
 800710a:	f003 fe50 	bl	800adae <USB_ReadChInterrupts>
 800710e:	4603      	mov	r3, r0
 8007110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007118:	d112      	bne.n	8007140 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	78fa      	ldrb	r2, [r7, #3]
 8007120:	4611      	mov	r1, r2
 8007122:	4618      	mov	r0, r3
 8007124:	f004 fbe7 	bl	800b8f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	4413      	add	r3, r2
 8007130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007134:	461a      	mov	r2, r3
 8007136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800713a:	6093      	str	r3, [r2, #8]
 800713c:	f000 bd75 	b.w	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	78fa      	ldrb	r2, [r7, #3]
 8007146:	4611      	mov	r1, r2
 8007148:	4618      	mov	r0, r3
 800714a:	f003 fe30 	bl	800adae <USB_ReadChInterrupts>
 800714e:	4603      	mov	r3, r0
 8007150:	f003 0301 	and.w	r3, r3, #1
 8007154:	2b01      	cmp	r3, #1
 8007156:	f040 8128 	bne.w	80073aa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	4413      	add	r3, r2
 8007162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007166:	461a      	mov	r2, r3
 8007168:	2320      	movs	r3, #32
 800716a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	6879      	ldr	r1, [r7, #4]
 8007170:	4613      	mov	r3, r2
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	440b      	add	r3, r1
 800717a:	331b      	adds	r3, #27
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d119      	bne.n	80071b6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007182:	78fa      	ldrb	r2, [r7, #3]
 8007184:	6879      	ldr	r1, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	331b      	adds	r3, #27
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4413      	add	r3, r2
 800719e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	78fa      	ldrb	r2, [r7, #3]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071b4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	799b      	ldrb	r3, [r3, #6]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d01b      	beq.n	80071f6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	4613      	mov	r3, r2
 80071c4:	011b      	lsls	r3, r3, #4
 80071c6:	1a9b      	subs	r3, r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	3330      	adds	r3, #48	@ 0x30
 80071ce:	6819      	ldr	r1, [r3, #0]
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071e2:	78fa      	ldrb	r2, [r7, #3]
 80071e4:	1ac9      	subs	r1, r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	4613      	mov	r3, r2
 80071ea:	011b      	lsls	r3, r3, #4
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4403      	add	r3, r0
 80071f2:	3338      	adds	r3, #56	@ 0x38
 80071f4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80071f6:	78fa      	ldrb	r2, [r7, #3]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	011b      	lsls	r3, r3, #4
 80071fe:	1a9b      	subs	r3, r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	334d      	adds	r3, #77	@ 0x4d
 8007206:	2201      	movs	r2, #1
 8007208:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800720a:	78fa      	ldrb	r2, [r7, #3]
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	011b      	lsls	r3, r3, #4
 8007212:	1a9b      	subs	r3, r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	3344      	adds	r3, #68	@ 0x44
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	4413      	add	r3, r2
 8007226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800722a:	461a      	mov	r2, r3
 800722c:	2301      	movs	r3, #1
 800722e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007230:	78fa      	ldrb	r2, [r7, #3]
 8007232:	6879      	ldr	r1, [r7, #4]
 8007234:	4613      	mov	r3, r2
 8007236:	011b      	lsls	r3, r3, #4
 8007238:	1a9b      	subs	r3, r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	440b      	add	r3, r1
 800723e:	3326      	adds	r3, #38	@ 0x26
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00a      	beq.n	800725c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007246:	78fa      	ldrb	r2, [r7, #3]
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	4613      	mov	r3, r2
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	1a9b      	subs	r3, r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	3326      	adds	r3, #38	@ 0x26
 8007256:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007258:	2b02      	cmp	r3, #2
 800725a:	d110      	bne.n	800727e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	4611      	mov	r1, r2
 8007264:	4618      	mov	r0, r3
 8007266:	f004 fb46 	bl	800b8f6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800726a:	78fb      	ldrb	r3, [r7, #3]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007276:	461a      	mov	r2, r3
 8007278:	2310      	movs	r3, #16
 800727a:	6093      	str	r3, [r2, #8]
 800727c:	e03d      	b.n	80072fa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800727e:	78fa      	ldrb	r2, [r7, #3]
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	1a9b      	subs	r3, r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	3326      	adds	r3, #38	@ 0x26
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b03      	cmp	r3, #3
 8007292:	d00a      	beq.n	80072aa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4613      	mov	r3, r2
 800729a:	011b      	lsls	r3, r3, #4
 800729c:	1a9b      	subs	r3, r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	3326      	adds	r3, #38	@ 0x26
 80072a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d127      	bne.n	80072fa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	78fa      	ldrb	r2, [r7, #3]
 80072ba:	0151      	lsls	r1, r2, #5
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	440a      	add	r2, r1
 80072c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80072c8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	4613      	mov	r3, r2
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	1a9b      	subs	r3, r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	440b      	add	r3, r1
 80072d8:	334c      	adds	r3, #76	@ 0x4c
 80072da:	2201      	movs	r2, #1
 80072dc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	1a9b      	subs	r3, r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	334c      	adds	r3, #76	@ 0x4c
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f006 fe57 	bl	800dfa8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	799b      	ldrb	r3, [r3, #6]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d13b      	bne.n	800737a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8007302:	78fa      	ldrb	r2, [r7, #3]
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	4613      	mov	r3, r2
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	1a9b      	subs	r3, r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	440b      	add	r3, r1
 8007310:	3338      	adds	r3, #56	@ 0x38
 8007312:	6819      	ldr	r1, [r3, #0]
 8007314:	78fa      	ldrb	r2, [r7, #3]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	011b      	lsls	r3, r3, #4
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4403      	add	r3, r0
 8007322:	3328      	adds	r3, #40	@ 0x28
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	440b      	add	r3, r1
 8007328:	1e59      	subs	r1, r3, #1
 800732a:	78fa      	ldrb	r2, [r7, #3]
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4613      	mov	r3, r2
 8007330:	011b      	lsls	r3, r3, #4
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4403      	add	r3, r0
 8007338:	3328      	adds	r3, #40	@ 0x28
 800733a:	881b      	ldrh	r3, [r3, #0]
 800733c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8470 	beq.w	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800734a:	78fa      	ldrb	r2, [r7, #3]
 800734c:	6879      	ldr	r1, [r7, #4]
 800734e:	4613      	mov	r3, r2
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	1a9b      	subs	r3, r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	333c      	adds	r3, #60	@ 0x3c
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	f083 0301 	eor.w	r3, r3, #1
 8007362:	b2d8      	uxtb	r0, r3
 8007364:	6879      	ldr	r1, [r7, #4]
 8007366:	4613      	mov	r3, r2
 8007368:	011b      	lsls	r3, r3, #4
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	440b      	add	r3, r1
 8007370:	333c      	adds	r3, #60	@ 0x3c
 8007372:	4602      	mov	r2, r0
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	f000 bc58 	b.w	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800737a:	78fa      	ldrb	r2, [r7, #3]
 800737c:	6879      	ldr	r1, [r7, #4]
 800737e:	4613      	mov	r3, r2
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	440b      	add	r3, r1
 8007388:	333c      	adds	r3, #60	@ 0x3c
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	78fa      	ldrb	r2, [r7, #3]
 800738e:	f083 0301 	eor.w	r3, r3, #1
 8007392:	b2d8      	uxtb	r0, r3
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	1a9b      	subs	r3, r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	333c      	adds	r3, #60	@ 0x3c
 80073a2:	4602      	mov	r2, r0
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	f000 bc40 	b.w	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	4611      	mov	r1, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	f003 fcfb 	bl	800adae <USB_ReadChInterrupts>
 80073b8:	4603      	mov	r3, r0
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b20      	cmp	r3, #32
 80073c0:	d131      	bne.n	8007426 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ce:	461a      	mov	r2, r3
 80073d0:	2320      	movs	r3, #32
 80073d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80073d4:	78fa      	ldrb	r2, [r7, #3]
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	1a9b      	subs	r3, r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	331a      	adds	r3, #26
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	f040 841f 	bne.w	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80073ec:	78fa      	ldrb	r2, [r7, #3]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	331b      	adds	r3, #27
 80073fc:	2201      	movs	r2, #1
 80073fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007400:	78fa      	ldrb	r2, [r7, #3]
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	4613      	mov	r3, r2
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	440b      	add	r3, r1
 800740e:	334d      	adds	r3, #77	@ 0x4d
 8007410:	2203      	movs	r2, #3
 8007412:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f004 fa6a 	bl	800b8f6 <USB_HC_Halt>
 8007422:	f000 bc02 	b.w	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	78fa      	ldrb	r2, [r7, #3]
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f003 fcbd 	bl	800adae <USB_ReadChInterrupts>
 8007434:	4603      	mov	r3, r0
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b02      	cmp	r3, #2
 800743c:	f040 8305 	bne.w	8007a4a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	4413      	add	r3, r2
 8007448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800744c:	461a      	mov	r2, r3
 800744e:	2302      	movs	r3, #2
 8007450:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8007452:	78fa      	ldrb	r2, [r7, #3]
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	4613      	mov	r3, r2
 8007458:	011b      	lsls	r3, r3, #4
 800745a:	1a9b      	subs	r3, r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	440b      	add	r3, r1
 8007460:	334d      	adds	r3, #77	@ 0x4d
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d114      	bne.n	8007492 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007468:	78fa      	ldrb	r2, [r7, #3]
 800746a:	6879      	ldr	r1, [r7, #4]
 800746c:	4613      	mov	r3, r2
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	1a9b      	subs	r3, r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	440b      	add	r3, r1
 8007476:	334d      	adds	r3, #77	@ 0x4d
 8007478:	2202      	movs	r2, #2
 800747a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	1a9b      	subs	r3, r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	334c      	adds	r3, #76	@ 0x4c
 800748c:	2201      	movs	r2, #1
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	e2cc      	b.n	8007a2c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	4613      	mov	r3, r2
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	334d      	adds	r3, #77	@ 0x4d
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b06      	cmp	r3, #6
 80074a6:	d114      	bne.n	80074d2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	4613      	mov	r3, r2
 80074ae:	011b      	lsls	r3, r3, #4
 80074b0:	1a9b      	subs	r3, r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	440b      	add	r3, r1
 80074b6:	334d      	adds	r3, #77	@ 0x4d
 80074b8:	2202      	movs	r2, #2
 80074ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80074bc:	78fa      	ldrb	r2, [r7, #3]
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	4613      	mov	r3, r2
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	1a9b      	subs	r3, r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	334c      	adds	r3, #76	@ 0x4c
 80074cc:	2205      	movs	r2, #5
 80074ce:	701a      	strb	r2, [r3, #0]
 80074d0:	e2ac      	b.n	8007a2c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80074d2:	78fa      	ldrb	r2, [r7, #3]
 80074d4:	6879      	ldr	r1, [r7, #4]
 80074d6:	4613      	mov	r3, r2
 80074d8:	011b      	lsls	r3, r3, #4
 80074da:	1a9b      	subs	r3, r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	440b      	add	r3, r1
 80074e0:	334d      	adds	r3, #77	@ 0x4d
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b07      	cmp	r3, #7
 80074e6:	d00b      	beq.n	8007500 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	4613      	mov	r3, r2
 80074ee:	011b      	lsls	r3, r3, #4
 80074f0:	1a9b      	subs	r3, r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	440b      	add	r3, r1
 80074f6:	334d      	adds	r3, #77	@ 0x4d
 80074f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	f040 80a6 	bne.w	800764c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007500:	78fa      	ldrb	r2, [r7, #3]
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	1a9b      	subs	r3, r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	334d      	adds	r3, #77	@ 0x4d
 8007510:	2202      	movs	r2, #2
 8007512:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	011b      	lsls	r3, r3, #4
 800751c:	1a9b      	subs	r3, r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	3344      	adds	r3, #68	@ 0x44
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	1c59      	adds	r1, r3, #1
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	1a9b      	subs	r3, r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4403      	add	r3, r0
 8007534:	3344      	adds	r3, #68	@ 0x44
 8007536:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4613      	mov	r3, r2
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	1a9b      	subs	r3, r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	440b      	add	r3, r1
 8007546:	3344      	adds	r3, #68	@ 0x44
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b02      	cmp	r3, #2
 800754c:	d943      	bls.n	80075d6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800754e:	78fa      	ldrb	r2, [r7, #3]
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	4613      	mov	r3, r2
 8007554:	011b      	lsls	r3, r3, #4
 8007556:	1a9b      	subs	r3, r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	440b      	add	r3, r1
 800755c:	3344      	adds	r3, #68	@ 0x44
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	4613      	mov	r3, r2
 8007568:	011b      	lsls	r3, r3, #4
 800756a:	1a9b      	subs	r3, r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	331a      	adds	r3, #26
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d123      	bne.n	80075c0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8007578:	78fa      	ldrb	r2, [r7, #3]
 800757a:	6879      	ldr	r1, [r7, #4]
 800757c:	4613      	mov	r3, r2
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	1a9b      	subs	r3, r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	331b      	adds	r3, #27
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800758c:	78fa      	ldrb	r2, [r7, #3]
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	331c      	adds	r3, #28
 800759c:	2200      	movs	r2, #0
 800759e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	78fa      	ldrb	r2, [r7, #3]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075be:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80075c0:	78fa      	ldrb	r2, [r7, #3]
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	334c      	adds	r3, #76	@ 0x4c
 80075d0:	2204      	movs	r2, #4
 80075d2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80075d4:	e229      	b.n	8007a2a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80075d6:	78fa      	ldrb	r2, [r7, #3]
 80075d8:	6879      	ldr	r1, [r7, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	1a9b      	subs	r3, r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	440b      	add	r3, r1
 80075e4:	334c      	adds	r3, #76	@ 0x4c
 80075e6:	2202      	movs	r2, #2
 80075e8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80075ea:	78fa      	ldrb	r2, [r7, #3]
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	4613      	mov	r3, r2
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	1a9b      	subs	r3, r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	440b      	add	r3, r1
 80075f8:	3326      	adds	r3, #38	@ 0x26
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00b      	beq.n	8007618 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007600:	78fa      	ldrb	r2, [r7, #3]
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	4613      	mov	r3, r2
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	1a9b      	subs	r3, r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	440b      	add	r3, r1
 800760e:	3326      	adds	r3, #38	@ 0x26
 8007610:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007612:	2b02      	cmp	r3, #2
 8007614:	f040 8209 	bne.w	8007a2a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	4413      	add	r3, r2
 8007620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800762e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007636:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	4413      	add	r3, r2
 8007640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007644:	461a      	mov	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800764a:	e1ee      	b.n	8007a2a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800764c:	78fa      	ldrb	r2, [r7, #3]
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4613      	mov	r3, r2
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	1a9b      	subs	r3, r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	440b      	add	r3, r1
 800765a:	334d      	adds	r3, #77	@ 0x4d
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	2b05      	cmp	r3, #5
 8007660:	f040 80c8 	bne.w	80077f4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007664:	78fa      	ldrb	r2, [r7, #3]
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4613      	mov	r3, r2
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	334d      	adds	r3, #77	@ 0x4d
 8007674:	2202      	movs	r2, #2
 8007676:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007678:	78fa      	ldrb	r2, [r7, #3]
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	4613      	mov	r3, r2
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	1a9b      	subs	r3, r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	331b      	adds	r3, #27
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b01      	cmp	r3, #1
 800768c:	f040 81ce 	bne.w	8007a2c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007690:	78fa      	ldrb	r2, [r7, #3]
 8007692:	6879      	ldr	r1, [r7, #4]
 8007694:	4613      	mov	r3, r2
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	1a9b      	subs	r3, r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	440b      	add	r3, r1
 800769e:	3326      	adds	r3, #38	@ 0x26
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b03      	cmp	r3, #3
 80076a4:	d16b      	bne.n	800777e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80076a6:	78fa      	ldrb	r2, [r7, #3]
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	4613      	mov	r3, r2
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	1a9b      	subs	r3, r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	440b      	add	r3, r1
 80076b4:	3348      	adds	r3, #72	@ 0x48
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	1c59      	adds	r1, r3, #1
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	4613      	mov	r3, r2
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	1a9b      	subs	r3, r3, r2
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	4403      	add	r3, r0
 80076c6:	3348      	adds	r3, #72	@ 0x48
 80076c8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80076ca:	78fa      	ldrb	r2, [r7, #3]
 80076cc:	6879      	ldr	r1, [r7, #4]
 80076ce:	4613      	mov	r3, r2
 80076d0:	011b      	lsls	r3, r3, #4
 80076d2:	1a9b      	subs	r3, r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	440b      	add	r3, r1
 80076d8:	3348      	adds	r3, #72	@ 0x48
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d943      	bls.n	8007768 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	3348      	adds	r3, #72	@ 0x48
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	331b      	adds	r3, #27
 8007704:	2200      	movs	r2, #0
 8007706:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8007708:	78fa      	ldrb	r2, [r7, #3]
 800770a:	6879      	ldr	r1, [r7, #4]
 800770c:	4613      	mov	r3, r2
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	440b      	add	r3, r1
 8007716:	3344      	adds	r3, #68	@ 0x44
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d809      	bhi.n	8007732 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4613      	mov	r3, r2
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	1a9b      	subs	r3, r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	331c      	adds	r3, #28
 800772e:	2201      	movs	r2, #1
 8007730:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4413      	add	r3, r2
 800773a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	78fa      	ldrb	r2, [r7, #3]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	440a      	add	r2, r1
 8007748:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800774c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007750:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	6879      	ldr	r1, [r7, #4]
 8007756:	4613      	mov	r3, r2
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	1a9b      	subs	r3, r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	440b      	add	r3, r1
 8007760:	334c      	adds	r3, #76	@ 0x4c
 8007762:	2204      	movs	r2, #4
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	e014      	b.n	8007792 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007768:	78fa      	ldrb	r2, [r7, #3]
 800776a:	6879      	ldr	r1, [r7, #4]
 800776c:	4613      	mov	r3, r2
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	1a9b      	subs	r3, r3, r2
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	440b      	add	r3, r1
 8007776:	334c      	adds	r3, #76	@ 0x4c
 8007778:	2202      	movs	r2, #2
 800777a:	701a      	strb	r2, [r3, #0]
 800777c:	e009      	b.n	8007792 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	4613      	mov	r3, r2
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	1a9b      	subs	r3, r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	334c      	adds	r3, #76	@ 0x4c
 800778e:	2202      	movs	r2, #2
 8007790:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007792:	78fa      	ldrb	r2, [r7, #3]
 8007794:	6879      	ldr	r1, [r7, #4]
 8007796:	4613      	mov	r3, r2
 8007798:	011b      	lsls	r3, r3, #4
 800779a:	1a9b      	subs	r3, r3, r2
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	440b      	add	r3, r1
 80077a0:	3326      	adds	r3, #38	@ 0x26
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80077a8:	78fa      	ldrb	r2, [r7, #3]
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4613      	mov	r3, r2
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	1a9b      	subs	r3, r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	440b      	add	r3, r1
 80077b6:	3326      	adds	r3, #38	@ 0x26
 80077b8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	f040 8136 	bne.w	8007a2c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80077c0:	78fb      	ldrb	r3, [r7, #3]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80077d6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077de:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ec:	461a      	mov	r2, r3
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	e11b      	b.n	8007a2c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80077f4:	78fa      	ldrb	r2, [r7, #3]
 80077f6:	6879      	ldr	r1, [r7, #4]
 80077f8:	4613      	mov	r3, r2
 80077fa:	011b      	lsls	r3, r3, #4
 80077fc:	1a9b      	subs	r3, r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	334d      	adds	r3, #77	@ 0x4d
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b03      	cmp	r3, #3
 8007808:	f040 8081 	bne.w	800790e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800780c:	78fa      	ldrb	r2, [r7, #3]
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	4613      	mov	r3, r2
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	440b      	add	r3, r1
 800781a:	334d      	adds	r3, #77	@ 0x4d
 800781c:	2202      	movs	r2, #2
 800781e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	4613      	mov	r3, r2
 8007826:	011b      	lsls	r3, r3, #4
 8007828:	1a9b      	subs	r3, r3, r2
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	440b      	add	r3, r1
 800782e:	331b      	adds	r3, #27
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b01      	cmp	r3, #1
 8007834:	f040 80fa 	bne.w	8007a2c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007838:	78fa      	ldrb	r2, [r7, #3]
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	4613      	mov	r3, r2
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	440b      	add	r3, r1
 8007846:	334c      	adds	r3, #76	@ 0x4c
 8007848:	2202      	movs	r2, #2
 800784a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800784c:	78fb      	ldrb	r3, [r7, #3]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	4413      	add	r3, r2
 8007854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	78fa      	ldrb	r2, [r7, #3]
 800785c:	0151      	lsls	r1, r2, #5
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	440a      	add	r2, r1
 8007862:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800786a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800786c:	78fb      	ldrb	r3, [r7, #3]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	4413      	add	r3, r2
 8007874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	78fa      	ldrb	r2, [r7, #3]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	440a      	add	r2, r1
 8007882:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800788a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	4413      	add	r3, r2
 8007894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	78fa      	ldrb	r2, [r7, #3]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078a6:	f023 0320 	bic.w	r3, r3, #32
 80078aa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4613      	mov	r3, r2
 80078b2:	011b      	lsls	r3, r3, #4
 80078b4:	1a9b      	subs	r3, r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	440b      	add	r3, r1
 80078ba:	3326      	adds	r3, #38	@ 0x26
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80078c2:	78fa      	ldrb	r2, [r7, #3]
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4613      	mov	r3, r2
 80078c8:	011b      	lsls	r3, r3, #4
 80078ca:	1a9b      	subs	r3, r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	3326      	adds	r3, #38	@ 0x26
 80078d2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	f040 80a9 	bne.w	8007a2c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80078f0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80078f8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80078fa:	78fb      	ldrb	r3, [r7, #3]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	4413      	add	r3, r2
 8007902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007906:	461a      	mov	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	e08e      	b.n	8007a2c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800790e:	78fa      	ldrb	r2, [r7, #3]
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	4613      	mov	r3, r2
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	440b      	add	r3, r1
 800791c:	334d      	adds	r3, #77	@ 0x4d
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	2b04      	cmp	r3, #4
 8007922:	d143      	bne.n	80079ac <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007924:	78fa      	ldrb	r2, [r7, #3]
 8007926:	6879      	ldr	r1, [r7, #4]
 8007928:	4613      	mov	r3, r2
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	1a9b      	subs	r3, r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	440b      	add	r3, r1
 8007932:	334d      	adds	r3, #77	@ 0x4d
 8007934:	2202      	movs	r2, #2
 8007936:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	1a9b      	subs	r3, r3, r2
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	440b      	add	r3, r1
 8007946:	334c      	adds	r3, #76	@ 0x4c
 8007948:	2202      	movs	r2, #2
 800794a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800794c:	78fa      	ldrb	r2, [r7, #3]
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4613      	mov	r3, r2
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	1a9b      	subs	r3, r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	3326      	adds	r3, #38	@ 0x26
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	1a9b      	subs	r3, r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	440b      	add	r3, r1
 8007970:	3326      	adds	r3, #38	@ 0x26
 8007972:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007974:	2b02      	cmp	r3, #2
 8007976:	d159      	bne.n	8007a2c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007978:	78fb      	ldrb	r3, [r7, #3]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	4413      	add	r3, r2
 8007980:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800798e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007996:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007998:	78fb      	ldrb	r3, [r7, #3]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079a4:	461a      	mov	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e03f      	b.n	8007a2c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	6879      	ldr	r1, [r7, #4]
 80079b0:	4613      	mov	r3, r2
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	1a9b      	subs	r3, r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	334d      	adds	r3, #77	@ 0x4d
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d126      	bne.n	8007a10 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80079c2:	78fa      	ldrb	r2, [r7, #3]
 80079c4:	6879      	ldr	r1, [r7, #4]
 80079c6:	4613      	mov	r3, r2
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	1a9b      	subs	r3, r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	440b      	add	r3, r1
 80079d0:	334d      	adds	r3, #77	@ 0x4d
 80079d2:	2202      	movs	r2, #2
 80079d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80079d6:	78fa      	ldrb	r2, [r7, #3]
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	4613      	mov	r3, r2
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	1a9b      	subs	r3, r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	440b      	add	r3, r1
 80079e4:	3344      	adds	r3, #68	@ 0x44
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	1c59      	adds	r1, r3, #1
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	4613      	mov	r3, r2
 80079ee:	011b      	lsls	r3, r3, #4
 80079f0:	1a9b      	subs	r3, r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4403      	add	r3, r0
 80079f6:	3344      	adds	r3, #68	@ 0x44
 80079f8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	4613      	mov	r3, r2
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	1a9b      	subs	r3, r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	334c      	adds	r3, #76	@ 0x4c
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	701a      	strb	r2, [r3, #0]
 8007a0e:	e00d      	b.n	8007a2c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8007a10:	78fa      	ldrb	r2, [r7, #3]
 8007a12:	6879      	ldr	r1, [r7, #4]
 8007a14:	4613      	mov	r3, r2
 8007a16:	011b      	lsls	r3, r3, #4
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	334d      	adds	r3, #77	@ 0x4d
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	f000 8100 	beq.w	8007c28 <HCD_HC_IN_IRQHandler+0xcca>
 8007a28:	e000      	b.n	8007a2c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007a2a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007a2c:	78fa      	ldrb	r2, [r7, #3]
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	4613      	mov	r3, r2
 8007a32:	011b      	lsls	r3, r3, #4
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	334c      	adds	r3, #76	@ 0x4c
 8007a3c:	781a      	ldrb	r2, [r3, #0]
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	4619      	mov	r1, r3
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f006 fab0 	bl	800dfa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8007a48:	e0ef      	b.n	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	78fa      	ldrb	r2, [r7, #3]
 8007a50:	4611      	mov	r1, r2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f003 f9ab 	bl	800adae <USB_ReadChInterrupts>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5e:	2b40      	cmp	r3, #64	@ 0x40
 8007a60:	d12f      	bne.n	8007ac2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007a62:	78fb      	ldrb	r3, [r7, #3]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a6e:	461a      	mov	r2, r3
 8007a70:	2340      	movs	r3, #64	@ 0x40
 8007a72:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	011b      	lsls	r3, r3, #4
 8007a7c:	1a9b      	subs	r3, r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	440b      	add	r3, r1
 8007a82:	334d      	adds	r3, #77	@ 0x4d
 8007a84:	2205      	movs	r2, #5
 8007a86:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007a88:	78fa      	ldrb	r2, [r7, #3]
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	1a9b      	subs	r3, r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	331a      	adds	r3, #26
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	1a9b      	subs	r3, r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3344      	adds	r3, #68	@ 0x44
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	78fa      	ldrb	r2, [r7, #3]
 8007ab8:	4611      	mov	r1, r2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f003 ff1b 	bl	800b8f6 <USB_HC_Halt>
 8007ac0:	e0b3      	b.n	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	78fa      	ldrb	r2, [r7, #3]
 8007ac8:	4611      	mov	r1, r2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f003 f96f 	bl	800adae <USB_ReadChInterrupts>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f003 0310 	and.w	r3, r3, #16
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	f040 80a7 	bne.w	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	3326      	adds	r3, #38	@ 0x26
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d11b      	bne.n	8007b2a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	3344      	adds	r3, #68	@ 0x44
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	011b      	lsls	r3, r3, #4
 8007b0e:	1a9b      	subs	r3, r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	334d      	adds	r3, #77	@ 0x4d
 8007b16:	2204      	movs	r2, #4
 8007b18:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	78fa      	ldrb	r2, [r7, #3]
 8007b20:	4611      	mov	r1, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	f003 fee7 	bl	800b8f6 <USB_HC_Halt>
 8007b28:	e03f      	b.n	8007baa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007b2a:	78fa      	ldrb	r2, [r7, #3]
 8007b2c:	6879      	ldr	r1, [r7, #4]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	011b      	lsls	r3, r3, #4
 8007b32:	1a9b      	subs	r3, r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	440b      	add	r3, r1
 8007b38:	3326      	adds	r3, #38	@ 0x26
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d00a      	beq.n	8007b56 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8007b40:	78fa      	ldrb	r2, [r7, #3]
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	4613      	mov	r3, r2
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	1a9b      	subs	r3, r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	440b      	add	r3, r1
 8007b4e:	3326      	adds	r3, #38	@ 0x26
 8007b50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007b52:	2b02      	cmp	r3, #2
 8007b54:	d129      	bne.n	8007baa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007b56:	78fa      	ldrb	r2, [r7, #3]
 8007b58:	6879      	ldr	r1, [r7, #4]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	011b      	lsls	r3, r3, #4
 8007b5e:	1a9b      	subs	r3, r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	3344      	adds	r3, #68	@ 0x44
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	799b      	ldrb	r3, [r3, #6]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <HCD_HC_IN_IRQHandler+0xc2a>
 8007b72:	78fa      	ldrb	r2, [r7, #3]
 8007b74:	6879      	ldr	r1, [r7, #4]
 8007b76:	4613      	mov	r3, r2
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	1a9b      	subs	r3, r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	440b      	add	r3, r1
 8007b80:	331b      	adds	r3, #27
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d110      	bne.n	8007baa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007b88:	78fa      	ldrb	r2, [r7, #3]
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	011b      	lsls	r3, r3, #4
 8007b90:	1a9b      	subs	r3, r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	334d      	adds	r3, #77	@ 0x4d
 8007b98:	2204      	movs	r2, #4
 8007b9a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f003 fea6 	bl	800b8f6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007baa:	78fa      	ldrb	r2, [r7, #3]
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	1a9b      	subs	r3, r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	331b      	adds	r3, #27
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d129      	bne.n	8007c14 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007bc0:	78fa      	ldrb	r2, [r7, #3]
 8007bc2:	6879      	ldr	r1, [r7, #4]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	1a9b      	subs	r3, r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	331b      	adds	r3, #27
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	78fa      	ldrb	r2, [r7, #3]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	693a      	ldr	r2, [r7, #16]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bf2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8007bf4:	78fb      	ldrb	r3, [r7, #3]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	78fa      	ldrb	r2, [r7, #3]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	693a      	ldr	r2, [r7, #16]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c0e:	f043 0320 	orr.w	r3, r3, #32
 8007c12:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	015a      	lsls	r2, r3, #5
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c20:	461a      	mov	r2, r3
 8007c22:	2310      	movs	r3, #16
 8007c24:	6093      	str	r3, [r2, #8]
 8007c26:	e000      	b.n	8007c2a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8007c28:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b086      	sub	sp, #24
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f003 f8ad 	bl	800adae <USB_ReadChInterrupts>
 8007c54:	4603      	mov	r3, r0
 8007c56:	f003 0304 	and.w	r3, r3, #4
 8007c5a:	2b04      	cmp	r3, #4
 8007c5c:	d11b      	bne.n	8007c96 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	2304      	movs	r3, #4
 8007c6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8007c70:	78fa      	ldrb	r2, [r7, #3]
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	4613      	mov	r3, r2
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	1a9b      	subs	r3, r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	334d      	adds	r3, #77	@ 0x4d
 8007c80:	2207      	movs	r2, #7
 8007c82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	78fa      	ldrb	r2, [r7, #3]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f003 fe32 	bl	800b8f6 <USB_HC_Halt>
 8007c92:	f000 bc89 	b.w	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f003 f885 	bl	800adae <USB_ReadChInterrupts>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	f040 8082 	bne.w	8007db4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	015a      	lsls	r2, r3, #5
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	2320      	movs	r3, #32
 8007cc0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	011b      	lsls	r3, r3, #4
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	440b      	add	r3, r1
 8007cd0:	3319      	adds	r3, #25
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d124      	bne.n	8007d22 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8007cd8:	78fa      	ldrb	r2, [r7, #3]
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	4613      	mov	r3, r2
 8007cde:	011b      	lsls	r3, r3, #4
 8007ce0:	1a9b      	subs	r3, r3, r2
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	3319      	adds	r3, #25
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007cec:	78fa      	ldrb	r2, [r7, #3]
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	1a9b      	subs	r3, r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	334c      	adds	r3, #76	@ 0x4c
 8007cfc:	2202      	movs	r2, #2
 8007cfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	4613      	mov	r3, r2
 8007d06:	011b      	lsls	r3, r3, #4
 8007d08:	1a9b      	subs	r3, r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	334d      	adds	r3, #77	@ 0x4d
 8007d10:	2203      	movs	r2, #3
 8007d12:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	78fa      	ldrb	r2, [r7, #3]
 8007d1a:	4611      	mov	r1, r2
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f003 fdea 	bl	800b8f6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	6879      	ldr	r1, [r7, #4]
 8007d26:	4613      	mov	r3, r2
 8007d28:	011b      	lsls	r3, r3, #4
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	440b      	add	r3, r1
 8007d30:	331a      	adds	r3, #26
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	f040 8437 	bne.w	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
 8007d3a:	78fa      	ldrb	r2, [r7, #3]
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	011b      	lsls	r3, r3, #4
 8007d42:	1a9b      	subs	r3, r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	440b      	add	r3, r1
 8007d48:	331b      	adds	r3, #27
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f040 842b 	bne.w	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8007d52:	78fa      	ldrb	r2, [r7, #3]
 8007d54:	6879      	ldr	r1, [r7, #4]
 8007d56:	4613      	mov	r3, r2
 8007d58:	011b      	lsls	r3, r3, #4
 8007d5a:	1a9b      	subs	r3, r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	3326      	adds	r3, #38	@ 0x26
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d009      	beq.n	8007d7c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007d68:	78fa      	ldrb	r2, [r7, #3]
 8007d6a:	6879      	ldr	r1, [r7, #4]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	1a9b      	subs	r3, r3, r2
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	440b      	add	r3, r1
 8007d76:	331b      	adds	r3, #27
 8007d78:	2201      	movs	r2, #1
 8007d7a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8007d7c:	78fa      	ldrb	r2, [r7, #3]
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	4613      	mov	r3, r2
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	440b      	add	r3, r1
 8007d8a:	334d      	adds	r3, #77	@ 0x4d
 8007d8c:	2203      	movs	r2, #3
 8007d8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	78fa      	ldrb	r2, [r7, #3]
 8007d96:	4611      	mov	r1, r2
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f003 fdac 	bl	800b8f6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	011b      	lsls	r3, r3, #4
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	3344      	adds	r3, #68	@ 0x44
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e3f9      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	78fa      	ldrb	r2, [r7, #3]
 8007dba:	4611      	mov	r1, r2
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f002 fff6 	bl	800adae <USB_ReadChInterrupts>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dcc:	d111      	bne.n	8007df2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007de0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	78fa      	ldrb	r2, [r7, #3]
 8007de8:	4611      	mov	r1, r2
 8007dea:	4618      	mov	r0, r3
 8007dec:	f003 fd83 	bl	800b8f6 <USB_HC_Halt>
 8007df0:	e3da      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f002 ffd7 	bl	800adae <USB_ReadChInterrupts>
 8007e00:	4603      	mov	r3, r0
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d168      	bne.n	8007edc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	6879      	ldr	r1, [r7, #4]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	440b      	add	r3, r1
 8007e18:	3344      	adds	r3, #68	@ 0x44
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	78fa      	ldrb	r2, [r7, #3]
 8007e24:	4611      	mov	r1, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f002 ffc1 	bl	800adae <USB_ReadChInterrupts>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e32:	2b40      	cmp	r3, #64	@ 0x40
 8007e34:	d112      	bne.n	8007e5c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007e36:	78fa      	ldrb	r2, [r7, #3]
 8007e38:	6879      	ldr	r1, [r7, #4]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	440b      	add	r3, r1
 8007e44:	3319      	adds	r3, #25
 8007e46:	2201      	movs	r2, #1
 8007e48:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007e4a:	78fb      	ldrb	r3, [r7, #3]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e56:	461a      	mov	r2, r3
 8007e58:	2340      	movs	r3, #64	@ 0x40
 8007e5a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8007e5c:	78fa      	ldrb	r2, [r7, #3]
 8007e5e:	6879      	ldr	r1, [r7, #4]
 8007e60:	4613      	mov	r3, r2
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	1a9b      	subs	r3, r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	331b      	adds	r3, #27
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d019      	beq.n	8007ea6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	6879      	ldr	r1, [r7, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	011b      	lsls	r3, r3, #4
 8007e7a:	1a9b      	subs	r3, r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	331b      	adds	r3, #27
 8007e82:	2200      	movs	r2, #0
 8007e84:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007e86:	78fb      	ldrb	r3, [r7, #3]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	78fa      	ldrb	r2, [r7, #3]
 8007e96:	0151      	lsls	r1, r2, #5
 8007e98:	693a      	ldr	r2, [r7, #16]
 8007e9a:	440a      	add	r2, r1
 8007e9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ea4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007ea6:	78fb      	ldrb	r3, [r7, #3]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8007eb8:	78fa      	ldrb	r2, [r7, #3]
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	011b      	lsls	r3, r3, #4
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	334d      	adds	r3, #77	@ 0x4d
 8007ec8:	2201      	movs	r2, #1
 8007eca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	78fa      	ldrb	r2, [r7, #3]
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f003 fd0e 	bl	800b8f6 <USB_HC_Halt>
 8007eda:	e365      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	78fa      	ldrb	r2, [r7, #3]
 8007ee2:	4611      	mov	r1, r2
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f002 ff62 	bl	800adae <USB_ReadChInterrupts>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ef0:	2b40      	cmp	r3, #64	@ 0x40
 8007ef2:	d139      	bne.n	8007f68 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8007ef4:	78fa      	ldrb	r2, [r7, #3]
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	334d      	adds	r3, #77	@ 0x4d
 8007f04:	2205      	movs	r2, #5
 8007f06:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	331a      	adds	r3, #26
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d109      	bne.n	8007f32 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	4613      	mov	r3, r2
 8007f24:	011b      	lsls	r3, r3, #4
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	3319      	adds	r3, #25
 8007f2e:	2201      	movs	r2, #1
 8007f30:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	4613      	mov	r3, r2
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	440b      	add	r3, r1
 8007f40:	3344      	adds	r3, #68	@ 0x44
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f003 fcd1 	bl	800b8f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007f54:	78fb      	ldrb	r3, [r7, #3]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f60:	461a      	mov	r2, r3
 8007f62:	2340      	movs	r3, #64	@ 0x40
 8007f64:	6093      	str	r3, [r2, #8]
 8007f66:	e31f      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	78fa      	ldrb	r2, [r7, #3]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f002 ff1c 	bl	800adae <USB_ReadChInterrupts>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d11a      	bne.n	8007fb6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	2308      	movs	r3, #8
 8007f90:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8007f92:	78fa      	ldrb	r2, [r7, #3]
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	334d      	adds	r3, #77	@ 0x4d
 8007fa2:	2206      	movs	r2, #6
 8007fa4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	78fa      	ldrb	r2, [r7, #3]
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f003 fca1 	bl	800b8f6 <USB_HC_Halt>
 8007fb4:	e2f8      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	78fa      	ldrb	r2, [r7, #3]
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f002 fef5 	bl	800adae <USB_ReadChInterrupts>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	f003 0310 	and.w	r3, r3, #16
 8007fca:	2b10      	cmp	r3, #16
 8007fcc:	d144      	bne.n	8008058 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	011b      	lsls	r3, r3, #4
 8007fd6:	1a9b      	subs	r3, r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	3344      	adds	r3, #68	@ 0x44
 8007fde:	2200      	movs	r2, #0
 8007fe0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8007fe2:	78fa      	ldrb	r2, [r7, #3]
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	011b      	lsls	r3, r3, #4
 8007fea:	1a9b      	subs	r3, r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	440b      	add	r3, r1
 8007ff0:	334d      	adds	r3, #77	@ 0x4d
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8007ff6:	78fa      	ldrb	r2, [r7, #3]
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	3319      	adds	r3, #25
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d114      	bne.n	8008036 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800800c:	78fa      	ldrb	r2, [r7, #3]
 800800e:	6879      	ldr	r1, [r7, #4]
 8008010:	4613      	mov	r3, r2
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	3318      	adds	r3, #24
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d109      	bne.n	8008036 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	011b      	lsls	r3, r3, #4
 800802a:	1a9b      	subs	r3, r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	3319      	adds	r3, #25
 8008032:	2201      	movs	r2, #1
 8008034:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	78fa      	ldrb	r2, [r7, #3]
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f003 fc59 	bl	800b8f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	4413      	add	r3, r2
 800804c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008050:	461a      	mov	r2, r3
 8008052:	2310      	movs	r3, #16
 8008054:	6093      	str	r3, [r2, #8]
 8008056:	e2a7      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	4611      	mov	r1, r2
 8008060:	4618      	mov	r0, r3
 8008062:	f002 fea4 	bl	800adae <USB_ReadChInterrupts>
 8008066:	4603      	mov	r3, r0
 8008068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800806c:	2b80      	cmp	r3, #128	@ 0x80
 800806e:	f040 8083 	bne.w	8008178 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	799b      	ldrb	r3, [r3, #6]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d111      	bne.n	800809e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800807a:	78fa      	ldrb	r2, [r7, #3]
 800807c:	6879      	ldr	r1, [r7, #4]
 800807e:	4613      	mov	r3, r2
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	1a9b      	subs	r3, r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	440b      	add	r3, r1
 8008088:	334d      	adds	r3, #77	@ 0x4d
 800808a:	2207      	movs	r2, #7
 800808c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	78fa      	ldrb	r2, [r7, #3]
 8008094:	4611      	mov	r1, r2
 8008096:	4618      	mov	r0, r3
 8008098:	f003 fc2d 	bl	800b8f6 <USB_HC_Halt>
 800809c:	e062      	b.n	8008164 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800809e:	78fa      	ldrb	r2, [r7, #3]
 80080a0:	6879      	ldr	r1, [r7, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	1a9b      	subs	r3, r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	440b      	add	r3, r1
 80080ac:	3344      	adds	r3, #68	@ 0x44
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	1c59      	adds	r1, r3, #1
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	4613      	mov	r3, r2
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	1a9b      	subs	r3, r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4403      	add	r3, r0
 80080be:	3344      	adds	r3, #68	@ 0x44
 80080c0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80080c2:	78fa      	ldrb	r2, [r7, #3]
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	1a9b      	subs	r3, r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	3344      	adds	r3, #68	@ 0x44
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d922      	bls.n	800811e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80080d8:	78fa      	ldrb	r2, [r7, #3]
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	4613      	mov	r3, r2
 80080de:	011b      	lsls	r3, r3, #4
 80080e0:	1a9b      	subs	r3, r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	3344      	adds	r3, #68	@ 0x44
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	334c      	adds	r3, #76	@ 0x4c
 80080fc:	2204      	movs	r2, #4
 80080fe:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008100:	78fa      	ldrb	r2, [r7, #3]
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	4613      	mov	r3, r2
 8008106:	011b      	lsls	r3, r3, #4
 8008108:	1a9b      	subs	r3, r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	334c      	adds	r3, #76	@ 0x4c
 8008110:	781a      	ldrb	r2, [r3, #0]
 8008112:	78fb      	ldrb	r3, [r7, #3]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f005 ff46 	bl	800dfa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800811c:	e022      	b.n	8008164 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800811e:	78fa      	ldrb	r2, [r7, #3]
 8008120:	6879      	ldr	r1, [r7, #4]
 8008122:	4613      	mov	r3, r2
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	1a9b      	subs	r3, r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	440b      	add	r3, r1
 800812c:	334c      	adds	r3, #76	@ 0x4c
 800812e:	2202      	movs	r2, #2
 8008130:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008132:	78fb      	ldrb	r3, [r7, #3]
 8008134:	015a      	lsls	r2, r3, #5
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	4413      	add	r3, r2
 800813a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008148:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008150:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008152:	78fb      	ldrb	r3, [r7, #3]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	4413      	add	r3, r2
 800815a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800815e:	461a      	mov	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008164:	78fb      	ldrb	r3, [r7, #3]
 8008166:	015a      	lsls	r2, r3, #5
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	4413      	add	r3, r2
 800816c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008170:	461a      	mov	r2, r3
 8008172:	2380      	movs	r3, #128	@ 0x80
 8008174:	6093      	str	r3, [r2, #8]
 8008176:	e217      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	78fa      	ldrb	r2, [r7, #3]
 800817e:	4611      	mov	r1, r2
 8008180:	4618      	mov	r0, r3
 8008182:	f002 fe14 	bl	800adae <USB_ReadChInterrupts>
 8008186:	4603      	mov	r3, r0
 8008188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800818c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008190:	d11b      	bne.n	80081ca <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008192:	78fa      	ldrb	r2, [r7, #3]
 8008194:	6879      	ldr	r1, [r7, #4]
 8008196:	4613      	mov	r3, r2
 8008198:	011b      	lsls	r3, r3, #4
 800819a:	1a9b      	subs	r3, r3, r2
 800819c:	009b      	lsls	r3, r3, #2
 800819e:	440b      	add	r3, r1
 80081a0:	334d      	adds	r3, #77	@ 0x4d
 80081a2:	2209      	movs	r2, #9
 80081a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	78fa      	ldrb	r2, [r7, #3]
 80081ac:	4611      	mov	r1, r2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f003 fba1 	bl	800b8f6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80081b4:	78fb      	ldrb	r3, [r7, #3]
 80081b6:	015a      	lsls	r2, r3, #5
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	4413      	add	r3, r2
 80081bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081c0:	461a      	mov	r2, r3
 80081c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081c6:	6093      	str	r3, [r2, #8]
 80081c8:	e1ee      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	78fa      	ldrb	r2, [r7, #3]
 80081d0:	4611      	mov	r1, r2
 80081d2:	4618      	mov	r0, r3
 80081d4:	f002 fdeb 	bl	800adae <USB_ReadChInterrupts>
 80081d8:	4603      	mov	r3, r0
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	2b02      	cmp	r3, #2
 80081e0:	f040 81df 	bne.w	80085a2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80081e4:	78fb      	ldrb	r3, [r7, #3]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081f0:	461a      	mov	r2, r3
 80081f2:	2302      	movs	r3, #2
 80081f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80081f6:	78fa      	ldrb	r2, [r7, #3]
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	4613      	mov	r3, r2
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	1a9b      	subs	r3, r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	334d      	adds	r3, #77	@ 0x4d
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	2b01      	cmp	r3, #1
 800820a:	f040 8093 	bne.w	8008334 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	4613      	mov	r3, r2
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	334d      	adds	r3, #77	@ 0x4d
 800821e:	2202      	movs	r2, #2
 8008220:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	011b      	lsls	r3, r3, #4
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	334c      	adds	r3, #76	@ 0x4c
 8008232:	2201      	movs	r2, #1
 8008234:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8008236:	78fa      	ldrb	r2, [r7, #3]
 8008238:	6879      	ldr	r1, [r7, #4]
 800823a:	4613      	mov	r3, r2
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	3326      	adds	r3, #38	@ 0x26
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d00b      	beq.n	8008264 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800824c:	78fa      	ldrb	r2, [r7, #3]
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	4613      	mov	r3, r2
 8008252:	011b      	lsls	r3, r3, #4
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	3326      	adds	r3, #38	@ 0x26
 800825c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800825e:	2b03      	cmp	r3, #3
 8008260:	f040 8190 	bne.w	8008584 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	799b      	ldrb	r3, [r3, #6]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d115      	bne.n	8008298 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800826c:	78fa      	ldrb	r2, [r7, #3]
 800826e:	6879      	ldr	r1, [r7, #4]
 8008270:	4613      	mov	r3, r2
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	1a9b      	subs	r3, r3, r2
 8008276:	009b      	lsls	r3, r3, #2
 8008278:	440b      	add	r3, r1
 800827a:	333d      	adds	r3, #61	@ 0x3d
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	f083 0301 	eor.w	r3, r3, #1
 8008284:	b2d8      	uxtb	r0, r3
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	4613      	mov	r3, r2
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	440b      	add	r3, r1
 8008292:	333d      	adds	r3, #61	@ 0x3d
 8008294:	4602      	mov	r2, r0
 8008296:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	799b      	ldrb	r3, [r3, #6]
 800829c:	2b01      	cmp	r3, #1
 800829e:	f040 8171 	bne.w	8008584 <HCD_HC_OUT_IRQHandler+0x954>
 80082a2:	78fa      	ldrb	r2, [r7, #3]
 80082a4:	6879      	ldr	r1, [r7, #4]
 80082a6:	4613      	mov	r3, r2
 80082a8:	011b      	lsls	r3, r3, #4
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	440b      	add	r3, r1
 80082b0:	3334      	adds	r3, #52	@ 0x34
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 8165 	beq.w	8008584 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80082ba:	78fa      	ldrb	r2, [r7, #3]
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4613      	mov	r3, r2
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	1a9b      	subs	r3, r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	440b      	add	r3, r1
 80082c8:	3334      	adds	r3, #52	@ 0x34
 80082ca:	6819      	ldr	r1, [r3, #0]
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	4613      	mov	r3, r2
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	1a9b      	subs	r3, r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4403      	add	r3, r0
 80082da:	3328      	adds	r3, #40	@ 0x28
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	440b      	add	r3, r1
 80082e0:	1e59      	subs	r1, r3, #1
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	4613      	mov	r3, r2
 80082e8:	011b      	lsls	r3, r3, #4
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4403      	add	r3, r0
 80082f0:	3328      	adds	r3, #40	@ 0x28
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80082f8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	f000 813f 	beq.w	8008584 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	011b      	lsls	r3, r3, #4
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	333d      	adds	r3, #61	@ 0x3d
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	78fa      	ldrb	r2, [r7, #3]
 800831a:	f083 0301 	eor.w	r3, r3, #1
 800831e:	b2d8      	uxtb	r0, r3
 8008320:	6879      	ldr	r1, [r7, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	1a9b      	subs	r3, r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	440b      	add	r3, r1
 800832c:	333d      	adds	r3, #61	@ 0x3d
 800832e:	4602      	mov	r2, r0
 8008330:	701a      	strb	r2, [r3, #0]
 8008332:	e127      	b.n	8008584 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8008334:	78fa      	ldrb	r2, [r7, #3]
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	4613      	mov	r3, r2
 800833a:	011b      	lsls	r3, r3, #4
 800833c:	1a9b      	subs	r3, r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	334d      	adds	r3, #77	@ 0x4d
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	2b03      	cmp	r3, #3
 8008348:	d120      	bne.n	800838c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800834a:	78fa      	ldrb	r2, [r7, #3]
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4613      	mov	r3, r2
 8008350:	011b      	lsls	r3, r3, #4
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	440b      	add	r3, r1
 8008358:	334d      	adds	r3, #77	@ 0x4d
 800835a:	2202      	movs	r2, #2
 800835c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	6879      	ldr	r1, [r7, #4]
 8008362:	4613      	mov	r3, r2
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	1a9b      	subs	r3, r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	440b      	add	r3, r1
 800836c:	331b      	adds	r3, #27
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	f040 8107 	bne.w	8008584 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	6879      	ldr	r1, [r7, #4]
 800837a:	4613      	mov	r3, r2
 800837c:	011b      	lsls	r3, r3, #4
 800837e:	1a9b      	subs	r3, r3, r2
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	440b      	add	r3, r1
 8008384:	334c      	adds	r3, #76	@ 0x4c
 8008386:	2202      	movs	r2, #2
 8008388:	701a      	strb	r2, [r3, #0]
 800838a:	e0fb      	b.n	8008584 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800838c:	78fa      	ldrb	r2, [r7, #3]
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	011b      	lsls	r3, r3, #4
 8008394:	1a9b      	subs	r3, r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	334d      	adds	r3, #77	@ 0x4d
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	2b04      	cmp	r3, #4
 80083a0:	d13a      	bne.n	8008418 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	6879      	ldr	r1, [r7, #4]
 80083a6:	4613      	mov	r3, r2
 80083a8:	011b      	lsls	r3, r3, #4
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	440b      	add	r3, r1
 80083b0:	334d      	adds	r3, #77	@ 0x4d
 80083b2:	2202      	movs	r2, #2
 80083b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80083b6:	78fa      	ldrb	r2, [r7, #3]
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4613      	mov	r3, r2
 80083bc:	011b      	lsls	r3, r3, #4
 80083be:	1a9b      	subs	r3, r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	334c      	adds	r3, #76	@ 0x4c
 80083c6:	2202      	movs	r2, #2
 80083c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	011b      	lsls	r3, r3, #4
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	331b      	adds	r3, #27
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	f040 80d1 	bne.w	8008584 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80083e2:	78fa      	ldrb	r2, [r7, #3]
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	4613      	mov	r3, r2
 80083e8:	011b      	lsls	r3, r3, #4
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	440b      	add	r3, r1
 80083f0:	331b      	adds	r3, #27
 80083f2:	2200      	movs	r2, #0
 80083f4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80083f6:	78fb      	ldrb	r3, [r7, #3]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	78fa      	ldrb	r2, [r7, #3]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	440a      	add	r2, r1
 800840c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008414:	6053      	str	r3, [r2, #4]
 8008416:	e0b5      	b.n	8008584 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	6879      	ldr	r1, [r7, #4]
 800841c:	4613      	mov	r3, r2
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	334d      	adds	r3, #77	@ 0x4d
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b05      	cmp	r3, #5
 800842c:	d114      	bne.n	8008458 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800842e:	78fa      	ldrb	r2, [r7, #3]
 8008430:	6879      	ldr	r1, [r7, #4]
 8008432:	4613      	mov	r3, r2
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	440b      	add	r3, r1
 800843c:	334d      	adds	r3, #77	@ 0x4d
 800843e:	2202      	movs	r2, #2
 8008440:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8008442:	78fa      	ldrb	r2, [r7, #3]
 8008444:	6879      	ldr	r1, [r7, #4]
 8008446:	4613      	mov	r3, r2
 8008448:	011b      	lsls	r3, r3, #4
 800844a:	1a9b      	subs	r3, r3, r2
 800844c:	009b      	lsls	r3, r3, #2
 800844e:	440b      	add	r3, r1
 8008450:	334c      	adds	r3, #76	@ 0x4c
 8008452:	2202      	movs	r2, #2
 8008454:	701a      	strb	r2, [r3, #0]
 8008456:	e095      	b.n	8008584 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4613      	mov	r3, r2
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	334d      	adds	r3, #77	@ 0x4d
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	2b06      	cmp	r3, #6
 800846c:	d114      	bne.n	8008498 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800846e:	78fa      	ldrb	r2, [r7, #3]
 8008470:	6879      	ldr	r1, [r7, #4]
 8008472:	4613      	mov	r3, r2
 8008474:	011b      	lsls	r3, r3, #4
 8008476:	1a9b      	subs	r3, r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	440b      	add	r3, r1
 800847c:	334d      	adds	r3, #77	@ 0x4d
 800847e:	2202      	movs	r2, #2
 8008480:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4613      	mov	r3, r2
 8008488:	011b      	lsls	r3, r3, #4
 800848a:	1a9b      	subs	r3, r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	440b      	add	r3, r1
 8008490:	334c      	adds	r3, #76	@ 0x4c
 8008492:	2205      	movs	r2, #5
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	e075      	b.n	8008584 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	4613      	mov	r3, r2
 800849e:	011b      	lsls	r3, r3, #4
 80084a0:	1a9b      	subs	r3, r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	334d      	adds	r3, #77	@ 0x4d
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b07      	cmp	r3, #7
 80084ac:	d00a      	beq.n	80084c4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80084ae:	78fa      	ldrb	r2, [r7, #3]
 80084b0:	6879      	ldr	r1, [r7, #4]
 80084b2:	4613      	mov	r3, r2
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	1a9b      	subs	r3, r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	334d      	adds	r3, #77	@ 0x4d
 80084be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80084c0:	2b09      	cmp	r3, #9
 80084c2:	d170      	bne.n	80085a6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80084c4:	78fa      	ldrb	r2, [r7, #3]
 80084c6:	6879      	ldr	r1, [r7, #4]
 80084c8:	4613      	mov	r3, r2
 80084ca:	011b      	lsls	r3, r3, #4
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	334d      	adds	r3, #77	@ 0x4d
 80084d4:	2202      	movs	r2, #2
 80084d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80084d8:	78fa      	ldrb	r2, [r7, #3]
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4613      	mov	r3, r2
 80084de:	011b      	lsls	r3, r3, #4
 80084e0:	1a9b      	subs	r3, r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	440b      	add	r3, r1
 80084e6:	3344      	adds	r3, #68	@ 0x44
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	1c59      	adds	r1, r3, #1
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	011b      	lsls	r3, r3, #4
 80084f2:	1a9b      	subs	r3, r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4403      	add	r3, r0
 80084f8:	3344      	adds	r3, #68	@ 0x44
 80084fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80084fc:	78fa      	ldrb	r2, [r7, #3]
 80084fe:	6879      	ldr	r1, [r7, #4]
 8008500:	4613      	mov	r3, r2
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	1a9b      	subs	r3, r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	3344      	adds	r3, #68	@ 0x44
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b02      	cmp	r3, #2
 8008510:	d914      	bls.n	800853c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8008512:	78fa      	ldrb	r2, [r7, #3]
 8008514:	6879      	ldr	r1, [r7, #4]
 8008516:	4613      	mov	r3, r2
 8008518:	011b      	lsls	r3, r3, #4
 800851a:	1a9b      	subs	r3, r3, r2
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	440b      	add	r3, r1
 8008520:	3344      	adds	r3, #68	@ 0x44
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8008526:	78fa      	ldrb	r2, [r7, #3]
 8008528:	6879      	ldr	r1, [r7, #4]
 800852a:	4613      	mov	r3, r2
 800852c:	011b      	lsls	r3, r3, #4
 800852e:	1a9b      	subs	r3, r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	440b      	add	r3, r1
 8008534:	334c      	adds	r3, #76	@ 0x4c
 8008536:	2204      	movs	r2, #4
 8008538:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800853a:	e022      	b.n	8008582 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800853c:	78fa      	ldrb	r2, [r7, #3]
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	4613      	mov	r3, r2
 8008542:	011b      	lsls	r3, r3, #4
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	440b      	add	r3, r1
 800854a:	334c      	adds	r3, #76	@ 0x4c
 800854c:	2202      	movs	r2, #2
 800854e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8008550:	78fb      	ldrb	r3, [r7, #3]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	4413      	add	r3, r2
 8008558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008566:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800856e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8008570:	78fb      	ldrb	r3, [r7, #3]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	4413      	add	r3, r2
 8008578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800857c:	461a      	mov	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8008582:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4613      	mov	r3, r2
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	1a9b      	subs	r3, r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	440b      	add	r3, r1
 8008592:	334c      	adds	r3, #76	@ 0x4c
 8008594:	781a      	ldrb	r2, [r3, #0]
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	4619      	mov	r1, r3
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f005 fd04 	bl	800dfa8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80085a0:	e002      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80085a2:	bf00      	nop
 80085a4:	e000      	b.n	80085a8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80085a6:	bf00      	nop
  }
}
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b08a      	sub	sp, #40	@ 0x28
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085be:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	0c5b      	lsrs	r3, r3, #17
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	091b      	lsrs	r3, r3, #4
 80085de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085e2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d004      	beq.n	80085f4 <HCD_RXQLVL_IRQHandler+0x46>
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b05      	cmp	r3, #5
 80085ee:	f000 80b6 	beq.w	800875e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80085f2:	e0b7      	b.n	8008764 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 80b3 	beq.w	8008762 <HCD_RXQLVL_IRQHandler+0x1b4>
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	4613      	mov	r3, r2
 8008602:	011b      	lsls	r3, r3, #4
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	440b      	add	r3, r1
 800860a:	332c      	adds	r3, #44	@ 0x2c
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80a7 	beq.w	8008762 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8008614:	6879      	ldr	r1, [r7, #4]
 8008616:	69ba      	ldr	r2, [r7, #24]
 8008618:	4613      	mov	r3, r2
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	1a9b      	subs	r3, r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	440b      	add	r3, r1
 8008622:	3338      	adds	r3, #56	@ 0x38
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	18d1      	adds	r1, r2, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	4613      	mov	r3, r2
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	1a9b      	subs	r3, r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4403      	add	r3, r0
 8008638:	3334      	adds	r3, #52	@ 0x34
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4299      	cmp	r1, r3
 800863e:	f200 8083 	bhi.w	8008748 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	69ba      	ldr	r2, [r7, #24]
 800864a:	4613      	mov	r3, r2
 800864c:	011b      	lsls	r3, r3, #4
 800864e:	1a9b      	subs	r3, r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	332c      	adds	r3, #44	@ 0x2c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	b292      	uxth	r2, r2
 800865c:	4619      	mov	r1, r3
 800865e:	f002 fb3b 	bl	800acd8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	4613      	mov	r3, r2
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	1a9b      	subs	r3, r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	332c      	adds	r3, #44	@ 0x2c
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	18d1      	adds	r1, r2, r3
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	69ba      	ldr	r2, [r7, #24]
 800867c:	4613      	mov	r3, r2
 800867e:	011b      	lsls	r3, r3, #4
 8008680:	1a9b      	subs	r3, r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	4403      	add	r3, r0
 8008686:	332c      	adds	r3, #44	@ 0x2c
 8008688:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	69ba      	ldr	r2, [r7, #24]
 800868e:	4613      	mov	r3, r2
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	1a9b      	subs	r3, r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	440b      	add	r3, r1
 8008698:	3338      	adds	r3, #56	@ 0x38
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	18d1      	adds	r1, r2, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	69ba      	ldr	r2, [r7, #24]
 80086a4:	4613      	mov	r3, r2
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	1a9b      	subs	r3, r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4403      	add	r3, r0
 80086ae:	3338      	adds	r3, #56	@ 0x38
 80086b0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80086b2:	69bb      	ldr	r3, [r7, #24]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	0cdb      	lsrs	r3, r3, #19
 80086c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086c6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	4613      	mov	r3, r2
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	1a9b      	subs	r3, r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	3328      	adds	r3, #40	@ 0x28
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	4293      	cmp	r3, r2
 80086e0:	d13f      	bne.n	8008762 <HCD_RXQLVL_IRQHandler+0x1b4>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d03c      	beq.n	8008762 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80086fe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008706:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	015a      	lsls	r2, r3, #5
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	4413      	add	r3, r2
 8008710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008714:	461a      	mov	r2, r3
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	69ba      	ldr	r2, [r7, #24]
 800871e:	4613      	mov	r3, r2
 8008720:	011b      	lsls	r3, r3, #4
 8008722:	1a9b      	subs	r3, r3, r2
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	440b      	add	r3, r1
 8008728:	333c      	adds	r3, #60	@ 0x3c
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f083 0301 	eor.w	r3, r3, #1
 8008730:	b2d8      	uxtb	r0, r3
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	4613      	mov	r3, r2
 8008738:	011b      	lsls	r3, r3, #4
 800873a:	1a9b      	subs	r3, r3, r2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	440b      	add	r3, r1
 8008740:	333c      	adds	r3, #60	@ 0x3c
 8008742:	4602      	mov	r2, r0
 8008744:	701a      	strb	r2, [r3, #0]
      break;
 8008746:	e00c      	b.n	8008762 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	4613      	mov	r3, r2
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	1a9b      	subs	r3, r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	440b      	add	r3, r1
 8008756:	334c      	adds	r3, #76	@ 0x4c
 8008758:	2204      	movs	r2, #4
 800875a:	701a      	strb	r2, [r3, #0]
      break;
 800875c:	e001      	b.n	8008762 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800875e:	bf00      	nop
 8008760:	e000      	b.n	8008764 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8008762:	bf00      	nop
  }
}
 8008764:	bf00      	nop
 8008766:	3728      	adds	r7, #40	@ 0x28
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008798:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d10b      	bne.n	80087bc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f003 0301 	and.w	r3, r3, #1
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d102      	bne.n	80087b4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f005 fbde 	bl	800df70 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f043 0302 	orr.w	r3, r3, #2
 80087ba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d132      	bne.n	800882c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	f043 0308 	orr.w	r3, r3, #8
 80087cc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b04      	cmp	r3, #4
 80087d6:	d126      	bne.n	8008826 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7a5b      	ldrb	r3, [r3, #9]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d113      	bne.n	8008808 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80087e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087ea:	d106      	bne.n	80087fa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2102      	movs	r1, #2
 80087f2:	4618      	mov	r0, r3
 80087f4:	f002 fc00 	bl	800aff8 <USB_InitFSLSPClkSel>
 80087f8:	e011      	b.n	800881e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2101      	movs	r1, #1
 8008800:	4618      	mov	r0, r3
 8008802:	f002 fbf9 	bl	800aff8 <USB_InitFSLSPClkSel>
 8008806:	e00a      	b.n	800881e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	79db      	ldrb	r3, [r3, #7]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d106      	bne.n	800881e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008816:	461a      	mov	r2, r3
 8008818:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800881c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f005 fbd0 	bl	800dfc4 <HAL_HCD_PortEnabled_Callback>
 8008824:	e002      	b.n	800882c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f005 fbda 	bl	800dfe0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b20      	cmp	r3, #32
 8008834:	d103      	bne.n	800883e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	f043 0320 	orr.w	r3, r3, #32
 800883c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008844:	461a      	mov	r2, r3
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	6013      	str	r3, [r2, #0]
}
 800884a:	bf00      	nop
 800884c:	3718      	adds	r7, #24
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e12b      	b.n	8008abe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7fd f8e0 	bl	8005a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2224      	movs	r2, #36	@ 0x24
 8008884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f022 0201 	bic.w	r2, r2, #1
 8008896:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80088a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80088b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80088b8:	f001 fa20 	bl	8009cfc <HAL_RCC_GetPCLK1Freq>
 80088bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	4a81      	ldr	r2, [pc, #516]	@ (8008ac8 <HAL_I2C_Init+0x274>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d807      	bhi.n	80088d8 <HAL_I2C_Init+0x84>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4a80      	ldr	r2, [pc, #512]	@ (8008acc <HAL_I2C_Init+0x278>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	bf94      	ite	ls
 80088d0:	2301      	movls	r3, #1
 80088d2:	2300      	movhi	r3, #0
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	e006      	b.n	80088e6 <HAL_I2C_Init+0x92>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4a7d      	ldr	r2, [pc, #500]	@ (8008ad0 <HAL_I2C_Init+0x27c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	bf94      	ite	ls
 80088e0:	2301      	movls	r3, #1
 80088e2:	2300      	movhi	r3, #0
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d001      	beq.n	80088ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
 80088ec:	e0e7      	b.n	8008abe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4a78      	ldr	r2, [pc, #480]	@ (8008ad4 <HAL_I2C_Init+0x280>)
 80088f2:	fba2 2303 	umull	r2, r3, r2, r3
 80088f6:	0c9b      	lsrs	r3, r3, #18
 80088f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	430a      	orrs	r2, r1
 800890c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	4a6a      	ldr	r2, [pc, #424]	@ (8008ac8 <HAL_I2C_Init+0x274>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d802      	bhi.n	8008928 <HAL_I2C_Init+0xd4>
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	3301      	adds	r3, #1
 8008926:	e009      	b.n	800893c <HAL_I2C_Init+0xe8>
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	4a69      	ldr	r2, [pc, #420]	@ (8008ad8 <HAL_I2C_Init+0x284>)
 8008934:	fba2 2303 	umull	r2, r3, r2, r3
 8008938:	099b      	lsrs	r3, r3, #6
 800893a:	3301      	adds	r3, #1
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	6812      	ldr	r2, [r2, #0]
 8008940:	430b      	orrs	r3, r1
 8008942:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800894e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	495c      	ldr	r1, [pc, #368]	@ (8008ac8 <HAL_I2C_Init+0x274>)
 8008958:	428b      	cmp	r3, r1
 800895a:	d819      	bhi.n	8008990 <HAL_I2C_Init+0x13c>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	1e59      	subs	r1, r3, #1
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	fbb1 f3f3 	udiv	r3, r1, r3
 800896a:	1c59      	adds	r1, r3, #1
 800896c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008970:	400b      	ands	r3, r1
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <HAL_I2C_Init+0x138>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	1e59      	subs	r1, r3, #1
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	fbb1 f3f3 	udiv	r3, r1, r3
 8008984:	3301      	adds	r3, #1
 8008986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800898a:	e051      	b.n	8008a30 <HAL_I2C_Init+0x1dc>
 800898c:	2304      	movs	r3, #4
 800898e:	e04f      	b.n	8008a30 <HAL_I2C_Init+0x1dc>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d111      	bne.n	80089bc <HAL_I2C_Init+0x168>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1e58      	subs	r0, r3, #1
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6859      	ldr	r1, [r3, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	440b      	add	r3, r1
 80089a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80089aa:	3301      	adds	r3, #1
 80089ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	bf0c      	ite	eq
 80089b4:	2301      	moveq	r3, #1
 80089b6:	2300      	movne	r3, #0
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	e012      	b.n	80089e2 <HAL_I2C_Init+0x18e>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	1e58      	subs	r0, r3, #1
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6859      	ldr	r1, [r3, #4]
 80089c4:	460b      	mov	r3, r1
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	440b      	add	r3, r1
 80089ca:	0099      	lsls	r1, r3, #2
 80089cc:	440b      	add	r3, r1
 80089ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80089d2:	3301      	adds	r3, #1
 80089d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089d8:	2b00      	cmp	r3, #0
 80089da:	bf0c      	ite	eq
 80089dc:	2301      	moveq	r3, #1
 80089de:	2300      	movne	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <HAL_I2C_Init+0x196>
 80089e6:	2301      	movs	r3, #1
 80089e8:	e022      	b.n	8008a30 <HAL_I2C_Init+0x1dc>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10e      	bne.n	8008a10 <HAL_I2C_Init+0x1bc>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1e58      	subs	r0, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6859      	ldr	r1, [r3, #4]
 80089fa:	460b      	mov	r3, r1
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	440b      	add	r3, r1
 8008a00:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a04:	3301      	adds	r3, #1
 8008a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a0e:	e00f      	b.n	8008a30 <HAL_I2C_Init+0x1dc>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	1e58      	subs	r0, r3, #1
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6859      	ldr	r1, [r3, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	0099      	lsls	r1, r3, #2
 8008a20:	440b      	add	r3, r1
 8008a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a26:	3301      	adds	r3, #1
 8008a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	6809      	ldr	r1, [r1, #0]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	69da      	ldr	r2, [r3, #28]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008a5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	6911      	ldr	r1, [r2, #16]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	68d2      	ldr	r2, [r2, #12]
 8008a6a:	4311      	orrs	r1, r2
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	6812      	ldr	r2, [r2, #0]
 8008a70:	430b      	orrs	r3, r1
 8008a72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
 8008a7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	695a      	ldr	r2, [r3, #20]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0201 	orr.w	r2, r2, #1
 8008a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2220      	movs	r2, #32
 8008aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	000186a0 	.word	0x000186a0
 8008acc:	001e847f 	.word	0x001e847f
 8008ad0:	003d08ff 	.word	0x003d08ff
 8008ad4:	431bde83 	.word	0x431bde83
 8008ad8:	10624dd3 	.word	0x10624dd3

08008adc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b088      	sub	sp, #32
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e128      	b.n	8008d40 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a90      	ldr	r2, [pc, #576]	@ (8008d48 <HAL_I2S_Init+0x26c>)
 8008b06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7fc ffe1 	bl	8005ad0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2202      	movs	r2, #2
 8008b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	6812      	ldr	r2, [r2, #0]
 8008b20:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008b24:	f023 030f 	bic.w	r3, r3, #15
 8008b28:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2202      	movs	r2, #2
 8008b30:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d060      	beq.n	8008bfc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d102      	bne.n	8008b48 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008b42:	2310      	movs	r3, #16
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	e001      	b.n	8008b4c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008b48:	2320      	movs	r3, #32
 8008b4a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	2b20      	cmp	r3, #32
 8008b52:	d802      	bhi.n	8008b5a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8008b5a:	2001      	movs	r0, #1
 8008b5c:	f001 f9d8 	bl	8009f10 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b60:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b6a:	d125      	bne.n	8008bb8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d010      	beq.n	8008b96 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	009b      	lsls	r3, r3, #2
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	005b      	lsls	r3, r3, #1
 8008b86:	461a      	mov	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	695b      	ldr	r3, [r3, #20]
 8008b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b90:	3305      	adds	r3, #5
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	e01f      	b.n	8008bd6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	461a      	mov	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb2:	3305      	adds	r3, #5
 8008bb4:	613b      	str	r3, [r7, #16]
 8008bb6:	e00e      	b.n	8008bd6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	461a      	mov	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	695b      	ldr	r3, [r3, #20]
 8008bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bd2:	3305      	adds	r3, #5
 8008bd4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	4a5c      	ldr	r2, [pc, #368]	@ (8008d4c <HAL_I2S_Init+0x270>)
 8008bda:	fba2 2303 	umull	r2, r3, r2, r3
 8008bde:	08db      	lsrs	r3, r3, #3
 8008be0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8008bea:	693a      	ldr	r2, [r7, #16]
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	61bb      	str	r3, [r7, #24]
 8008bfa:	e003      	b.n	8008c04 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d902      	bls.n	8008c10 <HAL_I2S_Init+0x134>
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	2bff      	cmp	r3, #255	@ 0xff
 8008c0e:	d907      	bls.n	8008c20 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c14:	f043 0210 	orr.w	r2, r3, #16
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e08f      	b.n	8008d40 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	691a      	ldr	r2, [r3, #16]
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	ea42 0103 	orr.w	r1, r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	430a      	orrs	r2, r1
 8008c32:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008c3e:	f023 030f 	bic.w	r3, r3, #15
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6851      	ldr	r1, [r2, #4]
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6892      	ldr	r2, [r2, #8]
 8008c4a:	4311      	orrs	r1, r2
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	68d2      	ldr	r2, [r2, #12]
 8008c50:	4311      	orrs	r1, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6992      	ldr	r2, [r2, #24]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	431a      	orrs	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c62:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6a1b      	ldr	r3, [r3, #32]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d161      	bne.n	8008d30 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a38      	ldr	r2, [pc, #224]	@ (8008d50 <HAL_I2S_Init+0x274>)
 8008c70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a37      	ldr	r2, [pc, #220]	@ (8008d54 <HAL_I2S_Init+0x278>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d101      	bne.n	8008c80 <HAL_I2S_Init+0x1a4>
 8008c7c:	4b36      	ldr	r3, [pc, #216]	@ (8008d58 <HAL_I2S_Init+0x27c>)
 8008c7e:	e001      	b.n	8008c84 <HAL_I2S_Init+0x1a8>
 8008c80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6812      	ldr	r2, [r2, #0]
 8008c8a:	4932      	ldr	r1, [pc, #200]	@ (8008d54 <HAL_I2S_Init+0x278>)
 8008c8c:	428a      	cmp	r2, r1
 8008c8e:	d101      	bne.n	8008c94 <HAL_I2S_Init+0x1b8>
 8008c90:	4a31      	ldr	r2, [pc, #196]	@ (8008d58 <HAL_I2S_Init+0x27c>)
 8008c92:	e001      	b.n	8008c98 <HAL_I2S_Init+0x1bc>
 8008c94:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8008c98:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008c9c:	f023 030f 	bic.w	r3, r3, #15
 8008ca0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a2b      	ldr	r2, [pc, #172]	@ (8008d54 <HAL_I2S_Init+0x278>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d101      	bne.n	8008cb0 <HAL_I2S_Init+0x1d4>
 8008cac:	4b2a      	ldr	r3, [pc, #168]	@ (8008d58 <HAL_I2S_Init+0x27c>)
 8008cae:	e001      	b.n	8008cb4 <HAL_I2S_Init+0x1d8>
 8008cb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008cb4:	2202      	movs	r2, #2
 8008cb6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a25      	ldr	r2, [pc, #148]	@ (8008d54 <HAL_I2S_Init+0x278>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d101      	bne.n	8008cc6 <HAL_I2S_Init+0x1ea>
 8008cc2:	4b25      	ldr	r3, [pc, #148]	@ (8008d58 <HAL_I2S_Init+0x27c>)
 8008cc4:	e001      	b.n	8008cca <HAL_I2S_Init+0x1ee>
 8008cc6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cd6:	d003      	beq.n	8008ce0 <HAL_I2S_Init+0x204>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d103      	bne.n	8008ce8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008ce0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ce4:	613b      	str	r3, [r7, #16]
 8008ce6:	e001      	b.n	8008cec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68db      	ldr	r3, [r3, #12]
 8008cfe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008d00:	4313      	orrs	r3, r2
 8008d02:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	699b      	ldr	r3, [r3, #24]
 8008d08:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	897b      	ldrh	r3, [r7, #10]
 8008d10:	4313      	orrs	r3, r2
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008d18:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8008d54 <HAL_I2S_Init+0x278>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d101      	bne.n	8008d28 <HAL_I2S_Init+0x24c>
 8008d24:	4b0c      	ldr	r3, [pc, #48]	@ (8008d58 <HAL_I2S_Init+0x27c>)
 8008d26:	e001      	b.n	8008d2c <HAL_I2S_Init+0x250>
 8008d28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008d2c:	897a      	ldrh	r2, [r7, #10]
 8008d2e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3720      	adds	r7, #32
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	08008e53 	.word	0x08008e53
 8008d4c:	cccccccd 	.word	0xcccccccd
 8008d50:	08008f69 	.word	0x08008f69
 8008d54:	40003800 	.word	0x40003800
 8008d58:	40003400 	.word	0x40003400

08008d5c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8008d64:	bf00      	nop
 8008d66:	370c      	adds	r7, #12
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da4:	881a      	ldrh	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db0:	1c9a      	adds	r2, r3, #2
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	3b01      	subs	r3, #1
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10e      	bne.n	8008dec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008ddc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7ff ffb8 	bl	8008d5c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008dec:	bf00      	nop
 8008dee:	3708      	adds	r7, #8
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68da      	ldr	r2, [r3, #12]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e06:	b292      	uxth	r2, r2
 8008e08:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e0e:	1c9a      	adds	r2, r3, #2
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10e      	bne.n	8008e4a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008e3a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f7ff ff93 	bl	8008d70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008e4a:	bf00      	nop
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b086      	sub	sp, #24
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b04      	cmp	r3, #4
 8008e6c:	d13a      	bne.n	8008ee4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d109      	bne.n	8008e8c <I2S_IRQHandler+0x3a>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e82:	2b40      	cmp	r3, #64	@ 0x40
 8008e84:	d102      	bne.n	8008e8c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff ffb4 	bl	8008df4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e92:	2b40      	cmp	r3, #64	@ 0x40
 8008e94:	d126      	bne.n	8008ee4 <I2S_IRQHandler+0x92>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	f003 0320 	and.w	r3, r3, #32
 8008ea0:	2b20      	cmp	r3, #32
 8008ea2:	d11f      	bne.n	8008ee4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008eb2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	613b      	str	r3, [r7, #16]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	613b      	str	r3, [r7, #16]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	613b      	str	r3, [r7, #16]
 8008ec8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2201      	movs	r2, #1
 8008ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed6:	f043 0202 	orr.w	r2, r3, #2
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff ff50 	bl	8008d84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d136      	bne.n	8008f5e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f003 0302 	and.w	r3, r3, #2
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d109      	bne.n	8008f0e <I2S_IRQHandler+0xbc>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f04:	2b80      	cmp	r3, #128	@ 0x80
 8008f06:	d102      	bne.n	8008f0e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7ff ff45 	bl	8008d98 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	f003 0308 	and.w	r3, r3, #8
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d122      	bne.n	8008f5e <I2S_IRQHandler+0x10c>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f003 0320 	and.w	r3, r3, #32
 8008f22:	2b20      	cmp	r3, #32
 8008f24:	d11b      	bne.n	8008f5e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008f34:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	60fb      	str	r3, [r7, #12]
 8008f42:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f50:	f043 0204 	orr.w	r2, r3, #4
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7ff ff13 	bl	8008d84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008f5e:	bf00      	nop
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b088      	sub	sp, #32
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a92      	ldr	r2, [pc, #584]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d101      	bne.n	8008f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008f82:	4b92      	ldr	r3, [pc, #584]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008f84:	e001      	b.n	8008f8a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8008f86:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a8b      	ldr	r2, [pc, #556]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d101      	bne.n	8008fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008fa0:	4b8a      	ldr	r3, [pc, #552]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008fa2:	e001      	b.n	8008fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008fa4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fb4:	d004      	beq.n	8008fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f040 8099 	bne.w	80090f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d107      	bne.n	8008fda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d002      	beq.n	8008fda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f925 	bl	8009224 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	f003 0301 	and.w	r3, r3, #1
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d107      	bne.n	8008ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f9c8 	bl	8009384 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ffa:	2b40      	cmp	r3, #64	@ 0x40
 8008ffc:	d13a      	bne.n	8009074 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f003 0320 	and.w	r3, r3, #32
 8009004:	2b00      	cmp	r3, #0
 8009006:	d035      	beq.n	8009074 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a6e      	ldr	r2, [pc, #440]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d101      	bne.n	8009016 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8009012:	4b6e      	ldr	r3, [pc, #440]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009014:	e001      	b.n	800901a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8009016:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4969      	ldr	r1, [pc, #420]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009022:	428b      	cmp	r3, r1
 8009024:	d101      	bne.n	800902a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8009026:	4b69      	ldr	r3, [pc, #420]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009028:	e001      	b.n	800902e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800902a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800902e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009032:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009042:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	60fb      	str	r3, [r7, #12]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009066:	f043 0202 	orr.w	r2, r3, #2
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff fe88 	bl	8008d84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	f003 0308 	and.w	r3, r3, #8
 800907a:	2b08      	cmp	r3, #8
 800907c:	f040 80c3 	bne.w	8009206 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f003 0320 	and.w	r3, r3, #32
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 80bd 	beq.w	8009206 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800909a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a49      	ldr	r2, [pc, #292]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d101      	bne.n	80090aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80090a6:	4b49      	ldr	r3, [pc, #292]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80090a8:	e001      	b.n	80090ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80090aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80090ae:	685a      	ldr	r2, [r3, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4944      	ldr	r1, [pc, #272]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80090b6:	428b      	cmp	r3, r1
 80090b8:	d101      	bne.n	80090be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80090ba:	4b44      	ldr	r3, [pc, #272]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80090bc:	e001      	b.n	80090c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80090be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80090c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80090c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80090c8:	2300      	movs	r3, #0
 80090ca:	60bb      	str	r3, [r7, #8]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	60bb      	str	r3, [r7, #8]
 80090d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090e2:	f043 0204 	orr.w	r2, r3, #4
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff fe4a 	bl	8008d84 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80090f0:	e089      	b.n	8009206 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b02      	cmp	r3, #2
 80090fa:	d107      	bne.n	800910c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f8be 	bl	8009288 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b01      	cmp	r3, #1
 8009114:	d107      	bne.n	8009126 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f8fd 	bl	8009320 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800912c:	2b40      	cmp	r3, #64	@ 0x40
 800912e:	d12f      	bne.n	8009190 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	d02a      	beq.n	8009190 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	685a      	ldr	r2, [r3, #4]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009148:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a1e      	ldr	r2, [pc, #120]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d101      	bne.n	8009158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8009154:	4b1d      	ldr	r3, [pc, #116]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8009156:	e001      	b.n	800915c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8009158:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4919      	ldr	r1, [pc, #100]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8009164:	428b      	cmp	r3, r1
 8009166:	d101      	bne.n	800916c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8009168:	4b18      	ldr	r3, [pc, #96]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800916a:	e001      	b.n	8009170 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800916c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8009170:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009174:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2201      	movs	r2, #1
 800917a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009182:	f043 0202 	orr.w	r2, r3, #2
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff fdfa 	bl	8008d84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b08      	cmp	r3, #8
 8009198:	d136      	bne.n	8009208 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f003 0320 	and.w	r3, r3, #32
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d031      	beq.n	8009208 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a07      	ldr	r2, [pc, #28]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d101      	bne.n	80091b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80091ae:	4b07      	ldr	r3, [pc, #28]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80091b0:	e001      	b.n	80091b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80091b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80091b6:	685a      	ldr	r2, [r3, #4]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4902      	ldr	r1, [pc, #8]	@ (80091c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80091be:	428b      	cmp	r3, r1
 80091c0:	d106      	bne.n	80091d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80091c2:	4b02      	ldr	r3, [pc, #8]	@ (80091cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80091c4:	e006      	b.n	80091d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80091c6:	bf00      	nop
 80091c8:	40003800 	.word	0x40003800
 80091cc:	40003400 	.word	0x40003400
 80091d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80091d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80091d8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80091e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091f6:	f043 0204 	orr.w	r2, r3, #4
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff fdc0 	bl	8008d84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009204:	e000      	b.n	8009208 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8009206:	bf00      	nop
}
 8009208:	bf00      	nop
 800920a:	3720      	adds	r7, #32
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr

08009224 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009230:	1c99      	adds	r1, r3, #2
 8009232:	687a      	ldr	r2, [r7, #4]
 8009234:	6251      	str	r1, [r2, #36]	@ 0x24
 8009236:	881a      	ldrh	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009242:	b29b      	uxth	r3, r3
 8009244:	3b01      	subs	r3, #1
 8009246:	b29a      	uxth	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009250:	b29b      	uxth	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	d113      	bne.n	800927e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009264:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d106      	bne.n	800927e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7ff ffc9 	bl	8009210 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009294:	1c99      	adds	r1, r3, #2
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	6251      	str	r1, [r2, #36]	@ 0x24
 800929a:	8819      	ldrh	r1, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009318 <I2SEx_TxISR_I2SExt+0x90>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d101      	bne.n	80092aa <I2SEx_TxISR_I2SExt+0x22>
 80092a6:	4b1d      	ldr	r3, [pc, #116]	@ (800931c <I2SEx_TxISR_I2SExt+0x94>)
 80092a8:	e001      	b.n	80092ae <I2SEx_TxISR_I2SExt+0x26>
 80092aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80092ae:	460a      	mov	r2, r1
 80092b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d121      	bne.n	800930e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a12      	ldr	r2, [pc, #72]	@ (8009318 <I2SEx_TxISR_I2SExt+0x90>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d101      	bne.n	80092d8 <I2SEx_TxISR_I2SExt+0x50>
 80092d4:	4b11      	ldr	r3, [pc, #68]	@ (800931c <I2SEx_TxISR_I2SExt+0x94>)
 80092d6:	e001      	b.n	80092dc <I2SEx_TxISR_I2SExt+0x54>
 80092d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	490d      	ldr	r1, [pc, #52]	@ (8009318 <I2SEx_TxISR_I2SExt+0x90>)
 80092e4:	428b      	cmp	r3, r1
 80092e6:	d101      	bne.n	80092ec <I2SEx_TxISR_I2SExt+0x64>
 80092e8:	4b0c      	ldr	r3, [pc, #48]	@ (800931c <I2SEx_TxISR_I2SExt+0x94>)
 80092ea:	e001      	b.n	80092f0 <I2SEx_TxISR_I2SExt+0x68>
 80092ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80092f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80092f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d106      	bne.n	800930e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff ff81 	bl	8009210 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800930e:	bf00      	nop
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	40003800 	.word	0x40003800
 800931c:	40003400 	.word	0x40003400

08009320 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	68d8      	ldr	r0, [r3, #12]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009332:	1c99      	adds	r1, r3, #2
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8009338:	b282      	uxth	r2, r0
 800933a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009340:	b29b      	uxth	r3, r3
 8009342:	3b01      	subs	r3, #1
 8009344:	b29a      	uxth	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800934e:	b29b      	uxth	r3, r3
 8009350:	2b00      	cmp	r3, #0
 8009352:	d113      	bne.n	800937c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8009362:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009368:	b29b      	uxth	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f7ff ff4a 	bl	8009210 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800937c:	bf00      	nop
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}

08009384 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a20      	ldr	r2, [pc, #128]	@ (8009414 <I2SEx_RxISR_I2SExt+0x90>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d101      	bne.n	800939a <I2SEx_RxISR_I2SExt+0x16>
 8009396:	4b20      	ldr	r3, [pc, #128]	@ (8009418 <I2SEx_RxISR_I2SExt+0x94>)
 8009398:	e001      	b.n	800939e <I2SEx_RxISR_I2SExt+0x1a>
 800939a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800939e:	68d8      	ldr	r0, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a4:	1c99      	adds	r1, r3, #2
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80093aa:	b282      	uxth	r2, r0
 80093ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	3b01      	subs	r3, #1
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d121      	bne.n	800940a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a12      	ldr	r2, [pc, #72]	@ (8009414 <I2SEx_RxISR_I2SExt+0x90>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d101      	bne.n	80093d4 <I2SEx_RxISR_I2SExt+0x50>
 80093d0:	4b11      	ldr	r3, [pc, #68]	@ (8009418 <I2SEx_RxISR_I2SExt+0x94>)
 80093d2:	e001      	b.n	80093d8 <I2SEx_RxISR_I2SExt+0x54>
 80093d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80093d8:	685a      	ldr	r2, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	490d      	ldr	r1, [pc, #52]	@ (8009414 <I2SEx_RxISR_I2SExt+0x90>)
 80093e0:	428b      	cmp	r3, r1
 80093e2:	d101      	bne.n	80093e8 <I2SEx_RxISR_I2SExt+0x64>
 80093e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009418 <I2SEx_RxISR_I2SExt+0x94>)
 80093e6:	e001      	b.n	80093ec <I2SEx_RxISR_I2SExt+0x68>
 80093e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80093ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80093f0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d106      	bne.n	800940a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2201      	movs	r2, #1
 8009400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f7ff ff03 	bl	8009210 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800940a:	bf00      	nop
 800940c:	3708      	adds	r7, #8
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	40003800 	.word	0x40003800
 8009418:	40003400 	.word	0x40003400

0800941c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d101      	bne.n	800942e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e267      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0301 	and.w	r3, r3, #1
 8009436:	2b00      	cmp	r3, #0
 8009438:	d075      	beq.n	8009526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800943a:	4b88      	ldr	r3, [pc, #544]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f003 030c 	and.w	r3, r3, #12
 8009442:	2b04      	cmp	r3, #4
 8009444:	d00c      	beq.n	8009460 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009446:	4b85      	ldr	r3, [pc, #532]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009448:	689b      	ldr	r3, [r3, #8]
 800944a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800944e:	2b08      	cmp	r3, #8
 8009450:	d112      	bne.n	8009478 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009452:	4b82      	ldr	r3, [pc, #520]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800945a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800945e:	d10b      	bne.n	8009478 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009460:	4b7e      	ldr	r3, [pc, #504]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d05b      	beq.n	8009524 <HAL_RCC_OscConfig+0x108>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d157      	bne.n	8009524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e242      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009480:	d106      	bne.n	8009490 <HAL_RCC_OscConfig+0x74>
 8009482:	4b76      	ldr	r3, [pc, #472]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a75      	ldr	r2, [pc, #468]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800948c:	6013      	str	r3, [r2, #0]
 800948e:	e01d      	b.n	80094cc <HAL_RCC_OscConfig+0xb0>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009498:	d10c      	bne.n	80094b4 <HAL_RCC_OscConfig+0x98>
 800949a:	4b70      	ldr	r3, [pc, #448]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a6f      	ldr	r2, [pc, #444]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80094a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094a4:	6013      	str	r3, [r2, #0]
 80094a6:	4b6d      	ldr	r3, [pc, #436]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a6c      	ldr	r2, [pc, #432]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80094ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094b0:	6013      	str	r3, [r2, #0]
 80094b2:	e00b      	b.n	80094cc <HAL_RCC_OscConfig+0xb0>
 80094b4:	4b69      	ldr	r3, [pc, #420]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a68      	ldr	r2, [pc, #416]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80094ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	4b66      	ldr	r3, [pc, #408]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a65      	ldr	r2, [pc, #404]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80094c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d013      	beq.n	80094fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094d4:	f7fc fd92 	bl	8005ffc <HAL_GetTick>
 80094d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094da:	e008      	b.n	80094ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80094dc:	f7fc fd8e 	bl	8005ffc <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b64      	cmp	r3, #100	@ 0x64
 80094e8:	d901      	bls.n	80094ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e207      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80094ee:	4b5b      	ldr	r3, [pc, #364]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0f0      	beq.n	80094dc <HAL_RCC_OscConfig+0xc0>
 80094fa:	e014      	b.n	8009526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094fc:	f7fc fd7e 	bl	8005ffc <HAL_GetTick>
 8009500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009502:	e008      	b.n	8009516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009504:	f7fc fd7a 	bl	8005ffc <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	2b64      	cmp	r3, #100	@ 0x64
 8009510:	d901      	bls.n	8009516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e1f3      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009516:	4b51      	ldr	r3, [pc, #324]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1f0      	bne.n	8009504 <HAL_RCC_OscConfig+0xe8>
 8009522:	e000      	b.n	8009526 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0302 	and.w	r3, r3, #2
 800952e:	2b00      	cmp	r3, #0
 8009530:	d063      	beq.n	80095fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009532:	4b4a      	ldr	r3, [pc, #296]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 030c 	and.w	r3, r3, #12
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00b      	beq.n	8009556 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800953e:	4b47      	ldr	r3, [pc, #284]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009546:	2b08      	cmp	r3, #8
 8009548:	d11c      	bne.n	8009584 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800954a:	4b44      	ldr	r3, [pc, #272]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d116      	bne.n	8009584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009556:	4b41      	ldr	r3, [pc, #260]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d005      	beq.n	800956e <HAL_RCC_OscConfig+0x152>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	2b01      	cmp	r3, #1
 8009568:	d001      	beq.n	800956e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e1c7      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800956e:	4b3b      	ldr	r3, [pc, #236]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	00db      	lsls	r3, r3, #3
 800957c:	4937      	ldr	r1, [pc, #220]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 800957e:	4313      	orrs	r3, r2
 8009580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009582:	e03a      	b.n	80095fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d020      	beq.n	80095ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800958c:	4b34      	ldr	r3, [pc, #208]	@ (8009660 <HAL_RCC_OscConfig+0x244>)
 800958e:	2201      	movs	r2, #1
 8009590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009592:	f7fc fd33 	bl	8005ffc <HAL_GetTick>
 8009596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009598:	e008      	b.n	80095ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800959a:	f7fc fd2f 	bl	8005ffc <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d901      	bls.n	80095ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e1a8      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095ac:	4b2b      	ldr	r3, [pc, #172]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0302 	and.w	r3, r3, #2
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0f0      	beq.n	800959a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095b8:	4b28      	ldr	r3, [pc, #160]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	00db      	lsls	r3, r3, #3
 80095c6:	4925      	ldr	r1, [pc, #148]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80095c8:	4313      	orrs	r3, r2
 80095ca:	600b      	str	r3, [r1, #0]
 80095cc:	e015      	b.n	80095fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80095ce:	4b24      	ldr	r3, [pc, #144]	@ (8009660 <HAL_RCC_OscConfig+0x244>)
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d4:	f7fc fd12 	bl	8005ffc <HAL_GetTick>
 80095d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095da:	e008      	b.n	80095ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095dc:	f7fc fd0e 	bl	8005ffc <HAL_GetTick>
 80095e0:	4602      	mov	r2, r0
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	1ad3      	subs	r3, r2, r3
 80095e6:	2b02      	cmp	r3, #2
 80095e8:	d901      	bls.n	80095ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e187      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80095ee:	4b1b      	ldr	r3, [pc, #108]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f0      	bne.n	80095dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0308 	and.w	r3, r3, #8
 8009602:	2b00      	cmp	r3, #0
 8009604:	d036      	beq.n	8009674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d016      	beq.n	800963c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800960e:	4b15      	ldr	r3, [pc, #84]	@ (8009664 <HAL_RCC_OscConfig+0x248>)
 8009610:	2201      	movs	r2, #1
 8009612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009614:	f7fc fcf2 	bl	8005ffc <HAL_GetTick>
 8009618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800961a:	e008      	b.n	800962e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800961c:	f7fc fcee 	bl	8005ffc <HAL_GetTick>
 8009620:	4602      	mov	r2, r0
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	1ad3      	subs	r3, r2, r3
 8009626:	2b02      	cmp	r3, #2
 8009628:	d901      	bls.n	800962e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800962a:	2303      	movs	r3, #3
 800962c:	e167      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800962e:	4b0b      	ldr	r3, [pc, #44]	@ (800965c <HAL_RCC_OscConfig+0x240>)
 8009630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d0f0      	beq.n	800961c <HAL_RCC_OscConfig+0x200>
 800963a:	e01b      	b.n	8009674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800963c:	4b09      	ldr	r3, [pc, #36]	@ (8009664 <HAL_RCC_OscConfig+0x248>)
 800963e:	2200      	movs	r2, #0
 8009640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009642:	f7fc fcdb 	bl	8005ffc <HAL_GetTick>
 8009646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009648:	e00e      	b.n	8009668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800964a:	f7fc fcd7 	bl	8005ffc <HAL_GetTick>
 800964e:	4602      	mov	r2, r0
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	2b02      	cmp	r3, #2
 8009656:	d907      	bls.n	8009668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009658:	2303      	movs	r3, #3
 800965a:	e150      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
 800965c:	40023800 	.word	0x40023800
 8009660:	42470000 	.word	0x42470000
 8009664:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009668:	4b88      	ldr	r3, [pc, #544]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 800966a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1ea      	bne.n	800964a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0304 	and.w	r3, r3, #4
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 8097 	beq.w	80097b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009682:	2300      	movs	r3, #0
 8009684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009686:	4b81      	ldr	r3, [pc, #516]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800968a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800968e:	2b00      	cmp	r3, #0
 8009690:	d10f      	bne.n	80096b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009692:	2300      	movs	r3, #0
 8009694:	60bb      	str	r3, [r7, #8]
 8009696:	4b7d      	ldr	r3, [pc, #500]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969a:	4a7c      	ldr	r2, [pc, #496]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 800969c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80096a2:	4b7a      	ldr	r3, [pc, #488]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 80096a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096aa:	60bb      	str	r3, [r7, #8]
 80096ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096ae:	2301      	movs	r3, #1
 80096b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096b2:	4b77      	ldr	r3, [pc, #476]	@ (8009890 <HAL_RCC_OscConfig+0x474>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d118      	bne.n	80096f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80096be:	4b74      	ldr	r3, [pc, #464]	@ (8009890 <HAL_RCC_OscConfig+0x474>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a73      	ldr	r2, [pc, #460]	@ (8009890 <HAL_RCC_OscConfig+0x474>)
 80096c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80096ca:	f7fc fc97 	bl	8005ffc <HAL_GetTick>
 80096ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096d0:	e008      	b.n	80096e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096d2:	f7fc fc93 	bl	8005ffc <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d901      	bls.n	80096e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80096e0:	2303      	movs	r3, #3
 80096e2:	e10c      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096e4:	4b6a      	ldr	r3, [pc, #424]	@ (8009890 <HAL_RCC_OscConfig+0x474>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d0f0      	beq.n	80096d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d106      	bne.n	8009706 <HAL_RCC_OscConfig+0x2ea>
 80096f8:	4b64      	ldr	r3, [pc, #400]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 80096fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096fc:	4a63      	ldr	r2, [pc, #396]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 80096fe:	f043 0301 	orr.w	r3, r3, #1
 8009702:	6713      	str	r3, [r2, #112]	@ 0x70
 8009704:	e01c      	b.n	8009740 <HAL_RCC_OscConfig+0x324>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	2b05      	cmp	r3, #5
 800970c:	d10c      	bne.n	8009728 <HAL_RCC_OscConfig+0x30c>
 800970e:	4b5f      	ldr	r3, [pc, #380]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009712:	4a5e      	ldr	r2, [pc, #376]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009714:	f043 0304 	orr.w	r3, r3, #4
 8009718:	6713      	str	r3, [r2, #112]	@ 0x70
 800971a:	4b5c      	ldr	r3, [pc, #368]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 800971c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800971e:	4a5b      	ldr	r2, [pc, #364]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009720:	f043 0301 	orr.w	r3, r3, #1
 8009724:	6713      	str	r3, [r2, #112]	@ 0x70
 8009726:	e00b      	b.n	8009740 <HAL_RCC_OscConfig+0x324>
 8009728:	4b58      	ldr	r3, [pc, #352]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 800972a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800972c:	4a57      	ldr	r2, [pc, #348]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 800972e:	f023 0301 	bic.w	r3, r3, #1
 8009732:	6713      	str	r3, [r2, #112]	@ 0x70
 8009734:	4b55      	ldr	r3, [pc, #340]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009738:	4a54      	ldr	r2, [pc, #336]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 800973a:	f023 0304 	bic.w	r3, r3, #4
 800973e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d015      	beq.n	8009774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009748:	f7fc fc58 	bl	8005ffc <HAL_GetTick>
 800974c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800974e:	e00a      	b.n	8009766 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009750:	f7fc fc54 	bl	8005ffc <HAL_GetTick>
 8009754:	4602      	mov	r2, r0
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800975e:	4293      	cmp	r3, r2
 8009760:	d901      	bls.n	8009766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009762:	2303      	movs	r3, #3
 8009764:	e0cb      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009766:	4b49      	ldr	r3, [pc, #292]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800976a:	f003 0302 	and.w	r3, r3, #2
 800976e:	2b00      	cmp	r3, #0
 8009770:	d0ee      	beq.n	8009750 <HAL_RCC_OscConfig+0x334>
 8009772:	e014      	b.n	800979e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009774:	f7fc fc42 	bl	8005ffc <HAL_GetTick>
 8009778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800977a:	e00a      	b.n	8009792 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800977c:	f7fc fc3e 	bl	8005ffc <HAL_GetTick>
 8009780:	4602      	mov	r2, r0
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	1ad3      	subs	r3, r2, r3
 8009786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800978a:	4293      	cmp	r3, r2
 800978c:	d901      	bls.n	8009792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800978e:	2303      	movs	r3, #3
 8009790:	e0b5      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009792:	4b3e      	ldr	r3, [pc, #248]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009796:	f003 0302 	and.w	r3, r3, #2
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1ee      	bne.n	800977c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800979e:	7dfb      	ldrb	r3, [r7, #23]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d105      	bne.n	80097b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097a4:	4b39      	ldr	r3, [pc, #228]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 80097a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097a8:	4a38      	ldr	r2, [pc, #224]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 80097aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 80a1 	beq.w	80098fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80097ba:	4b34      	ldr	r3, [pc, #208]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f003 030c 	and.w	r3, r3, #12
 80097c2:	2b08      	cmp	r3, #8
 80097c4:	d05c      	beq.n	8009880 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d141      	bne.n	8009852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097ce:	4b31      	ldr	r3, [pc, #196]	@ (8009894 <HAL_RCC_OscConfig+0x478>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097d4:	f7fc fc12 	bl	8005ffc <HAL_GetTick>
 80097d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097da:	e008      	b.n	80097ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80097dc:	f7fc fc0e 	bl	8005ffc <HAL_GetTick>
 80097e0:	4602      	mov	r2, r0
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	1ad3      	subs	r3, r2, r3
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	d901      	bls.n	80097ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80097ea:	2303      	movs	r3, #3
 80097ec:	e087      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80097ee:	4b27      	ldr	r3, [pc, #156]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d1f0      	bne.n	80097dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	69da      	ldr	r2, [r3, #28]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009808:	019b      	lsls	r3, r3, #6
 800980a:	431a      	orrs	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009810:	085b      	lsrs	r3, r3, #1
 8009812:	3b01      	subs	r3, #1
 8009814:	041b      	lsls	r3, r3, #16
 8009816:	431a      	orrs	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800981c:	061b      	lsls	r3, r3, #24
 800981e:	491b      	ldr	r1, [pc, #108]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009820:	4313      	orrs	r3, r2
 8009822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009824:	4b1b      	ldr	r3, [pc, #108]	@ (8009894 <HAL_RCC_OscConfig+0x478>)
 8009826:	2201      	movs	r2, #1
 8009828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800982a:	f7fc fbe7 	bl	8005ffc <HAL_GetTick>
 800982e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009830:	e008      	b.n	8009844 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009832:	f7fc fbe3 	bl	8005ffc <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d901      	bls.n	8009844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e05c      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009844:	4b11      	ldr	r3, [pc, #68]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0f0      	beq.n	8009832 <HAL_RCC_OscConfig+0x416>
 8009850:	e054      	b.n	80098fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009852:	4b10      	ldr	r3, [pc, #64]	@ (8009894 <HAL_RCC_OscConfig+0x478>)
 8009854:	2200      	movs	r2, #0
 8009856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009858:	f7fc fbd0 	bl	8005ffc <HAL_GetTick>
 800985c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800985e:	e008      	b.n	8009872 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009860:	f7fc fbcc 	bl	8005ffc <HAL_GetTick>
 8009864:	4602      	mov	r2, r0
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	2b02      	cmp	r3, #2
 800986c:	d901      	bls.n	8009872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800986e:	2303      	movs	r3, #3
 8009870:	e045      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009872:	4b06      	ldr	r3, [pc, #24]	@ (800988c <HAL_RCC_OscConfig+0x470>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1f0      	bne.n	8009860 <HAL_RCC_OscConfig+0x444>
 800987e:	e03d      	b.n	80098fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	699b      	ldr	r3, [r3, #24]
 8009884:	2b01      	cmp	r3, #1
 8009886:	d107      	bne.n	8009898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e038      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
 800988c:	40023800 	.word	0x40023800
 8009890:	40007000 	.word	0x40007000
 8009894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009898:	4b1b      	ldr	r3, [pc, #108]	@ (8009908 <HAL_RCC_OscConfig+0x4ec>)
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d028      	beq.n	80098f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d121      	bne.n	80098f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098be:	429a      	cmp	r2, r3
 80098c0:	d11a      	bne.n	80098f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80098c8:	4013      	ands	r3, r2
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80098ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d111      	bne.n	80098f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098de:	085b      	lsrs	r3, r3, #1
 80098e0:	3b01      	subs	r3, #1
 80098e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d107      	bne.n	80098f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d001      	beq.n	80098fc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e000      	b.n	80098fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	40023800 	.word	0x40023800

0800990c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	e0cc      	b.n	8009aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009920:	4b68      	ldr	r3, [pc, #416]	@ (8009ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0307 	and.w	r3, r3, #7
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	429a      	cmp	r2, r3
 800992c:	d90c      	bls.n	8009948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800992e:	4b65      	ldr	r3, [pc, #404]	@ (8009ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	b2d2      	uxtb	r2, r2
 8009934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009936:	4b63      	ldr	r3, [pc, #396]	@ (8009ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0307 	and.w	r3, r3, #7
 800993e:	683a      	ldr	r2, [r7, #0]
 8009940:	429a      	cmp	r2, r3
 8009942:	d001      	beq.n	8009948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e0b8      	b.n	8009aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0302 	and.w	r3, r3, #2
 8009950:	2b00      	cmp	r3, #0
 8009952:	d020      	beq.n	8009996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0304 	and.w	r3, r3, #4
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009960:	4b59      	ldr	r3, [pc, #356]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009962:	689b      	ldr	r3, [r3, #8]
 8009964:	4a58      	ldr	r2, [pc, #352]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800996a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0308 	and.w	r3, r3, #8
 8009974:	2b00      	cmp	r3, #0
 8009976:	d005      	beq.n	8009984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009978:	4b53      	ldr	r3, [pc, #332]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	4a52      	ldr	r2, [pc, #328]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800997e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009984:	4b50      	ldr	r3, [pc, #320]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	494d      	ldr	r1, [pc, #308]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009992:	4313      	orrs	r3, r2
 8009994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d044      	beq.n	8009a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d107      	bne.n	80099ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099aa:	4b47      	ldr	r3, [pc, #284]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d119      	bne.n	80099ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e07f      	b.n	8009aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d003      	beq.n	80099ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80099c6:	2b03      	cmp	r3, #3
 80099c8:	d107      	bne.n	80099da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099ca:	4b3f      	ldr	r3, [pc, #252]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d109      	bne.n	80099ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e06f      	b.n	8009aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80099da:	4b3b      	ldr	r3, [pc, #236]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0302 	and.w	r3, r3, #2
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d101      	bne.n	80099ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e067      	b.n	8009aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80099ea:	4b37      	ldr	r3, [pc, #220]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f023 0203 	bic.w	r2, r3, #3
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	4934      	ldr	r1, [pc, #208]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80099f8:	4313      	orrs	r3, r2
 80099fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80099fc:	f7fc fafe 	bl	8005ffc <HAL_GetTick>
 8009a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a02:	e00a      	b.n	8009a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a04:	f7fc fafa 	bl	8005ffc <HAL_GetTick>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d901      	bls.n	8009a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e04f      	b.n	8009aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	f003 020c 	and.w	r2, r3, #12
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d1eb      	bne.n	8009a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a2c:	4b25      	ldr	r3, [pc, #148]	@ (8009ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f003 0307 	and.w	r3, r3, #7
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d20c      	bcs.n	8009a54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a3a:	4b22      	ldr	r3, [pc, #136]	@ (8009ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	b2d2      	uxtb	r2, r2
 8009a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a42:	4b20      	ldr	r3, [pc, #128]	@ (8009ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 0307 	and.w	r3, r3, #7
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d001      	beq.n	8009a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009a50:	2301      	movs	r3, #1
 8009a52:	e032      	b.n	8009aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f003 0304 	and.w	r3, r3, #4
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d008      	beq.n	8009a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a60:	4b19      	ldr	r3, [pc, #100]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	4916      	ldr	r1, [pc, #88]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0308 	and.w	r3, r3, #8
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d009      	beq.n	8009a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a7e:	4b12      	ldr	r3, [pc, #72]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a80:	689b      	ldr	r3, [r3, #8]
 8009a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	00db      	lsls	r3, r3, #3
 8009a8c:	490e      	ldr	r1, [pc, #56]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009a92:	f000 f821 	bl	8009ad8 <HAL_RCC_GetSysClockFreq>
 8009a96:	4602      	mov	r2, r0
 8009a98:	4b0b      	ldr	r3, [pc, #44]	@ (8009ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	091b      	lsrs	r3, r3, #4
 8009a9e:	f003 030f 	and.w	r3, r3, #15
 8009aa2:	490a      	ldr	r1, [pc, #40]	@ (8009acc <HAL_RCC_ClockConfig+0x1c0>)
 8009aa4:	5ccb      	ldrb	r3, [r1, r3]
 8009aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aaa:	4a09      	ldr	r2, [pc, #36]	@ (8009ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8009aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009aae:	4b09      	ldr	r3, [pc, #36]	@ (8009ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fc fa5e 	bl	8005f74 <HAL_InitTick>

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	40023c00 	.word	0x40023c00
 8009ac8:	40023800 	.word	0x40023800
 8009acc:	0800f9b0 	.word	0x0800f9b0
 8009ad0:	20000000 	.word	0x20000000
 8009ad4:	20000004 	.word	0x20000004

08009ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009adc:	b094      	sub	sp, #80	@ 0x50
 8009ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009af0:	4b79      	ldr	r3, [pc, #484]	@ (8009cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f003 030c 	and.w	r3, r3, #12
 8009af8:	2b08      	cmp	r3, #8
 8009afa:	d00d      	beq.n	8009b18 <HAL_RCC_GetSysClockFreq+0x40>
 8009afc:	2b08      	cmp	r3, #8
 8009afe:	f200 80e1 	bhi.w	8009cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <HAL_RCC_GetSysClockFreq+0x34>
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d003      	beq.n	8009b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8009b0a:	e0db      	b.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009b0c:	4b73      	ldr	r3, [pc, #460]	@ (8009cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8009b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009b10:	e0db      	b.n	8009cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009b12:	4b73      	ldr	r3, [pc, #460]	@ (8009ce0 <HAL_RCC_GetSysClockFreq+0x208>)
 8009b14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009b16:	e0d8      	b.n	8009cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009b18:	4b6f      	ldr	r3, [pc, #444]	@ (8009cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009b20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009b22:	4b6d      	ldr	r3, [pc, #436]	@ (8009cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d063      	beq.n	8009bf6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8009cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	099b      	lsrs	r3, r3, #6
 8009b34:	2200      	movs	r2, #0
 8009b36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b40:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b42:	2300      	movs	r3, #0
 8009b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	f04f 0000 	mov.w	r0, #0
 8009b52:	f04f 0100 	mov.w	r1, #0
 8009b56:	0159      	lsls	r1, r3, #5
 8009b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b5c:	0150      	lsls	r0, r2, #5
 8009b5e:	4602      	mov	r2, r0
 8009b60:	460b      	mov	r3, r1
 8009b62:	4621      	mov	r1, r4
 8009b64:	1a51      	subs	r1, r2, r1
 8009b66:	6139      	str	r1, [r7, #16]
 8009b68:	4629      	mov	r1, r5
 8009b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8009b6e:	617b      	str	r3, [r7, #20]
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	f04f 0300 	mov.w	r3, #0
 8009b78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b7c:	4659      	mov	r1, fp
 8009b7e:	018b      	lsls	r3, r1, #6
 8009b80:	4651      	mov	r1, sl
 8009b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009b86:	4651      	mov	r1, sl
 8009b88:	018a      	lsls	r2, r1, #6
 8009b8a:	4651      	mov	r1, sl
 8009b8c:	ebb2 0801 	subs.w	r8, r2, r1
 8009b90:	4659      	mov	r1, fp
 8009b92:	eb63 0901 	sbc.w	r9, r3, r1
 8009b96:	f04f 0200 	mov.w	r2, #0
 8009b9a:	f04f 0300 	mov.w	r3, #0
 8009b9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ba2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ba6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009baa:	4690      	mov	r8, r2
 8009bac:	4699      	mov	r9, r3
 8009bae:	4623      	mov	r3, r4
 8009bb0:	eb18 0303 	adds.w	r3, r8, r3
 8009bb4:	60bb      	str	r3, [r7, #8]
 8009bb6:	462b      	mov	r3, r5
 8009bb8:	eb49 0303 	adc.w	r3, r9, r3
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	f04f 0200 	mov.w	r2, #0
 8009bc2:	f04f 0300 	mov.w	r3, #0
 8009bc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009bca:	4629      	mov	r1, r5
 8009bcc:	024b      	lsls	r3, r1, #9
 8009bce:	4621      	mov	r1, r4
 8009bd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009bd4:	4621      	mov	r1, r4
 8009bd6:	024a      	lsls	r2, r1, #9
 8009bd8:	4610      	mov	r0, r2
 8009bda:	4619      	mov	r1, r3
 8009bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bde:	2200      	movs	r2, #0
 8009be0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009be4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009be8:	f7f6 fb42 	bl	8000270 <__aeabi_uldivmod>
 8009bec:	4602      	mov	r2, r0
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bf4:	e058      	b.n	8009ca8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bf6:	4b38      	ldr	r3, [pc, #224]	@ (8009cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	099b      	lsrs	r3, r3, #6
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	4611      	mov	r1, r2
 8009c02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009c06:	623b      	str	r3, [r7, #32]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009c10:	4642      	mov	r2, r8
 8009c12:	464b      	mov	r3, r9
 8009c14:	f04f 0000 	mov.w	r0, #0
 8009c18:	f04f 0100 	mov.w	r1, #0
 8009c1c:	0159      	lsls	r1, r3, #5
 8009c1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009c22:	0150      	lsls	r0, r2, #5
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4641      	mov	r1, r8
 8009c2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8009c2e:	4649      	mov	r1, r9
 8009c30:	eb63 0b01 	sbc.w	fp, r3, r1
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	f04f 0300 	mov.w	r3, #0
 8009c3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009c40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009c44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009c48:	ebb2 040a 	subs.w	r4, r2, sl
 8009c4c:	eb63 050b 	sbc.w	r5, r3, fp
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	f04f 0300 	mov.w	r3, #0
 8009c58:	00eb      	lsls	r3, r5, #3
 8009c5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c5e:	00e2      	lsls	r2, r4, #3
 8009c60:	4614      	mov	r4, r2
 8009c62:	461d      	mov	r5, r3
 8009c64:	4643      	mov	r3, r8
 8009c66:	18e3      	adds	r3, r4, r3
 8009c68:	603b      	str	r3, [r7, #0]
 8009c6a:	464b      	mov	r3, r9
 8009c6c:	eb45 0303 	adc.w	r3, r5, r3
 8009c70:	607b      	str	r3, [r7, #4]
 8009c72:	f04f 0200 	mov.w	r2, #0
 8009c76:	f04f 0300 	mov.w	r3, #0
 8009c7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009c7e:	4629      	mov	r1, r5
 8009c80:	028b      	lsls	r3, r1, #10
 8009c82:	4621      	mov	r1, r4
 8009c84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009c88:	4621      	mov	r1, r4
 8009c8a:	028a      	lsls	r2, r1, #10
 8009c8c:	4610      	mov	r0, r2
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c92:	2200      	movs	r2, #0
 8009c94:	61bb      	str	r3, [r7, #24]
 8009c96:	61fa      	str	r2, [r7, #28]
 8009c98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c9c:	f7f6 fae8 	bl	8000270 <__aeabi_uldivmod>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	0c1b      	lsrs	r3, r3, #16
 8009cae:	f003 0303 	and.w	r3, r3, #3
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009cb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009cba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009cc2:	e002      	b.n	8009cca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009cc4:	4b05      	ldr	r3, [pc, #20]	@ (8009cdc <HAL_RCC_GetSysClockFreq+0x204>)
 8009cc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009cc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009cca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3750      	adds	r7, #80	@ 0x50
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009cd6:	bf00      	nop
 8009cd8:	40023800 	.word	0x40023800
 8009cdc:	00f42400 	.word	0x00f42400
 8009ce0:	007a1200 	.word	0x007a1200

08009ce4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009ce8:	4b03      	ldr	r3, [pc, #12]	@ (8009cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8009cea:	681b      	ldr	r3, [r3, #0]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
 8009cf6:	bf00      	nop
 8009cf8:	20000000 	.word	0x20000000

08009cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009d00:	f7ff fff0 	bl	8009ce4 <HAL_RCC_GetHCLKFreq>
 8009d04:	4602      	mov	r2, r0
 8009d06:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	0a9b      	lsrs	r3, r3, #10
 8009d0c:	f003 0307 	and.w	r3, r3, #7
 8009d10:	4903      	ldr	r1, [pc, #12]	@ (8009d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d12:	5ccb      	ldrb	r3, [r1, r3]
 8009d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	40023800 	.word	0x40023800
 8009d20:	0800f9c0 	.word	0x0800f9c0

08009d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009d28:	f7ff ffdc 	bl	8009ce4 <HAL_RCC_GetHCLKFreq>
 8009d2c:	4602      	mov	r2, r0
 8009d2e:	4b05      	ldr	r3, [pc, #20]	@ (8009d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	0b5b      	lsrs	r3, r3, #13
 8009d34:	f003 0307 	and.w	r3, r3, #7
 8009d38:	4903      	ldr	r1, [pc, #12]	@ (8009d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d3a:	5ccb      	ldrb	r3, [r1, r3]
 8009d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	40023800 	.word	0x40023800
 8009d48:	0800f9c0 	.word	0x0800f9c0

08009d4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d105      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d035      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009d74:	4b62      	ldr	r3, [pc, #392]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009d76:	2200      	movs	r2, #0
 8009d78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d7a:	f7fc f93f 	bl	8005ffc <HAL_GetTick>
 8009d7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d80:	e008      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009d82:	f7fc f93b 	bl	8005ffc <HAL_GetTick>
 8009d86:	4602      	mov	r2, r0
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	1ad3      	subs	r3, r2, r3
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d901      	bls.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e0b0      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009d94:	4b5b      	ldr	r3, [pc, #364]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d1f0      	bne.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	019a      	lsls	r2, r3, #6
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	071b      	lsls	r3, r3, #28
 8009dac:	4955      	ldr	r1, [pc, #340]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009dae:	4313      	orrs	r3, r2
 8009db0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009db4:	4b52      	ldr	r3, [pc, #328]	@ (8009f00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009db6:	2201      	movs	r2, #1
 8009db8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009dba:	f7fc f91f 	bl	8005ffc <HAL_GetTick>
 8009dbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009dc0:	e008      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009dc2:	f7fc f91b 	bl	8005ffc <HAL_GetTick>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	d901      	bls.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e090      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d0f0      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 8083 	beq.w	8009ef4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	4b44      	ldr	r3, [pc, #272]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df6:	4a43      	ldr	r2, [pc, #268]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8009dfe:	4b41      	ldr	r3, [pc, #260]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009e0a:	4b3f      	ldr	r3, [pc, #252]	@ (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a3e      	ldr	r2, [pc, #248]	@ (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e16:	f7fc f8f1 	bl	8005ffc <HAL_GetTick>
 8009e1a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009e1c:	e008      	b.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e1e:	f7fc f8ed 	bl	8005ffc <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d901      	bls.n	8009e30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	e062      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009e30:	4b35      	ldr	r3, [pc, #212]	@ (8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0f0      	beq.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009e3c:	4b31      	ldr	r3, [pc, #196]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e44:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d02f      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	68db      	ldr	r3, [r3, #12]
 8009e50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d028      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009e62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009e64:	4b29      	ldr	r3, [pc, #164]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009e66:	2201      	movs	r2, #1
 8009e68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009e6a:	4b28      	ldr	r3, [pc, #160]	@ (8009f0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009e70:	4a24      	ldr	r2, [pc, #144]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009e76:	4b23      	ldr	r3, [pc, #140]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009e7a:	f003 0301 	and.w	r3, r3, #1
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d114      	bne.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009e82:	f7fc f8bb 	bl	8005ffc <HAL_GetTick>
 8009e86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009e88:	e00a      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e8a:	f7fc f8b7 	bl	8005ffc <HAL_GetTick>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d901      	bls.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e02a      	b.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ea0:	4b18      	ldr	r3, [pc, #96]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ea4:	f003 0302 	and.w	r3, r3, #2
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0ee      	beq.n	8009e8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009eb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009eb8:	d10d      	bne.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009eba:	4b12      	ldr	r3, [pc, #72]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ebc:	689b      	ldr	r3, [r3, #8]
 8009ebe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ece:	490d      	ldr	r1, [pc, #52]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	608b      	str	r3, [r1, #8]
 8009ed4:	e005      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	4a0a      	ldr	r2, [pc, #40]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009edc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009ee0:	6093      	str	r3, [r2, #8]
 8009ee2:	4b08      	ldr	r3, [pc, #32]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ee4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eee:	4905      	ldr	r1, [pc, #20]	@ (8009f04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	42470068 	.word	0x42470068
 8009f04:	40023800 	.word	0x40023800
 8009f08:	40007000 	.word	0x40007000
 8009f0c:	42470e40 	.word	0x42470e40

08009f10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b087      	sub	sp, #28
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d13f      	bne.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8009f2e:	4b24      	ldr	r3, [pc, #144]	@ (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f36:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d006      	beq.n	8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009f44:	d12f      	bne.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009f46:	4b1f      	ldr	r3, [pc, #124]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009f48:	617b      	str	r3, [r7, #20]
          break;
 8009f4a:	e02f      	b.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f58:	d108      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009f5a:	4b19      	ldr	r3, [pc, #100]	@ (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f62:	4a19      	ldr	r2, [pc, #100]	@ (8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f68:	613b      	str	r3, [r7, #16]
 8009f6a:	e007      	b.n	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009f6c:	4b14      	ldr	r3, [pc, #80]	@ (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f74:	4a15      	ldr	r2, [pc, #84]	@ (8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8009f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f7a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009f7c:	4b10      	ldr	r3, [pc, #64]	@ (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f82:	099b      	lsrs	r3, r3, #6
 8009f84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	fb02 f303 	mul.w	r3, r2, r3
 8009f8e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009f90:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f96:	0f1b      	lsrs	r3, r3, #28
 8009f98:	f003 0307 	and.w	r3, r3, #7
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fa2:	617b      	str	r3, [r7, #20]
          break;
 8009fa4:	e002      	b.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	617b      	str	r3, [r7, #20]
          break;
 8009faa:	bf00      	nop
        }
      }
      break;
 8009fac:	e000      	b.n	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8009fae:	bf00      	nop
    }
  }
  return frequency;
 8009fb0:	697b      	ldr	r3, [r7, #20]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	371c      	adds	r7, #28
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	40023800 	.word	0x40023800
 8009fc4:	00bb8000 	.word	0x00bb8000
 8009fc8:	007a1200 	.word	0x007a1200
 8009fcc:	00f42400 	.word	0x00f42400

08009fd0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e01c      	b.n	800a01c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	795b      	ldrb	r3, [r3, #5]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d105      	bne.n	8009ff8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f7fb fdec 	bl	8005bd0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2202      	movs	r2, #2
 8009ffc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f042 0204 	orr.w	r2, r2, #4
 800a00c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a01a:	2300      	movs	r3, #0
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	791b      	ldrb	r3, [r3, #4]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d101      	bne.n	800a03e <HAL_RNG_GenerateRandomNumber+0x1a>
 800a03a:	2302      	movs	r3, #2
 800a03c:	e044      	b.n	800a0c8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	795b      	ldrb	r3, [r3, #5]
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d133      	bne.n	800a0b6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2202      	movs	r2, #2
 800a052:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a054:	f7fb ffd2 	bl	8005ffc <HAL_GetTick>
 800a058:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a05a:	e018      	b.n	800a08e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a05c:	f7fb ffce 	bl	8005ffc <HAL_GetTick>
 800a060:	4602      	mov	r2, r0
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	1ad3      	subs	r3, r2, r3
 800a066:	2b02      	cmp	r3, #2
 800a068:	d911      	bls.n	800a08e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	f003 0301 	and.w	r3, r3, #1
 800a074:	2b01      	cmp	r3, #1
 800a076:	d00a      	beq.n	800a08e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	e01c      	b.n	800a0c8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f003 0301 	and.w	r3, r3, #1
 800a098:	2b01      	cmp	r3, #1
 800a09a:	d1df      	bne.n	800a05c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689a      	ldr	r2, [r3, #8]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68da      	ldr	r2, [r3, #12]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	715a      	strb	r2, [r3, #5]
 800a0b4:	e004      	b.n	800a0c0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2204      	movs	r2, #4
 800a0ba:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	711a      	strb	r2, [r3, #4]

  return status;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d101      	bne.n	800a0e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e07b      	b.n	800a1da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d108      	bne.n	800a0fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0f2:	d009      	beq.n	800a108 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	61da      	str	r2, [r3, #28]
 800a0fa:	e005      	b.n	800a108 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a114:	b2db      	uxtb	r3, r3
 800a116:	2b00      	cmp	r3, #0
 800a118:	d106      	bne.n	800a128 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7fb fd76 	bl	8005c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a13e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a150:	431a      	orrs	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a15a:	431a      	orrs	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	f003 0302 	and.w	r3, r3, #2
 800a164:	431a      	orrs	r2, r3
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	431a      	orrs	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a178:	431a      	orrs	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	69db      	ldr	r3, [r3, #28]
 800a17e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a182:	431a      	orrs	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a1b      	ldr	r3, [r3, #32]
 800a188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a18c:	ea42 0103 	orr.w	r1, r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a194:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	430a      	orrs	r2, r1
 800a19e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	0c1b      	lsrs	r3, r3, #16
 800a1a6:	f003 0104 	and.w	r1, r3, #4
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ae:	f003 0210 	and.w	r2, r3, #16
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	69da      	ldr	r2, [r3, #28]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a1c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3708      	adds	r7, #8
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b082      	sub	sp, #8
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d101      	bne.n	800a1f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e042      	b.n	800a27a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d106      	bne.n	800a20e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f7fb fd4b 	bl	8005ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2224      	movs	r2, #36	@ 0x24
 800a212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68da      	ldr	r2, [r3, #12]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a224:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f972 	bl	800a510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	691a      	ldr	r2, [r3, #16]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a23a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	695a      	ldr	r2, [r3, #20]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a24a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a25a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2200      	movs	r2, #0
 800a260:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2220      	movs	r2, #32
 800a266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2220      	movs	r2, #32
 800a26e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b08a      	sub	sp, #40	@ 0x28
 800a286:	af02      	add	r7, sp, #8
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	603b      	str	r3, [r7, #0]
 800a28e:	4613      	mov	r3, r2
 800a290:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b20      	cmp	r3, #32
 800a2a0:	d175      	bne.n	800a38e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d002      	beq.n	800a2ae <HAL_UART_Transmit+0x2c>
 800a2a8:	88fb      	ldrh	r3, [r7, #6]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e06e      	b.n	800a390 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2221      	movs	r2, #33	@ 0x21
 800a2bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2c0:	f7fb fe9c 	bl	8005ffc <HAL_GetTick>
 800a2c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	88fa      	ldrh	r2, [r7, #6]
 800a2ca:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	88fa      	ldrh	r2, [r7, #6]
 800a2d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2da:	d108      	bne.n	800a2ee <HAL_UART_Transmit+0x6c>
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d104      	bne.n	800a2ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	61bb      	str	r3, [r7, #24]
 800a2ec:	e003      	b.n	800a2f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a2f6:	e02e      	b.n	800a356 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	2200      	movs	r2, #0
 800a300:	2180      	movs	r1, #128	@ 0x80
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 f848 	bl	800a398 <UART_WaitOnFlagUntilTimeout>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d005      	beq.n	800a31a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2220      	movs	r2, #32
 800a312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a316:	2303      	movs	r3, #3
 800a318:	e03a      	b.n	800a390 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	881b      	ldrh	r3, [r3, #0]
 800a324:	461a      	mov	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a32e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	3302      	adds	r3, #2
 800a334:	61bb      	str	r3, [r7, #24]
 800a336:	e007      	b.n	800a348 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	781a      	ldrb	r2, [r3, #0]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	3301      	adds	r3, #1
 800a346:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	3b01      	subs	r3, #1
 800a350:	b29a      	uxth	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1cb      	bne.n	800a2f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2200      	movs	r2, #0
 800a368:	2140      	movs	r1, #64	@ 0x40
 800a36a:	68f8      	ldr	r0, [r7, #12]
 800a36c:	f000 f814 	bl	800a398 <UART_WaitOnFlagUntilTimeout>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d005      	beq.n	800a382 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2220      	movs	r2, #32
 800a37a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e006      	b.n	800a390 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2220      	movs	r2, #32
 800a386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e000      	b.n	800a390 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a38e:	2302      	movs	r3, #2
  }
}
 800a390:	4618      	mov	r0, r3
 800a392:	3720      	adds	r7, #32
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	60b9      	str	r1, [r7, #8]
 800a3a2:	603b      	str	r3, [r7, #0]
 800a3a4:	4613      	mov	r3, r2
 800a3a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3a8:	e03b      	b.n	800a422 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3aa:	6a3b      	ldr	r3, [r7, #32]
 800a3ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3b0:	d037      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3b2:	f7fb fe23 	bl	8005ffc <HAL_GetTick>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	6a3a      	ldr	r2, [r7, #32]
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d302      	bcc.n	800a3c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d101      	bne.n	800a3cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e03a      	b.n	800a442 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	68db      	ldr	r3, [r3, #12]
 800a3d2:	f003 0304 	and.w	r3, r3, #4
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d023      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2b80      	cmp	r3, #128	@ 0x80
 800a3de:	d020      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	2b40      	cmp	r3, #64	@ 0x40
 800a3e4:	d01d      	beq.n	800a422 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0308 	and.w	r3, r3, #8
 800a3f0:	2b08      	cmp	r3, #8
 800a3f2:	d116      	bne.n	800a422 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	617b      	str	r3, [r7, #20]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	617b      	str	r3, [r7, #20]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	617b      	str	r3, [r7, #20]
 800a408:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a40a:	68f8      	ldr	r0, [r7, #12]
 800a40c:	f000 f81d 	bl	800a44a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2208      	movs	r2, #8
 800a414:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a41e:	2301      	movs	r3, #1
 800a420:	e00f      	b.n	800a442 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	4013      	ands	r3, r2
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	429a      	cmp	r2, r3
 800a430:	bf0c      	ite	eq
 800a432:	2301      	moveq	r3, #1
 800a434:	2300      	movne	r3, #0
 800a436:	b2db      	uxtb	r3, r3
 800a438:	461a      	mov	r2, r3
 800a43a:	79fb      	ldrb	r3, [r7, #7]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d0b4      	beq.n	800a3aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b095      	sub	sp, #84	@ 0x54
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	330c      	adds	r3, #12
 800a458:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a45c:	e853 3f00 	ldrex	r3, [r3]
 800a460:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a468:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	330c      	adds	r3, #12
 800a470:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a472:	643a      	str	r2, [r7, #64]	@ 0x40
 800a474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a476:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a478:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a47a:	e841 2300 	strex	r3, r2, [r1]
 800a47e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	2b00      	cmp	r3, #0
 800a484:	d1e5      	bne.n	800a452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	3314      	adds	r3, #20
 800a48c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48e:	6a3b      	ldr	r3, [r7, #32]
 800a490:	e853 3f00 	ldrex	r3, [r3]
 800a494:	61fb      	str	r3, [r7, #28]
   return(result);
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	f023 0301 	bic.w	r3, r3, #1
 800a49c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3314      	adds	r3, #20
 800a4a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a4a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a4a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4ae:	e841 2300 	strex	r3, r2, [r1]
 800a4b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e5      	bne.n	800a486 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d119      	bne.n	800a4f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	330c      	adds	r3, #12
 800a4c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	e853 3f00 	ldrex	r3, [r3]
 800a4d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	f023 0310 	bic.w	r3, r3, #16
 800a4d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	330c      	adds	r3, #12
 800a4e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4e2:	61ba      	str	r2, [r7, #24]
 800a4e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e6:	6979      	ldr	r1, [r7, #20]
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	e841 2300 	strex	r3, r2, [r1]
 800a4ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1e5      	bne.n	800a4c2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2220      	movs	r2, #32
 800a4fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2200      	movs	r2, #0
 800a502:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a504:	bf00      	nop
 800a506:	3754      	adds	r7, #84	@ 0x54
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a514:	b0c0      	sub	sp, #256	@ 0x100
 800a516:	af00      	add	r7, sp, #0
 800a518:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a52c:	68d9      	ldr	r1, [r3, #12]
 800a52e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	ea40 0301 	orr.w	r3, r0, r1
 800a538:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a53a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a53e:	689a      	ldr	r2, [r3, #8]
 800a540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	431a      	orrs	r2, r3
 800a548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	431a      	orrs	r2, r3
 800a550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a554:	69db      	ldr	r3, [r3, #28]
 800a556:	4313      	orrs	r3, r2
 800a558:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a55c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a568:	f021 010c 	bic.w	r1, r1, #12
 800a56c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a576:	430b      	orrs	r3, r1
 800a578:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a57a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
 800a582:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a58a:	6999      	ldr	r1, [r3, #24]
 800a58c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a590:	681a      	ldr	r2, [r3, #0]
 800a592:	ea40 0301 	orr.w	r3, r0, r1
 800a596:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	4b8f      	ldr	r3, [pc, #572]	@ (800a7dc <UART_SetConfig+0x2cc>)
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	d005      	beq.n	800a5b0 <UART_SetConfig+0xa0>
 800a5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b8d      	ldr	r3, [pc, #564]	@ (800a7e0 <UART_SetConfig+0x2d0>)
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d104      	bne.n	800a5ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a5b0:	f7ff fbb8 	bl	8009d24 <HAL_RCC_GetPCLK2Freq>
 800a5b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a5b8:	e003      	b.n	800a5c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a5ba:	f7ff fb9f 	bl	8009cfc <HAL_RCC_GetPCLK1Freq>
 800a5be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a5c6:	69db      	ldr	r3, [r3, #28]
 800a5c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5cc:	f040 810c 	bne.w	800a7e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a5d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a5de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	462b      	mov	r3, r5
 800a5e6:	1891      	adds	r1, r2, r2
 800a5e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a5ea:	415b      	adcs	r3, r3
 800a5ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a5ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	eb12 0801 	adds.w	r8, r2, r1
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	eb43 0901 	adc.w	r9, r3, r1
 800a5fe:	f04f 0200 	mov.w	r2, #0
 800a602:	f04f 0300 	mov.w	r3, #0
 800a606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a60a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a60e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a612:	4690      	mov	r8, r2
 800a614:	4699      	mov	r9, r3
 800a616:	4623      	mov	r3, r4
 800a618:	eb18 0303 	adds.w	r3, r8, r3
 800a61c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a620:	462b      	mov	r3, r5
 800a622:	eb49 0303 	adc.w	r3, r9, r3
 800a626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a62a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a636:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a63a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a63e:	460b      	mov	r3, r1
 800a640:	18db      	adds	r3, r3, r3
 800a642:	653b      	str	r3, [r7, #80]	@ 0x50
 800a644:	4613      	mov	r3, r2
 800a646:	eb42 0303 	adc.w	r3, r2, r3
 800a64a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a64c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a650:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a654:	f7f5 fe0c 	bl	8000270 <__aeabi_uldivmod>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4b61      	ldr	r3, [pc, #388]	@ (800a7e4 <UART_SetConfig+0x2d4>)
 800a65e:	fba3 2302 	umull	r2, r3, r3, r2
 800a662:	095b      	lsrs	r3, r3, #5
 800a664:	011c      	lsls	r4, r3, #4
 800a666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a66a:	2200      	movs	r2, #0
 800a66c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a670:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a674:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a678:	4642      	mov	r2, r8
 800a67a:	464b      	mov	r3, r9
 800a67c:	1891      	adds	r1, r2, r2
 800a67e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a680:	415b      	adcs	r3, r3
 800a682:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a684:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a688:	4641      	mov	r1, r8
 800a68a:	eb12 0a01 	adds.w	sl, r2, r1
 800a68e:	4649      	mov	r1, r9
 800a690:	eb43 0b01 	adc.w	fp, r3, r1
 800a694:	f04f 0200 	mov.w	r2, #0
 800a698:	f04f 0300 	mov.w	r3, #0
 800a69c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a6a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a6a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a6a8:	4692      	mov	sl, r2
 800a6aa:	469b      	mov	fp, r3
 800a6ac:	4643      	mov	r3, r8
 800a6ae:	eb1a 0303 	adds.w	r3, sl, r3
 800a6b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6b6:	464b      	mov	r3, r9
 800a6b8:	eb4b 0303 	adc.w	r3, fp, r3
 800a6bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a6cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a6d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	18db      	adds	r3, r3, r3
 800a6d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6da:	4613      	mov	r3, r2
 800a6dc:	eb42 0303 	adc.w	r3, r2, r3
 800a6e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800a6e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a6e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a6ea:	f7f5 fdc1 	bl	8000270 <__aeabi_uldivmod>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4b3b      	ldr	r3, [pc, #236]	@ (800a7e4 <UART_SetConfig+0x2d4>)
 800a6f6:	fba3 2301 	umull	r2, r3, r3, r1
 800a6fa:	095b      	lsrs	r3, r3, #5
 800a6fc:	2264      	movs	r2, #100	@ 0x64
 800a6fe:	fb02 f303 	mul.w	r3, r2, r3
 800a702:	1acb      	subs	r3, r1, r3
 800a704:	00db      	lsls	r3, r3, #3
 800a706:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a70a:	4b36      	ldr	r3, [pc, #216]	@ (800a7e4 <UART_SetConfig+0x2d4>)
 800a70c:	fba3 2302 	umull	r2, r3, r3, r2
 800a710:	095b      	lsrs	r3, r3, #5
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a718:	441c      	add	r4, r3
 800a71a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a71e:	2200      	movs	r2, #0
 800a720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a724:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a728:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a72c:	4642      	mov	r2, r8
 800a72e:	464b      	mov	r3, r9
 800a730:	1891      	adds	r1, r2, r2
 800a732:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a734:	415b      	adcs	r3, r3
 800a736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a738:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a73c:	4641      	mov	r1, r8
 800a73e:	1851      	adds	r1, r2, r1
 800a740:	6339      	str	r1, [r7, #48]	@ 0x30
 800a742:	4649      	mov	r1, r9
 800a744:	414b      	adcs	r3, r1
 800a746:	637b      	str	r3, [r7, #52]	@ 0x34
 800a748:	f04f 0200 	mov.w	r2, #0
 800a74c:	f04f 0300 	mov.w	r3, #0
 800a750:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a754:	4659      	mov	r1, fp
 800a756:	00cb      	lsls	r3, r1, #3
 800a758:	4651      	mov	r1, sl
 800a75a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a75e:	4651      	mov	r1, sl
 800a760:	00ca      	lsls	r2, r1, #3
 800a762:	4610      	mov	r0, r2
 800a764:	4619      	mov	r1, r3
 800a766:	4603      	mov	r3, r0
 800a768:	4642      	mov	r2, r8
 800a76a:	189b      	adds	r3, r3, r2
 800a76c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a770:	464b      	mov	r3, r9
 800a772:	460a      	mov	r2, r1
 800a774:	eb42 0303 	adc.w	r3, r2, r3
 800a778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a788:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a78c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a790:	460b      	mov	r3, r1
 800a792:	18db      	adds	r3, r3, r3
 800a794:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a796:	4613      	mov	r3, r2
 800a798:	eb42 0303 	adc.w	r3, r2, r3
 800a79c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a79e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a7a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a7a6:	f7f5 fd63 	bl	8000270 <__aeabi_uldivmod>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e4 <UART_SetConfig+0x2d4>)
 800a7b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a7b4:	095b      	lsrs	r3, r3, #5
 800a7b6:	2164      	movs	r1, #100	@ 0x64
 800a7b8:	fb01 f303 	mul.w	r3, r1, r3
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	00db      	lsls	r3, r3, #3
 800a7c0:	3332      	adds	r3, #50	@ 0x32
 800a7c2:	4a08      	ldr	r2, [pc, #32]	@ (800a7e4 <UART_SetConfig+0x2d4>)
 800a7c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c8:	095b      	lsrs	r3, r3, #5
 800a7ca:	f003 0207 	and.w	r2, r3, #7
 800a7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4422      	add	r2, r4
 800a7d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a7d8:	e106      	b.n	800a9e8 <UART_SetConfig+0x4d8>
 800a7da:	bf00      	nop
 800a7dc:	40011000 	.word	0x40011000
 800a7e0:	40011400 	.word	0x40011400
 800a7e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a7e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a7f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a7fa:	4642      	mov	r2, r8
 800a7fc:	464b      	mov	r3, r9
 800a7fe:	1891      	adds	r1, r2, r2
 800a800:	6239      	str	r1, [r7, #32]
 800a802:	415b      	adcs	r3, r3
 800a804:	627b      	str	r3, [r7, #36]	@ 0x24
 800a806:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a80a:	4641      	mov	r1, r8
 800a80c:	1854      	adds	r4, r2, r1
 800a80e:	4649      	mov	r1, r9
 800a810:	eb43 0501 	adc.w	r5, r3, r1
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	f04f 0300 	mov.w	r3, #0
 800a81c:	00eb      	lsls	r3, r5, #3
 800a81e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a822:	00e2      	lsls	r2, r4, #3
 800a824:	4614      	mov	r4, r2
 800a826:	461d      	mov	r5, r3
 800a828:	4643      	mov	r3, r8
 800a82a:	18e3      	adds	r3, r4, r3
 800a82c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a830:	464b      	mov	r3, r9
 800a832:	eb45 0303 	adc.w	r3, r5, r3
 800a836:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a83a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a846:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a84a:	f04f 0200 	mov.w	r2, #0
 800a84e:	f04f 0300 	mov.w	r3, #0
 800a852:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a856:	4629      	mov	r1, r5
 800a858:	008b      	lsls	r3, r1, #2
 800a85a:	4621      	mov	r1, r4
 800a85c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a860:	4621      	mov	r1, r4
 800a862:	008a      	lsls	r2, r1, #2
 800a864:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a868:	f7f5 fd02 	bl	8000270 <__aeabi_uldivmod>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	4b60      	ldr	r3, [pc, #384]	@ (800a9f4 <UART_SetConfig+0x4e4>)
 800a872:	fba3 2302 	umull	r2, r3, r3, r2
 800a876:	095b      	lsrs	r3, r3, #5
 800a878:	011c      	lsls	r4, r3, #4
 800a87a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a87e:	2200      	movs	r2, #0
 800a880:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a884:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a888:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a88c:	4642      	mov	r2, r8
 800a88e:	464b      	mov	r3, r9
 800a890:	1891      	adds	r1, r2, r2
 800a892:	61b9      	str	r1, [r7, #24]
 800a894:	415b      	adcs	r3, r3
 800a896:	61fb      	str	r3, [r7, #28]
 800a898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a89c:	4641      	mov	r1, r8
 800a89e:	1851      	adds	r1, r2, r1
 800a8a0:	6139      	str	r1, [r7, #16]
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	414b      	adcs	r3, r1
 800a8a6:	617b      	str	r3, [r7, #20]
 800a8a8:	f04f 0200 	mov.w	r2, #0
 800a8ac:	f04f 0300 	mov.w	r3, #0
 800a8b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8b4:	4659      	mov	r1, fp
 800a8b6:	00cb      	lsls	r3, r1, #3
 800a8b8:	4651      	mov	r1, sl
 800a8ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a8be:	4651      	mov	r1, sl
 800a8c0:	00ca      	lsls	r2, r1, #3
 800a8c2:	4610      	mov	r0, r2
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	189b      	adds	r3, r3, r2
 800a8cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	460a      	mov	r2, r1
 800a8d4:	eb42 0303 	adc.w	r3, r2, r3
 800a8d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a8e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a8e8:	f04f 0200 	mov.w	r2, #0
 800a8ec:	f04f 0300 	mov.w	r3, #0
 800a8f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a8f4:	4649      	mov	r1, r9
 800a8f6:	008b      	lsls	r3, r1, #2
 800a8f8:	4641      	mov	r1, r8
 800a8fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8fe:	4641      	mov	r1, r8
 800a900:	008a      	lsls	r2, r1, #2
 800a902:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a906:	f7f5 fcb3 	bl	8000270 <__aeabi_uldivmod>
 800a90a:	4602      	mov	r2, r0
 800a90c:	460b      	mov	r3, r1
 800a90e:	4611      	mov	r1, r2
 800a910:	4b38      	ldr	r3, [pc, #224]	@ (800a9f4 <UART_SetConfig+0x4e4>)
 800a912:	fba3 2301 	umull	r2, r3, r3, r1
 800a916:	095b      	lsrs	r3, r3, #5
 800a918:	2264      	movs	r2, #100	@ 0x64
 800a91a:	fb02 f303 	mul.w	r3, r2, r3
 800a91e:	1acb      	subs	r3, r1, r3
 800a920:	011b      	lsls	r3, r3, #4
 800a922:	3332      	adds	r3, #50	@ 0x32
 800a924:	4a33      	ldr	r2, [pc, #204]	@ (800a9f4 <UART_SetConfig+0x4e4>)
 800a926:	fba2 2303 	umull	r2, r3, r2, r3
 800a92a:	095b      	lsrs	r3, r3, #5
 800a92c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a930:	441c      	add	r4, r3
 800a932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a936:	2200      	movs	r2, #0
 800a938:	673b      	str	r3, [r7, #112]	@ 0x70
 800a93a:	677a      	str	r2, [r7, #116]	@ 0x74
 800a93c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a940:	4642      	mov	r2, r8
 800a942:	464b      	mov	r3, r9
 800a944:	1891      	adds	r1, r2, r2
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	415b      	adcs	r3, r3
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a950:	4641      	mov	r1, r8
 800a952:	1851      	adds	r1, r2, r1
 800a954:	6039      	str	r1, [r7, #0]
 800a956:	4649      	mov	r1, r9
 800a958:	414b      	adcs	r3, r1
 800a95a:	607b      	str	r3, [r7, #4]
 800a95c:	f04f 0200 	mov.w	r2, #0
 800a960:	f04f 0300 	mov.w	r3, #0
 800a964:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a968:	4659      	mov	r1, fp
 800a96a:	00cb      	lsls	r3, r1, #3
 800a96c:	4651      	mov	r1, sl
 800a96e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a972:	4651      	mov	r1, sl
 800a974:	00ca      	lsls	r2, r1, #3
 800a976:	4610      	mov	r0, r2
 800a978:	4619      	mov	r1, r3
 800a97a:	4603      	mov	r3, r0
 800a97c:	4642      	mov	r2, r8
 800a97e:	189b      	adds	r3, r3, r2
 800a980:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a982:	464b      	mov	r3, r9
 800a984:	460a      	mov	r2, r1
 800a986:	eb42 0303 	adc.w	r3, r2, r3
 800a98a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a98c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	663b      	str	r3, [r7, #96]	@ 0x60
 800a996:	667a      	str	r2, [r7, #100]	@ 0x64
 800a998:	f04f 0200 	mov.w	r2, #0
 800a99c:	f04f 0300 	mov.w	r3, #0
 800a9a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	008b      	lsls	r3, r1, #2
 800a9a8:	4641      	mov	r1, r8
 800a9aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a9ae:	4641      	mov	r1, r8
 800a9b0:	008a      	lsls	r2, r1, #2
 800a9b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a9b6:	f7f5 fc5b 	bl	8000270 <__aeabi_uldivmod>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	4b0d      	ldr	r3, [pc, #52]	@ (800a9f4 <UART_SetConfig+0x4e4>)
 800a9c0:	fba3 1302 	umull	r1, r3, r3, r2
 800a9c4:	095b      	lsrs	r3, r3, #5
 800a9c6:	2164      	movs	r1, #100	@ 0x64
 800a9c8:	fb01 f303 	mul.w	r3, r1, r3
 800a9cc:	1ad3      	subs	r3, r2, r3
 800a9ce:	011b      	lsls	r3, r3, #4
 800a9d0:	3332      	adds	r3, #50	@ 0x32
 800a9d2:	4a08      	ldr	r2, [pc, #32]	@ (800a9f4 <UART_SetConfig+0x4e4>)
 800a9d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9d8:	095b      	lsrs	r3, r3, #5
 800a9da:	f003 020f 	and.w	r2, r3, #15
 800a9de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4422      	add	r2, r4
 800a9e6:	609a      	str	r2, [r3, #8]
}
 800a9e8:	bf00      	nop
 800a9ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9f4:	51eb851f 	.word	0x51eb851f

0800a9f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b084      	sub	sp, #16
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
 800aa02:	f107 001c 	add.w	r0, r7, #28
 800aa06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aa0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	d123      	bne.n	800aa5a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800aa26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d105      	bne.n	800aa4e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f9dc 	bl	800ae0c <USB_CoreReset>
 800aa54:	4603      	mov	r3, r0
 800aa56:	73fb      	strb	r3, [r7, #15]
 800aa58:	e01b      	b.n	800aa92 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f9d0 	bl	800ae0c <USB_CoreReset>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aa70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d106      	bne.n	800aa86 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	639a      	str	r2, [r3, #56]	@ 0x38
 800aa84:	e005      	b.n	800aa92 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aa92:	7fbb      	ldrb	r3, [r7, #30]
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d10b      	bne.n	800aab0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	f043 0206 	orr.w	r2, r3, #6
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f043 0220 	orr.w	r2, r3, #32
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aabc:	b004      	add	sp, #16
 800aabe:	4770      	bx	lr

0800aac0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	f043 0201 	orr.w	r2, r3, #1
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	689b      	ldr	r3, [r3, #8]
 800aaee:	f023 0201 	bic.w	r2, r3, #1
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ab10:	2300      	movs	r3, #0
 800ab12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab20:	78fb      	ldrb	r3, [r7, #3]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d115      	bne.n	800ab52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab32:	200a      	movs	r0, #10
 800ab34:	f7fb fa6e 	bl	8006014 <HAL_Delay>
      ms += 10U;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	330a      	adds	r3, #10
 800ab3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f956 	bl	800adf0 <USB_GetMode>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d01e      	beq.n	800ab88 <USB_SetCurrentMode+0x84>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab4e:	d9f0      	bls.n	800ab32 <USB_SetCurrentMode+0x2e>
 800ab50:	e01a      	b.n	800ab88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab52:	78fb      	ldrb	r3, [r7, #3]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d115      	bne.n	800ab84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab64:	200a      	movs	r0, #10
 800ab66:	f7fb fa55 	bl	8006014 <HAL_Delay>
      ms += 10U;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	330a      	adds	r3, #10
 800ab6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f93d 	bl	800adf0 <USB_GetMode>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d005      	beq.n	800ab88 <USB_SetCurrentMode+0x84>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab80:	d9f0      	bls.n	800ab64 <USB_SetCurrentMode+0x60>
 800ab82:	e001      	b.n	800ab88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ab84:	2301      	movs	r3, #1
 800ab86:	e005      	b.n	800ab94 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2bc8      	cmp	r3, #200	@ 0xc8
 800ab8c:	d101      	bne.n	800ab92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e000      	b.n	800ab94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3301      	adds	r3, #1
 800abae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abb6:	d901      	bls.n	800abbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abb8:	2303      	movs	r3, #3
 800abba:	e01b      	b.n	800abf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	daf2      	bge.n	800abaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abc4:	2300      	movs	r3, #0
 800abc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	019b      	lsls	r3, r3, #6
 800abcc:	f043 0220 	orr.w	r2, r3, #32
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3301      	adds	r3, #1
 800abd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abe0:	d901      	bls.n	800abe6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abe2:	2303      	movs	r3, #3
 800abe4:	e006      	b.n	800abf4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b20      	cmp	r3, #32
 800abf0:	d0f0      	beq.n	800abd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b085      	sub	sp, #20
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	3301      	adds	r3, #1
 800ac10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac18:	d901      	bls.n	800ac1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e018      	b.n	800ac50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	daf2      	bge.n	800ac0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac26:	2300      	movs	r3, #0
 800ac28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2210      	movs	r2, #16
 800ac2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3301      	adds	r3, #1
 800ac34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac3c:	d901      	bls.n	800ac42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e006      	b.n	800ac50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	f003 0310 	and.w	r3, r3, #16
 800ac4a:	2b10      	cmp	r3, #16
 800ac4c:	d0f0      	beq.n	800ac30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac4e:	2300      	movs	r3, #0
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b089      	sub	sp, #36	@ 0x24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	4611      	mov	r1, r2
 800ac68:	461a      	mov	r2, r3
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	71fb      	strb	r3, [r7, #7]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ac7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d123      	bne.n	800acca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ac82:	88bb      	ldrh	r3, [r7, #4]
 800ac84:	3303      	adds	r3, #3
 800ac86:	089b      	lsrs	r3, r3, #2
 800ac88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	61bb      	str	r3, [r7, #24]
 800ac8e:	e018      	b.n	800acc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ac90:	79fb      	ldrb	r3, [r7, #7]
 800ac92:	031a      	lsls	r2, r3, #12
 800ac94:	697b      	ldr	r3, [r7, #20]
 800ac96:	4413      	add	r3, r2
 800ac98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	3301      	adds	r3, #1
 800aca8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	3301      	adds	r3, #1
 800acae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	3301      	adds	r3, #1
 800acb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	3301      	adds	r3, #1
 800acba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	3301      	adds	r3, #1
 800acc0:	61bb      	str	r3, [r7, #24]
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	429a      	cmp	r2, r3
 800acc8:	d3e2      	bcc.n	800ac90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3724      	adds	r7, #36	@ 0x24
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800acd8:	b480      	push	{r7}
 800acda:	b08b      	sub	sp, #44	@ 0x2c
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	4613      	mov	r3, r2
 800ace4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800acee:	88fb      	ldrh	r3, [r7, #6]
 800acf0:	089b      	lsrs	r3, r3, #2
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800acf6:	88fb      	ldrh	r3, [r7, #6]
 800acf8:	f003 0303 	and.w	r3, r3, #3
 800acfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800acfe:	2300      	movs	r3, #0
 800ad00:	623b      	str	r3, [r7, #32]
 800ad02:	e014      	b.n	800ad2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0e:	601a      	str	r2, [r3, #0]
    pDest++;
 800ad10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad12:	3301      	adds	r3, #1
 800ad14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ad16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad18:	3301      	adds	r3, #1
 800ad1a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ad1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1e:	3301      	adds	r3, #1
 800ad20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ad22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad24:	3301      	adds	r3, #1
 800ad26:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	623b      	str	r3, [r7, #32]
 800ad2e:	6a3a      	ldr	r2, [r7, #32]
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d3e6      	bcc.n	800ad04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ad36:	8bfb      	ldrh	r3, [r7, #30]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d01e      	beq.n	800ad7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ad46:	461a      	mov	r2, r3
 800ad48:	f107 0310 	add.w	r3, r7, #16
 800ad4c:	6812      	ldr	r2, [r2, #0]
 800ad4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	6a3b      	ldr	r3, [r7, #32]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	fa22 f303 	lsr.w	r3, r2, r3
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad60:	701a      	strb	r2, [r3, #0]
      i++;
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	3301      	adds	r3, #1
 800ad66:	623b      	str	r3, [r7, #32]
      pDest++;
 800ad68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ad6e:	8bfb      	ldrh	r3, [r7, #30]
 800ad70:	3b01      	subs	r3, #1
 800ad72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ad74:	8bfb      	ldrh	r3, [r7, #30]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1ea      	bne.n	800ad50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	372c      	adds	r7, #44	@ 0x2c
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	695b      	ldr	r3, [r3, #20]
 800ad94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ada0:	68fb      	ldr	r3, [r7, #12]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
 800adb6:	460b      	mov	r3, r1
 800adb8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800adbe:	78fb      	ldrb	r3, [r7, #3]
 800adc0:	015a      	lsls	r2, r3, #5
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	4413      	add	r3, r2
 800adc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adca:	689b      	ldr	r3, [r3, #8]
 800adcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800adce:	78fb      	ldrb	r3, [r7, #3]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	4413      	add	r3, r2
 800add6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	4013      	ands	r3, r2
 800ade0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ade2:	68bb      	ldr	r3, [r7, #8]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	f003 0301 	and.w	r3, r3, #1
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae14:	2300      	movs	r3, #0
 800ae16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae24:	d901      	bls.n	800ae2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e01b      	b.n	800ae62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	691b      	ldr	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	daf2      	bge.n	800ae18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	f043 0201 	orr.w	r2, r3, #1
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ae4e:	d901      	bls.n	800ae54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	e006      	b.n	800ae62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	f003 0301 	and.w	r3, r3, #1
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d0f0      	beq.n	800ae42 <USB_CoreReset+0x36>

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr
	...

0800ae70 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae70:	b084      	sub	sp, #16
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b086      	sub	sp, #24
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800ae7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ae90:	461a      	mov	r2, r3
 800ae92:	2300      	movs	r3, #0
 800ae94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aea6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeb2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68db      	ldr	r3, [r3, #12]
 800aebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d119      	bne.n	800aefa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800aec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d10a      	bne.n	800aee4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aedc:	f043 0304 	orr.w	r3, r3, #4
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	e014      	b.n	800af0e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68fa      	ldr	r2, [r7, #12]
 800aeee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aef2:	f023 0304 	bic.w	r3, r3, #4
 800aef6:	6013      	str	r3, [r2, #0]
 800aef8:	e009      	b.n	800af0e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800af08:	f023 0304 	bic.w	r3, r3, #4
 800af0c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af0e:	2110      	movs	r1, #16
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff fe43 	bl	800ab9c <USB_FlushTxFifo>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d001      	beq.n	800af20 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800af1c:	2301      	movs	r3, #1
 800af1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff fe6d 	bl	800ac00 <USB_FlushRxFifo>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800af30:	2300      	movs	r3, #0
 800af32:	613b      	str	r3, [r7, #16]
 800af34:	e015      	b.n	800af62 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	015a      	lsls	r2, r3, #5
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	4413      	add	r3, r2
 800af3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af42:	461a      	mov	r2, r3
 800af44:	f04f 33ff 	mov.w	r3, #4294967295
 800af48:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	015a      	lsls	r2, r3, #5
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	4413      	add	r3, r2
 800af52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af56:	461a      	mov	r2, r3
 800af58:	2300      	movs	r3, #0
 800af5a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	3301      	adds	r3, #1
 800af60:	613b      	str	r3, [r7, #16]
 800af62:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800af66:	461a      	mov	r2, r3
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d3e3      	bcc.n	800af36 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f04f 32ff 	mov.w	r2, #4294967295
 800af7a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a18      	ldr	r2, [pc, #96]	@ (800afe0 <USB_HostInit+0x170>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d10b      	bne.n	800af9c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af8a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a15      	ldr	r2, [pc, #84]	@ (800afe4 <USB_HostInit+0x174>)
 800af90:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	4a14      	ldr	r2, [pc, #80]	@ (800afe8 <USB_HostInit+0x178>)
 800af96:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800af9a:	e009      	b.n	800afb0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2280      	movs	r2, #128	@ 0x80
 800afa0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4a11      	ldr	r2, [pc, #68]	@ (800afec <USB_HostInit+0x17c>)
 800afa6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a11      	ldr	r2, [pc, #68]	@ (800aff0 <USB_HostInit+0x180>)
 800afac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800afb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d105      	bne.n	800afc4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	f043 0210 	orr.w	r2, r3, #16
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	699a      	ldr	r2, [r3, #24]
 800afc8:	4b0a      	ldr	r3, [pc, #40]	@ (800aff4 <USB_HostInit+0x184>)
 800afca:	4313      	orrs	r3, r2
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800afd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afdc:	b004      	add	sp, #16
 800afde:	4770      	bx	lr
 800afe0:	40040000 	.word	0x40040000
 800afe4:	01000200 	.word	0x01000200
 800afe8:	00e00300 	.word	0x00e00300
 800afec:	00600080 	.word	0x00600080
 800aff0:	004000e0 	.word	0x004000e0
 800aff4:	a3200008 	.word	0xa3200008

0800aff8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800aff8:	b480      	push	{r7}
 800affa:	b085      	sub	sp, #20
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	460b      	mov	r3, r1
 800b002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b016:	f023 0303 	bic.w	r3, r3, #3
 800b01a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	78fb      	ldrb	r3, [r7, #3]
 800b026:	f003 0303 	and.w	r3, r3, #3
 800b02a:	68f9      	ldr	r1, [r7, #12]
 800b02c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b030:	4313      	orrs	r3, r2
 800b032:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800b034:	78fb      	ldrb	r3, [r7, #3]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d107      	bne.n	800b04a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b040:	461a      	mov	r2, r3
 800b042:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800b046:	6053      	str	r3, [r2, #4]
 800b048:	e00c      	b.n	800b064 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800b04a:	78fb      	ldrb	r3, [r7, #3]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d107      	bne.n	800b060 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b056:	461a      	mov	r2, r3
 800b058:	f241 7370 	movw	r3, #6000	@ 0x1770
 800b05c:	6053      	str	r3, [r2, #4]
 800b05e:	e001      	b.n	800b064 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e000      	b.n	800b066 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr

0800b072 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b084      	sub	sp, #16
 800b076:	af00      	add	r7, sp, #0
 800b078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b092:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b09c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b0a0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800b0a2:	2064      	movs	r0, #100	@ 0x64
 800b0a4:	f7fa ffb6 	bl	8006014 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b0b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800b0b6:	200a      	movs	r0, #10
 800b0b8:	f7fa ffac 	bl	8006014 <HAL_Delay>

  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b0ea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d109      	bne.n	800b10a <USB_DriveVbus+0x44>
 800b0f6:	78fb      	ldrb	r3, [r7, #3]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d106      	bne.n	800b10a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b108:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b114:	d109      	bne.n	800b12a <USB_DriveVbus+0x64>
 800b116:	78fb      	ldrb	r3, [r7, #3]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d106      	bne.n	800b12a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800b124:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b128:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800b144:	2300      	movs	r3, #0
 800b146:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	0c5b      	lsrs	r3, r3, #17
 800b156:	f003 0303 	and.w	r3, r3, #3
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3714      	adds	r7, #20
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800b166:	b480      	push	{r7}
 800b168:	b085      	sub	sp, #20
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	b29b      	uxth	r3, r3
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3714      	adds	r7, #20
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b088      	sub	sp, #32
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	4608      	mov	r0, r1
 800b192:	4611      	mov	r1, r2
 800b194:	461a      	mov	r2, r3
 800b196:	4603      	mov	r3, r0
 800b198:	70fb      	strb	r3, [r7, #3]
 800b19a:	460b      	mov	r3, r1
 800b19c:	70bb      	strb	r3, [r7, #2]
 800b19e:	4613      	mov	r3, r2
 800b1a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800b1aa:	78fb      	ldrb	r3, [r7, #3]
 800b1ac:	015a      	lsls	r2, r3, #5
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	f04f 33ff 	mov.w	r3, #4294967295
 800b1bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800b1be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d87c      	bhi.n	800b2c0 <USB_HC_Init+0x138>
 800b1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1cc <USB_HC_Init+0x44>)
 800b1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1cc:	0800b1dd 	.word	0x0800b1dd
 800b1d0:	0800b283 	.word	0x0800b283
 800b1d4:	0800b1dd 	.word	0x0800b1dd
 800b1d8:	0800b245 	.word	0x0800b245
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b1dc:	78fb      	ldrb	r3, [r7, #3]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	f240 439d 	movw	r3, #1181	@ 0x49d
 800b1ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800b1f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	da10      	bge.n	800b21a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	78fa      	ldrb	r2, [r7, #3]
 800b208:	0151      	lsls	r1, r2, #5
 800b20a:	693a      	ldr	r2, [r7, #16]
 800b20c:	440a      	add	r2, r1
 800b20e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b216:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800b218:	e055      	b.n	800b2c6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a6f      	ldr	r2, [pc, #444]	@ (800b3dc <USB_HC_Init+0x254>)
 800b21e:	4293      	cmp	r3, r2
 800b220:	d151      	bne.n	800b2c6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800b222:	78fb      	ldrb	r3, [r7, #3]
 800b224:	015a      	lsls	r2, r3, #5
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	4413      	add	r3, r2
 800b22a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	78fa      	ldrb	r2, [r7, #3]
 800b232:	0151      	lsls	r1, r2, #5
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	440a      	add	r2, r1
 800b238:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b23c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b240:	60d3      	str	r3, [r2, #12]
      break;
 800b242:	e040      	b.n	800b2c6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b244:	78fb      	ldrb	r3, [r7, #3]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b250:	461a      	mov	r2, r3
 800b252:	f240 639d 	movw	r3, #1693	@ 0x69d
 800b256:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b258:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	da34      	bge.n	800b2ca <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	015a      	lsls	r2, r3, #5
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	4413      	add	r3, r2
 800b268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b26c:	68db      	ldr	r3, [r3, #12]
 800b26e:	78fa      	ldrb	r2, [r7, #3]
 800b270:	0151      	lsls	r1, r2, #5
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	440a      	add	r2, r1
 800b276:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b27a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b27e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800b280:	e023      	b.n	800b2ca <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800b282:	78fb      	ldrb	r3, [r7, #3]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b28e:	461a      	mov	r2, r3
 800b290:	f240 2325 	movw	r3, #549	@ 0x225
 800b294:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800b296:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	da17      	bge.n	800b2ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800b29e:	78fb      	ldrb	r3, [r7, #3]
 800b2a0:	015a      	lsls	r2, r3, #5
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	78fa      	ldrb	r2, [r7, #3]
 800b2ae:	0151      	lsls	r1, r2, #5
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	440a      	add	r2, r1
 800b2b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2b8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800b2bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 800b2be:	e006      	b.n	800b2ce <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	77fb      	strb	r3, [r7, #31]
      break;
 800b2c4:	e004      	b.n	800b2d0 <USB_HC_Init+0x148>
      break;
 800b2c6:	bf00      	nop
 800b2c8:	e002      	b.n	800b2d0 <USB_HC_Init+0x148>
      break;
 800b2ca:	bf00      	nop
 800b2cc:	e000      	b.n	800b2d0 <USB_HC_Init+0x148>
      break;
 800b2ce:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b2d0:	78fb      	ldrb	r3, [r7, #3]
 800b2d2:	015a      	lsls	r2, r3, #5
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2dc:	461a      	mov	r2, r3
 800b2de:	2300      	movs	r3, #0
 800b2e0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800b2e2:	78fb      	ldrb	r3, [r7, #3]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	78fa      	ldrb	r2, [r7, #3]
 800b2f2:	0151      	lsls	r1, r2, #5
 800b2f4:	693a      	ldr	r2, [r7, #16]
 800b2f6:	440a      	add	r2, r1
 800b2f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b2fc:	f043 0302 	orr.w	r3, r3, #2
 800b300:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b308:	699a      	ldr	r2, [r3, #24]
 800b30a:	78fb      	ldrb	r3, [r7, #3]
 800b30c:	f003 030f 	and.w	r3, r3, #15
 800b310:	2101      	movs	r1, #1
 800b312:	fa01 f303 	lsl.w	r3, r1, r3
 800b316:	6939      	ldr	r1, [r7, #16]
 800b318:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800b31c:	4313      	orrs	r3, r2
 800b31e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800b32c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800b330:	2b00      	cmp	r3, #0
 800b332:	da03      	bge.n	800b33c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800b334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b338:	61bb      	str	r3, [r7, #24]
 800b33a:	e001      	b.n	800b340 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800b33c:	2300      	movs	r3, #0
 800b33e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff fef9 	bl	800b138 <USB_GetHostSpeed>
 800b346:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800b348:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b34c:	2b02      	cmp	r3, #2
 800b34e:	d106      	bne.n	800b35e <USB_HC_Init+0x1d6>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b02      	cmp	r3, #2
 800b354:	d003      	beq.n	800b35e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800b356:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	e001      	b.n	800b362 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800b35e:	2300      	movs	r3, #0
 800b360:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b362:	787b      	ldrb	r3, [r7, #1]
 800b364:	059b      	lsls	r3, r3, #22
 800b366:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b36a:	78bb      	ldrb	r3, [r7, #2]
 800b36c:	02db      	lsls	r3, r3, #11
 800b36e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b372:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b374:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b378:	049b      	lsls	r3, r3, #18
 800b37a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800b37e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800b380:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b382:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800b386:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	431a      	orrs	r2, r3
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b390:	78fa      	ldrb	r2, [r7, #3]
 800b392:	0151      	lsls	r1, r2, #5
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	440a      	add	r2, r1
 800b398:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800b39c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800b3a0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800b3a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	d003      	beq.n	800b3b2 <USB_HC_Init+0x22a>
 800b3aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d10f      	bne.n	800b3d2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800b3b2:	78fb      	ldrb	r3, [r7, #3]
 800b3b4:	015a      	lsls	r2, r3, #5
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	78fa      	ldrb	r2, [r7, #3]
 800b3c2:	0151      	lsls	r1, r2, #5
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	440a      	add	r2, r1
 800b3c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b3cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b3d0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b3d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3720      	adds	r7, #32
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	40040000 	.word	0x40040000

0800b3e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b08c      	sub	sp, #48	@ 0x30
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	60f8      	str	r0, [r7, #12]
 800b3e8:	60b9      	str	r1, [r7, #8]
 800b3ea:	4613      	mov	r3, r2
 800b3ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	785b      	ldrb	r3, [r3, #1]
 800b3f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800b3f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b3fc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	4a5d      	ldr	r2, [pc, #372]	@ (800b578 <USB_HC_StartXfer+0x198>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d12f      	bne.n	800b466 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800b406:	79fb      	ldrb	r3, [r7, #7]
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d11c      	bne.n	800b446 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	7c9b      	ldrb	r3, [r3, #18]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d003      	beq.n	800b41c <USB_HC_StartXfer+0x3c>
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	7c9b      	ldrb	r3, [r3, #18]
 800b418:	2b02      	cmp	r3, #2
 800b41a:	d124      	bne.n	800b466 <USB_HC_StartXfer+0x86>
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	799b      	ldrb	r3, [r3, #6]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d120      	bne.n	800b466 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	6a3b      	ldr	r3, [r7, #32]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	69fa      	ldr	r2, [r7, #28]
 800b434:	0151      	lsls	r1, r2, #5
 800b436:	6a3a      	ldr	r2, [r7, #32]
 800b438:	440a      	add	r2, r1
 800b43a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b43e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b442:	60d3      	str	r3, [r2, #12]
 800b444:	e00f      	b.n	800b466 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	791b      	ldrb	r3, [r3, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10b      	bne.n	800b466 <USB_HC_StartXfer+0x86>
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	795b      	ldrb	r3, [r3, #5]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d107      	bne.n	800b466 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	785b      	ldrb	r3, [r3, #1]
 800b45a:	4619      	mov	r1, r3
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f000 fb6b 	bl	800bb38 <USB_DoPing>
        return HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	e232      	b.n	800b8cc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	799b      	ldrb	r3, [r3, #6]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d158      	bne.n	800b520 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800b46e:	2301      	movs	r3, #1
 800b470:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	78db      	ldrb	r3, [r3, #3]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d007      	beq.n	800b48a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b47a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	8a92      	ldrh	r2, [r2, #20]
 800b480:	fb03 f202 	mul.w	r2, r3, r2
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	61da      	str	r2, [r3, #28]
 800b488:	e07c      	b.n	800b584 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	7c9b      	ldrb	r3, [r3, #18]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d130      	bne.n	800b4f4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	2bbc      	cmp	r3, #188	@ 0xbc
 800b498:	d918      	bls.n	800b4cc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	8a9b      	ldrh	r3, [r3, #20]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	69da      	ldr	r2, [r3, #28]
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d003      	beq.n	800b4bc <USB_HC_StartXfer+0xdc>
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	2b02      	cmp	r3, #2
 800b4ba:	d103      	bne.n	800b4c4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	60da      	str	r2, [r3, #12]
 800b4c2:	e05f      	b.n	800b584 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	60da      	str	r2, [r3, #12]
 800b4ca:	e05b      	b.n	800b584 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	6a1a      	ldr	r2, [r3, #32]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d007      	beq.n	800b4ec <USB_HC_StartXfer+0x10c>
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d003      	beq.n	800b4ec <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2204      	movs	r2, #4
 800b4e8:	60da      	str	r2, [r3, #12]
 800b4ea:	e04b      	b.n	800b584 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	2203      	movs	r2, #3
 800b4f0:	60da      	str	r2, [r3, #12]
 800b4f2:	e047      	b.n	800b584 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800b4f4:	79fb      	ldrb	r3, [r7, #7]
 800b4f6:	2b01      	cmp	r3, #1
 800b4f8:	d10d      	bne.n	800b516 <USB_HC_StartXfer+0x136>
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	6a1b      	ldr	r3, [r3, #32]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	8a92      	ldrh	r2, [r2, #20]
 800b502:	4293      	cmp	r3, r2
 800b504:	d907      	bls.n	800b516 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b506:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	8a92      	ldrh	r2, [r2, #20]
 800b50c:	fb03 f202 	mul.w	r2, r3, r2
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	61da      	str	r2, [r3, #28]
 800b514:	e036      	b.n	800b584 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	6a1a      	ldr	r2, [r3, #32]
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	61da      	str	r2, [r3, #28]
 800b51e:	e031      	b.n	800b584 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d018      	beq.n	800b55a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	8a92      	ldrh	r2, [r2, #20]
 800b530:	4413      	add	r3, r2
 800b532:	3b01      	subs	r3, #1
 800b534:	68ba      	ldr	r2, [r7, #8]
 800b536:	8a92      	ldrh	r2, [r2, #20]
 800b538:	fbb3 f3f2 	udiv	r3, r3, r2
 800b53c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800b53e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b540:	8b7b      	ldrh	r3, [r7, #26]
 800b542:	429a      	cmp	r2, r3
 800b544:	d90b      	bls.n	800b55e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800b546:	8b7b      	ldrh	r3, [r7, #26]
 800b548:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b54a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	8a92      	ldrh	r2, [r2, #20]
 800b550:	fb03 f202 	mul.w	r2, r3, r2
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	61da      	str	r2, [r3, #28]
 800b558:	e001      	b.n	800b55e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800b55a:	2301      	movs	r3, #1
 800b55c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	78db      	ldrb	r3, [r3, #3]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00a      	beq.n	800b57c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800b566:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	8a92      	ldrh	r2, [r2, #20]
 800b56c:	fb03 f202 	mul.w	r2, r3, r2
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	61da      	str	r2, [r3, #28]
 800b574:	e006      	b.n	800b584 <USB_HC_StartXfer+0x1a4>
 800b576:	bf00      	nop
 800b578:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	6a1a      	ldr	r2, [r3, #32]
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b58c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b58e:	04d9      	lsls	r1, r3, #19
 800b590:	4ba3      	ldr	r3, [pc, #652]	@ (800b820 <USB_HC_StartXfer+0x440>)
 800b592:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b594:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	7d9b      	ldrb	r3, [r3, #22]
 800b59a:	075b      	lsls	r3, r3, #29
 800b59c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b5a0:	69f9      	ldr	r1, [r7, #28]
 800b5a2:	0148      	lsls	r0, r1, #5
 800b5a4:	6a39      	ldr	r1, [r7, #32]
 800b5a6:	4401      	add	r1, r0
 800b5a8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800b5ac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800b5ae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800b5b0:	79fb      	ldrb	r3, [r7, #7]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d009      	beq.n	800b5ca <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	6999      	ldr	r1, [r3, #24]
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	015a      	lsls	r2, r3, #5
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	4413      	add	r3, r2
 800b5c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5c6:	460a      	mov	r2, r1
 800b5c8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800b5ca:	6a3b      	ldr	r3, [r7, #32]
 800b5cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b5d0:	689b      	ldr	r3, [r3, #8]
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	bf0c      	ite	eq
 800b5da:	2301      	moveq	r3, #1
 800b5dc:	2300      	movne	r3, #0
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	015a      	lsls	r2, r3, #5
 800b5e6:	6a3b      	ldr	r3, [r7, #32]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	69fa      	ldr	r2, [r7, #28]
 800b5f2:	0151      	lsls	r1, r2, #5
 800b5f4:	6a3a      	ldr	r2, [r7, #32]
 800b5f6:	440a      	add	r2, r1
 800b5f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b5fc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b600:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	7e7b      	ldrb	r3, [r7, #25]
 800b612:	075b      	lsls	r3, r3, #29
 800b614:	69f9      	ldr	r1, [r7, #28]
 800b616:	0148      	lsls	r0, r1, #5
 800b618:	6a39      	ldr	r1, [r7, #32]
 800b61a:	4401      	add	r1, r0
 800b61c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800b620:	4313      	orrs	r3, r2
 800b622:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	799b      	ldrb	r3, [r3, #6]
 800b628:	2b01      	cmp	r3, #1
 800b62a:	f040 80c3 	bne.w	800b7b4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	7c5b      	ldrb	r3, [r3, #17]
 800b632:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b638:	4313      	orrs	r3, r2
 800b63a:	69fa      	ldr	r2, [r7, #28]
 800b63c:	0151      	lsls	r1, r2, #5
 800b63e:	6a3a      	ldr	r2, [r7, #32]
 800b640:	440a      	add	r2, r1
 800b642:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800b646:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800b64a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	015a      	lsls	r2, r3, #5
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	4413      	add	r3, r2
 800b654:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	69fa      	ldr	r2, [r7, #28]
 800b65c:	0151      	lsls	r1, r2, #5
 800b65e:	6a3a      	ldr	r2, [r7, #32]
 800b660:	440a      	add	r2, r1
 800b662:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b666:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800b66a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	79db      	ldrb	r3, [r3, #7]
 800b670:	2b01      	cmp	r3, #1
 800b672:	d123      	bne.n	800b6bc <USB_HC_StartXfer+0x2dc>
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	78db      	ldrb	r3, [r3, #3]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d11f      	bne.n	800b6bc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	015a      	lsls	r2, r3, #5
 800b680:	6a3b      	ldr	r3, [r7, #32]
 800b682:	4413      	add	r3, r2
 800b684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	69fa      	ldr	r2, [r7, #28]
 800b68c:	0151      	lsls	r1, r2, #5
 800b68e:	6a3a      	ldr	r2, [r7, #32]
 800b690:	440a      	add	r2, r1
 800b692:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b696:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b69a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	015a      	lsls	r2, r3, #5
 800b6a0:	6a3b      	ldr	r3, [r7, #32]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	69fa      	ldr	r2, [r7, #28]
 800b6ac:	0151      	lsls	r1, r2, #5
 800b6ae:	6a3a      	ldr	r2, [r7, #32]
 800b6b0:	440a      	add	r2, r1
 800b6b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6ba:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	7c9b      	ldrb	r3, [r3, #18]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d003      	beq.n	800b6cc <USB_HC_StartXfer+0x2ec>
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	7c9b      	ldrb	r3, [r3, #18]
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d117      	bne.n	800b6fc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d113      	bne.n	800b6fc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	78db      	ldrb	r3, [r3, #3]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d10f      	bne.n	800b6fc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800b6dc:	69fb      	ldr	r3, [r7, #28]
 800b6de:	015a      	lsls	r2, r3, #5
 800b6e0:	6a3b      	ldr	r3, [r7, #32]
 800b6e2:	4413      	add	r3, r2
 800b6e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	69fa      	ldr	r2, [r7, #28]
 800b6ec:	0151      	lsls	r1, r2, #5
 800b6ee:	6a3a      	ldr	r2, [r7, #32]
 800b6f0:	440a      	add	r2, r1
 800b6f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b6f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6fa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	7c9b      	ldrb	r3, [r3, #18]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d162      	bne.n	800b7ca <USB_HC_StartXfer+0x3ea>
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	78db      	ldrb	r3, [r3, #3]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d15e      	bne.n	800b7ca <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	3b01      	subs	r3, #1
 800b712:	2b03      	cmp	r3, #3
 800b714:	d858      	bhi.n	800b7c8 <USB_HC_StartXfer+0x3e8>
 800b716:	a201      	add	r2, pc, #4	@ (adr r2, 800b71c <USB_HC_StartXfer+0x33c>)
 800b718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71c:	0800b72d 	.word	0x0800b72d
 800b720:	0800b74f 	.word	0x0800b74f
 800b724:	0800b771 	.word	0x0800b771
 800b728:	0800b793 	.word	0x0800b793
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800b72c:	69fb      	ldr	r3, [r7, #28]
 800b72e:	015a      	lsls	r2, r3, #5
 800b730:	6a3b      	ldr	r3, [r7, #32]
 800b732:	4413      	add	r3, r2
 800b734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	69fa      	ldr	r2, [r7, #28]
 800b73c:	0151      	lsls	r1, r2, #5
 800b73e:	6a3a      	ldr	r2, [r7, #32]
 800b740:	440a      	add	r2, r1
 800b742:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b74a:	6053      	str	r3, [r2, #4]
          break;
 800b74c:	e03d      	b.n	800b7ca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	015a      	lsls	r2, r3, #5
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	4413      	add	r3, r2
 800b756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	69fa      	ldr	r2, [r7, #28]
 800b75e:	0151      	lsls	r1, r2, #5
 800b760:	6a3a      	ldr	r2, [r7, #32]
 800b762:	440a      	add	r2, r1
 800b764:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b768:	f043 030e 	orr.w	r3, r3, #14
 800b76c:	6053      	str	r3, [r2, #4]
          break;
 800b76e:	e02c      	b.n	800b7ca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	6a3b      	ldr	r3, [r7, #32]
 800b776:	4413      	add	r3, r2
 800b778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	69fa      	ldr	r2, [r7, #28]
 800b780:	0151      	lsls	r1, r2, #5
 800b782:	6a3a      	ldr	r2, [r7, #32]
 800b784:	440a      	add	r2, r1
 800b786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b78a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b78e:	6053      	str	r3, [r2, #4]
          break;
 800b790:	e01b      	b.n	800b7ca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	69fa      	ldr	r2, [r7, #28]
 800b7a2:	0151      	lsls	r1, r2, #5
 800b7a4:	6a3a      	ldr	r2, [r7, #32]
 800b7a6:	440a      	add	r2, r1
 800b7a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b7ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b7b0:	6053      	str	r3, [r2, #4]
          break;
 800b7b2:	e00a      	b.n	800b7ca <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	6053      	str	r3, [r2, #4]
 800b7c6:	e000      	b.n	800b7ca <USB_HC_StartXfer+0x3ea>
          break;
 800b7c8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	015a      	lsls	r2, r3, #5
 800b7ce:	6a3b      	ldr	r3, [r7, #32]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b7e0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	78db      	ldrb	r3, [r3, #3]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d004      	beq.n	800b7f4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7f0:	613b      	str	r3, [r7, #16]
 800b7f2:	e003      	b.n	800b7fc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b7fa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b802:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	015a      	lsls	r2, r3, #5
 800b808:	6a3b      	ldr	r3, [r7, #32]
 800b80a:	4413      	add	r3, r2
 800b80c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b810:	461a      	mov	r2, r3
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d003      	beq.n	800b824 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	e055      	b.n	800b8cc <USB_HC_StartXfer+0x4ec>
 800b820:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	78db      	ldrb	r3, [r3, #3]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d14e      	bne.n	800b8ca <USB_HC_StartXfer+0x4ea>
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d04a      	beq.n	800b8ca <USB_HC_StartXfer+0x4ea>
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	79db      	ldrb	r3, [r3, #7]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d146      	bne.n	800b8ca <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	7c9b      	ldrb	r3, [r3, #18]
 800b840:	2b03      	cmp	r3, #3
 800b842:	d831      	bhi.n	800b8a8 <USB_HC_StartXfer+0x4c8>
 800b844:	a201      	add	r2, pc, #4	@ (adr r2, 800b84c <USB_HC_StartXfer+0x46c>)
 800b846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b84a:	bf00      	nop
 800b84c:	0800b85d 	.word	0x0800b85d
 800b850:	0800b881 	.word	0x0800b881
 800b854:	0800b85d 	.word	0x0800b85d
 800b858:	0800b881 	.word	0x0800b881
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	6a1b      	ldr	r3, [r3, #32]
 800b860:	3303      	adds	r3, #3
 800b862:	089b      	lsrs	r3, r3, #2
 800b864:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800b866:	8afa      	ldrh	r2, [r7, #22]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	429a      	cmp	r2, r3
 800b870:	d91c      	bls.n	800b8ac <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	f043 0220 	orr.w	r2, r3, #32
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	619a      	str	r2, [r3, #24]
        }
        break;
 800b87e:	e015      	b.n	800b8ac <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	6a1b      	ldr	r3, [r3, #32]
 800b884:	3303      	adds	r3, #3
 800b886:	089b      	lsrs	r3, r3, #2
 800b888:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800b88a:	8afa      	ldrh	r2, [r7, #22]
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b892:	691b      	ldr	r3, [r3, #16]
 800b894:	b29b      	uxth	r3, r3
 800b896:	429a      	cmp	r2, r3
 800b898:	d90a      	bls.n	800b8b0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	619a      	str	r2, [r3, #24]
        }
        break;
 800b8a6:	e003      	b.n	800b8b0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800b8a8:	bf00      	nop
 800b8aa:	e002      	b.n	800b8b2 <USB_HC_StartXfer+0x4d2>
        break;
 800b8ac:	bf00      	nop
 800b8ae:	e000      	b.n	800b8b2 <USB_HC_StartXfer+0x4d2>
        break;
 800b8b0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	6999      	ldr	r1, [r3, #24]
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	785a      	ldrb	r2, [r3, #1]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	2000      	movs	r0, #0
 800b8c2:	9000      	str	r0, [sp, #0]
 800b8c4:	68f8      	ldr	r0, [r7, #12]
 800b8c6:	f7ff f9c9 	bl	800ac5c <USB_WritePacket>
  }

  return HAL_OK;
 800b8ca:	2300      	movs	r3, #0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3728      	adds	r7, #40	@ 0x28
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b8e6:	695b      	ldr	r3, [r3, #20]
 800b8e8:	b29b      	uxth	r3, r3
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr

0800b8f6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800b8f6:	b480      	push	{r7}
 800b8f8:	b089      	sub	sp, #36	@ 0x24
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	460b      	mov	r3, r1
 800b900:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800b906:	78fb      	ldrb	r3, [r7, #3]
 800b908:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800b90e:	69bb      	ldr	r3, [r7, #24]
 800b910:	015a      	lsls	r2, r3, #5
 800b912:	69fb      	ldr	r3, [r7, #28]
 800b914:	4413      	add	r3, r2
 800b916:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	0c9b      	lsrs	r3, r3, #18
 800b91e:	f003 0303 	and.w	r3, r3, #3
 800b922:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	015a      	lsls	r2, r3, #5
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	4413      	add	r3, r2
 800b92c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	0fdb      	lsrs	r3, r3, #31
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	015a      	lsls	r2, r3, #5
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	4413      	add	r3, r2
 800b942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	0fdb      	lsrs	r3, r3, #31
 800b94a:	f003 0301 	and.w	r3, r3, #1
 800b94e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	689b      	ldr	r3, [r3, #8]
 800b954:	f003 0320 	and.w	r3, r3, #32
 800b958:	2b20      	cmp	r3, #32
 800b95a:	d10d      	bne.n	800b978 <USB_HC_Halt+0x82>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10a      	bne.n	800b978 <USB_HC_Halt+0x82>
 800b962:	693b      	ldr	r3, [r7, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d005      	beq.n	800b974 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d002      	beq.n	800b974 <USB_HC_Halt+0x7e>
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b03      	cmp	r3, #3
 800b972:	d101      	bne.n	800b978 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800b974:	2300      	movs	r3, #0
 800b976:	e0d8      	b.n	800bb2a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d002      	beq.n	800b984 <USB_HC_Halt+0x8e>
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	2b02      	cmp	r3, #2
 800b982:	d173      	bne.n	800ba6c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	015a      	lsls	r2, r3, #5
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	4413      	add	r3, r2
 800b98c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	69ba      	ldr	r2, [r7, #24]
 800b994:	0151      	lsls	r1, r2, #5
 800b996:	69fa      	ldr	r2, [r7, #28]
 800b998:	440a      	add	r2, r1
 800b99a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b99e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b9a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	f003 0320 	and.w	r3, r3, #32
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d14a      	bne.n	800ba46 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d133      	bne.n	800ba24 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	015a      	lsls	r2, r3, #5
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	69ba      	ldr	r2, [r7, #24]
 800b9cc:	0151      	lsls	r1, r2, #5
 800b9ce:	69fa      	ldr	r2, [r7, #28]
 800b9d0:	440a      	add	r2, r1
 800b9d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9da:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	69ba      	ldr	r2, [r7, #24]
 800b9ec:	0151      	lsls	r1, r2, #5
 800b9ee:	69fa      	ldr	r2, [r7, #28]
 800b9f0:	440a      	add	r2, r1
 800b9f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800b9f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b9fa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	3301      	adds	r3, #1
 800ba00:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba08:	d82e      	bhi.n	800ba68 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	015a      	lsls	r2, r3, #5
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	4413      	add	r3, r2
 800ba12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba20:	d0ec      	beq.n	800b9fc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ba22:	e081      	b.n	800bb28 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	015a      	lsls	r2, r3, #5
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	4413      	add	r3, r2
 800ba2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	0151      	lsls	r1, r2, #5
 800ba36:	69fa      	ldr	r2, [r7, #28]
 800ba38:	440a      	add	r2, r1
 800ba3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba42:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ba44:	e070      	b.n	800bb28 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ba46:	69bb      	ldr	r3, [r7, #24]
 800ba48:	015a      	lsls	r2, r3, #5
 800ba4a:	69fb      	ldr	r3, [r7, #28]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	0151      	lsls	r1, r2, #5
 800ba58:	69fa      	ldr	r2, [r7, #28]
 800ba5a:	440a      	add	r2, r1
 800ba5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ba64:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ba66:	e05f      	b.n	800bb28 <USB_HC_Halt+0x232>
            break;
 800ba68:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ba6a:	e05d      	b.n	800bb28 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	015a      	lsls	r2, r3, #5
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	4413      	add	r3, r2
 800ba74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	69ba      	ldr	r2, [r7, #24]
 800ba7c:	0151      	lsls	r1, r2, #5
 800ba7e:	69fa      	ldr	r2, [r7, #28]
 800ba80:	440a      	add	r2, r1
 800ba82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ba86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ba8a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ba92:	691b      	ldr	r3, [r3, #16]
 800ba94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d133      	bne.n	800bb04 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	69ba      	ldr	r2, [r7, #24]
 800baac:	0151      	lsls	r1, r2, #5
 800baae:	69fa      	ldr	r2, [r7, #28]
 800bab0:	440a      	add	r2, r1
 800bab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bab6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800baba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	015a      	lsls	r2, r3, #5
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	4413      	add	r3, r2
 800bac4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	69ba      	ldr	r2, [r7, #24]
 800bacc:	0151      	lsls	r1, r2, #5
 800bace:	69fa      	ldr	r2, [r7, #28]
 800bad0:	440a      	add	r2, r1
 800bad2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bad6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bada:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	3301      	adds	r3, #1
 800bae0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bae8:	d81d      	bhi.n	800bb26 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bafc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb00:	d0ec      	beq.n	800badc <USB_HC_Halt+0x1e6>
 800bb02:	e011      	b.n	800bb28 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800bb04:	69bb      	ldr	r3, [r7, #24]
 800bb06:	015a      	lsls	r2, r3, #5
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	69ba      	ldr	r2, [r7, #24]
 800bb14:	0151      	lsls	r1, r2, #5
 800bb16:	69fa      	ldr	r2, [r7, #28]
 800bb18:	440a      	add	r2, r1
 800bb1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	e000      	b.n	800bb28 <USB_HC_Halt+0x232>
          break;
 800bb26:	bf00      	nop
    }
  }

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3724      	adds	r7, #36	@ 0x24
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
	...

0800bb38 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	460b      	mov	r3, r1
 800bb42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800bb48:	78fb      	ldrb	r3, [r7, #3]
 800bb4a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	04da      	lsls	r2, r3, #19
 800bb54:	4b15      	ldr	r3, [pc, #84]	@ (800bbac <USB_DoPing+0x74>)
 800bb56:	4013      	ands	r3, r2
 800bb58:	693a      	ldr	r2, [r7, #16]
 800bb5a:	0151      	lsls	r1, r2, #5
 800bb5c:	697a      	ldr	r2, [r7, #20]
 800bb5e:	440a      	add	r2, r1
 800bb60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800bb64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bb68:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bb80:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bb88:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	015a      	lsls	r2, r3, #5
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	4413      	add	r3, r2
 800bb92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bb96:	461a      	mov	r2, r3
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	371c      	adds	r7, #28
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	1ff80000 	.word	0x1ff80000

0800bbb0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b088      	sub	sp, #32
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f7fe ff8c 	bl	800aae2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bbca:	2110      	movs	r1, #16
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7fe ffe5 	bl	800ab9c <USB_FlushTxFifo>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f7ff f80f 	bl	800ac00 <USB_FlushRxFifo>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800bbec:	2300      	movs	r3, #0
 800bbee:	61bb      	str	r3, [r7, #24]
 800bbf0:	e01f      	b.n	800bc32 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	015a      	lsls	r2, r3, #5
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc10:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bc18:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	015a      	lsls	r2, r3, #5
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	4413      	add	r3, r2
 800bc22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc26:	461a      	mov	r2, r3
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	3301      	adds	r3, #1
 800bc30:	61bb      	str	r3, [r7, #24]
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	2b0f      	cmp	r3, #15
 800bc36:	d9dc      	bls.n	800bbf2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800bc38:	2300      	movs	r3, #0
 800bc3a:	61bb      	str	r3, [r7, #24]
 800bc3c:	e034      	b.n	800bca8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	015a      	lsls	r2, r3, #5
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	4413      	add	r3, r2
 800bc46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc54:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800bc5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800bc64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800bc66:	69bb      	ldr	r3, [r7, #24]
 800bc68:	015a      	lsls	r2, r3, #5
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc72:	461a      	mov	r2, r3
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc84:	d80c      	bhi.n	800bca0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800bc86:	69bb      	ldr	r3, [r7, #24]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc9c:	d0ec      	beq.n	800bc78 <USB_StopHost+0xc8>
 800bc9e:	e000      	b.n	800bca2 <USB_StopHost+0xf2>
        break;
 800bca0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	3301      	adds	r3, #1
 800bca6:	61bb      	str	r3, [r7, #24]
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	2b0f      	cmp	r3, #15
 800bcac:	d9c7      	bls.n	800bc3e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800bcae:	697b      	ldr	r3, [r7, #20]
 800bcb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7fe fefb 	bl	800aac0 <USB_EnableGlobalInt>

  return ret;
 800bcca:	7ffb      	ldrb	r3, [r7, #31]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3720      	adds	r7, #32
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800bcd4:	b590      	push	{r4, r7, lr}
 800bcd6:	b089      	sub	sp, #36	@ 0x24
 800bcd8:	af04      	add	r7, sp, #16
 800bcda:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800bcdc:	2301      	movs	r3, #1
 800bcde:	2202      	movs	r2, #2
 800bce0:	2102      	movs	r1, #2
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f000 fc85 	bl	800c5f2 <USBH_FindInterface>
 800bce8:	4603      	mov	r3, r0
 800bcea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
 800bcee:	2bff      	cmp	r3, #255	@ 0xff
 800bcf0:	d002      	beq.n	800bcf8 <USBH_CDC_InterfaceInit+0x24>
 800bcf2:	7bfb      	ldrb	r3, [r7, #15]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d901      	bls.n	800bcfc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bcf8:	2302      	movs	r3, #2
 800bcfa:	e13d      	b.n	800bf78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fc5a 	bl	800c5ba <USBH_SelectInterface>
 800bd06:	4603      	mov	r3, r0
 800bd08:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800bd0a:	7bbb      	ldrb	r3, [r7, #14]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d001      	beq.n	800bd14 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800bd10:	2302      	movs	r3, #2
 800bd12:	e131      	b.n	800bf78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800bd1a:	2050      	movs	r0, #80	@ 0x50
 800bd1c:	f002 fb64 	bl	800e3e8 <malloc>
 800bd20:	4603      	mov	r3, r0
 800bd22:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800bd34:	2302      	movs	r3, #2
 800bd36:	e11f      	b.n	800bf78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800bd38:	2250      	movs	r2, #80	@ 0x50
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	68b8      	ldr	r0, [r7, #8]
 800bd3e:	f002 fee7 	bl	800eb10 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bd42:	7bfb      	ldrb	r3, [r7, #15]
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	211a      	movs	r1, #26
 800bd48:	fb01 f303 	mul.w	r3, r1, r3
 800bd4c:	4413      	add	r3, r2
 800bd4e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	b25b      	sxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	da15      	bge.n	800bd86 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bd5a:	7bfb      	ldrb	r3, [r7, #15]
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	211a      	movs	r1, #26
 800bd60:	fb01 f303 	mul.w	r3, r1, r3
 800bd64:	4413      	add	r3, r2
 800bd66:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800bd6a:	781a      	ldrb	r2, [r3, #0]
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bd70:	7bfb      	ldrb	r3, [r7, #15]
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	211a      	movs	r1, #26
 800bd76:	fb01 f303 	mul.w	r3, r1, r3
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800bd80:	881a      	ldrh	r2, [r3, #0]
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	785b      	ldrb	r3, [r3, #1]
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f001 ffbe 	bl	800dd0e <USBH_AllocPipe>
 800bd92:	4603      	mov	r3, r0
 800bd94:	461a      	mov	r2, r3
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	7819      	ldrb	r1, [r3, #0]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	7858      	ldrb	r0, [r3, #1]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	8952      	ldrh	r2, [r2, #10]
 800bdb2:	9202      	str	r2, [sp, #8]
 800bdb4:	2203      	movs	r2, #3
 800bdb6:	9201      	str	r2, [sp, #4]
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	4623      	mov	r3, r4
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f001 ff76 	bl	800dcb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f002 fa85 	bl	800e2dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	210a      	movs	r1, #10
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fc0a 	bl	800c5f2 <USBH_FindInterface>
 800bdde:	4603      	mov	r3, r0
 800bde0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	2bff      	cmp	r3, #255	@ 0xff
 800bde6:	d002      	beq.n	800bdee <USBH_CDC_InterfaceInit+0x11a>
 800bde8:	7bfb      	ldrb	r3, [r7, #15]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d901      	bls.n	800bdf2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800bdee:	2302      	movs	r3, #2
 800bdf0:	e0c2      	b.n	800bf78 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	211a      	movs	r1, #26
 800bdf8:	fb01 f303 	mul.w	r3, r1, r3
 800bdfc:	4413      	add	r3, r2
 800bdfe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	b25b      	sxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	da16      	bge.n	800be38 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	211a      	movs	r1, #26
 800be10:	fb01 f303 	mul.w	r3, r1, r3
 800be14:	4413      	add	r3, r2
 800be16:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800be1a:	781a      	ldrb	r2, [r3, #0]
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be20:	7bfb      	ldrb	r3, [r7, #15]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	211a      	movs	r1, #26
 800be26:	fb01 f303 	mul.w	r3, r1, r3
 800be2a:	4413      	add	r3, r2
 800be2c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800be30:	881a      	ldrh	r2, [r3, #0]
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	835a      	strh	r2, [r3, #26]
 800be36:	e015      	b.n	800be64 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be38:	7bfb      	ldrb	r3, [r7, #15]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	211a      	movs	r1, #26
 800be3e:	fb01 f303 	mul.w	r3, r1, r3
 800be42:	4413      	add	r3, r2
 800be44:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800be48:	781a      	ldrb	r2, [r3, #0]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	211a      	movs	r1, #26
 800be54:	fb01 f303 	mul.w	r3, r1, r3
 800be58:	4413      	add	r3, r2
 800be5a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800be5e:	881a      	ldrh	r2, [r3, #0]
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800be64:	7bfb      	ldrb	r3, [r7, #15]
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	211a      	movs	r1, #26
 800be6a:	fb01 f303 	mul.w	r3, r1, r3
 800be6e:	4413      	add	r3, r2
 800be70:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	b25b      	sxtb	r3, r3
 800be78:	2b00      	cmp	r3, #0
 800be7a:	da16      	bge.n	800beaa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	211a      	movs	r1, #26
 800be82:	fb01 f303 	mul.w	r3, r1, r3
 800be86:	4413      	add	r3, r2
 800be88:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800be8c:	781a      	ldrb	r2, [r3, #0]
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800be92:	7bfb      	ldrb	r3, [r7, #15]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	211a      	movs	r1, #26
 800be98:	fb01 f303 	mul.w	r3, r1, r3
 800be9c:	4413      	add	r3, r2
 800be9e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800bea2:	881a      	ldrh	r2, [r3, #0]
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	835a      	strh	r2, [r3, #26]
 800bea8:	e015      	b.n	800bed6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	211a      	movs	r1, #26
 800beb0:	fb01 f303 	mul.w	r3, r1, r3
 800beb4:	4413      	add	r3, r2
 800beb6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800beba:	781a      	ldrb	r2, [r3, #0]
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	211a      	movs	r1, #26
 800bec6:	fb01 f303 	mul.w	r3, r1, r3
 800beca:	4413      	add	r3, r2
 800becc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800bed0:	881a      	ldrh	r2, [r3, #0]
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	7b9b      	ldrb	r3, [r3, #14]
 800beda:	4619      	mov	r1, r3
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f001 ff16 	bl	800dd0e <USBH_AllocPipe>
 800bee2:	4603      	mov	r3, r0
 800bee4:	461a      	mov	r2, r3
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	7bdb      	ldrb	r3, [r3, #15]
 800beee:	4619      	mov	r1, r3
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f001 ff0c 	bl	800dd0e <USBH_AllocPipe>
 800bef6:	4603      	mov	r3, r0
 800bef8:	461a      	mov	r2, r3
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	7b59      	ldrb	r1, [r3, #13]
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	7b98      	ldrb	r0, [r3, #14]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf12:	68ba      	ldr	r2, [r7, #8]
 800bf14:	8b12      	ldrh	r2, [r2, #24]
 800bf16:	9202      	str	r2, [sp, #8]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	9201      	str	r2, [sp, #4]
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	4623      	mov	r3, r4
 800bf20:	4602      	mov	r2, r0
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f001 fec4 	bl	800dcb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	7b19      	ldrb	r1, [r3, #12]
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	7bd8      	ldrb	r0, [r3, #15]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	8b52      	ldrh	r2, [r2, #26]
 800bf40:	9202      	str	r2, [sp, #8]
 800bf42:	2202      	movs	r2, #2
 800bf44:	9201      	str	r2, [sp, #4]
 800bf46:	9300      	str	r3, [sp, #0]
 800bf48:	4623      	mov	r3, r4
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f001 feaf 	bl	800dcb0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	7b5b      	ldrb	r3, [r3, #13]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f002 f9ba 	bl	800e2dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	7b1b      	ldrb	r3, [r3, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f002 f9b3 	bl	800e2dc <USBH_LL_SetToggle>

  return USBH_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd90      	pop	{r4, r7, pc}

0800bf80 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800bf8e:	69db      	ldr	r3, [r3, #28]
 800bf90:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00e      	beq.n	800bfb8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	4619      	mov	r1, r3
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f001 fea4 	bl	800dcee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f001 fecf 	bl	800dd50 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	7b1b      	ldrb	r3, [r3, #12]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00e      	beq.n	800bfde <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	7b1b      	ldrb	r3, [r3, #12]
 800bfc4:	4619      	mov	r1, r3
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f001 fe91 	bl	800dcee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	7b1b      	ldrb	r3, [r3, #12]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f001 febc 	bl	800dd50 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	7b5b      	ldrb	r3, [r3, #13]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00e      	beq.n	800c004 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	7b5b      	ldrb	r3, [r3, #13]
 800bfea:	4619      	mov	r1, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f001 fe7e 	bl	800dcee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	7b5b      	ldrb	r3, [r3, #13]
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f001 fea9 	bl	800dd50 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c00a:	69db      	ldr	r3, [r3, #28]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d00b      	beq.n	800c028 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c016:	69db      	ldr	r3, [r3, #28]
 800c018:	4618      	mov	r0, r3
 800c01a:	f002 f9ed 	bl	800e3f8 <free>
    phost->pActiveClass->pData = 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c024:	2200      	movs	r2, #0
 800c026:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}

0800c032 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800c032:	b580      	push	{r7, lr}
 800c034:	b084      	sub	sp, #16
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c040:	69db      	ldr	r3, [r3, #28]
 800c042:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	3340      	adds	r3, #64	@ 0x40
 800c048:	4619      	mov	r1, r3
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f8b1 	bl	800c1b2 <GetLineCoding>
 800c050:	4603      	mov	r3, r0
 800c052:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800c054:	7afb      	ldrb	r3, [r7, #11]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d105      	bne.n	800c066 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c060:	2102      	movs	r1, #2
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800c066:	7afb      	ldrb	r3, [r7, #11]
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c078:	2301      	movs	r3, #1
 800c07a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c086:	69db      	ldr	r3, [r3, #28]
 800c088:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800c090:	2b04      	cmp	r3, #4
 800c092:	d877      	bhi.n	800c184 <USBH_CDC_Process+0x114>
 800c094:	a201      	add	r2, pc, #4	@ (adr r2, 800c09c <USBH_CDC_Process+0x2c>)
 800c096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c09a:	bf00      	nop
 800c09c:	0800c0b1 	.word	0x0800c0b1
 800c0a0:	0800c0b7 	.word	0x0800c0b7
 800c0a4:	0800c0e7 	.word	0x0800c0e7
 800c0a8:	0800c15b 	.word	0x0800c15b
 800c0ac:	0800c169 	.word	0x0800c169
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0b4:	e06d      	b.n	800c192 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 f897 	bl	800c1f0 <SetLineCoding>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c0c6:	7bbb      	ldrb	r3, [r7, #14]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d104      	bne.n	800c0d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c0d4:	e058      	b.n	800c188 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d055      	beq.n	800c188 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c0dc:	68bb      	ldr	r3, [r7, #8]
 800c0de:	2204      	movs	r2, #4
 800c0e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c0e4:	e050      	b.n	800c188 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	3340      	adds	r3, #64	@ 0x40
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f860 	bl	800c1b2 <GetLineCoding>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d126      	bne.n	800c14a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c10e:	791b      	ldrb	r3, [r3, #4]
 800c110:	429a      	cmp	r2, r3
 800c112:	d13b      	bne.n	800c18c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c11e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c120:	429a      	cmp	r2, r3
 800c122:	d133      	bne.n	800c18c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c12e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c130:	429a      	cmp	r2, r3
 800c132:	d12b      	bne.n	800c18c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c13c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c13e:	429a      	cmp	r2, r3
 800c140:	d124      	bne.n	800c18c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f958 	bl	800c3f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800c148:	e020      	b.n	800c18c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d01d      	beq.n	800c18c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2204      	movs	r2, #4
 800c154:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800c158:	e018      	b.n	800c18c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 f867 	bl	800c22e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 f8da 	bl	800c31a <CDC_ProcessReception>
      break;
 800c166:	e014      	b.n	800c192 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c168:	2100      	movs	r1, #0
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f001 f81a 	bl	800d1a4 <USBH_ClrFeature>
 800c170:	4603      	mov	r3, r0
 800c172:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800c174:	7bbb      	ldrb	r3, [r7, #14]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10a      	bne.n	800c190 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800c182:	e005      	b.n	800c190 <USBH_CDC_Process+0x120>

    default:
      break;
 800c184:	bf00      	nop
 800c186:	e004      	b.n	800c192 <USBH_CDC_Process+0x122>
      break;
 800c188:	bf00      	nop
 800c18a:	e002      	b.n	800c192 <USBH_CDC_Process+0x122>
      break;
 800c18c:	bf00      	nop
 800c18e:	e000      	b.n	800c192 <USBH_CDC_Process+0x122>
      break;
 800c190:	bf00      	nop

  }

  return status;
 800c192:	7bfb      	ldrb	r3, [r7, #15]
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	370c      	adds	r7, #12
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr

0800c1b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b082      	sub	sp, #8
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	22a1      	movs	r2, #161	@ 0xa1
 800c1c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2221      	movs	r2, #33	@ 0x21
 800c1c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2207      	movs	r2, #7
 800c1d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2207      	movs	r2, #7
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f001 fb14 	bl	800d80e <USBH_CtlReq>
 800c1e6:	4603      	mov	r3, r0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2221      	movs	r2, #33	@ 0x21
 800c1fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2220      	movs	r2, #32
 800c204:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2200      	movs	r2, #0
 800c210:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2207      	movs	r2, #7
 800c216:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	2207      	movs	r2, #7
 800c21c:	4619      	mov	r1, r3
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f001 faf5 	bl	800d80e <USBH_CtlReq>
 800c224:	4603      	mov	r3, r0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3708      	adds	r7, #8
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}

0800c22e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c22e:	b580      	push	{r7, lr}
 800c230:	b086      	sub	sp, #24
 800c232:	af02      	add	r7, sp, #8
 800c234:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c23c:	69db      	ldr	r3, [r3, #28]
 800c23e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c240:	2300      	movs	r3, #0
 800c242:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d002      	beq.n	800c254 <CDC_ProcessTransmission+0x26>
 800c24e:	2b02      	cmp	r3, #2
 800c250:	d023      	beq.n	800c29a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800c252:	e05e      	b.n	800c312 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	8b12      	ldrh	r2, [r2, #24]
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d90b      	bls.n	800c278 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	69d9      	ldr	r1, [r3, #28]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	8b1a      	ldrh	r2, [r3, #24]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	7b5b      	ldrb	r3, [r3, #13]
 800c26c:	2001      	movs	r0, #1
 800c26e:	9000      	str	r0, [sp, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f001 fcda 	bl	800dc2a <USBH_BulkSendData>
 800c276:	e00b      	b.n	800c290 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800c280:	b29a      	uxth	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	7b5b      	ldrb	r3, [r3, #13]
 800c286:	2001      	movs	r0, #1
 800c288:	9000      	str	r0, [sp, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f001 fccd 	bl	800dc2a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2202      	movs	r2, #2
 800c294:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c298:	e03b      	b.n	800c312 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	7b5b      	ldrb	r3, [r3, #13]
 800c29e:	4619      	mov	r1, r3
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f001 fff1 	bl	800e288 <USBH_LL_GetURBState>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800c2aa:	7afb      	ldrb	r3, [r7, #11]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d128      	bne.n	800c302 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	8b12      	ldrh	r2, [r2, #24]
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d90e      	bls.n	800c2da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	8b12      	ldrh	r2, [r2, #24]
 800c2c4:	1a9a      	subs	r2, r3, r2
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	69db      	ldr	r3, [r3, #28]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	8b12      	ldrh	r2, [r2, #24]
 800c2d2:	441a      	add	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	61da      	str	r2, [r3, #28]
 800c2d8:	e002      	b.n	800c2e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d004      	beq.n	800c2f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c2f0:	e00e      	b.n	800c310 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 f868 	bl	800c3d0 <USBH_CDC_TransmitCallback>
      break;
 800c300:	e006      	b.n	800c310 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c302:	7afb      	ldrb	r3, [r7, #11]
 800c304:	2b02      	cmp	r3, #2
 800c306:	d103      	bne.n	800c310 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800c310:	bf00      	nop
  }
}
 800c312:	bf00      	nop
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}

0800c31a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c31a:	b580      	push	{r7, lr}
 800c31c:	b086      	sub	sp, #24
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c328:	69db      	ldr	r3, [r3, #28]
 800c32a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c32c:	2300      	movs	r3, #0
 800c32e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800c336:	2b03      	cmp	r3, #3
 800c338:	d002      	beq.n	800c340 <CDC_ProcessReception+0x26>
 800c33a:	2b04      	cmp	r3, #4
 800c33c:	d00e      	beq.n	800c35c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800c33e:	e043      	b.n	800c3c8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	6a19      	ldr	r1, [r3, #32]
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	8b5a      	ldrh	r2, [r3, #26]
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	7b1b      	ldrb	r3, [r3, #12]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f001 fc91 	bl	800dc74 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	2204      	movs	r2, #4
 800c356:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c35a:	e035      	b.n	800c3c8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	7b1b      	ldrb	r3, [r3, #12]
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f001 ff90 	bl	800e288 <USBH_LL_GetURBState>
 800c368:	4603      	mov	r3, r0
 800c36a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800c36c:	7cfb      	ldrb	r3, [r7, #19]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d129      	bne.n	800c3c6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	7b1b      	ldrb	r3, [r3, #12]
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f001 fef3 	bl	800e164 <USBH_LL_GetLastXferSize>
 800c37e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	429a      	cmp	r2, r3
 800c388:	d016      	beq.n	800c3b8 <CDC_ProcessReception+0x9e>
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	8b5b      	ldrh	r3, [r3, #26]
 800c38e:	461a      	mov	r2, r3
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	4293      	cmp	r3, r2
 800c394:	d110      	bne.n	800c3b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	1ad2      	subs	r2, r2, r3
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	6a1a      	ldr	r2, [r3, #32]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	441a      	add	r2, r3
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	2203      	movs	r2, #3
 800c3b2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800c3b6:	e006      	b.n	800c3c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 f80f 	bl	800c3e4 <USBH_CDC_ReceiveCallback>
      break;
 800c3c6:	bf00      	nop
  }
}
 800c3c8:	bf00      	nop
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c3ec:	bf00      	nop
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	4613      	mov	r3, r2
 800c418:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c420:	2302      	movs	r3, #2
 800c422:	e029      	b.n	800c478 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	79fa      	ldrb	r2, [r7, #7]
 800c428:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2200      	movs	r2, #0
 800c430:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2200      	movs	r2, #0
 800c438:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f000 f81f 	bl	800c480 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2200      	movs	r2, #0
 800c446:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d003      	beq.n	800c470 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f001 fdc3 	bl	800dffc <USBH_LL_Init>

  return USBH_OK;
 800c476:	2300      	movs	r3, #0
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c48c:	2300      	movs	r3, #0
 800c48e:	60fb      	str	r3, [r7, #12]
 800c490:	e009      	b.n	800c4a6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	33e0      	adds	r3, #224	@ 0xe0
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4413      	add	r3, r2
 800c49c:	2200      	movs	r2, #0
 800c49e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2b0f      	cmp	r3, #15
 800c4aa:	d9f2      	bls.n	800c492 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	60fb      	str	r3, [r7, #12]
 800c4b0:	e009      	b.n	800c4c6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	4413      	add	r3, r2
 800c4b8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c4bc:	2200      	movs	r2, #0
 800c4be:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	60fb      	str	r3, [r7, #12]
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4cc:	d3f1      	bcc.n	800c4b2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2240      	movs	r2, #64	@ 0x40
 800c4f2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2201      	movs	r2, #1
 800c506:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	331c      	adds	r3, #28
 800c51e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c522:	2100      	movs	r1, #0
 800c524:	4618      	mov	r0, r3
 800c526:	f002 faf3 	bl	800eb10 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c530:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c534:	2100      	movs	r1, #0
 800c536:	4618      	mov	r0, r3
 800c538:	f002 faea 	bl	800eb10 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c542:	2212      	movs	r2, #18
 800c544:	2100      	movs	r1, #0
 800c546:	4618      	mov	r0, r3
 800c548:	f002 fae2 	bl	800eb10 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c552:	223e      	movs	r2, #62	@ 0x3e
 800c554:	2100      	movs	r1, #0
 800c556:	4618      	mov	r0, r3
 800c558:	f002 fada 	bl	800eb10 <memset>

  return USBH_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c566:	b480      	push	{r7}
 800c568:	b085      	sub	sp, #20
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
 800c56e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c570:	2300      	movs	r3, #0
 800c572:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d016      	beq.n	800c5a8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10e      	bne.n	800c5a2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c58a:	1c59      	adds	r1, r3, #1
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	33de      	adds	r3, #222	@ 0xde
 800c596:	6839      	ldr	r1, [r7, #0]
 800c598:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c59c:	2300      	movs	r3, #0
 800c59e:	73fb      	strb	r3, [r7, #15]
 800c5a0:	e004      	b.n	800c5ac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c5a2:	2302      	movs	r3, #2
 800c5a4:	73fb      	strb	r3, [r7, #15]
 800c5a6:	e001      	b.n	800c5ac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b085      	sub	sp, #20
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c5d0:	78fa      	ldrb	r2, [r7, #3]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d204      	bcs.n	800c5e0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	78fa      	ldrb	r2, [r7, #3]
 800c5da:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c5de:	e001      	b.n	800c5e4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b087      	sub	sp, #28
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
 800c5fa:	4608      	mov	r0, r1
 800c5fc:	4611      	mov	r1, r2
 800c5fe:	461a      	mov	r2, r3
 800c600:	4603      	mov	r3, r0
 800c602:	70fb      	strb	r3, [r7, #3]
 800c604:	460b      	mov	r3, r1
 800c606:	70bb      	strb	r3, [r7, #2]
 800c608:	4613      	mov	r3, r2
 800c60a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c60c:	2300      	movs	r3, #0
 800c60e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c610:	2300      	movs	r3, #0
 800c612:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c61a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c61c:	e025      	b.n	800c66a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c61e:	7dfb      	ldrb	r3, [r7, #23]
 800c620:	221a      	movs	r2, #26
 800c622:	fb02 f303 	mul.w	r3, r2, r3
 800c626:	3308      	adds	r3, #8
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	4413      	add	r3, r2
 800c62c:	3302      	adds	r3, #2
 800c62e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	795b      	ldrb	r3, [r3, #5]
 800c634:	78fa      	ldrb	r2, [r7, #3]
 800c636:	429a      	cmp	r2, r3
 800c638:	d002      	beq.n	800c640 <USBH_FindInterface+0x4e>
 800c63a:	78fb      	ldrb	r3, [r7, #3]
 800c63c:	2bff      	cmp	r3, #255	@ 0xff
 800c63e:	d111      	bne.n	800c664 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c644:	78ba      	ldrb	r2, [r7, #2]
 800c646:	429a      	cmp	r2, r3
 800c648:	d002      	beq.n	800c650 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c64a:	78bb      	ldrb	r3, [r7, #2]
 800c64c:	2bff      	cmp	r3, #255	@ 0xff
 800c64e:	d109      	bne.n	800c664 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c654:	787a      	ldrb	r2, [r7, #1]
 800c656:	429a      	cmp	r2, r3
 800c658:	d002      	beq.n	800c660 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c65a:	787b      	ldrb	r3, [r7, #1]
 800c65c:	2bff      	cmp	r3, #255	@ 0xff
 800c65e:	d101      	bne.n	800c664 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c660:	7dfb      	ldrb	r3, [r7, #23]
 800c662:	e006      	b.n	800c672 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c664:	7dfb      	ldrb	r3, [r7, #23]
 800c666:	3301      	adds	r3, #1
 800c668:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c66a:	7dfb      	ldrb	r3, [r7, #23]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d9d6      	bls.n	800c61e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c670:	23ff      	movs	r3, #255	@ 0xff
}
 800c672:	4618      	mov	r0, r3
 800c674:	371c      	adds	r7, #28
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr

0800c67e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f001 fcf4 	bl	800e074 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c68c:	2101      	movs	r1, #1
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f001 fe0d 	bl	800e2ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c694:	2300      	movs	r3, #0
}
 800c696:	4618      	mov	r0, r3
 800c698:	3708      	adds	r7, #8
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
	...

0800c6a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b088      	sub	sp, #32
 800c6a4:	af04      	add	r7, sp, #16
 800c6a6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d102      	bne.n	800c6c2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2203      	movs	r2, #3
 800c6c0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b0b      	cmp	r3, #11
 800c6ca:	f200 81bb 	bhi.w	800ca44 <USBH_Process+0x3a4>
 800c6ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d4 <USBH_Process+0x34>)
 800c6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d4:	0800c705 	.word	0x0800c705
 800c6d8:	0800c737 	.word	0x0800c737
 800c6dc:	0800c79f 	.word	0x0800c79f
 800c6e0:	0800c9df 	.word	0x0800c9df
 800c6e4:	0800ca45 	.word	0x0800ca45
 800c6e8:	0800c83f 	.word	0x0800c83f
 800c6ec:	0800c985 	.word	0x0800c985
 800c6f0:	0800c875 	.word	0x0800c875
 800c6f4:	0800c895 	.word	0x0800c895
 800c6f8:	0800c8b3 	.word	0x0800c8b3
 800c6fc:	0800c8f7 	.word	0x0800c8f7
 800c700:	0800c9c7 	.word	0x0800c9c7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f000 819b 	beq.w	800ca48 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2201      	movs	r2, #1
 800c716:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c718:	20c8      	movs	r0, #200	@ 0xc8
 800c71a:	f001 fe12 	bl	800e342 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 fd05 	bl	800e12e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c734:	e188      	b.n	800ca48 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d107      	bne.n	800c750 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2202      	movs	r2, #2
 800c74c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c74e:	e18a      	b.n	800ca66 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c756:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c75a:	d914      	bls.n	800c786 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c762:	3301      	adds	r3, #1
 800c764:	b2da      	uxtb	r2, r3
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800c772:	2b03      	cmp	r3, #3
 800c774:	d903      	bls.n	800c77e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	220d      	movs	r2, #13
 800c77a:	701a      	strb	r2, [r3, #0]
      break;
 800c77c:	e173      	b.n	800ca66 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	701a      	strb	r2, [r3, #0]
      break;
 800c784:	e16f      	b.n	800ca66 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800c78c:	f103 020a 	add.w	r2, r3, #10
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800c796:	200a      	movs	r0, #10
 800c798:	f001 fdd3 	bl	800e342 <USBH_Delay>
      break;
 800c79c:	e163      	b.n	800ca66 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d005      	beq.n	800c7b4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c7ae:	2104      	movs	r1, #4
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c7b4:	2064      	movs	r0, #100	@ 0x64
 800c7b6:	f001 fdc4 	bl	800e342 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f001 fc90 	bl	800e0e0 <USBH_LL_GetSpeed>
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	461a      	mov	r2, r3
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	2205      	movs	r2, #5
 800c7ce:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f001 fa9b 	bl	800dd0e <USBH_AllocPipe>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	461a      	mov	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c7e0:	2180      	movs	r1, #128	@ 0x80
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f001 fa93 	bl	800dd0e <USBH_AllocPipe>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	7919      	ldrb	r1, [r3, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c804:	9202      	str	r2, [sp, #8]
 800c806:	2200      	movs	r2, #0
 800c808:	9201      	str	r2, [sp, #4]
 800c80a:	9300      	str	r3, [sp, #0]
 800c80c:	4603      	mov	r3, r0
 800c80e:	2280      	movs	r2, #128	@ 0x80
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f001 fa4d 	bl	800dcb0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	7959      	ldrb	r1, [r3, #5]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c82a:	9202      	str	r2, [sp, #8]
 800c82c:	2200      	movs	r2, #0
 800c82e:	9201      	str	r2, [sp, #4]
 800c830:	9300      	str	r3, [sp, #0]
 800c832:	4603      	mov	r3, r0
 800c834:	2200      	movs	r2, #0
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f001 fa3a 	bl	800dcb0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c83c:	e113      	b.n	800ca66 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f916 	bl	800ca70 <USBH_HandleEnum>
 800c844:	4603      	mov	r3, r0
 800c846:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c848:	7bbb      	ldrb	r3, [r7, #14]
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f040 80fd 	bne.w	800ca4c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2200      	movs	r2, #0
 800c856:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800c860:	2b01      	cmp	r3, #1
 800c862:	d103      	bne.n	800c86c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2208      	movs	r2, #8
 800c868:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c86a:	e0ef      	b.n	800ca4c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2207      	movs	r2, #7
 800c870:	701a      	strb	r2, [r3, #0]
      break;
 800c872:	e0eb      	b.n	800ca4c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	f000 80e8 	beq.w	800ca50 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c886:	2101      	movs	r1, #1
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2208      	movs	r2, #8
 800c890:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800c892:	e0dd      	b.n	800ca50 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800c89a:	4619      	mov	r1, r3
 800c89c:	6878      	ldr	r0, [r7, #4]
 800c89e:	f000 fc3a 	bl	800d116 <USBH_SetCfg>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f040 80d5 	bne.w	800ca54 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2209      	movs	r2, #9
 800c8ae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c8b0:	e0d0      	b.n	800ca54 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800c8b8:	f003 0320 	and.w	r3, r3, #32
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d016      	beq.n	800c8ee <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800c8c0:	2101      	movs	r1, #1
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fc4a 	bl	800d15c <USBH_SetFeature>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c8cc:	7bbb      	ldrb	r3, [r7, #14]
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d103      	bne.n	800c8dc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	220a      	movs	r2, #10
 800c8d8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c8da:	e0bd      	b.n	800ca58 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800c8dc:	7bbb      	ldrb	r3, [r7, #14]
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	2b03      	cmp	r3, #3
 800c8e2:	f040 80b9 	bne.w	800ca58 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	220a      	movs	r2, #10
 800c8ea:	701a      	strb	r2, [r3, #0]
      break;
 800c8ec:	e0b4      	b.n	800ca58 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	220a      	movs	r2, #10
 800c8f2:	701a      	strb	r2, [r3, #0]
      break;
 800c8f4:	e0b0      	b.n	800ca58 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f000 80ad 	beq.w	800ca5c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	2200      	movs	r2, #0
 800c906:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c90a:	2300      	movs	r3, #0
 800c90c:	73fb      	strb	r3, [r7, #15]
 800c90e:	e016      	b.n	800c93e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c910:	7bfa      	ldrb	r2, [r7, #15]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	32de      	adds	r2, #222	@ 0xde
 800c916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c91a:	791a      	ldrb	r2, [r3, #4]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800c922:	429a      	cmp	r2, r3
 800c924:	d108      	bne.n	800c938 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c926:	7bfa      	ldrb	r2, [r7, #15]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	32de      	adds	r2, #222	@ 0xde
 800c92c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800c936:	e005      	b.n	800c944 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	3301      	adds	r3, #1
 800c93c:	73fb      	strb	r3, [r7, #15]
 800c93e:	7bfb      	ldrb	r3, [r7, #15]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d0e5      	beq.n	800c910 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d016      	beq.n	800c97c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	4798      	blx	r3
 800c95a:	4603      	mov	r3, r0
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d109      	bne.n	800c974 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2206      	movs	r2, #6
 800c964:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c96c:	2103      	movs	r1, #3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c972:	e073      	b.n	800ca5c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	220d      	movs	r2, #13
 800c978:	701a      	strb	r2, [r3, #0]
      break;
 800c97a:	e06f      	b.n	800ca5c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	220d      	movs	r2, #13
 800c980:	701a      	strb	r2, [r3, #0]
      break;
 800c982:	e06b      	b.n	800ca5c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d017      	beq.n	800c9be <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c994:	691b      	ldr	r3, [r3, #16]
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	4798      	blx	r3
 800c99a:	4603      	mov	r3, r0
 800c99c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c99e:	7bbb      	ldrb	r3, [r7, #14]
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d103      	bne.n	800c9ae <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	220b      	movs	r2, #11
 800c9aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800c9ac:	e058      	b.n	800ca60 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800c9ae:	7bbb      	ldrb	r3, [r7, #14]
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	2b02      	cmp	r3, #2
 800c9b4:	d154      	bne.n	800ca60 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	220d      	movs	r2, #13
 800c9ba:	701a      	strb	r2, [r3, #0]
      break;
 800c9bc:	e050      	b.n	800ca60 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	220d      	movs	r2, #13
 800c9c2:	701a      	strb	r2, [r3, #0]
      break;
 800c9c4:	e04c      	b.n	800ca60 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d049      	beq.n	800ca64 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9d6:	695b      	ldr	r3, [r3, #20]
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	4798      	blx	r3
      }
      break;
 800c9dc:	e042      	b.n	800ca64 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7ff fd4a 	bl	800c480 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d009      	beq.n	800ca0a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800c9fc:	68db      	ldr	r3, [r3, #12]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d005      	beq.n	800ca20 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ca1a:	2105      	movs	r1, #5
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d107      	bne.n	800ca3c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7ff fe22 	bl	800c67e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ca3a:	e014      	b.n	800ca66 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f001 fb19 	bl	800e074 <USBH_LL_Start>
      break;
 800ca42:	e010      	b.n	800ca66 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800ca44:	bf00      	nop
 800ca46:	e00e      	b.n	800ca66 <USBH_Process+0x3c6>
      break;
 800ca48:	bf00      	nop
 800ca4a:	e00c      	b.n	800ca66 <USBH_Process+0x3c6>
      break;
 800ca4c:	bf00      	nop
 800ca4e:	e00a      	b.n	800ca66 <USBH_Process+0x3c6>
    break;
 800ca50:	bf00      	nop
 800ca52:	e008      	b.n	800ca66 <USBH_Process+0x3c6>
      break;
 800ca54:	bf00      	nop
 800ca56:	e006      	b.n	800ca66 <USBH_Process+0x3c6>
      break;
 800ca58:	bf00      	nop
 800ca5a:	e004      	b.n	800ca66 <USBH_Process+0x3c6>
      break;
 800ca5c:	bf00      	nop
 800ca5e:	e002      	b.n	800ca66 <USBH_Process+0x3c6>
      break;
 800ca60:	bf00      	nop
 800ca62:	e000      	b.n	800ca66 <USBH_Process+0x3c6>
      break;
 800ca64:	bf00      	nop
  }
  return USBH_OK;
 800ca66:	2300      	movs	r3, #0
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3710      	adds	r7, #16
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b088      	sub	sp, #32
 800ca74:	af04      	add	r7, sp, #16
 800ca76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800ca7c:	2301      	movs	r3, #1
 800ca7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	785b      	ldrb	r3, [r3, #1]
 800ca84:	2b07      	cmp	r3, #7
 800ca86:	f200 81bd 	bhi.w	800ce04 <USBH_HandleEnum+0x394>
 800ca8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ca90 <USBH_HandleEnum+0x20>)
 800ca8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca90:	0800cab1 	.word	0x0800cab1
 800ca94:	0800cb6b 	.word	0x0800cb6b
 800ca98:	0800cbd5 	.word	0x0800cbd5
 800ca9c:	0800cc5f 	.word	0x0800cc5f
 800caa0:	0800ccc9 	.word	0x0800ccc9
 800caa4:	0800cd39 	.word	0x0800cd39
 800caa8:	0800cd7f 	.word	0x0800cd7f
 800caac:	0800cdc5 	.word	0x0800cdc5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cab0:	2108      	movs	r1, #8
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fa4c 	bl	800cf50 <USBH_Get_DevDesc>
 800cab8:	4603      	mov	r3, r0
 800caba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cabc:	7bbb      	ldrb	r3, [r7, #14]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d12e      	bne.n	800cb20 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2201      	movs	r2, #1
 800cad0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	7919      	ldrb	r1, [r3, #4]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cae6:	9202      	str	r2, [sp, #8]
 800cae8:	2200      	movs	r2, #0
 800caea:	9201      	str	r2, [sp, #4]
 800caec:	9300      	str	r3, [sp, #0]
 800caee:	4603      	mov	r3, r0
 800caf0:	2280      	movs	r2, #128	@ 0x80
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f001 f8dc 	bl	800dcb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	7959      	ldrb	r1, [r3, #5]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cb0c:	9202      	str	r2, [sp, #8]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	9201      	str	r2, [sp, #4]
 800cb12:	9300      	str	r3, [sp, #0]
 800cb14:	4603      	mov	r3, r0
 800cb16:	2200      	movs	r2, #0
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f001 f8c9 	bl	800dcb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cb1e:	e173      	b.n	800ce08 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb20:	7bbb      	ldrb	r3, [r7, #14]
 800cb22:	2b03      	cmp	r3, #3
 800cb24:	f040 8170 	bne.w	800ce08 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cb2e:	3301      	adds	r3, #1
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cb3e:	2b03      	cmp	r3, #3
 800cb40:	d903      	bls.n	800cb4a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	220d      	movs	r2, #13
 800cb46:	701a      	strb	r2, [r3, #0]
      break;
 800cb48:	e15e      	b.n	800ce08 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	795b      	ldrb	r3, [r3, #5]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f001 f8fd 	bl	800dd50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	791b      	ldrb	r3, [r3, #4]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f001 f8f7 	bl	800dd50 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	701a      	strb	r2, [r3, #0]
      break;
 800cb68:	e14e      	b.n	800ce08 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cb6a:	2112      	movs	r1, #18
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 f9ef 	bl	800cf50 <USBH_Get_DevDesc>
 800cb72:	4603      	mov	r3, r0
 800cb74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cb76:	7bbb      	ldrb	r3, [r7, #14]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d103      	bne.n	800cb84 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2202      	movs	r2, #2
 800cb80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cb82:	e143      	b.n	800ce0c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb84:	7bbb      	ldrb	r3, [r7, #14]
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	f040 8140 	bne.w	800ce0c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cb92:	3301      	adds	r3, #1
 800cb94:	b2da      	uxtb	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d903      	bls.n	800cbae <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	220d      	movs	r2, #13
 800cbaa:	701a      	strb	r2, [r3, #0]
      break;
 800cbac:	e12e      	b.n	800ce0c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	795b      	ldrb	r3, [r3, #5]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f001 f8cb 	bl	800dd50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	791b      	ldrb	r3, [r3, #4]
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	f001 f8c5 	bl	800dd50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
      break;
 800cbd2:	e11b      	b.n	800ce0c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fa79 	bl	800d0ce <USBH_SetAddress>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cbe0:	7bbb      	ldrb	r3, [r7, #14]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d130      	bne.n	800cc48 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800cbe6:	2002      	movs	r0, #2
 800cbe8:	f001 fbab 	bl	800e342 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2201      	movs	r2, #1
 800cbf0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2203      	movs	r2, #3
 800cbf8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	7919      	ldrb	r1, [r3, #4]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800cc0e:	9202      	str	r2, [sp, #8]
 800cc10:	2200      	movs	r2, #0
 800cc12:	9201      	str	r2, [sp, #4]
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	4603      	mov	r3, r0
 800cc18:	2280      	movs	r2, #128	@ 0x80
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f001 f848 	bl	800dcb0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	7959      	ldrb	r1, [r3, #5]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cc34:	9202      	str	r2, [sp, #8]
 800cc36:	2200      	movs	r2, #0
 800cc38:	9201      	str	r2, [sp, #4]
 800cc3a:	9300      	str	r3, [sp, #0]
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2200      	movs	r2, #0
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f001 f835 	bl	800dcb0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cc46:	e0e3      	b.n	800ce10 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc48:	7bbb      	ldrb	r3, [r7, #14]
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	f040 80e0 	bne.w	800ce10 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	220d      	movs	r2, #13
 800cc54:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	705a      	strb	r2, [r3, #1]
      break;
 800cc5c:	e0d8      	b.n	800ce10 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cc5e:	2109      	movs	r1, #9
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f9a1 	bl	800cfa8 <USBH_Get_CfgDesc>
 800cc66:	4603      	mov	r3, r0
 800cc68:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cc6a:	7bbb      	ldrb	r3, [r7, #14]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d103      	bne.n	800cc78 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2204      	movs	r2, #4
 800cc74:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cc76:	e0cd      	b.n	800ce14 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc78:	7bbb      	ldrb	r3, [r7, #14]
 800cc7a:	2b03      	cmp	r3, #3
 800cc7c:	f040 80ca 	bne.w	800ce14 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cc86:	3301      	adds	r3, #1
 800cc88:	b2da      	uxtb	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cc96:	2b03      	cmp	r3, #3
 800cc98:	d903      	bls.n	800cca2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	220d      	movs	r2, #13
 800cc9e:	701a      	strb	r2, [r3, #0]
      break;
 800cca0:	e0b8      	b.n	800ce14 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	795b      	ldrb	r3, [r3, #5]
 800cca6:	4619      	mov	r1, r3
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f001 f851 	bl	800dd50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	791b      	ldrb	r3, [r3, #4]
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f001 f84b 	bl	800dd50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	701a      	strb	r2, [r3, #0]
      break;
 800ccc6:	e0a5      	b.n	800ce14 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800ccce:	4619      	mov	r1, r3
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 f969 	bl	800cfa8 <USBH_Get_CfgDesc>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ccda:	7bbb      	ldrb	r3, [r7, #14]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d103      	bne.n	800cce8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2205      	movs	r2, #5
 800cce4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cce6:	e097      	b.n	800ce18 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
 800ccea:	2b03      	cmp	r3, #3
 800ccec:	f040 8094 	bne.w	800ce18 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cd06:	2b03      	cmp	r3, #3
 800cd08:	d903      	bls.n	800cd12 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	220d      	movs	r2, #13
 800cd0e:	701a      	strb	r2, [r3, #0]
      break;
 800cd10:	e082      	b.n	800ce18 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	795b      	ldrb	r3, [r3, #5]
 800cd16:	4619      	mov	r1, r3
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f001 f819 	bl	800dd50 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	791b      	ldrb	r3, [r3, #4]
 800cd22:	4619      	mov	r1, r3
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f001 f813 	bl	800dd50 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	701a      	strb	r2, [r3, #0]
      break;
 800cd36:	e06f      	b.n	800ce18 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d019      	beq.n	800cd76 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cd4e:	23ff      	movs	r3, #255	@ 0xff
 800cd50:	6878      	ldr	r0, [r7, #4]
 800cd52:	f000 f953 	bl	800cffc <USBH_Get_StringDesc>
 800cd56:	4603      	mov	r3, r0
 800cd58:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cd5a:	7bbb      	ldrb	r3, [r7, #14]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d103      	bne.n	800cd68 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2206      	movs	r2, #6
 800cd64:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cd66:	e059      	b.n	800ce1c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cd68:	7bbb      	ldrb	r3, [r7, #14]
 800cd6a:	2b03      	cmp	r3, #3
 800cd6c:	d156      	bne.n	800ce1c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2206      	movs	r2, #6
 800cd72:	705a      	strb	r2, [r3, #1]
      break;
 800cd74:	e052      	b.n	800ce1c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2206      	movs	r2, #6
 800cd7a:	705a      	strb	r2, [r3, #1]
      break;
 800cd7c:	e04e      	b.n	800ce1c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d019      	beq.n	800cdbc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cd94:	23ff      	movs	r3, #255	@ 0xff
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f930 	bl	800cffc <USBH_Get_StringDesc>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d103      	bne.n	800cdae <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2207      	movs	r2, #7
 800cdaa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cdac:	e038      	b.n	800ce20 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdae:	7bbb      	ldrb	r3, [r7, #14]
 800cdb0:	2b03      	cmp	r3, #3
 800cdb2:	d135      	bne.n	800ce20 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2207      	movs	r2, #7
 800cdb8:	705a      	strb	r2, [r3, #1]
      break;
 800cdba:	e031      	b.n	800ce20 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2207      	movs	r2, #7
 800cdc0:	705a      	strb	r2, [r3, #1]
      break;
 800cdc2:	e02d      	b.n	800ce20 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d017      	beq.n	800cdfe <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cdda:	23ff      	movs	r3, #255	@ 0xff
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 f90d 	bl	800cffc <USBH_Get_StringDesc>
 800cde2:	4603      	mov	r3, r0
 800cde4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cde6:	7bbb      	ldrb	r3, [r7, #14]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d102      	bne.n	800cdf2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cdec:	2300      	movs	r3, #0
 800cdee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cdf0:	e018      	b.n	800ce24 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdf2:	7bbb      	ldrb	r3, [r7, #14]
 800cdf4:	2b03      	cmp	r3, #3
 800cdf6:	d115      	bne.n	800ce24 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73fb      	strb	r3, [r7, #15]
      break;
 800cdfc:	e012      	b.n	800ce24 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	73fb      	strb	r3, [r7, #15]
      break;
 800ce02:	e00f      	b.n	800ce24 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ce04:	bf00      	nop
 800ce06:	e00e      	b.n	800ce26 <USBH_HandleEnum+0x3b6>
      break;
 800ce08:	bf00      	nop
 800ce0a:	e00c      	b.n	800ce26 <USBH_HandleEnum+0x3b6>
      break;
 800ce0c:	bf00      	nop
 800ce0e:	e00a      	b.n	800ce26 <USBH_HandleEnum+0x3b6>
      break;
 800ce10:	bf00      	nop
 800ce12:	e008      	b.n	800ce26 <USBH_HandleEnum+0x3b6>
      break;
 800ce14:	bf00      	nop
 800ce16:	e006      	b.n	800ce26 <USBH_HandleEnum+0x3b6>
      break;
 800ce18:	bf00      	nop
 800ce1a:	e004      	b.n	800ce26 <USBH_HandleEnum+0x3b6>
      break;
 800ce1c:	bf00      	nop
 800ce1e:	e002      	b.n	800ce26 <USBH_HandleEnum+0x3b6>
      break;
 800ce20:	bf00      	nop
 800ce22:	e000      	b.n	800ce26 <USBH_HandleEnum+0x3b6>
      break;
 800ce24:	bf00      	nop
  }
  return Status;
 800ce26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3710      	adds	r7, #16
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b083      	sub	sp, #12
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ce42:	bf00      	nop
 800ce44:	370c      	adds	r7, #12
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr

0800ce4e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b082      	sub	sp, #8
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 f804 	bl	800ce72 <USBH_HandleSof>
}
 800ce6a:	bf00      	nop
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ce72:	b580      	push	{r7, lr}
 800ce74:	b082      	sub	sp, #8
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	2b0b      	cmp	r3, #11
 800ce82:	d10a      	bne.n	800ce9a <USBH_HandleSof+0x28>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d005      	beq.n	800ce9a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ce94:	699b      	ldr	r3, [r3, #24]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	4798      	blx	r3
  }
}
 800ce9a:	bf00      	nop
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800cea2:	b480      	push	{r7}
 800cea4:	b083      	sub	sp, #12
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	2201      	movs	r2, #1
 800ceae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ceb2:	bf00      	nop
}
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cebe:	b480      	push	{r7}
 800cec0:	b083      	sub	sp, #12
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800cece:	bf00      	nop
}
 800ced0:	370c      	adds	r7, #12
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr

0800ceda <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ceda:	b480      	push	{r7}
 800cedc:	b083      	sub	sp, #12
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2201      	movs	r2, #1
 800cee6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f001 f8be 	bl	800e0aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	791b      	ldrb	r3, [r3, #4]
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 ff0b 	bl	800dd50 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	795b      	ldrb	r3, [r3, #5]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 ff05 	bl	800dd50 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3708      	adds	r7, #8
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af02      	add	r7, sp, #8
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800cf5c:	887b      	ldrh	r3, [r7, #2]
 800cf5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf62:	d901      	bls.n	800cf68 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cf64:	2303      	movs	r3, #3
 800cf66:	e01b      	b.n	800cfa0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800cf6e:	887b      	ldrh	r3, [r7, #2]
 800cf70:	9300      	str	r3, [sp, #0]
 800cf72:	4613      	mov	r3, r2
 800cf74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf78:	2100      	movs	r1, #0
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 f872 	bl	800d064 <USBH_GetDescriptor>
 800cf80:	4603      	mov	r3, r0
 800cf82:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800cf84:	7bfb      	ldrb	r3, [r7, #15]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d109      	bne.n	800cf9e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800cf90:	887a      	ldrh	r2, [r7, #2]
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 f929 	bl	800d1ec <USBH_ParseDevDesc>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cf9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3710      	adds	r7, #16
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b086      	sub	sp, #24
 800cfac:	af02      	add	r7, sp, #8
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	331c      	adds	r3, #28
 800cfb8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800cfba:	887b      	ldrh	r3, [r7, #2]
 800cfbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfc0:	d901      	bls.n	800cfc6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800cfc2:	2303      	movs	r3, #3
 800cfc4:	e016      	b.n	800cff4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800cfc6:	887b      	ldrh	r3, [r7, #2]
 800cfc8:	9300      	str	r3, [sp, #0]
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f846 	bl	800d064 <USBH_GetDescriptor>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d107      	bne.n	800cff2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800cfe2:	887b      	ldrh	r3, [r7, #2]
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	68b9      	ldr	r1, [r7, #8]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 f9af 	bl	800d34c <USBH_ParseCfgDesc>
 800cfee:	4603      	mov	r3, r0
 800cff0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3710      	adds	r7, #16
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af02      	add	r7, sp, #8
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	607a      	str	r2, [r7, #4]
 800d006:	461a      	mov	r2, r3
 800d008:	460b      	mov	r3, r1
 800d00a:	72fb      	strb	r3, [r7, #11]
 800d00c:	4613      	mov	r3, r2
 800d00e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d010:	893b      	ldrh	r3, [r7, #8]
 800d012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d016:	d802      	bhi.n	800d01e <USBH_Get_StringDesc+0x22>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d01e:	2303      	movs	r3, #3
 800d020:	e01c      	b.n	800d05c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d022:	7afb      	ldrb	r3, [r7, #11]
 800d024:	b29b      	uxth	r3, r3
 800d026:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d02a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d032:	893b      	ldrh	r3, [r7, #8]
 800d034:	9300      	str	r3, [sp, #0]
 800d036:	460b      	mov	r3, r1
 800d038:	2100      	movs	r1, #0
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f000 f812 	bl	800d064 <USBH_GetDescriptor>
 800d040:	4603      	mov	r3, r0
 800d042:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d044:	7dfb      	ldrb	r3, [r7, #23]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d107      	bne.n	800d05a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d050:	893a      	ldrh	r2, [r7, #8]
 800d052:	6879      	ldr	r1, [r7, #4]
 800d054:	4618      	mov	r0, r3
 800d056:	f000 fb8d 	bl	800d774 <USBH_ParseStringDesc>
  }

  return status;
 800d05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3718      	adds	r7, #24
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	60f8      	str	r0, [r7, #12]
 800d06c:	607b      	str	r3, [r7, #4]
 800d06e:	460b      	mov	r3, r1
 800d070:	72fb      	strb	r3, [r7, #11]
 800d072:	4613      	mov	r3, r2
 800d074:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	789b      	ldrb	r3, [r3, #2]
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d11c      	bne.n	800d0b8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d07e:	7afb      	ldrb	r3, [r7, #11]
 800d080:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d084:	b2da      	uxtb	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2206      	movs	r2, #6
 800d08e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	893a      	ldrh	r2, [r7, #8]
 800d094:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d096:	893b      	ldrh	r3, [r7, #8]
 800d098:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d09c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d0a0:	d104      	bne.n	800d0ac <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f240 4209 	movw	r2, #1033	@ 0x409
 800d0a8:	829a      	strh	r2, [r3, #20]
 800d0aa:	e002      	b.n	800d0b2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	8b3a      	ldrh	r2, [r7, #24]
 800d0b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d0b8:	8b3b      	ldrh	r3, [r7, #24]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	6879      	ldr	r1, [r7, #4]
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f000 fba5 	bl	800d80e <USBH_CtlReq>
 800d0c4:	4603      	mov	r3, r0
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b082      	sub	sp, #8
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	789b      	ldrb	r3, [r3, #2]
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d10f      	bne.n	800d102 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2205      	movs	r2, #5
 800d0ec:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d0ee:	78fb      	ldrb	r3, [r7, #3]
 800d0f0:	b29a      	uxth	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2200      	movs	r2, #0
 800d100:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d102:	2200      	movs	r2, #0
 800d104:	2100      	movs	r1, #0
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 fb81 	bl	800d80e <USBH_CtlReq>
 800d10c:	4603      	mov	r3, r0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b082      	sub	sp, #8
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	460b      	mov	r3, r1
 800d120:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	789b      	ldrb	r3, [r3, #2]
 800d126:	2b01      	cmp	r3, #1
 800d128:	d10e      	bne.n	800d148 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2209      	movs	r2, #9
 800d134:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	887a      	ldrh	r2, [r7, #2]
 800d13a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d148:	2200      	movs	r2, #0
 800d14a:	2100      	movs	r1, #0
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 fb5e 	bl	800d80e <USBH_CtlReq>
 800d152:	4603      	mov	r3, r0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
 800d164:	460b      	mov	r3, r1
 800d166:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	789b      	ldrb	r3, [r3, #2]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d10f      	bne.n	800d190 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2203      	movs	r2, #3
 800d17a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d17c:	78fb      	ldrb	r3, [r7, #3]
 800d17e:	b29a      	uxth	r2, r3
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2200      	movs	r2, #0
 800d188:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d190:	2200      	movs	r2, #0
 800d192:	2100      	movs	r1, #0
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f000 fb3a 	bl	800d80e <USBH_CtlReq>
 800d19a:	4603      	mov	r3, r0
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3708      	adds	r7, #8
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	789b      	ldrb	r3, [r3, #2]
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d10f      	bne.n	800d1d8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2202      	movs	r2, #2
 800d1bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d1ca:	78fb      	ldrb	r3, [r7, #3]
 800d1cc:	b29a      	uxth	r2, r3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d1d8:	2200      	movs	r2, #0
 800d1da:	2100      	movs	r1, #0
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 fb16 	bl	800d80e <USBH_CtlReq>
 800d1e2:	4603      	mov	r3, r0
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	3708      	adds	r7, #8
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bd80      	pop	{r7, pc}

0800d1ec <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b087      	sub	sp, #28
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	60f8      	str	r0, [r7, #12]
 800d1f4:	60b9      	str	r1, [r7, #8]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d200:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d202:	2300      	movs	r3, #0
 800d204:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d101      	bne.n	800d210 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d20c:	2302      	movs	r3, #2
 800d20e:	e094      	b.n	800d33a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	781a      	ldrb	r2, [r3, #0]
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	785a      	ldrb	r2, [r3, #1]
 800d21c:	693b      	ldr	r3, [r7, #16]
 800d21e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	3302      	adds	r3, #2
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	461a      	mov	r2, r3
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	3303      	adds	r3, #3
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	021b      	lsls	r3, r3, #8
 800d230:	b29b      	uxth	r3, r3
 800d232:	4313      	orrs	r3, r2
 800d234:	b29a      	uxth	r2, r3
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	791a      	ldrb	r2, [r3, #4]
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	795a      	ldrb	r2, [r3, #5]
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	799a      	ldrb	r2, [r3, #6]
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	79da      	ldrb	r2, [r3, #7]
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d260:	2b00      	cmp	r3, #0
 800d262:	d004      	beq.n	800d26e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d11b      	bne.n	800d2a6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	79db      	ldrb	r3, [r3, #7]
 800d272:	2b20      	cmp	r3, #32
 800d274:	dc0f      	bgt.n	800d296 <USBH_ParseDevDesc+0xaa>
 800d276:	2b08      	cmp	r3, #8
 800d278:	db0f      	blt.n	800d29a <USBH_ParseDevDesc+0xae>
 800d27a:	3b08      	subs	r3, #8
 800d27c:	4a32      	ldr	r2, [pc, #200]	@ (800d348 <USBH_ParseDevDesc+0x15c>)
 800d27e:	fa22 f303 	lsr.w	r3, r2, r3
 800d282:	f003 0301 	and.w	r3, r3, #1
 800d286:	2b00      	cmp	r3, #0
 800d288:	bf14      	ite	ne
 800d28a:	2301      	movne	r3, #1
 800d28c:	2300      	moveq	r3, #0
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	2b00      	cmp	r3, #0
 800d292:	d106      	bne.n	800d2a2 <USBH_ParseDevDesc+0xb6>
 800d294:	e001      	b.n	800d29a <USBH_ParseDevDesc+0xae>
 800d296:	2b40      	cmp	r3, #64	@ 0x40
 800d298:	d003      	beq.n	800d2a2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	2208      	movs	r2, #8
 800d29e:	71da      	strb	r2, [r3, #7]
        break;
 800d2a0:	e000      	b.n	800d2a4 <USBH_ParseDevDesc+0xb8>
        break;
 800d2a2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d2a4:	e00e      	b.n	800d2c4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d107      	bne.n	800d2c0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	79db      	ldrb	r3, [r3, #7]
 800d2b4:	2b08      	cmp	r3, #8
 800d2b6:	d005      	beq.n	800d2c4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	2208      	movs	r2, #8
 800d2bc:	71da      	strb	r2, [r3, #7]
 800d2be:	e001      	b.n	800d2c4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d2c4:	88fb      	ldrh	r3, [r7, #6]
 800d2c6:	2b08      	cmp	r3, #8
 800d2c8:	d936      	bls.n	800d338 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	3308      	adds	r3, #8
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	3309      	adds	r3, #9
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	021b      	lsls	r3, r3, #8
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	330a      	adds	r3, #10
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	330b      	adds	r3, #11
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	021b      	lsls	r3, r3, #8
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	330c      	adds	r3, #12
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	461a      	mov	r2, r3
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	330d      	adds	r3, #13
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	021b      	lsls	r3, r3, #8
 800d30e:	b29b      	uxth	r3, r3
 800d310:	4313      	orrs	r3, r2
 800d312:	b29a      	uxth	r2, r3
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	7b9a      	ldrb	r2, [r3, #14]
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	7bda      	ldrb	r2, [r3, #15]
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	7c1a      	ldrb	r2, [r3, #16]
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	7c5a      	ldrb	r2, [r3, #17]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d338:	7dfb      	ldrb	r3, [r7, #23]
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	371c      	adds	r7, #28
 800d33e:	46bd      	mov	sp, r7
 800d340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	01000101 	.word	0x01000101

0800d34c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b08c      	sub	sp, #48	@ 0x30
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	4613      	mov	r3, r2
 800d358:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d360:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d362:	2300      	movs	r3, #0
 800d364:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d368:	2300      	movs	r3, #0
 800d36a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d36e:	2300      	movs	r3, #0
 800d370:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d101      	bne.n	800d37e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d37a:	2302      	movs	r3, #2
 800d37c:	e0da      	b.n	800d534 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	2b09      	cmp	r3, #9
 800d388:	d002      	beq.n	800d390 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38c:	2209      	movs	r2, #9
 800d38e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d390:	68bb      	ldr	r3, [r7, #8]
 800d392:	781a      	ldrb	r2, [r3, #0]
 800d394:	6a3b      	ldr	r3, [r7, #32]
 800d396:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	785a      	ldrb	r2, [r3, #1]
 800d39c:	6a3b      	ldr	r3, [r7, #32]
 800d39e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	3302      	adds	r3, #2
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	3303      	adds	r3, #3
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	021b      	lsls	r3, r3, #8
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3ba:	bf28      	it	cs
 800d3bc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	6a3b      	ldr	r3, [r7, #32]
 800d3c4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	791a      	ldrb	r2, [r3, #4]
 800d3ca:	6a3b      	ldr	r3, [r7, #32]
 800d3cc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	795a      	ldrb	r2, [r3, #5]
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	799a      	ldrb	r2, [r3, #6]
 800d3da:	6a3b      	ldr	r3, [r7, #32]
 800d3dc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	79da      	ldrb	r2, [r3, #7]
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	7a1a      	ldrb	r2, [r3, #8]
 800d3ea:	6a3b      	ldr	r3, [r7, #32]
 800d3ec:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d3ee:	88fb      	ldrh	r3, [r7, #6]
 800d3f0:	2b09      	cmp	r3, #9
 800d3f2:	f240 809d 	bls.w	800d530 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d3f6:	2309      	movs	r3, #9
 800d3f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d3fe:	e081      	b.n	800d504 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d400:	f107 0316 	add.w	r3, r7, #22
 800d404:	4619      	mov	r1, r3
 800d406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d408:	f000 f9e7 	bl	800d7da <USBH_GetNextDesc>
 800d40c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d40e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d410:	785b      	ldrb	r3, [r3, #1]
 800d412:	2b04      	cmp	r3, #4
 800d414:	d176      	bne.n	800d504 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	2b09      	cmp	r3, #9
 800d41c:	d002      	beq.n	800d424 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d420:	2209      	movs	r2, #9
 800d422:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d428:	221a      	movs	r2, #26
 800d42a:	fb02 f303 	mul.w	r3, r2, r3
 800d42e:	3308      	adds	r3, #8
 800d430:	6a3a      	ldr	r2, [r7, #32]
 800d432:	4413      	add	r3, r2
 800d434:	3302      	adds	r3, #2
 800d436:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d43a:	69f8      	ldr	r0, [r7, #28]
 800d43c:	f000 f87e 	bl	800d53c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d440:	2300      	movs	r3, #0
 800d442:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d446:	2300      	movs	r3, #0
 800d448:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d44a:	e043      	b.n	800d4d4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d44c:	f107 0316 	add.w	r3, r7, #22
 800d450:	4619      	mov	r1, r3
 800d452:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d454:	f000 f9c1 	bl	800d7da <USBH_GetNextDesc>
 800d458:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d45a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d45c:	785b      	ldrb	r3, [r3, #1]
 800d45e:	2b05      	cmp	r3, #5
 800d460:	d138      	bne.n	800d4d4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d462:	69fb      	ldr	r3, [r7, #28]
 800d464:	795b      	ldrb	r3, [r3, #5]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d113      	bne.n	800d492 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d46e:	2b02      	cmp	r3, #2
 800d470:	d003      	beq.n	800d47a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	799b      	ldrb	r3, [r3, #6]
 800d476:	2b03      	cmp	r3, #3
 800d478:	d10b      	bne.n	800d492 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d47a:	69fb      	ldr	r3, [r7, #28]
 800d47c:	79db      	ldrb	r3, [r3, #7]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d10b      	bne.n	800d49a <USBH_ParseCfgDesc+0x14e>
 800d482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	2b09      	cmp	r3, #9
 800d488:	d007      	beq.n	800d49a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48c:	2209      	movs	r2, #9
 800d48e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d490:	e003      	b.n	800d49a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d494:	2207      	movs	r2, #7
 800d496:	701a      	strb	r2, [r3, #0]
 800d498:	e000      	b.n	800d49c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d49a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4a0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d4a4:	3201      	adds	r2, #1
 800d4a6:	00d2      	lsls	r2, r2, #3
 800d4a8:	211a      	movs	r1, #26
 800d4aa:	fb01 f303 	mul.w	r3, r1, r3
 800d4ae:	4413      	add	r3, r2
 800d4b0:	3308      	adds	r3, #8
 800d4b2:	6a3a      	ldr	r2, [r7, #32]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	3304      	adds	r3, #4
 800d4b8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d4ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4bc:	69b9      	ldr	r1, [r7, #24]
 800d4be:	68f8      	ldr	r0, [r7, #12]
 800d4c0:	f000 f870 	bl	800d5a4 <USBH_ParseEPDesc>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d4ca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	791b      	ldrb	r3, [r3, #4]
 800d4d8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d204      	bcs.n	800d4ea <USBH_ParseCfgDesc+0x19e>
 800d4e0:	6a3b      	ldr	r3, [r7, #32]
 800d4e2:	885a      	ldrh	r2, [r3, #2]
 800d4e4:	8afb      	ldrh	r3, [r7, #22]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d8b0      	bhi.n	800d44c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	791b      	ldrb	r3, [r3, #4]
 800d4ee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	d201      	bcs.n	800d4fa <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d4f6:	2303      	movs	r3, #3
 800d4f8:	e01c      	b.n	800d534 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d4fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d4fe:	3301      	adds	r3, #1
 800d500:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d805      	bhi.n	800d518 <USBH_ParseCfgDesc+0x1cc>
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	885a      	ldrh	r2, [r3, #2]
 800d510:	8afb      	ldrh	r3, [r7, #22]
 800d512:	429a      	cmp	r2, r3
 800d514:	f63f af74 	bhi.w	800d400 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d518:	6a3b      	ldr	r3, [r7, #32]
 800d51a:	791b      	ldrb	r3, [r3, #4]
 800d51c:	2b02      	cmp	r3, #2
 800d51e:	bf28      	it	cs
 800d520:	2302      	movcs	r3, #2
 800d522:	b2db      	uxtb	r3, r3
 800d524:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d528:	429a      	cmp	r2, r3
 800d52a:	d201      	bcs.n	800d530 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e001      	b.n	800d534 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d530:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d534:	4618      	mov	r0, r3
 800d536:	3730      	adds	r7, #48	@ 0x30
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781a      	ldrb	r2, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	785a      	ldrb	r2, [r3, #1]
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	789a      	ldrb	r2, [r3, #2]
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	78da      	ldrb	r2, [r3, #3]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	3304      	adds	r3, #4
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	bf28      	it	cs
 800d570:	2302      	movcs	r3, #2
 800d572:	b2da      	uxtb	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	795a      	ldrb	r2, [r3, #5]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	799a      	ldrb	r2, [r3, #6]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	79da      	ldrb	r2, [r3, #7]
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d590:	683b      	ldr	r3, [r7, #0]
 800d592:	7a1a      	ldrb	r2, [r3, #8]
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	721a      	strb	r2, [r3, #8]
}
 800d598:	bf00      	nop
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b087      	sub	sp, #28
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	781a      	ldrb	r2, [r3, #0]
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	785a      	ldrb	r2, [r3, #1]
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	789a      	ldrb	r2, [r3, #2]
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	78da      	ldrb	r2, [r3, #3]
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3304      	adds	r3, #4
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	461a      	mov	r2, r3
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	3305      	adds	r3, #5
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	021b      	lsls	r3, r3, #8
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	b29a      	uxth	r2, r3
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	799a      	ldrb	r2, [r3, #6]
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	889b      	ldrh	r3, [r3, #4]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d606:	d804      	bhi.n	800d612 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d60c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d610:	d901      	bls.n	800d616 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d612:	2303      	movs	r3, #3
 800d614:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d136      	bne.n	800d68e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	78db      	ldrb	r3, [r3, #3]
 800d624:	f003 0303 	and.w	r3, r3, #3
 800d628:	2b02      	cmp	r3, #2
 800d62a:	d108      	bne.n	800d63e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d62c:	68bb      	ldr	r3, [r7, #8]
 800d62e:	889b      	ldrh	r3, [r3, #4]
 800d630:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d634:	f240 8097 	bls.w	800d766 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d638:	2303      	movs	r3, #3
 800d63a:	75fb      	strb	r3, [r7, #23]
 800d63c:	e093      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	78db      	ldrb	r3, [r3, #3]
 800d642:	f003 0303 	and.w	r3, r3, #3
 800d646:	2b00      	cmp	r3, #0
 800d648:	d107      	bne.n	800d65a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	889b      	ldrh	r3, [r3, #4]
 800d64e:	2b40      	cmp	r3, #64	@ 0x40
 800d650:	f240 8089 	bls.w	800d766 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d654:	2303      	movs	r3, #3
 800d656:	75fb      	strb	r3, [r7, #23]
 800d658:	e085      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	78db      	ldrb	r3, [r3, #3]
 800d65e:	f003 0303 	and.w	r3, r3, #3
 800d662:	2b01      	cmp	r3, #1
 800d664:	d005      	beq.n	800d672 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	78db      	ldrb	r3, [r3, #3]
 800d66a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d66e:	2b03      	cmp	r3, #3
 800d670:	d10a      	bne.n	800d688 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	799b      	ldrb	r3, [r3, #6]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <USBH_ParseEPDesc+0xde>
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	799b      	ldrb	r3, [r3, #6]
 800d67e:	2b10      	cmp	r3, #16
 800d680:	d970      	bls.n	800d764 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d682:	2303      	movs	r3, #3
 800d684:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d686:	e06d      	b.n	800d764 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d688:	2303      	movs	r3, #3
 800d68a:	75fb      	strb	r3, [r7, #23]
 800d68c:	e06b      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d694:	2b01      	cmp	r3, #1
 800d696:	d13c      	bne.n	800d712 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	78db      	ldrb	r3, [r3, #3]
 800d69c:	f003 0303 	and.w	r3, r3, #3
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	d005      	beq.n	800d6b0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	78db      	ldrb	r3, [r3, #3]
 800d6a8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d106      	bne.n	800d6be <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	889b      	ldrh	r3, [r3, #4]
 800d6b4:	2b40      	cmp	r3, #64	@ 0x40
 800d6b6:	d956      	bls.n	800d766 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d6b8:	2303      	movs	r3, #3
 800d6ba:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d6bc:	e053      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	78db      	ldrb	r3, [r3, #3]
 800d6c2:	f003 0303 	and.w	r3, r3, #3
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d10e      	bne.n	800d6e8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	799b      	ldrb	r3, [r3, #6]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d007      	beq.n	800d6e2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800d6d6:	2b10      	cmp	r3, #16
 800d6d8:	d803      	bhi.n	800d6e2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800d6de:	2b40      	cmp	r3, #64	@ 0x40
 800d6e0:	d941      	bls.n	800d766 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d6e2:	2303      	movs	r3, #3
 800d6e4:	75fb      	strb	r3, [r7, #23]
 800d6e6:	e03e      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	78db      	ldrb	r3, [r3, #3]
 800d6ec:	f003 0303 	and.w	r3, r3, #3
 800d6f0:	2b03      	cmp	r3, #3
 800d6f2:	d10b      	bne.n	800d70c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	799b      	ldrb	r3, [r3, #6]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d004      	beq.n	800d706 <USBH_ParseEPDesc+0x162>
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	889b      	ldrh	r3, [r3, #4]
 800d700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d704:	d32f      	bcc.n	800d766 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d706:	2303      	movs	r3, #3
 800d708:	75fb      	strb	r3, [r7, #23]
 800d70a:	e02c      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d70c:	2303      	movs	r3, #3
 800d70e:	75fb      	strb	r3, [r7, #23]
 800d710:	e029      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d718:	2b02      	cmp	r3, #2
 800d71a:	d120      	bne.n	800d75e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	78db      	ldrb	r3, [r3, #3]
 800d720:	f003 0303 	and.w	r3, r3, #3
 800d724:	2b00      	cmp	r3, #0
 800d726:	d106      	bne.n	800d736 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	889b      	ldrh	r3, [r3, #4]
 800d72c:	2b08      	cmp	r3, #8
 800d72e:	d01a      	beq.n	800d766 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d730:	2303      	movs	r3, #3
 800d732:	75fb      	strb	r3, [r7, #23]
 800d734:	e017      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	78db      	ldrb	r3, [r3, #3]
 800d73a:	f003 0303 	and.w	r3, r3, #3
 800d73e:	2b03      	cmp	r3, #3
 800d740:	d10a      	bne.n	800d758 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	799b      	ldrb	r3, [r3, #6]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d003      	beq.n	800d752 <USBH_ParseEPDesc+0x1ae>
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	889b      	ldrh	r3, [r3, #4]
 800d74e:	2b08      	cmp	r3, #8
 800d750:	d909      	bls.n	800d766 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d752:	2303      	movs	r3, #3
 800d754:	75fb      	strb	r3, [r7, #23]
 800d756:	e006      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d758:	2303      	movs	r3, #3
 800d75a:	75fb      	strb	r3, [r7, #23]
 800d75c:	e003      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d75e:	2303      	movs	r3, #3
 800d760:	75fb      	strb	r3, [r7, #23]
 800d762:	e000      	b.n	800d766 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d764:	bf00      	nop
  }

  return status;
 800d766:	7dfb      	ldrb	r3, [r7, #23]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	371c      	adds	r7, #28
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d774:	b480      	push	{r7}
 800d776:	b087      	sub	sp, #28
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	4613      	mov	r3, r2
 800d780:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3301      	adds	r3, #1
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b03      	cmp	r3, #3
 800d78a:	d120      	bne.n	800d7ce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	1e9a      	subs	r2, r3, #2
 800d792:	88fb      	ldrh	r3, [r7, #6]
 800d794:	4293      	cmp	r3, r2
 800d796:	bf28      	it	cs
 800d798:	4613      	movcs	r3, r2
 800d79a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	3302      	adds	r3, #2
 800d7a0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	82fb      	strh	r3, [r7, #22]
 800d7a6:	e00b      	b.n	800d7c0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d7a8:	8afb      	ldrh	r3, [r7, #22]
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	4413      	add	r3, r2
 800d7ae:	781a      	ldrb	r2, [r3, #0]
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d7ba:	8afb      	ldrh	r3, [r7, #22]
 800d7bc:	3302      	adds	r3, #2
 800d7be:	82fb      	strh	r3, [r7, #22]
 800d7c0:	8afa      	ldrh	r2, [r7, #22]
 800d7c2:	8abb      	ldrh	r3, [r7, #20]
 800d7c4:	429a      	cmp	r2, r3
 800d7c6:	d3ef      	bcc.n	800d7a8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	701a      	strb	r2, [r3, #0]
  }
}
 800d7ce:	bf00      	nop
 800d7d0:	371c      	adds	r7, #28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr

0800d7da <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d7da:	b480      	push	{r7}
 800d7dc:	b085      	sub	sp, #20
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	881b      	ldrh	r3, [r3, #0]
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	7812      	ldrb	r2, [r2, #0]
 800d7ec:	4413      	add	r3, r2
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4413      	add	r3, r2
 800d7fe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d800:	68fb      	ldr	r3, [r7, #12]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3714      	adds	r7, #20
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b086      	sub	sp, #24
 800d812:	af00      	add	r7, sp, #0
 800d814:	60f8      	str	r0, [r7, #12]
 800d816:	60b9      	str	r1, [r7, #8]
 800d818:	4613      	mov	r3, r2
 800d81a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d81c:	2301      	movs	r3, #1
 800d81e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	789b      	ldrb	r3, [r3, #2]
 800d824:	2b01      	cmp	r3, #1
 800d826:	d002      	beq.n	800d82e <USBH_CtlReq+0x20>
 800d828:	2b02      	cmp	r3, #2
 800d82a:	d00f      	beq.n	800d84c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d82c:	e027      	b.n	800d87e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	68ba      	ldr	r2, [r7, #8]
 800d832:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	88fa      	ldrh	r2, [r7, #6]
 800d838:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2201      	movs	r2, #1
 800d83e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	2202      	movs	r2, #2
 800d844:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d846:	2301      	movs	r3, #1
 800d848:	75fb      	strb	r3, [r7, #23]
      break;
 800d84a:	e018      	b.n	800d87e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f000 f81b 	bl	800d888 <USBH_HandleControl>
 800d852:	4603      	mov	r3, r0
 800d854:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d856:	7dfb      	ldrb	r3, [r7, #23]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d002      	beq.n	800d862 <USBH_CtlReq+0x54>
 800d85c:	7dfb      	ldrb	r3, [r7, #23]
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d106      	bne.n	800d870 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2201      	movs	r2, #1
 800d866:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2200      	movs	r2, #0
 800d86c:	761a      	strb	r2, [r3, #24]
      break;
 800d86e:	e005      	b.n	800d87c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d870:	7dfb      	ldrb	r3, [r7, #23]
 800d872:	2b02      	cmp	r3, #2
 800d874:	d102      	bne.n	800d87c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2201      	movs	r2, #1
 800d87a:	709a      	strb	r2, [r3, #2]
      break;
 800d87c:	bf00      	nop
  }
  return status;
 800d87e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d880:	4618      	mov	r0, r3
 800d882:	3718      	adds	r7, #24
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b086      	sub	sp, #24
 800d88c:	af02      	add	r7, sp, #8
 800d88e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d890:	2301      	movs	r3, #1
 800d892:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d894:	2300      	movs	r3, #0
 800d896:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	7e1b      	ldrb	r3, [r3, #24]
 800d89c:	3b01      	subs	r3, #1
 800d89e:	2b0a      	cmp	r3, #10
 800d8a0:	f200 8156 	bhi.w	800db50 <USBH_HandleControl+0x2c8>
 800d8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d8ac <USBH_HandleControl+0x24>)
 800d8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8aa:	bf00      	nop
 800d8ac:	0800d8d9 	.word	0x0800d8d9
 800d8b0:	0800d8f3 	.word	0x0800d8f3
 800d8b4:	0800d95d 	.word	0x0800d95d
 800d8b8:	0800d983 	.word	0x0800d983
 800d8bc:	0800d9bb 	.word	0x0800d9bb
 800d8c0:	0800d9e5 	.word	0x0800d9e5
 800d8c4:	0800da37 	.word	0x0800da37
 800d8c8:	0800da59 	.word	0x0800da59
 800d8cc:	0800da95 	.word	0x0800da95
 800d8d0:	0800dabb 	.word	0x0800dabb
 800d8d4:	0800daf9 	.word	0x0800daf9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f103 0110 	add.w	r1, r3, #16
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	795b      	ldrb	r3, [r3, #5]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f943 	bl	800db70 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2202      	movs	r2, #2
 800d8ee:	761a      	strb	r2, [r3, #24]
      break;
 800d8f0:	e139      	b.n	800db66 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	795b      	ldrb	r3, [r3, #5]
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fcc5 	bl	800e288 <USBH_LL_GetURBState>
 800d8fe:	4603      	mov	r3, r0
 800d900:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d902:	7bbb      	ldrb	r3, [r7, #14]
 800d904:	2b01      	cmp	r3, #1
 800d906:	d11e      	bne.n	800d946 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	7c1b      	ldrb	r3, [r3, #16]
 800d90c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d910:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	8adb      	ldrh	r3, [r3, #22]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d00a      	beq.n	800d930 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d91a:	7b7b      	ldrb	r3, [r7, #13]
 800d91c:	2b80      	cmp	r3, #128	@ 0x80
 800d91e:	d103      	bne.n	800d928 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2203      	movs	r2, #3
 800d924:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d926:	e115      	b.n	800db54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2205      	movs	r2, #5
 800d92c:	761a      	strb	r2, [r3, #24]
      break;
 800d92e:	e111      	b.n	800db54 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d930:	7b7b      	ldrb	r3, [r7, #13]
 800d932:	2b80      	cmp	r3, #128	@ 0x80
 800d934:	d103      	bne.n	800d93e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2209      	movs	r2, #9
 800d93a:	761a      	strb	r2, [r3, #24]
      break;
 800d93c:	e10a      	b.n	800db54 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2207      	movs	r2, #7
 800d942:	761a      	strb	r2, [r3, #24]
      break;
 800d944:	e106      	b.n	800db54 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	2b04      	cmp	r3, #4
 800d94a:	d003      	beq.n	800d954 <USBH_HandleControl+0xcc>
 800d94c:	7bbb      	ldrb	r3, [r7, #14]
 800d94e:	2b02      	cmp	r3, #2
 800d950:	f040 8100 	bne.w	800db54 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	220b      	movs	r2, #11
 800d958:	761a      	strb	r2, [r3, #24]
      break;
 800d95a:	e0fb      	b.n	800db54 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d962:	b29a      	uxth	r2, r3
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6899      	ldr	r1, [r3, #8]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	899a      	ldrh	r2, [r3, #12]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	791b      	ldrb	r3, [r3, #4]
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f000 f93a 	bl	800dbee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2204      	movs	r2, #4
 800d97e:	761a      	strb	r2, [r3, #24]
      break;
 800d980:	e0f1      	b.n	800db66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	791b      	ldrb	r3, [r3, #4]
 800d986:	4619      	mov	r1, r3
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 fc7d 	bl	800e288 <USBH_LL_GetURBState>
 800d98e:	4603      	mov	r3, r0
 800d990:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d992:	7bbb      	ldrb	r3, [r7, #14]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d102      	bne.n	800d99e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2209      	movs	r2, #9
 800d99c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d99e:	7bbb      	ldrb	r3, [r7, #14]
 800d9a0:	2b05      	cmp	r3, #5
 800d9a2:	d102      	bne.n	800d9aa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d9a8:	e0d6      	b.n	800db58 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d9aa:	7bbb      	ldrb	r3, [r7, #14]
 800d9ac:	2b04      	cmp	r3, #4
 800d9ae:	f040 80d3 	bne.w	800db58 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	220b      	movs	r2, #11
 800d9b6:	761a      	strb	r2, [r3, #24]
      break;
 800d9b8:	e0ce      	b.n	800db58 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6899      	ldr	r1, [r3, #8]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	899a      	ldrh	r2, [r3, #12]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	795b      	ldrb	r3, [r3, #5]
 800d9c6:	2001      	movs	r0, #1
 800d9c8:	9000      	str	r0, [sp, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f8ea 	bl	800dba4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800d9d6:	b29a      	uxth	r2, r3
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2206      	movs	r2, #6
 800d9e0:	761a      	strb	r2, [r3, #24]
      break;
 800d9e2:	e0c0      	b.n	800db66 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	795b      	ldrb	r3, [r3, #5]
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fc4c 	bl	800e288 <USBH_LL_GetURBState>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d9f4:	7bbb      	ldrb	r3, [r7, #14]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d103      	bne.n	800da02 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2207      	movs	r2, #7
 800d9fe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800da00:	e0ac      	b.n	800db5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800da02:	7bbb      	ldrb	r3, [r7, #14]
 800da04:	2b05      	cmp	r3, #5
 800da06:	d105      	bne.n	800da14 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	220c      	movs	r2, #12
 800da0c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800da0e:	2303      	movs	r3, #3
 800da10:	73fb      	strb	r3, [r7, #15]
      break;
 800da12:	e0a3      	b.n	800db5c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800da14:	7bbb      	ldrb	r3, [r7, #14]
 800da16:	2b02      	cmp	r3, #2
 800da18:	d103      	bne.n	800da22 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2205      	movs	r2, #5
 800da1e:	761a      	strb	r2, [r3, #24]
      break;
 800da20:	e09c      	b.n	800db5c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	2b04      	cmp	r3, #4
 800da26:	f040 8099 	bne.w	800db5c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	220b      	movs	r2, #11
 800da2e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800da30:	2302      	movs	r3, #2
 800da32:	73fb      	strb	r3, [r7, #15]
      break;
 800da34:	e092      	b.n	800db5c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	791b      	ldrb	r3, [r3, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	2100      	movs	r1, #0
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f8d5 	bl	800dbee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2208      	movs	r2, #8
 800da54:	761a      	strb	r2, [r3, #24]

      break;
 800da56:	e086      	b.n	800db66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	791b      	ldrb	r3, [r3, #4]
 800da5c:	4619      	mov	r1, r3
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 fc12 	bl	800e288 <USBH_LL_GetURBState>
 800da64:	4603      	mov	r3, r0
 800da66:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800da68:	7bbb      	ldrb	r3, [r7, #14]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d105      	bne.n	800da7a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	220d      	movs	r2, #13
 800da72:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800da74:	2300      	movs	r3, #0
 800da76:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800da78:	e072      	b.n	800db60 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800da7a:	7bbb      	ldrb	r3, [r7, #14]
 800da7c:	2b04      	cmp	r3, #4
 800da7e:	d103      	bne.n	800da88 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	220b      	movs	r2, #11
 800da84:	761a      	strb	r2, [r3, #24]
      break;
 800da86:	e06b      	b.n	800db60 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800da88:	7bbb      	ldrb	r3, [r7, #14]
 800da8a:	2b05      	cmp	r3, #5
 800da8c:	d168      	bne.n	800db60 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800da8e:	2303      	movs	r3, #3
 800da90:	73fb      	strb	r3, [r7, #15]
      break;
 800da92:	e065      	b.n	800db60 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	795b      	ldrb	r3, [r3, #5]
 800da98:	2201      	movs	r2, #1
 800da9a:	9200      	str	r2, [sp, #0]
 800da9c:	2200      	movs	r2, #0
 800da9e:	2100      	movs	r1, #0
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 f87f 	bl	800dba4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800daac:	b29a      	uxth	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	220a      	movs	r2, #10
 800dab6:	761a      	strb	r2, [r3, #24]
      break;
 800dab8:	e055      	b.n	800db66 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	795b      	ldrb	r3, [r3, #5]
 800dabe:	4619      	mov	r1, r3
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f000 fbe1 	bl	800e288 <USBH_LL_GetURBState>
 800dac6:	4603      	mov	r3, r0
 800dac8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800daca:	7bbb      	ldrb	r3, [r7, #14]
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d105      	bne.n	800dadc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	220d      	movs	r2, #13
 800dad8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dada:	e043      	b.n	800db64 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dadc:	7bbb      	ldrb	r3, [r7, #14]
 800dade:	2b02      	cmp	r3, #2
 800dae0:	d103      	bne.n	800daea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2209      	movs	r2, #9
 800dae6:	761a      	strb	r2, [r3, #24]
      break;
 800dae8:	e03c      	b.n	800db64 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800daea:	7bbb      	ldrb	r3, [r7, #14]
 800daec:	2b04      	cmp	r3, #4
 800daee:	d139      	bne.n	800db64 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	220b      	movs	r2, #11
 800daf4:	761a      	strb	r2, [r3, #24]
      break;
 800daf6:	e035      	b.n	800db64 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7e5b      	ldrb	r3, [r3, #25]
 800dafc:	3301      	adds	r3, #1
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	765a      	strb	r2, [r3, #25]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	7e5b      	ldrb	r3, [r3, #25]
 800db08:	2b02      	cmp	r3, #2
 800db0a:	d806      	bhi.n	800db1a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2201      	movs	r2, #1
 800db16:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800db18:	e025      	b.n	800db66 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800db20:	2106      	movs	r1, #6
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	795b      	ldrb	r3, [r3, #5]
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f90c 	bl	800dd50 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	791b      	ldrb	r3, [r3, #4]
 800db3c:	4619      	mov	r1, r3
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f906 	bl	800dd50 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2200      	movs	r2, #0
 800db48:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800db4a:	2302      	movs	r3, #2
 800db4c:	73fb      	strb	r3, [r7, #15]
      break;
 800db4e:	e00a      	b.n	800db66 <USBH_HandleControl+0x2de>

    default:
      break;
 800db50:	bf00      	nop
 800db52:	e008      	b.n	800db66 <USBH_HandleControl+0x2de>
      break;
 800db54:	bf00      	nop
 800db56:	e006      	b.n	800db66 <USBH_HandleControl+0x2de>
      break;
 800db58:	bf00      	nop
 800db5a:	e004      	b.n	800db66 <USBH_HandleControl+0x2de>
      break;
 800db5c:	bf00      	nop
 800db5e:	e002      	b.n	800db66 <USBH_HandleControl+0x2de>
      break;
 800db60:	bf00      	nop
 800db62:	e000      	b.n	800db66 <USBH_HandleControl+0x2de>
      break;
 800db64:	bf00      	nop
  }

  return status;
 800db66:	7bfb      	ldrb	r3, [r7, #15]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3710      	adds	r7, #16
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b088      	sub	sp, #32
 800db74:	af04      	add	r7, sp, #16
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	4613      	mov	r3, r2
 800db7c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800db7e:	79f9      	ldrb	r1, [r7, #7]
 800db80:	2300      	movs	r3, #0
 800db82:	9303      	str	r3, [sp, #12]
 800db84:	2308      	movs	r3, #8
 800db86:	9302      	str	r3, [sp, #8]
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	9301      	str	r3, [sp, #4]
 800db8c:	2300      	movs	r3, #0
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	2300      	movs	r3, #0
 800db92:	2200      	movs	r2, #0
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 fb46 	bl	800e226 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}

0800dba4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b088      	sub	sp, #32
 800dba8:	af04      	add	r7, sp, #16
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	4611      	mov	r1, r2
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	80fb      	strh	r3, [r7, #6]
 800dbb6:	4613      	mov	r3, r2
 800dbb8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d001      	beq.n	800dbc8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dbc8:	7979      	ldrb	r1, [r7, #5]
 800dbca:	7e3b      	ldrb	r3, [r7, #24]
 800dbcc:	9303      	str	r3, [sp, #12]
 800dbce:	88fb      	ldrh	r3, [r7, #6]
 800dbd0:	9302      	str	r3, [sp, #8]
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	9301      	str	r3, [sp, #4]
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	9300      	str	r3, [sp, #0]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	2200      	movs	r2, #0
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f000 fb21 	bl	800e226 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800dbe4:	2300      	movs	r3, #0
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b088      	sub	sp, #32
 800dbf2:	af04      	add	r7, sp, #16
 800dbf4:	60f8      	str	r0, [r7, #12]
 800dbf6:	60b9      	str	r1, [r7, #8]
 800dbf8:	4611      	mov	r1, r2
 800dbfa:	461a      	mov	r2, r3
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	80fb      	strh	r3, [r7, #6]
 800dc00:	4613      	mov	r3, r2
 800dc02:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dc04:	7979      	ldrb	r1, [r7, #5]
 800dc06:	2300      	movs	r3, #0
 800dc08:	9303      	str	r3, [sp, #12]
 800dc0a:	88fb      	ldrh	r3, [r7, #6]
 800dc0c:	9302      	str	r3, [sp, #8]
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	9301      	str	r3, [sp, #4]
 800dc12:	2301      	movs	r3, #1
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	2300      	movs	r3, #0
 800dc18:	2201      	movs	r2, #1
 800dc1a:	68f8      	ldr	r0, [r7, #12]
 800dc1c:	f000 fb03 	bl	800e226 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dc20:	2300      	movs	r3, #0

}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3710      	adds	r7, #16
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b088      	sub	sp, #32
 800dc2e:	af04      	add	r7, sp, #16
 800dc30:	60f8      	str	r0, [r7, #12]
 800dc32:	60b9      	str	r1, [r7, #8]
 800dc34:	4611      	mov	r1, r2
 800dc36:	461a      	mov	r2, r3
 800dc38:	460b      	mov	r3, r1
 800dc3a:	80fb      	strh	r3, [r7, #6]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dc4e:	7979      	ldrb	r1, [r7, #5]
 800dc50:	7e3b      	ldrb	r3, [r7, #24]
 800dc52:	9303      	str	r3, [sp, #12]
 800dc54:	88fb      	ldrh	r3, [r7, #6]
 800dc56:	9302      	str	r3, [sp, #8]
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	9301      	str	r3, [sp, #4]
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	2302      	movs	r3, #2
 800dc62:	2200      	movs	r2, #0
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f000 fade 	bl	800e226 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800dc6a:	2300      	movs	r3, #0
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b088      	sub	sp, #32
 800dc78:	af04      	add	r7, sp, #16
 800dc7a:	60f8      	str	r0, [r7, #12]
 800dc7c:	60b9      	str	r1, [r7, #8]
 800dc7e:	4611      	mov	r1, r2
 800dc80:	461a      	mov	r2, r3
 800dc82:	460b      	mov	r3, r1
 800dc84:	80fb      	strh	r3, [r7, #6]
 800dc86:	4613      	mov	r3, r2
 800dc88:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dc8a:	7979      	ldrb	r1, [r7, #5]
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	9303      	str	r3, [sp, #12]
 800dc90:	88fb      	ldrh	r3, [r7, #6]
 800dc92:	9302      	str	r3, [sp, #8]
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	9301      	str	r3, [sp, #4]
 800dc98:	2301      	movs	r3, #1
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	2302      	movs	r3, #2
 800dc9e:	2201      	movs	r2, #1
 800dca0:	68f8      	ldr	r0, [r7, #12]
 800dca2:	f000 fac0 	bl	800e226 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}

0800dcb0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b086      	sub	sp, #24
 800dcb4:	af04      	add	r7, sp, #16
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	4608      	mov	r0, r1
 800dcba:	4611      	mov	r1, r2
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	70fb      	strb	r3, [r7, #3]
 800dcc2:	460b      	mov	r3, r1
 800dcc4:	70bb      	strb	r3, [r7, #2]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dcca:	7878      	ldrb	r0, [r7, #1]
 800dccc:	78ba      	ldrb	r2, [r7, #2]
 800dcce:	78f9      	ldrb	r1, [r7, #3]
 800dcd0:	8b3b      	ldrh	r3, [r7, #24]
 800dcd2:	9302      	str	r3, [sp, #8]
 800dcd4:	7d3b      	ldrb	r3, [r7, #20]
 800dcd6:	9301      	str	r3, [sp, #4]
 800dcd8:	7c3b      	ldrb	r3, [r7, #16]
 800dcda:	9300      	str	r3, [sp, #0]
 800dcdc:	4603      	mov	r3, r0
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f000 fa53 	bl	800e18a <USBH_LL_OpenPipe>

  return USBH_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b082      	sub	sp, #8
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800dcfa:	78fb      	ldrb	r3, [r7, #3]
 800dcfc:	4619      	mov	r1, r3
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fa72 	bl	800e1e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800dd04:	2300      	movs	r3, #0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b084      	sub	sp, #16
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	460b      	mov	r3, r1
 800dd18:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f000 f836 	bl	800dd8c <USBH_GetFreePipe>
 800dd20:	4603      	mov	r3, r0
 800dd22:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800dd24:	89fb      	ldrh	r3, [r7, #14]
 800dd26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d00a      	beq.n	800dd44 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800dd2e:	78fa      	ldrb	r2, [r7, #3]
 800dd30:	89fb      	ldrh	r3, [r7, #14]
 800dd32:	f003 030f 	and.w	r3, r3, #15
 800dd36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dd3a:	6879      	ldr	r1, [r7, #4]
 800dd3c:	33e0      	adds	r3, #224	@ 0xe0
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	440b      	add	r3, r1
 800dd42:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800dd44:	89fb      	ldrh	r3, [r7, #14]
 800dd46:	b2db      	uxtb	r3, r3
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3710      	adds	r7, #16
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}

0800dd50 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b083      	sub	sp, #12
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
 800dd58:	460b      	mov	r3, r1
 800dd5a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800dd5c:	78fb      	ldrb	r3, [r7, #3]
 800dd5e:	2b0f      	cmp	r3, #15
 800dd60:	d80d      	bhi.n	800dd7e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800dd62:	78fb      	ldrb	r3, [r7, #3]
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	33e0      	adds	r3, #224	@ 0xe0
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	4413      	add	r3, r2
 800dd6c:	685a      	ldr	r2, [r3, #4]
 800dd6e:	78fb      	ldrb	r3, [r7, #3]
 800dd70:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800dd74:	6879      	ldr	r1, [r7, #4]
 800dd76:	33e0      	adds	r3, #224	@ 0xe0
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	440b      	add	r3, r1
 800dd7c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800dd7e:	2300      	movs	r3, #0
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	370c      	adds	r7, #12
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr

0800dd8c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b085      	sub	sp, #20
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dd94:	2300      	movs	r3, #0
 800dd96:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800dd98:	2300      	movs	r3, #0
 800dd9a:	73fb      	strb	r3, [r7, #15]
 800dd9c:	e00f      	b.n	800ddbe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dd9e:	7bfb      	ldrb	r3, [r7, #15]
 800dda0:	687a      	ldr	r2, [r7, #4]
 800dda2:	33e0      	adds	r3, #224	@ 0xe0
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	685b      	ldr	r3, [r3, #4]
 800ddaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d102      	bne.n	800ddb8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ddb2:	7bfb      	ldrb	r3, [r7, #15]
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	e007      	b.n	800ddc8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ddb8:	7bfb      	ldrb	r3, [r7, #15]
 800ddba:	3301      	adds	r3, #1
 800ddbc:	73fb      	strb	r3, [r7, #15]
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
 800ddc0:	2b0f      	cmp	r3, #15
 800ddc2:	d9ec      	bls.n	800dd9e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ddc4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3714      	adds	r7, #20
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ddd8:	2201      	movs	r2, #1
 800ddda:	490e      	ldr	r1, [pc, #56]	@ (800de14 <MX_USB_HOST_Init+0x40>)
 800dddc:	480e      	ldr	r0, [pc, #56]	@ (800de18 <MX_USB_HOST_Init+0x44>)
 800ddde:	f7fe fb15 	bl	800c40c <USBH_Init>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800dde8:	f7f6 fb8e 	bl	8004508 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ddec:	490b      	ldr	r1, [pc, #44]	@ (800de1c <MX_USB_HOST_Init+0x48>)
 800ddee:	480a      	ldr	r0, [pc, #40]	@ (800de18 <MX_USB_HOST_Init+0x44>)
 800ddf0:	f7fe fbb9 	bl	800c566 <USBH_RegisterClass>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ddfa:	f7f6 fb85 	bl	8004508 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ddfe:	4806      	ldr	r0, [pc, #24]	@ (800de18 <MX_USB_HOST_Init+0x44>)
 800de00:	f7fe fc3d 	bl	800c67e <USBH_Start>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	d001      	beq.n	800de0e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800de0a:	f7f6 fb7d 	bl	8004508 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800de0e:	bf00      	nop
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	0800de35 	.word	0x0800de35
 800de18:	200001f8 	.word	0x200001f8
 800de1c:	2000000c 	.word	0x2000000c

0800de20 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800de24:	4802      	ldr	r0, [pc, #8]	@ (800de30 <MX_USB_HOST_Process+0x10>)
 800de26:	f7fe fc3b 	bl	800c6a0 <USBH_Process>
}
 800de2a:	bf00      	nop
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	200001f8 	.word	0x200001f8

0800de34 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	460b      	mov	r3, r1
 800de3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800de40:	78fb      	ldrb	r3, [r7, #3]
 800de42:	3b01      	subs	r3, #1
 800de44:	2b04      	cmp	r3, #4
 800de46:	d819      	bhi.n	800de7c <USBH_UserProcess+0x48>
 800de48:	a201      	add	r2, pc, #4	@ (adr r2, 800de50 <USBH_UserProcess+0x1c>)
 800de4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4e:	bf00      	nop
 800de50:	0800de7d 	.word	0x0800de7d
 800de54:	0800de6d 	.word	0x0800de6d
 800de58:	0800de7d 	.word	0x0800de7d
 800de5c:	0800de75 	.word	0x0800de75
 800de60:	0800de65 	.word	0x0800de65
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800de64:	4b09      	ldr	r3, [pc, #36]	@ (800de8c <USBH_UserProcess+0x58>)
 800de66:	2203      	movs	r2, #3
 800de68:	701a      	strb	r2, [r3, #0]
  break;
 800de6a:	e008      	b.n	800de7e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800de6c:	4b07      	ldr	r3, [pc, #28]	@ (800de8c <USBH_UserProcess+0x58>)
 800de6e:	2202      	movs	r2, #2
 800de70:	701a      	strb	r2, [r3, #0]
  break;
 800de72:	e004      	b.n	800de7e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800de74:	4b05      	ldr	r3, [pc, #20]	@ (800de8c <USBH_UserProcess+0x58>)
 800de76:	2201      	movs	r2, #1
 800de78:	701a      	strb	r2, [r3, #0]
  break;
 800de7a:	e000      	b.n	800de7e <USBH_UserProcess+0x4a>

  default:
  break;
 800de7c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800de7e:	bf00      	nop
 800de80:	370c      	adds	r7, #12
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr
 800de8a:	bf00      	nop
 800de8c:	200005d0 	.word	0x200005d0

0800de90 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b08a      	sub	sp, #40	@ 0x28
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de98:	f107 0314 	add.w	r3, r7, #20
 800de9c:	2200      	movs	r2, #0
 800de9e:	601a      	str	r2, [r3, #0]
 800dea0:	605a      	str	r2, [r3, #4]
 800dea2:	609a      	str	r2, [r3, #8]
 800dea4:	60da      	str	r2, [r3, #12]
 800dea6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800deb0:	d147      	bne.n	800df42 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800deb2:	2300      	movs	r3, #0
 800deb4:	613b      	str	r3, [r7, #16]
 800deb6:	4b25      	ldr	r3, [pc, #148]	@ (800df4c <HAL_HCD_MspInit+0xbc>)
 800deb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deba:	4a24      	ldr	r2, [pc, #144]	@ (800df4c <HAL_HCD_MspInit+0xbc>)
 800debc:	f043 0301 	orr.w	r3, r3, #1
 800dec0:	6313      	str	r3, [r2, #48]	@ 0x30
 800dec2:	4b22      	ldr	r3, [pc, #136]	@ (800df4c <HAL_HCD_MspInit+0xbc>)
 800dec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dec6:	f003 0301 	and.w	r3, r3, #1
 800deca:	613b      	str	r3, [r7, #16]
 800decc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800dece:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ded2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ded4:	2300      	movs	r3, #0
 800ded6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ded8:	2300      	movs	r3, #0
 800deda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800dedc:	f107 0314 	add.w	r3, r7, #20
 800dee0:	4619      	mov	r1, r3
 800dee2:	481b      	ldr	r0, [pc, #108]	@ (800df50 <HAL_HCD_MspInit+0xc0>)
 800dee4:	f7f8 f9cc 	bl	8006280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800dee8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800deec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deee:	2302      	movs	r3, #2
 800def0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800def2:	2300      	movs	r3, #0
 800def4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800def6:	2300      	movs	r3, #0
 800def8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800defa:	230a      	movs	r3, #10
 800defc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800defe:	f107 0314 	add.w	r3, r7, #20
 800df02:	4619      	mov	r1, r3
 800df04:	4812      	ldr	r0, [pc, #72]	@ (800df50 <HAL_HCD_MspInit+0xc0>)
 800df06:	f7f8 f9bb 	bl	8006280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800df0a:	4b10      	ldr	r3, [pc, #64]	@ (800df4c <HAL_HCD_MspInit+0xbc>)
 800df0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df0e:	4a0f      	ldr	r2, [pc, #60]	@ (800df4c <HAL_HCD_MspInit+0xbc>)
 800df10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df14:	6353      	str	r3, [r2, #52]	@ 0x34
 800df16:	2300      	movs	r3, #0
 800df18:	60fb      	str	r3, [r7, #12]
 800df1a:	4b0c      	ldr	r3, [pc, #48]	@ (800df4c <HAL_HCD_MspInit+0xbc>)
 800df1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df1e:	4a0b      	ldr	r2, [pc, #44]	@ (800df4c <HAL_HCD_MspInit+0xbc>)
 800df20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800df24:	6453      	str	r3, [r2, #68]	@ 0x44
 800df26:	4b09      	ldr	r3, [pc, #36]	@ (800df4c <HAL_HCD_MspInit+0xbc>)
 800df28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800df2e:	60fb      	str	r3, [r7, #12]
 800df30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800df32:	2200      	movs	r2, #0
 800df34:	2100      	movs	r1, #0
 800df36:	2043      	movs	r0, #67	@ 0x43
 800df38:	f7f8 f96b 	bl	8006212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800df3c:	2043      	movs	r0, #67	@ 0x43
 800df3e:	f7f8 f984 	bl	800624a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800df42:	bf00      	nop
 800df44:	3728      	adds	r7, #40	@ 0x28
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	40023800 	.word	0x40023800
 800df50:	40020000 	.word	0x40020000

0800df54 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800df62:	4618      	mov	r0, r3
 800df64:	f7fe ff73 	bl	800ce4e <USBH_LL_IncTimer>
}
 800df68:	bf00      	nop
 800df6a:	3708      	adds	r7, #8
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b082      	sub	sp, #8
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fe ffab 	bl	800ceda <USBH_LL_Connect>
}
 800df84:	bf00      	nop
 800df86:	3708      	adds	r7, #8
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}

0800df8c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7fe ffb4 	bl	800cf08 <USBH_LL_Disconnect>
}
 800dfa0:	bf00      	nop
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	460b      	mov	r3, r1
 800dfb2:	70fb      	strb	r3, [r7, #3]
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fe ff65 	bl	800cea2 <USBH_LL_PortEnabled>
}
 800dfd8:	bf00      	nop
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fe ff65 	bl	800cebe <USBH_LL_PortDisabled>
}
 800dff4:	bf00      	nop
 800dff6:	3708      	adds	r7, #8
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d12a      	bne.n	800e064 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e00e:	4a18      	ldr	r2, [pc, #96]	@ (800e070 <USBH_LL_Init+0x74>)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a15      	ldr	r2, [pc, #84]	@ (800e070 <USBH_LL_Init+0x74>)
 800e01a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e01e:	4b14      	ldr	r3, [pc, #80]	@ (800e070 <USBH_LL_Init+0x74>)
 800e020:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e024:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e026:	4b12      	ldr	r3, [pc, #72]	@ (800e070 <USBH_LL_Init+0x74>)
 800e028:	2208      	movs	r2, #8
 800e02a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e02c:	4b10      	ldr	r3, [pc, #64]	@ (800e070 <USBH_LL_Init+0x74>)
 800e02e:	2201      	movs	r2, #1
 800e030:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e032:	4b0f      	ldr	r3, [pc, #60]	@ (800e070 <USBH_LL_Init+0x74>)
 800e034:	2200      	movs	r2, #0
 800e036:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e038:	4b0d      	ldr	r3, [pc, #52]	@ (800e070 <USBH_LL_Init+0x74>)
 800e03a:	2202      	movs	r2, #2
 800e03c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e03e:	4b0c      	ldr	r3, [pc, #48]	@ (800e070 <USBH_LL_Init+0x74>)
 800e040:	2200      	movs	r2, #0
 800e042:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e044:	480a      	ldr	r0, [pc, #40]	@ (800e070 <USBH_LL_Init+0x74>)
 800e046:	f7f8 fad0 	bl	80065ea <HAL_HCD_Init>
 800e04a:	4603      	mov	r3, r0
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d001      	beq.n	800e054 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e050:	f7f6 fa5a 	bl	8004508 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e054:	4806      	ldr	r0, [pc, #24]	@ (800e070 <USBH_LL_Init+0x74>)
 800e056:	f7f8 ff31 	bl	8006ebc <HAL_HCD_GetCurrentFrame>
 800e05a:	4603      	mov	r3, r0
 800e05c:	4619      	mov	r1, r3
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f7fe fee6 	bl	800ce30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	200005d4 	.word	0x200005d4

0800e074 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b084      	sub	sp, #16
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e080:	2300      	movs	r3, #0
 800e082:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7f8 fe9e 	bl	8006dcc <HAL_HCD_Start>
 800e090:	4603      	mov	r3, r0
 800e092:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e094:	7bfb      	ldrb	r3, [r7, #15]
 800e096:	4618      	mov	r0, r3
 800e098:	f000 f95e 	bl	800e358 <USBH_Get_USB_Status>
 800e09c:	4603      	mov	r3, r0
 800e09e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b084      	sub	sp, #16
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7f8 fea6 	bl	8006e12 <HAL_HCD_Stop>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e0ca:	7bfb      	ldrb	r3, [r7, #15]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 f943 	bl	800e358 <USBH_Get_USB_Status>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7f8 fef0 	bl	8006ed8 <HAL_HCD_GetCurrentSpeed>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b02      	cmp	r3, #2
 800e0fc:	d00c      	beq.n	800e118 <USBH_LL_GetSpeed+0x38>
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	d80d      	bhi.n	800e11e <USBH_LL_GetSpeed+0x3e>
 800e102:	2b00      	cmp	r3, #0
 800e104:	d002      	beq.n	800e10c <USBH_LL_GetSpeed+0x2c>
 800e106:	2b01      	cmp	r3, #1
 800e108:	d003      	beq.n	800e112 <USBH_LL_GetSpeed+0x32>
 800e10a:	e008      	b.n	800e11e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e10c:	2300      	movs	r3, #0
 800e10e:	73fb      	strb	r3, [r7, #15]
    break;
 800e110:	e008      	b.n	800e124 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e112:	2301      	movs	r3, #1
 800e114:	73fb      	strb	r3, [r7, #15]
    break;
 800e116:	e005      	b.n	800e124 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e118:	2302      	movs	r3, #2
 800e11a:	73fb      	strb	r3, [r7, #15]
    break;
 800e11c:	e002      	b.n	800e124 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e11e:	2301      	movs	r3, #1
 800e120:	73fb      	strb	r3, [r7, #15]
    break;
 800e122:	bf00      	nop
  }
  return  speed;
 800e124:	7bfb      	ldrb	r3, [r7, #15]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e136:	2300      	movs	r3, #0
 800e138:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e144:	4618      	mov	r0, r3
 800e146:	f7f8 fe81 	bl	8006e4c <HAL_HCD_ResetPort>
 800e14a:	4603      	mov	r3, r0
 800e14c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e14e:	7bfb      	ldrb	r3, [r7, #15]
 800e150:	4618      	mov	r0, r3
 800e152:	f000 f901 	bl	800e358 <USBH_Get_USB_Status>
 800e156:	4603      	mov	r3, r0
 800e158:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e15a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	460b      	mov	r3, r1
 800e16e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e176:	78fa      	ldrb	r2, [r7, #3]
 800e178:	4611      	mov	r1, r2
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7f8 fe89 	bl	8006e92 <HAL_HCD_HC_GetXferCount>
 800e180:	4603      	mov	r3, r0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3708      	adds	r7, #8
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e18a:	b590      	push	{r4, r7, lr}
 800e18c:	b089      	sub	sp, #36	@ 0x24
 800e18e:	af04      	add	r7, sp, #16
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	4608      	mov	r0, r1
 800e194:	4611      	mov	r1, r2
 800e196:	461a      	mov	r2, r3
 800e198:	4603      	mov	r3, r0
 800e19a:	70fb      	strb	r3, [r7, #3]
 800e19c:	460b      	mov	r3, r1
 800e19e:	70bb      	strb	r3, [r7, #2]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1a8:	2300      	movs	r3, #0
 800e1aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800e1b2:	787c      	ldrb	r4, [r7, #1]
 800e1b4:	78ba      	ldrb	r2, [r7, #2]
 800e1b6:	78f9      	ldrb	r1, [r7, #3]
 800e1b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e1ba:	9302      	str	r3, [sp, #8]
 800e1bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e1c0:	9301      	str	r3, [sp, #4]
 800e1c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e1c6:	9300      	str	r3, [sp, #0]
 800e1c8:	4623      	mov	r3, r4
 800e1ca:	f7f8 fa75 	bl	80066b8 <HAL_HCD_HC_Init>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e1d2:	7bfb      	ldrb	r3, [r7, #15]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f000 f8bf 	bl	800e358 <USBH_Get_USB_Status>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3714      	adds	r7, #20
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd90      	pop	{r4, r7, pc}

0800e1e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e202:	78fa      	ldrb	r2, [r7, #3]
 800e204:	4611      	mov	r1, r2
 800e206:	4618      	mov	r0, r3
 800e208:	f7f8 fb0e 	bl	8006828 <HAL_HCD_HC_Halt>
 800e20c:	4603      	mov	r3, r0
 800e20e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e210:	7bfb      	ldrb	r3, [r7, #15]
 800e212:	4618      	mov	r0, r3
 800e214:	f000 f8a0 	bl	800e358 <USBH_Get_USB_Status>
 800e218:	4603      	mov	r3, r0
 800e21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e21e:	4618      	mov	r0, r3
 800e220:	3710      	adds	r7, #16
 800e222:	46bd      	mov	sp, r7
 800e224:	bd80      	pop	{r7, pc}

0800e226 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e226:	b590      	push	{r4, r7, lr}
 800e228:	b089      	sub	sp, #36	@ 0x24
 800e22a:	af04      	add	r7, sp, #16
 800e22c:	6078      	str	r0, [r7, #4]
 800e22e:	4608      	mov	r0, r1
 800e230:	4611      	mov	r1, r2
 800e232:	461a      	mov	r2, r3
 800e234:	4603      	mov	r3, r0
 800e236:	70fb      	strb	r3, [r7, #3]
 800e238:	460b      	mov	r3, r1
 800e23a:	70bb      	strb	r3, [r7, #2]
 800e23c:	4613      	mov	r3, r2
 800e23e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e244:	2300      	movs	r3, #0
 800e246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800e24e:	787c      	ldrb	r4, [r7, #1]
 800e250:	78ba      	ldrb	r2, [r7, #2]
 800e252:	78f9      	ldrb	r1, [r7, #3]
 800e254:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800e258:	9303      	str	r3, [sp, #12]
 800e25a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e25c:	9302      	str	r3, [sp, #8]
 800e25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	4623      	mov	r3, r4
 800e26a:	f7f8 fb01 	bl	8006870 <HAL_HCD_HC_SubmitRequest>
 800e26e:	4603      	mov	r3, r0
 800e270:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e272:	7bfb      	ldrb	r3, [r7, #15]
 800e274:	4618      	mov	r0, r3
 800e276:	f000 f86f 	bl	800e358 <USBH_Get_USB_Status>
 800e27a:	4603      	mov	r3, r0
 800e27c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e27e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e280:	4618      	mov	r0, r3
 800e282:	3714      	adds	r7, #20
 800e284:	46bd      	mov	sp, r7
 800e286:	bd90      	pop	{r4, r7, pc}

0800e288 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	460b      	mov	r3, r1
 800e292:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e29a:	78fa      	ldrb	r2, [r7, #3]
 800e29c:	4611      	mov	r1, r2
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7f8 fde2 	bl	8006e68 <HAL_HCD_HC_GetURBState>
 800e2a4:	4603      	mov	r3, r0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b082      	sub	sp, #8
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d103      	bne.n	800e2cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e2c4:	78fb      	ldrb	r3, [r7, #3]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f000 f872 	bl	800e3b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e2cc:	20c8      	movs	r0, #200	@ 0xc8
 800e2ce:	f7f7 fea1 	bl	8006014 <HAL_Delay>
  return USBH_OK;
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}

0800e2dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	460b      	mov	r3, r1
 800e2e6:	70fb      	strb	r3, [r7, #3]
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800e2f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e2f4:	78fa      	ldrb	r2, [r7, #3]
 800e2f6:	68f9      	ldr	r1, [r7, #12]
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	011b      	lsls	r3, r3, #4
 800e2fc:	1a9b      	subs	r3, r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	440b      	add	r3, r1
 800e302:	3317      	adds	r3, #23
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00a      	beq.n	800e320 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e30a:	78fa      	ldrb	r2, [r7, #3]
 800e30c:	68f9      	ldr	r1, [r7, #12]
 800e30e:	4613      	mov	r3, r2
 800e310:	011b      	lsls	r3, r3, #4
 800e312:	1a9b      	subs	r3, r3, r2
 800e314:	009b      	lsls	r3, r3, #2
 800e316:	440b      	add	r3, r1
 800e318:	333c      	adds	r3, #60	@ 0x3c
 800e31a:	78ba      	ldrb	r2, [r7, #2]
 800e31c:	701a      	strb	r2, [r3, #0]
 800e31e:	e009      	b.n	800e334 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e320:	78fa      	ldrb	r2, [r7, #3]
 800e322:	68f9      	ldr	r1, [r7, #12]
 800e324:	4613      	mov	r3, r2
 800e326:	011b      	lsls	r3, r3, #4
 800e328:	1a9b      	subs	r3, r3, r2
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	440b      	add	r3, r1
 800e32e:	333d      	adds	r3, #61	@ 0x3d
 800e330:	78ba      	ldrb	r2, [r7, #2]
 800e332:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e334:	2300      	movs	r3, #0
}
 800e336:	4618      	mov	r0, r3
 800e338:	3714      	adds	r7, #20
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr

0800e342 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b082      	sub	sp, #8
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f7f7 fe62 	bl	8006014 <HAL_Delay>
}
 800e350:	bf00      	nop
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	4603      	mov	r3, r0
 800e360:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e362:	2300      	movs	r3, #0
 800e364:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e366:	79fb      	ldrb	r3, [r7, #7]
 800e368:	2b03      	cmp	r3, #3
 800e36a:	d817      	bhi.n	800e39c <USBH_Get_USB_Status+0x44>
 800e36c:	a201      	add	r2, pc, #4	@ (adr r2, 800e374 <USBH_Get_USB_Status+0x1c>)
 800e36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e372:	bf00      	nop
 800e374:	0800e385 	.word	0x0800e385
 800e378:	0800e38b 	.word	0x0800e38b
 800e37c:	0800e391 	.word	0x0800e391
 800e380:	0800e397 	.word	0x0800e397
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	73fb      	strb	r3, [r7, #15]
    break;
 800e388:	e00b      	b.n	800e3a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e38a:	2302      	movs	r3, #2
 800e38c:	73fb      	strb	r3, [r7, #15]
    break;
 800e38e:	e008      	b.n	800e3a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e390:	2301      	movs	r3, #1
 800e392:	73fb      	strb	r3, [r7, #15]
    break;
 800e394:	e005      	b.n	800e3a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e396:	2302      	movs	r3, #2
 800e398:	73fb      	strb	r3, [r7, #15]
    break;
 800e39a:	e002      	b.n	800e3a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e39c:	2302      	movs	r3, #2
 800e39e:	73fb      	strb	r3, [r7, #15]
    break;
 800e3a0:	bf00      	nop
  }
  return usb_status;
 800e3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3714      	adds	r7, #20
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800e3ba:	79fb      	ldrb	r3, [r7, #7]
 800e3bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e3be:	79fb      	ldrb	r3, [r7, #7]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d102      	bne.n	800e3ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	73fb      	strb	r3, [r7, #15]
 800e3c8:	e001      	b.n	800e3ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e3ce:	7bfb      	ldrb	r3, [r7, #15]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	2101      	movs	r1, #1
 800e3d4:	4803      	ldr	r0, [pc, #12]	@ (800e3e4 <MX_DriverVbusFS+0x34>)
 800e3d6:	f7f8 f8ef 	bl	80065b8 <HAL_GPIO_WritePin>
}
 800e3da:	bf00      	nop
 800e3dc:	3710      	adds	r7, #16
 800e3de:	46bd      	mov	sp, r7
 800e3e0:	bd80      	pop	{r7, pc}
 800e3e2:	bf00      	nop
 800e3e4:	40020800 	.word	0x40020800

0800e3e8 <malloc>:
 800e3e8:	4b02      	ldr	r3, [pc, #8]	@ (800e3f4 <malloc+0xc>)
 800e3ea:	4601      	mov	r1, r0
 800e3ec:	6818      	ldr	r0, [r3, #0]
 800e3ee:	f000 b82d 	b.w	800e44c <_malloc_r>
 800e3f2:	bf00      	nop
 800e3f4:	20000038 	.word	0x20000038

0800e3f8 <free>:
 800e3f8:	4b02      	ldr	r3, [pc, #8]	@ (800e404 <free+0xc>)
 800e3fa:	4601      	mov	r1, r0
 800e3fc:	6818      	ldr	r0, [r3, #0]
 800e3fe:	f000 bc21 	b.w	800ec44 <_free_r>
 800e402:	bf00      	nop
 800e404:	20000038 	.word	0x20000038

0800e408 <sbrk_aligned>:
 800e408:	b570      	push	{r4, r5, r6, lr}
 800e40a:	4e0f      	ldr	r6, [pc, #60]	@ (800e448 <sbrk_aligned+0x40>)
 800e40c:	460c      	mov	r4, r1
 800e40e:	6831      	ldr	r1, [r6, #0]
 800e410:	4605      	mov	r5, r0
 800e412:	b911      	cbnz	r1, 800e41a <sbrk_aligned+0x12>
 800e414:	f000 fbb8 	bl	800eb88 <_sbrk_r>
 800e418:	6030      	str	r0, [r6, #0]
 800e41a:	4621      	mov	r1, r4
 800e41c:	4628      	mov	r0, r5
 800e41e:	f000 fbb3 	bl	800eb88 <_sbrk_r>
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	d103      	bne.n	800e42e <sbrk_aligned+0x26>
 800e426:	f04f 34ff 	mov.w	r4, #4294967295
 800e42a:	4620      	mov	r0, r4
 800e42c:	bd70      	pop	{r4, r5, r6, pc}
 800e42e:	1cc4      	adds	r4, r0, #3
 800e430:	f024 0403 	bic.w	r4, r4, #3
 800e434:	42a0      	cmp	r0, r4
 800e436:	d0f8      	beq.n	800e42a <sbrk_aligned+0x22>
 800e438:	1a21      	subs	r1, r4, r0
 800e43a:	4628      	mov	r0, r5
 800e43c:	f000 fba4 	bl	800eb88 <_sbrk_r>
 800e440:	3001      	adds	r0, #1
 800e442:	d1f2      	bne.n	800e42a <sbrk_aligned+0x22>
 800e444:	e7ef      	b.n	800e426 <sbrk_aligned+0x1e>
 800e446:	bf00      	nop
 800e448:	200009b4 	.word	0x200009b4

0800e44c <_malloc_r>:
 800e44c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e450:	1ccd      	adds	r5, r1, #3
 800e452:	f025 0503 	bic.w	r5, r5, #3
 800e456:	3508      	adds	r5, #8
 800e458:	2d0c      	cmp	r5, #12
 800e45a:	bf38      	it	cc
 800e45c:	250c      	movcc	r5, #12
 800e45e:	2d00      	cmp	r5, #0
 800e460:	4606      	mov	r6, r0
 800e462:	db01      	blt.n	800e468 <_malloc_r+0x1c>
 800e464:	42a9      	cmp	r1, r5
 800e466:	d904      	bls.n	800e472 <_malloc_r+0x26>
 800e468:	230c      	movs	r3, #12
 800e46a:	6033      	str	r3, [r6, #0]
 800e46c:	2000      	movs	r0, #0
 800e46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e548 <_malloc_r+0xfc>
 800e476:	f000 f869 	bl	800e54c <__malloc_lock>
 800e47a:	f8d8 3000 	ldr.w	r3, [r8]
 800e47e:	461c      	mov	r4, r3
 800e480:	bb44      	cbnz	r4, 800e4d4 <_malloc_r+0x88>
 800e482:	4629      	mov	r1, r5
 800e484:	4630      	mov	r0, r6
 800e486:	f7ff ffbf 	bl	800e408 <sbrk_aligned>
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	4604      	mov	r4, r0
 800e48e:	d158      	bne.n	800e542 <_malloc_r+0xf6>
 800e490:	f8d8 4000 	ldr.w	r4, [r8]
 800e494:	4627      	mov	r7, r4
 800e496:	2f00      	cmp	r7, #0
 800e498:	d143      	bne.n	800e522 <_malloc_r+0xd6>
 800e49a:	2c00      	cmp	r4, #0
 800e49c:	d04b      	beq.n	800e536 <_malloc_r+0xea>
 800e49e:	6823      	ldr	r3, [r4, #0]
 800e4a0:	4639      	mov	r1, r7
 800e4a2:	4630      	mov	r0, r6
 800e4a4:	eb04 0903 	add.w	r9, r4, r3
 800e4a8:	f000 fb6e 	bl	800eb88 <_sbrk_r>
 800e4ac:	4581      	cmp	r9, r0
 800e4ae:	d142      	bne.n	800e536 <_malloc_r+0xea>
 800e4b0:	6821      	ldr	r1, [r4, #0]
 800e4b2:	1a6d      	subs	r5, r5, r1
 800e4b4:	4629      	mov	r1, r5
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	f7ff ffa6 	bl	800e408 <sbrk_aligned>
 800e4bc:	3001      	adds	r0, #1
 800e4be:	d03a      	beq.n	800e536 <_malloc_r+0xea>
 800e4c0:	6823      	ldr	r3, [r4, #0]
 800e4c2:	442b      	add	r3, r5
 800e4c4:	6023      	str	r3, [r4, #0]
 800e4c6:	f8d8 3000 	ldr.w	r3, [r8]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	bb62      	cbnz	r2, 800e528 <_malloc_r+0xdc>
 800e4ce:	f8c8 7000 	str.w	r7, [r8]
 800e4d2:	e00f      	b.n	800e4f4 <_malloc_r+0xa8>
 800e4d4:	6822      	ldr	r2, [r4, #0]
 800e4d6:	1b52      	subs	r2, r2, r5
 800e4d8:	d420      	bmi.n	800e51c <_malloc_r+0xd0>
 800e4da:	2a0b      	cmp	r2, #11
 800e4dc:	d917      	bls.n	800e50e <_malloc_r+0xc2>
 800e4de:	1961      	adds	r1, r4, r5
 800e4e0:	42a3      	cmp	r3, r4
 800e4e2:	6025      	str	r5, [r4, #0]
 800e4e4:	bf18      	it	ne
 800e4e6:	6059      	strne	r1, [r3, #4]
 800e4e8:	6863      	ldr	r3, [r4, #4]
 800e4ea:	bf08      	it	eq
 800e4ec:	f8c8 1000 	streq.w	r1, [r8]
 800e4f0:	5162      	str	r2, [r4, r5]
 800e4f2:	604b      	str	r3, [r1, #4]
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f000 f82f 	bl	800e558 <__malloc_unlock>
 800e4fa:	f104 000b 	add.w	r0, r4, #11
 800e4fe:	1d23      	adds	r3, r4, #4
 800e500:	f020 0007 	bic.w	r0, r0, #7
 800e504:	1ac2      	subs	r2, r0, r3
 800e506:	bf1c      	itt	ne
 800e508:	1a1b      	subne	r3, r3, r0
 800e50a:	50a3      	strne	r3, [r4, r2]
 800e50c:	e7af      	b.n	800e46e <_malloc_r+0x22>
 800e50e:	6862      	ldr	r2, [r4, #4]
 800e510:	42a3      	cmp	r3, r4
 800e512:	bf0c      	ite	eq
 800e514:	f8c8 2000 	streq.w	r2, [r8]
 800e518:	605a      	strne	r2, [r3, #4]
 800e51a:	e7eb      	b.n	800e4f4 <_malloc_r+0xa8>
 800e51c:	4623      	mov	r3, r4
 800e51e:	6864      	ldr	r4, [r4, #4]
 800e520:	e7ae      	b.n	800e480 <_malloc_r+0x34>
 800e522:	463c      	mov	r4, r7
 800e524:	687f      	ldr	r7, [r7, #4]
 800e526:	e7b6      	b.n	800e496 <_malloc_r+0x4a>
 800e528:	461a      	mov	r2, r3
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	42a3      	cmp	r3, r4
 800e52e:	d1fb      	bne.n	800e528 <_malloc_r+0xdc>
 800e530:	2300      	movs	r3, #0
 800e532:	6053      	str	r3, [r2, #4]
 800e534:	e7de      	b.n	800e4f4 <_malloc_r+0xa8>
 800e536:	230c      	movs	r3, #12
 800e538:	6033      	str	r3, [r6, #0]
 800e53a:	4630      	mov	r0, r6
 800e53c:	f000 f80c 	bl	800e558 <__malloc_unlock>
 800e540:	e794      	b.n	800e46c <_malloc_r+0x20>
 800e542:	6005      	str	r5, [r0, #0]
 800e544:	e7d6      	b.n	800e4f4 <_malloc_r+0xa8>
 800e546:	bf00      	nop
 800e548:	200009b8 	.word	0x200009b8

0800e54c <__malloc_lock>:
 800e54c:	4801      	ldr	r0, [pc, #4]	@ (800e554 <__malloc_lock+0x8>)
 800e54e:	f000 bb68 	b.w	800ec22 <__retarget_lock_acquire_recursive>
 800e552:	bf00      	nop
 800e554:	20000afc 	.word	0x20000afc

0800e558 <__malloc_unlock>:
 800e558:	4801      	ldr	r0, [pc, #4]	@ (800e560 <__malloc_unlock+0x8>)
 800e55a:	f000 bb63 	b.w	800ec24 <__retarget_lock_release_recursive>
 800e55e:	bf00      	nop
 800e560:	20000afc 	.word	0x20000afc

0800e564 <std>:
 800e564:	2300      	movs	r3, #0
 800e566:	b510      	push	{r4, lr}
 800e568:	4604      	mov	r4, r0
 800e56a:	e9c0 3300 	strd	r3, r3, [r0]
 800e56e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e572:	6083      	str	r3, [r0, #8]
 800e574:	8181      	strh	r1, [r0, #12]
 800e576:	6643      	str	r3, [r0, #100]	@ 0x64
 800e578:	81c2      	strh	r2, [r0, #14]
 800e57a:	6183      	str	r3, [r0, #24]
 800e57c:	4619      	mov	r1, r3
 800e57e:	2208      	movs	r2, #8
 800e580:	305c      	adds	r0, #92	@ 0x5c
 800e582:	f000 fac5 	bl	800eb10 <memset>
 800e586:	4b0d      	ldr	r3, [pc, #52]	@ (800e5bc <std+0x58>)
 800e588:	6263      	str	r3, [r4, #36]	@ 0x24
 800e58a:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c0 <std+0x5c>)
 800e58c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e58e:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c4 <std+0x60>)
 800e590:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e592:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c8 <std+0x64>)
 800e594:	6323      	str	r3, [r4, #48]	@ 0x30
 800e596:	4b0d      	ldr	r3, [pc, #52]	@ (800e5cc <std+0x68>)
 800e598:	6224      	str	r4, [r4, #32]
 800e59a:	429c      	cmp	r4, r3
 800e59c:	d006      	beq.n	800e5ac <std+0x48>
 800e59e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e5a2:	4294      	cmp	r4, r2
 800e5a4:	d002      	beq.n	800e5ac <std+0x48>
 800e5a6:	33d0      	adds	r3, #208	@ 0xd0
 800e5a8:	429c      	cmp	r4, r3
 800e5aa:	d105      	bne.n	800e5b8 <std+0x54>
 800e5ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5b4:	f000 bb34 	b.w	800ec20 <__retarget_lock_init_recursive>
 800e5b8:	bd10      	pop	{r4, pc}
 800e5ba:	bf00      	nop
 800e5bc:	0800e941 	.word	0x0800e941
 800e5c0:	0800e963 	.word	0x0800e963
 800e5c4:	0800e99b 	.word	0x0800e99b
 800e5c8:	0800e9bf 	.word	0x0800e9bf
 800e5cc:	200009bc 	.word	0x200009bc

0800e5d0 <stdio_exit_handler>:
 800e5d0:	4a02      	ldr	r2, [pc, #8]	@ (800e5dc <stdio_exit_handler+0xc>)
 800e5d2:	4903      	ldr	r1, [pc, #12]	@ (800e5e0 <stdio_exit_handler+0x10>)
 800e5d4:	4803      	ldr	r0, [pc, #12]	@ (800e5e4 <stdio_exit_handler+0x14>)
 800e5d6:	f000 b869 	b.w	800e6ac <_fwalk_sglue>
 800e5da:	bf00      	nop
 800e5dc:	2000002c 	.word	0x2000002c
 800e5e0:	0800f37d 	.word	0x0800f37d
 800e5e4:	2000003c 	.word	0x2000003c

0800e5e8 <cleanup_stdio>:
 800e5e8:	6841      	ldr	r1, [r0, #4]
 800e5ea:	4b0c      	ldr	r3, [pc, #48]	@ (800e61c <cleanup_stdio+0x34>)
 800e5ec:	4299      	cmp	r1, r3
 800e5ee:	b510      	push	{r4, lr}
 800e5f0:	4604      	mov	r4, r0
 800e5f2:	d001      	beq.n	800e5f8 <cleanup_stdio+0x10>
 800e5f4:	f000 fec2 	bl	800f37c <_fflush_r>
 800e5f8:	68a1      	ldr	r1, [r4, #8]
 800e5fa:	4b09      	ldr	r3, [pc, #36]	@ (800e620 <cleanup_stdio+0x38>)
 800e5fc:	4299      	cmp	r1, r3
 800e5fe:	d002      	beq.n	800e606 <cleanup_stdio+0x1e>
 800e600:	4620      	mov	r0, r4
 800e602:	f000 febb 	bl	800f37c <_fflush_r>
 800e606:	68e1      	ldr	r1, [r4, #12]
 800e608:	4b06      	ldr	r3, [pc, #24]	@ (800e624 <cleanup_stdio+0x3c>)
 800e60a:	4299      	cmp	r1, r3
 800e60c:	d004      	beq.n	800e618 <cleanup_stdio+0x30>
 800e60e:	4620      	mov	r0, r4
 800e610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e614:	f000 beb2 	b.w	800f37c <_fflush_r>
 800e618:	bd10      	pop	{r4, pc}
 800e61a:	bf00      	nop
 800e61c:	200009bc 	.word	0x200009bc
 800e620:	20000a24 	.word	0x20000a24
 800e624:	20000a8c 	.word	0x20000a8c

0800e628 <global_stdio_init.part.0>:
 800e628:	b510      	push	{r4, lr}
 800e62a:	4b0b      	ldr	r3, [pc, #44]	@ (800e658 <global_stdio_init.part.0+0x30>)
 800e62c:	4c0b      	ldr	r4, [pc, #44]	@ (800e65c <global_stdio_init.part.0+0x34>)
 800e62e:	4a0c      	ldr	r2, [pc, #48]	@ (800e660 <global_stdio_init.part.0+0x38>)
 800e630:	601a      	str	r2, [r3, #0]
 800e632:	4620      	mov	r0, r4
 800e634:	2200      	movs	r2, #0
 800e636:	2104      	movs	r1, #4
 800e638:	f7ff ff94 	bl	800e564 <std>
 800e63c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e640:	2201      	movs	r2, #1
 800e642:	2109      	movs	r1, #9
 800e644:	f7ff ff8e 	bl	800e564 <std>
 800e648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e64c:	2202      	movs	r2, #2
 800e64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e652:	2112      	movs	r1, #18
 800e654:	f7ff bf86 	b.w	800e564 <std>
 800e658:	20000af4 	.word	0x20000af4
 800e65c:	200009bc 	.word	0x200009bc
 800e660:	0800e5d1 	.word	0x0800e5d1

0800e664 <__sfp_lock_acquire>:
 800e664:	4801      	ldr	r0, [pc, #4]	@ (800e66c <__sfp_lock_acquire+0x8>)
 800e666:	f000 badc 	b.w	800ec22 <__retarget_lock_acquire_recursive>
 800e66a:	bf00      	nop
 800e66c:	20000afd 	.word	0x20000afd

0800e670 <__sfp_lock_release>:
 800e670:	4801      	ldr	r0, [pc, #4]	@ (800e678 <__sfp_lock_release+0x8>)
 800e672:	f000 bad7 	b.w	800ec24 <__retarget_lock_release_recursive>
 800e676:	bf00      	nop
 800e678:	20000afd 	.word	0x20000afd

0800e67c <__sinit>:
 800e67c:	b510      	push	{r4, lr}
 800e67e:	4604      	mov	r4, r0
 800e680:	f7ff fff0 	bl	800e664 <__sfp_lock_acquire>
 800e684:	6a23      	ldr	r3, [r4, #32]
 800e686:	b11b      	cbz	r3, 800e690 <__sinit+0x14>
 800e688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e68c:	f7ff bff0 	b.w	800e670 <__sfp_lock_release>
 800e690:	4b04      	ldr	r3, [pc, #16]	@ (800e6a4 <__sinit+0x28>)
 800e692:	6223      	str	r3, [r4, #32]
 800e694:	4b04      	ldr	r3, [pc, #16]	@ (800e6a8 <__sinit+0x2c>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1f5      	bne.n	800e688 <__sinit+0xc>
 800e69c:	f7ff ffc4 	bl	800e628 <global_stdio_init.part.0>
 800e6a0:	e7f2      	b.n	800e688 <__sinit+0xc>
 800e6a2:	bf00      	nop
 800e6a4:	0800e5e9 	.word	0x0800e5e9
 800e6a8:	20000af4 	.word	0x20000af4

0800e6ac <_fwalk_sglue>:
 800e6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6b0:	4607      	mov	r7, r0
 800e6b2:	4688      	mov	r8, r1
 800e6b4:	4614      	mov	r4, r2
 800e6b6:	2600      	movs	r6, #0
 800e6b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6bc:	f1b9 0901 	subs.w	r9, r9, #1
 800e6c0:	d505      	bpl.n	800e6ce <_fwalk_sglue+0x22>
 800e6c2:	6824      	ldr	r4, [r4, #0]
 800e6c4:	2c00      	cmp	r4, #0
 800e6c6:	d1f7      	bne.n	800e6b8 <_fwalk_sglue+0xc>
 800e6c8:	4630      	mov	r0, r6
 800e6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ce:	89ab      	ldrh	r3, [r5, #12]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d907      	bls.n	800e6e4 <_fwalk_sglue+0x38>
 800e6d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	d003      	beq.n	800e6e4 <_fwalk_sglue+0x38>
 800e6dc:	4629      	mov	r1, r5
 800e6de:	4638      	mov	r0, r7
 800e6e0:	47c0      	blx	r8
 800e6e2:	4306      	orrs	r6, r0
 800e6e4:	3568      	adds	r5, #104	@ 0x68
 800e6e6:	e7e9      	b.n	800e6bc <_fwalk_sglue+0x10>

0800e6e8 <iprintf>:
 800e6e8:	b40f      	push	{r0, r1, r2, r3}
 800e6ea:	b507      	push	{r0, r1, r2, lr}
 800e6ec:	4906      	ldr	r1, [pc, #24]	@ (800e708 <iprintf+0x20>)
 800e6ee:	ab04      	add	r3, sp, #16
 800e6f0:	6808      	ldr	r0, [r1, #0]
 800e6f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6f6:	6881      	ldr	r1, [r0, #8]
 800e6f8:	9301      	str	r3, [sp, #4]
 800e6fa:	f000 fb17 	bl	800ed2c <_vfiprintf_r>
 800e6fe:	b003      	add	sp, #12
 800e700:	f85d eb04 	ldr.w	lr, [sp], #4
 800e704:	b004      	add	sp, #16
 800e706:	4770      	bx	lr
 800e708:	20000038 	.word	0x20000038

0800e70c <putchar>:
 800e70c:	4b02      	ldr	r3, [pc, #8]	@ (800e718 <putchar+0xc>)
 800e70e:	4601      	mov	r1, r0
 800e710:	6818      	ldr	r0, [r3, #0]
 800e712:	6882      	ldr	r2, [r0, #8]
 800e714:	f000 bebc 	b.w	800f490 <_putc_r>
 800e718:	20000038 	.word	0x20000038

0800e71c <_puts_r>:
 800e71c:	6a03      	ldr	r3, [r0, #32]
 800e71e:	b570      	push	{r4, r5, r6, lr}
 800e720:	6884      	ldr	r4, [r0, #8]
 800e722:	4605      	mov	r5, r0
 800e724:	460e      	mov	r6, r1
 800e726:	b90b      	cbnz	r3, 800e72c <_puts_r+0x10>
 800e728:	f7ff ffa8 	bl	800e67c <__sinit>
 800e72c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e72e:	07db      	lsls	r3, r3, #31
 800e730:	d405      	bmi.n	800e73e <_puts_r+0x22>
 800e732:	89a3      	ldrh	r3, [r4, #12]
 800e734:	0598      	lsls	r0, r3, #22
 800e736:	d402      	bmi.n	800e73e <_puts_r+0x22>
 800e738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e73a:	f000 fa72 	bl	800ec22 <__retarget_lock_acquire_recursive>
 800e73e:	89a3      	ldrh	r3, [r4, #12]
 800e740:	0719      	lsls	r1, r3, #28
 800e742:	d502      	bpl.n	800e74a <_puts_r+0x2e>
 800e744:	6923      	ldr	r3, [r4, #16]
 800e746:	2b00      	cmp	r3, #0
 800e748:	d135      	bne.n	800e7b6 <_puts_r+0x9a>
 800e74a:	4621      	mov	r1, r4
 800e74c:	4628      	mov	r0, r5
 800e74e:	f000 f979 	bl	800ea44 <__swsetup_r>
 800e752:	b380      	cbz	r0, 800e7b6 <_puts_r+0x9a>
 800e754:	f04f 35ff 	mov.w	r5, #4294967295
 800e758:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e75a:	07da      	lsls	r2, r3, #31
 800e75c:	d405      	bmi.n	800e76a <_puts_r+0x4e>
 800e75e:	89a3      	ldrh	r3, [r4, #12]
 800e760:	059b      	lsls	r3, r3, #22
 800e762:	d402      	bmi.n	800e76a <_puts_r+0x4e>
 800e764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e766:	f000 fa5d 	bl	800ec24 <__retarget_lock_release_recursive>
 800e76a:	4628      	mov	r0, r5
 800e76c:	bd70      	pop	{r4, r5, r6, pc}
 800e76e:	2b00      	cmp	r3, #0
 800e770:	da04      	bge.n	800e77c <_puts_r+0x60>
 800e772:	69a2      	ldr	r2, [r4, #24]
 800e774:	429a      	cmp	r2, r3
 800e776:	dc17      	bgt.n	800e7a8 <_puts_r+0x8c>
 800e778:	290a      	cmp	r1, #10
 800e77a:	d015      	beq.n	800e7a8 <_puts_r+0x8c>
 800e77c:	6823      	ldr	r3, [r4, #0]
 800e77e:	1c5a      	adds	r2, r3, #1
 800e780:	6022      	str	r2, [r4, #0]
 800e782:	7019      	strb	r1, [r3, #0]
 800e784:	68a3      	ldr	r3, [r4, #8]
 800e786:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e78a:	3b01      	subs	r3, #1
 800e78c:	60a3      	str	r3, [r4, #8]
 800e78e:	2900      	cmp	r1, #0
 800e790:	d1ed      	bne.n	800e76e <_puts_r+0x52>
 800e792:	2b00      	cmp	r3, #0
 800e794:	da11      	bge.n	800e7ba <_puts_r+0x9e>
 800e796:	4622      	mov	r2, r4
 800e798:	210a      	movs	r1, #10
 800e79a:	4628      	mov	r0, r5
 800e79c:	f000 f913 	bl	800e9c6 <__swbuf_r>
 800e7a0:	3001      	adds	r0, #1
 800e7a2:	d0d7      	beq.n	800e754 <_puts_r+0x38>
 800e7a4:	250a      	movs	r5, #10
 800e7a6:	e7d7      	b.n	800e758 <_puts_r+0x3c>
 800e7a8:	4622      	mov	r2, r4
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	f000 f90b 	bl	800e9c6 <__swbuf_r>
 800e7b0:	3001      	adds	r0, #1
 800e7b2:	d1e7      	bne.n	800e784 <_puts_r+0x68>
 800e7b4:	e7ce      	b.n	800e754 <_puts_r+0x38>
 800e7b6:	3e01      	subs	r6, #1
 800e7b8:	e7e4      	b.n	800e784 <_puts_r+0x68>
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	1c5a      	adds	r2, r3, #1
 800e7be:	6022      	str	r2, [r4, #0]
 800e7c0:	220a      	movs	r2, #10
 800e7c2:	701a      	strb	r2, [r3, #0]
 800e7c4:	e7ee      	b.n	800e7a4 <_puts_r+0x88>
	...

0800e7c8 <puts>:
 800e7c8:	4b02      	ldr	r3, [pc, #8]	@ (800e7d4 <puts+0xc>)
 800e7ca:	4601      	mov	r1, r0
 800e7cc:	6818      	ldr	r0, [r3, #0]
 800e7ce:	f7ff bfa5 	b.w	800e71c <_puts_r>
 800e7d2:	bf00      	nop
 800e7d4:	20000038 	.word	0x20000038

0800e7d8 <setvbuf>:
 800e7d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e7dc:	461d      	mov	r5, r3
 800e7de:	4b57      	ldr	r3, [pc, #348]	@ (800e93c <setvbuf+0x164>)
 800e7e0:	681f      	ldr	r7, [r3, #0]
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	460e      	mov	r6, r1
 800e7e6:	4690      	mov	r8, r2
 800e7e8:	b127      	cbz	r7, 800e7f4 <setvbuf+0x1c>
 800e7ea:	6a3b      	ldr	r3, [r7, #32]
 800e7ec:	b913      	cbnz	r3, 800e7f4 <setvbuf+0x1c>
 800e7ee:	4638      	mov	r0, r7
 800e7f0:	f7ff ff44 	bl	800e67c <__sinit>
 800e7f4:	f1b8 0f02 	cmp.w	r8, #2
 800e7f8:	d006      	beq.n	800e808 <setvbuf+0x30>
 800e7fa:	f1b8 0f01 	cmp.w	r8, #1
 800e7fe:	f200 809a 	bhi.w	800e936 <setvbuf+0x15e>
 800e802:	2d00      	cmp	r5, #0
 800e804:	f2c0 8097 	blt.w	800e936 <setvbuf+0x15e>
 800e808:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e80a:	07d9      	lsls	r1, r3, #31
 800e80c:	d405      	bmi.n	800e81a <setvbuf+0x42>
 800e80e:	89a3      	ldrh	r3, [r4, #12]
 800e810:	059a      	lsls	r2, r3, #22
 800e812:	d402      	bmi.n	800e81a <setvbuf+0x42>
 800e814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e816:	f000 fa04 	bl	800ec22 <__retarget_lock_acquire_recursive>
 800e81a:	4621      	mov	r1, r4
 800e81c:	4638      	mov	r0, r7
 800e81e:	f000 fdad 	bl	800f37c <_fflush_r>
 800e822:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e824:	b141      	cbz	r1, 800e838 <setvbuf+0x60>
 800e826:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e82a:	4299      	cmp	r1, r3
 800e82c:	d002      	beq.n	800e834 <setvbuf+0x5c>
 800e82e:	4638      	mov	r0, r7
 800e830:	f000 fa08 	bl	800ec44 <_free_r>
 800e834:	2300      	movs	r3, #0
 800e836:	6363      	str	r3, [r4, #52]	@ 0x34
 800e838:	2300      	movs	r3, #0
 800e83a:	61a3      	str	r3, [r4, #24]
 800e83c:	6063      	str	r3, [r4, #4]
 800e83e:	89a3      	ldrh	r3, [r4, #12]
 800e840:	061b      	lsls	r3, r3, #24
 800e842:	d503      	bpl.n	800e84c <setvbuf+0x74>
 800e844:	6921      	ldr	r1, [r4, #16]
 800e846:	4638      	mov	r0, r7
 800e848:	f000 f9fc 	bl	800ec44 <_free_r>
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800e852:	f023 0303 	bic.w	r3, r3, #3
 800e856:	f1b8 0f02 	cmp.w	r8, #2
 800e85a:	81a3      	strh	r3, [r4, #12]
 800e85c:	d061      	beq.n	800e922 <setvbuf+0x14a>
 800e85e:	ab01      	add	r3, sp, #4
 800e860:	466a      	mov	r2, sp
 800e862:	4621      	mov	r1, r4
 800e864:	4638      	mov	r0, r7
 800e866:	f000 fdb1 	bl	800f3cc <__swhatbuf_r>
 800e86a:	89a3      	ldrh	r3, [r4, #12]
 800e86c:	4318      	orrs	r0, r3
 800e86e:	81a0      	strh	r0, [r4, #12]
 800e870:	bb2d      	cbnz	r5, 800e8be <setvbuf+0xe6>
 800e872:	9d00      	ldr	r5, [sp, #0]
 800e874:	4628      	mov	r0, r5
 800e876:	f7ff fdb7 	bl	800e3e8 <malloc>
 800e87a:	4606      	mov	r6, r0
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d152      	bne.n	800e926 <setvbuf+0x14e>
 800e880:	f8dd 9000 	ldr.w	r9, [sp]
 800e884:	45a9      	cmp	r9, r5
 800e886:	d140      	bne.n	800e90a <setvbuf+0x132>
 800e888:	f04f 35ff 	mov.w	r5, #4294967295
 800e88c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e890:	f043 0202 	orr.w	r2, r3, #2
 800e894:	81a2      	strh	r2, [r4, #12]
 800e896:	2200      	movs	r2, #0
 800e898:	60a2      	str	r2, [r4, #8]
 800e89a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800e89e:	6022      	str	r2, [r4, #0]
 800e8a0:	6122      	str	r2, [r4, #16]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	6162      	str	r2, [r4, #20]
 800e8a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e8a8:	07d6      	lsls	r6, r2, #31
 800e8aa:	d404      	bmi.n	800e8b6 <setvbuf+0xde>
 800e8ac:	0598      	lsls	r0, r3, #22
 800e8ae:	d402      	bmi.n	800e8b6 <setvbuf+0xde>
 800e8b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e8b2:	f000 f9b7 	bl	800ec24 <__retarget_lock_release_recursive>
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	b003      	add	sp, #12
 800e8ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8be:	2e00      	cmp	r6, #0
 800e8c0:	d0d8      	beq.n	800e874 <setvbuf+0x9c>
 800e8c2:	6a3b      	ldr	r3, [r7, #32]
 800e8c4:	b913      	cbnz	r3, 800e8cc <setvbuf+0xf4>
 800e8c6:	4638      	mov	r0, r7
 800e8c8:	f7ff fed8 	bl	800e67c <__sinit>
 800e8cc:	f1b8 0f01 	cmp.w	r8, #1
 800e8d0:	bf08      	it	eq
 800e8d2:	89a3      	ldrheq	r3, [r4, #12]
 800e8d4:	6026      	str	r6, [r4, #0]
 800e8d6:	bf04      	itt	eq
 800e8d8:	f043 0301 	orreq.w	r3, r3, #1
 800e8dc:	81a3      	strheq	r3, [r4, #12]
 800e8de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8e2:	f013 0208 	ands.w	r2, r3, #8
 800e8e6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800e8ea:	d01e      	beq.n	800e92a <setvbuf+0x152>
 800e8ec:	07d9      	lsls	r1, r3, #31
 800e8ee:	bf41      	itttt	mi
 800e8f0:	2200      	movmi	r2, #0
 800e8f2:	426d      	negmi	r5, r5
 800e8f4:	60a2      	strmi	r2, [r4, #8]
 800e8f6:	61a5      	strmi	r5, [r4, #24]
 800e8f8:	bf58      	it	pl
 800e8fa:	60a5      	strpl	r5, [r4, #8]
 800e8fc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e8fe:	07d2      	lsls	r2, r2, #31
 800e900:	d401      	bmi.n	800e906 <setvbuf+0x12e>
 800e902:	059b      	lsls	r3, r3, #22
 800e904:	d513      	bpl.n	800e92e <setvbuf+0x156>
 800e906:	2500      	movs	r5, #0
 800e908:	e7d5      	b.n	800e8b6 <setvbuf+0xde>
 800e90a:	4648      	mov	r0, r9
 800e90c:	f7ff fd6c 	bl	800e3e8 <malloc>
 800e910:	4606      	mov	r6, r0
 800e912:	2800      	cmp	r0, #0
 800e914:	d0b8      	beq.n	800e888 <setvbuf+0xb0>
 800e916:	89a3      	ldrh	r3, [r4, #12]
 800e918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e91c:	81a3      	strh	r3, [r4, #12]
 800e91e:	464d      	mov	r5, r9
 800e920:	e7cf      	b.n	800e8c2 <setvbuf+0xea>
 800e922:	2500      	movs	r5, #0
 800e924:	e7b2      	b.n	800e88c <setvbuf+0xb4>
 800e926:	46a9      	mov	r9, r5
 800e928:	e7f5      	b.n	800e916 <setvbuf+0x13e>
 800e92a:	60a2      	str	r2, [r4, #8]
 800e92c:	e7e6      	b.n	800e8fc <setvbuf+0x124>
 800e92e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e930:	f000 f978 	bl	800ec24 <__retarget_lock_release_recursive>
 800e934:	e7e7      	b.n	800e906 <setvbuf+0x12e>
 800e936:	f04f 35ff 	mov.w	r5, #4294967295
 800e93a:	e7bc      	b.n	800e8b6 <setvbuf+0xde>
 800e93c:	20000038 	.word	0x20000038

0800e940 <__sread>:
 800e940:	b510      	push	{r4, lr}
 800e942:	460c      	mov	r4, r1
 800e944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e948:	f000 f90c 	bl	800eb64 <_read_r>
 800e94c:	2800      	cmp	r0, #0
 800e94e:	bfab      	itete	ge
 800e950:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e952:	89a3      	ldrhlt	r3, [r4, #12]
 800e954:	181b      	addge	r3, r3, r0
 800e956:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e95a:	bfac      	ite	ge
 800e95c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e95e:	81a3      	strhlt	r3, [r4, #12]
 800e960:	bd10      	pop	{r4, pc}

0800e962 <__swrite>:
 800e962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e966:	461f      	mov	r7, r3
 800e968:	898b      	ldrh	r3, [r1, #12]
 800e96a:	05db      	lsls	r3, r3, #23
 800e96c:	4605      	mov	r5, r0
 800e96e:	460c      	mov	r4, r1
 800e970:	4616      	mov	r6, r2
 800e972:	d505      	bpl.n	800e980 <__swrite+0x1e>
 800e974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e978:	2302      	movs	r3, #2
 800e97a:	2200      	movs	r2, #0
 800e97c:	f000 f8e0 	bl	800eb40 <_lseek_r>
 800e980:	89a3      	ldrh	r3, [r4, #12]
 800e982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e98a:	81a3      	strh	r3, [r4, #12]
 800e98c:	4632      	mov	r2, r6
 800e98e:	463b      	mov	r3, r7
 800e990:	4628      	mov	r0, r5
 800e992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e996:	f000 b907 	b.w	800eba8 <_write_r>

0800e99a <__sseek>:
 800e99a:	b510      	push	{r4, lr}
 800e99c:	460c      	mov	r4, r1
 800e99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9a2:	f000 f8cd 	bl	800eb40 <_lseek_r>
 800e9a6:	1c43      	adds	r3, r0, #1
 800e9a8:	89a3      	ldrh	r3, [r4, #12]
 800e9aa:	bf15      	itete	ne
 800e9ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e9ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e9b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e9b6:	81a3      	strheq	r3, [r4, #12]
 800e9b8:	bf18      	it	ne
 800e9ba:	81a3      	strhne	r3, [r4, #12]
 800e9bc:	bd10      	pop	{r4, pc}

0800e9be <__sclose>:
 800e9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9c2:	f000 b8ad 	b.w	800eb20 <_close_r>

0800e9c6 <__swbuf_r>:
 800e9c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c8:	460e      	mov	r6, r1
 800e9ca:	4614      	mov	r4, r2
 800e9cc:	4605      	mov	r5, r0
 800e9ce:	b118      	cbz	r0, 800e9d8 <__swbuf_r+0x12>
 800e9d0:	6a03      	ldr	r3, [r0, #32]
 800e9d2:	b90b      	cbnz	r3, 800e9d8 <__swbuf_r+0x12>
 800e9d4:	f7ff fe52 	bl	800e67c <__sinit>
 800e9d8:	69a3      	ldr	r3, [r4, #24]
 800e9da:	60a3      	str	r3, [r4, #8]
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	071a      	lsls	r2, r3, #28
 800e9e0:	d501      	bpl.n	800e9e6 <__swbuf_r+0x20>
 800e9e2:	6923      	ldr	r3, [r4, #16]
 800e9e4:	b943      	cbnz	r3, 800e9f8 <__swbuf_r+0x32>
 800e9e6:	4621      	mov	r1, r4
 800e9e8:	4628      	mov	r0, r5
 800e9ea:	f000 f82b 	bl	800ea44 <__swsetup_r>
 800e9ee:	b118      	cbz	r0, 800e9f8 <__swbuf_r+0x32>
 800e9f0:	f04f 37ff 	mov.w	r7, #4294967295
 800e9f4:	4638      	mov	r0, r7
 800e9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9f8:	6823      	ldr	r3, [r4, #0]
 800e9fa:	6922      	ldr	r2, [r4, #16]
 800e9fc:	1a98      	subs	r0, r3, r2
 800e9fe:	6963      	ldr	r3, [r4, #20]
 800ea00:	b2f6      	uxtb	r6, r6
 800ea02:	4283      	cmp	r3, r0
 800ea04:	4637      	mov	r7, r6
 800ea06:	dc05      	bgt.n	800ea14 <__swbuf_r+0x4e>
 800ea08:	4621      	mov	r1, r4
 800ea0a:	4628      	mov	r0, r5
 800ea0c:	f000 fcb6 	bl	800f37c <_fflush_r>
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d1ed      	bne.n	800e9f0 <__swbuf_r+0x2a>
 800ea14:	68a3      	ldr	r3, [r4, #8]
 800ea16:	3b01      	subs	r3, #1
 800ea18:	60a3      	str	r3, [r4, #8]
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	1c5a      	adds	r2, r3, #1
 800ea1e:	6022      	str	r2, [r4, #0]
 800ea20:	701e      	strb	r6, [r3, #0]
 800ea22:	6962      	ldr	r2, [r4, #20]
 800ea24:	1c43      	adds	r3, r0, #1
 800ea26:	429a      	cmp	r2, r3
 800ea28:	d004      	beq.n	800ea34 <__swbuf_r+0x6e>
 800ea2a:	89a3      	ldrh	r3, [r4, #12]
 800ea2c:	07db      	lsls	r3, r3, #31
 800ea2e:	d5e1      	bpl.n	800e9f4 <__swbuf_r+0x2e>
 800ea30:	2e0a      	cmp	r6, #10
 800ea32:	d1df      	bne.n	800e9f4 <__swbuf_r+0x2e>
 800ea34:	4621      	mov	r1, r4
 800ea36:	4628      	mov	r0, r5
 800ea38:	f000 fca0 	bl	800f37c <_fflush_r>
 800ea3c:	2800      	cmp	r0, #0
 800ea3e:	d0d9      	beq.n	800e9f4 <__swbuf_r+0x2e>
 800ea40:	e7d6      	b.n	800e9f0 <__swbuf_r+0x2a>
	...

0800ea44 <__swsetup_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4b29      	ldr	r3, [pc, #164]	@ (800eaec <__swsetup_r+0xa8>)
 800ea48:	4605      	mov	r5, r0
 800ea4a:	6818      	ldr	r0, [r3, #0]
 800ea4c:	460c      	mov	r4, r1
 800ea4e:	b118      	cbz	r0, 800ea58 <__swsetup_r+0x14>
 800ea50:	6a03      	ldr	r3, [r0, #32]
 800ea52:	b90b      	cbnz	r3, 800ea58 <__swsetup_r+0x14>
 800ea54:	f7ff fe12 	bl	800e67c <__sinit>
 800ea58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea5c:	0719      	lsls	r1, r3, #28
 800ea5e:	d422      	bmi.n	800eaa6 <__swsetup_r+0x62>
 800ea60:	06da      	lsls	r2, r3, #27
 800ea62:	d407      	bmi.n	800ea74 <__swsetup_r+0x30>
 800ea64:	2209      	movs	r2, #9
 800ea66:	602a      	str	r2, [r5, #0]
 800ea68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea6c:	81a3      	strh	r3, [r4, #12]
 800ea6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea72:	e033      	b.n	800eadc <__swsetup_r+0x98>
 800ea74:	0758      	lsls	r0, r3, #29
 800ea76:	d512      	bpl.n	800ea9e <__swsetup_r+0x5a>
 800ea78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ea7a:	b141      	cbz	r1, 800ea8e <__swsetup_r+0x4a>
 800ea7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ea80:	4299      	cmp	r1, r3
 800ea82:	d002      	beq.n	800ea8a <__swsetup_r+0x46>
 800ea84:	4628      	mov	r0, r5
 800ea86:	f000 f8dd 	bl	800ec44 <_free_r>
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ea8e:	89a3      	ldrh	r3, [r4, #12]
 800ea90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ea94:	81a3      	strh	r3, [r4, #12]
 800ea96:	2300      	movs	r3, #0
 800ea98:	6063      	str	r3, [r4, #4]
 800ea9a:	6923      	ldr	r3, [r4, #16]
 800ea9c:	6023      	str	r3, [r4, #0]
 800ea9e:	89a3      	ldrh	r3, [r4, #12]
 800eaa0:	f043 0308 	orr.w	r3, r3, #8
 800eaa4:	81a3      	strh	r3, [r4, #12]
 800eaa6:	6923      	ldr	r3, [r4, #16]
 800eaa8:	b94b      	cbnz	r3, 800eabe <__swsetup_r+0x7a>
 800eaaa:	89a3      	ldrh	r3, [r4, #12]
 800eaac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800eab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800eab4:	d003      	beq.n	800eabe <__swsetup_r+0x7a>
 800eab6:	4621      	mov	r1, r4
 800eab8:	4628      	mov	r0, r5
 800eaba:	f000 fcad 	bl	800f418 <__smakebuf_r>
 800eabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eac2:	f013 0201 	ands.w	r2, r3, #1
 800eac6:	d00a      	beq.n	800eade <__swsetup_r+0x9a>
 800eac8:	2200      	movs	r2, #0
 800eaca:	60a2      	str	r2, [r4, #8]
 800eacc:	6962      	ldr	r2, [r4, #20]
 800eace:	4252      	negs	r2, r2
 800ead0:	61a2      	str	r2, [r4, #24]
 800ead2:	6922      	ldr	r2, [r4, #16]
 800ead4:	b942      	cbnz	r2, 800eae8 <__swsetup_r+0xa4>
 800ead6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800eada:	d1c5      	bne.n	800ea68 <__swsetup_r+0x24>
 800eadc:	bd38      	pop	{r3, r4, r5, pc}
 800eade:	0799      	lsls	r1, r3, #30
 800eae0:	bf58      	it	pl
 800eae2:	6962      	ldrpl	r2, [r4, #20]
 800eae4:	60a2      	str	r2, [r4, #8]
 800eae6:	e7f4      	b.n	800ead2 <__swsetup_r+0x8e>
 800eae8:	2000      	movs	r0, #0
 800eaea:	e7f7      	b.n	800eadc <__swsetup_r+0x98>
 800eaec:	20000038 	.word	0x20000038

0800eaf0 <memcmp>:
 800eaf0:	b510      	push	{r4, lr}
 800eaf2:	3901      	subs	r1, #1
 800eaf4:	4402      	add	r2, r0
 800eaf6:	4290      	cmp	r0, r2
 800eaf8:	d101      	bne.n	800eafe <memcmp+0xe>
 800eafa:	2000      	movs	r0, #0
 800eafc:	e005      	b.n	800eb0a <memcmp+0x1a>
 800eafe:	7803      	ldrb	r3, [r0, #0]
 800eb00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb04:	42a3      	cmp	r3, r4
 800eb06:	d001      	beq.n	800eb0c <memcmp+0x1c>
 800eb08:	1b18      	subs	r0, r3, r4
 800eb0a:	bd10      	pop	{r4, pc}
 800eb0c:	3001      	adds	r0, #1
 800eb0e:	e7f2      	b.n	800eaf6 <memcmp+0x6>

0800eb10 <memset>:
 800eb10:	4402      	add	r2, r0
 800eb12:	4603      	mov	r3, r0
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d100      	bne.n	800eb1a <memset+0xa>
 800eb18:	4770      	bx	lr
 800eb1a:	f803 1b01 	strb.w	r1, [r3], #1
 800eb1e:	e7f9      	b.n	800eb14 <memset+0x4>

0800eb20 <_close_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4d06      	ldr	r5, [pc, #24]	@ (800eb3c <_close_r+0x1c>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	4604      	mov	r4, r0
 800eb28:	4608      	mov	r0, r1
 800eb2a:	602b      	str	r3, [r5, #0]
 800eb2c:	f7f7 f959 	bl	8005de2 <_close>
 800eb30:	1c43      	adds	r3, r0, #1
 800eb32:	d102      	bne.n	800eb3a <_close_r+0x1a>
 800eb34:	682b      	ldr	r3, [r5, #0]
 800eb36:	b103      	cbz	r3, 800eb3a <_close_r+0x1a>
 800eb38:	6023      	str	r3, [r4, #0]
 800eb3a:	bd38      	pop	{r3, r4, r5, pc}
 800eb3c:	20000af8 	.word	0x20000af8

0800eb40 <_lseek_r>:
 800eb40:	b538      	push	{r3, r4, r5, lr}
 800eb42:	4d07      	ldr	r5, [pc, #28]	@ (800eb60 <_lseek_r+0x20>)
 800eb44:	4604      	mov	r4, r0
 800eb46:	4608      	mov	r0, r1
 800eb48:	4611      	mov	r1, r2
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	602a      	str	r2, [r5, #0]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	f7f7 f96e 	bl	8005e30 <_lseek>
 800eb54:	1c43      	adds	r3, r0, #1
 800eb56:	d102      	bne.n	800eb5e <_lseek_r+0x1e>
 800eb58:	682b      	ldr	r3, [r5, #0]
 800eb5a:	b103      	cbz	r3, 800eb5e <_lseek_r+0x1e>
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	bd38      	pop	{r3, r4, r5, pc}
 800eb60:	20000af8 	.word	0x20000af8

0800eb64 <_read_r>:
 800eb64:	b538      	push	{r3, r4, r5, lr}
 800eb66:	4d07      	ldr	r5, [pc, #28]	@ (800eb84 <_read_r+0x20>)
 800eb68:	4604      	mov	r4, r0
 800eb6a:	4608      	mov	r0, r1
 800eb6c:	4611      	mov	r1, r2
 800eb6e:	2200      	movs	r2, #0
 800eb70:	602a      	str	r2, [r5, #0]
 800eb72:	461a      	mov	r2, r3
 800eb74:	f7f7 f918 	bl	8005da8 <_read>
 800eb78:	1c43      	adds	r3, r0, #1
 800eb7a:	d102      	bne.n	800eb82 <_read_r+0x1e>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	b103      	cbz	r3, 800eb82 <_read_r+0x1e>
 800eb80:	6023      	str	r3, [r4, #0]
 800eb82:	bd38      	pop	{r3, r4, r5, pc}
 800eb84:	20000af8 	.word	0x20000af8

0800eb88 <_sbrk_r>:
 800eb88:	b538      	push	{r3, r4, r5, lr}
 800eb8a:	4d06      	ldr	r5, [pc, #24]	@ (800eba4 <_sbrk_r+0x1c>)
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	4604      	mov	r4, r0
 800eb90:	4608      	mov	r0, r1
 800eb92:	602b      	str	r3, [r5, #0]
 800eb94:	f7f7 f95a 	bl	8005e4c <_sbrk>
 800eb98:	1c43      	adds	r3, r0, #1
 800eb9a:	d102      	bne.n	800eba2 <_sbrk_r+0x1a>
 800eb9c:	682b      	ldr	r3, [r5, #0]
 800eb9e:	b103      	cbz	r3, 800eba2 <_sbrk_r+0x1a>
 800eba0:	6023      	str	r3, [r4, #0]
 800eba2:	bd38      	pop	{r3, r4, r5, pc}
 800eba4:	20000af8 	.word	0x20000af8

0800eba8 <_write_r>:
 800eba8:	b538      	push	{r3, r4, r5, lr}
 800ebaa:	4d07      	ldr	r5, [pc, #28]	@ (800ebc8 <_write_r+0x20>)
 800ebac:	4604      	mov	r4, r0
 800ebae:	4608      	mov	r0, r1
 800ebb0:	4611      	mov	r1, r2
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	602a      	str	r2, [r5, #0]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	f7f5 f99a 	bl	8003ef0 <_write>
 800ebbc:	1c43      	adds	r3, r0, #1
 800ebbe:	d102      	bne.n	800ebc6 <_write_r+0x1e>
 800ebc0:	682b      	ldr	r3, [r5, #0]
 800ebc2:	b103      	cbz	r3, 800ebc6 <_write_r+0x1e>
 800ebc4:	6023      	str	r3, [r4, #0]
 800ebc6:	bd38      	pop	{r3, r4, r5, pc}
 800ebc8:	20000af8 	.word	0x20000af8

0800ebcc <__errno>:
 800ebcc:	4b01      	ldr	r3, [pc, #4]	@ (800ebd4 <__errno+0x8>)
 800ebce:	6818      	ldr	r0, [r3, #0]
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	20000038 	.word	0x20000038

0800ebd8 <__libc_init_array>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	4d0d      	ldr	r5, [pc, #52]	@ (800ec10 <__libc_init_array+0x38>)
 800ebdc:	4c0d      	ldr	r4, [pc, #52]	@ (800ec14 <__libc_init_array+0x3c>)
 800ebde:	1b64      	subs	r4, r4, r5
 800ebe0:	10a4      	asrs	r4, r4, #2
 800ebe2:	2600      	movs	r6, #0
 800ebe4:	42a6      	cmp	r6, r4
 800ebe6:	d109      	bne.n	800ebfc <__libc_init_array+0x24>
 800ebe8:	4d0b      	ldr	r5, [pc, #44]	@ (800ec18 <__libc_init_array+0x40>)
 800ebea:	4c0c      	ldr	r4, [pc, #48]	@ (800ec1c <__libc_init_array+0x44>)
 800ebec:	f000 fca6 	bl	800f53c <_init>
 800ebf0:	1b64      	subs	r4, r4, r5
 800ebf2:	10a4      	asrs	r4, r4, #2
 800ebf4:	2600      	movs	r6, #0
 800ebf6:	42a6      	cmp	r6, r4
 800ebf8:	d105      	bne.n	800ec06 <__libc_init_array+0x2e>
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
 800ebfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec00:	4798      	blx	r3
 800ec02:	3601      	adds	r6, #1
 800ec04:	e7ee      	b.n	800ebe4 <__libc_init_array+0xc>
 800ec06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec0a:	4798      	blx	r3
 800ec0c:	3601      	adds	r6, #1
 800ec0e:	e7f2      	b.n	800ebf6 <__libc_init_array+0x1e>
 800ec10:	0800fa04 	.word	0x0800fa04
 800ec14:	0800fa04 	.word	0x0800fa04
 800ec18:	0800fa04 	.word	0x0800fa04
 800ec1c:	0800fa08 	.word	0x0800fa08

0800ec20 <__retarget_lock_init_recursive>:
 800ec20:	4770      	bx	lr

0800ec22 <__retarget_lock_acquire_recursive>:
 800ec22:	4770      	bx	lr

0800ec24 <__retarget_lock_release_recursive>:
 800ec24:	4770      	bx	lr

0800ec26 <memcpy>:
 800ec26:	440a      	add	r2, r1
 800ec28:	4291      	cmp	r1, r2
 800ec2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec2e:	d100      	bne.n	800ec32 <memcpy+0xc>
 800ec30:	4770      	bx	lr
 800ec32:	b510      	push	{r4, lr}
 800ec34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec3c:	4291      	cmp	r1, r2
 800ec3e:	d1f9      	bne.n	800ec34 <memcpy+0xe>
 800ec40:	bd10      	pop	{r4, pc}
	...

0800ec44 <_free_r>:
 800ec44:	b538      	push	{r3, r4, r5, lr}
 800ec46:	4605      	mov	r5, r0
 800ec48:	2900      	cmp	r1, #0
 800ec4a:	d041      	beq.n	800ecd0 <_free_r+0x8c>
 800ec4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec50:	1f0c      	subs	r4, r1, #4
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	bfb8      	it	lt
 800ec56:	18e4      	addlt	r4, r4, r3
 800ec58:	f7ff fc78 	bl	800e54c <__malloc_lock>
 800ec5c:	4a1d      	ldr	r2, [pc, #116]	@ (800ecd4 <_free_r+0x90>)
 800ec5e:	6813      	ldr	r3, [r2, #0]
 800ec60:	b933      	cbnz	r3, 800ec70 <_free_r+0x2c>
 800ec62:	6063      	str	r3, [r4, #4]
 800ec64:	6014      	str	r4, [r2, #0]
 800ec66:	4628      	mov	r0, r5
 800ec68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec6c:	f7ff bc74 	b.w	800e558 <__malloc_unlock>
 800ec70:	42a3      	cmp	r3, r4
 800ec72:	d908      	bls.n	800ec86 <_free_r+0x42>
 800ec74:	6820      	ldr	r0, [r4, #0]
 800ec76:	1821      	adds	r1, r4, r0
 800ec78:	428b      	cmp	r3, r1
 800ec7a:	bf01      	itttt	eq
 800ec7c:	6819      	ldreq	r1, [r3, #0]
 800ec7e:	685b      	ldreq	r3, [r3, #4]
 800ec80:	1809      	addeq	r1, r1, r0
 800ec82:	6021      	streq	r1, [r4, #0]
 800ec84:	e7ed      	b.n	800ec62 <_free_r+0x1e>
 800ec86:	461a      	mov	r2, r3
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	b10b      	cbz	r3, 800ec90 <_free_r+0x4c>
 800ec8c:	42a3      	cmp	r3, r4
 800ec8e:	d9fa      	bls.n	800ec86 <_free_r+0x42>
 800ec90:	6811      	ldr	r1, [r2, #0]
 800ec92:	1850      	adds	r0, r2, r1
 800ec94:	42a0      	cmp	r0, r4
 800ec96:	d10b      	bne.n	800ecb0 <_free_r+0x6c>
 800ec98:	6820      	ldr	r0, [r4, #0]
 800ec9a:	4401      	add	r1, r0
 800ec9c:	1850      	adds	r0, r2, r1
 800ec9e:	4283      	cmp	r3, r0
 800eca0:	6011      	str	r1, [r2, #0]
 800eca2:	d1e0      	bne.n	800ec66 <_free_r+0x22>
 800eca4:	6818      	ldr	r0, [r3, #0]
 800eca6:	685b      	ldr	r3, [r3, #4]
 800eca8:	6053      	str	r3, [r2, #4]
 800ecaa:	4408      	add	r0, r1
 800ecac:	6010      	str	r0, [r2, #0]
 800ecae:	e7da      	b.n	800ec66 <_free_r+0x22>
 800ecb0:	d902      	bls.n	800ecb8 <_free_r+0x74>
 800ecb2:	230c      	movs	r3, #12
 800ecb4:	602b      	str	r3, [r5, #0]
 800ecb6:	e7d6      	b.n	800ec66 <_free_r+0x22>
 800ecb8:	6820      	ldr	r0, [r4, #0]
 800ecba:	1821      	adds	r1, r4, r0
 800ecbc:	428b      	cmp	r3, r1
 800ecbe:	bf04      	itt	eq
 800ecc0:	6819      	ldreq	r1, [r3, #0]
 800ecc2:	685b      	ldreq	r3, [r3, #4]
 800ecc4:	6063      	str	r3, [r4, #4]
 800ecc6:	bf04      	itt	eq
 800ecc8:	1809      	addeq	r1, r1, r0
 800ecca:	6021      	streq	r1, [r4, #0]
 800eccc:	6054      	str	r4, [r2, #4]
 800ecce:	e7ca      	b.n	800ec66 <_free_r+0x22>
 800ecd0:	bd38      	pop	{r3, r4, r5, pc}
 800ecd2:	bf00      	nop
 800ecd4:	200009b8 	.word	0x200009b8

0800ecd8 <__sfputc_r>:
 800ecd8:	6893      	ldr	r3, [r2, #8]
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	b410      	push	{r4}
 800ece0:	6093      	str	r3, [r2, #8]
 800ece2:	da08      	bge.n	800ecf6 <__sfputc_r+0x1e>
 800ece4:	6994      	ldr	r4, [r2, #24]
 800ece6:	42a3      	cmp	r3, r4
 800ece8:	db01      	blt.n	800ecee <__sfputc_r+0x16>
 800ecea:	290a      	cmp	r1, #10
 800ecec:	d103      	bne.n	800ecf6 <__sfputc_r+0x1e>
 800ecee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecf2:	f7ff be68 	b.w	800e9c6 <__swbuf_r>
 800ecf6:	6813      	ldr	r3, [r2, #0]
 800ecf8:	1c58      	adds	r0, r3, #1
 800ecfa:	6010      	str	r0, [r2, #0]
 800ecfc:	7019      	strb	r1, [r3, #0]
 800ecfe:	4608      	mov	r0, r1
 800ed00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed04:	4770      	bx	lr

0800ed06 <__sfputs_r>:
 800ed06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed08:	4606      	mov	r6, r0
 800ed0a:	460f      	mov	r7, r1
 800ed0c:	4614      	mov	r4, r2
 800ed0e:	18d5      	adds	r5, r2, r3
 800ed10:	42ac      	cmp	r4, r5
 800ed12:	d101      	bne.n	800ed18 <__sfputs_r+0x12>
 800ed14:	2000      	movs	r0, #0
 800ed16:	e007      	b.n	800ed28 <__sfputs_r+0x22>
 800ed18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed1c:	463a      	mov	r2, r7
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f7ff ffda 	bl	800ecd8 <__sfputc_r>
 800ed24:	1c43      	adds	r3, r0, #1
 800ed26:	d1f3      	bne.n	800ed10 <__sfputs_r+0xa>
 800ed28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ed2c <_vfiprintf_r>:
 800ed2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed30:	460d      	mov	r5, r1
 800ed32:	b09d      	sub	sp, #116	@ 0x74
 800ed34:	4614      	mov	r4, r2
 800ed36:	4698      	mov	r8, r3
 800ed38:	4606      	mov	r6, r0
 800ed3a:	b118      	cbz	r0, 800ed44 <_vfiprintf_r+0x18>
 800ed3c:	6a03      	ldr	r3, [r0, #32]
 800ed3e:	b90b      	cbnz	r3, 800ed44 <_vfiprintf_r+0x18>
 800ed40:	f7ff fc9c 	bl	800e67c <__sinit>
 800ed44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed46:	07d9      	lsls	r1, r3, #31
 800ed48:	d405      	bmi.n	800ed56 <_vfiprintf_r+0x2a>
 800ed4a:	89ab      	ldrh	r3, [r5, #12]
 800ed4c:	059a      	lsls	r2, r3, #22
 800ed4e:	d402      	bmi.n	800ed56 <_vfiprintf_r+0x2a>
 800ed50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed52:	f7ff ff66 	bl	800ec22 <__retarget_lock_acquire_recursive>
 800ed56:	89ab      	ldrh	r3, [r5, #12]
 800ed58:	071b      	lsls	r3, r3, #28
 800ed5a:	d501      	bpl.n	800ed60 <_vfiprintf_r+0x34>
 800ed5c:	692b      	ldr	r3, [r5, #16]
 800ed5e:	b99b      	cbnz	r3, 800ed88 <_vfiprintf_r+0x5c>
 800ed60:	4629      	mov	r1, r5
 800ed62:	4630      	mov	r0, r6
 800ed64:	f7ff fe6e 	bl	800ea44 <__swsetup_r>
 800ed68:	b170      	cbz	r0, 800ed88 <_vfiprintf_r+0x5c>
 800ed6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed6c:	07dc      	lsls	r4, r3, #31
 800ed6e:	d504      	bpl.n	800ed7a <_vfiprintf_r+0x4e>
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	b01d      	add	sp, #116	@ 0x74
 800ed76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed7a:	89ab      	ldrh	r3, [r5, #12]
 800ed7c:	0598      	lsls	r0, r3, #22
 800ed7e:	d4f7      	bmi.n	800ed70 <_vfiprintf_r+0x44>
 800ed80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed82:	f7ff ff4f 	bl	800ec24 <__retarget_lock_release_recursive>
 800ed86:	e7f3      	b.n	800ed70 <_vfiprintf_r+0x44>
 800ed88:	2300      	movs	r3, #0
 800ed8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed8c:	2320      	movs	r3, #32
 800ed8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed96:	2330      	movs	r3, #48	@ 0x30
 800ed98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ef48 <_vfiprintf_r+0x21c>
 800ed9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eda0:	f04f 0901 	mov.w	r9, #1
 800eda4:	4623      	mov	r3, r4
 800eda6:	469a      	mov	sl, r3
 800eda8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edac:	b10a      	cbz	r2, 800edb2 <_vfiprintf_r+0x86>
 800edae:	2a25      	cmp	r2, #37	@ 0x25
 800edb0:	d1f9      	bne.n	800eda6 <_vfiprintf_r+0x7a>
 800edb2:	ebba 0b04 	subs.w	fp, sl, r4
 800edb6:	d00b      	beq.n	800edd0 <_vfiprintf_r+0xa4>
 800edb8:	465b      	mov	r3, fp
 800edba:	4622      	mov	r2, r4
 800edbc:	4629      	mov	r1, r5
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7ff ffa1 	bl	800ed06 <__sfputs_r>
 800edc4:	3001      	adds	r0, #1
 800edc6:	f000 80a7 	beq.w	800ef18 <_vfiprintf_r+0x1ec>
 800edca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800edcc:	445a      	add	r2, fp
 800edce:	9209      	str	r2, [sp, #36]	@ 0x24
 800edd0:	f89a 3000 	ldrb.w	r3, [sl]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	f000 809f 	beq.w	800ef18 <_vfiprintf_r+0x1ec>
 800edda:	2300      	movs	r3, #0
 800eddc:	f04f 32ff 	mov.w	r2, #4294967295
 800ede0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ede4:	f10a 0a01 	add.w	sl, sl, #1
 800ede8:	9304      	str	r3, [sp, #16]
 800edea:	9307      	str	r3, [sp, #28]
 800edec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800edf0:	931a      	str	r3, [sp, #104]	@ 0x68
 800edf2:	4654      	mov	r4, sl
 800edf4:	2205      	movs	r2, #5
 800edf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edfa:	4853      	ldr	r0, [pc, #332]	@ (800ef48 <_vfiprintf_r+0x21c>)
 800edfc:	f7f1 f9e8 	bl	80001d0 <memchr>
 800ee00:	9a04      	ldr	r2, [sp, #16]
 800ee02:	b9d8      	cbnz	r0, 800ee3c <_vfiprintf_r+0x110>
 800ee04:	06d1      	lsls	r1, r2, #27
 800ee06:	bf44      	itt	mi
 800ee08:	2320      	movmi	r3, #32
 800ee0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee0e:	0713      	lsls	r3, r2, #28
 800ee10:	bf44      	itt	mi
 800ee12:	232b      	movmi	r3, #43	@ 0x2b
 800ee14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee18:	f89a 3000 	ldrb.w	r3, [sl]
 800ee1c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee1e:	d015      	beq.n	800ee4c <_vfiprintf_r+0x120>
 800ee20:	9a07      	ldr	r2, [sp, #28]
 800ee22:	4654      	mov	r4, sl
 800ee24:	2000      	movs	r0, #0
 800ee26:	f04f 0c0a 	mov.w	ip, #10
 800ee2a:	4621      	mov	r1, r4
 800ee2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee30:	3b30      	subs	r3, #48	@ 0x30
 800ee32:	2b09      	cmp	r3, #9
 800ee34:	d94b      	bls.n	800eece <_vfiprintf_r+0x1a2>
 800ee36:	b1b0      	cbz	r0, 800ee66 <_vfiprintf_r+0x13a>
 800ee38:	9207      	str	r2, [sp, #28]
 800ee3a:	e014      	b.n	800ee66 <_vfiprintf_r+0x13a>
 800ee3c:	eba0 0308 	sub.w	r3, r0, r8
 800ee40:	fa09 f303 	lsl.w	r3, r9, r3
 800ee44:	4313      	orrs	r3, r2
 800ee46:	9304      	str	r3, [sp, #16]
 800ee48:	46a2      	mov	sl, r4
 800ee4a:	e7d2      	b.n	800edf2 <_vfiprintf_r+0xc6>
 800ee4c:	9b03      	ldr	r3, [sp, #12]
 800ee4e:	1d19      	adds	r1, r3, #4
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	9103      	str	r1, [sp, #12]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	bfbb      	ittet	lt
 800ee58:	425b      	neglt	r3, r3
 800ee5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ee5e:	9307      	strge	r3, [sp, #28]
 800ee60:	9307      	strlt	r3, [sp, #28]
 800ee62:	bfb8      	it	lt
 800ee64:	9204      	strlt	r2, [sp, #16]
 800ee66:	7823      	ldrb	r3, [r4, #0]
 800ee68:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee6a:	d10a      	bne.n	800ee82 <_vfiprintf_r+0x156>
 800ee6c:	7863      	ldrb	r3, [r4, #1]
 800ee6e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee70:	d132      	bne.n	800eed8 <_vfiprintf_r+0x1ac>
 800ee72:	9b03      	ldr	r3, [sp, #12]
 800ee74:	1d1a      	adds	r2, r3, #4
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	9203      	str	r2, [sp, #12]
 800ee7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee7e:	3402      	adds	r4, #2
 800ee80:	9305      	str	r3, [sp, #20]
 800ee82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ef58 <_vfiprintf_r+0x22c>
 800ee86:	7821      	ldrb	r1, [r4, #0]
 800ee88:	2203      	movs	r2, #3
 800ee8a:	4650      	mov	r0, sl
 800ee8c:	f7f1 f9a0 	bl	80001d0 <memchr>
 800ee90:	b138      	cbz	r0, 800eea2 <_vfiprintf_r+0x176>
 800ee92:	9b04      	ldr	r3, [sp, #16]
 800ee94:	eba0 000a 	sub.w	r0, r0, sl
 800ee98:	2240      	movs	r2, #64	@ 0x40
 800ee9a:	4082      	lsls	r2, r0
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	3401      	adds	r4, #1
 800eea0:	9304      	str	r3, [sp, #16]
 800eea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eea6:	4829      	ldr	r0, [pc, #164]	@ (800ef4c <_vfiprintf_r+0x220>)
 800eea8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eeac:	2206      	movs	r2, #6
 800eeae:	f7f1 f98f 	bl	80001d0 <memchr>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	d03f      	beq.n	800ef36 <_vfiprintf_r+0x20a>
 800eeb6:	4b26      	ldr	r3, [pc, #152]	@ (800ef50 <_vfiprintf_r+0x224>)
 800eeb8:	bb1b      	cbnz	r3, 800ef02 <_vfiprintf_r+0x1d6>
 800eeba:	9b03      	ldr	r3, [sp, #12]
 800eebc:	3307      	adds	r3, #7
 800eebe:	f023 0307 	bic.w	r3, r3, #7
 800eec2:	3308      	adds	r3, #8
 800eec4:	9303      	str	r3, [sp, #12]
 800eec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eec8:	443b      	add	r3, r7
 800eeca:	9309      	str	r3, [sp, #36]	@ 0x24
 800eecc:	e76a      	b.n	800eda4 <_vfiprintf_r+0x78>
 800eece:	fb0c 3202 	mla	r2, ip, r2, r3
 800eed2:	460c      	mov	r4, r1
 800eed4:	2001      	movs	r0, #1
 800eed6:	e7a8      	b.n	800ee2a <_vfiprintf_r+0xfe>
 800eed8:	2300      	movs	r3, #0
 800eeda:	3401      	adds	r4, #1
 800eedc:	9305      	str	r3, [sp, #20]
 800eede:	4619      	mov	r1, r3
 800eee0:	f04f 0c0a 	mov.w	ip, #10
 800eee4:	4620      	mov	r0, r4
 800eee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeea:	3a30      	subs	r2, #48	@ 0x30
 800eeec:	2a09      	cmp	r2, #9
 800eeee:	d903      	bls.n	800eef8 <_vfiprintf_r+0x1cc>
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d0c6      	beq.n	800ee82 <_vfiprintf_r+0x156>
 800eef4:	9105      	str	r1, [sp, #20]
 800eef6:	e7c4      	b.n	800ee82 <_vfiprintf_r+0x156>
 800eef8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eefc:	4604      	mov	r4, r0
 800eefe:	2301      	movs	r3, #1
 800ef00:	e7f0      	b.n	800eee4 <_vfiprintf_r+0x1b8>
 800ef02:	ab03      	add	r3, sp, #12
 800ef04:	9300      	str	r3, [sp, #0]
 800ef06:	462a      	mov	r2, r5
 800ef08:	4b12      	ldr	r3, [pc, #72]	@ (800ef54 <_vfiprintf_r+0x228>)
 800ef0a:	a904      	add	r1, sp, #16
 800ef0c:	4630      	mov	r0, r6
 800ef0e:	f3af 8000 	nop.w
 800ef12:	4607      	mov	r7, r0
 800ef14:	1c78      	adds	r0, r7, #1
 800ef16:	d1d6      	bne.n	800eec6 <_vfiprintf_r+0x19a>
 800ef18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef1a:	07d9      	lsls	r1, r3, #31
 800ef1c:	d405      	bmi.n	800ef2a <_vfiprintf_r+0x1fe>
 800ef1e:	89ab      	ldrh	r3, [r5, #12]
 800ef20:	059a      	lsls	r2, r3, #22
 800ef22:	d402      	bmi.n	800ef2a <_vfiprintf_r+0x1fe>
 800ef24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef26:	f7ff fe7d 	bl	800ec24 <__retarget_lock_release_recursive>
 800ef2a:	89ab      	ldrh	r3, [r5, #12]
 800ef2c:	065b      	lsls	r3, r3, #25
 800ef2e:	f53f af1f 	bmi.w	800ed70 <_vfiprintf_r+0x44>
 800ef32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef34:	e71e      	b.n	800ed74 <_vfiprintf_r+0x48>
 800ef36:	ab03      	add	r3, sp, #12
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	462a      	mov	r2, r5
 800ef3c:	4b05      	ldr	r3, [pc, #20]	@ (800ef54 <_vfiprintf_r+0x228>)
 800ef3e:	a904      	add	r1, sp, #16
 800ef40:	4630      	mov	r0, r6
 800ef42:	f000 f879 	bl	800f038 <_printf_i>
 800ef46:	e7e4      	b.n	800ef12 <_vfiprintf_r+0x1e6>
 800ef48:	0800f9c8 	.word	0x0800f9c8
 800ef4c:	0800f9d2 	.word	0x0800f9d2
 800ef50:	00000000 	.word	0x00000000
 800ef54:	0800ed07 	.word	0x0800ed07
 800ef58:	0800f9ce 	.word	0x0800f9ce

0800ef5c <_printf_common>:
 800ef5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef60:	4616      	mov	r6, r2
 800ef62:	4698      	mov	r8, r3
 800ef64:	688a      	ldr	r2, [r1, #8]
 800ef66:	690b      	ldr	r3, [r1, #16]
 800ef68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	bfb8      	it	lt
 800ef70:	4613      	movlt	r3, r2
 800ef72:	6033      	str	r3, [r6, #0]
 800ef74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ef78:	4607      	mov	r7, r0
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	b10a      	cbz	r2, 800ef82 <_printf_common+0x26>
 800ef7e:	3301      	adds	r3, #1
 800ef80:	6033      	str	r3, [r6, #0]
 800ef82:	6823      	ldr	r3, [r4, #0]
 800ef84:	0699      	lsls	r1, r3, #26
 800ef86:	bf42      	ittt	mi
 800ef88:	6833      	ldrmi	r3, [r6, #0]
 800ef8a:	3302      	addmi	r3, #2
 800ef8c:	6033      	strmi	r3, [r6, #0]
 800ef8e:	6825      	ldr	r5, [r4, #0]
 800ef90:	f015 0506 	ands.w	r5, r5, #6
 800ef94:	d106      	bne.n	800efa4 <_printf_common+0x48>
 800ef96:	f104 0a19 	add.w	sl, r4, #25
 800ef9a:	68e3      	ldr	r3, [r4, #12]
 800ef9c:	6832      	ldr	r2, [r6, #0]
 800ef9e:	1a9b      	subs	r3, r3, r2
 800efa0:	42ab      	cmp	r3, r5
 800efa2:	dc26      	bgt.n	800eff2 <_printf_common+0x96>
 800efa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800efa8:	6822      	ldr	r2, [r4, #0]
 800efaa:	3b00      	subs	r3, #0
 800efac:	bf18      	it	ne
 800efae:	2301      	movne	r3, #1
 800efb0:	0692      	lsls	r2, r2, #26
 800efb2:	d42b      	bmi.n	800f00c <_printf_common+0xb0>
 800efb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800efb8:	4641      	mov	r1, r8
 800efba:	4638      	mov	r0, r7
 800efbc:	47c8      	blx	r9
 800efbe:	3001      	adds	r0, #1
 800efc0:	d01e      	beq.n	800f000 <_printf_common+0xa4>
 800efc2:	6823      	ldr	r3, [r4, #0]
 800efc4:	6922      	ldr	r2, [r4, #16]
 800efc6:	f003 0306 	and.w	r3, r3, #6
 800efca:	2b04      	cmp	r3, #4
 800efcc:	bf02      	ittt	eq
 800efce:	68e5      	ldreq	r5, [r4, #12]
 800efd0:	6833      	ldreq	r3, [r6, #0]
 800efd2:	1aed      	subeq	r5, r5, r3
 800efd4:	68a3      	ldr	r3, [r4, #8]
 800efd6:	bf0c      	ite	eq
 800efd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efdc:	2500      	movne	r5, #0
 800efde:	4293      	cmp	r3, r2
 800efe0:	bfc4      	itt	gt
 800efe2:	1a9b      	subgt	r3, r3, r2
 800efe4:	18ed      	addgt	r5, r5, r3
 800efe6:	2600      	movs	r6, #0
 800efe8:	341a      	adds	r4, #26
 800efea:	42b5      	cmp	r5, r6
 800efec:	d11a      	bne.n	800f024 <_printf_common+0xc8>
 800efee:	2000      	movs	r0, #0
 800eff0:	e008      	b.n	800f004 <_printf_common+0xa8>
 800eff2:	2301      	movs	r3, #1
 800eff4:	4652      	mov	r2, sl
 800eff6:	4641      	mov	r1, r8
 800eff8:	4638      	mov	r0, r7
 800effa:	47c8      	blx	r9
 800effc:	3001      	adds	r0, #1
 800effe:	d103      	bne.n	800f008 <_printf_common+0xac>
 800f000:	f04f 30ff 	mov.w	r0, #4294967295
 800f004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f008:	3501      	adds	r5, #1
 800f00a:	e7c6      	b.n	800ef9a <_printf_common+0x3e>
 800f00c:	18e1      	adds	r1, r4, r3
 800f00e:	1c5a      	adds	r2, r3, #1
 800f010:	2030      	movs	r0, #48	@ 0x30
 800f012:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f016:	4422      	add	r2, r4
 800f018:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f01c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f020:	3302      	adds	r3, #2
 800f022:	e7c7      	b.n	800efb4 <_printf_common+0x58>
 800f024:	2301      	movs	r3, #1
 800f026:	4622      	mov	r2, r4
 800f028:	4641      	mov	r1, r8
 800f02a:	4638      	mov	r0, r7
 800f02c:	47c8      	blx	r9
 800f02e:	3001      	adds	r0, #1
 800f030:	d0e6      	beq.n	800f000 <_printf_common+0xa4>
 800f032:	3601      	adds	r6, #1
 800f034:	e7d9      	b.n	800efea <_printf_common+0x8e>
	...

0800f038 <_printf_i>:
 800f038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f03c:	7e0f      	ldrb	r7, [r1, #24]
 800f03e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f040:	2f78      	cmp	r7, #120	@ 0x78
 800f042:	4691      	mov	r9, r2
 800f044:	4680      	mov	r8, r0
 800f046:	460c      	mov	r4, r1
 800f048:	469a      	mov	sl, r3
 800f04a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f04e:	d807      	bhi.n	800f060 <_printf_i+0x28>
 800f050:	2f62      	cmp	r7, #98	@ 0x62
 800f052:	d80a      	bhi.n	800f06a <_printf_i+0x32>
 800f054:	2f00      	cmp	r7, #0
 800f056:	f000 80d1 	beq.w	800f1fc <_printf_i+0x1c4>
 800f05a:	2f58      	cmp	r7, #88	@ 0x58
 800f05c:	f000 80b8 	beq.w	800f1d0 <_printf_i+0x198>
 800f060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f068:	e03a      	b.n	800f0e0 <_printf_i+0xa8>
 800f06a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f06e:	2b15      	cmp	r3, #21
 800f070:	d8f6      	bhi.n	800f060 <_printf_i+0x28>
 800f072:	a101      	add	r1, pc, #4	@ (adr r1, 800f078 <_printf_i+0x40>)
 800f074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f078:	0800f0d1 	.word	0x0800f0d1
 800f07c:	0800f0e5 	.word	0x0800f0e5
 800f080:	0800f061 	.word	0x0800f061
 800f084:	0800f061 	.word	0x0800f061
 800f088:	0800f061 	.word	0x0800f061
 800f08c:	0800f061 	.word	0x0800f061
 800f090:	0800f0e5 	.word	0x0800f0e5
 800f094:	0800f061 	.word	0x0800f061
 800f098:	0800f061 	.word	0x0800f061
 800f09c:	0800f061 	.word	0x0800f061
 800f0a0:	0800f061 	.word	0x0800f061
 800f0a4:	0800f1e3 	.word	0x0800f1e3
 800f0a8:	0800f10f 	.word	0x0800f10f
 800f0ac:	0800f19d 	.word	0x0800f19d
 800f0b0:	0800f061 	.word	0x0800f061
 800f0b4:	0800f061 	.word	0x0800f061
 800f0b8:	0800f205 	.word	0x0800f205
 800f0bc:	0800f061 	.word	0x0800f061
 800f0c0:	0800f10f 	.word	0x0800f10f
 800f0c4:	0800f061 	.word	0x0800f061
 800f0c8:	0800f061 	.word	0x0800f061
 800f0cc:	0800f1a5 	.word	0x0800f1a5
 800f0d0:	6833      	ldr	r3, [r6, #0]
 800f0d2:	1d1a      	adds	r2, r3, #4
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	6032      	str	r2, [r6, #0]
 800f0d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f0dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e09c      	b.n	800f21e <_printf_i+0x1e6>
 800f0e4:	6833      	ldr	r3, [r6, #0]
 800f0e6:	6820      	ldr	r0, [r4, #0]
 800f0e8:	1d19      	adds	r1, r3, #4
 800f0ea:	6031      	str	r1, [r6, #0]
 800f0ec:	0606      	lsls	r6, r0, #24
 800f0ee:	d501      	bpl.n	800f0f4 <_printf_i+0xbc>
 800f0f0:	681d      	ldr	r5, [r3, #0]
 800f0f2:	e003      	b.n	800f0fc <_printf_i+0xc4>
 800f0f4:	0645      	lsls	r5, r0, #25
 800f0f6:	d5fb      	bpl.n	800f0f0 <_printf_i+0xb8>
 800f0f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f0fc:	2d00      	cmp	r5, #0
 800f0fe:	da03      	bge.n	800f108 <_printf_i+0xd0>
 800f100:	232d      	movs	r3, #45	@ 0x2d
 800f102:	426d      	negs	r5, r5
 800f104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f108:	4858      	ldr	r0, [pc, #352]	@ (800f26c <_printf_i+0x234>)
 800f10a:	230a      	movs	r3, #10
 800f10c:	e011      	b.n	800f132 <_printf_i+0xfa>
 800f10e:	6821      	ldr	r1, [r4, #0]
 800f110:	6833      	ldr	r3, [r6, #0]
 800f112:	0608      	lsls	r0, r1, #24
 800f114:	f853 5b04 	ldr.w	r5, [r3], #4
 800f118:	d402      	bmi.n	800f120 <_printf_i+0xe8>
 800f11a:	0649      	lsls	r1, r1, #25
 800f11c:	bf48      	it	mi
 800f11e:	b2ad      	uxthmi	r5, r5
 800f120:	2f6f      	cmp	r7, #111	@ 0x6f
 800f122:	4852      	ldr	r0, [pc, #328]	@ (800f26c <_printf_i+0x234>)
 800f124:	6033      	str	r3, [r6, #0]
 800f126:	bf14      	ite	ne
 800f128:	230a      	movne	r3, #10
 800f12a:	2308      	moveq	r3, #8
 800f12c:	2100      	movs	r1, #0
 800f12e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f132:	6866      	ldr	r6, [r4, #4]
 800f134:	60a6      	str	r6, [r4, #8]
 800f136:	2e00      	cmp	r6, #0
 800f138:	db05      	blt.n	800f146 <_printf_i+0x10e>
 800f13a:	6821      	ldr	r1, [r4, #0]
 800f13c:	432e      	orrs	r6, r5
 800f13e:	f021 0104 	bic.w	r1, r1, #4
 800f142:	6021      	str	r1, [r4, #0]
 800f144:	d04b      	beq.n	800f1de <_printf_i+0x1a6>
 800f146:	4616      	mov	r6, r2
 800f148:	fbb5 f1f3 	udiv	r1, r5, r3
 800f14c:	fb03 5711 	mls	r7, r3, r1, r5
 800f150:	5dc7      	ldrb	r7, [r0, r7]
 800f152:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f156:	462f      	mov	r7, r5
 800f158:	42bb      	cmp	r3, r7
 800f15a:	460d      	mov	r5, r1
 800f15c:	d9f4      	bls.n	800f148 <_printf_i+0x110>
 800f15e:	2b08      	cmp	r3, #8
 800f160:	d10b      	bne.n	800f17a <_printf_i+0x142>
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	07df      	lsls	r7, r3, #31
 800f166:	d508      	bpl.n	800f17a <_printf_i+0x142>
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	6861      	ldr	r1, [r4, #4]
 800f16c:	4299      	cmp	r1, r3
 800f16e:	bfde      	ittt	le
 800f170:	2330      	movle	r3, #48	@ 0x30
 800f172:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f176:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f17a:	1b92      	subs	r2, r2, r6
 800f17c:	6122      	str	r2, [r4, #16]
 800f17e:	f8cd a000 	str.w	sl, [sp]
 800f182:	464b      	mov	r3, r9
 800f184:	aa03      	add	r2, sp, #12
 800f186:	4621      	mov	r1, r4
 800f188:	4640      	mov	r0, r8
 800f18a:	f7ff fee7 	bl	800ef5c <_printf_common>
 800f18e:	3001      	adds	r0, #1
 800f190:	d14a      	bne.n	800f228 <_printf_i+0x1f0>
 800f192:	f04f 30ff 	mov.w	r0, #4294967295
 800f196:	b004      	add	sp, #16
 800f198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f19c:	6823      	ldr	r3, [r4, #0]
 800f19e:	f043 0320 	orr.w	r3, r3, #32
 800f1a2:	6023      	str	r3, [r4, #0]
 800f1a4:	4832      	ldr	r0, [pc, #200]	@ (800f270 <_printf_i+0x238>)
 800f1a6:	2778      	movs	r7, #120	@ 0x78
 800f1a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f1ac:	6823      	ldr	r3, [r4, #0]
 800f1ae:	6831      	ldr	r1, [r6, #0]
 800f1b0:	061f      	lsls	r7, r3, #24
 800f1b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800f1b6:	d402      	bmi.n	800f1be <_printf_i+0x186>
 800f1b8:	065f      	lsls	r7, r3, #25
 800f1ba:	bf48      	it	mi
 800f1bc:	b2ad      	uxthmi	r5, r5
 800f1be:	6031      	str	r1, [r6, #0]
 800f1c0:	07d9      	lsls	r1, r3, #31
 800f1c2:	bf44      	itt	mi
 800f1c4:	f043 0320 	orrmi.w	r3, r3, #32
 800f1c8:	6023      	strmi	r3, [r4, #0]
 800f1ca:	b11d      	cbz	r5, 800f1d4 <_printf_i+0x19c>
 800f1cc:	2310      	movs	r3, #16
 800f1ce:	e7ad      	b.n	800f12c <_printf_i+0xf4>
 800f1d0:	4826      	ldr	r0, [pc, #152]	@ (800f26c <_printf_i+0x234>)
 800f1d2:	e7e9      	b.n	800f1a8 <_printf_i+0x170>
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	f023 0320 	bic.w	r3, r3, #32
 800f1da:	6023      	str	r3, [r4, #0]
 800f1dc:	e7f6      	b.n	800f1cc <_printf_i+0x194>
 800f1de:	4616      	mov	r6, r2
 800f1e0:	e7bd      	b.n	800f15e <_printf_i+0x126>
 800f1e2:	6833      	ldr	r3, [r6, #0]
 800f1e4:	6825      	ldr	r5, [r4, #0]
 800f1e6:	6961      	ldr	r1, [r4, #20]
 800f1e8:	1d18      	adds	r0, r3, #4
 800f1ea:	6030      	str	r0, [r6, #0]
 800f1ec:	062e      	lsls	r6, r5, #24
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	d501      	bpl.n	800f1f6 <_printf_i+0x1be>
 800f1f2:	6019      	str	r1, [r3, #0]
 800f1f4:	e002      	b.n	800f1fc <_printf_i+0x1c4>
 800f1f6:	0668      	lsls	r0, r5, #25
 800f1f8:	d5fb      	bpl.n	800f1f2 <_printf_i+0x1ba>
 800f1fa:	8019      	strh	r1, [r3, #0]
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	6123      	str	r3, [r4, #16]
 800f200:	4616      	mov	r6, r2
 800f202:	e7bc      	b.n	800f17e <_printf_i+0x146>
 800f204:	6833      	ldr	r3, [r6, #0]
 800f206:	1d1a      	adds	r2, r3, #4
 800f208:	6032      	str	r2, [r6, #0]
 800f20a:	681e      	ldr	r6, [r3, #0]
 800f20c:	6862      	ldr	r2, [r4, #4]
 800f20e:	2100      	movs	r1, #0
 800f210:	4630      	mov	r0, r6
 800f212:	f7f0 ffdd 	bl	80001d0 <memchr>
 800f216:	b108      	cbz	r0, 800f21c <_printf_i+0x1e4>
 800f218:	1b80      	subs	r0, r0, r6
 800f21a:	6060      	str	r0, [r4, #4]
 800f21c:	6863      	ldr	r3, [r4, #4]
 800f21e:	6123      	str	r3, [r4, #16]
 800f220:	2300      	movs	r3, #0
 800f222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f226:	e7aa      	b.n	800f17e <_printf_i+0x146>
 800f228:	6923      	ldr	r3, [r4, #16]
 800f22a:	4632      	mov	r2, r6
 800f22c:	4649      	mov	r1, r9
 800f22e:	4640      	mov	r0, r8
 800f230:	47d0      	blx	sl
 800f232:	3001      	adds	r0, #1
 800f234:	d0ad      	beq.n	800f192 <_printf_i+0x15a>
 800f236:	6823      	ldr	r3, [r4, #0]
 800f238:	079b      	lsls	r3, r3, #30
 800f23a:	d413      	bmi.n	800f264 <_printf_i+0x22c>
 800f23c:	68e0      	ldr	r0, [r4, #12]
 800f23e:	9b03      	ldr	r3, [sp, #12]
 800f240:	4298      	cmp	r0, r3
 800f242:	bfb8      	it	lt
 800f244:	4618      	movlt	r0, r3
 800f246:	e7a6      	b.n	800f196 <_printf_i+0x15e>
 800f248:	2301      	movs	r3, #1
 800f24a:	4632      	mov	r2, r6
 800f24c:	4649      	mov	r1, r9
 800f24e:	4640      	mov	r0, r8
 800f250:	47d0      	blx	sl
 800f252:	3001      	adds	r0, #1
 800f254:	d09d      	beq.n	800f192 <_printf_i+0x15a>
 800f256:	3501      	adds	r5, #1
 800f258:	68e3      	ldr	r3, [r4, #12]
 800f25a:	9903      	ldr	r1, [sp, #12]
 800f25c:	1a5b      	subs	r3, r3, r1
 800f25e:	42ab      	cmp	r3, r5
 800f260:	dcf2      	bgt.n	800f248 <_printf_i+0x210>
 800f262:	e7eb      	b.n	800f23c <_printf_i+0x204>
 800f264:	2500      	movs	r5, #0
 800f266:	f104 0619 	add.w	r6, r4, #25
 800f26a:	e7f5      	b.n	800f258 <_printf_i+0x220>
 800f26c:	0800f9d9 	.word	0x0800f9d9
 800f270:	0800f9ea 	.word	0x0800f9ea

0800f274 <__sflush_r>:
 800f274:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f27c:	0716      	lsls	r6, r2, #28
 800f27e:	4605      	mov	r5, r0
 800f280:	460c      	mov	r4, r1
 800f282:	d454      	bmi.n	800f32e <__sflush_r+0xba>
 800f284:	684b      	ldr	r3, [r1, #4]
 800f286:	2b00      	cmp	r3, #0
 800f288:	dc02      	bgt.n	800f290 <__sflush_r+0x1c>
 800f28a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	dd48      	ble.n	800f322 <__sflush_r+0xae>
 800f290:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f292:	2e00      	cmp	r6, #0
 800f294:	d045      	beq.n	800f322 <__sflush_r+0xae>
 800f296:	2300      	movs	r3, #0
 800f298:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f29c:	682f      	ldr	r7, [r5, #0]
 800f29e:	6a21      	ldr	r1, [r4, #32]
 800f2a0:	602b      	str	r3, [r5, #0]
 800f2a2:	d030      	beq.n	800f306 <__sflush_r+0x92>
 800f2a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f2a6:	89a3      	ldrh	r3, [r4, #12]
 800f2a8:	0759      	lsls	r1, r3, #29
 800f2aa:	d505      	bpl.n	800f2b8 <__sflush_r+0x44>
 800f2ac:	6863      	ldr	r3, [r4, #4]
 800f2ae:	1ad2      	subs	r2, r2, r3
 800f2b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f2b2:	b10b      	cbz	r3, 800f2b8 <__sflush_r+0x44>
 800f2b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f2b6:	1ad2      	subs	r2, r2, r3
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2bc:	6a21      	ldr	r1, [r4, #32]
 800f2be:	4628      	mov	r0, r5
 800f2c0:	47b0      	blx	r6
 800f2c2:	1c43      	adds	r3, r0, #1
 800f2c4:	89a3      	ldrh	r3, [r4, #12]
 800f2c6:	d106      	bne.n	800f2d6 <__sflush_r+0x62>
 800f2c8:	6829      	ldr	r1, [r5, #0]
 800f2ca:	291d      	cmp	r1, #29
 800f2cc:	d82b      	bhi.n	800f326 <__sflush_r+0xb2>
 800f2ce:	4a2a      	ldr	r2, [pc, #168]	@ (800f378 <__sflush_r+0x104>)
 800f2d0:	40ca      	lsrs	r2, r1
 800f2d2:	07d6      	lsls	r6, r2, #31
 800f2d4:	d527      	bpl.n	800f326 <__sflush_r+0xb2>
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	6062      	str	r2, [r4, #4]
 800f2da:	04d9      	lsls	r1, r3, #19
 800f2dc:	6922      	ldr	r2, [r4, #16]
 800f2de:	6022      	str	r2, [r4, #0]
 800f2e0:	d504      	bpl.n	800f2ec <__sflush_r+0x78>
 800f2e2:	1c42      	adds	r2, r0, #1
 800f2e4:	d101      	bne.n	800f2ea <__sflush_r+0x76>
 800f2e6:	682b      	ldr	r3, [r5, #0]
 800f2e8:	b903      	cbnz	r3, 800f2ec <__sflush_r+0x78>
 800f2ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800f2ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2ee:	602f      	str	r7, [r5, #0]
 800f2f0:	b1b9      	cbz	r1, 800f322 <__sflush_r+0xae>
 800f2f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2f6:	4299      	cmp	r1, r3
 800f2f8:	d002      	beq.n	800f300 <__sflush_r+0x8c>
 800f2fa:	4628      	mov	r0, r5
 800f2fc:	f7ff fca2 	bl	800ec44 <_free_r>
 800f300:	2300      	movs	r3, #0
 800f302:	6363      	str	r3, [r4, #52]	@ 0x34
 800f304:	e00d      	b.n	800f322 <__sflush_r+0xae>
 800f306:	2301      	movs	r3, #1
 800f308:	4628      	mov	r0, r5
 800f30a:	47b0      	blx	r6
 800f30c:	4602      	mov	r2, r0
 800f30e:	1c50      	adds	r0, r2, #1
 800f310:	d1c9      	bne.n	800f2a6 <__sflush_r+0x32>
 800f312:	682b      	ldr	r3, [r5, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d0c6      	beq.n	800f2a6 <__sflush_r+0x32>
 800f318:	2b1d      	cmp	r3, #29
 800f31a:	d001      	beq.n	800f320 <__sflush_r+0xac>
 800f31c:	2b16      	cmp	r3, #22
 800f31e:	d11e      	bne.n	800f35e <__sflush_r+0xea>
 800f320:	602f      	str	r7, [r5, #0]
 800f322:	2000      	movs	r0, #0
 800f324:	e022      	b.n	800f36c <__sflush_r+0xf8>
 800f326:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f32a:	b21b      	sxth	r3, r3
 800f32c:	e01b      	b.n	800f366 <__sflush_r+0xf2>
 800f32e:	690f      	ldr	r7, [r1, #16]
 800f330:	2f00      	cmp	r7, #0
 800f332:	d0f6      	beq.n	800f322 <__sflush_r+0xae>
 800f334:	0793      	lsls	r3, r2, #30
 800f336:	680e      	ldr	r6, [r1, #0]
 800f338:	bf08      	it	eq
 800f33a:	694b      	ldreq	r3, [r1, #20]
 800f33c:	600f      	str	r7, [r1, #0]
 800f33e:	bf18      	it	ne
 800f340:	2300      	movne	r3, #0
 800f342:	eba6 0807 	sub.w	r8, r6, r7
 800f346:	608b      	str	r3, [r1, #8]
 800f348:	f1b8 0f00 	cmp.w	r8, #0
 800f34c:	dde9      	ble.n	800f322 <__sflush_r+0xae>
 800f34e:	6a21      	ldr	r1, [r4, #32]
 800f350:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f352:	4643      	mov	r3, r8
 800f354:	463a      	mov	r2, r7
 800f356:	4628      	mov	r0, r5
 800f358:	47b0      	blx	r6
 800f35a:	2800      	cmp	r0, #0
 800f35c:	dc08      	bgt.n	800f370 <__sflush_r+0xfc>
 800f35e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f366:	81a3      	strh	r3, [r4, #12]
 800f368:	f04f 30ff 	mov.w	r0, #4294967295
 800f36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f370:	4407      	add	r7, r0
 800f372:	eba8 0800 	sub.w	r8, r8, r0
 800f376:	e7e7      	b.n	800f348 <__sflush_r+0xd4>
 800f378:	20400001 	.word	0x20400001

0800f37c <_fflush_r>:
 800f37c:	b538      	push	{r3, r4, r5, lr}
 800f37e:	690b      	ldr	r3, [r1, #16]
 800f380:	4605      	mov	r5, r0
 800f382:	460c      	mov	r4, r1
 800f384:	b913      	cbnz	r3, 800f38c <_fflush_r+0x10>
 800f386:	2500      	movs	r5, #0
 800f388:	4628      	mov	r0, r5
 800f38a:	bd38      	pop	{r3, r4, r5, pc}
 800f38c:	b118      	cbz	r0, 800f396 <_fflush_r+0x1a>
 800f38e:	6a03      	ldr	r3, [r0, #32]
 800f390:	b90b      	cbnz	r3, 800f396 <_fflush_r+0x1a>
 800f392:	f7ff f973 	bl	800e67c <__sinit>
 800f396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d0f3      	beq.n	800f386 <_fflush_r+0xa>
 800f39e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f3a0:	07d0      	lsls	r0, r2, #31
 800f3a2:	d404      	bmi.n	800f3ae <_fflush_r+0x32>
 800f3a4:	0599      	lsls	r1, r3, #22
 800f3a6:	d402      	bmi.n	800f3ae <_fflush_r+0x32>
 800f3a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3aa:	f7ff fc3a 	bl	800ec22 <__retarget_lock_acquire_recursive>
 800f3ae:	4628      	mov	r0, r5
 800f3b0:	4621      	mov	r1, r4
 800f3b2:	f7ff ff5f 	bl	800f274 <__sflush_r>
 800f3b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3b8:	07da      	lsls	r2, r3, #31
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	d4e4      	bmi.n	800f388 <_fflush_r+0xc>
 800f3be:	89a3      	ldrh	r3, [r4, #12]
 800f3c0:	059b      	lsls	r3, r3, #22
 800f3c2:	d4e1      	bmi.n	800f388 <_fflush_r+0xc>
 800f3c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3c6:	f7ff fc2d 	bl	800ec24 <__retarget_lock_release_recursive>
 800f3ca:	e7dd      	b.n	800f388 <_fflush_r+0xc>

0800f3cc <__swhatbuf_r>:
 800f3cc:	b570      	push	{r4, r5, r6, lr}
 800f3ce:	460c      	mov	r4, r1
 800f3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3d4:	2900      	cmp	r1, #0
 800f3d6:	b096      	sub	sp, #88	@ 0x58
 800f3d8:	4615      	mov	r5, r2
 800f3da:	461e      	mov	r6, r3
 800f3dc:	da0d      	bge.n	800f3fa <__swhatbuf_r+0x2e>
 800f3de:	89a3      	ldrh	r3, [r4, #12]
 800f3e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f3e4:	f04f 0100 	mov.w	r1, #0
 800f3e8:	bf14      	ite	ne
 800f3ea:	2340      	movne	r3, #64	@ 0x40
 800f3ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f3f0:	2000      	movs	r0, #0
 800f3f2:	6031      	str	r1, [r6, #0]
 800f3f4:	602b      	str	r3, [r5, #0]
 800f3f6:	b016      	add	sp, #88	@ 0x58
 800f3f8:	bd70      	pop	{r4, r5, r6, pc}
 800f3fa:	466a      	mov	r2, sp
 800f3fc:	f000 f87c 	bl	800f4f8 <_fstat_r>
 800f400:	2800      	cmp	r0, #0
 800f402:	dbec      	blt.n	800f3de <__swhatbuf_r+0x12>
 800f404:	9901      	ldr	r1, [sp, #4]
 800f406:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f40a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f40e:	4259      	negs	r1, r3
 800f410:	4159      	adcs	r1, r3
 800f412:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f416:	e7eb      	b.n	800f3f0 <__swhatbuf_r+0x24>

0800f418 <__smakebuf_r>:
 800f418:	898b      	ldrh	r3, [r1, #12]
 800f41a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f41c:	079d      	lsls	r5, r3, #30
 800f41e:	4606      	mov	r6, r0
 800f420:	460c      	mov	r4, r1
 800f422:	d507      	bpl.n	800f434 <__smakebuf_r+0x1c>
 800f424:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f428:	6023      	str	r3, [r4, #0]
 800f42a:	6123      	str	r3, [r4, #16]
 800f42c:	2301      	movs	r3, #1
 800f42e:	6163      	str	r3, [r4, #20]
 800f430:	b003      	add	sp, #12
 800f432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f434:	ab01      	add	r3, sp, #4
 800f436:	466a      	mov	r2, sp
 800f438:	f7ff ffc8 	bl	800f3cc <__swhatbuf_r>
 800f43c:	9f00      	ldr	r7, [sp, #0]
 800f43e:	4605      	mov	r5, r0
 800f440:	4639      	mov	r1, r7
 800f442:	4630      	mov	r0, r6
 800f444:	f7ff f802 	bl	800e44c <_malloc_r>
 800f448:	b948      	cbnz	r0, 800f45e <__smakebuf_r+0x46>
 800f44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f44e:	059a      	lsls	r2, r3, #22
 800f450:	d4ee      	bmi.n	800f430 <__smakebuf_r+0x18>
 800f452:	f023 0303 	bic.w	r3, r3, #3
 800f456:	f043 0302 	orr.w	r3, r3, #2
 800f45a:	81a3      	strh	r3, [r4, #12]
 800f45c:	e7e2      	b.n	800f424 <__smakebuf_r+0xc>
 800f45e:	89a3      	ldrh	r3, [r4, #12]
 800f460:	6020      	str	r0, [r4, #0]
 800f462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f466:	81a3      	strh	r3, [r4, #12]
 800f468:	9b01      	ldr	r3, [sp, #4]
 800f46a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f46e:	b15b      	cbz	r3, 800f488 <__smakebuf_r+0x70>
 800f470:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f474:	4630      	mov	r0, r6
 800f476:	f000 f851 	bl	800f51c <_isatty_r>
 800f47a:	b128      	cbz	r0, 800f488 <__smakebuf_r+0x70>
 800f47c:	89a3      	ldrh	r3, [r4, #12]
 800f47e:	f023 0303 	bic.w	r3, r3, #3
 800f482:	f043 0301 	orr.w	r3, r3, #1
 800f486:	81a3      	strh	r3, [r4, #12]
 800f488:	89a3      	ldrh	r3, [r4, #12]
 800f48a:	431d      	orrs	r5, r3
 800f48c:	81a5      	strh	r5, [r4, #12]
 800f48e:	e7cf      	b.n	800f430 <__smakebuf_r+0x18>

0800f490 <_putc_r>:
 800f490:	b570      	push	{r4, r5, r6, lr}
 800f492:	460d      	mov	r5, r1
 800f494:	4614      	mov	r4, r2
 800f496:	4606      	mov	r6, r0
 800f498:	b118      	cbz	r0, 800f4a2 <_putc_r+0x12>
 800f49a:	6a03      	ldr	r3, [r0, #32]
 800f49c:	b90b      	cbnz	r3, 800f4a2 <_putc_r+0x12>
 800f49e:	f7ff f8ed 	bl	800e67c <__sinit>
 800f4a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4a4:	07d8      	lsls	r0, r3, #31
 800f4a6:	d405      	bmi.n	800f4b4 <_putc_r+0x24>
 800f4a8:	89a3      	ldrh	r3, [r4, #12]
 800f4aa:	0599      	lsls	r1, r3, #22
 800f4ac:	d402      	bmi.n	800f4b4 <_putc_r+0x24>
 800f4ae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4b0:	f7ff fbb7 	bl	800ec22 <__retarget_lock_acquire_recursive>
 800f4b4:	68a3      	ldr	r3, [r4, #8]
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	60a3      	str	r3, [r4, #8]
 800f4bc:	da05      	bge.n	800f4ca <_putc_r+0x3a>
 800f4be:	69a2      	ldr	r2, [r4, #24]
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	db12      	blt.n	800f4ea <_putc_r+0x5a>
 800f4c4:	b2eb      	uxtb	r3, r5
 800f4c6:	2b0a      	cmp	r3, #10
 800f4c8:	d00f      	beq.n	800f4ea <_putc_r+0x5a>
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	1c5a      	adds	r2, r3, #1
 800f4ce:	6022      	str	r2, [r4, #0]
 800f4d0:	701d      	strb	r5, [r3, #0]
 800f4d2:	b2ed      	uxtb	r5, r5
 800f4d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4d6:	07da      	lsls	r2, r3, #31
 800f4d8:	d405      	bmi.n	800f4e6 <_putc_r+0x56>
 800f4da:	89a3      	ldrh	r3, [r4, #12]
 800f4dc:	059b      	lsls	r3, r3, #22
 800f4de:	d402      	bmi.n	800f4e6 <_putc_r+0x56>
 800f4e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4e2:	f7ff fb9f 	bl	800ec24 <__retarget_lock_release_recursive>
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	bd70      	pop	{r4, r5, r6, pc}
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	4622      	mov	r2, r4
 800f4ee:	4630      	mov	r0, r6
 800f4f0:	f7ff fa69 	bl	800e9c6 <__swbuf_r>
 800f4f4:	4605      	mov	r5, r0
 800f4f6:	e7ed      	b.n	800f4d4 <_putc_r+0x44>

0800f4f8 <_fstat_r>:
 800f4f8:	b538      	push	{r3, r4, r5, lr}
 800f4fa:	4d07      	ldr	r5, [pc, #28]	@ (800f518 <_fstat_r+0x20>)
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	4604      	mov	r4, r0
 800f500:	4608      	mov	r0, r1
 800f502:	4611      	mov	r1, r2
 800f504:	602b      	str	r3, [r5, #0]
 800f506:	f7f6 fc78 	bl	8005dfa <_fstat>
 800f50a:	1c43      	adds	r3, r0, #1
 800f50c:	d102      	bne.n	800f514 <_fstat_r+0x1c>
 800f50e:	682b      	ldr	r3, [r5, #0]
 800f510:	b103      	cbz	r3, 800f514 <_fstat_r+0x1c>
 800f512:	6023      	str	r3, [r4, #0]
 800f514:	bd38      	pop	{r3, r4, r5, pc}
 800f516:	bf00      	nop
 800f518:	20000af8 	.word	0x20000af8

0800f51c <_isatty_r>:
 800f51c:	b538      	push	{r3, r4, r5, lr}
 800f51e:	4d06      	ldr	r5, [pc, #24]	@ (800f538 <_isatty_r+0x1c>)
 800f520:	2300      	movs	r3, #0
 800f522:	4604      	mov	r4, r0
 800f524:	4608      	mov	r0, r1
 800f526:	602b      	str	r3, [r5, #0]
 800f528:	f7f6 fc77 	bl	8005e1a <_isatty>
 800f52c:	1c43      	adds	r3, r0, #1
 800f52e:	d102      	bne.n	800f536 <_isatty_r+0x1a>
 800f530:	682b      	ldr	r3, [r5, #0]
 800f532:	b103      	cbz	r3, 800f536 <_isatty_r+0x1a>
 800f534:	6023      	str	r3, [r4, #0]
 800f536:	bd38      	pop	{r3, r4, r5, pc}
 800f538:	20000af8 	.word	0x20000af8

0800f53c <_init>:
 800f53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f53e:	bf00      	nop
 800f540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f542:	bc08      	pop	{r3}
 800f544:	469e      	mov	lr, r3
 800f546:	4770      	bx	lr

0800f548 <_fini>:
 800f548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f54a:	bf00      	nop
 800f54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f54e:	bc08      	pop	{r3}
 800f550:	469e      	mov	lr, r3
 800f552:	4770      	bx	lr
