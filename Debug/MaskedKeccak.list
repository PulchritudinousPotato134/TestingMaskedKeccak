
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd68  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  0800bef8  0800bef8  0000cef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1a0  0800c1a0  0000e088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c1a0  0800c1a0  0000d1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1a8  0800c1a8  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1a8  0800c1a8  0000d1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c1ac  0800c1ac  0000d1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800c1b0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b237  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004662  00000000  00000000  000292ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0002d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111a  00000000  00000000  0002ef98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000662d  00000000  00000000  000300b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e875  00000000  00000000  000366df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1dfc  00000000  00000000  00054f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126d50  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006634  00000000  00000000  00126d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bee0 	.word	0x0800bee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800bee0 	.word	0x0800bee0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <theta>:
    x = z;
  }
}

void theta(uint64_t* state)
{
 800059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a0:	b0a0      	sub	sp, #128	@ 0x80
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Theta */

  uint64_t C[5] = {0, 0, 0, 0, 0};
 80005a6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80005aa:	2328      	movs	r3, #40	@ 0x28
 80005ac:	461a      	mov	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f00a ffb4 	bl	800b51c <memset>
  uint64_t D[5] = {0, 0, 0, 0, 0};
 80005b4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80005b8:	2328      	movs	r3, #40	@ 0x28
 80005ba:	461a      	mov	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f00a ffad 	bl	800b51c <memset>

  int x, y;
  for (x = 0; x < 5; ++x) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80005c6:	e043      	b.n	8000650 <theta+0xb4>
    C[x] = state[x] ^ state[5 + x] ^ state[10 + x] ^ state[15 + x] ^ state[20 + x];
 80005c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ca:	00da      	lsls	r2, r3, #3
 80005cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ce:	4413      	add	r3, r2
 80005d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80005d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005d6:	3305      	adds	r3, #5
 80005d8:	00da      	lsls	r2, r3, #3
 80005da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005dc:	4413      	add	r3, r2
 80005de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e2:	ea80 0402 	eor.w	r4, r0, r2
 80005e6:	ea81 0503 	eor.w	r5, r1, r3
 80005ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ec:	330a      	adds	r3, #10
 80005ee:	00da      	lsls	r2, r3, #3
 80005f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f2:	4413      	add	r3, r2
 80005f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f8:	ea84 0a02 	eor.w	sl, r4, r2
 80005fc:	ea85 0b03 	eor.w	fp, r5, r3
 8000600:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000602:	330f      	adds	r3, #15
 8000604:	00da      	lsls	r2, r3, #3
 8000606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000608:	4413      	add	r3, r2
 800060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800060e:	ea8a 0102 	eor.w	r1, sl, r2
 8000612:	61b9      	str	r1, [r7, #24]
 8000614:	ea8b 0303 	eor.w	r3, fp, r3
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800061c:	3314      	adds	r3, #20
 800061e:	00da      	lsls	r2, r3, #3
 8000620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000622:	4413      	add	r3, r2
 8000624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000628:	69b9      	ldr	r1, [r7, #24]
 800062a:	4051      	eors	r1, r2
 800062c:	6139      	str	r1, [r7, #16]
 800062e:	69f9      	ldr	r1, [r7, #28]
 8000630:	404b      	eors	r3, r1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	3360      	adds	r3, #96	@ 0x60
 800063a:	f107 0220 	add.w	r2, r7, #32
 800063e:	4413      	add	r3, r2
 8000640:	3b30      	subs	r3, #48	@ 0x30
 8000642:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000646:	e9c3 1200 	strd	r1, r2, [r3]
  for (x = 0; x < 5; ++x) {
 800064a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800064c:	3301      	adds	r3, #1
 800064e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000652:	2b04      	cmp	r3, #4
 8000654:	ddb8      	ble.n	80005c8 <theta+0x2c>
  }

  for (x = 0; x < 5; ++x) {
 8000656:	2300      	movs	r3, #0
 8000658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800065a:	e072      	b.n	8000742 <theta+0x1a6>
    /* in order to avoid negative mod values,
      we've replaced "(x - 1) % 5" with "(x + 4) % 5" */
    D[x] = C[(x + 4) % 5] ^ ROTL64(C[(x + 1) % 5], 1);
 800065c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800065e:	1d19      	adds	r1, r3, #4
 8000660:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <theta+0x1b8>)
 8000662:	fb83 2301 	smull	r2, r3, r3, r1
 8000666:	105a      	asrs	r2, r3, #1
 8000668:	17cb      	asrs	r3, r1, #31
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	00d3      	lsls	r3, r2, #3
 8000676:	3360      	adds	r3, #96	@ 0x60
 8000678:	f107 0220 	add.w	r2, r7, #32
 800067c:	4413      	add	r3, r2
 800067e:	3b30      	subs	r3, #48	@ 0x30
 8000680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000686:	1c5c      	adds	r4, r3, #1
 8000688:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <theta+0x1b8>)
 800068a:	fb83 2304 	smull	r2, r3, r3, r4
 800068e:	105a      	asrs	r2, r3, #1
 8000690:	17e3      	asrs	r3, r4, #31
 8000692:	1ad2      	subs	r2, r2, r3
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	1ae2      	subs	r2, r4, r3
 800069c:	00d3      	lsls	r3, r2, #3
 800069e:	3360      	adds	r3, #96	@ 0x60
 80006a0:	f107 0220 	add.w	r2, r7, #32
 80006a4:	4413      	add	r3, r2
 80006a6:	3b30      	subs	r3, #48	@ 0x30
 80006a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ac:	0fd5      	lsrs	r5, r2, #31
 80006ae:	005c      	lsls	r4, r3, #1
 80006b0:	ea45 0904 	orr.w	r9, r5, r4
 80006b4:	0fdc      	lsrs	r4, r3, #31
 80006b6:	0053      	lsls	r3, r2, #1
 80006b8:	ea44 0803 	orr.w	r8, r4, r3
 80006bc:	ea80 0308 	eor.w	r3, r0, r8
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	ea81 0309 	eor.w	r3, r1, r9
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	3360      	adds	r3, #96	@ 0x60
 80006ce:	f107 0220 	add.w	r2, r7, #32
 80006d2:	4413      	add	r3, r2
 80006d4:	3b58      	subs	r3, #88	@ 0x58
 80006d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80006da:	e9c3 1200 	strd	r1, r2, [r3]

    for (y = 0; y < 5; ++y) {
 80006de:	2300      	movs	r3, #0
 80006e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80006e2:	e028      	b.n	8000736 <theta+0x19a>
      state[y * 5 + x] = state[y * 5 + x] ^ D[x];
 80006e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	441a      	add	r2, r3
 80006ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ee:	4413      	add	r3, r2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f4:	4413      	add	r3, r2
 80006f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	3360      	adds	r3, #96	@ 0x60
 8000700:	f107 0220 	add.w	r2, r7, #32
 8000704:	4413      	add	r3, r2
 8000706:	3b58      	subs	r3, #88	@ 0x58
 8000708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070c:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 800070e:	462c      	mov	r4, r5
 8000710:	00a4      	lsls	r4, r4, #2
 8000712:	4425      	add	r5, r4
 8000714:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8000716:	442c      	add	r4, r5
 8000718:	00e4      	lsls	r4, r4, #3
 800071a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 800071c:	442c      	add	r4, r5
 800071e:	ea80 0502 	eor.w	r5, r0, r2
 8000722:	603d      	str	r5, [r7, #0]
 8000724:	404b      	eors	r3, r1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800072c:	e9c4 2300 	strd	r2, r3, [r4]
    for (y = 0; y < 5; ++y) {
 8000730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000732:	3301      	adds	r3, #1
 8000734:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000738:	2b04      	cmp	r3, #4
 800073a:	ddd3      	ble.n	80006e4 <theta+0x148>
  for (x = 0; x < 5; ++x) {
 800073c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800073e:	3301      	adds	r3, #1
 8000740:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000744:	2b04      	cmp	r3, #4
 8000746:	dd89      	ble.n	800065c <theta+0xc0>
    }
  }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3780      	adds	r7, #128	@ 0x80
 800074e:	46bd      	mov	sp, r7
 8000750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000754:	66666667 	.word	0x66666667

08000758 <rho>:

void rho(uint64_t* state)
{
 8000758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
  /* Rho */
  int x, y;
  for (y = 0; y < 5; ++y) {
 8000762:	2100      	movs	r1, #0
 8000764:	6139      	str	r1, [r7, #16]
 8000766:	e062      	b.n	800082e <rho+0xd6>
    for (x = 0; x < 5; ++x) {
 8000768:	2100      	movs	r1, #0
 800076a:	6179      	str	r1, [r7, #20]
 800076c:	e059      	b.n	8000822 <rho+0xca>
      state[y * 5 + x] = ROTL64(state[y * 5 + x], rx[y * 5 + x]);
 800076e:	6938      	ldr	r0, [r7, #16]
 8000770:	4601      	mov	r1, r0
 8000772:	0089      	lsls	r1, r1, #2
 8000774:	4408      	add	r0, r1
 8000776:	6979      	ldr	r1, [r7, #20]
 8000778:	4401      	add	r1, r0
 800077a:	00c9      	lsls	r1, r1, #3
 800077c:	68f8      	ldr	r0, [r7, #12]
 800077e:	4401      	add	r1, r0
 8000780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000784:	693e      	ldr	r6, [r7, #16]
 8000786:	4634      	mov	r4, r6
 8000788:	4626      	mov	r6, r4
 800078a:	00b6      	lsls	r6, r6, #2
 800078c:	eb06 0c04 	add.w	ip, r6, r4
 8000790:	697e      	ldr	r6, [r7, #20]
 8000792:	4466      	add	r6, ip
 8000794:	4c2a      	ldr	r4, [pc, #168]	@ (8000840 <rho+0xe8>)
 8000796:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800079a:	693c      	ldr	r4, [r7, #16]
 800079c:	46a4      	mov	ip, r4
 800079e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007a2:	44a4      	add	ip, r4
 80007a4:	697c      	ldr	r4, [r7, #20]
 80007a6:	44a4      	add	ip, r4
 80007a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80007ac:	68fc      	ldr	r4, [r7, #12]
 80007ae:	eb04 0a0c 	add.w	sl, r4, ip
 80007b2:	f1a6 0e20 	sub.w	lr, r6, #32
 80007b6:	f1c6 0c20 	rsb	ip, r6, #32
 80007ba:	fa01 f406 	lsl.w	r4, r1, r6
 80007be:	607c      	str	r4, [r7, #4]
 80007c0:	fa00 fe0e 	lsl.w	lr, r0, lr
 80007c4:	687c      	ldr	r4, [r7, #4]
 80007c6:	ea44 040e 	orr.w	r4, r4, lr
 80007ca:	607c      	str	r4, [r7, #4]
 80007cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007d0:	687c      	ldr	r4, [r7, #4]
 80007d2:	ea44 040c 	orr.w	r4, r4, ip
 80007d6:	607c      	str	r4, [r7, #4]
 80007d8:	fa00 f406 	lsl.w	r4, r0, r6
 80007dc:	603c      	str	r4, [r7, #0]
 80007de:	4276      	negs	r6, r6
 80007e0:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 80007e4:	f1c6 0e20 	rsb	lr, r6, #32
 80007e8:	f1a6 0c20 	sub.w	ip, r6, #32
 80007ec:	fa20 f206 	lsr.w	r2, r0, r6
 80007f0:	fa01 fe0e 	lsl.w	lr, r1, lr
 80007f4:	ea42 020e 	orr.w	r2, r2, lr
 80007f8:	fa21 fc0c 	lsr.w	ip, r1, ip
 80007fc:	ea42 020c 	orr.w	r2, r2, ip
 8000800:	fa21 f306 	lsr.w	r3, r1, r6
 8000804:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000808:	4621      	mov	r1, r4
 800080a:	ea41 0802 	orr.w	r8, r1, r2
 800080e:	4629      	mov	r1, r5
 8000810:	ea41 0903 	orr.w	r9, r1, r3
 8000814:	4642      	mov	r2, r8
 8000816:	464b      	mov	r3, r9
 8000818:	e9ca 2300 	strd	r2, r3, [sl]
    for (x = 0; x < 5; ++x) {
 800081c:	6979      	ldr	r1, [r7, #20]
 800081e:	3101      	adds	r1, #1
 8000820:	6179      	str	r1, [r7, #20]
 8000822:	6979      	ldr	r1, [r7, #20]
 8000824:	2904      	cmp	r1, #4
 8000826:	dda2      	ble.n	800076e <rho+0x16>
  for (y = 0; y < 5; ++y) {
 8000828:	6939      	ldr	r1, [r7, #16]
 800082a:	3101      	adds	r1, #1
 800082c:	6139      	str	r1, [r7, #16]
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	2904      	cmp	r1, #4
 8000832:	dd99      	ble.n	8000768 <rho+0x10>
    }
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000840:	0800c014 	.word	0x0800c014

08000844 <pi>:

void pi(uint64_t* state)
{
 8000844:	b480      	push	{r7}
 8000846:	b0b9      	sub	sp, #228	@ 0xe4
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Pi */
  uint64_t B[25];

  int x, y;
  for (y = 0; y < 5; ++y) {
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000852:	e02c      	b.n	80008ae <pi+0x6a>
    for (x = 0; x < 5; ++x) {
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800085a:	e01f      	b.n	800089c <pi+0x58>
      B[y * 5 + x] = state[5 * y + x];
 800085c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	441a      	add	r2, r3
 8000866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	18d0      	adds	r0, r2, r3
 8000872:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	441a      	add	r2, r3
 800087c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000880:	18d1      	adds	r1, r2, r3
 8000882:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000886:	00c9      	lsls	r1, r1, #3
 8000888:	31e0      	adds	r1, #224	@ 0xe0
 800088a:	4439      	add	r1, r7
 800088c:	39d8      	subs	r1, #216	@ 0xd8
 800088e:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 8000892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000896:	3301      	adds	r3, #1
 8000898:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800089c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	dddb      	ble.n	800085c <pi+0x18>
  for (y = 0; y < 5; ++y) {
 80008a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80008a8:	3301      	adds	r3, #1
 80008aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	ddce      	ble.n	8000854 <pi+0x10>
    }
  }
  int u, v;
  for (y = 0; y < 5; ++y) {
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008bc:	e04f      	b.n	800095e <pi+0x11a>
    for (x = 0; x < 5; ++x) {
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80008c4:	e042      	b.n	800094c <pi+0x108>
      u = (0 * x + 1 * y) % 5;
 80008c6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <pi+0x130>)
 80008cc:	fb83 1302 	smull	r1, r3, r3, r2
 80008d0:	1059      	asrs	r1, r3, #1
 80008d2:	17d3      	asrs	r3, r2, #31
 80008d4:	1ac9      	subs	r1, r1, r3
 80008d6:	460b      	mov	r3, r1
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	440b      	add	r3, r1
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      v = (2 * x + 3 * y) % 5;
 80008e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008e6:	0059      	lsls	r1, r3, #1
 80008e8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	18ca      	adds	r2, r1, r3
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <pi+0x130>)
 80008f6:	fb83 1302 	smull	r1, r3, r3, r2
 80008fa:	1059      	asrs	r1, r3, #1
 80008fc:	17d3      	asrs	r3, r2, #31
 80008fe:	1ac9      	subs	r1, r1, r3
 8000900:	460b      	mov	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

      state[v * 5 + u] = B[5 * y + x];
 800090c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	441a      	add	r2, r3
 8000916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800091a:	18d0      	adds	r0, r2, r3
 800091c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000920:	4613      	mov	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	441a      	add	r2, r3
 8000926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800092a:	4413      	add	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	18d1      	adds	r1, r2, r3
 8000932:	00c3      	lsls	r3, r0, #3
 8000934:	33e0      	adds	r3, #224	@ 0xe0
 8000936:	443b      	add	r3, r7
 8000938:	3bd8      	subs	r3, #216	@ 0xd8
 800093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800093e:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 8000942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000946:	3301      	adds	r3, #1
 8000948:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800094c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000950:	2b04      	cmp	r3, #4
 8000952:	ddb8      	ble.n	80008c6 <pi+0x82>
  for (y = 0; y < 5; ++y) {
 8000954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000958:	3301      	adds	r3, #1
 800095a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800095e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000962:	2b04      	cmp	r3, #4
 8000964:	ddab      	ble.n	80008be <pi+0x7a>
    }
  }
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	37e4      	adds	r7, #228	@ 0xe4
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	66666667 	.word	0x66666667

08000978 <chi>:

void chi(uint64_t* state)
{
 8000978:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800097c:	b08e      	sub	sp, #56	@ 0x38
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  /* Chi */
  uint64_t C[5];

  int x, y;
  for (y = 0; y < 5; ++y) {
 8000982:	2100      	movs	r1, #0
 8000984:	6339      	str	r1, [r7, #48]	@ 0x30
 8000986:	e072      	b.n	8000a6e <chi+0xf6>
    for (x = 0; x < 5; ++x) {
 8000988:	2100      	movs	r1, #0
 800098a:	6379      	str	r1, [r7, #52]	@ 0x34
 800098c:	e04e      	b.n	8000a2c <chi+0xb4>
      C[x] = state[y * 5 + x] ^ ((~state[y * 5 + ((x + 1) % 5)]) & state[y * 5 + ((x + 2) % 5)]);
 800098e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000990:	4601      	mov	r1, r0
 8000992:	0089      	lsls	r1, r1, #2
 8000994:	4408      	add	r0, r1
 8000996:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000998:	4401      	add	r1, r0
 800099a:	00c9      	lsls	r1, r1, #3
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	4401      	add	r1, r0
 80009a0:	e9d1 ab00 	ldrd	sl, fp, [r1]
 80009a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009a6:	4601      	mov	r1, r0
 80009a8:	0089      	lsls	r1, r1, #2
 80009aa:	eb01 0c00 	add.w	ip, r1, r0
 80009ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009b0:	1c4e      	adds	r6, r1, #1
 80009b2:	4934      	ldr	r1, [pc, #208]	@ (8000a84 <chi+0x10c>)
 80009b4:	fb81 0106 	smull	r0, r1, r1, r6
 80009b8:	1048      	asrs	r0, r1, #1
 80009ba:	17f1      	asrs	r1, r6, #31
 80009bc:	1a40      	subs	r0, r0, r1
 80009be:	4601      	mov	r1, r0
 80009c0:	0089      	lsls	r1, r1, #2
 80009c2:	4401      	add	r1, r0
 80009c4:	1a70      	subs	r0, r6, r1
 80009c6:	eb0c 0100 	add.w	r1, ip, r0
 80009ca:	00c9      	lsls	r1, r1, #3
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	4401      	add	r1, r0
 80009d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80009d4:	43c2      	mvns	r2, r0
 80009d6:	43cb      	mvns	r3, r1
 80009d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009da:	4601      	mov	r1, r0
 80009dc:	0089      	lsls	r1, r1, #2
 80009de:	eb01 0c00 	add.w	ip, r1, r0
 80009e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009e4:	1c8e      	adds	r6, r1, #2
 80009e6:	4927      	ldr	r1, [pc, #156]	@ (8000a84 <chi+0x10c>)
 80009e8:	fb81 0106 	smull	r0, r1, r1, r6
 80009ec:	1048      	asrs	r0, r1, #1
 80009ee:	17f1      	asrs	r1, r6, #31
 80009f0:	1a40      	subs	r0, r0, r1
 80009f2:	4601      	mov	r1, r0
 80009f4:	0089      	lsls	r1, r1, #2
 80009f6:	4401      	add	r1, r0
 80009f8:	1a70      	subs	r0, r6, r1
 80009fa:	eb0c 0100 	add.w	r1, ip, r0
 80009fe:	00c9      	lsls	r1, r1, #3
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	4401      	add	r1, r0
 8000a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a08:	ea02 0400 	and.w	r4, r2, r0
 8000a0c:	ea03 0501 	and.w	r5, r3, r1
 8000a10:	ea8a 0804 	eor.w	r8, sl, r4
 8000a14:	ea8b 0905 	eor.w	r9, fp, r5
 8000a18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a1a:	00c9      	lsls	r1, r1, #3
 8000a1c:	3138      	adds	r1, #56	@ 0x38
 8000a1e:	4439      	add	r1, r7
 8000a20:	3930      	subs	r1, #48	@ 0x30
 8000a22:	e9c1 8900 	strd	r8, r9, [r1]
    for (x = 0; x < 5; ++x) {
 8000a26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a28:	3101      	adds	r1, #1
 8000a2a:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a2e:	2904      	cmp	r1, #4
 8000a30:	ddad      	ble.n	800098e <chi+0x16>
    }

    for (x = 0; x < 5; ++x) {
 8000a32:	2100      	movs	r1, #0
 8000a34:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a36:	e014      	b.n	8000a62 <chi+0xea>
      state[y * 5 + x] = C[x];
 8000a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	0089      	lsls	r1, r1, #2
 8000a3e:	4408      	add	r0, r1
 8000a40:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a42:	4401      	add	r1, r0
 8000a44:	00c9      	lsls	r1, r1, #3
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	1846      	adds	r6, r0, r1
 8000a4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a4c:	00c9      	lsls	r1, r1, #3
 8000a4e:	3138      	adds	r1, #56	@ 0x38
 8000a50:	4439      	add	r1, r7
 8000a52:	3930      	subs	r1, #48	@ 0x30
 8000a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a58:	e9c6 0100 	strd	r0, r1, [r6]
    for (x = 0; x < 5; ++x) {
 8000a5c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a5e:	3101      	adds	r1, #1
 8000a60:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a64:	2904      	cmp	r1, #4
 8000a66:	dde7      	ble.n	8000a38 <chi+0xc0>
  for (y = 0; y < 5; ++y) {
 8000a68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000a6a:	3101      	adds	r1, #1
 8000a6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8000a6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000a70:	2904      	cmp	r1, #4
 8000a72:	dd89      	ble.n	8000988 <chi+0x10>
    }
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3738      	adds	r7, #56	@ 0x38
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	66666667 	.word	0x66666667

08000a88 <iota>:

void iota(uint64_t* state, int i)
{
 8000a88:	b4b0      	push	{r4, r5, r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  /* Iota */
  /* XXX: truncate RC[i] if w < 64 */
  state[0] = state[0] ^ RC[i];
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	e9d1 4500 	ldrd	r4, r5, [r1]
 8000a98:	4808      	ldr	r0, [pc, #32]	@ (8000abc <iota+0x34>)
 8000a9a:	6839      	ldr	r1, [r7, #0]
 8000a9c:	00c9      	lsls	r1, r1, #3
 8000a9e:	4401      	add	r1, r0
 8000aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000aa4:	ea84 0200 	eor.w	r2, r4, r0
 8000aa8:	ea85 0301 	eor.w	r3, r5, r1
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bcb0      	pop	{r4, r5, r7}
 8000aba:	4770      	bx	lr
 8000abc:	0800c078 	.word	0x0800c078

08000ac0 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <_write+0x28>)
 8000ad8:	f006 f8f1 	bl	8006cbe <HAL_UART_Transmit>
    return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001a8 	.word	0x200001a8

08000aec <fill_masked_state>:
    }
    char newline = '\n';
    HAL_UART_Transmit(&huart2, (uint8_t*)&newline, 1, HAL_MAX_DELAY);
}

void fill_masked_state(masked_uint64_t dst[5][5], const uint64_t ref[25]) {
 8000aec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000af0:	b08a      	sub	sp, #40	@ 0x28
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000afc:	e062      	b.n	8000bc4 <fill_masked_state+0xd8>
        for (int x = 0; x < 5; ++x) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	e059      	b.n	8000bb8 <fill_masked_state+0xcc>
            uint64_t val = ref[y * 5 + x];
 8000b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	441a      	add	r2, r3
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	4413      	add	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
            uint64_t t = val;
 8000b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b22:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (int i = 1; i < MASKING_N; ++i) {
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e030      	b.n	8000b8e <fill_masked_state+0xa2>
                dst[x][y].share[i] = get_random64();
 8000b2c:	f000 ff3a 	bl	80019a4 <get_random64>
 8000b30:	4601      	mov	r1, r0
 8000b32:	6a3a      	ldr	r2, [r7, #32]
 8000b34:	4613      	mov	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4413      	add	r3, r2
 8000b3a:	015b      	lsls	r3, r3, #5
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	441a      	add	r2, r3
 8000b42:	17cb      	asrs	r3, r1, #31
 8000b44:	4688      	mov	r8, r1
 8000b46:	4699      	mov	r9, r3
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	0099      	lsls	r1, r3, #2
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	440b      	add	r3, r1
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	4413      	add	r3, r2
 8000b54:	e9c3 8900 	strd	r8, r9, [r3]
                t ^= dst[x][y].share[i];
 8000b58:	6a3a      	ldr	r2, [r7, #32]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	015b      	lsls	r3, r3, #5
 8000b62:	461a      	mov	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	441a      	add	r2, r3
 8000b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6a:	0099      	lsls	r1, r3, #2
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	440b      	add	r3, r1
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4413      	add	r3, r2
 8000b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b7c:	ea80 0402 	eor.w	r4, r0, r2
 8000b80:	ea81 0503 	eor.w	r5, r1, r3
 8000b84:	e9c7 4506 	strd	r4, r5, [r7, #24]
            for (int i = 1; i < MASKING_N; ++i) {
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	ddcb      	ble.n	8000b2c <fill_masked_state+0x40>
            }
            dst[x][y].share[0] = t;
 8000b94:	6a3a      	ldr	r2, [r7, #32]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	015b      	lsls	r3, r3, #5
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	441a      	add	r2, r3
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	015b      	lsls	r3, r3, #5
 8000ba8:	18d1      	adds	r1, r2, r3
 8000baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000bae:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	dda2      	ble.n	8000b04 <fill_masked_state+0x18>
    for (int y = 0; y < 5; ++y) {
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	dd99      	ble.n	8000afe <fill_masked_state+0x12>
        }
    }
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000bd6 <recombine_masked_state>:

void recombine_masked_state(uint64_t dst[25], const masked_uint64_t src[5][5]) {
 8000bd6:	b4b0      	push	{r4, r5, r7}
 8000bd8:	b089      	sub	sp, #36	@ 0x24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y)
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	e03f      	b.n	8000c66 <recombine_masked_state+0x90>
        for (int x = 0; x < 5; ++x) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	e036      	b.n	8000c5a <recombine_masked_state+0x84>
            uint64_t val = 0;
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e01a      	b.n	8000c34 <recombine_masked_state+0x5e>
                val ^= src[x][y].share[i];
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	015b      	lsls	r3, r3, #5
 8000c08:	461a      	mov	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	441a      	add	r2, r3
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	0099      	lsls	r1, r3, #2
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	440b      	add	r3, r1
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4413      	add	r3, r2
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c22:	ea80 0402 	eor.w	r4, r0, r2
 8000c26:	ea81 0503 	eor.w	r5, r1, r3
 8000c2a:	e9c7 4504 	strd	r4, r5, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	dde1      	ble.n	8000bfe <recombine_masked_state+0x28>
            dst[y * 5 + x] = val;
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	441a      	add	r2, r3
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4413      	add	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c50:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	3301      	adds	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	ddc5      	ble.n	8000bec <recombine_masked_state+0x16>
    for (int y = 0; y < 5; ++y)
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	3301      	adds	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	ddbc      	ble.n	8000be6 <recombine_masked_state+0x10>
        }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bcb0      	pop	{r4, r5, r7}
 8000c76:	4770      	bx	lr

08000c78 <print_diff>:

void print_diff(const char *label, const uint64_t *ref, const uint64_t *masked) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	@ 0x38
 8000c7c:	af04      	add	r7, sp, #16
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
    int fail = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
 8000c8c:	e04d      	b.n	8000d2a <print_diff+0xb2>
        if (ref[i] != masked[i]) {
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	4413      	add	r3, r2
 8000c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	bf08      	it	eq
 8000caa:	4290      	cmpeq	r0, r2
 8000cac:	d03a      	beq.n	8000d24 <print_diff+0xac>
            uint32_t rh = ref[i] >> 32, rl = ref[i] & 0xFFFFFFFF;
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	000a      	movs	r2, r1
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
            uint32_t mh = masked[i] >> 32, ml = masked[i] & 0xFFFFFFFF;
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce6:	f04f 0200 	mov.w	r2, #0
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	000a      	movs	r2, r1
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d02:	4613      	mov	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
            printf("Mismatch %s[%d]: ref = %08lX%08lX, masked = %08lX%08lX\n",
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	6a3a      	ldr	r2, [r7, #32]
 8000d16:	68f9      	ldr	r1, [r7, #12]
 8000d18:	480b      	ldr	r0, [pc, #44]	@ (8000d48 <print_diff+0xd0>)
 8000d1a:	f00a fa03 	bl	800b124 <iprintf>
                   label, i,
                   (unsigned long)rh, (unsigned long)rl,
                   (unsigned long)mh, (unsigned long)ml);
            fail++;
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	3301      	adds	r3, #1
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8000d24:	6a3b      	ldr	r3, [r7, #32]
 8000d26:	3301      	adds	r3, #1
 8000d28:	623b      	str	r3, [r7, #32]
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	2b18      	cmp	r3, #24
 8000d2e:	ddae      	ble.n	8000c8e <print_diff+0x16>
        }
    }
    if (fail == 0) {
 8000d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d103      	bne.n	8000d3e <print_diff+0xc6>
        printf("SUCCESS: %s output matched reference.\n", label);
 8000d36:	68f9      	ldr	r1, [r7, #12]
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <print_diff+0xd4>)
 8000d3a:	f00a f9f3 	bl	800b124 <iprintf>
    }
}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	@ 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800bf08 	.word	0x0800bf08
 8000d4c:	0800bf40 	.word	0x0800bf40

08000d50 <test_masked_vs_reference_step_by_step>:

void test_masked_vs_reference_step_by_step(void) {
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	f5ad 5da9 	sub.w	sp, sp, #5408	@ 0x1520
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
    // === 1. Initial state setup ===
    uint64_t ref_state[25];
    for (int i = 0; i < 25; i++)
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 8000d60:	f105 0504 	add.w	r5, r5, #4
 8000d64:	602c      	str	r4, [r5, #0]
 8000d66:	e02f      	b.n	8000dc8 <test_masked_vs_reference_step_by_step+0x78>
        ref_state[i] = i * 0x0F0F0F0F0F0F0F0FULL;
 8000d68:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000d6c:	f104 0404 	add.w	r4, r4, #4
 8000d70:	6824      	ldr	r4, [r4, #0]
 8000d72:	17e5      	asrs	r5, r4, #31
 8000d74:	4620      	mov	r0, r4
 8000d76:	4629      	mov	r1, r5
 8000d78:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 8000d7c:	fb04 f501 	mul.w	r5, r4, r1
 8000d80:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 8000d84:	fb00 f404 	mul.w	r4, r0, r4
 8000d88:	442c      	add	r4, r5
 8000d8a:	f04f 350f 	mov.w	r5, #252645135	@ 0xf0f0f0f
 8000d8e:	fba0 2305 	umull	r2, r3, r0, r5
 8000d92:	441c      	add	r4, r3
 8000d94:	4623      	mov	r3, r4
 8000d96:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000d9a:	f104 0404 	add.w	r4, r4, #4
 8000d9e:	6824      	ldr	r4, [r4, #0]
 8000da0:	00e4      	lsls	r4, r4, #3
 8000da2:	f504 54a9 	add.w	r4, r4, #5408	@ 0x1520
 8000da6:	f104 0408 	add.w	r4, r4, #8
 8000daa:	443c      	add	r4, r7
 8000dac:	3cd8      	subs	r4, #216	@ 0xd8
 8000dae:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < 25; i++)
 8000db2:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000db6:	f104 0404 	add.w	r4, r4, #4
 8000dba:	6824      	ldr	r4, [r4, #0]
 8000dbc:	3401      	adds	r4, #1
 8000dbe:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 8000dc2:	f105 0504 	add.w	r5, r5, #4
 8000dc6:	602c      	str	r4, [r5, #0]
 8000dc8:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000dcc:	f104 0404 	add.w	r4, r4, #4
 8000dd0:	6824      	ldr	r4, [r4, #0]
 8000dd2:	2c18      	cmp	r4, #24
 8000dd4:	ddc8      	ble.n	8000d68 <test_masked_vs_reference_step_by_step+0x18>

    masked_uint64_t masked_state[5][5];
    fill_masked_state(masked_state, ref_state);
 8000dd6:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 8000dda:	f102 0210 	add.w	r2, r2, #16
 8000dde:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000de2:	f103 0310 	add.w	r3, r3, #16
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe7f 	bl	8000aec <fill_masked_state>

    uint64_t tmp_ref[25], tmp_masked[25];

    // === 2. THETA ===
    memcpy(tmp_ref, ref_state, sizeof(ref_state));
 8000dee:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000df2:	f103 0308 	add.w	r3, r3, #8
 8000df6:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8000e00:	f103 0310 	add.w	r3, r3, #16
 8000e04:	22c8      	movs	r2, #200	@ 0xc8
 8000e06:	4619      	mov	r1, r3
 8000e08:	f00a fc13 	bl	800b632 <memcpy>
    theta(tmp_ref);
 8000e0c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000e10:	f103 0308 	add.w	r3, r3, #8
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fbc1 	bl	800059c <theta>

    masked_theta(masked_state);
 8000e1a:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000e1e:	f103 0310 	add.w	r3, r3, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fde8 	bl	80019f8 <masked_theta>
    recombine_masked_state(tmp_masked, masked_state);
 8000e28:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8000e2c:	f102 0210 	add.w	r2, r2, #16
 8000e30:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fecd 	bl	8000bd6 <recombine_masked_state>
    print_diff("THETA", tmp_ref, tmp_masked);
 8000e3c:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8000e40:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000e44:	f103 0308 	add.w	r3, r3, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4885      	ldr	r0, [pc, #532]	@ (8001060 <test_masked_vs_reference_step_by_step+0x310>)
 8000e4c:	f7ff ff14 	bl	8000c78 <print_diff>

    // === 3. RHO ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked)); // set ref = masked out
 8000e50:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000e54:	f103 0308 	add.w	r3, r3, #8
 8000e58:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8000e5c:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000e60:	f103 0308 	add.w	r3, r3, #8
 8000e64:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	23c8      	movs	r3, #200	@ 0xc8
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f00a fbdf 	bl	800b632 <memcpy>
    rho(tmp_ref);
 8000e74:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000e78:	f103 0308 	add.w	r3, r3, #8
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc6b 	bl	8000758 <rho>

    masked_rho(masked_state);
 8000e82:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000e86:	f103 0310 	add.w	r3, r3, #16
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 ff4e 	bl	8001d2c <masked_rho>
    recombine_masked_state(tmp_masked, masked_state);
 8000e90:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8000e94:	f102 0210 	add.w	r2, r2, #16
 8000e98:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fe99 	bl	8000bd6 <recombine_masked_state>
    print_diff("RHO", tmp_ref, tmp_masked);
 8000ea4:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8000ea8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000eac:	f103 0308 	add.w	r3, r3, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	486c      	ldr	r0, [pc, #432]	@ (8001064 <test_masked_vs_reference_step_by_step+0x314>)
 8000eb4:	f7ff fee0 	bl	8000c78 <print_diff>

    // === 4. PI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8000eb8:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000ebc:	f103 0308 	add.w	r3, r3, #8
 8000ec0:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8000ec4:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000ec8:	f103 0308 	add.w	r3, r3, #8
 8000ecc:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	23c8      	movs	r3, #200	@ 0xc8
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f00a fbab 	bl	800b632 <memcpy>
    pi(tmp_ref);
 8000edc:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000ee0:	f103 0308 	add.w	r3, r3, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fcad 	bl	8000844 <pi>

    masked_pi(masked_state);
 8000eea:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000eee:	f103 0310 	add.w	r3, r3, #16
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 ff74 	bl	8001de0 <masked_pi>
    recombine_masked_state(tmp_masked, masked_state);
 8000ef8:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8000efc:	f102 0210 	add.w	r2, r2, #16
 8000f00:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fe65 	bl	8000bd6 <recombine_masked_state>
    print_diff("PI", tmp_ref, tmp_masked);
 8000f0c:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8000f10:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000f14:	f103 0308 	add.w	r3, r3, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4853      	ldr	r0, [pc, #332]	@ (8001068 <test_masked_vs_reference_step_by_step+0x318>)
 8000f1c:	f7ff feac 	bl	8000c78 <print_diff>

    int round_idx = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8000f26:	f102 0218 	add.w	r2, r2, #24
 8000f2a:	6013      	str	r3, [r2, #0]
    // === 5. CHI ===
    // === 5. CHI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8000f2c:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000f30:	f103 0308 	add.w	r3, r3, #8
 8000f34:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8000f38:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000f3c:	f103 0308 	add.w	r3, r3, #8
 8000f40:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	23c8      	movs	r3, #200	@ 0xc8
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f00a fb71 	bl	800b632 <memcpy>
    chi(tmp_ref);
 8000f50:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000f54:	f103 0308 	add.w	r3, r3, #8
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fd0d 	bl	8000978 <chi>

    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e033      	b.n	8000fd0 <test_masked_vs_reference_step_by_step+0x280>
        for (int x = 0; x < 5; ++x)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8000f6e:	f102 021c 	add.w	r2, r2, #28
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e01e      	b.n	8000fb4 <test_masked_vs_reference_step_by_step+0x264>
            fill_random_matrix(r_chi[x][y]);
 8000f76:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000f80:	f103 031c 	add.w	r3, r3, #28
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	460b      	mov	r3, r1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f507 51a9 	add.w	r1, r7, #5408	@ 0x1520
 8000f90:	6809      	ldr	r1, [r1, #0]
 8000f92:	440b      	add	r3, r1
 8000f94:	01db      	lsls	r3, r3, #7
 8000f96:	4413      	add	r3, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 f928 	bl	80021ee <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 8000f9e:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000fa2:	f103 031c 	add.w	r3, r3, #28
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8000fae:	f102 021c 	add.w	r2, r2, #28
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000fb8:	f103 031c 	add.w	r3, r3, #28
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	ddd9      	ble.n	8000f76 <test_masked_vs_reference_step_by_step+0x226>
    for (int y = 0; y < 5; ++y)
 8000fc2:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	ddc6      	ble.n	8000f68 <test_masked_vs_reference_step_by_step+0x218>

    masked_uint64_t chi_out[5][5];
    masked_chi(chi_out, masked_state, r_chi);
 8000fda:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 8000fde:	3a08      	subs	r2, #8
 8000fe0:	f507 5189 	add.w	r1, r7, #4384	@ 0x1120
 8000fe4:	f101 0110 	add.w	r1, r1, #16
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	3b08      	subs	r3, #8
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f001 f81c 	bl	800202c <masked_chi>

    // === 6. IOTA ===
    // Apply IOTA to both the reference and the masked CHI result
    iota(tmp_ref, round_idx);
 8000ff4:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000ff8:	f103 0308 	add.w	r3, r3, #8
 8000ffc:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8001000:	f102 0218 	add.w	r2, r2, #24
 8001004:	6811      	ldr	r1, [r2, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fd3e 	bl	8000a88 <iota>
    masked_iota(chi_out, RC[round_idx]);
 800100c:	4a17      	ldr	r2, [pc, #92]	@ (800106c <test_masked_vs_reference_step_by_step+0x31c>)
 800100e:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8001012:	f103 0318 	add.w	r3, r3, #24
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f107 0108 	add.w	r1, r7, #8
 8001024:	3908      	subs	r1, #8
 8001026:	4608      	mov	r0, r1
 8001028:	f001 f884 	bl	8002134 <masked_iota>

    // Recombine the masked state AFTER both steps
    recombine_masked_state(tmp_masked, chi_out);
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	3b08      	subs	r3, #8
 8001032:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8001036:	4619      	mov	r1, r3
 8001038:	4610      	mov	r0, r2
 800103a:	f7ff fdcc 	bl	8000bd6 <recombine_masked_state>

    // Compare both sides now that they're at the same stage
    print_diff("IOTA", tmp_ref, tmp_masked);
 800103e:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8001042:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001046:	f103 0308 	add.w	r3, r3, #8
 800104a:	4619      	mov	r1, r3
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <test_masked_vs_reference_step_by_step+0x320>)
 800104e:	f7ff fe13 	bl	8000c78 <print_diff>



}
 8001052:	bf00      	nop
 8001054:	f507 57a9 	add.w	r7, r7, #5408	@ 0x1520
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bdb0      	pop	{r4, r5, r7, pc}
 800105e:	bf00      	nop
 8001060:	0800bf68 	.word	0x0800bf68
 8001064:	0800bf70 	.word	0x0800bf70
 8001068:	0800bf74 	.word	0x0800bf74
 800106c:	0800c078 	.word	0x0800c078
 8001070:	0800bf78 	.word	0x0800bf78

08001074 <masked_round>:
static void masked_round(masked_uint64_t S[5][5],
                         int r,
                         uint64_t Rchi[5][5][MASKING_N][MASKING_N])
{
 8001074:	b5b0      	push	{r4, r5, r7, lr}
 8001076:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 800107a:	af00      	add	r7, sp, #0
 800107c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001080:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8001084:	6018      	str	r0, [r3, #0]
 8001086:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800108a:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 800108e:	6019      	str	r1, [r3, #0]
 8001090:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001094:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 8001098:	601a      	str	r2, [r3, #0]
    masked_theta(S);
 800109a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800109e:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	f000 fca8 	bl	80019f8 <masked_theta>
    masked_rho  (S);
 80010a8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80010ac:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	f000 fe3b 	bl	8001d2c <masked_rho>
    masked_pi   (S);
 80010b6:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80010ba:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	f000 fe8e 	bl	8001de0 <masked_pi>
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
      for (int y = 0; y < 5; ++y)
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 80010ca:	e020      	b.n	800110e <masked_round+0x9a>
          for (int x = 0; x < 5; ++x)
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 80010d2:	e013      	b.n	80010fc <masked_round+0x88>
              fill_random_matrix(r_chi[x][y]);
 80010d4:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 80010d8:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	@ 0xfb8
 80010dc:	4613      	mov	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	4413      	add	r3, r2
 80010e2:	f8d7 2fbc 	ldr.w	r2, [r7, #4028]	@ 0xfbc
 80010e6:	4413      	add	r3, r2
 80010e8:	01db      	lsls	r3, r3, #7
 80010ea:	440b      	add	r3, r1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 f87e 	bl	80021ee <fill_random_matrix>
          for (int x = 0; x < 5; ++x)
 80010f2:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 80010f6:	3301      	adds	r3, #1
 80010f8:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 80010fc:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 8001100:	2b04      	cmp	r3, #4
 8001102:	dde7      	ble.n	80010d4 <masked_round+0x60>
      for (int y = 0; y < 5; ++y)
 8001104:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8001108:	3301      	adds	r3, #1
 800110a:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 800110e:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8001112:	2b04      	cmp	r3, #4
 8001114:	ddda      	ble.n	80010cc <masked_round+0x58>

      masked_uint64_t chi_out[5][5];
      masked_chi(chi_out, S, r_chi);
 8001116:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 800111a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800111e:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8001122:	f107 0010 	add.w	r0, r7, #16
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	f000 ff80 	bl	800202c <masked_chi>
      masked_iota (chi_out, RC[r]);
 800112c:	4a2a      	ldr	r2, [pc, #168]	@ (80011d8 <masked_round+0x164>)
 800112e:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001132:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4413      	add	r3, r2
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	f107 0110 	add.w	r1, r7, #16
 8001144:	4608      	mov	r0, r1
 8001146:	f000 fff5 	bl	8002134 <masked_iota>

      for (int y = 0; y < 5; ++y)
 800114a:	2300      	movs	r3, #0
 800114c:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8001150:	e038      	b.n	80011c4 <masked_round+0x150>
          for (int x = 0; x < 5; ++x)
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 8001158:	e02b      	b.n	80011b2 <masked_round+0x13e>
              S[x][y] = chi_out[x][y];
 800115a:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	015b      	lsls	r3, r3, #5
 8001166:	461a      	mov	r2, r3
 8001168:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800116c:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	441a      	add	r2, r3
 8001174:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8001178:	015b      	lsls	r3, r3, #5
 800117a:	18d0      	adds	r0, r2, r3
 800117c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001180:	f5a3 617b 	sub.w	r1, r3, #4016	@ 0xfb0
 8001184:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	@ 0xfb4
 8001192:	4413      	add	r3, r2
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	440b      	add	r3, r1
 8001198:	4604      	mov	r4, r0
 800119a:	461d      	mov	r5, r3
 800119c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          for (int x = 0; x < 5; ++x)
 80011a8:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 80011ac:	3301      	adds	r3, #1
 80011ae:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 80011b2:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	ddcf      	ble.n	800115a <masked_round+0xe6>
      for (int y = 0; y < 5; ++y)
 80011ba:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 80011be:	3301      	adds	r3, #1
 80011c0:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 80011c4:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	ddc2      	ble.n	8001152 <masked_round+0xde>
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bdb0      	pop	{r4, r5, r7, pc}
 80011d8:	0800c078 	.word	0x0800c078

080011dc <reference_round>:

static void reference_round(uint64_t *A, int r)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
    theta(A);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff f9d8 	bl	800059c <theta>
    rho  (A);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fab3 	bl	8000758 <rho>
    pi   (A);
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff fb26 	bl	8000844 <pi>
    chi  (A);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fbbd 	bl	8000978 <chi>
    iota (A, r);
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff fc41 	bl	8000a88 <iota>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <test_full_keccak_rounds>:


void test_full_keccak_rounds(void)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	f5ad 5d8a 	sub.w	sp, sp, #4416	@ 0x1140
 8001216:	b086      	sub	sp, #24
 8001218:	af04      	add	r7, sp, #16
    /* --- 1. fresh deterministic state -------------------------------- */
    uint64_t ref[25];
    for (int i=0;i<25;i++)
 800121a:	2400      	movs	r4, #0
 800121c:	f507 558a 	add.w	r5, r7, #4416	@ 0x1140
 8001220:	f105 0504 	add.w	r5, r5, #4
 8001224:	602c      	str	r4, [r5, #0]
 8001226:	e030      	b.n	800128a <test_full_keccak_rounds+0x7a>
        ref[i] = 0x1111111111111111ULL * (i+1);   /* any pattern is fine */
 8001228:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 800122c:	f104 0404 	add.w	r4, r4, #4
 8001230:	6824      	ldr	r4, [r4, #0]
 8001232:	3401      	adds	r4, #1
 8001234:	17e5      	asrs	r5, r4, #31
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f04f 3411 	mov.w	r4, #286331153	@ 0x11111111
 800123e:	fb04 f501 	mul.w	r5, r4, r1
 8001242:	f04f 3411 	mov.w	r4, #286331153	@ 0x11111111
 8001246:	fb00 f404 	mul.w	r4, r0, r4
 800124a:	442c      	add	r4, r5
 800124c:	f04f 3511 	mov.w	r5, #286331153	@ 0x11111111
 8001250:	fba0 2305 	umull	r2, r3, r0, r5
 8001254:	441c      	add	r4, r3
 8001256:	4623      	mov	r3, r4
 8001258:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 800125c:	f104 0404 	add.w	r4, r4, #4
 8001260:	6824      	ldr	r4, [r4, #0]
 8001262:	00e4      	lsls	r4, r4, #3
 8001264:	f504 548a 	add.w	r4, r4, #4416	@ 0x1140
 8001268:	f104 0408 	add.w	r4, r4, #8
 800126c:	443c      	add	r4, r7
 800126e:	3ce0      	subs	r4, #224	@ 0xe0
 8001270:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i=0;i<25;i++)
 8001274:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 8001278:	f104 0404 	add.w	r4, r4, #4
 800127c:	6824      	ldr	r4, [r4, #0]
 800127e:	3401      	adds	r4, #1
 8001280:	f507 558a 	add.w	r5, r7, #4416	@ 0x1140
 8001284:	f105 0504 	add.w	r5, r5, #4
 8001288:	602c      	str	r4, [r5, #0]
 800128a:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 800128e:	f104 0404 	add.w	r4, r4, #4
 8001292:	6824      	ldr	r4, [r4, #0]
 8001294:	2c18      	cmp	r4, #24
 8001296:	ddc7      	ble.n	8001228 <test_full_keccak_rounds+0x18>

    masked_uint64_t mstate[5][5];
    fill_masked_state(mstate, ref);
 8001298:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 800129c:	f102 0208 	add.w	r2, r2, #8
 80012a0:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fc20 	bl	8000aec <fill_masked_state>

    /* --- 2. run every round ------------------------------------------ */
    for (int r = 0; r < 24; ++r) {
 80012ac:	2300      	movs	r3, #0
 80012ae:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e0e6      	b.n	8001484 <test_full_keccak_rounds+0x274>

        /* randomness for χ – new every round, every lane --------------- */
        uint64_t Rchi[5][5][MASKING_N][MASKING_N];
        for (int y = 0; y < 5; ++y)
 80012b6:	2300      	movs	r3, #0
 80012b8:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80012bc:	f102 021c 	add.w	r2, r2, #28
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e038      	b.n	8001336 <test_full_keccak_rounds+0x126>
            for (int x = 0; x < 5; ++x)
 80012c4:	2300      	movs	r3, #0
 80012c6:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80012ca:	f102 0218 	add.w	r2, r2, #24
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	e01f      	b.n	8001312 <test_full_keccak_rounds+0x102>
                fill_random_matrix(Rchi[x][y]);
 80012d2:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80012d6:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80012da:	f103 0318 	add.w	r3, r3, #24
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80012ea:	f102 021c 	add.w	r2, r2, #28
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	01db      	lsls	r3, r3, #7
 80012f4:	440b      	add	r3, r1
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 ff79 	bl	80021ee <fill_random_matrix>
            for (int x = 0; x < 5; ++x)
 80012fc:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001300:	f103 0318 	add.w	r3, r3, #24
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 800130c:	f102 0218 	add.w	r2, r2, #24
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001316:	f103 0318 	add.w	r3, r3, #24
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b04      	cmp	r3, #4
 800131e:	ddd8      	ble.n	80012d2 <test_full_keccak_rounds+0xc2>
        for (int y = 0; y < 5; ++y)
 8001320:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001324:	f103 031c 	add.w	r3, r3, #28
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001330:	f102 021c 	add.w	r2, r2, #28
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800133a:	f103 031c 	add.w	r3, r3, #28
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b04      	cmp	r3, #4
 8001342:	ddbf      	ble.n	80012c4 <test_full_keccak_rounds+0xb4>

        reference_round(ref, r);
 8001344:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001348:	f103 0308 	add.w	r3, r3, #8
 800134c:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8001350:	6811      	ldr	r1, [r2, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff42 	bl	80011dc <reference_round>
        masked_round(mstate, r, Rchi);
 8001358:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 800135c:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8001360:	f507 518a 	add.w	r1, r7, #4416	@ 0x1140
 8001364:	6809      	ldr	r1, [r1, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe84 	bl	8001074 <masked_round>

        uint64_t recon[25];
        recombine_masked_state(recon, mstate);
 800136c:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	3b08      	subs	r3, #8
 8001376:	4611      	mov	r1, r2
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fc2c 	bl	8000bd6 <recombine_masked_state>

        /* --- 3. compare lane by lane --------------------------------- */
        int fail = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001384:	f102 0214 	add.w	r2, r2, #20
 8001388:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < 25; ++i) {
 800138a:	2300      	movs	r3, #0
 800138c:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001390:	f102 0210 	add.w	r2, r2, #16
 8001394:	6013      	str	r3, [r2, #0]
 8001396:	e059      	b.n	800144c <test_full_keccak_rounds+0x23c>
            if (recon[i] != ref[i]) {
 8001398:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800139c:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 80013a0:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80013a4:	f103 0310 	add.w	r3, r3, #16
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b2:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80013b6:	f103 0310 	add.w	r3, r3, #16
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 80013c2:	f103 0308 	add.w	r3, r3, #8
 80013c6:	443b      	add	r3, r7
 80013c8:	3be0      	subs	r3, #224	@ 0xe0
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	4299      	cmp	r1, r3
 80013d0:	bf08      	it	eq
 80013d2:	4290      	cmpeq	r0, r2
 80013d4:	d02f      	beq.n	8001436 <test_full_keccak_rounds+0x226>
                printf("Round %2d lane %2d : ref=%016llX  mask=%016llX\n",
                       r, i,
                       (unsigned long long)ref[i],
 80013d6:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80013da:	f103 0310 	add.w	r3, r3, #16
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 80013e6:	f103 0308 	add.w	r3, r3, #8
 80013ea:	443b      	add	r3, r7
 80013ec:	3be0      	subs	r3, #224	@ 0xe0
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (unsigned long long)recon[i]);
 80013f2:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80013f6:	f5a1 70a4 	sub.w	r0, r1, #328	@ 0x148
 80013fa:	f507 5189 	add.w	r1, r7, #4384	@ 0x1120
 80013fe:	f101 0110 	add.w	r1, r1, #16
 8001402:	6809      	ldr	r1, [r1, #0]
 8001404:	00c9      	lsls	r1, r1, #3
 8001406:	4401      	add	r1, r0
 8001408:	e9d1 0100 	ldrd	r0, r1, [r1]
                printf("Round %2d lane %2d : ref=%016llX  mask=%016llX\n",
 800140c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001410:	e9cd 2300 	strd	r2, r3, [sp]
 8001414:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001418:	f103 0310 	add.w	r3, r3, #16
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8001422:	6819      	ldr	r1, [r3, #0]
 8001424:	481e      	ldr	r0, [pc, #120]	@ (80014a0 <test_full_keccak_rounds+0x290>)
 8001426:	f009 fe7d 	bl	800b124 <iprintf>
                fail = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001430:	f102 0214 	add.w	r2, r2, #20
 8001434:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < 25; ++i) {
 8001436:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800143a:	f103 0310 	add.w	r3, r3, #16
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001446:	f102 0210 	add.w	r2, r2, #16
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001450:	f103 0310 	add.w	r3, r3, #16
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b18      	cmp	r3, #24
 8001458:	dd9e      	ble.n	8001398 <test_full_keccak_rounds+0x188>
            }
        }
        if (fail) {
 800145a:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800145e:	f103 0314 	add.w	r3, r3, #20
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <test_full_keccak_rounds+0x266>
            printf("✗ round %d FAILED – stop early\n\n", r);
 8001468:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800146c:	6819      	ldr	r1, [r3, #0]
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <test_full_keccak_rounds+0x294>)
 8001470:	f009 fe58 	bl	800b124 <iprintf>
 8001474:	e00f      	b.n	8001496 <test_full_keccak_rounds+0x286>
    for (int r = 0; r < 24; ++r) {
 8001476:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3301      	adds	r3, #1
 800147e:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b17      	cmp	r3, #23
 800148c:	f77f af13 	ble.w	80012b6 <test_full_keccak_rounds+0xa6>
            return;
        }
    }

    printf("✓ all 24 masked rounds match reference Keccak-F[1600]\n");
 8001490:	4805      	ldr	r0, [pc, #20]	@ (80014a8 <test_full_keccak_rounds+0x298>)
 8001492:	f009 feaf 	bl	800b1f4 <puts>
}
 8001496:	f507 578a 	add.w	r7, r7, #4416	@ 0x1140
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bdb0      	pop	{r4, r5, r7, pc}
 80014a0:	0800bf80 	.word	0x0800bf80
 80014a4:	0800bfb0 	.word	0x0800bfb0
 80014a8:	0800bfd8 	.word	0x0800bfd8

080014ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b2:	f001 fa5b 	bl	800296c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b6:	f000 f835 	bl	8001524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ba:	f000 f96f 	bl	800179c <MX_GPIO_Init>
  MX_I2C1_Init();
 80014be:	f000 f89b 	bl	80015f8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80014c2:	f000 f8c7 	bl	8001654 <MX_I2S3_Init>
  MX_SPI1_Init();
 80014c6:	f000 f909 	bl	80016dc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80014ca:	f009 f9a1 	bl	800a810 <MX_USB_HOST_Init>
  MX_RNG_Init();
 80014ce:	f000 f8f1 	bl	80016b4 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80014d2:	f000 f939 	bl	8001748 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <main+0x6c>)
 80014dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014de:	4a0e      	ldr	r2, [pc, #56]	@ (8001518 <main+0x6c>)
 80014e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014e4:	6353      	str	r3, [r2, #52]	@ 0x34
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <main+0x6c>)
 80014e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 80014f2:	480a      	ldr	r0, [pc, #40]	@ (800151c <main+0x70>)
 80014f4:	f005 fa8a 	bl	8006a0c <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <main+0x74>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6898      	ldr	r0, [r3, #8]
 80014fe:	2300      	movs	r3, #0
 8001500:	2202      	movs	r2, #2
 8001502:	2100      	movs	r1, #0
 8001504:	f009 fe7e 	bl	800b204 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_masked_vs_reference_step_by_step();
 8001508:	f7ff fc22 	bl	8000d50 <test_masked_vs_reference_step_by_step>
	  test_full_keccak_rounds();
 800150c:	f7ff fe80 	bl	8001210 <test_full_keccak_rounds>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001510:	f009 f9a4 	bl	800a85c <MX_USB_HOST_Process>
	  test_masked_vs_reference_step_by_step();
 8001514:	bf00      	nop
 8001516:	e7f7      	b.n	8001508 <main+0x5c>
 8001518:	40023800 	.word	0x40023800
 800151c:	20000140 	.word	0x20000140
 8001520:	20000038 	.word	0x20000038

08001524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b094      	sub	sp, #80	@ 0x50
 8001528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800152a:	f107 0320 	add.w	r3, r7, #32
 800152e:	2230      	movs	r2, #48	@ 0x30
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f009 fff2 	bl	800b51c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001538:	f107 030c 	add.w	r3, r7, #12
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001548:	2300      	movs	r3, #0
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	4b28      	ldr	r3, [pc, #160]	@ (80015f0 <SystemClock_Config+0xcc>)
 800154e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001550:	4a27      	ldr	r2, [pc, #156]	@ (80015f0 <SystemClock_Config+0xcc>)
 8001552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001556:	6413      	str	r3, [r2, #64]	@ 0x40
 8001558:	4b25      	ldr	r3, [pc, #148]	@ (80015f0 <SystemClock_Config+0xcc>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001564:	2300      	movs	r3, #0
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	4b22      	ldr	r3, [pc, #136]	@ (80015f4 <SystemClock_Config+0xd0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a21      	ldr	r2, [pc, #132]	@ (80015f4 <SystemClock_Config+0xd0>)
 800156e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b1f      	ldr	r3, [pc, #124]	@ (80015f4 <SystemClock_Config+0xd0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001580:	2301      	movs	r3, #1
 8001582:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158a:	2302      	movs	r3, #2
 800158c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800158e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001592:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001594:	2308      	movs	r3, #8
 8001596:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001598:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800159c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800159e:	2302      	movs	r3, #2
 80015a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015a2:	2307      	movs	r3, #7
 80015a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 fc54 	bl	8005e58 <HAL_RCC_OscConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015b6:	f000 f9ef 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ba:	230f      	movs	r3, #15
 80015bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015be:	2302      	movs	r3, #2
 80015c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	2105      	movs	r1, #5
 80015d8:	4618      	mov	r0, r3
 80015da:	f004 feb5 	bl	8006348 <HAL_RCC_ClockConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80015e4:	f000 f9d8 	bl	8001998 <Error_Handler>
  }
}
 80015e8:	bf00      	nop
 80015ea:	3750      	adds	r7, #80	@ 0x50
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40007000 	.word	0x40007000

080015f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <MX_I2C1_Init+0x50>)
 80015fe:	4a13      	ldr	r2, [pc, #76]	@ (800164c <MX_I2C1_Init+0x54>)
 8001600:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_I2C1_Init+0x50>)
 8001604:	4a12      	ldr	r2, [pc, #72]	@ (8001650 <MX_I2C1_Init+0x58>)
 8001606:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_I2C1_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <MX_I2C1_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_I2C1_Init+0x50>)
 8001616:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800161a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <MX_I2C1_Init+0x50>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_I2C1_Init+0x50>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	@ (8001648 <MX_I2C1_Init+0x50>)
 8001636:	f003 fe2b 	bl	8005290 <HAL_I2C_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001640:	f000 f9aa 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000a4 	.word	0x200000a4
 800164c:	40005400 	.word	0x40005400
 8001650:	000186a0 	.word	0x000186a0

08001654 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <MX_I2S3_Init+0x54>)
 800165a:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <MX_I2S3_Init+0x58>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_I2S3_Init+0x54>)
 8001660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001664:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001666:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <MX_I2S3_Init+0x54>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_I2S3_Init+0x54>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001672:	4b0d      	ldr	r3, [pc, #52]	@ (80016a8 <MX_I2S3_Init+0x54>)
 8001674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001678:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800167a:	4b0b      	ldr	r3, [pc, #44]	@ (80016a8 <MX_I2S3_Init+0x54>)
 800167c:	4a0c      	ldr	r2, [pc, #48]	@ (80016b0 <MX_I2S3_Init+0x5c>)
 800167e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001680:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_I2S3_Init+0x54>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001686:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <MX_I2S3_Init+0x54>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_I2S3_Init+0x54>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_I2S3_Init+0x54>)
 8001694:	f003 ff40 	bl	8005518 <HAL_I2S_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800169e:	f000 f97b 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200000f8 	.word	0x200000f8
 80016ac:	40003c00 	.word	0x40003c00
 80016b0:	00017700 	.word	0x00017700

080016b4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80016b8:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_RNG_Init+0x20>)
 80016ba:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <MX_RNG_Init+0x24>)
 80016bc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_RNG_Init+0x20>)
 80016c0:	f005 f9a4 	bl	8006a0c <HAL_RNG_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80016ca:	f000 f965 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000140 	.word	0x20000140
 80016d8:	50060800 	.word	0x50060800

080016dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016e0:	4b17      	ldr	r3, [pc, #92]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016e2:	4a18      	ldr	r2, [pc, #96]	@ (8001744 <MX_SPI1_Init+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016e6:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ee:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016fa:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <MX_SPI1_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001700:	4b0f      	ldr	r3, [pc, #60]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800170c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800170e:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001714:	4b0a      	ldr	r3, [pc, #40]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001716:	2200      	movs	r2, #0
 8001718:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <MX_SPI1_Init+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001720:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001722:	2200      	movs	r2, #0
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <MX_SPI1_Init+0x64>)
 8001728:	220a      	movs	r2, #10
 800172a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800172c:	4804      	ldr	r0, [pc, #16]	@ (8001740 <MX_SPI1_Init+0x64>)
 800172e:	f005 f9ed 	bl	8006b0c <HAL_SPI_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001738:	f000 f92e 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000150 	.word	0x20000150
 8001744:	40013000 	.word	0x40013000

08001748 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <MX_USART2_UART_Init+0x50>)
 8001750:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001754:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001758:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800175a:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001766:	4b0b      	ldr	r3, [pc, #44]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800176c:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 800176e:	220c      	movs	r2, #12
 8001770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <MX_USART2_UART_Init+0x4c>)
 8001780:	f005 fa4d 	bl	8006c1e <HAL_UART_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800178a:	f000 f905 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200001a8 	.word	0x200001a8
 8001798:	40004400 	.word	0x40004400

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	@ 0x30
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	605a      	str	r2, [r3, #4]
 80017ac:	609a      	str	r2, [r3, #8]
 80017ae:	60da      	str	r2, [r3, #12]
 80017b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	4b72      	ldr	r3, [pc, #456]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a71      	ldr	r2, [pc, #452]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 80017bc:	f043 0310 	orr.w	r3, r3, #16
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	61bb      	str	r3, [r7, #24]
 80017cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b68      	ldr	r3, [pc, #416]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b64      	ldr	r3, [pc, #400]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a63      	ldr	r2, [pc, #396]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b61      	ldr	r3, [pc, #388]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b5d      	ldr	r3, [pc, #372]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a5c      	ldr	r2, [pc, #368]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b5a      	ldr	r3, [pc, #360]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b56      	ldr	r3, [pc, #344]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a55      	ldr	r2, [pc, #340]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b53      	ldr	r3, [pc, #332]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b4f      	ldr	r3, [pc, #316]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a4e      	ldr	r2, [pc, #312]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b4c      	ldr	r3, [pc, #304]	@ (8001980 <MX_GPIO_Init+0x1e4>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2108      	movs	r1, #8
 800185e:	4849      	ldr	r0, [pc, #292]	@ (8001984 <MX_GPIO_Init+0x1e8>)
 8001860:	f001 fbc8 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	2101      	movs	r1, #1
 8001868:	4847      	ldr	r0, [pc, #284]	@ (8001988 <MX_GPIO_Init+0x1ec>)
 800186a:	f001 fbc3 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800186e:	2200      	movs	r2, #0
 8001870:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001874:	4845      	ldr	r0, [pc, #276]	@ (800198c <MX_GPIO_Init+0x1f0>)
 8001876:	f001 fbbd 	bl	8002ff4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800187a:	2308      	movs	r3, #8
 800187c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	2301      	movs	r3, #1
 8001880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001886:	2300      	movs	r3, #0
 8001888:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	483c      	ldr	r0, [pc, #240]	@ (8001984 <MX_GPIO_Init+0x1e8>)
 8001892:	f001 fa13 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001896:	2301      	movs	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	4836      	ldr	r0, [pc, #216]	@ (8001988 <MX_GPIO_Init+0x1ec>)
 80018ae:	f001 fa05 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80018b2:	2308      	movs	r3, #8
 80018b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018c2:	2305      	movs	r3, #5
 80018c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	482e      	ldr	r0, [pc, #184]	@ (8001988 <MX_GPIO_Init+0x1ec>)
 80018ce:	f001 f9f5 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018d6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	482a      	ldr	r0, [pc, #168]	@ (8001990 <MX_GPIO_Init+0x1f4>)
 80018e8:	f001 f9e8 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018ec:	2304      	movs	r3, #4
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	4825      	ldr	r0, [pc, #148]	@ (8001994 <MX_GPIO_Init+0x1f8>)
 8001900:	f001 f9dc 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001916:	2305      	movs	r3, #5
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	481c      	ldr	r0, [pc, #112]	@ (8001994 <MX_GPIO_Init+0x1f8>)
 8001922:	f001 f9cb 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001926:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800192a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4619      	mov	r1, r3
 800193e:	4813      	ldr	r0, [pc, #76]	@ (800198c <MX_GPIO_Init+0x1f0>)
 8001940:	f001 f9bc 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001944:	2320      	movs	r3, #32
 8001946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001948:	2300      	movs	r3, #0
 800194a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	480d      	ldr	r0, [pc, #52]	@ (800198c <MX_GPIO_Init+0x1f0>)
 8001958:	f001 f9b0 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800195c:	2302      	movs	r3, #2
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001960:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <MX_GPIO_Init+0x1e8>)
 8001972:	f001 f9a3 	bl	8002cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001976:	bf00      	nop
 8001978:	3730      	adds	r7, #48	@ 0x30
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40021000 	.word	0x40021000
 8001988:	40020800 	.word	0x40020800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40020000 	.word	0x40020000
 8001994:	40020400 	.word	0x40020400

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <Error_Handler+0x8>

080019a4 <get_random64>:
    0x000000000000800aULL, 0x800000008000000aULL,
    0x8000000080008081ULL, 0x8000000000008080ULL,
    0x0000000080000001ULL, 0x8000000080008008ULL
};

uint64_t get_random64(void) {
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    HAL_RNG_GenerateRandomNumber(&hrng, &r1);
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4810      	ldr	r0, [pc, #64]	@ (80019f4 <get_random64+0x50>)
 80019b2:	f005 f855 	bl	8006a60 <HAL_RNG_GenerateRandomNumber>
    HAL_RNG_GenerateRandomNumber(&hrng, &r2);
 80019b6:	463b      	mov	r3, r7
 80019b8:	4619      	mov	r1, r3
 80019ba:	480e      	ldr	r0, [pc, #56]	@ (80019f4 <get_random64+0x50>)
 80019bc:	f005 f850 	bl	8006a60 <HAL_RNG_GenerateRandomNumber>
    return ((uint64_t)r1 << 32) | r2;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	469a      	mov	sl, r3
 80019c6:	4693      	mov	fp, r2
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	4653      	mov	r3, sl
 80019d2:	2200      	movs	r2, #0
 80019d4:	6839      	ldr	r1, [r7, #0]
 80019d6:	2000      	movs	r0, #0
 80019d8:	460c      	mov	r4, r1
 80019da:	4605      	mov	r5, r0
 80019dc:	ea42 0804 	orr.w	r8, r2, r4
 80019e0:	ea43 0905 	orr.w	r9, r3, r5
 80019e4:	4642      	mov	r2, r8
 80019e6:	464b      	mov	r3, r9
}
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019f4:	20000140 	.word	0x20000140

080019f8 <masked_theta>:

// === THETA ===
void masked_theta(masked_uint64_t state[5][5]) {
 80019f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019fc:	b0e0      	sub	sp, #384	@ 0x180
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a04:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a08:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};
 8001a0a:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001a0e:	22a0      	movs	r2, #160	@ 0xa0
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f009 fd82 	bl	800b51c <memset>
    masked_uint64_t D[5] = {0};
 8001a18:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a1c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001a20:	4618      	mov	r0, r3
 8001a22:	23a0      	movs	r3, #160	@ 0xa0
 8001a24:	461a      	mov	r2, r3
 8001a26:	2100      	movs	r1, #0
 8001a28:	f009 fd78 	bl	800b51c <memset>

    // === Compute C[x] = A[x][0] ^ A[x][1] ^ ... ^ A[x][4] ===
    for (int x = 0; x < 5; x++) {
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001a32:	e04f      	b.n	8001ad4 <masked_theta+0xdc>
        C[x] = state[x][0];
 8001a34:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	015b      	lsls	r3, r3, #5
 8001a40:	461a      	mov	r2, r3
 8001a42:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001a46:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	441a      	add	r2, r3
 8001a4e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001a52:	015b      	lsls	r3, r3, #5
 8001a54:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001a58:	f107 0108 	add.w	r1, r7, #8
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3bd0      	subs	r3, #208	@ 0xd0
 8001a60:	461c      	mov	r4, r3
 8001a62:	4615      	mov	r5, r2
 8001a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 8001a70:	2301      	movs	r3, #1
 8001a72:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001a76:	e024      	b.n	8001ac2 <masked_theta+0xca>
            masked_xor(&C[x], &C[x], &state[x][y]);
 8001a78:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8001a7c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	18d0      	adds	r0, r2, r3
 8001a84:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8001a88:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001a8c:	015b      	lsls	r3, r3, #5
 8001a8e:	18d1      	adds	r1, r2, r3
 8001a90:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	015b      	lsls	r3, r3, #5
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001aa2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	441a      	add	r2, r3
 8001aaa:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001aae:	015b      	lsls	r3, r3, #5
 8001ab0:	4413      	add	r3, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	f000 fbe2 	bl	800227c <masked_xor>
        for (int y = 1; y < 5; y++) {
 8001ab8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001abc:	3301      	adds	r3, #1
 8001abe:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001ac2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	ddd6      	ble.n	8001a78 <masked_theta+0x80>
    for (int x = 0; x < 5; x++) {
 8001aca:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001ad4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	ddab      	ble.n	8001a34 <masked_theta+0x3c>
        }
    }

    // === Compute D[x] = C[x-1] ^ ROTL(C[x+1], 1) ===
    for (int x = 0; x < 5; x++) {
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001ae2:	e06f      	b.n	8001bc4 <masked_theta+0x1cc>
        for (int i = 0; i < MASKING_N; i++) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001aea:	e062      	b.n	8001bb2 <masked_theta+0x1ba>
            uint64_t c_plus_1 = C[(x + 1) % 5].share[i];
 8001aec:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001af0:	1c59      	adds	r1, r3, #1
 8001af2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ca8 <masked_theta+0x2b0>)
 8001af4:	fb83 2301 	smull	r2, r3, r3, r1
 8001af8:	105a      	asrs	r2, r3, #1
 8001afa:	17cb      	asrs	r3, r1, #31
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	1aca      	subs	r2, r1, r3
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001b14:	f107 0208 	add.w	r2, r7, #8
 8001b18:	4413      	add	r3, r2
 8001b1a:	3bd0      	subs	r3, #208	@ 0xd0
 8001b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b20:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
            uint64_t rot = (c_plus_1 << 1) | (c_plus_1 >> (64 - 1));
 8001b24:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001b28:	0fda      	lsrs	r2, r3, #31
 8001b2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4313      	orrs	r3, r2
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001b38:	0fda      	lsrs	r2, r3, #31
 8001b3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4313      	orrs	r3, r2
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b48:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
            D[x].share[i] = C[(x + 4) % 5].share[i] ^ rot;
 8001b4c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001b50:	1d19      	adds	r1, r3, #4
 8001b52:	4b55      	ldr	r3, [pc, #340]	@ (8001ca8 <masked_theta+0x2b0>)
 8001b54:	fb83 2301 	smull	r2, r3, r3, r1
 8001b58:	105a      	asrs	r2, r3, #1
 8001b5a:	17cb      	asrs	r3, r1, #31
 8001b5c:	1ad2      	subs	r2, r2, r3
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	1aca      	subs	r2, r1, r3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001b74:	f107 0208 	add.w	r2, r7, #8
 8001b78:	4413      	add	r3, r2
 8001b7a:	3bd0      	subs	r3, #208	@ 0xd0
 8001b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b80:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001b84:	ea80 0a02 	eor.w	sl, r0, r2
 8001b88:	ea81 0b03 	eor.w	fp, r1, r3
 8001b8c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b90:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8001b94:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001b98:	0099      	lsls	r1, r3, #2
 8001b9a:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001b9e:	440b      	add	r3, r1
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	e9c3 ab00 	strd	sl, fp, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 8001ba8:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bac:	3301      	adds	r3, #1
 8001bae:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001bb2:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	dd98      	ble.n	8001aec <masked_theta+0xf4>
    for (int x = 0; x < 5; x++) {
 8001bba:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001bc4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001bc8:	2b04      	cmp	r3, #4
 8001bca:	dd8b      	ble.n	8001ae4 <masked_theta+0xec>
        }
    }

    // === Apply D[x] to all lanes in column x ===
    for (int x = 0; x < 5; x++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001bd2:	e05e      	b.n	8001c92 <masked_theta+0x29a>
        for (int y = 0; y < 5; y++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001bda:	e051      	b.n	8001c80 <masked_theta+0x288>
            for (int i = 0; i < MASKING_N; i++) {
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001be2:	e044      	b.n	8001c6e <masked_theta+0x276>
                state[x][y].share[i] ^= D[x].share[i];
 8001be4:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	015b      	lsls	r3, r3, #5
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001bf6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	441a      	add	r2, r3
 8001bfe:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c02:	0099      	lsls	r1, r3, #2
 8001c04:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c08:	440b      	add	r3, r1
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001c12:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001c16:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8001c1a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c1e:	0099      	lsls	r1, r3, #2
 8001c20:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c24:	440b      	add	r3, r1
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c2e:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	015b      	lsls	r3, r3, #5
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001c40:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	441a      	add	r2, r3
 8001c48:	ea84 0800 	eor.w	r8, r4, r0
 8001c4c:	ea85 0901 	eor.w	r9, r5, r1
 8001c50:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c54:	0099      	lsls	r1, r3, #2
 8001c56:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c5a:	440b      	add	r3, r1
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 8001c64:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001c6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	ddb6      	ble.n	8001be4 <masked_theta+0x1ec>
        for (int y = 0; y < 5; y++) {
 8001c76:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001c80:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	dda9      	ble.n	8001bdc <masked_theta+0x1e4>
    for (int x = 0; x < 5; x++) {
 8001c88:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001c92:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	dd9c      	ble.n	8001bd4 <masked_theta+0x1dc>
            }
        }
    }
}
 8001c9a:	bf00      	nop
 8001c9c:	bf00      	nop
 8001c9e:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ca8:	66666667 	.word	0x66666667

08001cac <rol64>:
    { 62,  6, 43, 15, 61 },
    { 28, 55, 25, 21, 56 },
    { 27, 20, 39,  8, 14 }
};

static inline uint64_t rol64(uint64_t x, unsigned int n) {
 8001cac:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001cb0:	b084      	sub	sp, #16
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
    n %= 64;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cc0:	607b      	str	r3, [r7, #4]
    return (x << n) | (x >> ((64 - n) % 64));
 8001cc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f1a1 0620 	sub.w	r6, r1, #32
 8001ccc:	f1c1 0020 	rsb	r0, r1, #32
 8001cd0:	fa03 f901 	lsl.w	r9, r3, r1
 8001cd4:	fa02 f606 	lsl.w	r6, r2, r6
 8001cd8:	ea49 0906 	orr.w	r9, r9, r6
 8001cdc:	fa22 f000 	lsr.w	r0, r2, r0
 8001ce0:	ea49 0900 	orr.w	r9, r9, r0
 8001ce4:	fa02 f801 	lsl.w	r8, r2, r1
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4249      	negs	r1, r1
 8001cec:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8001cf0:	f1c1 0620 	rsb	r6, r1, #32
 8001cf4:	f1a1 0020 	sub.w	r0, r1, #32
 8001cf8:	fa22 f401 	lsr.w	r4, r2, r1
 8001cfc:	fa03 f606 	lsl.w	r6, r3, r6
 8001d00:	4334      	orrs	r4, r6
 8001d02:	fa23 f000 	lsr.w	r0, r3, r0
 8001d06:	4304      	orrs	r4, r0
 8001d08:	fa23 f501 	lsr.w	r5, r3, r1
 8001d0c:	ea48 0a04 	orr.w	sl, r8, r4
 8001d10:	ea49 0b05 	orr.w	fp, r9, r5
 8001d14:	4654      	mov	r4, sl
 8001d16:	465d      	mov	r5, fp
 8001d18:	4622      	mov	r2, r4
 8001d1a:	462b      	mov	r3, r5
}
 8001d1c:	4610      	mov	r0, r2
 8001d1e:	4619      	mov	r1, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d28:	4770      	bx	lr
	...

08001d2c <masked_rho>:


void masked_rho(masked_uint64_t state[5][5]) {
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b089      	sub	sp, #36	@ 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    for (int x = 0; x < 5; x++) {
 8001d34:	2300      	movs	r3, #0
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	e048      	b.n	8001dcc <masked_rho+0xa0>
        for (int y = 0; y < 5; y++) {
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	e03f      	b.n	8001dc0 <masked_rho+0x94>
            uint8_t r = keccak_rho_offsets[x][y];
 8001d40:	4926      	ldr	r1, [pc, #152]	@ (8001ddc <masked_rho+0xb0>)
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	4613      	mov	r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	4413      	add	r3, r2
 8001d4a:	18ca      	adds	r2, r1, r3
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	74fb      	strb	r3, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	e02c      	b.n	8001db4 <masked_rho+0x88>
                uint64_t value = state[x][y].share[i];
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	015b      	lsls	r3, r3, #5
 8001d64:	461a      	mov	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	441a      	add	r2, r3
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	0099      	lsls	r1, r3, #2
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	440b      	add	r3, r1
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
                state[x][y].share[i] = rol64(value, r);
 8001d7e:	7cf9      	ldrb	r1, [r7, #19]
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	015b      	lsls	r3, r3, #5
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	189c      	adds	r4, r3, r2
 8001d90:	460a      	mov	r2, r1
 8001d92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d96:	f7ff ff89 	bl	8001cac <rol64>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	69b9      	ldr	r1, [r7, #24]
 8001da0:	0088      	lsls	r0, r1, #2
 8001da2:	6979      	ldr	r1, [r7, #20]
 8001da4:	4401      	add	r1, r0
 8001da6:	00c9      	lsls	r1, r1, #3
 8001da8:	4421      	add	r1, r4
 8001daa:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	ddcf      	ble.n	8001d5a <masked_rho+0x2e>
        for (int y = 0; y < 5; y++) {
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	ddbc      	ble.n	8001d40 <masked_rho+0x14>
    for (int x = 0; x < 5; x++) {
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	ddb3      	ble.n	8001d3a <masked_rho+0xe>
            }
        }
    }
}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	3724      	adds	r7, #36	@ 0x24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	0800c138 	.word	0x0800c138

08001de0 <masked_pi>:

// === PI ===
void masked_pi(masked_uint64_t state[5][5])
{
 8001de0:	b4b0      	push	{r4, r5, r7}
 8001de2:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001dec:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001df0:	6018      	str	r0, [r3, #0]
    masked_uint64_t tmp[5][5];

    /* 1. copy ---------------------------------------------------------- */
    for (int x = 0; x < 5; ++x)
 8001df2:	2300      	movs	r3, #0
 8001df4:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001df8:	e038      	b.n	8001e6c <masked_pi+0x8c>
        for (int y = 0; y < 5; ++y)
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001e00:	e02b      	b.n	8001e5a <masked_pi+0x7a>
            tmp[x][y] = state[x][y];
 8001e02:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	015b      	lsls	r3, r3, #5
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001e14:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	1899      	adds	r1, r3, r2
 8001e1c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001e20:	f5a3 704e 	sub.w	r0, r3, #824	@ 0x338
 8001e24:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001e32:	4413      	add	r3, r2
 8001e34:	015b      	lsls	r3, r3, #5
 8001e36:	18c2      	adds	r2, r0, r3
 8001e38:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001e3c:	015b      	lsls	r3, r3, #5
 8001e3e:	440b      	add	r3, r1
 8001e40:	4614      	mov	r4, r2
 8001e42:	461d      	mov	r5, r3
 8001e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e48:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e4c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y)
 8001e50:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001e54:	3301      	adds	r3, #1
 8001e56:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001e5a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	ddcf      	ble.n	8001e02 <masked_pi+0x22>
    for (int x = 0; x < 5; ++x)
 8001e62:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001e66:	3301      	adds	r3, #1
 8001e68:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001e6c:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	ddc2      	ble.n	8001dfa <masked_pi+0x1a>

    /* 2. π permutation ------------------------------------------------- */
    for (int x = 0; x < 5; ++x)
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001e7a:	e051      	b.n	8001f20 <masked_pi+0x140>
        for (int y = 0; y < 5; ++y) {
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001e82:	e044      	b.n	8001f0e <masked_pi+0x12e>
            int new_x = y;                       /* u = y                 */
 8001e84:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001e88:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
            int new_y = (2 * x + 3 * y) % 5;     /* v = 2x + 3y (mod 5)   */
 8001e8c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001e90:	0059      	lsls	r1, r3, #1
 8001e92:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	18ca      	adds	r2, r1, r3
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <masked_pi+0x158>)
 8001ea0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ea4:	1059      	asrs	r1, r3, #1
 8001ea6:	17d3      	asrs	r3, r2, #31
 8001ea8:	1ac9      	subs	r1, r1, r3
 8001eaa:	460b      	mov	r3, r1
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
            state[new_x][new_y] = tmp[x][y];     /* move ALL shares       */
 8001eb6:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	015b      	lsls	r3, r3, #5
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001ec8:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	441a      	add	r2, r3
 8001ed0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001ed4:	015b      	lsls	r3, r3, #5
 8001ed6:	18d0      	adds	r0, r2, r3
 8001ed8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001edc:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001ee0:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001eee:	4413      	add	r3, r2
 8001ef0:	015b      	lsls	r3, r3, #5
 8001ef2:	440b      	add	r3, r1
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	461d      	mov	r5, r3
 8001ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001efc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y) {
 8001f04:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001f08:	3301      	adds	r3, #1
 8001f0a:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001f0e:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	ddb6      	ble.n	8001e84 <masked_pi+0xa4>
    for (int x = 0; x < 5; ++x)
 8001f16:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001f20:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	dda9      	ble.n	8001e7c <masked_pi+0x9c>
        }
    /* nothing else! */
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	f507 7751 	add.w	r7, r7, #836	@ 0x344
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bcb0      	pop	{r4, r5, r7}
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	66666667 	.word	0x66666667

08001f3c <masked_not>:
/* ─── tiny helper: masked bitwise NOT (Boolean shares) ───────────────── */
/* ─── Boolean-masked bitwise NOT ───────────────────────────────────────
   dst ← ¬src   (while preserving the XOR-mask invariant)              */
void masked_not(masked_uint64_t *dst,
                              const masked_uint64_t *src)
{
 8001f3c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001f40:	b092      	sub	sp, #72	@ 0x48
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	61f8      	str	r0, [r7, #28]
 8001f46:	61b9      	str	r1, [r7, #24]
    /* 1.  Invert every share ------------------------------------------ */
    for (size_t i = 0; i < MASKING_N; ++i)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f4c:	e012      	b.n	8001f74 <masked_not+0x38>
        dst->share[i] = ~src->share[i];
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	ea6f 0802 	mvn.w	r8, r2
 8001f5e:	ea6f 0903 	mvn.w	r9, r3
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	e9c3 8900 	strd	r8, r9, [r3]
    for (size_t i = 0; i < MASKING_N; ++i)
 8001f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f70:	3301      	adds	r3, #1
 8001f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	d9e9      	bls.n	8001f4e <masked_not+0x12>

    /* 2.  Re-align the mask so that XOR(shares) == ¬XOR(original) ----- */
    uint64_t orig_parity = 0, inv_parity = 0;
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f96:	e024      	b.n	8001fe2 <masked_not+0xa6>
        orig_parity ^= src->share[i];
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001fa8:	ea80 0602 	eor.w	r6, r0, r2
 8001fac:	613e      	str	r6, [r7, #16]
 8001fae:	404b      	eors	r3, r1
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001fb6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        inv_parity  ^= dst->share[i];
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001fca:	ea80 0602 	eor.w	r6, r0, r2
 8001fce:	60be      	str	r6, [r7, #8]
 8001fd0:	404b      	eors	r3, r1
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fd8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 8001fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fde:	3301      	adds	r3, #1
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d9d7      	bls.n	8001f98 <masked_not+0x5c>
    }
    /* delta is the amount by which the parity is off */
    uint64_t delta = inv_parity ^ ~orig_parity;
 8001fe8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001fec:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001ff0:	ea80 0402 	eor.w	r4, r0, r2
 8001ff4:	ea81 0503 	eor.w	r5, r1, r3
 8001ff8:	43e3      	mvns	r3, r4
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	43eb      	mvns	r3, r5
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002004:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* flip ‘delta’ in ONE share (here: share 0) */
    dst->share[0] ^= delta;
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800200e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002012:	ea80 0a02 	eor.w	sl, r0, r2
 8002016:	ea81 0b03 	eor.w	fp, r1, r3
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	e9c3 ab00 	strd	sl, fp, [r3]
}
 8002020:	bf00      	nop
 8002022:	3748      	adds	r7, #72	@ 0x48
 8002024:	46bd      	mov	sp, r7
 8002026:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800202a:	4770      	bx	lr

0800202c <masked_chi>:

/* ─── χ step with correct NOT ───────────────────────────────────────── */
void masked_chi(masked_uint64_t out[5][5],
                           const masked_uint64_t in[5][5],
                           const uint64_t r[5][5][MASKING_N][MASKING_N]) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b09a      	sub	sp, #104	@ 0x68
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
    for (int y = 0; y < 5; y++) {
 8002038:	2300      	movs	r3, #0
 800203a:	667b      	str	r3, [r7, #100]	@ 0x64
 800203c:	e070      	b.n	8002120 <masked_chi+0xf4>
        for (int x = 0; x < 5; x++) {
 800203e:	2300      	movs	r3, #0
 8002040:	663b      	str	r3, [r7, #96]	@ 0x60
 8002042:	e067      	b.n	8002114 <masked_chi+0xe8>
            const masked_uint64_t *a = &in[x][y];
 8002044:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	015b      	lsls	r3, r3, #5
 800204e:	461a      	mov	r2, r3
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	441a      	add	r2, r3
 8002054:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002056:	015b      	lsls	r3, r3, #5
 8002058:	4413      	add	r3, r2
 800205a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            const masked_uint64_t *b = &in[(x + 1) % 5][y];
 800205c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4b33      	ldr	r3, [pc, #204]	@ (8002130 <masked_chi+0x104>)
 8002062:	fb83 1302 	smull	r1, r3, r3, r2
 8002066:	1059      	asrs	r1, r3, #1
 8002068:	17d3      	asrs	r3, r2, #31
 800206a:	1ac9      	subs	r1, r1, r3
 800206c:	460b      	mov	r3, r1
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	1ad1      	subs	r1, r2, r3
 8002074:	460a      	mov	r2, r1
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	015b      	lsls	r3, r3, #5
 800207e:	461a      	mov	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	441a      	add	r2, r3
 8002084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002086:	015b      	lsls	r3, r3, #5
 8002088:	4413      	add	r3, r2
 800208a:	65bb      	str	r3, [r7, #88]	@ 0x58
            const masked_uint64_t *c = &in[(x + 2) % 5][y];
 800208c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800208e:	1c9a      	adds	r2, r3, #2
 8002090:	4b27      	ldr	r3, [pc, #156]	@ (8002130 <masked_chi+0x104>)
 8002092:	fb83 1302 	smull	r1, r3, r3, r2
 8002096:	1059      	asrs	r1, r3, #1
 8002098:	17d3      	asrs	r3, r2, #31
 800209a:	1ac9      	subs	r1, r1, r3
 800209c:	460b      	mov	r3, r1
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	1ad1      	subs	r1, r2, r3
 80020a4:	460a      	mov	r2, r1
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	015b      	lsls	r3, r3, #5
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	441a      	add	r2, r3
 80020b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020b6:	015b      	lsls	r3, r3, #5
 80020b8:	4413      	add	r3, r2
 80020ba:	657b      	str	r3, [r7, #84]	@ 0x54
            masked_uint64_t t1, t2;

            masked_not(&t1, b);
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff ff3a 	bl	8001f3c <masked_not>
            masked_and(&t2, &t1, c, r[x][y]);
 80020c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020ca:	4613      	mov	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	01db      	lsls	r3, r3, #7
 80020d2:	461a      	mov	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	441a      	add	r2, r3
 80020d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020da:	01db      	lsls	r3, r3, #7
 80020dc:	4413      	add	r3, r2
 80020de:	f107 0110 	add.w	r1, r7, #16
 80020e2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80020e6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80020e8:	f000 f8f3 	bl	80022d2 <masked_and>
            masked_xor(&out[x][y], a, &t2);
 80020ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	015b      	lsls	r3, r3, #5
 80020f6:	461a      	mov	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	441a      	add	r2, r3
 80020fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020fe:	015b      	lsls	r3, r3, #5
 8002100:	4413      	add	r3, r2
 8002102:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002106:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002108:	4618      	mov	r0, r3
 800210a:	f000 f8b7 	bl	800227c <masked_xor>
        for (int x = 0; x < 5; x++) {
 800210e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002110:	3301      	adds	r3, #1
 8002112:	663b      	str	r3, [r7, #96]	@ 0x60
 8002114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002116:	2b04      	cmp	r3, #4
 8002118:	dd94      	ble.n	8002044 <masked_chi+0x18>
    for (int y = 0; y < 5; y++) {
 800211a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800211c:	3301      	adds	r3, #1
 800211e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002120:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002122:	2b04      	cmp	r3, #4
 8002124:	dd8b      	ble.n	800203e <masked_chi+0x12>
        }
    }
}
 8002126:	bf00      	nop
 8002128:	bf00      	nop
 800212a:	3768      	adds	r7, #104	@ 0x68
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	66666667 	.word	0x66666667

08002134 <masked_iota>:




void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 8002134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002138:	b08c      	sub	sp, #48	@ 0x30
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	e9c7 2300 	strd	r2, r3, [r7]
    // 1. Recombine the lane value (x = 0, y = 0)
    uint64_t value = 0;
 8002142:	f04f 0200 	mov.w	r2, #0
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 800214e:	2300      	movs	r3, #0
 8002150:	627b      	str	r3, [r7, #36]	@ 0x24
 8002152:	e010      	b.n	8002176 <masked_iota+0x42>
        value ^= state[0][0].share[i];
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4413      	add	r3, r2
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002164:	ea80 0a02 	eor.w	sl, r0, r2
 8002168:	ea81 0b03 	eor.w	fp, r1, r3
 800216c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	3301      	adds	r3, #1
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	2b03      	cmp	r3, #3
 800217a:	ddeb      	ble.n	8002154 <masked_iota+0x20>

    // 2. Apply round constant
    value ^= rc;
 800217c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002184:	ea80 0802 	eor.w	r8, r0, r2
 8002188:	ea81 0903 	eor.w	r9, r1, r3
 800218c:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28

    // 3. Re-mask the new value randomly
    uint64_t acc = value;
 8002190:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002194:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8002198:	2301      	movs	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	e01a      	b.n	80021d4 <masked_iota+0xa0>
        state[0][0].share[i] = get_random64();
 800219e:	f7ff fc01 	bl	80019a4 <get_random64>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	6979      	ldr	r1, [r7, #20]
 80021aa:	00c9      	lsls	r1, r1, #3
 80021ac:	4401      	add	r1, r0
 80021ae:	e9c1 2300 	strd	r2, r3, [r1]
        acc ^= state[0][0].share[i];
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021c2:	ea80 0402 	eor.w	r4, r0, r2
 80021c6:	ea81 0503 	eor.w	r5, r1, r3
 80021ca:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	3301      	adds	r3, #1
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	2b03      	cmp	r3, #3
 80021d8:	dde1      	ble.n	800219e <masked_iota+0x6a>
    }
    state[0][0].share[0] = acc;
 80021da:	68f9      	ldr	r1, [r7, #12]
 80021dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e0:	e9c1 2300 	strd	r2, r3, [r1]
}
 80021e4:	bf00      	nop
 80021e6:	3730      	adds	r7, #48	@ 0x30
 80021e8:	46bd      	mov	sp, r7
 80021ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080021ee <fill_random_matrix>:
               hi, lo, ehi, elo);
        return 1;
    }
}

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 80021ee:	b5b0      	push	{r4, r5, r7, lr}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e037      	b.n	800226c <fill_random_matrix+0x7e>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	e020      	b.n	8002246 <fill_random_matrix+0x58>
            uint64_t val = get_random64();
 8002204:	f7ff fbce 	bl	80019a4 <get_random64>
 8002208:	4603      	mov	r3, r0
 800220a:	17da      	asrs	r2, r3, #31
 800220c:	461c      	mov	r4, r3
 800220e:	4615      	mov	r5, r2
 8002210:	e9c7 4502 	strd	r4, r5, [r7, #8]
            r[i][j] = val;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	015b      	lsls	r3, r3, #5
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	441a      	add	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	18d1      	adds	r1, r2, r3
 8002222:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002226:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry!
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	015b      	lsls	r3, r3, #5
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	441a      	add	r2, r3
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	18d1      	adds	r1, r2, r3
 8002238:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800223c:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	3301      	adds	r3, #1
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d9db      	bls.n	8002204 <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	015b      	lsls	r3, r3, #5
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	441a      	add	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	18d1      	adds	r1, r2, r3
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d9c4      	bls.n	80021fc <fill_random_matrix+0xe>
    }
}
 8002272:	bf00      	nop
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bdb0      	pop	{r4, r5, r7, pc}

0800227c <masked_xor>:



void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 800227c:	b4b0      	push	{r4, r5, r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e018      	b.n	80022c0 <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	ea80 0402 	eor.w	r4, r0, r2
 80022aa:	ea81 0503 	eor.w	r5, r1, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d9e3      	bls.n	800228e <masked_xor+0x12>
    }
}
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bcb0      	pop	{r4, r5, r7}
 80022d0:	4770      	bx	lr

080022d2 <masked_and>:

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 80022d2:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80022d6:	b092      	sub	sp, #72	@ 0x48
 80022d8:	af00      	add	r7, sp, #0
 80022da:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80022dc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022de:	627a      	str	r2, [r7, #36]	@ 0x24
 80022e0:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 80022e2:	2300      	movs	r3, #0
 80022e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80022e6:	e018      	b.n	800231a <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 80022e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	ea00 0402 	and.w	r4, r0, r2
 8002304:	ea01 0503 	and.w	r5, r1, r3
 8002308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800230a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	4413      	add	r3, r2
 8002310:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002316:	3301      	adds	r3, #1
 8002318:	647b      	str	r3, [r7, #68]	@ 0x44
 800231a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231c:	2b03      	cmp	r3, #3
 800231e:	d9e3      	bls.n	80022e8 <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 8002320:	2300      	movs	r3, #0
 8002322:	643b      	str	r3, [r7, #64]	@ 0x40
 8002324:	e078      	b.n	8002418 <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	3301      	adds	r3, #1
 800232a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800232c:	e06e      	b.n	800240c <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 800232e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	e9d3 0100 	ldrd	r0, r1, [r3]
 800233a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800233c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002346:	ea00 0802 	and.w	r8, r0, r2
 800234a:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 800234e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	e9d3 0100 	ldrd	r0, r1, [r3]
 800235a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800235c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	4413      	add	r3, r2
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	ea00 0a02 	and.w	sl, r0, r2
 800236a:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 800236e:	ea88 030a 	eor.w	r3, r8, sl
 8002372:	603b      	str	r3, [r7, #0]
 8002374:	ea89 030b 	eor.w	r3, r9, fp
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800237e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 8002382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	4413      	add	r3, r2
 800238a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800238e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002390:	015a      	lsls	r2, r3, #5
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	441a      	add	r2, r3
 8002396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	4413      	add	r3, r2
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	ea80 0402 	eor.w	r4, r0, r2
 80023a4:	61bc      	str	r4, [r7, #24]
 80023a6:	404b      	eors	r3, r1
 80023a8:	61fb      	str	r3, [r7, #28]
 80023aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80023b6:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 80023ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80023c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	441a      	add	r2, r3
 80023ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023dc:	ea80 0602 	eor.w	r6, r0, r2
 80023e0:	613e      	str	r6, [r7, #16]
 80023e2:	404b      	eors	r3, r1
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80023ea:	460b      	mov	r3, r1
 80023ec:	4063      	eors	r3, r4
 80023ee:	60bb      	str	r3, [r7, #8]
 80023f0:	4613      	mov	r3, r2
 80023f2:	406b      	eors	r3, r5
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002402:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002408:	3301      	adds	r3, #1
 800240a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800240c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800240e:	2b03      	cmp	r3, #3
 8002410:	d98d      	bls.n	800232e <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 8002412:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002414:	3301      	adds	r3, #1
 8002416:	643b      	str	r3, [r7, #64]	@ 0x40
 8002418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800241a:	2b03      	cmp	r3, #3
 800241c:	d983      	bls.n	8002326 <masked_and+0x54>
        }
    }
}
 800241e:	bf00      	nop
 8002420:	bf00      	nop
 8002422:	3748      	adds	r7, #72	@ 0x48
 8002424:	46bd      	mov	sp, r7
 8002426:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800242a:	4770      	bx	lr

0800242c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <HAL_MspInit+0x4c>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	4a0f      	ldr	r2, [pc, #60]	@ (8002478 <HAL_MspInit+0x4c>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002440:	6453      	str	r3, [r2, #68]	@ 0x44
 8002442:	4b0d      	ldr	r3, [pc, #52]	@ (8002478 <HAL_MspInit+0x4c>)
 8002444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <HAL_MspInit+0x4c>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	4a08      	ldr	r2, [pc, #32]	@ (8002478 <HAL_MspInit+0x4c>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	@ 0x40
 800245e:	4b06      	ldr	r3, [pc, #24]	@ (8002478 <HAL_MspInit+0x4c>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800246a:	2007      	movs	r0, #7
 800246c:	f000 fbe4 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002470:	bf00      	nop
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800

0800247c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a19      	ldr	r2, [pc, #100]	@ (8002500 <HAL_I2C_MspInit+0x84>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d12c      	bne.n	80024f8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <HAL_I2C_MspInit+0x88>)
 80024a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a6:	4a17      	ldr	r2, [pc, #92]	@ (8002504 <HAL_I2C_MspInit+0x88>)
 80024a8:	f043 0302 	orr.w	r3, r3, #2
 80024ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_I2C_MspInit+0x88>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80024ba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80024be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c0:	2312      	movs	r3, #18
 80024c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024cc:	2304      	movs	r3, #4
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	480c      	ldr	r0, [pc, #48]	@ (8002508 <HAL_I2C_MspInit+0x8c>)
 80024d8:	f000 fbf0 	bl	8002cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024dc:	2300      	movs	r3, #0
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <HAL_I2C_MspInit+0x88>)
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	4a07      	ldr	r2, [pc, #28]	@ (8002504 <HAL_I2C_MspInit+0x88>)
 80024e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ec:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_I2C_MspInit+0x88>)
 80024ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024f8:	bf00      	nop
 80024fa:	3728      	adds	r7, #40	@ 0x28
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40005400 	.word	0x40005400
 8002504:	40023800 	.word	0x40023800
 8002508:	40020400 	.word	0x40020400

0800250c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08e      	sub	sp, #56	@ 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a31      	ldr	r2, [pc, #196]	@ (80025fc <HAL_I2S_MspInit+0xf0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d15a      	bne.n	80025f2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800253c:	2301      	movs	r3, #1
 800253e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002540:	23c0      	movs	r3, #192	@ 0xc0
 8002542:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002544:	2302      	movs	r3, #2
 8002546:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	4618      	mov	r0, r3
 800254e:	f004 f91b 	bl	8006788 <HAL_RCCEx_PeriphCLKConfig>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002558:	f7ff fa1e 	bl	8001998 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	4b27      	ldr	r3, [pc, #156]	@ (8002600 <HAL_I2S_MspInit+0xf4>)
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	4a26      	ldr	r2, [pc, #152]	@ (8002600 <HAL_I2S_MspInit+0xf4>)
 8002566:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800256a:	6413      	str	r3, [r2, #64]	@ 0x40
 800256c:	4b24      	ldr	r3, [pc, #144]	@ (8002600 <HAL_I2S_MspInit+0xf4>)
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002578:	2300      	movs	r3, #0
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_I2S_MspInit+0xf4>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002580:	4a1f      	ldr	r2, [pc, #124]	@ (8002600 <HAL_I2S_MspInit+0xf4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6313      	str	r3, [r2, #48]	@ 0x30
 8002588:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_I2S_MspInit+0xf4>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002594:	2300      	movs	r3, #0
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <HAL_I2S_MspInit+0xf4>)
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <HAL_I2S_MspInit+0xf4>)
 800259e:	f043 0304 	orr.w	r3, r3, #4
 80025a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a4:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <HAL_I2S_MspInit+0xf4>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80025b0:	2310      	movs	r3, #16
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b4:	2302      	movs	r3, #2
 80025b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025bc:	2300      	movs	r3, #0
 80025be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025c0:	2306      	movs	r3, #6
 80025c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80025c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c8:	4619      	mov	r1, r3
 80025ca:	480e      	ldr	r0, [pc, #56]	@ (8002604 <HAL_I2S_MspInit+0xf8>)
 80025cc:	f000 fb76 	bl	8002cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80025d0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025de:	2300      	movs	r3, #0
 80025e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025e2:	2306      	movs	r3, #6
 80025e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ea:	4619      	mov	r1, r3
 80025ec:	4806      	ldr	r0, [pc, #24]	@ (8002608 <HAL_I2S_MspInit+0xfc>)
 80025ee:	f000 fb65 	bl	8002cbc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80025f2:	bf00      	nop
 80025f4:	3738      	adds	r7, #56	@ 0x38
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40003c00 	.word	0x40003c00
 8002600:	40023800 	.word	0x40023800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020800 	.word	0x40020800

0800260c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <HAL_RNG_MspInit+0x3c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d10d      	bne.n	800263a <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	4b0a      	ldr	r3, [pc, #40]	@ (800264c <HAL_RNG_MspInit+0x40>)
 8002624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002626:	4a09      	ldr	r2, [pc, #36]	@ (800264c <HAL_RNG_MspInit+0x40>)
 8002628:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800262c:	6353      	str	r3, [r2, #52]	@ 0x34
 800262e:	4b07      	ldr	r3, [pc, #28]	@ (800264c <HAL_RNG_MspInit+0x40>)
 8002630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	50060800 	.word	0x50060800
 800264c:	40023800 	.word	0x40023800

08002650 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	@ 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 0314 	add.w	r3, r7, #20
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a19      	ldr	r2, [pc, #100]	@ (80026d4 <HAL_SPI_MspInit+0x84>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d12b      	bne.n	80026ca <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	4b18      	ldr	r3, [pc, #96]	@ (80026d8 <HAL_SPI_MspInit+0x88>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267a:	4a17      	ldr	r2, [pc, #92]	@ (80026d8 <HAL_SPI_MspInit+0x88>)
 800267c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002680:	6453      	str	r3, [r2, #68]	@ 0x44
 8002682:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <HAL_SPI_MspInit+0x88>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
 8002692:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <HAL_SPI_MspInit+0x88>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a10      	ldr	r2, [pc, #64]	@ (80026d8 <HAL_SPI_MspInit+0x88>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b0e      	ldr	r3, [pc, #56]	@ (80026d8 <HAL_SPI_MspInit+0x88>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80026aa:	23e0      	movs	r3, #224	@ 0xe0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026ba:	2305      	movs	r3, #5
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	4805      	ldr	r0, [pc, #20]	@ (80026dc <HAL_SPI_MspInit+0x8c>)
 80026c6:	f000 faf9 	bl	8002cbc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80026ca:	bf00      	nop
 80026cc:	3728      	adds	r7, #40	@ 0x28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40013000 	.word	0x40013000
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020000 	.word	0x40020000

080026e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e8:	f107 0314 	add.w	r3, r7, #20
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	60da      	str	r2, [r3, #12]
 80026f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a19      	ldr	r2, [pc, #100]	@ (8002764 <HAL_UART_MspInit+0x84>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d12b      	bne.n	800275a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	4b18      	ldr	r3, [pc, #96]	@ (8002768 <HAL_UART_MspInit+0x88>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	4a17      	ldr	r2, [pc, #92]	@ (8002768 <HAL_UART_MspInit+0x88>)
 800270c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002710:	6413      	str	r3, [r2, #64]	@ 0x40
 8002712:	4b15      	ldr	r3, [pc, #84]	@ (8002768 <HAL_UART_MspInit+0x88>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <HAL_UART_MspInit+0x88>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	4a10      	ldr	r2, [pc, #64]	@ (8002768 <HAL_UART_MspInit+0x88>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6313      	str	r3, [r2, #48]	@ 0x30
 800272e:	4b0e      	ldr	r3, [pc, #56]	@ (8002768 <HAL_UART_MspInit+0x88>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800273a:	230c      	movs	r3, #12
 800273c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273e:	2302      	movs	r3, #2
 8002740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002746:	2303      	movs	r3, #3
 8002748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800274a:	2307      	movs	r3, #7
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	4619      	mov	r1, r3
 8002754:	4805      	ldr	r0, [pc, #20]	@ (800276c <HAL_UART_MspInit+0x8c>)
 8002756:	f000 fab1 	bl	8002cbc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800275a:	bf00      	nop
 800275c:	3728      	adds	r7, #40	@ 0x28
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40004400 	.word	0x40004400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000

08002770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002774:	bf00      	nop
 8002776:	e7fd      	b.n	8002774 <NMI_Handler+0x4>

08002778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <HardFault_Handler+0x4>

08002780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <MemManage_Handler+0x4>

08002788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <BusFault_Handler+0x4>

08002790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <UsageFault_Handler+0x4>

08002798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c6:	f000 f923 	bl	8002a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80027d4:	4802      	ldr	r0, [pc, #8]	@ (80027e0 <OTG_FS_IRQHandler+0x10>)
 80027d6:	f000 ff07 	bl	80035e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200005d4 	.word	0x200005d4

080027e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e00a      	b.n	800280c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027f6:	f3af 8000 	nop.w
 80027fa:	4601      	mov	r1, r0
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	60ba      	str	r2, [r7, #8]
 8002802:	b2ca      	uxtb	r2, r1
 8002804:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	3301      	adds	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	429a      	cmp	r2, r3
 8002812:	dbf0      	blt.n	80027f6 <_read+0x12>
  }

  return len;
 8002814:	687b      	ldr	r3, [r7, #4]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <_close>:
  }
  return len;
}

int _close(int file)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002826:	f04f 33ff 	mov.w	r3, #4294967295
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002846:	605a      	str	r2, [r3, #4]
  return 0;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_isatty>:

int _isatty(int file)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800285e:	2301      	movs	r3, #1
}
 8002860:	4618      	mov	r0, r3
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
	...

08002888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002890:	4a14      	ldr	r2, [pc, #80]	@ (80028e4 <_sbrk+0x5c>)
 8002892:	4b15      	ldr	r3, [pc, #84]	@ (80028e8 <_sbrk+0x60>)
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800289c:	4b13      	ldr	r3, [pc, #76]	@ (80028ec <_sbrk+0x64>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a4:	4b11      	ldr	r3, [pc, #68]	@ (80028ec <_sbrk+0x64>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <_sbrk+0x68>)
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <_sbrk+0x64>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4413      	add	r3, r2
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d207      	bcs.n	80028c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b8:	f008 fe8e 	bl	800b5d8 <__errno>
 80028bc:	4603      	mov	r3, r0
 80028be:	220c      	movs	r2, #12
 80028c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c2:	f04f 33ff 	mov.w	r3, #4294967295
 80028c6:	e009      	b.n	80028dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c8:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <_sbrk+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ce:	4b07      	ldr	r3, [pc, #28]	@ (80028ec <_sbrk+0x64>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	4a05      	ldr	r2, [pc, #20]	@ (80028ec <_sbrk+0x64>)
 80028d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028da:	68fb      	ldr	r3, [r7, #12]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	20020000 	.word	0x20020000
 80028e8:	00000400 	.word	0x00000400
 80028ec:	200001f0 	.word	0x200001f0
 80028f0:	20000b00 	.word	0x20000b00

080028f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f8:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <SystemInit+0x20>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	4a05      	ldr	r2, [pc, #20]	@ (8002914 <SystemInit+0x20>)
 8002900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002918:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002950 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800291c:	f7ff ffea 	bl	80028f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002920:	480c      	ldr	r0, [pc, #48]	@ (8002954 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002922:	490d      	ldr	r1, [pc, #52]	@ (8002958 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002924:	4a0d      	ldr	r2, [pc, #52]	@ (800295c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002928:	e002      	b.n	8002930 <LoopCopyDataInit>

0800292a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800292c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292e:	3304      	adds	r3, #4

08002930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002934:	d3f9      	bcc.n	800292a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002936:	4a0a      	ldr	r2, [pc, #40]	@ (8002960 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002938:	4c0a      	ldr	r4, [pc, #40]	@ (8002964 <LoopFillZerobss+0x22>)
  movs r3, #0
 800293a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800293c:	e001      	b.n	8002942 <LoopFillZerobss>

0800293e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002940:	3204      	adds	r2, #4

08002942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002944:	d3fb      	bcc.n	800293e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002946:	f008 fe4d 	bl	800b5e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294a:	f7fe fdaf 	bl	80014ac <main>
  bx  lr    
 800294e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002950:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002958:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800295c:	0800c1b0 	.word	0x0800c1b0
  ldr r2, =_sbss
 8002960:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002964:	20000b00 	.word	0x20000b00

08002968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002968:	e7fe      	b.n	8002968 <ADC_IRQHandler>
	...

0800296c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002970:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <HAL_Init+0x40>)
 8002976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800297a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_Init+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_Init+0x40>)
 8002982:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002988:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_Init+0x40>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <HAL_Init+0x40>)
 800298e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002994:	2003      	movs	r0, #3
 8002996:	f000 f94f 	bl	8002c38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299a:	2000      	movs	r0, #0
 800299c:	f000 f808 	bl	80029b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029a0:	f7ff fd44 	bl	800242c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_InitTick+0x54>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b12      	ldr	r3, [pc, #72]	@ (8002a08 <HAL_InitTick+0x58>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	4619      	mov	r1, r3
 80029c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f967 	bl	8002ca2 <HAL_SYSTICK_Config>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e00e      	b.n	80029fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b0f      	cmp	r3, #15
 80029e2:	d80a      	bhi.n	80029fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e4:	2200      	movs	r2, #0
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ec:	f000 f92f 	bl	8002c4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f0:	4a06      	ldr	r2, [pc, #24]	@ (8002a0c <HAL_InitTick+0x5c>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e000      	b.n	80029fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000008 	.word	0x20000008
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a14:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_IncTick+0x20>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_IncTick+0x24>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <HAL_IncTick+0x24>)
 8002a22:	6013      	str	r3, [r2, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000008 	.word	0x20000008
 8002a34:	200001f4 	.word	0x200001f4

08002a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a3c:	4b03      	ldr	r3, [pc, #12]	@ (8002a4c <HAL_GetTick+0x14>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	200001f4 	.word	0x200001f4

08002a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff ffee 	bl	8002a38 <HAL_GetTick>
 8002a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d005      	beq.n	8002a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a94 <HAL_Delay+0x44>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a76:	bf00      	nop
 8002a78:	f7ff ffde 	bl	8002a38 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d8f7      	bhi.n	8002a78 <HAL_Delay+0x28>
  {
  }
}
 8002a88:	bf00      	nop
 8002a8a:	bf00      	nop
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000008 	.word	0x20000008

08002a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aca:	4a04      	ldr	r2, [pc, #16]	@ (8002adc <__NVIC_SetPriorityGrouping+0x44>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	60d3      	str	r3, [r2, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae4:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	0a1b      	lsrs	r3, r3, #8
 8002aea:	f003 0307 	and.w	r3, r3, #7
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	db0b      	blt.n	8002b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	f003 021f 	and.w	r2, r3, #31
 8002b14:	4907      	ldr	r1, [pc, #28]	@ (8002b34 <__NVIC_EnableIRQ+0x38>)
 8002b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1a:	095b      	lsrs	r3, r3, #5
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	e000e100 	.word	0xe000e100

08002b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	6039      	str	r1, [r7, #0]
 8002b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	db0a      	blt.n	8002b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	490c      	ldr	r1, [pc, #48]	@ (8002b84 <__NVIC_SetPriority+0x4c>)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	0112      	lsls	r2, r2, #4
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b60:	e00a      	b.n	8002b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4908      	ldr	r1, [pc, #32]	@ (8002b88 <__NVIC_SetPriority+0x50>)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	3b04      	subs	r3, #4
 8002b70:	0112      	lsls	r2, r2, #4
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	440b      	add	r3, r1
 8002b76:	761a      	strb	r2, [r3, #24]
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr
 8002b84:	e000e100 	.word	0xe000e100
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b089      	sub	sp, #36	@ 0x24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f1c3 0307 	rsb	r3, r3, #7
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	bf28      	it	cs
 8002baa:	2304      	movcs	r3, #4
 8002bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2b06      	cmp	r3, #6
 8002bb4:	d902      	bls.n	8002bbc <NVIC_EncodePriority+0x30>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	3b03      	subs	r3, #3
 8002bba:	e000      	b.n	8002bbe <NVIC_EncodePriority+0x32>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	401a      	ands	r2, r3
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	fa01 f303 	lsl.w	r3, r1, r3
 8002bde:	43d9      	mvns	r1, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	4313      	orrs	r3, r2
         );
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3724      	adds	r7, #36	@ 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c04:	d301      	bcc.n	8002c0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00f      	b.n	8002c2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <SysTick_Config+0x40>)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c12:	210f      	movs	r1, #15
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f7ff ff8e 	bl	8002b38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c1c:	4b05      	ldr	r3, [pc, #20]	@ (8002c34 <SysTick_Config+0x40>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c22:	4b04      	ldr	r3, [pc, #16]	@ (8002c34 <SysTick_Config+0x40>)
 8002c24:	2207      	movs	r2, #7
 8002c26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	e000e010 	.word	0xe000e010

08002c38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f7ff ff29 	bl	8002a98 <__NVIC_SetPriorityGrouping>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b086      	sub	sp, #24
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	607a      	str	r2, [r7, #4]
 8002c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c60:	f7ff ff3e 	bl	8002ae0 <__NVIC_GetPriorityGrouping>
 8002c64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	6978      	ldr	r0, [r7, #20]
 8002c6c:	f7ff ff8e 	bl	8002b8c <NVIC_EncodePriority>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff ff5d 	bl	8002b38 <__NVIC_SetPriority>
}
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff31 	bl	8002afc <__NVIC_EnableIRQ>
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff ffa2 	bl	8002bf4 <SysTick_Config>
 8002cb0:	4603      	mov	r3, r0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	@ 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e16b      	b.n	8002fb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cd8:	2201      	movs	r2, #1
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	f040 815a 	bne.w	8002faa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d005      	beq.n	8002d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d130      	bne.n	8002d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	2203      	movs	r2, #3
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d44:	2201      	movs	r2, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 0201 	and.w	r2, r3, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d017      	beq.n	8002dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d123      	bne.n	8002e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	08da      	lsrs	r2, r3, #3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3208      	adds	r2, #8
 8002dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	220f      	movs	r2, #15
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	08da      	lsrs	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3208      	adds	r2, #8
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0203 	and.w	r2, r3, #3
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80b4 	beq.w	8002faa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b60      	ldr	r3, [pc, #384]	@ (8002fc8 <HAL_GPIO_Init+0x30c>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002fc8 <HAL_GPIO_Init+0x30c>)
 8002e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e52:	4b5d      	ldr	r3, [pc, #372]	@ (8002fc8 <HAL_GPIO_Init+0x30c>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002fcc <HAL_GPIO_Init+0x310>)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	089b      	lsrs	r3, r3, #2
 8002e64:	3302      	adds	r3, #2
 8002e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	220f      	movs	r2, #15
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a52      	ldr	r2, [pc, #328]	@ (8002fd0 <HAL_GPIO_Init+0x314>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d02b      	beq.n	8002ee2 <HAL_GPIO_Init+0x226>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a51      	ldr	r2, [pc, #324]	@ (8002fd4 <HAL_GPIO_Init+0x318>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d025      	beq.n	8002ede <HAL_GPIO_Init+0x222>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a50      	ldr	r2, [pc, #320]	@ (8002fd8 <HAL_GPIO_Init+0x31c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01f      	beq.n	8002eda <HAL_GPIO_Init+0x21e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002fdc <HAL_GPIO_Init+0x320>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d019      	beq.n	8002ed6 <HAL_GPIO_Init+0x21a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe0 <HAL_GPIO_Init+0x324>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d013      	beq.n	8002ed2 <HAL_GPIO_Init+0x216>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a4d      	ldr	r2, [pc, #308]	@ (8002fe4 <HAL_GPIO_Init+0x328>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d00d      	beq.n	8002ece <HAL_GPIO_Init+0x212>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002fe8 <HAL_GPIO_Init+0x32c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d007      	beq.n	8002eca <HAL_GPIO_Init+0x20e>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4b      	ldr	r2, [pc, #300]	@ (8002fec <HAL_GPIO_Init+0x330>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_GPIO_Init+0x20a>
 8002ec2:	2307      	movs	r3, #7
 8002ec4:	e00e      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ec6:	2308      	movs	r3, #8
 8002ec8:	e00c      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002eca:	2306      	movs	r3, #6
 8002ecc:	e00a      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ece:	2305      	movs	r3, #5
 8002ed0:	e008      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	e006      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e004      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e002      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <HAL_GPIO_Init+0x228>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	f002 0203 	and.w	r2, r2, #3
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	4093      	lsls	r3, r2
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ef4:	4935      	ldr	r1, [pc, #212]	@ (8002fcc <HAL_GPIO_Init+0x310>)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	089b      	lsrs	r3, r3, #2
 8002efa:	3302      	adds	r3, #2
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f02:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f26:	4a32      	ldr	r2, [pc, #200]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f2c:	4b30      	ldr	r3, [pc, #192]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f50:	4a27      	ldr	r2, [pc, #156]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f56:	4b26      	ldr	r3, [pc, #152]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fa4:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <HAL_GPIO_Init+0x334>)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3301      	adds	r3, #1
 8002fae:	61fb      	str	r3, [r7, #28]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	f67f ae90 	bls.w	8002cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3724      	adds	r7, #36	@ 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40013800 	.word	0x40013800
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	40020400 	.word	0x40020400
 8002fd8:	40020800 	.word	0x40020800
 8002fdc:	40020c00 	.word	0x40020c00
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40021400 	.word	0x40021400
 8002fe8:	40021800 	.word	0x40021800
 8002fec:	40021c00 	.word	0x40021c00
 8002ff0:	40013c00 	.word	0x40013c00

08002ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
 8003000:	4613      	mov	r3, r2
 8003002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003004:	787b      	ldrb	r3, [r7, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003010:	e003      	b.n	800301a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	041a      	lsls	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af02      	add	r7, sp, #8
 800302c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e059      	b.n	80030ec <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f007 fc3a 	bl	800a8cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2203      	movs	r2, #3
 800305c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003066:	d102      	bne.n	800306e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f004 fa53 	bl	800751e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7c1a      	ldrb	r2, [r3, #16]
 8003080:	f88d 2000 	strb.w	r2, [sp]
 8003084:	3304      	adds	r3, #4
 8003086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003088:	f004 f9d4 	bl	8007434 <USB_CoreInit>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2202      	movs	r2, #2
 8003096:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e026      	b.n	80030ec <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f004 fa4b 	bl	8007540 <USB_SetCurrentMode>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e017      	b.n	80030ec <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	7c1a      	ldrb	r2, [r3, #16]
 80030c4:	f88d 2000 	strb.w	r2, [sp]
 80030c8:	3304      	adds	r3, #4
 80030ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030cc:	f004 fbee 	bl	80078ac <USB_HostInit>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d005      	beq.n	80030e2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2202      	movs	r2, #2
 80030da:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e004      	b.n	80030ec <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80030f4:	b590      	push	{r4, r7, lr}
 80030f6:	b08b      	sub	sp, #44	@ 0x2c
 80030f8:	af04      	add	r7, sp, #16
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	70fb      	strb	r3, [r7, #3]
 8003106:	460b      	mov	r3, r1
 8003108:	70bb      	strb	r3, [r7, #2]
 800310a:	4613      	mov	r3, r2
 800310c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800310e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003110:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_HCD_HC_Init+0x2c>
 800311c:	2302      	movs	r3, #2
 800311e:	e09d      	b.n	800325c <HAL_HCD_HC_Init+0x168>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	3319      	adds	r3, #25
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800313c:	78fa      	ldrb	r2, [r7, #3]
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	1a9b      	subs	r3, r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3314      	adds	r3, #20
 800314c:	787a      	ldrb	r2, [r7, #1]
 800314e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	3315      	adds	r3, #21
 8003160:	78fa      	ldrb	r2, [r7, #3]
 8003162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	3326      	adds	r3, #38	@ 0x26
 8003174:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003178:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	78bb      	ldrb	r3, [r7, #2]
 800317e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003182:	b2d8      	uxtb	r0, r3
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3316      	adds	r3, #22
 8003192:	4602      	mov	r2, r0
 8003194:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	4619      	mov	r1, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fbc8 	bl	8003930 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80031a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	da0a      	bge.n	80031be <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3317      	adds	r3, #23
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	e009      	b.n	80031d2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3317      	adds	r3, #23
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 fccc 	bl	8007b74 <USB_GetHostSpeed>
 80031dc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80031de:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d10b      	bne.n	80031fe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80031e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d107      	bne.n	80031fe <HAL_HCD_HC_Init+0x10a>
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d104      	bne.n	80031fe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2bbc      	cmp	r3, #188	@ 0xbc
 80031f8:	d901      	bls.n	80031fe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80031fa:	23bc      	movs	r3, #188	@ 0xbc
 80031fc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3318      	adds	r3, #24
 800320e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003212:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003214:	78fa      	ldrb	r2, [r7, #3]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	b298      	uxth	r0, r3
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	3328      	adds	r3, #40	@ 0x28
 8003228:	4602      	mov	r2, r0
 800322a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	b29b      	uxth	r3, r3
 8003234:	787c      	ldrb	r4, [r7, #1]
 8003236:	78ba      	ldrb	r2, [r7, #2]
 8003238:	78f9      	ldrb	r1, [r7, #3]
 800323a:	9302      	str	r3, [sp, #8]
 800323c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003240:	9301      	str	r3, [sp, #4]
 8003242:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	4623      	mov	r3, r4
 800324a:	f004 fcbb 	bl	8007bc4 <USB_HC_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	bd90      	pop	{r4, r7, pc}

08003264 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800327a:	2b01      	cmp	r3, #1
 800327c:	d101      	bne.n	8003282 <HAL_HCD_HC_Halt+0x1e>
 800327e:	2302      	movs	r3, #2
 8003280:	e00f      	b.n	80032a2 <HAL_HCD_HC_Halt+0x3e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	4611      	mov	r1, r2
 8003292:	4618      	mov	r0, r3
 8003294:	f005 f84d 	bl	8008332 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	4608      	mov	r0, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	70fb      	strb	r3, [r7, #3]
 80032be:	460b      	mov	r3, r1
 80032c0:	70bb      	strb	r3, [r7, #2]
 80032c2:	4613      	mov	r3, r2
 80032c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3317      	adds	r3, #23
 80032d6:	78ba      	ldrb	r2, [r7, #2]
 80032d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3326      	adds	r3, #38	@ 0x26
 80032ea:	787a      	ldrb	r2, [r7, #1]
 80032ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80032ee:	7c3b      	ldrb	r3, [r7, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d114      	bne.n	800331e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	332a      	adds	r3, #42	@ 0x2a
 8003304:	2203      	movs	r2, #3
 8003306:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	3319      	adds	r3, #25
 8003318:	7f3a      	ldrb	r2, [r7, #28]
 800331a:	701a      	strb	r2, [r3, #0]
 800331c:	e009      	b.n	8003332 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	332a      	adds	r3, #42	@ 0x2a
 800332e:	2202      	movs	r2, #2
 8003330:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003332:	787b      	ldrb	r3, [r7, #1]
 8003334:	2b03      	cmp	r3, #3
 8003336:	f200 8102 	bhi.w	800353e <HAL_HCD_HC_SubmitRequest+0x292>
 800333a:	a201      	add	r2, pc, #4	@ (adr r2, 8003340 <HAL_HCD_HC_SubmitRequest+0x94>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003351 	.word	0x08003351
 8003344:	08003529 	.word	0x08003529
 8003348:	08003415 	.word	0x08003415
 800334c:	0800349f 	.word	0x0800349f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003350:	7c3b      	ldrb	r3, [r7, #16]
 8003352:	2b01      	cmp	r3, #1
 8003354:	f040 80f5 	bne.w	8003542 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003358:	78bb      	ldrb	r3, [r7, #2]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d12d      	bne.n	80033ba <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800335e:	8b3b      	ldrh	r3, [r7, #24]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	333d      	adds	r3, #61	@ 0x3d
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	333d      	adds	r3, #61	@ 0x3d
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	440b      	add	r3, r1
 800339c:	332a      	adds	r3, #42	@ 0x2a
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80033a2:	e0ce      	b.n	8003542 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	332a      	adds	r3, #42	@ 0x2a
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]
      break;
 80033b8:	e0c3      	b.n	8003542 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	331a      	adds	r3, #26
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	f040 80b8 	bne.w	8003542 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	333c      	adds	r3, #60	@ 0x3c
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10a      	bne.n	80033fe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	332a      	adds	r3, #42	@ 0x2a
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
      break;
 80033fc:	e0a1      	b.n	8003542 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	332a      	adds	r3, #42	@ 0x2a
 800340e:	2202      	movs	r2, #2
 8003410:	701a      	strb	r2, [r3, #0]
      break;
 8003412:	e096      	b.n	8003542 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003414:	78bb      	ldrb	r3, [r7, #2]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d120      	bne.n	800345c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	333d      	adds	r3, #61	@ 0x3d
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	332a      	adds	r3, #42	@ 0x2a
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003444:	e07e      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	4613      	mov	r3, r2
 800344c:	011b      	lsls	r3, r3, #4
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	332a      	adds	r3, #42	@ 0x2a
 8003456:	2202      	movs	r2, #2
 8003458:	701a      	strb	r2, [r3, #0]
      break;
 800345a:	e073      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	333c      	adds	r3, #60	@ 0x3c
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003472:	78fa      	ldrb	r2, [r7, #3]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4613      	mov	r3, r2
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	1a9b      	subs	r3, r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	332a      	adds	r3, #42	@ 0x2a
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
      break;
 8003486:	e05d      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	332a      	adds	r3, #42	@ 0x2a
 8003498:	2202      	movs	r2, #2
 800349a:	701a      	strb	r2, [r3, #0]
      break;
 800349c:	e052      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800349e:	78bb      	ldrb	r3, [r7, #2]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d120      	bne.n	80034e6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	333d      	adds	r3, #61	@ 0x3d
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10a      	bne.n	80034d0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034ba:	78fa      	ldrb	r2, [r7, #3]
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	4613      	mov	r3, r2
 80034c0:	011b      	lsls	r3, r3, #4
 80034c2:	1a9b      	subs	r3, r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	332a      	adds	r3, #42	@ 0x2a
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034ce:	e039      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	332a      	adds	r3, #42	@ 0x2a
 80034e0:	2202      	movs	r2, #2
 80034e2:	701a      	strb	r2, [r3, #0]
      break;
 80034e4:	e02e      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	333c      	adds	r3, #60	@ 0x3c
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	332a      	adds	r3, #42	@ 0x2a
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
      break;
 8003510:	e018      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	1a9b      	subs	r3, r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	332a      	adds	r3, #42	@ 0x2a
 8003522:	2202      	movs	r2, #2
 8003524:	701a      	strb	r2, [r3, #0]
      break;
 8003526:	e00d      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	332a      	adds	r3, #42	@ 0x2a
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
      break;
 800353c:	e002      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800353e:	bf00      	nop
 8003540:	e000      	b.n	8003544 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003542:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	332c      	adds	r3, #44	@ 0x2c
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	8b39      	ldrh	r1, [r7, #24]
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4403      	add	r3, r0
 8003568:	3334      	adds	r3, #52	@ 0x34
 800356a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800356c:	78fa      	ldrb	r2, [r7, #3]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	011b      	lsls	r3, r3, #4
 8003574:	1a9b      	subs	r3, r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	334c      	adds	r3, #76	@ 0x4c
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3338      	adds	r3, #56	@ 0x38
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	011b      	lsls	r3, r3, #4
 800359c:	1a9b      	subs	r3, r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	440b      	add	r3, r1
 80035a2:	3315      	adds	r3, #21
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035a8:	78fa      	ldrb	r2, [r7, #3]
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	4613      	mov	r3, r2
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	1a9b      	subs	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	334d      	adds	r3, #77	@ 0x4d
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	3310      	adds	r3, #16
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4413      	add	r3, r2
 80035d0:	1d19      	adds	r1, r3, #4
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	799b      	ldrb	r3, [r3, #6]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f004 fc20 	bl	8007e1c <USB_HC_StartXfer>
 80035dc:	4603      	mov	r3, r0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop

080035e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f004 f914 	bl	800782c <USB_GetMode>
 8003604:	4603      	mov	r3, r0
 8003606:	2b01      	cmp	r3, #1
 8003608:	f040 80fb 	bne.w	8003802 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f004 f8d7 	bl	80077c4 <USB_ReadInterrupts>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80f1 	beq.w	8003800 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f004 f8ce 	bl	80077c4 <USB_ReadInterrupts>
 8003628:	4603      	mov	r3, r0
 800362a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800362e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003632:	d104      	bne.n	800363e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800363c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f004 f8be 	bl	80077c4 <USB_ReadInterrupts>
 8003648:	4603      	mov	r3, r0
 800364a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800364e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003652:	d104      	bne.n	800365e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800365c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 f8ae 	bl	80077c4 <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800366e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003672:	d104      	bne.n	800367e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800367c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f004 f89e 	bl	80077c4 <USB_ReadInterrupts>
 8003688:	4603      	mov	r3, r0
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b02      	cmp	r3, #2
 8003690:	d103      	bne.n	800369a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2202      	movs	r2, #2
 8003698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 f890 	bl	80077c4 <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ae:	d120      	bne.n	80036f2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80036b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d113      	bne.n	80036f2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036ca:	2110      	movs	r1, #16
 80036cc:	6938      	ldr	r0, [r7, #16]
 80036ce:	f003 ff83 	bl	80075d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036d2:	6938      	ldr	r0, [r7, #16]
 80036d4:	f003 ffb2 	bl	800763c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	7a5b      	ldrb	r3, [r3, #9]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d105      	bne.n	80036ec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2101      	movs	r1, #1
 80036e6:	4618      	mov	r0, r3
 80036e8:	f004 f9a4 	bl	8007a34 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f007 f96b 	bl	800a9c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f004 f864 	bl	80077c4 <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003702:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003706:	d102      	bne.n	800370e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f001 fd4d 	bl	80051a8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f004 f856 	bl	80077c4 <USB_ReadInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b08      	cmp	r3, #8
 8003720:	d106      	bne.n	8003730 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f007 f934 	bl	800a990 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2208      	movs	r2, #8
 800372e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f004 f845 	bl	80077c4 <USB_ReadInterrupts>
 800373a:	4603      	mov	r3, r0
 800373c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003744:	d139      	bne.n	80037ba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f004 fde0 	bl	8008310 <USB_HC_ReadInterrupt>
 8003750:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e025      	b.n	80037a4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d018      	beq.n	800379e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800377e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003782:	d106      	bne.n	8003792 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f905 	bl	800399a <HCD_HC_IN_IRQHandler>
 8003790:	e005      	b.n	800379e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	4619      	mov	r1, r3
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 ff67 	bl	800466c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	3301      	adds	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	795b      	ldrb	r3, [r3, #5]
 80037a8:	461a      	mov	r2, r3
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d3d3      	bcc.n	8003758 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f004 f800 	bl	80077c4 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b10      	cmp	r3, #16
 80037cc:	d101      	bne.n	80037d2 <HAL_HCD_IRQHandler+0x1ea>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <HAL_HCD_IRQHandler+0x1ec>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d014      	beq.n	8003802 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0210 	bic.w	r2, r2, #16
 80037e6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f001 fbfe 	bl	8004fea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699a      	ldr	r2, [r3, #24]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0210 	orr.w	r2, r2, #16
 80037fc:	619a      	str	r2, [r3, #24]
 80037fe:	e000      	b.n	8003802 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003800:	bf00      	nop
    }
  }
}
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_HCD_Start+0x16>
 800381a:	2302      	movs	r3, #2
 800381c:	e013      	b.n	8003846 <HAL_HCD_Start+0x3e>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f004 f968 	bl	8007b02 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 fe60 	bl	80074fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b082      	sub	sp, #8
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_HCD_Stop+0x16>
 8003860:	2302      	movs	r3, #2
 8003862:	e00d      	b.n	8003880 <HAL_HCD_Stop+0x32>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f004 febb 	bl	80085ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f004 f90a 	bl	8007aae <USB_ResetPort>
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	334c      	adds	r3, #76	@ 0x4c
 80038c0:	781b      	ldrb	r3, [r3, #0]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	3338      	adds	r3, #56	@ 0x38
 80038ea:	681b      	ldr	r3, [r3, #0]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f004 f94c 	bl	8007ba2 <USB_GetCurrentFrame>
 800390a:	4603      	mov	r3, r0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f004 f927 	bl	8007b74 <USB_GetHostSpeed>
 8003926:	4603      	mov	r3, r0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800393c:	78fa      	ldrb	r2, [r7, #3]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	4613      	mov	r3, r2
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	331a      	adds	r3, #26
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	6879      	ldr	r1, [r7, #4]
 8003954:	4613      	mov	r3, r2
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	331b      	adds	r3, #27
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3325      	adds	r3, #37	@ 0x25
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	3324      	adds	r3, #36	@ 0x24
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	4611      	mov	r1, r2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f003 ff16 	bl	80077ea <USB_ReadChInterrupts>
 80039be:	4603      	mov	r3, r0
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d11a      	bne.n	80039fe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d4:	461a      	mov	r2, r3
 80039d6:	2304      	movs	r3, #4
 80039d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	334d      	adds	r3, #77	@ 0x4d
 80039ea:	2207      	movs	r2, #7
 80039ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f004 fc9b 	bl	8008332 <USB_HC_Halt>
 80039fc:	e09e      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 feef 	bl	80077ea <USB_ReadChInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a16:	d11b      	bne.n	8003a50 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a24:	461a      	mov	r2, r3
 8003a26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a2a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	334d      	adds	r3, #77	@ 0x4d
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	78fa      	ldrb	r2, [r7, #3]
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f004 fc72 	bl	8008332 <USB_HC_Halt>
 8003a4e:	e075      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f003 fec6 	bl	80077ea <USB_ReadChInterrupts>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d11a      	bne.n	8003a9e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a68:	78fb      	ldrb	r3, [r7, #3]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a74:	461a      	mov	r2, r3
 8003a76:	2308      	movs	r3, #8
 8003a78:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	334d      	adds	r3, #77	@ 0x4d
 8003a8a:	2206      	movs	r2, #6
 8003a8c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f004 fc4b 	bl	8008332 <USB_HC_Halt>
 8003a9c:	e04e      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f003 fe9f 	bl	80077ea <USB_ReadChInterrupts>
 8003aac:	4603      	mov	r3, r0
 8003aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab6:	d11b      	bne.n	8003af0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003aca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	334d      	adds	r3, #77	@ 0x4d
 8003adc:	2209      	movs	r2, #9
 8003ade:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	78fa      	ldrb	r2, [r7, #3]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 fc22 	bl	8008332 <USB_HC_Halt>
 8003aee:	e025      	b.n	8003b3c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f003 fe76 	bl	80077ea <USB_ReadChInterrupts>
 8003afe:	4603      	mov	r3, r0
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	2b80      	cmp	r3, #128	@ 0x80
 8003b06:	d119      	bne.n	8003b3c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003b08:	78fb      	ldrb	r3, [r7, #3]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2380      	movs	r3, #128	@ 0x80
 8003b18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	334d      	adds	r3, #77	@ 0x4d
 8003b2a:	2207      	movs	r2, #7
 8003b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f004 fbfb 	bl	8008332 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f003 fe50 	bl	80077ea <USB_ReadChInterrupts>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b54:	d112      	bne.n	8003b7c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f004 fbe7 	bl	8008332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003b64:	78fb      	ldrb	r3, [r7, #3]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b70:	461a      	mov	r2, r3
 8003b72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b76:	6093      	str	r3, [r2, #8]
 8003b78:	f000 bd75 	b.w	8004666 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f003 fe30 	bl	80077ea <USB_ReadChInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f040 8128 	bne.w	8003de6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	331b      	adds	r3, #27
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d119      	bne.n	8003bf2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	331b      	adds	r3, #27
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	0151      	lsls	r1, r2, #5
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	440a      	add	r2, r1
 8003be8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	799b      	ldrb	r3, [r3, #6]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01b      	beq.n	8003c32 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	6879      	ldr	r1, [r7, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	440b      	add	r3, r1
 8003c08:	3330      	adds	r3, #48	@ 0x30
 8003c0a:	6819      	ldr	r1, [r3, #0]
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	1ac9      	subs	r1, r1, r3
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4403      	add	r3, r0
 8003c2e:	3338      	adds	r3, #56	@ 0x38
 8003c30:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	334d      	adds	r3, #77	@ 0x4d
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	3344      	adds	r3, #68	@ 0x44
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c66:	461a      	mov	r2, r3
 8003c68:	2301      	movs	r3, #1
 8003c6a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c6c:	78fa      	ldrb	r2, [r7, #3]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3326      	adds	r3, #38	@ 0x26
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c82:	78fa      	ldrb	r2, [r7, #3]
 8003c84:	6879      	ldr	r1, [r7, #4]
 8003c86:	4613      	mov	r3, r2
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	1a9b      	subs	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	3326      	adds	r3, #38	@ 0x26
 8003c92:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d110      	bne.n	8003cba <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f004 fb46 	bl	8008332 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003ca6:	78fb      	ldrb	r3, [r7, #3]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2310      	movs	r3, #16
 8003cb6:	6093      	str	r3, [r2, #8]
 8003cb8:	e03d      	b.n	8003d36 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003cba:	78fa      	ldrb	r2, [r7, #3]
 8003cbc:	6879      	ldr	r1, [r7, #4]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	1a9b      	subs	r3, r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	3326      	adds	r3, #38	@ 0x26
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d00a      	beq.n	8003ce6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	011b      	lsls	r3, r3, #4
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	3326      	adds	r3, #38	@ 0x26
 8003ce0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d127      	bne.n	8003d36 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003ce6:	78fb      	ldrb	r3, [r7, #3]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003d04:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	334c      	adds	r3, #76	@ 0x4c
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	334c      	adds	r3, #76	@ 0x4c
 8003d2a:	781a      	ldrb	r2, [r3, #0]
 8003d2c:	78fb      	ldrb	r3, [r7, #3]
 8003d2e:	4619      	mov	r1, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f006 fe57 	bl	800a9e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	799b      	ldrb	r3, [r3, #6]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d13b      	bne.n	8003db6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3338      	adds	r3, #56	@ 0x38
 8003d4e:	6819      	ldr	r1, [r3, #0]
 8003d50:	78fa      	ldrb	r2, [r7, #3]
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4403      	add	r3, r0
 8003d5e:	3328      	adds	r3, #40	@ 0x28
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	440b      	add	r3, r1
 8003d64:	1e59      	subs	r1, r3, #1
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4403      	add	r3, r0
 8003d74:	3328      	adds	r3, #40	@ 0x28
 8003d76:	881b      	ldrh	r3, [r3, #0]
 8003d78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8470 	beq.w	8004666 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	011b      	lsls	r3, r3, #4
 8003d8e:	1a9b      	subs	r3, r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	333c      	adds	r3, #60	@ 0x3c
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	f083 0301 	eor.w	r3, r3, #1
 8003d9e:	b2d8      	uxtb	r0, r3
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	333c      	adds	r3, #60	@ 0x3c
 8003dae:	4602      	mov	r2, r0
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	f000 bc58 	b.w	8004666 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	333c      	adds	r3, #60	@ 0x3c
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2d8      	uxtb	r0, r3
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	333c      	adds	r3, #60	@ 0x3c
 8003dde:	4602      	mov	r2, r0
 8003de0:	701a      	strb	r2, [r3, #0]
 8003de2:	f000 bc40 	b.w	8004666 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f003 fcfb 	bl	80077ea <USB_ReadChInterrupts>
 8003df4:	4603      	mov	r3, r0
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d131      	bne.n	8003e62 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	331a      	adds	r3, #26
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	f040 841f 	bne.w	8004666 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	331b      	adds	r3, #27
 8003e38:	2201      	movs	r2, #1
 8003e3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	334d      	adds	r3, #77	@ 0x4d
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 fa6a 	bl	8008332 <USB_HC_Halt>
 8003e5e:	f000 bc02 	b.w	8004666 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 fcbd 	bl	80077ea <USB_ReadChInterrupts>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	f040 8305 	bne.w	8004486 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003e8e:	78fa      	ldrb	r2, [r7, #3]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	334d      	adds	r3, #77	@ 0x4d
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d114      	bne.n	8003ece <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	334d      	adds	r3, #77	@ 0x4d
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003eb8:	78fa      	ldrb	r2, [r7, #3]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	011b      	lsls	r3, r3, #4
 8003ec0:	1a9b      	subs	r3, r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	334c      	adds	r3, #76	@ 0x4c
 8003ec8:	2201      	movs	r2, #1
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	e2cc      	b.n	8004468 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ece:	78fa      	ldrb	r2, [r7, #3]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	1a9b      	subs	r3, r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	334d      	adds	r3, #77	@ 0x4d
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b06      	cmp	r3, #6
 8003ee2:	d114      	bne.n	8003f0e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	334d      	adds	r3, #77	@ 0x4d
 8003ef4:	2202      	movs	r2, #2
 8003ef6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	1a9b      	subs	r3, r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	334c      	adds	r3, #76	@ 0x4c
 8003f08:	2205      	movs	r2, #5
 8003f0a:	701a      	strb	r2, [r3, #0]
 8003f0c:	e2ac      	b.n	8004468 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	334d      	adds	r3, #77	@ 0x4d
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b07      	cmp	r3, #7
 8003f22:	d00b      	beq.n	8003f3c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	334d      	adds	r3, #77	@ 0x4d
 8003f34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f36:	2b09      	cmp	r3, #9
 8003f38:	f040 80a6 	bne.w	8004088 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	334d      	adds	r3, #77	@ 0x4d
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3344      	adds	r3, #68	@ 0x44
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1c59      	adds	r1, r3, #1
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4403      	add	r3, r0
 8003f70:	3344      	adds	r3, #68	@ 0x44
 8003f72:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3344      	adds	r3, #68	@ 0x44
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d943      	bls.n	8004012 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3344      	adds	r3, #68	@ 0x44
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	331a      	adds	r3, #26
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d123      	bne.n	8003ffc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003fb4:	78fa      	ldrb	r2, [r7, #3]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	440b      	add	r3, r1
 8003fc2:	331b      	adds	r3, #27
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003fc8:	78fa      	ldrb	r2, [r7, #3]
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	1a9b      	subs	r3, r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	331c      	adds	r3, #28
 8003fd8:	2200      	movs	r2, #0
 8003fda:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ff6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ffa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ffc:	78fa      	ldrb	r2, [r7, #3]
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	4613      	mov	r3, r2
 8004002:	011b      	lsls	r3, r3, #4
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	334c      	adds	r3, #76	@ 0x4c
 800400c:	2204      	movs	r2, #4
 800400e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004010:	e229      	b.n	8004466 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004012:	78fa      	ldrb	r2, [r7, #3]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	334c      	adds	r3, #76	@ 0x4c
 8004022:	2202      	movs	r2, #2
 8004024:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004026:	78fa      	ldrb	r2, [r7, #3]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	3326      	adds	r3, #38	@ 0x26
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00b      	beq.n	8004054 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	3326      	adds	r3, #38	@ 0x26
 800404c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800404e:	2b02      	cmp	r3, #2
 8004050:	f040 8209 	bne.w	8004466 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004054:	78fb      	ldrb	r3, [r7, #3]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800406a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004072:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004074:	78fb      	ldrb	r3, [r7, #3]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4413      	add	r3, r2
 800407c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004080:	461a      	mov	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004086:	e1ee      	b.n	8004466 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	334d      	adds	r3, #77	@ 0x4d
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b05      	cmp	r3, #5
 800409c:	f040 80c8 	bne.w	8004230 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040a0:	78fa      	ldrb	r2, [r7, #3]
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	440b      	add	r3, r1
 80040ae:	334d      	adds	r3, #77	@ 0x4d
 80040b0:	2202      	movs	r2, #2
 80040b2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	011b      	lsls	r3, r3, #4
 80040bc:	1a9b      	subs	r3, r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	331b      	adds	r3, #27
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	f040 81ce 	bne.w	8004468 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	3326      	adds	r3, #38	@ 0x26
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b03      	cmp	r3, #3
 80040e0:	d16b      	bne.n	80041ba <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	3348      	adds	r3, #72	@ 0x48
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	1c59      	adds	r1, r3, #1
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4403      	add	r3, r0
 8004102:	3348      	adds	r3, #72	@ 0x48
 8004104:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	3348      	adds	r3, #72	@ 0x48
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b02      	cmp	r3, #2
 800411a:	d943      	bls.n	80041a4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	3348      	adds	r3, #72	@ 0x48
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004130:	78fa      	ldrb	r2, [r7, #3]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	011b      	lsls	r3, r3, #4
 8004138:	1a9b      	subs	r3, r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	331b      	adds	r3, #27
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	1a9b      	subs	r3, r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	3344      	adds	r3, #68	@ 0x44
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d809      	bhi.n	800416e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800415a:	78fa      	ldrb	r2, [r7, #3]
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	440b      	add	r3, r1
 8004168:	331c      	adds	r3, #28
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	0151      	lsls	r1, r2, #5
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	440a      	add	r2, r1
 8004184:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004188:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800418e:	78fa      	ldrb	r2, [r7, #3]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	011b      	lsls	r3, r3, #4
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	440b      	add	r3, r1
 800419c:	334c      	adds	r3, #76	@ 0x4c
 800419e:	2204      	movs	r2, #4
 80041a0:	701a      	strb	r2, [r3, #0]
 80041a2:	e014      	b.n	80041ce <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041a4:	78fa      	ldrb	r2, [r7, #3]
 80041a6:	6879      	ldr	r1, [r7, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	1a9b      	subs	r3, r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	334c      	adds	r3, #76	@ 0x4c
 80041b4:	2202      	movs	r2, #2
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e009      	b.n	80041ce <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80041ba:	78fa      	ldrb	r2, [r7, #3]
 80041bc:	6879      	ldr	r1, [r7, #4]
 80041be:	4613      	mov	r3, r2
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	1a9b      	subs	r3, r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	334c      	adds	r3, #76	@ 0x4c
 80041ca:	2202      	movs	r2, #2
 80041cc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041ce:	78fa      	ldrb	r2, [r7, #3]
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	3326      	adds	r3, #38	@ 0x26
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00b      	beq.n	80041fc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	3326      	adds	r3, #38	@ 0x26
 80041f4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	f040 8136 	bne.w	8004468 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004212:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800421a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4413      	add	r3, r2
 8004224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004228:	461a      	mov	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	e11b      	b.n	8004468 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	334d      	adds	r3, #77	@ 0x4d
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b03      	cmp	r3, #3
 8004244:	f040 8081 	bne.w	800434a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	1a9b      	subs	r3, r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	334d      	adds	r3, #77	@ 0x4d
 8004258:	2202      	movs	r2, #2
 800425a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	4613      	mov	r3, r2
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	331b      	adds	r3, #27
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	f040 80fa 	bne.w	8004468 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	334c      	adds	r3, #76	@ 0x4c
 8004284:	2202      	movs	r2, #2
 8004286:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4413      	add	r3, r2
 8004290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	0151      	lsls	r1, r2, #5
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	440a      	add	r2, r1
 800429e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042a6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	0151      	lsls	r1, r2, #5
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	440a      	add	r2, r1
 80042be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042c6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	0151      	lsls	r1, r2, #5
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	440a      	add	r2, r1
 80042de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042e2:	f023 0320 	bic.w	r3, r3, #32
 80042e6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	1a9b      	subs	r3, r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	3326      	adds	r3, #38	@ 0x26
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80042fe:	78fa      	ldrb	r2, [r7, #3]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3326      	adds	r3, #38	@ 0x26
 800430e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004310:	2b02      	cmp	r3, #2
 8004312:	f040 80a9 	bne.w	8004468 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4413      	add	r3, r2
 800431e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800432c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004334:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4413      	add	r3, r2
 800433e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004342:	461a      	mov	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	e08e      	b.n	8004468 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	334d      	adds	r3, #77	@ 0x4d
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b04      	cmp	r3, #4
 800435e:	d143      	bne.n	80043e8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	334d      	adds	r3, #77	@ 0x4d
 8004370:	2202      	movs	r2, #2
 8004372:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	334c      	adds	r3, #76	@ 0x4c
 8004384:	2202      	movs	r2, #2
 8004386:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004388:	78fa      	ldrb	r2, [r7, #3]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	4613      	mov	r3, r2
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	1a9b      	subs	r3, r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	440b      	add	r3, r1
 8004396:	3326      	adds	r3, #38	@ 0x26
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	3326      	adds	r3, #38	@ 0x26
 80043ae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d159      	bne.n	8004468 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043ca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043d2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043e0:	461a      	mov	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e03f      	b.n	8004468 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	334d      	adds	r3, #77	@ 0x4d
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d126      	bne.n	800444c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	1a9b      	subs	r3, r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	440b      	add	r3, r1
 800440c:	334d      	adds	r3, #77	@ 0x4d
 800440e:	2202      	movs	r2, #2
 8004410:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	3344      	adds	r3, #68	@ 0x44
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	1c59      	adds	r1, r3, #1
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4403      	add	r3, r0
 8004432:	3344      	adds	r3, #68	@ 0x44
 8004434:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	334c      	adds	r3, #76	@ 0x4c
 8004446:	2204      	movs	r2, #4
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	e00d      	b.n	8004468 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	334d      	adds	r3, #77	@ 0x4d
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b02      	cmp	r3, #2
 8004460:	f000 8100 	beq.w	8004664 <HCD_HC_IN_IRQHandler+0xcca>
 8004464:	e000      	b.n	8004468 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004466:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004468:	78fa      	ldrb	r2, [r7, #3]
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	1a9b      	subs	r3, r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	440b      	add	r3, r1
 8004476:	334c      	adds	r3, #76	@ 0x4c
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	78fb      	ldrb	r3, [r7, #3]
 800447c:	4619      	mov	r1, r3
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f006 fab0 	bl	800a9e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004484:	e0ef      	b.n	8004666 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f003 f9ab 	bl	80077ea <USB_ReadChInterrupts>
 8004494:	4603      	mov	r3, r0
 8004496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449a:	2b40      	cmp	r3, #64	@ 0x40
 800449c:	d12f      	bne.n	80044fe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800449e:	78fb      	ldrb	r3, [r7, #3]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044aa:	461a      	mov	r2, r3
 80044ac:	2340      	movs	r3, #64	@ 0x40
 80044ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	334d      	adds	r3, #77	@ 0x4d
 80044c0:	2205      	movs	r2, #5
 80044c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	331a      	adds	r3, #26
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80044da:	78fa      	ldrb	r2, [r7, #3]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	3344      	adds	r3, #68	@ 0x44
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	4611      	mov	r1, r2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f003 ff1b 	bl	8008332 <USB_HC_Halt>
 80044fc:	e0b3      	b.n	8004666 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	78fa      	ldrb	r2, [r7, #3]
 8004504:	4611      	mov	r1, r2
 8004506:	4618      	mov	r0, r3
 8004508:	f003 f96f 	bl	80077ea <USB_ReadChInterrupts>
 800450c:	4603      	mov	r3, r0
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b10      	cmp	r3, #16
 8004514:	f040 80a7 	bne.w	8004666 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	1a9b      	subs	r3, r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	3326      	adds	r3, #38	@ 0x26
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d11b      	bne.n	8004566 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	6879      	ldr	r1, [r7, #4]
 8004532:	4613      	mov	r3, r2
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3344      	adds	r3, #68	@ 0x44
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	334d      	adds	r3, #77	@ 0x4d
 8004552:	2204      	movs	r2, #4
 8004554:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	4611      	mov	r1, r2
 800455e:	4618      	mov	r0, r3
 8004560:	f003 fee7 	bl	8008332 <USB_HC_Halt>
 8004564:	e03f      	b.n	80045e6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004566:	78fa      	ldrb	r2, [r7, #3]
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	4613      	mov	r3, r2
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	440b      	add	r3, r1
 8004574:	3326      	adds	r3, #38	@ 0x26
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800457c:	78fa      	ldrb	r2, [r7, #3]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	4613      	mov	r3, r2
 8004582:	011b      	lsls	r3, r3, #4
 8004584:	1a9b      	subs	r3, r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	440b      	add	r3, r1
 800458a:	3326      	adds	r3, #38	@ 0x26
 800458c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800458e:	2b02      	cmp	r3, #2
 8004590:	d129      	bne.n	80045e6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	3344      	adds	r3, #68	@ 0x44
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	799b      	ldrb	r3, [r3, #6]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00a      	beq.n	80045c4 <HCD_HC_IN_IRQHandler+0xc2a>
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	331b      	adds	r3, #27
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d110      	bne.n	80045e6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	334d      	adds	r3, #77	@ 0x4d
 80045d4:	2204      	movs	r2, #4
 80045d6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	78fa      	ldrb	r2, [r7, #3]
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f003 fea6 	bl	8008332 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	331b      	adds	r3, #27
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d129      	bne.n	8004650 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80045fc:	78fa      	ldrb	r2, [r7, #3]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	1a9b      	subs	r3, r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	331b      	adds	r3, #27
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004610:	78fb      	ldrb	r3, [r7, #3]
 8004612:	015a      	lsls	r2, r3, #5
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	4413      	add	r3, r2
 8004618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	78fa      	ldrb	r2, [r7, #3]
 8004620:	0151      	lsls	r1, r2, #5
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	440a      	add	r2, r1
 8004626:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800462a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800462e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	4413      	add	r3, r2
 8004638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	78fa      	ldrb	r2, [r7, #3]
 8004640:	0151      	lsls	r1, r2, #5
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	440a      	add	r2, r1
 8004646:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800464a:	f043 0320 	orr.w	r3, r3, #32
 800464e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	015a      	lsls	r2, r3, #5
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800465c:	461a      	mov	r2, r3
 800465e:	2310      	movs	r3, #16
 8004660:	6093      	str	r3, [r2, #8]
 8004662:	e000      	b.n	8004666 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004664:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	460b      	mov	r3, r1
 8004676:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	78fa      	ldrb	r2, [r7, #3]
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f003 f8ad 	bl	80077ea <USB_ReadChInterrupts>
 8004690:	4603      	mov	r3, r0
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d11b      	bne.n	80046d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800469a:	78fb      	ldrb	r3, [r7, #3]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a6:	461a      	mov	r2, r3
 80046a8:	2304      	movs	r3, #4
 80046aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	1a9b      	subs	r3, r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	334d      	adds	r3, #77	@ 0x4d
 80046bc:	2207      	movs	r2, #7
 80046be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f003 fe32 	bl	8008332 <USB_HC_Halt>
 80046ce:	f000 bc89 	b.w	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	78fa      	ldrb	r2, [r7, #3]
 80046d8:	4611      	mov	r1, r2
 80046da:	4618      	mov	r0, r3
 80046dc:	f003 f885 	bl	80077ea <USB_ReadChInterrupts>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f003 0320 	and.w	r3, r3, #32
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	f040 8082 	bne.w	80047f0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f8:	461a      	mov	r2, r3
 80046fa:	2320      	movs	r3, #32
 80046fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	3319      	adds	r3, #25
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d124      	bne.n	800475e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004714:	78fa      	ldrb	r2, [r7, #3]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	3319      	adds	r3, #25
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004728:	78fa      	ldrb	r2, [r7, #3]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	011b      	lsls	r3, r3, #4
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	334c      	adds	r3, #76	@ 0x4c
 8004738:	2202      	movs	r2, #2
 800473a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	334d      	adds	r3, #77	@ 0x4d
 800474c:	2203      	movs	r2, #3
 800474e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f003 fdea 	bl	8008332 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	6879      	ldr	r1, [r7, #4]
 8004762:	4613      	mov	r3, r2
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	1a9b      	subs	r3, r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	440b      	add	r3, r1
 800476c:	331a      	adds	r3, #26
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	f040 8437 	bne.w	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
 8004776:	78fa      	ldrb	r2, [r7, #3]
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	4613      	mov	r3, r2
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	331b      	adds	r3, #27
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 842b 	bne.w	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	3326      	adds	r3, #38	@ 0x26
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d009      	beq.n	80047b8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80047a4:	78fa      	ldrb	r2, [r7, #3]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	011b      	lsls	r3, r3, #4
 80047ac:	1a9b      	subs	r3, r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	331b      	adds	r3, #27
 80047b4:	2201      	movs	r2, #1
 80047b6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	334d      	adds	r3, #77	@ 0x4d
 80047c8:	2203      	movs	r2, #3
 80047ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	78fa      	ldrb	r2, [r7, #3]
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f003 fdac 	bl	8008332 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80047da:	78fa      	ldrb	r2, [r7, #3]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	011b      	lsls	r3, r3, #4
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	3344      	adds	r3, #68	@ 0x44
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e3f9      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	4611      	mov	r1, r2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f002 fff6 	bl	80077ea <USB_ReadChInterrupts>
 80047fe:	4603      	mov	r3, r0
 8004800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004808:	d111      	bne.n	800482e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004816:	461a      	mov	r2, r3
 8004818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800481c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	4611      	mov	r1, r2
 8004826:	4618      	mov	r0, r3
 8004828:	f003 fd83 	bl	8008332 <USB_HC_Halt>
 800482c:	e3da      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f002 ffd7 	bl	80077ea <USB_ReadChInterrupts>
 800483c:	4603      	mov	r3, r0
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	d168      	bne.n	8004918 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	3344      	adds	r3, #68	@ 0x44
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f002 ffc1 	bl	80077ea <USB_ReadChInterrupts>
 8004868:	4603      	mov	r3, r0
 800486a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486e:	2b40      	cmp	r3, #64	@ 0x40
 8004870:	d112      	bne.n	8004898 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	3319      	adds	r3, #25
 8004882:	2201      	movs	r2, #1
 8004884:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4413      	add	r3, r2
 800488e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004892:	461a      	mov	r2, r3
 8004894:	2340      	movs	r3, #64	@ 0x40
 8004896:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	331b      	adds	r3, #27
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d019      	beq.n	80048e2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80048ae:	78fa      	ldrb	r2, [r7, #3]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	1a9b      	subs	r3, r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	331b      	adds	r3, #27
 80048be:	2200      	movs	r2, #0
 80048c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80048c2:	78fb      	ldrb	r3, [r7, #3]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	0151      	lsls	r1, r2, #5
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	440a      	add	r2, r1
 80048d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ee:	461a      	mov	r2, r3
 80048f0:	2301      	movs	r3, #1
 80048f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80048f4:	78fa      	ldrb	r2, [r7, #3]
 80048f6:	6879      	ldr	r1, [r7, #4]
 80048f8:	4613      	mov	r3, r2
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	334d      	adds	r3, #77	@ 0x4d
 8004904:	2201      	movs	r2, #1
 8004906:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	78fa      	ldrb	r2, [r7, #3]
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f003 fd0e 	bl	8008332 <USB_HC_Halt>
 8004916:	e365      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	78fa      	ldrb	r2, [r7, #3]
 800491e:	4611      	mov	r1, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f002 ff62 	bl	80077ea <USB_ReadChInterrupts>
 8004926:	4603      	mov	r3, r0
 8004928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492c:	2b40      	cmp	r3, #64	@ 0x40
 800492e:	d139      	bne.n	80049a4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	334d      	adds	r3, #77	@ 0x4d
 8004940:	2205      	movs	r2, #5
 8004942:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	331a      	adds	r3, #26
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d109      	bne.n	800496e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	3319      	adds	r3, #25
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	011b      	lsls	r3, r3, #4
 8004976:	1a9b      	subs	r3, r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	3344      	adds	r3, #68	@ 0x44
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f003 fcd1 	bl	8008332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800499c:	461a      	mov	r2, r3
 800499e:	2340      	movs	r3, #64	@ 0x40
 80049a0:	6093      	str	r3, [r2, #8]
 80049a2:	e31f      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	78fa      	ldrb	r2, [r7, #3]
 80049aa:	4611      	mov	r1, r2
 80049ac:	4618      	mov	r0, r3
 80049ae:	f002 ff1c 	bl	80077ea <USB_ReadChInterrupts>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d11a      	bne.n	80049f2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049c8:	461a      	mov	r2, r3
 80049ca:	2308      	movs	r3, #8
 80049cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	334d      	adds	r3, #77	@ 0x4d
 80049de:	2206      	movs	r2, #6
 80049e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f003 fca1 	bl	8008332 <USB_HC_Halt>
 80049f0:	e2f8      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	4611      	mov	r1, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f002 fef5 	bl	80077ea <USB_ReadChInterrupts>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d144      	bne.n	8004a94 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	3344      	adds	r3, #68	@ 0x44
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004a1e:	78fa      	ldrb	r2, [r7, #3]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	1a9b      	subs	r3, r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	334d      	adds	r3, #77	@ 0x4d
 8004a2e:	2204      	movs	r2, #4
 8004a30:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004a32:	78fa      	ldrb	r2, [r7, #3]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	011b      	lsls	r3, r3, #4
 8004a3a:	1a9b      	subs	r3, r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	3319      	adds	r3, #25
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d114      	bne.n	8004a72 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004a48:	78fa      	ldrb	r2, [r7, #3]
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	1a9b      	subs	r3, r3, r2
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	440b      	add	r3, r1
 8004a56:	3318      	adds	r3, #24
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004a5e:	78fa      	ldrb	r2, [r7, #3]
 8004a60:	6879      	ldr	r1, [r7, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	1a9b      	subs	r3, r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	440b      	add	r3, r1
 8004a6c:	3319      	adds	r3, #25
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	78fa      	ldrb	r2, [r7, #3]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f003 fc59 	bl	8008332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	2310      	movs	r3, #16
 8004a90:	6093      	str	r3, [r2, #8]
 8004a92:	e2a7      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f002 fea4 	bl	80077ea <USB_ReadChInterrupts>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa8:	2b80      	cmp	r3, #128	@ 0x80
 8004aaa:	f040 8083 	bne.w	8004bb4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	799b      	ldrb	r3, [r3, #6]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d111      	bne.n	8004ada <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	334d      	adds	r3, #77	@ 0x4d
 8004ac6:	2207      	movs	r2, #7
 8004ac8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	78fa      	ldrb	r2, [r7, #3]
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f003 fc2d 	bl	8008332 <USB_HC_Halt>
 8004ad8:	e062      	b.n	8004ba0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3344      	adds	r3, #68	@ 0x44
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	1c59      	adds	r1, r3, #1
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4403      	add	r3, r0
 8004afa:	3344      	adds	r3, #68	@ 0x44
 8004afc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004afe:	78fa      	ldrb	r2, [r7, #3]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	3344      	adds	r3, #68	@ 0x44
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d922      	bls.n	8004b5a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	011b      	lsls	r3, r3, #4
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	3344      	adds	r3, #68	@ 0x44
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	334c      	adds	r3, #76	@ 0x4c
 8004b38:	2204      	movs	r2, #4
 8004b3a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	334c      	adds	r3, #76	@ 0x4c
 8004b4c:	781a      	ldrb	r2, [r3, #0]
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f005 ff46 	bl	800a9e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004b58:	e022      	b.n	8004ba0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b5a:	78fa      	ldrb	r2, [r7, #3]
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	334c      	adds	r3, #76	@ 0x4c
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b6e:	78fb      	ldrb	r3, [r7, #3]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b84:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b8c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b8e:	78fb      	ldrb	r3, [r7, #3]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bac:	461a      	mov	r2, r3
 8004bae:	2380      	movs	r3, #128	@ 0x80
 8004bb0:	6093      	str	r3, [r2, #8]
 8004bb2:	e217      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	78fa      	ldrb	r2, [r7, #3]
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f002 fe14 	bl	80077ea <USB_ReadChInterrupts>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bcc:	d11b      	bne.n	8004c06 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004bce:	78fa      	ldrb	r2, [r7, #3]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	011b      	lsls	r3, r3, #4
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	334d      	adds	r3, #77	@ 0x4d
 8004bde:	2209      	movs	r2, #9
 8004be0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f003 fba1 	bl	8008332 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004bf0:	78fb      	ldrb	r3, [r7, #3]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c02:	6093      	str	r3, [r2, #8]
 8004c04:	e1ee      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	78fa      	ldrb	r2, [r7, #3]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f002 fdeb 	bl	80077ea <USB_ReadChInterrupts>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	f040 81df 	bne.w	8004fde <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	2302      	movs	r3, #2
 8004c30:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004c32:	78fa      	ldrb	r2, [r7, #3]
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	4613      	mov	r3, r2
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	1a9b      	subs	r3, r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	440b      	add	r3, r1
 8004c40:	334d      	adds	r3, #77	@ 0x4d
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	f040 8093 	bne.w	8004d70 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c4a:	78fa      	ldrb	r2, [r7, #3]
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	011b      	lsls	r3, r3, #4
 8004c52:	1a9b      	subs	r3, r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	334d      	adds	r3, #77	@ 0x4d
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004c5e:	78fa      	ldrb	r2, [r7, #3]
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	4613      	mov	r3, r2
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	334c      	adds	r3, #76	@ 0x4c
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c72:	78fa      	ldrb	r2, [r7, #3]
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	4613      	mov	r3, r2
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	440b      	add	r3, r1
 8004c80:	3326      	adds	r3, #38	@ 0x26
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d00b      	beq.n	8004ca0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	1a9b      	subs	r3, r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	3326      	adds	r3, #38	@ 0x26
 8004c98:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	f040 8190 	bne.w	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	799b      	ldrb	r3, [r3, #6]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d115      	bne.n	8004cd4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	333d      	adds	r3, #61	@ 0x3d
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	78fa      	ldrb	r2, [r7, #3]
 8004cbc:	f083 0301 	eor.w	r3, r3, #1
 8004cc0:	b2d8      	uxtb	r0, r3
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	333d      	adds	r3, #61	@ 0x3d
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	799b      	ldrb	r3, [r3, #6]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	f040 8171 	bne.w	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
 8004cde:	78fa      	ldrb	r2, [r7, #3]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	011b      	lsls	r3, r3, #4
 8004ce6:	1a9b      	subs	r3, r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3334      	adds	r3, #52	@ 0x34
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8165 	beq.w	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004cf6:	78fa      	ldrb	r2, [r7, #3]
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3334      	adds	r3, #52	@ 0x34
 8004d06:	6819      	ldr	r1, [r3, #0]
 8004d08:	78fa      	ldrb	r2, [r7, #3]
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4403      	add	r3, r0
 8004d16:	3328      	adds	r3, #40	@ 0x28
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	440b      	add	r3, r1
 8004d1c:	1e59      	subs	r1, r3, #1
 8004d1e:	78fa      	ldrb	r2, [r7, #3]
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4403      	add	r3, r0
 8004d2c:	3328      	adds	r3, #40	@ 0x28
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d34:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 813f 	beq.w	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	333d      	adds	r3, #61	@ 0x3d
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	f083 0301 	eor.w	r3, r3, #1
 8004d5a:	b2d8      	uxtb	r0, r3
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	333d      	adds	r3, #61	@ 0x3d
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e127      	b.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004d70:	78fa      	ldrb	r2, [r7, #3]
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	334d      	adds	r3, #77	@ 0x4d
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	d120      	bne.n	8004dc8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d86:	78fa      	ldrb	r2, [r7, #3]
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	011b      	lsls	r3, r3, #4
 8004d8e:	1a9b      	subs	r3, r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	440b      	add	r3, r1
 8004d94:	334d      	adds	r3, #77	@ 0x4d
 8004d96:	2202      	movs	r2, #2
 8004d98:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	440b      	add	r3, r1
 8004da8:	331b      	adds	r3, #27
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	f040 8107 	bne.w	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	334c      	adds	r3, #76	@ 0x4c
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	e0fb      	b.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004dc8:	78fa      	ldrb	r2, [r7, #3]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	1a9b      	subs	r3, r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	334d      	adds	r3, #77	@ 0x4d
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d13a      	bne.n	8004e54 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	334d      	adds	r3, #77	@ 0x4d
 8004dee:	2202      	movs	r2, #2
 8004df0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	6879      	ldr	r1, [r7, #4]
 8004df6:	4613      	mov	r3, r2
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	1a9b      	subs	r3, r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	440b      	add	r3, r1
 8004e00:	334c      	adds	r3, #76	@ 0x4c
 8004e02:	2202      	movs	r2, #2
 8004e04:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	1a9b      	subs	r3, r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	331b      	adds	r3, #27
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	f040 80d1 	bne.w	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	331b      	adds	r3, #27
 8004e2e:	2200      	movs	r2, #0
 8004e30:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e50:	6053      	str	r3, [r2, #4]
 8004e52:	e0b5      	b.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004e54:	78fa      	ldrb	r2, [r7, #3]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	1a9b      	subs	r3, r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	334d      	adds	r3, #77	@ 0x4d
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b05      	cmp	r3, #5
 8004e68:	d114      	bne.n	8004e94 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e6a:	78fa      	ldrb	r2, [r7, #3]
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	1a9b      	subs	r3, r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	334d      	adds	r3, #77	@ 0x4d
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	334c      	adds	r3, #76	@ 0x4c
 8004e8e:	2202      	movs	r2, #2
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	e095      	b.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004e94:	78fa      	ldrb	r2, [r7, #3]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	1a9b      	subs	r3, r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	334d      	adds	r3, #77	@ 0x4d
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d114      	bne.n	8004ed4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	6879      	ldr	r1, [r7, #4]
 8004eae:	4613      	mov	r3, r2
 8004eb0:	011b      	lsls	r3, r3, #4
 8004eb2:	1a9b      	subs	r3, r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	334d      	adds	r3, #77	@ 0x4d
 8004eba:	2202      	movs	r2, #2
 8004ebc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004ebe:	78fa      	ldrb	r2, [r7, #3]
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	011b      	lsls	r3, r3, #4
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	334c      	adds	r3, #76	@ 0x4c
 8004ece:	2205      	movs	r2, #5
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e075      	b.n	8004fc0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ed4:	78fa      	ldrb	r2, [r7, #3]
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	1a9b      	subs	r3, r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	334d      	adds	r3, #77	@ 0x4d
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b07      	cmp	r3, #7
 8004ee8:	d00a      	beq.n	8004f00 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	334d      	adds	r3, #77	@ 0x4d
 8004efa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004efc:	2b09      	cmp	r3, #9
 8004efe:	d170      	bne.n	8004fe2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f00:	78fa      	ldrb	r2, [r7, #3]
 8004f02:	6879      	ldr	r1, [r7, #4]
 8004f04:	4613      	mov	r3, r2
 8004f06:	011b      	lsls	r3, r3, #4
 8004f08:	1a9b      	subs	r3, r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	440b      	add	r3, r1
 8004f0e:	334d      	adds	r3, #77	@ 0x4d
 8004f10:	2202      	movs	r2, #2
 8004f12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	3344      	adds	r3, #68	@ 0x44
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	1c59      	adds	r1, r3, #1
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	1a9b      	subs	r3, r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4403      	add	r3, r0
 8004f34:	3344      	adds	r3, #68	@ 0x44
 8004f36:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	3344      	adds	r3, #68	@ 0x44
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d914      	bls.n	8004f78 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	3344      	adds	r3, #68	@ 0x44
 8004f5e:	2200      	movs	r2, #0
 8004f60:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	1a9b      	subs	r3, r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	334c      	adds	r3, #76	@ 0x4c
 8004f72:	2204      	movs	r2, #4
 8004f74:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f76:	e022      	b.n	8004fbe <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f78:	78fa      	ldrb	r2, [r7, #3]
 8004f7a:	6879      	ldr	r1, [r7, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	011b      	lsls	r3, r3, #4
 8004f80:	1a9b      	subs	r3, r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	334c      	adds	r3, #76	@ 0x4c
 8004f88:	2202      	movs	r2, #2
 8004f8a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fa2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004faa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004fac:	78fb      	ldrb	r3, [r7, #3]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004fbe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fc0:	78fa      	ldrb	r2, [r7, #3]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	011b      	lsls	r3, r3, #4
 8004fc8:	1a9b      	subs	r3, r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	334c      	adds	r3, #76	@ 0x4c
 8004fd0:	781a      	ldrb	r2, [r3, #0]
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f005 fd04 	bl	800a9e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004fdc:	e002      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004fe2:	bf00      	nop
  }
}
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b08a      	sub	sp, #40	@ 0x28
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	0c5b      	lsrs	r3, r3, #17
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	091b      	lsrs	r3, r3, #4
 800501a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800501e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d004      	beq.n	8005030 <HCD_RXQLVL_IRQHandler+0x46>
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b05      	cmp	r3, #5
 800502a:	f000 80b6 	beq.w	800519a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800502e:	e0b7      	b.n	80051a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 80b3 	beq.w	800519e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4613      	mov	r3, r2
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	332c      	adds	r3, #44	@ 0x2c
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80a7 	beq.w	800519e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4613      	mov	r3, r2
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	1a9b      	subs	r3, r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	3338      	adds	r3, #56	@ 0x38
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	18d1      	adds	r1, r2, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4613      	mov	r3, r2
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	1a9b      	subs	r3, r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4403      	add	r3, r0
 8005074:	3334      	adds	r3, #52	@ 0x34
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4299      	cmp	r1, r3
 800507a:	f200 8083 	bhi.w	8005184 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	69ba      	ldr	r2, [r7, #24]
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	332c      	adds	r3, #44	@ 0x2c
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	b292      	uxth	r2, r2
 8005098:	4619      	mov	r1, r3
 800509a:	f002 fb3b 	bl	8007714 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4613      	mov	r3, r2
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	332c      	adds	r3, #44	@ 0x2c
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	18d1      	adds	r1, r2, r3
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	4613      	mov	r3, r2
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4403      	add	r3, r0
 80050c2:	332c      	adds	r3, #44	@ 0x2c
 80050c4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	69ba      	ldr	r2, [r7, #24]
 80050ca:	4613      	mov	r3, r2
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3338      	adds	r3, #56	@ 0x38
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	18d1      	adds	r1, r2, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4613      	mov	r3, r2
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4403      	add	r3, r0
 80050ea:	3338      	adds	r3, #56	@ 0x38
 80050ec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	0cdb      	lsrs	r3, r3, #19
 80050fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005102:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4613      	mov	r3, r2
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	1a9b      	subs	r3, r3, r2
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	440b      	add	r3, r1
 8005112:	3328      	adds	r3, #40	@ 0x28
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	461a      	mov	r2, r3
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	4293      	cmp	r3, r2
 800511c:	d13f      	bne.n	800519e <HCD_RXQLVL_IRQHandler+0x1b4>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d03c      	beq.n	800519e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800513a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005142:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005150:	461a      	mov	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	4613      	mov	r3, r2
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	333c      	adds	r3, #60	@ 0x3c
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	f083 0301 	eor.w	r3, r3, #1
 800516c:	b2d8      	uxtb	r0, r3
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4613      	mov	r3, r2
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	440b      	add	r3, r1
 800517c:	333c      	adds	r3, #60	@ 0x3c
 800517e:	4602      	mov	r2, r0
 8005180:	701a      	strb	r2, [r3, #0]
      break;
 8005182:	e00c      	b.n	800519e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	4613      	mov	r3, r2
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	334c      	adds	r3, #76	@ 0x4c
 8005194:	2204      	movs	r2, #4
 8005196:	701a      	strb	r2, [r3, #0]
      break;
 8005198:	e001      	b.n	800519e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800519a:	bf00      	nop
 800519c:	e000      	b.n	80051a0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800519e:	bf00      	nop
  }
}
 80051a0:	bf00      	nop
 80051a2:	3728      	adds	r7, #40	@ 0x28
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80051d4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d10b      	bne.n	80051f8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d102      	bne.n	80051f0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f005 fbde 	bl	800a9ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	f043 0302 	orr.w	r3, r3, #2
 80051f6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d132      	bne.n	8005268 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f043 0308 	orr.w	r3, r3, #8
 8005208:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b04      	cmp	r3, #4
 8005212:	d126      	bne.n	8005262 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	7a5b      	ldrb	r3, [r3, #9]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d113      	bne.n	8005244 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005222:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005226:	d106      	bne.n	8005236 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2102      	movs	r1, #2
 800522e:	4618      	mov	r0, r3
 8005230:	f002 fc00 	bl	8007a34 <USB_InitFSLSPClkSel>
 8005234:	e011      	b.n	800525a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2101      	movs	r1, #1
 800523c:	4618      	mov	r0, r3
 800523e:	f002 fbf9 	bl	8007a34 <USB_InitFSLSPClkSel>
 8005242:	e00a      	b.n	800525a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	79db      	ldrb	r3, [r3, #7]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d106      	bne.n	800525a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005252:	461a      	mov	r2, r3
 8005254:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005258:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f005 fbd0 	bl	800aa00 <HAL_HCD_PortEnabled_Callback>
 8005260:	e002      	b.n	8005268 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f005 fbda 	bl	800aa1c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b20      	cmp	r3, #32
 8005270:	d103      	bne.n	800527a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f043 0320 	orr.w	r3, r3, #32
 8005278:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005280:	461a      	mov	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6013      	str	r3, [r2, #0]
}
 8005286:	bf00      	nop
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e12b      	b.n	80054fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fd f8e0 	bl	800247c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2224      	movs	r2, #36	@ 0x24
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0201 	bic.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052f4:	f001 fa20 	bl	8006738 <HAL_RCC_GetPCLK1Freq>
 80052f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	4a81      	ldr	r2, [pc, #516]	@ (8005504 <HAL_I2C_Init+0x274>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d807      	bhi.n	8005314 <HAL_I2C_Init+0x84>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a80      	ldr	r2, [pc, #512]	@ (8005508 <HAL_I2C_Init+0x278>)
 8005308:	4293      	cmp	r3, r2
 800530a:	bf94      	ite	ls
 800530c:	2301      	movls	r3, #1
 800530e:	2300      	movhi	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e006      	b.n	8005322 <HAL_I2C_Init+0x92>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	4a7d      	ldr	r2, [pc, #500]	@ (800550c <HAL_I2C_Init+0x27c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	bf94      	ite	ls
 800531c:	2301      	movls	r3, #1
 800531e:	2300      	movhi	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e0e7      	b.n	80054fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4a78      	ldr	r2, [pc, #480]	@ (8005510 <HAL_I2C_Init+0x280>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	0c9b      	lsrs	r3, r3, #18
 8005334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a6a      	ldr	r2, [pc, #424]	@ (8005504 <HAL_I2C_Init+0x274>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d802      	bhi.n	8005364 <HAL_I2C_Init+0xd4>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	3301      	adds	r3, #1
 8005362:	e009      	b.n	8005378 <HAL_I2C_Init+0xe8>
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	4a69      	ldr	r2, [pc, #420]	@ (8005514 <HAL_I2C_Init+0x284>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	099b      	lsrs	r3, r3, #6
 8005376:	3301      	adds	r3, #1
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6812      	ldr	r2, [r2, #0]
 800537c:	430b      	orrs	r3, r1
 800537e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	69db      	ldr	r3, [r3, #28]
 8005386:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800538a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	495c      	ldr	r1, [pc, #368]	@ (8005504 <HAL_I2C_Init+0x274>)
 8005394:	428b      	cmp	r3, r1
 8005396:	d819      	bhi.n	80053cc <HAL_I2C_Init+0x13c>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	1e59      	subs	r1, r3, #1
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80053a6:	1c59      	adds	r1, r3, #1
 80053a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80053ac:	400b      	ands	r3, r1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <HAL_I2C_Init+0x138>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1e59      	subs	r1, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80053c0:	3301      	adds	r3, #1
 80053c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c6:	e051      	b.n	800546c <HAL_I2C_Init+0x1dc>
 80053c8:	2304      	movs	r3, #4
 80053ca:	e04f      	b.n	800546c <HAL_I2C_Init+0x1dc>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d111      	bne.n	80053f8 <HAL_I2C_Init+0x168>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1e58      	subs	r0, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	440b      	add	r3, r1
 80053e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e6:	3301      	adds	r3, #1
 80053e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e012      	b.n	800541e <HAL_I2C_Init+0x18e>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	1e58      	subs	r0, r3, #1
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6859      	ldr	r1, [r3, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	0099      	lsls	r1, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	fbb0 f3f3 	udiv	r3, r0, r3
 800540e:	3301      	adds	r3, #1
 8005410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <HAL_I2C_Init+0x196>
 8005422:	2301      	movs	r3, #1
 8005424:	e022      	b.n	800546c <HAL_I2C_Init+0x1dc>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10e      	bne.n	800544c <HAL_I2C_Init+0x1bc>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1e58      	subs	r0, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	005b      	lsls	r3, r3, #1
 800543a:	440b      	add	r3, r1
 800543c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005440:	3301      	adds	r3, #1
 8005442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800544a:	e00f      	b.n	800546c <HAL_I2C_Init+0x1dc>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1e58      	subs	r0, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6859      	ldr	r1, [r3, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	0099      	lsls	r1, r3, #2
 800545c:	440b      	add	r3, r1
 800545e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005462:	3301      	adds	r3, #1
 8005464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005468:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800546c:	6879      	ldr	r1, [r7, #4]
 800546e:	6809      	ldr	r1, [r1, #0]
 8005470:	4313      	orrs	r3, r2
 8005472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800549a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6911      	ldr	r1, [r2, #16]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68d2      	ldr	r2, [r2, #12]
 80054a6:	4311      	orrs	r1, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	430b      	orrs	r3, r1
 80054ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	695a      	ldr	r2, [r3, #20]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	000186a0 	.word	0x000186a0
 8005508:	001e847f 	.word	0x001e847f
 800550c:	003d08ff 	.word	0x003d08ff
 8005510:	431bde83 	.word	0x431bde83
 8005514:	10624dd3 	.word	0x10624dd3

08005518 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e128      	b.n	800577c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d109      	bne.n	800554a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a90      	ldr	r2, [pc, #576]	@ (8005784 <HAL_I2S_Init+0x26c>)
 8005542:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fc ffe1 	bl	800250c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005560:	f023 030f 	bic.w	r3, r3, #15
 8005564:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2202      	movs	r2, #2
 800556c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	2b02      	cmp	r3, #2
 8005574:	d060      	beq.n	8005638 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800557e:	2310      	movs	r3, #16
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e001      	b.n	8005588 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005584:	2320      	movs	r3, #32
 8005586:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	2b20      	cmp	r3, #32
 800558e:	d802      	bhi.n	8005596 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005596:	2001      	movs	r0, #1
 8005598:	f001 f9d8 	bl	800694c <HAL_RCCEx_GetPeriphCLKFreq>
 800559c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055a6:	d125      	bne.n	80055f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	3305      	adds	r3, #5
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	e01f      	b.n	8005612 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055dc:	4613      	mov	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4413      	add	r3, r2
 80055e2:	005b      	lsls	r3, r3, #1
 80055e4:	461a      	mov	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ee:	3305      	adds	r3, #5
 80055f0:	613b      	str	r3, [r7, #16]
 80055f2:	e00e      	b.n	8005612 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80055fc:	4613      	mov	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	4413      	add	r3, r2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	461a      	mov	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	fbb2 f3f3 	udiv	r3, r2, r3
 800560e:	3305      	adds	r3, #5
 8005610:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4a5c      	ldr	r2, [pc, #368]	@ (8005788 <HAL_I2S_Init+0x270>)
 8005616:	fba2 2303 	umull	r2, r3, r2, r3
 800561a:	08db      	lsrs	r3, r3, #3
 800561c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f003 0301 	and.w	r3, r3, #1
 8005624:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	085b      	lsrs	r3, r3, #1
 800562e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	e003      	b.n	8005640 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005638:	2302      	movs	r3, #2
 800563a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d902      	bls.n	800564c <HAL_I2S_Init+0x134>
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	2bff      	cmp	r3, #255	@ 0xff
 800564a:	d907      	bls.n	800565c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005650:	f043 0210 	orr.w	r2, r3, #16
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e08f      	b.n	800577c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	ea42 0103 	orr.w	r1, r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	430a      	orrs	r2, r1
 800566e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800567a:	f023 030f 	bic.w	r3, r3, #15
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6851      	ldr	r1, [r2, #4]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	6892      	ldr	r2, [r2, #8]
 8005686:	4311      	orrs	r1, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68d2      	ldr	r2, [r2, #12]
 800568c:	4311      	orrs	r1, r2
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6992      	ldr	r2, [r2, #24]
 8005692:	430a      	orrs	r2, r1
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800569e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d161      	bne.n	800576c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a38      	ldr	r2, [pc, #224]	@ (800578c <HAL_I2S_Init+0x274>)
 80056ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a37      	ldr	r2, [pc, #220]	@ (8005790 <HAL_I2S_Init+0x278>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_I2S_Init+0x1a4>
 80056b8:	4b36      	ldr	r3, [pc, #216]	@ (8005794 <HAL_I2S_Init+0x27c>)
 80056ba:	e001      	b.n	80056c0 <HAL_I2S_Init+0x1a8>
 80056bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	6812      	ldr	r2, [r2, #0]
 80056c6:	4932      	ldr	r1, [pc, #200]	@ (8005790 <HAL_I2S_Init+0x278>)
 80056c8:	428a      	cmp	r2, r1
 80056ca:	d101      	bne.n	80056d0 <HAL_I2S_Init+0x1b8>
 80056cc:	4a31      	ldr	r2, [pc, #196]	@ (8005794 <HAL_I2S_Init+0x27c>)
 80056ce:	e001      	b.n	80056d4 <HAL_I2S_Init+0x1bc>
 80056d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80056d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80056d8:	f023 030f 	bic.w	r3, r3, #15
 80056dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a2b      	ldr	r2, [pc, #172]	@ (8005790 <HAL_I2S_Init+0x278>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d101      	bne.n	80056ec <HAL_I2S_Init+0x1d4>
 80056e8:	4b2a      	ldr	r3, [pc, #168]	@ (8005794 <HAL_I2S_Init+0x27c>)
 80056ea:	e001      	b.n	80056f0 <HAL_I2S_Init+0x1d8>
 80056ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056f0:	2202      	movs	r2, #2
 80056f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a25      	ldr	r2, [pc, #148]	@ (8005790 <HAL_I2S_Init+0x278>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d101      	bne.n	8005702 <HAL_I2S_Init+0x1ea>
 80056fe:	4b25      	ldr	r3, [pc, #148]	@ (8005794 <HAL_I2S_Init+0x27c>)
 8005700:	e001      	b.n	8005706 <HAL_I2S_Init+0x1ee>
 8005702:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005712:	d003      	beq.n	800571c <HAL_I2S_Init+0x204>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800571c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	e001      	b.n	8005728 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005724:	2300      	movs	r3, #0
 8005726:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005732:	4313      	orrs	r3, r2
 8005734:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800573c:	4313      	orrs	r3, r2
 800573e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005746:	4313      	orrs	r3, r2
 8005748:	b29a      	uxth	r2, r3
 800574a:	897b      	ldrh	r3, [r7, #10]
 800574c:	4313      	orrs	r3, r2
 800574e:	b29b      	uxth	r3, r3
 8005750:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005754:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a0d      	ldr	r2, [pc, #52]	@ (8005790 <HAL_I2S_Init+0x278>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d101      	bne.n	8005764 <HAL_I2S_Init+0x24c>
 8005760:	4b0c      	ldr	r3, [pc, #48]	@ (8005794 <HAL_I2S_Init+0x27c>)
 8005762:	e001      	b.n	8005768 <HAL_I2S_Init+0x250>
 8005764:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005768:	897a      	ldrh	r2, [r7, #10]
 800576a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3720      	adds	r7, #32
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	0800588f 	.word	0x0800588f
 8005788:	cccccccd 	.word	0xcccccccd
 800578c:	080059a5 	.word	0x080059a5
 8005790:	40003800 	.word	0x40003800
 8005794:	40003400 	.word	0x40003400

08005798 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	881a      	ldrh	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	1c9a      	adds	r2, r3, #2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10e      	bne.n	8005828 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005818:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f7ff ffb8 	bl	8005798 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005828:	bf00      	nop
 800582a:	3708      	adds	r7, #8
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	b292      	uxth	r2, r2
 8005844:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584a:	1c9a      	adds	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10e      	bne.n	8005886 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005876:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff ff93 	bl	80057ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005886:	bf00      	nop
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d13a      	bne.n	8005920 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d109      	bne.n	80058c8 <I2S_IRQHandler+0x3a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058be:	2b40      	cmp	r3, #64	@ 0x40
 80058c0:	d102      	bne.n	80058c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff ffb4 	bl	8005830 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ce:	2b40      	cmp	r3, #64	@ 0x40
 80058d0:	d126      	bne.n	8005920 <I2S_IRQHandler+0x92>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b20      	cmp	r3, #32
 80058de:	d11f      	bne.n	8005920 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80058ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058f0:	2300      	movs	r3, #0
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	f043 0202 	orr.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ff50 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b03      	cmp	r3, #3
 800592a:	d136      	bne.n	800599a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d109      	bne.n	800594a <I2S_IRQHandler+0xbc>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005940:	2b80      	cmp	r3, #128	@ 0x80
 8005942:	d102      	bne.n	800594a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ff45 	bl	80057d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b08      	cmp	r3, #8
 8005952:	d122      	bne.n	800599a <I2S_IRQHandler+0x10c>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b20      	cmp	r3, #32
 8005960:	d11b      	bne.n	800599a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685a      	ldr	r2, [r3, #4]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005970:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598c:	f043 0204 	orr.w	r2, r3, #4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f7ff ff13 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a92      	ldr	r2, [pc, #584]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80059be:	4b92      	ldr	r3, [pc, #584]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059c0:	e001      	b.n	80059c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80059c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a8b      	ldr	r2, [pc, #556]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d101      	bne.n	80059e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80059dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059de:	e001      	b.n	80059e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80059e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059f0:	d004      	beq.n	80059fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f040 8099 	bne.w	8005b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d107      	bne.n	8005a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f925 	bl	8005c60 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d107      	bne.n	8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f9c8 	bl	8005dc0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a36:	2b40      	cmp	r3, #64	@ 0x40
 8005a38:	d13a      	bne.n	8005ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d035      	beq.n	8005ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a6e      	ldr	r2, [pc, #440]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d101      	bne.n	8005a52 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a50:	e001      	b.n	8005a56 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005a52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4969      	ldr	r1, [pc, #420]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a5e:	428b      	cmp	r3, r1
 8005a60:	d101      	bne.n	8005a66 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005a62:	4b69      	ldr	r3, [pc, #420]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a64:	e001      	b.n	8005a6a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005a66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005a6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a6e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005a7e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a80:	2300      	movs	r3, #0
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa2:	f043 0202 	orr.w	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7ff fe88 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	f040 80c3 	bne.w	8005c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 80bd 	beq.w	8005c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ad6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a49      	ldr	r2, [pc, #292]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d101      	bne.n	8005ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005ae2:	4b49      	ldr	r3, [pc, #292]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ae4:	e001      	b.n	8005aea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005ae6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4944      	ldr	r1, [pc, #272]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005af2:	428b      	cmp	r3, r1
 8005af4:	d101      	bne.n	8005afa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005af6:	4b44      	ldr	r3, [pc, #272]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005af8:	e001      	b.n	8005afe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005afa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005afe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b02:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b04:	2300      	movs	r3, #0
 8005b06:	60bb      	str	r3, [r7, #8]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	60bb      	str	r3, [r7, #8]
 8005b10:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1e:	f043 0204 	orr.w	r2, r3, #4
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f7ff fe4a 	bl	80057c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b2c:	e089      	b.n	8005c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b02      	cmp	r3, #2
 8005b36:	d107      	bne.n	8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f8be 	bl	8005cc4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d107      	bne.n	8005b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f8fd 	bl	8005d5c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b68:	2b40      	cmp	r3, #64	@ 0x40
 8005b6a:	d12f      	bne.n	8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f003 0320 	and.w	r3, r3, #32
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d02a      	beq.n	8005bcc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005b84:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d101      	bne.n	8005b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005b90:	4b1d      	ldr	r3, [pc, #116]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b92:	e001      	b.n	8005b98 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005b94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4919      	ldr	r1, [pc, #100]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005ba4:	4b18      	ldr	r3, [pc, #96]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ba6:	e001      	b.n	8005bac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005ba8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005bb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbe:	f043 0202 	orr.w	r2, r3, #2
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f7ff fdfa 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d136      	bne.n	8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d031      	beq.n	8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a07      	ldr	r2, [pc, #28]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d101      	bne.n	8005bee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005bea:	4b07      	ldr	r3, [pc, #28]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bec:	e001      	b.n	8005bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005bee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4902      	ldr	r1, [pc, #8]	@ (8005c04 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bfa:	428b      	cmp	r3, r1
 8005bfc:	d106      	bne.n	8005c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005bfe:	4b02      	ldr	r3, [pc, #8]	@ (8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c00:	e006      	b.n	8005c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005c02:	bf00      	nop
 8005c04:	40003800 	.word	0x40003800
 8005c08:	40003400 	.word	0x40003400
 8005c0c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c10:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c14:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c24:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c32:	f043 0204 	orr.w	r2, r3, #4
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff fdc0 	bl	80057c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c40:	e000      	b.n	8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c42:	bf00      	nop
}
 8005c44:	bf00      	nop
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6c:	1c99      	adds	r1, r3, #2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6251      	str	r1, [r2, #36]	@ 0x24
 8005c72:	881a      	ldrh	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d113      	bne.n	8005cba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ca0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff ffc9 	bl	8005c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd0:	1c99      	adds	r1, r3, #2
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6251      	str	r1, [r2, #36]	@ 0x24
 8005cd6:	8819      	ldrh	r1, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d54 <I2SEx_TxISR_I2SExt+0x90>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d101      	bne.n	8005ce6 <I2SEx_TxISR_I2SExt+0x22>
 8005ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d58 <I2SEx_TxISR_I2SExt+0x94>)
 8005ce4:	e001      	b.n	8005cea <I2SEx_TxISR_I2SExt+0x26>
 8005ce6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cea:	460a      	mov	r2, r1
 8005cec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d121      	bne.n	8005d4a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a12      	ldr	r2, [pc, #72]	@ (8005d54 <I2SEx_TxISR_I2SExt+0x90>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d101      	bne.n	8005d14 <I2SEx_TxISR_I2SExt+0x50>
 8005d10:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <I2SEx_TxISR_I2SExt+0x94>)
 8005d12:	e001      	b.n	8005d18 <I2SEx_TxISR_I2SExt+0x54>
 8005d14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d18:	685a      	ldr	r2, [r3, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	490d      	ldr	r1, [pc, #52]	@ (8005d54 <I2SEx_TxISR_I2SExt+0x90>)
 8005d20:	428b      	cmp	r3, r1
 8005d22:	d101      	bne.n	8005d28 <I2SEx_TxISR_I2SExt+0x64>
 8005d24:	4b0c      	ldr	r3, [pc, #48]	@ (8005d58 <I2SEx_TxISR_I2SExt+0x94>)
 8005d26:	e001      	b.n	8005d2c <I2SEx_TxISR_I2SExt+0x68>
 8005d28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d106      	bne.n	8005d4a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ff81 	bl	8005c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d4a:	bf00      	nop
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	40003800 	.word	0x40003800
 8005d58:	40003400 	.word	0x40003400

08005d5c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68d8      	ldr	r0, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d6e:	1c99      	adds	r1, r3, #2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005d74:	b282      	uxth	r2, r0
 8005d76:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d113      	bne.n	8005db8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d9e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff ff4a 	bl	8005c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005db8:	bf00      	nop
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a20      	ldr	r2, [pc, #128]	@ (8005e50 <I2SEx_RxISR_I2SExt+0x90>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d101      	bne.n	8005dd6 <I2SEx_RxISR_I2SExt+0x16>
 8005dd2:	4b20      	ldr	r3, [pc, #128]	@ (8005e54 <I2SEx_RxISR_I2SExt+0x94>)
 8005dd4:	e001      	b.n	8005dda <I2SEx_RxISR_I2SExt+0x1a>
 8005dd6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dda:	68d8      	ldr	r0, [r3, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de0:	1c99      	adds	r1, r3, #2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005de6:	b282      	uxth	r2, r0
 8005de8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d121      	bne.n	8005e46 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a12      	ldr	r2, [pc, #72]	@ (8005e50 <I2SEx_RxISR_I2SExt+0x90>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d101      	bne.n	8005e10 <I2SEx_RxISR_I2SExt+0x50>
 8005e0c:	4b11      	ldr	r3, [pc, #68]	@ (8005e54 <I2SEx_RxISR_I2SExt+0x94>)
 8005e0e:	e001      	b.n	8005e14 <I2SEx_RxISR_I2SExt+0x54>
 8005e10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	490d      	ldr	r1, [pc, #52]	@ (8005e50 <I2SEx_RxISR_I2SExt+0x90>)
 8005e1c:	428b      	cmp	r3, r1
 8005e1e:	d101      	bne.n	8005e24 <I2SEx_RxISR_I2SExt+0x64>
 8005e20:	4b0c      	ldr	r3, [pc, #48]	@ (8005e54 <I2SEx_RxISR_I2SExt+0x94>)
 8005e22:	e001      	b.n	8005e28 <I2SEx_RxISR_I2SExt+0x68>
 8005e24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e2c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d106      	bne.n	8005e46 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f7ff ff03 	bl	8005c4c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e46:	bf00      	nop
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	40003800 	.word	0x40003800
 8005e54:	40003400 	.word	0x40003400

08005e58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d101      	bne.n	8005e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e267      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d075      	beq.n	8005f62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e76:	4b88      	ldr	r3, [pc, #544]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f003 030c 	and.w	r3, r3, #12
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d00c      	beq.n	8005e9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e82:	4b85      	ldr	r3, [pc, #532]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d112      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e8e:	4b82      	ldr	r3, [pc, #520]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e9c:	4b7e      	ldr	r3, [pc, #504]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05b      	beq.n	8005f60 <HAL_RCC_OscConfig+0x108>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d157      	bne.n	8005f60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e242      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ebc:	d106      	bne.n	8005ecc <HAL_RCC_OscConfig+0x74>
 8005ebe:	4b76      	ldr	r3, [pc, #472]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a75      	ldr	r2, [pc, #468]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	e01d      	b.n	8005f08 <HAL_RCC_OscConfig+0xb0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x98>
 8005ed6:	4b70      	ldr	r3, [pc, #448]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a6f      	ldr	r2, [pc, #444]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ee0:	6013      	str	r3, [r2, #0]
 8005ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a6c      	ldr	r2, [pc, #432]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	e00b      	b.n	8005f08 <HAL_RCC_OscConfig+0xb0>
 8005ef0:	4b69      	ldr	r3, [pc, #420]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a68      	ldr	r2, [pc, #416]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	4b66      	ldr	r3, [pc, #408]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a65      	ldr	r2, [pc, #404]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d013      	beq.n	8005f38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fc fd92 	bl	8002a38 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fc fd8e 	bl	8002a38 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	@ 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e207      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0xc0>
 8005f36:	e014      	b.n	8005f62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f38:	f7fc fd7e 	bl	8002a38 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f40:	f7fc fd7a 	bl	8002a38 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b64      	cmp	r3, #100	@ 0x64
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e1f3      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f52:	4b51      	ldr	r3, [pc, #324]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f0      	bne.n	8005f40 <HAL_RCC_OscConfig+0xe8>
 8005f5e:	e000      	b.n	8005f62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d063      	beq.n	8006036 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00b      	beq.n	8005f92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f7a:	4b47      	ldr	r3, [pc, #284]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d11c      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f86:	4b44      	ldr	r3, [pc, #272]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d116      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f92:	4b41      	ldr	r3, [pc, #260]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <HAL_RCC_OscConfig+0x152>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d001      	beq.n	8005faa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e1c7      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005faa:	4b3b      	ldr	r3, [pc, #236]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4937      	ldr	r1, [pc, #220]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fbe:	e03a      	b.n	8006036 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d020      	beq.n	800600a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fc8:	4b34      	ldr	r3, [pc, #208]	@ (800609c <HAL_RCC_OscConfig+0x244>)
 8005fca:	2201      	movs	r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fce:	f7fc fd33 	bl	8002a38 <HAL_GetTick>
 8005fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd6:	f7fc fd2f 	bl	8002a38 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e1a8      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff4:	4b28      	ldr	r3, [pc, #160]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4925      	ldr	r1, [pc, #148]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 8006004:	4313      	orrs	r3, r2
 8006006:	600b      	str	r3, [r1, #0]
 8006008:	e015      	b.n	8006036 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800600a:	4b24      	ldr	r3, [pc, #144]	@ (800609c <HAL_RCC_OscConfig+0x244>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006010:	f7fc fd12 	bl	8002a38 <HAL_GetTick>
 8006014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006016:	e008      	b.n	800602a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006018:	f7fc fd0e 	bl	8002a38 <HAL_GetTick>
 800601c:	4602      	mov	r2, r0
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	2b02      	cmp	r3, #2
 8006024:	d901      	bls.n	800602a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006026:	2303      	movs	r3, #3
 8006028:	e187      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800602a:	4b1b      	ldr	r3, [pc, #108]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1f0      	bne.n	8006018 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b00      	cmp	r3, #0
 8006040:	d036      	beq.n	80060b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d016      	beq.n	8006078 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800604a:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <HAL_RCC_OscConfig+0x248>)
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006050:	f7fc fcf2 	bl	8002a38 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006058:	f7fc fcee 	bl	8002a38 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e167      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800606a:	4b0b      	ldr	r3, [pc, #44]	@ (8006098 <HAL_RCC_OscConfig+0x240>)
 800606c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0f0      	beq.n	8006058 <HAL_RCC_OscConfig+0x200>
 8006076:	e01b      	b.n	80060b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006078:	4b09      	ldr	r3, [pc, #36]	@ (80060a0 <HAL_RCC_OscConfig+0x248>)
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800607e:	f7fc fcdb 	bl	8002a38 <HAL_GetTick>
 8006082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006084:	e00e      	b.n	80060a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006086:	f7fc fcd7 	bl	8002a38 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d907      	bls.n	80060a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e150      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
 8006098:	40023800 	.word	0x40023800
 800609c:	42470000 	.word	0x42470000
 80060a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a4:	4b88      	ldr	r3, [pc, #544]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1ea      	bne.n	8006086 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8097 	beq.w	80061ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060be:	2300      	movs	r3, #0
 80060c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060c2:	4b81      	ldr	r3, [pc, #516]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10f      	bne.n	80060ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060ce:	2300      	movs	r3, #0
 80060d0:	60bb      	str	r3, [r7, #8]
 80060d2:	4b7d      	ldr	r3, [pc, #500]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	4a7c      	ldr	r2, [pc, #496]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80060de:	4b7a      	ldr	r3, [pc, #488]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e6:	60bb      	str	r3, [r7, #8]
 80060e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ea:	2301      	movs	r3, #1
 80060ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ee:	4b77      	ldr	r3, [pc, #476]	@ (80062cc <HAL_RCC_OscConfig+0x474>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d118      	bne.n	800612c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060fa:	4b74      	ldr	r3, [pc, #464]	@ (80062cc <HAL_RCC_OscConfig+0x474>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a73      	ldr	r2, [pc, #460]	@ (80062cc <HAL_RCC_OscConfig+0x474>)
 8006100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006106:	f7fc fc97 	bl	8002a38 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610e:	f7fc fc93 	bl	8002a38 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e10c      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006120:	4b6a      	ldr	r3, [pc, #424]	@ (80062cc <HAL_RCC_OscConfig+0x474>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f0      	beq.n	800610e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d106      	bne.n	8006142 <HAL_RCC_OscConfig+0x2ea>
 8006134:	4b64      	ldr	r3, [pc, #400]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006138:	4a63      	ldr	r2, [pc, #396]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006140:	e01c      	b.n	800617c <HAL_RCC_OscConfig+0x324>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	2b05      	cmp	r3, #5
 8006148:	d10c      	bne.n	8006164 <HAL_RCC_OscConfig+0x30c>
 800614a:	4b5f      	ldr	r3, [pc, #380]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614e:	4a5e      	ldr	r2, [pc, #376]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006150:	f043 0304 	orr.w	r3, r3, #4
 8006154:	6713      	str	r3, [r2, #112]	@ 0x70
 8006156:	4b5c      	ldr	r3, [pc, #368]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615a:	4a5b      	ldr	r2, [pc, #364]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	6713      	str	r3, [r2, #112]	@ 0x70
 8006162:	e00b      	b.n	800617c <HAL_RCC_OscConfig+0x324>
 8006164:	4b58      	ldr	r3, [pc, #352]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006166:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006168:	4a57      	ldr	r2, [pc, #348]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800616a:	f023 0301 	bic.w	r3, r3, #1
 800616e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006170:	4b55      	ldr	r3, [pc, #340]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006174:	4a54      	ldr	r2, [pc, #336]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006176:	f023 0304 	bic.w	r3, r3, #4
 800617a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d015      	beq.n	80061b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7fc fc58 	bl	8002a38 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618a:	e00a      	b.n	80061a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fc fc54 	bl	8002a38 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0cb      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a2:	4b49      	ldr	r3, [pc, #292]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0ee      	beq.n	800618c <HAL_RCC_OscConfig+0x334>
 80061ae:	e014      	b.n	80061da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b0:	f7fc fc42 	bl	8002a38 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b6:	e00a      	b.n	80061ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b8:	f7fc fc3e 	bl	8002a38 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e0b5      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ce:	4b3e      	ldr	r3, [pc, #248]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1ee      	bne.n	80061b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061da:	7dfb      	ldrb	r3, [r7, #23]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d105      	bne.n	80061ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e0:	4b39      	ldr	r3, [pc, #228]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e4:	4a38      	ldr	r2, [pc, #224]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80a1 	beq.w	8006338 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061f6:	4b34      	ldr	r3, [pc, #208]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 030c 	and.w	r3, r3, #12
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d05c      	beq.n	80062bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d141      	bne.n	800628e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620a:	4b31      	ldr	r3, [pc, #196]	@ (80062d0 <HAL_RCC_OscConfig+0x478>)
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006210:	f7fc fc12 	bl	8002a38 <HAL_GetTick>
 8006214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006216:	e008      	b.n	800622a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006218:	f7fc fc0e 	bl	8002a38 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d901      	bls.n	800622a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e087      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622a:	4b27      	ldr	r3, [pc, #156]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1f0      	bne.n	8006218 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69da      	ldr	r2, [r3, #28]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006244:	019b      	lsls	r3, r3, #6
 8006246:	431a      	orrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	3b01      	subs	r3, #1
 8006250:	041b      	lsls	r3, r3, #16
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006258:	061b      	lsls	r3, r3, #24
 800625a:	491b      	ldr	r1, [pc, #108]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 800625c:	4313      	orrs	r3, r2
 800625e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006260:	4b1b      	ldr	r3, [pc, #108]	@ (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006262:	2201      	movs	r2, #1
 8006264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006266:	f7fc fbe7 	bl	8002a38 <HAL_GetTick>
 800626a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626c:	e008      	b.n	8006280 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800626e:	f7fc fbe3 	bl	8002a38 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d901      	bls.n	8006280 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e05c      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006280:	4b11      	ldr	r3, [pc, #68]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0f0      	beq.n	800626e <HAL_RCC_OscConfig+0x416>
 800628c:	e054      	b.n	8006338 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800628e:	4b10      	ldr	r3, [pc, #64]	@ (80062d0 <HAL_RCC_OscConfig+0x478>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006294:	f7fc fbd0 	bl	8002a38 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800629c:	f7fc fbcc 	bl	8002a38 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e045      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ae:	4b06      	ldr	r3, [pc, #24]	@ (80062c8 <HAL_RCC_OscConfig+0x470>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x444>
 80062ba:	e03d      	b.n	8006338 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	699b      	ldr	r3, [r3, #24]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d107      	bne.n	80062d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e038      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
 80062c8:	40023800 	.word	0x40023800
 80062cc:	40007000 	.word	0x40007000
 80062d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006344 <HAL_RCC_OscConfig+0x4ec>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d028      	beq.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d121      	bne.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d11a      	bne.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006304:	4013      	ands	r3, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800630a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800630c:	4293      	cmp	r3, r2
 800630e:	d111      	bne.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631a:	085b      	lsrs	r3, r3, #1
 800631c:	3b01      	subs	r3, #1
 800631e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006320:	429a      	cmp	r2, r3
 8006322:	d107      	bne.n	8006334 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3718      	adds	r7, #24
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800

08006348 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0cc      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800635c:	4b68      	ldr	r3, [pc, #416]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0307 	and.w	r3, r3, #7
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d90c      	bls.n	8006384 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800636a:	4b65      	ldr	r3, [pc, #404]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	b2d2      	uxtb	r2, r2
 8006370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006372:	4b63      	ldr	r3, [pc, #396]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d001      	beq.n	8006384 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0b8      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d020      	beq.n	80063d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800639c:	4b59      	ldr	r3, [pc, #356]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4a58      	ldr	r2, [pc, #352]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0308 	and.w	r3, r3, #8
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063b4:	4b53      	ldr	r3, [pc, #332]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	4a52      	ldr	r2, [pc, #328]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80063be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c0:	4b50      	ldr	r3, [pc, #320]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	494d      	ldr	r1, [pc, #308]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d044      	beq.n	8006468 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d107      	bne.n	80063f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e6:	4b47      	ldr	r3, [pc, #284]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d119      	bne.n	8006426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e07f      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d003      	beq.n	8006406 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006402:	2b03      	cmp	r3, #3
 8006404:	d107      	bne.n	8006416 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006406:	4b3f      	ldr	r3, [pc, #252]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e06f      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006416:	4b3b      	ldr	r3, [pc, #236]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e067      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006426:	4b37      	ldr	r3, [pc, #220]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 0203 	bic.w	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4934      	ldr	r1, [pc, #208]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006434:	4313      	orrs	r3, r2
 8006436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006438:	f7fc fafe 	bl	8002a38 <HAL_GetTick>
 800643c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643e:	e00a      	b.n	8006456 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006440:	f7fc fafa 	bl	8002a38 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e04f      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006456:	4b2b      	ldr	r3, [pc, #172]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 020c 	and.w	r2, r3, #12
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	429a      	cmp	r2, r3
 8006466:	d1eb      	bne.n	8006440 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006468:	4b25      	ldr	r3, [pc, #148]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d20c      	bcs.n	8006490 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006476:	4b22      	ldr	r3, [pc, #136]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800647e:	4b20      	ldr	r3, [pc, #128]	@ (8006500 <HAL_RCC_ClockConfig+0x1b8>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d001      	beq.n	8006490 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e032      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800649c:	4b19      	ldr	r3, [pc, #100]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	4916      	ldr	r1, [pc, #88]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ba:	4b12      	ldr	r3, [pc, #72]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	490e      	ldr	r1, [pc, #56]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064ce:	f000 f821 	bl	8006514 <HAL_RCC_GetSysClockFreq>
 80064d2:	4602      	mov	r2, r0
 80064d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <HAL_RCC_ClockConfig+0x1bc>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	490a      	ldr	r1, [pc, #40]	@ (8006508 <HAL_RCC_ClockConfig+0x1c0>)
 80064e0:	5ccb      	ldrb	r3, [r1, r3]
 80064e2:	fa22 f303 	lsr.w	r3, r2, r3
 80064e6:	4a09      	ldr	r2, [pc, #36]	@ (800650c <HAL_RCC_ClockConfig+0x1c4>)
 80064e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80064ea:	4b09      	ldr	r3, [pc, #36]	@ (8006510 <HAL_RCC_ClockConfig+0x1c8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fc fa5e 	bl	80029b0 <HAL_InitTick>

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40023c00 	.word	0x40023c00
 8006504:	40023800 	.word	0x40023800
 8006508:	0800c154 	.word	0x0800c154
 800650c:	20000000 	.word	0x20000000
 8006510:	20000004 	.word	0x20000004

08006514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006518:	b094      	sub	sp, #80	@ 0x50
 800651a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800652c:	4b79      	ldr	r3, [pc, #484]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	f003 030c 	and.w	r3, r3, #12
 8006534:	2b08      	cmp	r3, #8
 8006536:	d00d      	beq.n	8006554 <HAL_RCC_GetSysClockFreq+0x40>
 8006538:	2b08      	cmp	r3, #8
 800653a:	f200 80e1 	bhi.w	8006700 <HAL_RCC_GetSysClockFreq+0x1ec>
 800653e:	2b00      	cmp	r3, #0
 8006540:	d002      	beq.n	8006548 <HAL_RCC_GetSysClockFreq+0x34>
 8006542:	2b04      	cmp	r3, #4
 8006544:	d003      	beq.n	800654e <HAL_RCC_GetSysClockFreq+0x3a>
 8006546:	e0db      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006548:	4b73      	ldr	r3, [pc, #460]	@ (8006718 <HAL_RCC_GetSysClockFreq+0x204>)
 800654a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800654c:	e0db      	b.n	8006706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800654e:	4b73      	ldr	r3, [pc, #460]	@ (800671c <HAL_RCC_GetSysClockFreq+0x208>)
 8006550:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006552:	e0d8      	b.n	8006706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006554:	4b6f      	ldr	r3, [pc, #444]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800655c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800655e:	4b6d      	ldr	r3, [pc, #436]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d063      	beq.n	8006632 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800656a:	4b6a      	ldr	r3, [pc, #424]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	099b      	lsrs	r3, r3, #6
 8006570:	2200      	movs	r2, #0
 8006572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006574:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657c:	633b      	str	r3, [r7, #48]	@ 0x30
 800657e:	2300      	movs	r3, #0
 8006580:	637b      	str	r3, [r7, #52]	@ 0x34
 8006582:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006586:	4622      	mov	r2, r4
 8006588:	462b      	mov	r3, r5
 800658a:	f04f 0000 	mov.w	r0, #0
 800658e:	f04f 0100 	mov.w	r1, #0
 8006592:	0159      	lsls	r1, r3, #5
 8006594:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006598:	0150      	lsls	r0, r2, #5
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4621      	mov	r1, r4
 80065a0:	1a51      	subs	r1, r2, r1
 80065a2:	6139      	str	r1, [r7, #16]
 80065a4:	4629      	mov	r1, r5
 80065a6:	eb63 0301 	sbc.w	r3, r3, r1
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065b8:	4659      	mov	r1, fp
 80065ba:	018b      	lsls	r3, r1, #6
 80065bc:	4651      	mov	r1, sl
 80065be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065c2:	4651      	mov	r1, sl
 80065c4:	018a      	lsls	r2, r1, #6
 80065c6:	4651      	mov	r1, sl
 80065c8:	ebb2 0801 	subs.w	r8, r2, r1
 80065cc:	4659      	mov	r1, fp
 80065ce:	eb63 0901 	sbc.w	r9, r3, r1
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	f04f 0300 	mov.w	r3, #0
 80065da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80065de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80065e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80065e6:	4690      	mov	r8, r2
 80065e8:	4699      	mov	r9, r3
 80065ea:	4623      	mov	r3, r4
 80065ec:	eb18 0303 	adds.w	r3, r8, r3
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	462b      	mov	r3, r5
 80065f4:	eb49 0303 	adc.w	r3, r9, r3
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	f04f 0300 	mov.w	r3, #0
 8006602:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006606:	4629      	mov	r1, r5
 8006608:	024b      	lsls	r3, r1, #9
 800660a:	4621      	mov	r1, r4
 800660c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006610:	4621      	mov	r1, r4
 8006612:	024a      	lsls	r2, r1, #9
 8006614:	4610      	mov	r0, r2
 8006616:	4619      	mov	r1, r3
 8006618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800661a:	2200      	movs	r2, #0
 800661c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800661e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006620:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006624:	f7f9 fe24 	bl	8000270 <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4613      	mov	r3, r2
 800662e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006630:	e058      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006632:	4b38      	ldr	r3, [pc, #224]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	099b      	lsrs	r3, r3, #6
 8006638:	2200      	movs	r2, #0
 800663a:	4618      	mov	r0, r3
 800663c:	4611      	mov	r1, r2
 800663e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	2300      	movs	r3, #0
 8006646:	627b      	str	r3, [r7, #36]	@ 0x24
 8006648:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800664c:	4642      	mov	r2, r8
 800664e:	464b      	mov	r3, r9
 8006650:	f04f 0000 	mov.w	r0, #0
 8006654:	f04f 0100 	mov.w	r1, #0
 8006658:	0159      	lsls	r1, r3, #5
 800665a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800665e:	0150      	lsls	r0, r2, #5
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4641      	mov	r1, r8
 8006666:	ebb2 0a01 	subs.w	sl, r2, r1
 800666a:	4649      	mov	r1, r9
 800666c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 0300 	mov.w	r3, #0
 8006678:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800667c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006680:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006684:	ebb2 040a 	subs.w	r4, r2, sl
 8006688:	eb63 050b 	sbc.w	r5, r3, fp
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	f04f 0300 	mov.w	r3, #0
 8006694:	00eb      	lsls	r3, r5, #3
 8006696:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800669a:	00e2      	lsls	r2, r4, #3
 800669c:	4614      	mov	r4, r2
 800669e:	461d      	mov	r5, r3
 80066a0:	4643      	mov	r3, r8
 80066a2:	18e3      	adds	r3, r4, r3
 80066a4:	603b      	str	r3, [r7, #0]
 80066a6:	464b      	mov	r3, r9
 80066a8:	eb45 0303 	adc.w	r3, r5, r3
 80066ac:	607b      	str	r3, [r7, #4]
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	f04f 0300 	mov.w	r3, #0
 80066b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066ba:	4629      	mov	r1, r5
 80066bc:	028b      	lsls	r3, r1, #10
 80066be:	4621      	mov	r1, r4
 80066c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066c4:	4621      	mov	r1, r4
 80066c6:	028a      	lsls	r2, r1, #10
 80066c8:	4610      	mov	r0, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066ce:	2200      	movs	r2, #0
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	61fa      	str	r2, [r7, #28]
 80066d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066d8:	f7f9 fdca 	bl	8000270 <__aeabi_uldivmod>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4613      	mov	r3, r2
 80066e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80066e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x200>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	0c1b      	lsrs	r3, r3, #16
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	3301      	adds	r3, #1
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80066f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80066f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066fe:	e002      	b.n	8006706 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006700:	4b05      	ldr	r3, [pc, #20]	@ (8006718 <HAL_RCC_GetSysClockFreq+0x204>)
 8006702:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006708:	4618      	mov	r0, r3
 800670a:	3750      	adds	r7, #80	@ 0x50
 800670c:	46bd      	mov	sp, r7
 800670e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006712:	bf00      	nop
 8006714:	40023800 	.word	0x40023800
 8006718:	00f42400 	.word	0x00f42400
 800671c:	007a1200 	.word	0x007a1200

08006720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006720:	b480      	push	{r7}
 8006722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006724:	4b03      	ldr	r3, [pc, #12]	@ (8006734 <HAL_RCC_GetHCLKFreq+0x14>)
 8006726:	681b      	ldr	r3, [r3, #0]
}
 8006728:	4618      	mov	r0, r3
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000000 	.word	0x20000000

08006738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800673c:	f7ff fff0 	bl	8006720 <HAL_RCC_GetHCLKFreq>
 8006740:	4602      	mov	r2, r0
 8006742:	4b05      	ldr	r3, [pc, #20]	@ (8006758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	0a9b      	lsrs	r3, r3, #10
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	4903      	ldr	r1, [pc, #12]	@ (800675c <HAL_RCC_GetPCLK1Freq+0x24>)
 800674e:	5ccb      	ldrb	r3, [r1, r3]
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006754:	4618      	mov	r0, r3
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40023800 	.word	0x40023800
 800675c:	0800c164 	.word	0x0800c164

08006760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006764:	f7ff ffdc 	bl	8006720 <HAL_RCC_GetHCLKFreq>
 8006768:	4602      	mov	r2, r0
 800676a:	4b05      	ldr	r3, [pc, #20]	@ (8006780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	0b5b      	lsrs	r3, r3, #13
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	4903      	ldr	r1, [pc, #12]	@ (8006784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006776:	5ccb      	ldrb	r3, [r1, r3]
 8006778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800677c:	4618      	mov	r0, r3
 800677e:	bd80      	pop	{r7, pc}
 8006780:	40023800 	.word	0x40023800
 8006784:	0800c164 	.word	0x0800c164

08006788 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d105      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d035      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067b0:	4b62      	ldr	r3, [pc, #392]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067b6:	f7fc f93f 	bl	8002a38 <HAL_GetTick>
 80067ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067bc:	e008      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067be:	f7fc f93b 	bl	8002a38 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d901      	bls.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e0b0      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067d0:	4b5b      	ldr	r3, [pc, #364]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1f0      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	019a      	lsls	r2, r3, #6
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	071b      	lsls	r3, r3, #28
 80067e8:	4955      	ldr	r1, [pc, #340]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80067f0:	4b52      	ldr	r3, [pc, #328]	@ (800693c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067f2:	2201      	movs	r2, #1
 80067f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067f6:	f7fc f91f 	bl	8002a38 <HAL_GetTick>
 80067fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80067fc:	e008      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80067fe:	f7fc f91b 	bl	8002a38 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e090      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006810:	4b4b      	ldr	r3, [pc, #300]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f0      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0302 	and.w	r3, r3, #2
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 8083 	beq.w	8006930 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800682a:	2300      	movs	r3, #0
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	4b44      	ldr	r3, [pc, #272]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006832:	4a43      	ldr	r2, [pc, #268]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006838:	6413      	str	r3, [r2, #64]	@ 0x40
 800683a:	4b41      	ldr	r3, [pc, #260]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006846:	4b3f      	ldr	r3, [pc, #252]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3e      	ldr	r2, [pc, #248]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800684c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006850:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006852:	f7fc f8f1 	bl	8002a38 <HAL_GetTick>
 8006856:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006858:	e008      	b.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800685a:	f7fc f8ed 	bl	8002a38 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e062      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800686c:	4b35      	ldr	r3, [pc, #212]	@ (8006944 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0f0      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006878:	4b31      	ldr	r3, [pc, #196]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006880:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d02f      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	429a      	cmp	r2, r3
 8006894:	d028      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006896:	4b2a      	ldr	r3, [pc, #168]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800689a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068a0:	4b29      	ldr	r3, [pc, #164]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068a6:	4b28      	ldr	r3, [pc, #160]	@ (8006948 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068ac:	4a24      	ldr	r2, [pc, #144]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068b2:	4b23      	ldr	r3, [pc, #140]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d114      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068be:	f7fc f8bb 	bl	8002a38 <HAL_GetTick>
 80068c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068c4:	e00a      	b.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068c6:	f7fc f8b7 	bl	8002a38 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d901      	bls.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e02a      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068dc:	4b18      	ldr	r3, [pc, #96]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e0:	f003 0302 	and.w	r3, r3, #2
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0ee      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068f4:	d10d      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80068f6:	4b12      	ldr	r3, [pc, #72]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800690a:	490d      	ldr	r1, [pc, #52]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800690c:	4313      	orrs	r3, r2
 800690e:	608b      	str	r3, [r1, #8]
 8006910:	e005      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006912:	4b0b      	ldr	r3, [pc, #44]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	4a0a      	ldr	r2, [pc, #40]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006918:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800691c:	6093      	str	r3, [r2, #8]
 800691e:	4b08      	ldr	r3, [pc, #32]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006920:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800692a:	4905      	ldr	r1, [pc, #20]	@ (8006940 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800692c:	4313      	orrs	r3, r2
 800692e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3718      	adds	r7, #24
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	42470068 	.word	0x42470068
 8006940:	40023800 	.word	0x40023800
 8006944:	40007000 	.word	0x40007000
 8006948:	42470e40 	.word	0x42470e40

0800694c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800694c:	b480      	push	{r7}
 800694e:	b087      	sub	sp, #28
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006960:	2300      	movs	r3, #0
 8006962:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d13f      	bne.n	80069ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800696a:	4b24      	ldr	r3, [pc, #144]	@ (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006972:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d006      	beq.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006980:	d12f      	bne.n	80069e2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006982:	4b1f      	ldr	r3, [pc, #124]	@ (8006a00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006984:	617b      	str	r3, [r7, #20]
          break;
 8006986:	e02f      	b.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006988:	4b1c      	ldr	r3, [pc, #112]	@ (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006990:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006994:	d108      	bne.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006996:	4b19      	ldr	r3, [pc, #100]	@ (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800699e:	4a19      	ldr	r2, [pc, #100]	@ (8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80069a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	e007      	b.n	80069b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80069a8:	4b14      	ldr	r3, [pc, #80]	@ (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069b0:	4a15      	ldr	r2, [pc, #84]	@ (8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80069b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80069b8:	4b10      	ldr	r3, [pc, #64]	@ (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069be:	099b      	lsrs	r3, r3, #6
 80069c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
 80069ca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80069cc:	4b0b      	ldr	r3, [pc, #44]	@ (80069fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069d2:	0f1b      	lsrs	r3, r3, #28
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	617b      	str	r3, [r7, #20]
          break;
 80069e0:	e002      	b.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	617b      	str	r3, [r7, #20]
          break;
 80069e6:	bf00      	nop
        }
      }
      break;
 80069e8:	e000      	b.n	80069ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80069ea:	bf00      	nop
    }
  }
  return frequency;
 80069ec:	697b      	ldr	r3, [r7, #20]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40023800 	.word	0x40023800
 8006a00:	00bb8000 	.word	0x00bb8000
 8006a04:	007a1200 	.word	0x007a1200
 8006a08:	00f42400 	.word	0x00f42400

08006a0c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e01c      	b.n	8006a58 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	795b      	ldrb	r3, [r3, #5]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d105      	bne.n	8006a34 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fb fdec 	bl	800260c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f042 0204 	orr.w	r2, r2, #4
 8006a48:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	791b      	ldrb	r3, [r3, #4]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <HAL_RNG_GenerateRandomNumber+0x1a>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e044      	b.n	8006b04 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	795b      	ldrb	r3, [r3, #5]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d133      	bne.n	8006af2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a90:	f7fb ffd2 	bl	8002a38 <HAL_GetTick>
 8006a94:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006a96:	e018      	b.n	8006aca <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006a98:	f7fb ffce 	bl	8002a38 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d911      	bls.n	8006aca <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d00a      	beq.n	8006aca <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2202      	movs	r2, #2
 8006abe:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e01c      	b.n	8006b04 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d1df      	bne.n	8006a98 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689a      	ldr	r2, [r3, #8]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68da      	ldr	r2, [r3, #12]
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	715a      	strb	r2, [r3, #5]
 8006af0:	e004      	b.n	8006afc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2204      	movs	r2, #4
 8006af6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	711a      	strb	r2, [r3, #4]

  return status;
 8006b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e07b      	b.n	8006c16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d108      	bne.n	8006b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b2e:	d009      	beq.n	8006b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	61da      	str	r2, [r3, #28]
 8006b36:	e005      	b.n	8006b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d106      	bne.n	8006b64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fb fd76 	bl	8002650 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2202      	movs	r2, #2
 8006b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc8:	ea42 0103 	orr.w	r1, r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	0c1b      	lsrs	r3, r3, #16
 8006be2:	f003 0104 	and.w	r1, r3, #4
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bea:	f003 0210 	and.w	r2, r3, #16
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69da      	ldr	r2, [r3, #28]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b082      	sub	sp, #8
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e042      	b.n	8006cb6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fb fd4b 	bl	80026e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2224      	movs	r2, #36	@ 0x24
 8006c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c60:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f972 	bl	8006f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c76:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695a      	ldr	r2, [r3, #20]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c86:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c96:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b08a      	sub	sp, #40	@ 0x28
 8006cc2:	af02      	add	r7, sp, #8
 8006cc4:	60f8      	str	r0, [r7, #12]
 8006cc6:	60b9      	str	r1, [r7, #8]
 8006cc8:	603b      	str	r3, [r7, #0]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d175      	bne.n	8006dca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_UART_Transmit+0x2c>
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e06e      	b.n	8006dcc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2221      	movs	r2, #33	@ 0x21
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cfc:	f7fb fe9c 	bl	8002a38 <HAL_GetTick>
 8006d00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	88fa      	ldrh	r2, [r7, #6]
 8006d06:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	88fa      	ldrh	r2, [r7, #6]
 8006d0c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d16:	d108      	bne.n	8006d2a <HAL_UART_Transmit+0x6c>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d104      	bne.n	8006d2a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	e003      	b.n	8006d32 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d32:	e02e      	b.n	8006d92 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2180      	movs	r1, #128	@ 0x80
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f848 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e03a      	b.n	8006dcc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	881b      	ldrh	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d6a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	3302      	adds	r3, #2
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	e007      	b.n	8006d84 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	781a      	ldrb	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	3301      	adds	r3, #1
 8006d82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1cb      	bne.n	8006d34 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2200      	movs	r2, #0
 8006da4:	2140      	movs	r1, #64	@ 0x40
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f814 	bl	8006dd4 <UART_WaitOnFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d005      	beq.n	8006dbe <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e006      	b.n	8006dcc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2220      	movs	r2, #32
 8006dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	e000      	b.n	8006dcc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006dca:	2302      	movs	r3, #2
  }
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	603b      	str	r3, [r7, #0]
 8006de0:	4613      	mov	r3, r2
 8006de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006de4:	e03b      	b.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dec:	d037      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dee:	f7fb fe23 	bl	8002a38 <HAL_GetTick>
 8006df2:	4602      	mov	r2, r0
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	6a3a      	ldr	r2, [r7, #32]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d302      	bcc.n	8006e04 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d101      	bne.n	8006e08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e03a      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d023      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	2b80      	cmp	r3, #128	@ 0x80
 8006e1a:	d020      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	2b40      	cmp	r3, #64	@ 0x40
 8006e20:	d01d      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d116      	bne.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e30:	2300      	movs	r3, #0
 8006e32:	617b      	str	r3, [r7, #20]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	617b      	str	r3, [r7, #20]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f81d 	bl	8006e86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2208      	movs	r2, #8
 8006e50:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e00f      	b.n	8006e7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4013      	ands	r3, r2
 8006e68:	68ba      	ldr	r2, [r7, #8]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	bf0c      	ite	eq
 8006e6e:	2301      	moveq	r3, #1
 8006e70:	2300      	movne	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	79fb      	ldrb	r3, [r7, #7]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d0b4      	beq.n	8006de6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3718      	adds	r7, #24
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b095      	sub	sp, #84	@ 0x54
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	330c      	adds	r3, #12
 8006e94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e98:	e853 3f00 	ldrex	r3, [r3]
 8006e9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	330c      	adds	r3, #12
 8006eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006eae:	643a      	str	r2, [r7, #64]	@ 0x40
 8006eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eb6:	e841 2300 	strex	r3, r2, [r1]
 8006eba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1e5      	bne.n	8006e8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3314      	adds	r3, #20
 8006ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	e853 3f00 	ldrex	r3, [r3]
 8006ed0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3314      	adds	r3, #20
 8006ee0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e5      	bne.n	8006ec2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d119      	bne.n	8006f32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	330c      	adds	r3, #12
 8006f04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	e853 3f00 	ldrex	r3, [r3]
 8006f0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	f023 0310 	bic.w	r3, r3, #16
 8006f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	330c      	adds	r3, #12
 8006f1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f1e:	61ba      	str	r2, [r7, #24]
 8006f20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f22:	6979      	ldr	r1, [r7, #20]
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	e841 2300 	strex	r3, r2, [r1]
 8006f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1e5      	bne.n	8006efe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2220      	movs	r2, #32
 8006f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006f40:	bf00      	nop
 8006f42:	3754      	adds	r7, #84	@ 0x54
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f50:	b0c0      	sub	sp, #256	@ 0x100
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f68:	68d9      	ldr	r1, [r3, #12]
 8006f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	ea40 0301 	orr.w	r3, r0, r1
 8006f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	431a      	orrs	r2, r3
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006fa4:	f021 010c 	bic.w	r1, r1, #12
 8006fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006fb2:	430b      	orrs	r3, r1
 8006fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc6:	6999      	ldr	r1, [r3, #24]
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	ea40 0301 	orr.w	r3, r0, r1
 8006fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b8f      	ldr	r3, [pc, #572]	@ (8007218 <UART_SetConfig+0x2cc>)
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d005      	beq.n	8006fec <UART_SetConfig+0xa0>
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800721c <UART_SetConfig+0x2d0>)
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d104      	bne.n	8006ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fec:	f7ff fbb8 	bl	8006760 <HAL_RCC_GetPCLK2Freq>
 8006ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ff4:	e003      	b.n	8006ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ff6:	f7ff fb9f 	bl	8006738 <HAL_RCC_GetPCLK1Freq>
 8006ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007008:	f040 810c 	bne.w	8007224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800700c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007010:	2200      	movs	r2, #0
 8007012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007016:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800701a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800701e:	4622      	mov	r2, r4
 8007020:	462b      	mov	r3, r5
 8007022:	1891      	adds	r1, r2, r2
 8007024:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007026:	415b      	adcs	r3, r3
 8007028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800702a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800702e:	4621      	mov	r1, r4
 8007030:	eb12 0801 	adds.w	r8, r2, r1
 8007034:	4629      	mov	r1, r5
 8007036:	eb43 0901 	adc.w	r9, r3, r1
 800703a:	f04f 0200 	mov.w	r2, #0
 800703e:	f04f 0300 	mov.w	r3, #0
 8007042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800704a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800704e:	4690      	mov	r8, r2
 8007050:	4699      	mov	r9, r3
 8007052:	4623      	mov	r3, r4
 8007054:	eb18 0303 	adds.w	r3, r8, r3
 8007058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800705c:	462b      	mov	r3, r5
 800705e:	eb49 0303 	adc.w	r3, r9, r3
 8007062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007072:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800707a:	460b      	mov	r3, r1
 800707c:	18db      	adds	r3, r3, r3
 800707e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007080:	4613      	mov	r3, r2
 8007082:	eb42 0303 	adc.w	r3, r2, r3
 8007086:	657b      	str	r3, [r7, #84]	@ 0x54
 8007088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800708c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007090:	f7f9 f8ee 	bl	8000270 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4b61      	ldr	r3, [pc, #388]	@ (8007220 <UART_SetConfig+0x2d4>)
 800709a:	fba3 2302 	umull	r2, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	011c      	lsls	r4, r3, #4
 80070a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80070ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80070b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	1891      	adds	r1, r2, r2
 80070ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80070bc:	415b      	adcs	r3, r3
 80070be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80070c4:	4641      	mov	r1, r8
 80070c6:	eb12 0a01 	adds.w	sl, r2, r1
 80070ca:	4649      	mov	r1, r9
 80070cc:	eb43 0b01 	adc.w	fp, r3, r1
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070e4:	4692      	mov	sl, r2
 80070e6:	469b      	mov	fp, r3
 80070e8:	4643      	mov	r3, r8
 80070ea:	eb1a 0303 	adds.w	r3, sl, r3
 80070ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070f2:	464b      	mov	r3, r9
 80070f4:	eb4b 0303 	adc.w	r3, fp, r3
 80070f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007108:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800710c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007110:	460b      	mov	r3, r1
 8007112:	18db      	adds	r3, r3, r3
 8007114:	643b      	str	r3, [r7, #64]	@ 0x40
 8007116:	4613      	mov	r3, r2
 8007118:	eb42 0303 	adc.w	r3, r2, r3
 800711c:	647b      	str	r3, [r7, #68]	@ 0x44
 800711e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007126:	f7f9 f8a3 	bl	8000270 <__aeabi_uldivmod>
 800712a:	4602      	mov	r2, r0
 800712c:	460b      	mov	r3, r1
 800712e:	4611      	mov	r1, r2
 8007130:	4b3b      	ldr	r3, [pc, #236]	@ (8007220 <UART_SetConfig+0x2d4>)
 8007132:	fba3 2301 	umull	r2, r3, r3, r1
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	2264      	movs	r2, #100	@ 0x64
 800713a:	fb02 f303 	mul.w	r3, r2, r3
 800713e:	1acb      	subs	r3, r1, r3
 8007140:	00db      	lsls	r3, r3, #3
 8007142:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007146:	4b36      	ldr	r3, [pc, #216]	@ (8007220 <UART_SetConfig+0x2d4>)
 8007148:	fba3 2302 	umull	r2, r3, r3, r2
 800714c:	095b      	lsrs	r3, r3, #5
 800714e:	005b      	lsls	r3, r3, #1
 8007150:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007154:	441c      	add	r4, r3
 8007156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800715a:	2200      	movs	r2, #0
 800715c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007160:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007168:	4642      	mov	r2, r8
 800716a:	464b      	mov	r3, r9
 800716c:	1891      	adds	r1, r2, r2
 800716e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007170:	415b      	adcs	r3, r3
 8007172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007178:	4641      	mov	r1, r8
 800717a:	1851      	adds	r1, r2, r1
 800717c:	6339      	str	r1, [r7, #48]	@ 0x30
 800717e:	4649      	mov	r1, r9
 8007180:	414b      	adcs	r3, r1
 8007182:	637b      	str	r3, [r7, #52]	@ 0x34
 8007184:	f04f 0200 	mov.w	r2, #0
 8007188:	f04f 0300 	mov.w	r3, #0
 800718c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007190:	4659      	mov	r1, fp
 8007192:	00cb      	lsls	r3, r1, #3
 8007194:	4651      	mov	r1, sl
 8007196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800719a:	4651      	mov	r1, sl
 800719c:	00ca      	lsls	r2, r1, #3
 800719e:	4610      	mov	r0, r2
 80071a0:	4619      	mov	r1, r3
 80071a2:	4603      	mov	r3, r0
 80071a4:	4642      	mov	r2, r8
 80071a6:	189b      	adds	r3, r3, r2
 80071a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071ac:	464b      	mov	r3, r9
 80071ae:	460a      	mov	r2, r1
 80071b0:	eb42 0303 	adc.w	r3, r2, r3
 80071b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80071c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071cc:	460b      	mov	r3, r1
 80071ce:	18db      	adds	r3, r3, r3
 80071d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071d2:	4613      	mov	r3, r2
 80071d4:	eb42 0303 	adc.w	r3, r2, r3
 80071d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80071e2:	f7f9 f845 	bl	8000270 <__aeabi_uldivmod>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007220 <UART_SetConfig+0x2d4>)
 80071ec:	fba3 1302 	umull	r1, r3, r3, r2
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	2164      	movs	r1, #100	@ 0x64
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	3332      	adds	r3, #50	@ 0x32
 80071fe:	4a08      	ldr	r2, [pc, #32]	@ (8007220 <UART_SetConfig+0x2d4>)
 8007200:	fba2 2303 	umull	r2, r3, r2, r3
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	f003 0207 	and.w	r2, r3, #7
 800720a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4422      	add	r2, r4
 8007212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007214:	e106      	b.n	8007424 <UART_SetConfig+0x4d8>
 8007216:	bf00      	nop
 8007218:	40011000 	.word	0x40011000
 800721c:	40011400 	.word	0x40011400
 8007220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007228:	2200      	movs	r2, #0
 800722a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800722e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007236:	4642      	mov	r2, r8
 8007238:	464b      	mov	r3, r9
 800723a:	1891      	adds	r1, r2, r2
 800723c:	6239      	str	r1, [r7, #32]
 800723e:	415b      	adcs	r3, r3
 8007240:	627b      	str	r3, [r7, #36]	@ 0x24
 8007242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007246:	4641      	mov	r1, r8
 8007248:	1854      	adds	r4, r2, r1
 800724a:	4649      	mov	r1, r9
 800724c:	eb43 0501 	adc.w	r5, r3, r1
 8007250:	f04f 0200 	mov.w	r2, #0
 8007254:	f04f 0300 	mov.w	r3, #0
 8007258:	00eb      	lsls	r3, r5, #3
 800725a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800725e:	00e2      	lsls	r2, r4, #3
 8007260:	4614      	mov	r4, r2
 8007262:	461d      	mov	r5, r3
 8007264:	4643      	mov	r3, r8
 8007266:	18e3      	adds	r3, r4, r3
 8007268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800726c:	464b      	mov	r3, r9
 800726e:	eb45 0303 	adc.w	r3, r5, r3
 8007272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007282:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007286:	f04f 0200 	mov.w	r2, #0
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007292:	4629      	mov	r1, r5
 8007294:	008b      	lsls	r3, r1, #2
 8007296:	4621      	mov	r1, r4
 8007298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800729c:	4621      	mov	r1, r4
 800729e:	008a      	lsls	r2, r1, #2
 80072a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80072a4:	f7f8 ffe4 	bl	8000270 <__aeabi_uldivmod>
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4b60      	ldr	r3, [pc, #384]	@ (8007430 <UART_SetConfig+0x4e4>)
 80072ae:	fba3 2302 	umull	r2, r3, r3, r2
 80072b2:	095b      	lsrs	r3, r3, #5
 80072b4:	011c      	lsls	r4, r3, #4
 80072b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072ba:	2200      	movs	r2, #0
 80072bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80072c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80072c8:	4642      	mov	r2, r8
 80072ca:	464b      	mov	r3, r9
 80072cc:	1891      	adds	r1, r2, r2
 80072ce:	61b9      	str	r1, [r7, #24]
 80072d0:	415b      	adcs	r3, r3
 80072d2:	61fb      	str	r3, [r7, #28]
 80072d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072d8:	4641      	mov	r1, r8
 80072da:	1851      	adds	r1, r2, r1
 80072dc:	6139      	str	r1, [r7, #16]
 80072de:	4649      	mov	r1, r9
 80072e0:	414b      	adcs	r3, r1
 80072e2:	617b      	str	r3, [r7, #20]
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	f04f 0300 	mov.w	r3, #0
 80072ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072f0:	4659      	mov	r1, fp
 80072f2:	00cb      	lsls	r3, r1, #3
 80072f4:	4651      	mov	r1, sl
 80072f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072fa:	4651      	mov	r1, sl
 80072fc:	00ca      	lsls	r2, r1, #3
 80072fe:	4610      	mov	r0, r2
 8007300:	4619      	mov	r1, r3
 8007302:	4603      	mov	r3, r0
 8007304:	4642      	mov	r2, r8
 8007306:	189b      	adds	r3, r3, r2
 8007308:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800730c:	464b      	mov	r3, r9
 800730e:	460a      	mov	r2, r1
 8007310:	eb42 0303 	adc.w	r3, r2, r3
 8007314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007322:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007330:	4649      	mov	r1, r9
 8007332:	008b      	lsls	r3, r1, #2
 8007334:	4641      	mov	r1, r8
 8007336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800733a:	4641      	mov	r1, r8
 800733c:	008a      	lsls	r2, r1, #2
 800733e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007342:	f7f8 ff95 	bl	8000270 <__aeabi_uldivmod>
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	4611      	mov	r1, r2
 800734c:	4b38      	ldr	r3, [pc, #224]	@ (8007430 <UART_SetConfig+0x4e4>)
 800734e:	fba3 2301 	umull	r2, r3, r3, r1
 8007352:	095b      	lsrs	r3, r3, #5
 8007354:	2264      	movs	r2, #100	@ 0x64
 8007356:	fb02 f303 	mul.w	r3, r2, r3
 800735a:	1acb      	subs	r3, r1, r3
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	3332      	adds	r3, #50	@ 0x32
 8007360:	4a33      	ldr	r2, [pc, #204]	@ (8007430 <UART_SetConfig+0x4e4>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800736c:	441c      	add	r4, r3
 800736e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007372:	2200      	movs	r2, #0
 8007374:	673b      	str	r3, [r7, #112]	@ 0x70
 8007376:	677a      	str	r2, [r7, #116]	@ 0x74
 8007378:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800737c:	4642      	mov	r2, r8
 800737e:	464b      	mov	r3, r9
 8007380:	1891      	adds	r1, r2, r2
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	415b      	adcs	r3, r3
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800738c:	4641      	mov	r1, r8
 800738e:	1851      	adds	r1, r2, r1
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	4649      	mov	r1, r9
 8007394:	414b      	adcs	r3, r1
 8007396:	607b      	str	r3, [r7, #4]
 8007398:	f04f 0200 	mov.w	r2, #0
 800739c:	f04f 0300 	mov.w	r3, #0
 80073a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80073a4:	4659      	mov	r1, fp
 80073a6:	00cb      	lsls	r3, r1, #3
 80073a8:	4651      	mov	r1, sl
 80073aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ae:	4651      	mov	r1, sl
 80073b0:	00ca      	lsls	r2, r1, #3
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	4603      	mov	r3, r0
 80073b8:	4642      	mov	r2, r8
 80073ba:	189b      	adds	r3, r3, r2
 80073bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073be:	464b      	mov	r3, r9
 80073c0:	460a      	mov	r2, r1
 80073c2:	eb42 0303 	adc.w	r3, r2, r3
 80073c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80073e0:	4649      	mov	r1, r9
 80073e2:	008b      	lsls	r3, r1, #2
 80073e4:	4641      	mov	r1, r8
 80073e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073ea:	4641      	mov	r1, r8
 80073ec:	008a      	lsls	r2, r1, #2
 80073ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80073f2:	f7f8 ff3d 	bl	8000270 <__aeabi_uldivmod>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007430 <UART_SetConfig+0x4e4>)
 80073fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007400:	095b      	lsrs	r3, r3, #5
 8007402:	2164      	movs	r1, #100	@ 0x64
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	011b      	lsls	r3, r3, #4
 800740c:	3332      	adds	r3, #50	@ 0x32
 800740e:	4a08      	ldr	r2, [pc, #32]	@ (8007430 <UART_SetConfig+0x4e4>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	095b      	lsrs	r3, r3, #5
 8007416:	f003 020f 	and.w	r2, r3, #15
 800741a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4422      	add	r2, r4
 8007422:	609a      	str	r2, [r3, #8]
}
 8007424:	bf00      	nop
 8007426:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800742a:	46bd      	mov	sp, r7
 800742c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007430:	51eb851f 	.word	0x51eb851f

08007434 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007434:	b084      	sub	sp, #16
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
 800743e:	f107 001c 	add.w	r0, r7, #28
 8007442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007446:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800744a:	2b01      	cmp	r3, #1
 800744c:	d123      	bne.n	8007496 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007452:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007476:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800747a:	2b01      	cmp	r3, #1
 800747c:	d105      	bne.n	800748a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9dc 	bl	8007848 <USB_CoreReset>
 8007490:	4603      	mov	r3, r0
 8007492:	73fb      	strb	r3, [r7, #15]
 8007494:	e01b      	b.n	80074ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f9d0 	bl	8007848 <USB_CoreReset>
 80074a8:	4603      	mov	r3, r0
 80074aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d106      	bne.n	80074c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	639a      	str	r2, [r3, #56]	@ 0x38
 80074c0:	e005      	b.n	80074ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074ce:	7fbb      	ldrb	r3, [r7, #30]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d10b      	bne.n	80074ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f043 0206 	orr.w	r2, r3, #6
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f043 0220 	orr.w	r2, r3, #32
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074f8:	b004      	add	sp, #16
 80074fa:	4770      	bx	lr

080074fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f043 0201 	orr.w	r2, r3, #1
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f023 0201 	bic.w	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800754c:	2300      	movs	r3, #0
 800754e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800755c:	78fb      	ldrb	r3, [r7, #3]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d115      	bne.n	800758e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800756e:	200a      	movs	r0, #10
 8007570:	f7fb fa6e 	bl	8002a50 <HAL_Delay>
      ms += 10U;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	330a      	adds	r3, #10
 8007578:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f956 	bl	800782c <USB_GetMode>
 8007580:	4603      	mov	r3, r0
 8007582:	2b01      	cmp	r3, #1
 8007584:	d01e      	beq.n	80075c4 <USB_SetCurrentMode+0x84>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2bc7      	cmp	r3, #199	@ 0xc7
 800758a:	d9f0      	bls.n	800756e <USB_SetCurrentMode+0x2e>
 800758c:	e01a      	b.n	80075c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d115      	bne.n	80075c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80075a0:	200a      	movs	r0, #10
 80075a2:	f7fb fa55 	bl	8002a50 <HAL_Delay>
      ms += 10U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	330a      	adds	r3, #10
 80075aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f93d 	bl	800782c <USB_GetMode>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <USB_SetCurrentMode+0x84>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80075bc:	d9f0      	bls.n	80075a0 <USB_SetCurrentMode+0x60>
 80075be:	e001      	b.n	80075c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e005      	b.n	80075d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80075c8:	d101      	bne.n	80075ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e000      	b.n	80075d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3301      	adds	r3, #1
 80075ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075f2:	d901      	bls.n	80075f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80075f4:	2303      	movs	r3, #3
 80075f6:	e01b      	b.n	8007630 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	daf2      	bge.n	80075e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007600:	2300      	movs	r3, #0
 8007602:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	019b      	lsls	r3, r3, #6
 8007608:	f043 0220 	orr.w	r2, r3, #32
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800761c:	d901      	bls.n	8007622 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e006      	b.n	8007630 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f003 0320 	and.w	r3, r3, #32
 800762a:	2b20      	cmp	r3, #32
 800762c:	d0f0      	beq.n	8007610 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007654:	d901      	bls.n	800765a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e018      	b.n	800768c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	daf2      	bge.n	8007648 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2210      	movs	r2, #16
 800766a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3301      	adds	r3, #1
 8007670:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007678:	d901      	bls.n	800767e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e006      	b.n	800768c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	2b10      	cmp	r3, #16
 8007688:	d0f0      	beq.n	800766c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007698:	b480      	push	{r7}
 800769a:	b089      	sub	sp, #36	@ 0x24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	4611      	mov	r1, r2
 80076a4:	461a      	mov	r2, r3
 80076a6:	460b      	mov	r3, r1
 80076a8:	71fb      	strb	r3, [r7, #7]
 80076aa:	4613      	mov	r3, r2
 80076ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80076b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d123      	bne.n	8007706 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076be:	88bb      	ldrh	r3, [r7, #4]
 80076c0:	3303      	adds	r3, #3
 80076c2:	089b      	lsrs	r3, r3, #2
 80076c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80076c6:	2300      	movs	r3, #0
 80076c8:	61bb      	str	r3, [r7, #24]
 80076ca:	e018      	b.n	80076fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80076cc:	79fb      	ldrb	r3, [r7, #7]
 80076ce:	031a      	lsls	r2, r3, #12
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80076d8:	461a      	mov	r2, r3
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	3301      	adds	r3, #1
 80076e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	3301      	adds	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	3301      	adds	r3, #1
 80076f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	3301      	adds	r3, #1
 80076f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	3301      	adds	r3, #1
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	429a      	cmp	r2, r3
 8007704:	d3e2      	bcc.n	80076cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3724      	adds	r7, #36	@ 0x24
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007714:	b480      	push	{r7}
 8007716:	b08b      	sub	sp, #44	@ 0x2c
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	4613      	mov	r3, r2
 8007720:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800772a:	88fb      	ldrh	r3, [r7, #6]
 800772c:	089b      	lsrs	r3, r3, #2
 800772e:	b29b      	uxth	r3, r3
 8007730:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007732:	88fb      	ldrh	r3, [r7, #6]
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800773a:	2300      	movs	r3, #0
 800773c:	623b      	str	r3, [r7, #32]
 800773e:	e014      	b.n	800776a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	601a      	str	r2, [r3, #0]
    pDest++;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	3301      	adds	r3, #1
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	3301      	adds	r3, #1
 8007756:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	3301      	adds	r3, #1
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	3301      	adds	r3, #1
 8007762:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	3301      	adds	r3, #1
 8007768:	623b      	str	r3, [r7, #32]
 800776a:	6a3a      	ldr	r2, [r7, #32]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	429a      	cmp	r2, r3
 8007770:	d3e6      	bcc.n	8007740 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007772:	8bfb      	ldrh	r3, [r7, #30]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d01e      	beq.n	80077b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007782:	461a      	mov	r2, r3
 8007784:	f107 0310 	add.w	r3, r7, #16
 8007788:	6812      	ldr	r2, [r2, #0]
 800778a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	00db      	lsls	r3, r3, #3
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
 8007798:	b2da      	uxtb	r2, r3
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	701a      	strb	r2, [r3, #0]
      i++;
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	3301      	adds	r3, #1
 80077a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80077a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a6:	3301      	adds	r3, #1
 80077a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80077aa:	8bfb      	ldrh	r3, [r7, #30]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80077b0:	8bfb      	ldrh	r3, [r7, #30]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1ea      	bne.n	800778c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	372c      	adds	r7, #44	@ 0x2c
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	4013      	ands	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80077dc:	68fb      	ldr	r3, [r7, #12]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3714      	adds	r7, #20
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	460b      	mov	r3, r1
 80077f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	4413      	add	r3, r2
 8007802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4413      	add	r3, r2
 8007812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	4013      	ands	r3, r2
 800781c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800781e:	68bb      	ldr	r3, [r7, #8]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	f003 0301 	and.w	r3, r3, #1
}
 800783c:	4618      	mov	r0, r3
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007860:	d901      	bls.n	8007866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e01b      	b.n	800789e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	daf2      	bge.n	8007854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800786e:	2300      	movs	r3, #0
 8007870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	f043 0201 	orr.w	r2, r3, #1
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800788a:	d901      	bls.n	8007890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e006      	b.n	800789e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b01      	cmp	r3, #1
 800789a:	d0f0      	beq.n	800787e <USB_CoreReset+0x36>

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
	...

080078ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078ac:	b084      	sub	sp, #16
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b086      	sub	sp, #24
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80078ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80078cc:	461a      	mov	r2, r3
 80078ce:	2300      	movs	r3, #0
 80078d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d119      	bne.n	8007936 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007902:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007906:	2b01      	cmp	r3, #1
 8007908:	d10a      	bne.n	8007920 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007918:	f043 0304 	orr.w	r3, r3, #4
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	e014      	b.n	800794a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800792e:	f023 0304 	bic.w	r3, r3, #4
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	e009      	b.n	800794a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007944:	f023 0304 	bic.w	r3, r3, #4
 8007948:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800794a:	2110      	movs	r1, #16
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f7ff fe43 	bl	80075d8 <USB_FlushTxFifo>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d001      	beq.n	800795c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f7ff fe6d 	bl	800763c <USB_FlushRxFifo>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800796c:	2300      	movs	r3, #0
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	e015      	b.n	800799e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4413      	add	r3, r2
 800797a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800797e:	461a      	mov	r2, r3
 8007980:	f04f 33ff 	mov.w	r3, #4294967295
 8007984:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007992:	461a      	mov	r2, r3
 8007994:	2300      	movs	r3, #0
 8007996:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	3301      	adds	r3, #1
 800799c:	613b      	str	r3, [r7, #16]
 800799e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80079a2:	461a      	mov	r2, r3
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d3e3      	bcc.n	8007972 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f04f 32ff 	mov.w	r2, #4294967295
 80079b6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4a18      	ldr	r2, [pc, #96]	@ (8007a1c <USB_HostInit+0x170>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d10b      	bne.n	80079d8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079c6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a15      	ldr	r2, [pc, #84]	@ (8007a20 <USB_HostInit+0x174>)
 80079cc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a14      	ldr	r2, [pc, #80]	@ (8007a24 <USB_HostInit+0x178>)
 80079d2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80079d6:	e009      	b.n	80079ec <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2280      	movs	r2, #128	@ 0x80
 80079dc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a11      	ldr	r2, [pc, #68]	@ (8007a28 <USB_HostInit+0x17c>)
 80079e2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a11      	ldr	r2, [pc, #68]	@ (8007a2c <USB_HostInit+0x180>)
 80079e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d105      	bne.n	8007a00 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	f043 0210 	orr.w	r2, r3, #16
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	4b0a      	ldr	r3, [pc, #40]	@ (8007a30 <USB_HostInit+0x184>)
 8007a06:	4313      	orrs	r3, r2
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a18:	b004      	add	sp, #16
 8007a1a:	4770      	bx	lr
 8007a1c:	40040000 	.word	0x40040000
 8007a20:	01000200 	.word	0x01000200
 8007a24:	00e00300 	.word	0x00e00300
 8007a28:	00600080 	.word	0x00600080
 8007a2c:	004000e0 	.word	0x004000e0
 8007a30:	a3200008 	.word	0xa3200008

08007a34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	68f9      	ldr	r1, [r7, #12]
 8007a68:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007a6c:	4313      	orrs	r3, r2
 8007a6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007a70:	78fb      	ldrb	r3, [r7, #3]
 8007a72:	2b01      	cmp	r3, #1
 8007a74:	d107      	bne.n	8007a86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007a82:	6053      	str	r3, [r2, #4]
 8007a84:	e00c      	b.n	8007aa0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d107      	bne.n	8007a9c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a92:	461a      	mov	r2, r3
 8007a94:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007a98:	6053      	str	r3, [r2, #4]
 8007a9a:	e001      	b.n	8007aa0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e000      	b.n	8007aa2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3714      	adds	r7, #20
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007aae:	b580      	push	{r7, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007ace:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007adc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007ade:	2064      	movs	r0, #100	@ 0x64
 8007ae0:	f7fa ffb6 	bl	8002a50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007af0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007af2:	200a      	movs	r0, #10
 8007af4:	f7fa ffac 	bl	8002a50 <HAL_Delay>

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b085      	sub	sp, #20
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007b26:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d109      	bne.n	8007b46 <USB_DriveVbus+0x44>
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d106      	bne.n	8007b46 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007b40:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007b44:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b50:	d109      	bne.n	8007b66 <USB_DriveVbus+0x64>
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d106      	bne.n	8007b66 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b64:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	0c5b      	lsrs	r3, r3, #17
 8007b92:	f003 0303 	and.w	r3, r3, #3
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b085      	sub	sp, #20
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	b29b      	uxth	r3, r3
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	4608      	mov	r0, r1
 8007bce:	4611      	mov	r1, r2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	70fb      	strb	r3, [r7, #3]
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	70bb      	strb	r3, [r7, #2]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007bde:	2300      	movs	r3, #0
 8007be0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007bfa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d87c      	bhi.n	8007cfc <USB_HC_Init+0x138>
 8007c02:	a201      	add	r2, pc, #4	@ (adr r2, 8007c08 <USB_HC_Init+0x44>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007cbf 	.word	0x08007cbf
 8007c10:	08007c19 	.word	0x08007c19
 8007c14:	08007c81 	.word	0x08007c81
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c18:	78fb      	ldrb	r3, [r7, #3]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c24:	461a      	mov	r2, r3
 8007c26:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007c2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007c2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	da10      	bge.n	8007c56 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c34:	78fb      	ldrb	r3, [r7, #3]
 8007c36:	015a      	lsls	r2, r3, #5
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	78fa      	ldrb	r2, [r7, #3]
 8007c44:	0151      	lsls	r1, r2, #5
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	440a      	add	r2, r1
 8007c4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c52:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007c54:	e055      	b.n	8007d02 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a6f      	ldr	r2, [pc, #444]	@ (8007e18 <USB_HC_Init+0x254>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d151      	bne.n	8007d02 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007c5e:	78fb      	ldrb	r3, [r7, #3]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	693a      	ldr	r2, [r7, #16]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c78:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c7c:	60d3      	str	r3, [r2, #12]
      break;
 8007c7e:	e040      	b.n	8007d02 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007c92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007c94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	da34      	bge.n	8007d06 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	78fa      	ldrb	r2, [r7, #3]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cba:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007cbc:	e023      	b.n	8007d06 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f240 2325 	movw	r3, #549	@ 0x225
 8007cd0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007cd2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da17      	bge.n	8007d0a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	015a      	lsls	r2, r3, #5
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	0151      	lsls	r1, r2, #5
 8007cec:	693a      	ldr	r2, [r7, #16]
 8007cee:	440a      	add	r2, r1
 8007cf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cf4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007cf8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007cfa:	e006      	b.n	8007d0a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	77fb      	strb	r3, [r7, #31]
      break;
 8007d00:	e004      	b.n	8007d0c <USB_HC_Init+0x148>
      break;
 8007d02:	bf00      	nop
 8007d04:	e002      	b.n	8007d0c <USB_HC_Init+0x148>
      break;
 8007d06:	bf00      	nop
 8007d08:	e000      	b.n	8007d0c <USB_HC_Init+0x148>
      break;
 8007d0a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d18:	461a      	mov	r2, r3
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007d1e:	78fb      	ldrb	r3, [r7, #3]
 8007d20:	015a      	lsls	r2, r3, #5
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	4413      	add	r3, r2
 8007d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	78fa      	ldrb	r2, [r7, #3]
 8007d2e:	0151      	lsls	r1, r2, #5
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	440a      	add	r2, r1
 8007d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d38:	f043 0302 	orr.w	r3, r3, #2
 8007d3c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d44:	699a      	ldr	r2, [r3, #24]
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d52:	6939      	ldr	r1, [r7, #16]
 8007d54:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007d68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	da03      	bge.n	8007d78 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d74:	61bb      	str	r3, [r7, #24]
 8007d76:	e001      	b.n	8007d7c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fef9 	bl	8007b74 <USB_GetHostSpeed>
 8007d82:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007d84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d106      	bne.n	8007d9a <USB_HC_Init+0x1d6>
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d003      	beq.n	8007d9a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007d92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e001      	b.n	8007d9e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007d9e:	787b      	ldrb	r3, [r7, #1]
 8007da0:	059b      	lsls	r3, r3, #22
 8007da2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007da6:	78bb      	ldrb	r3, [r7, #2]
 8007da8:	02db      	lsls	r3, r3, #11
 8007daa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007dae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007db0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007db4:	049b      	lsls	r3, r3, #18
 8007db6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007dba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007dbc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007dc2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007dcc:	78fa      	ldrb	r2, [r7, #3]
 8007dce:	0151      	lsls	r1, r2, #5
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	440a      	add	r2, r1
 8007dd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007dd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ddc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007dde:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d003      	beq.n	8007dee <USB_HC_Init+0x22a>
 8007de6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d10f      	bne.n	8007e0e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007dee:	78fb      	ldrb	r3, [r7, #3]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	78fa      	ldrb	r2, [r7, #3]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	693a      	ldr	r2, [r7, #16]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007e0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3720      	adds	r7, #32
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	40040000 	.word	0x40040000

08007e1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08c      	sub	sp, #48	@ 0x30
 8007e20:	af02      	add	r7, sp, #8
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	4613      	mov	r3, r2
 8007e28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	785b      	ldrb	r3, [r3, #1]
 8007e32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007e34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e38:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8007fb4 <USB_HC_StartXfer+0x198>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d12f      	bne.n	8007ea2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007e42:	79fb      	ldrb	r3, [r7, #7]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d11c      	bne.n	8007e82 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	7c9b      	ldrb	r3, [r3, #18]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <USB_HC_StartXfer+0x3c>
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	7c9b      	ldrb	r3, [r3, #18]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d124      	bne.n	8007ea2 <USB_HC_StartXfer+0x86>
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	799b      	ldrb	r3, [r3, #6]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d120      	bne.n	8007ea2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	015a      	lsls	r2, r3, #5
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	4413      	add	r3, r2
 8007e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	0151      	lsls	r1, r2, #5
 8007e72:	6a3a      	ldr	r2, [r7, #32]
 8007e74:	440a      	add	r2, r1
 8007e76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e7e:	60d3      	str	r3, [r2, #12]
 8007e80:	e00f      	b.n	8007ea2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	791b      	ldrb	r3, [r3, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d10b      	bne.n	8007ea2 <USB_HC_StartXfer+0x86>
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	795b      	ldrb	r3, [r3, #5]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d107      	bne.n	8007ea2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	4619      	mov	r1, r3
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fb6b 	bl	8008574 <USB_DoPing>
        return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e232      	b.n	8008308 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	799b      	ldrb	r3, [r3, #6]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d158      	bne.n	8007f5c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	78db      	ldrb	r3, [r3, #3]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d007      	beq.n	8007ec6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007eb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	8a92      	ldrh	r2, [r2, #20]
 8007ebc:	fb03 f202 	mul.w	r2, r3, r2
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	61da      	str	r2, [r3, #28]
 8007ec4:	e07c      	b.n	8007fc0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	7c9b      	ldrb	r3, [r3, #18]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d130      	bne.n	8007f30 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	2bbc      	cmp	r3, #188	@ 0xbc
 8007ed4:	d918      	bls.n	8007f08 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	8a9b      	ldrh	r3, [r3, #20]
 8007eda:	461a      	mov	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	69da      	ldr	r2, [r3, #28]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d003      	beq.n	8007ef8 <USB_HC_StartXfer+0xdc>
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d103      	bne.n	8007f00 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	2202      	movs	r2, #2
 8007efc:	60da      	str	r2, [r3, #12]
 8007efe:	e05f      	b.n	8007fc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2201      	movs	r2, #1
 8007f04:	60da      	str	r2, [r3, #12]
 8007f06:	e05b      	b.n	8007fc0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	6a1a      	ldr	r2, [r3, #32]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d007      	beq.n	8007f28 <USB_HC_StartXfer+0x10c>
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d003      	beq.n	8007f28 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	2204      	movs	r2, #4
 8007f24:	60da      	str	r2, [r3, #12]
 8007f26:	e04b      	b.n	8007fc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	2203      	movs	r2, #3
 8007f2c:	60da      	str	r2, [r3, #12]
 8007f2e:	e047      	b.n	8007fc0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007f30:	79fb      	ldrb	r3, [r7, #7]
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d10d      	bne.n	8007f52 <USB_HC_StartXfer+0x136>
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	6a1b      	ldr	r3, [r3, #32]
 8007f3a:	68ba      	ldr	r2, [r7, #8]
 8007f3c:	8a92      	ldrh	r2, [r2, #20]
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d907      	bls.n	8007f52 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007f42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	8a92      	ldrh	r2, [r2, #20]
 8007f48:	fb03 f202 	mul.w	r2, r3, r2
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	61da      	str	r2, [r3, #28]
 8007f50:	e036      	b.n	8007fc0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	6a1a      	ldr	r2, [r3, #32]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	61da      	str	r2, [r3, #28]
 8007f5a:	e031      	b.n	8007fc0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d018      	beq.n	8007f96 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	6a1b      	ldr	r3, [r3, #32]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	8a92      	ldrh	r2, [r2, #20]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	8a92      	ldrh	r2, [r2, #20]
 8007f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f78:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007f7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007f7c:	8b7b      	ldrh	r3, [r7, #26]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d90b      	bls.n	8007f9a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007f82:	8b7b      	ldrh	r3, [r7, #26]
 8007f84:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007f86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	8a92      	ldrh	r2, [r2, #20]
 8007f8c:	fb03 f202 	mul.w	r2, r3, r2
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	61da      	str	r2, [r3, #28]
 8007f94:	e001      	b.n	8007f9a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007f96:	2301      	movs	r3, #1
 8007f98:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	78db      	ldrb	r3, [r3, #3]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007fa2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	8a92      	ldrh	r2, [r2, #20]
 8007fa8:	fb03 f202 	mul.w	r2, r3, r2
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	61da      	str	r2, [r3, #28]
 8007fb0:	e006      	b.n	8007fc0 <USB_HC_StartXfer+0x1a4>
 8007fb2:	bf00      	nop
 8007fb4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	6a1a      	ldr	r2, [r3, #32]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007fc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fca:	04d9      	lsls	r1, r3, #19
 8007fcc:	4ba3      	ldr	r3, [pc, #652]	@ (800825c <USB_HC_StartXfer+0x440>)
 8007fce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007fd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	7d9b      	ldrb	r3, [r3, #22]
 8007fd6:	075b      	lsls	r3, r3, #29
 8007fd8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007fdc:	69f9      	ldr	r1, [r7, #28]
 8007fde:	0148      	lsls	r0, r1, #5
 8007fe0:	6a39      	ldr	r1, [r7, #32]
 8007fe2:	4401      	add	r1, r0
 8007fe4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007fe8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007fea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007fec:	79fb      	ldrb	r3, [r7, #7]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	6999      	ldr	r1, [r3, #24]
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008002:	460a      	mov	r2, r1
 8008004:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	bf0c      	ite	eq
 8008016:	2301      	moveq	r3, #1
 8008018:	2300      	movne	r3, #0
 800801a:	b2db      	uxtb	r3, r3
 800801c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	015a      	lsls	r2, r3, #5
 8008022:	6a3b      	ldr	r3, [r7, #32]
 8008024:	4413      	add	r3, r2
 8008026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	69fa      	ldr	r2, [r7, #28]
 800802e:	0151      	lsls	r1, r2, #5
 8008030:	6a3a      	ldr	r2, [r7, #32]
 8008032:	440a      	add	r2, r1
 8008034:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008038:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800803c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800803e:	69fb      	ldr	r3, [r7, #28]
 8008040:	015a      	lsls	r2, r3, #5
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	4413      	add	r3, r2
 8008046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	7e7b      	ldrb	r3, [r7, #25]
 800804e:	075b      	lsls	r3, r3, #29
 8008050:	69f9      	ldr	r1, [r7, #28]
 8008052:	0148      	lsls	r0, r1, #5
 8008054:	6a39      	ldr	r1, [r7, #32]
 8008056:	4401      	add	r1, r0
 8008058:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800805c:	4313      	orrs	r3, r2
 800805e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	799b      	ldrb	r3, [r3, #6]
 8008064:	2b01      	cmp	r3, #1
 8008066:	f040 80c3 	bne.w	80081f0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	7c5b      	ldrb	r3, [r3, #17]
 800806e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008074:	4313      	orrs	r3, r2
 8008076:	69fa      	ldr	r2, [r7, #28]
 8008078:	0151      	lsls	r1, r2, #5
 800807a:	6a3a      	ldr	r2, [r7, #32]
 800807c:	440a      	add	r2, r1
 800807e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008082:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008086:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	4413      	add	r3, r2
 8008090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	0151      	lsls	r1, r2, #5
 800809a:	6a3a      	ldr	r2, [r7, #32]
 800809c:	440a      	add	r2, r1
 800809e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80080a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	79db      	ldrb	r3, [r3, #7]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d123      	bne.n	80080f8 <USB_HC_StartXfer+0x2dc>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	78db      	ldrb	r3, [r3, #3]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d11f      	bne.n	80080f8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	015a      	lsls	r2, r3, #5
 80080bc:	6a3b      	ldr	r3, [r7, #32]
 80080be:	4413      	add	r3, r2
 80080c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	0151      	lsls	r1, r2, #5
 80080ca:	6a3a      	ldr	r2, [r7, #32]
 80080cc:	440a      	add	r2, r1
 80080ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080d6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	6a3a      	ldr	r2, [r7, #32]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080f6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	7c9b      	ldrb	r3, [r3, #18]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d003      	beq.n	8008108 <USB_HC_StartXfer+0x2ec>
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	7c9b      	ldrb	r3, [r3, #18]
 8008104:	2b03      	cmp	r3, #3
 8008106:	d117      	bne.n	8008138 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800810c:	2b01      	cmp	r3, #1
 800810e:	d113      	bne.n	8008138 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	78db      	ldrb	r3, [r3, #3]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d10f      	bne.n	8008138 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	4413      	add	r3, r2
 8008120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	69fa      	ldr	r2, [r7, #28]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	6a3a      	ldr	r2, [r7, #32]
 800812c:	440a      	add	r2, r1
 800812e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008136:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	7c9b      	ldrb	r3, [r3, #18]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d162      	bne.n	8008206 <USB_HC_StartXfer+0x3ea>
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	78db      	ldrb	r3, [r3, #3]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d15e      	bne.n	8008206 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	3b01      	subs	r3, #1
 800814e:	2b03      	cmp	r3, #3
 8008150:	d858      	bhi.n	8008204 <USB_HC_StartXfer+0x3e8>
 8008152:	a201      	add	r2, pc, #4	@ (adr r2, 8008158 <USB_HC_StartXfer+0x33c>)
 8008154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008158:	08008169 	.word	0x08008169
 800815c:	0800818b 	.word	0x0800818b
 8008160:	080081ad 	.word	0x080081ad
 8008164:	080081cf 	.word	0x080081cf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	4413      	add	r3, r2
 8008170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	69fa      	ldr	r2, [r7, #28]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	6a3a      	ldr	r2, [r7, #32]
 800817c:	440a      	add	r2, r1
 800817e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008186:	6053      	str	r3, [r2, #4]
          break;
 8008188:	e03d      	b.n	8008206 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	4413      	add	r3, r2
 8008192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	69fa      	ldr	r2, [r7, #28]
 800819a:	0151      	lsls	r1, r2, #5
 800819c:	6a3a      	ldr	r2, [r7, #32]
 800819e:	440a      	add	r2, r1
 80081a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081a4:	f043 030e 	orr.w	r3, r3, #14
 80081a8:	6053      	str	r3, [r2, #4]
          break;
 80081aa:	e02c      	b.n	8008206 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80081ac:	69fb      	ldr	r3, [r7, #28]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	69fa      	ldr	r2, [r7, #28]
 80081bc:	0151      	lsls	r1, r2, #5
 80081be:	6a3a      	ldr	r2, [r7, #32]
 80081c0:	440a      	add	r2, r1
 80081c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081ca:	6053      	str	r3, [r2, #4]
          break;
 80081cc:	e01b      	b.n	8008206 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	69fa      	ldr	r2, [r7, #28]
 80081de:	0151      	lsls	r1, r2, #5
 80081e0:	6a3a      	ldr	r2, [r7, #32]
 80081e2:	440a      	add	r2, r1
 80081e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081ec:	6053      	str	r3, [r2, #4]
          break;
 80081ee:	e00a      	b.n	8008206 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081fc:	461a      	mov	r2, r3
 80081fe:	2300      	movs	r3, #0
 8008200:	6053      	str	r3, [r2, #4]
 8008202:	e000      	b.n	8008206 <USB_HC_StartXfer+0x3ea>
          break;
 8008204:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	6a3b      	ldr	r3, [r7, #32]
 800820c:	4413      	add	r3, r2
 800820e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800821c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	78db      	ldrb	r3, [r3, #3]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800822c:	613b      	str	r3, [r7, #16]
 800822e:	e003      	b.n	8008238 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008236:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800823e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	4413      	add	r3, r2
 8008248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800824c:	461a      	mov	r2, r3
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	e055      	b.n	8008308 <USB_HC_StartXfer+0x4ec>
 800825c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	78db      	ldrb	r3, [r3, #3]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d14e      	bne.n	8008306 <USB_HC_StartXfer+0x4ea>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d04a      	beq.n	8008306 <USB_HC_StartXfer+0x4ea>
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	79db      	ldrb	r3, [r3, #7]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d146      	bne.n	8008306 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	7c9b      	ldrb	r3, [r3, #18]
 800827c:	2b03      	cmp	r3, #3
 800827e:	d831      	bhi.n	80082e4 <USB_HC_StartXfer+0x4c8>
 8008280:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <USB_HC_StartXfer+0x46c>)
 8008282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008286:	bf00      	nop
 8008288:	08008299 	.word	0x08008299
 800828c:	080082bd 	.word	0x080082bd
 8008290:	08008299 	.word	0x08008299
 8008294:	080082bd 	.word	0x080082bd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	6a1b      	ldr	r3, [r3, #32]
 800829c:	3303      	adds	r3, #3
 800829e:	089b      	lsrs	r3, r3, #2
 80082a0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80082a2:	8afa      	ldrh	r2, [r7, #22]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d91c      	bls.n	80082e8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	f043 0220 	orr.w	r2, r3, #32
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	619a      	str	r2, [r3, #24]
        }
        break;
 80082ba:	e015      	b.n	80082e8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	3303      	adds	r3, #3
 80082c2:	089b      	lsrs	r3, r3, #2
 80082c4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80082c6:	8afa      	ldrh	r2, [r7, #22]
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d90a      	bls.n	80082ec <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	699b      	ldr	r3, [r3, #24]
 80082da:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	619a      	str	r2, [r3, #24]
        }
        break;
 80082e2:	e003      	b.n	80082ec <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80082e4:	bf00      	nop
 80082e6:	e002      	b.n	80082ee <USB_HC_StartXfer+0x4d2>
        break;
 80082e8:	bf00      	nop
 80082ea:	e000      	b.n	80082ee <USB_HC_StartXfer+0x4d2>
        break;
 80082ec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	6999      	ldr	r1, [r3, #24]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	785a      	ldrb	r2, [r3, #1]
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2000      	movs	r0, #0
 80082fe:	9000      	str	r0, [sp, #0]
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff f9c9 	bl	8007698 <USB_WritePacket>
  }

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3728      	adds	r7, #40	@ 0x28
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008322:	695b      	ldr	r3, [r3, #20]
 8008324:	b29b      	uxth	r3, r3
}
 8008326:	4618      	mov	r0, r3
 8008328:	3714      	adds	r7, #20
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008332:	b480      	push	{r7}
 8008334:	b089      	sub	sp, #36	@ 0x24
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008342:	78fb      	ldrb	r3, [r7, #3]
 8008344:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	015a      	lsls	r2, r3, #5
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4413      	add	r3, r2
 8008352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	0c9b      	lsrs	r3, r3, #18
 800835a:	f003 0303 	and.w	r3, r3, #3
 800835e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	4413      	add	r3, r2
 8008368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	0fdb      	lsrs	r3, r3, #31
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	0fdb      	lsrs	r3, r3, #31
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b20      	cmp	r3, #32
 8008396:	d10d      	bne.n	80083b4 <USB_HC_Halt+0x82>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10a      	bne.n	80083b4 <USB_HC_Halt+0x82>
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d002      	beq.n	80083b0 <USB_HC_Halt+0x7e>
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d101      	bne.n	80083b4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	e0d8      	b.n	8008566 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <USB_HC_Halt+0x8e>
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	2b02      	cmp	r3, #2
 80083be:	d173      	bne.n	80084a8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69ba      	ldr	r2, [r7, #24]
 80083d0:	0151      	lsls	r1, r2, #5
 80083d2:	69fa      	ldr	r2, [r7, #28]
 80083d4:	440a      	add	r2, r1
 80083d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083de:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	f003 0320 	and.w	r3, r3, #32
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d14a      	bne.n	8008482 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d133      	bne.n	8008460 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69ba      	ldr	r2, [r7, #24]
 8008408:	0151      	lsls	r1, r2, #5
 800840a:	69fa      	ldr	r2, [r7, #28]
 800840c:	440a      	add	r2, r1
 800840e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008412:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008416:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	015a      	lsls	r2, r3, #5
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	4413      	add	r3, r2
 8008420:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	0151      	lsls	r1, r2, #5
 800842a:	69fa      	ldr	r2, [r7, #28]
 800842c:	440a      	add	r2, r1
 800842e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008432:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008436:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	3301      	adds	r3, #1
 800843c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008444:	d82e      	bhi.n	80084a4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4413      	add	r3, r2
 800844e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800845c:	d0ec      	beq.n	8008438 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800845e:	e081      	b.n	8008564 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008460:	69bb      	ldr	r3, [r7, #24]
 8008462:	015a      	lsls	r2, r3, #5
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	4413      	add	r3, r2
 8008468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	69ba      	ldr	r2, [r7, #24]
 8008470:	0151      	lsls	r1, r2, #5
 8008472:	69fa      	ldr	r2, [r7, #28]
 8008474:	440a      	add	r2, r1
 8008476:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800847a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800847e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008480:	e070      	b.n	8008564 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	015a      	lsls	r2, r3, #5
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	4413      	add	r3, r2
 800848a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	0151      	lsls	r1, r2, #5
 8008494:	69fa      	ldr	r2, [r7, #28]
 8008496:	440a      	add	r2, r1
 8008498:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800849c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084a2:	e05f      	b.n	8008564 <USB_HC_Halt+0x232>
            break;
 80084a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084a6:	e05d      	b.n	8008564 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	69ba      	ldr	r2, [r7, #24]
 80084b8:	0151      	lsls	r1, r2, #5
 80084ba:	69fa      	ldr	r2, [r7, #28]
 80084bc:	440a      	add	r2, r1
 80084be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80084c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d133      	bne.n	8008540 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	0151      	lsls	r1, r2, #5
 80084ea:	69fa      	ldr	r2, [r7, #28]
 80084ec:	440a      	add	r2, r1
 80084ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	440a      	add	r2, r1
 800850e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008512:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008516:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	3301      	adds	r3, #1
 800851c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008524:	d81d      	bhi.n	8008562 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	4413      	add	r3, r2
 800852e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008538:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800853c:	d0ec      	beq.n	8008518 <USB_HC_Halt+0x1e6>
 800853e:	e011      	b.n	8008564 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	015a      	lsls	r2, r3, #5
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	4413      	add	r3, r2
 8008548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	69ba      	ldr	r2, [r7, #24]
 8008550:	0151      	lsls	r1, r2, #5
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	440a      	add	r2, r1
 8008556:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800855a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	e000      	b.n	8008564 <USB_HC_Halt+0x232>
          break;
 8008562:	bf00      	nop
    }
  }

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3724      	adds	r7, #36	@ 0x24
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
	...

08008574 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008574:	b480      	push	{r7}
 8008576:	b087      	sub	sp, #28
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	460b      	mov	r3, r1
 800857e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008588:	2301      	movs	r3, #1
 800858a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	04da      	lsls	r2, r3, #19
 8008590:	4b15      	ldr	r3, [pc, #84]	@ (80085e8 <USB_DoPing+0x74>)
 8008592:	4013      	ands	r3, r2
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	440a      	add	r2, r1
 800859c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085d2:	461a      	mov	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	1ff80000 	.word	0x1ff80000

080085ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f7fe ff8c 	bl	800751e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008606:	2110      	movs	r1, #16
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7fe ffe5 	bl	80075d8 <USB_FlushTxFifo>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff f80f 	bl	800763c <USB_FlushRxFifo>
 800861e:	4603      	mov	r3, r0
 8008620:	2b00      	cmp	r3, #0
 8008622:	d001      	beq.n	8008628 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
 800862c:	e01f      	b.n	800866e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	4413      	add	r3, r2
 8008636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008644:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800864c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008654:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	4413      	add	r3, r2
 800865e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008662:	461a      	mov	r2, r3
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	3301      	adds	r3, #1
 800866c:	61bb      	str	r3, [r7, #24]
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b0f      	cmp	r3, #15
 8008672:	d9dc      	bls.n	800862e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008674:	2300      	movs	r3, #0
 8008676:	61bb      	str	r3, [r7, #24]
 8008678:	e034      	b.n	80086e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	015a      	lsls	r2, r3, #5
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	4413      	add	r3, r2
 8008682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008690:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008698:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ae:	461a      	mov	r2, r3
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3301      	adds	r3, #1
 80086b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80086c0:	d80c      	bhi.n	80086dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086d8:	d0ec      	beq.n	80086b4 <USB_StopHost+0xc8>
 80086da:	e000      	b.n	80086de <USB_StopHost+0xf2>
        break;
 80086dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	3301      	adds	r3, #1
 80086e2:	61bb      	str	r3, [r7, #24]
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	2b0f      	cmp	r3, #15
 80086e8:	d9c7      	bls.n	800867a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086f0:	461a      	mov	r2, r3
 80086f2:	f04f 33ff 	mov.w	r3, #4294967295
 80086f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f04f 32ff 	mov.w	r2, #4294967295
 80086fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7fe fefb 	bl	80074fc <USB_EnableGlobalInt>

  return ret;
 8008706:	7ffb      	ldrb	r3, [r7, #31]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3720      	adds	r7, #32
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008710:	b590      	push	{r4, r7, lr}
 8008712:	b089      	sub	sp, #36	@ 0x24
 8008714:	af04      	add	r7, sp, #16
 8008716:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008718:	2301      	movs	r3, #1
 800871a:	2202      	movs	r2, #2
 800871c:	2102      	movs	r1, #2
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fc85 	bl	800902e <USBH_FindInterface>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	2bff      	cmp	r3, #255	@ 0xff
 800872c:	d002      	beq.n	8008734 <USBH_CDC_InterfaceInit+0x24>
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d901      	bls.n	8008738 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008734:	2302      	movs	r3, #2
 8008736:	e13d      	b.n	80089b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fc5a 	bl	8008ff6 <USBH_SelectInterface>
 8008742:	4603      	mov	r3, r0
 8008744:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800874c:	2302      	movs	r3, #2
 800874e:	e131      	b.n	80089b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008756:	2050      	movs	r0, #80	@ 0x50
 8008758:	f002 fb64 	bl	800ae24 <malloc>
 800875c:	4603      	mov	r3, r0
 800875e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008770:	2302      	movs	r3, #2
 8008772:	e11f      	b.n	80089b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008774:	2250      	movs	r2, #80	@ 0x50
 8008776:	2100      	movs	r1, #0
 8008778:	68b8      	ldr	r0, [r7, #8]
 800877a:	f002 fecf 	bl	800b51c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	211a      	movs	r1, #26
 8008784:	fb01 f303 	mul.w	r3, r1, r3
 8008788:	4413      	add	r3, r2
 800878a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	b25b      	sxtb	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	da15      	bge.n	80087c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	211a      	movs	r1, #26
 800879c:	fb01 f303 	mul.w	r3, r1, r3
 80087a0:	4413      	add	r3, r2
 80087a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	211a      	movs	r1, #26
 80087b2:	fb01 f303 	mul.w	r3, r1, r3
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80087bc:	881a      	ldrh	r2, [r3, #0]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f001 ffbe 	bl	800a74a <USBH_AllocPipe>
 80087ce:	4603      	mov	r3, r0
 80087d0:	461a      	mov	r2, r3
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	7819      	ldrb	r1, [r3, #0]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	7858      	ldrb	r0, [r3, #1]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	8952      	ldrh	r2, [r2, #10]
 80087ee:	9202      	str	r2, [sp, #8]
 80087f0:	2203      	movs	r2, #3
 80087f2:	9201      	str	r2, [sp, #4]
 80087f4:	9300      	str	r3, [sp, #0]
 80087f6:	4623      	mov	r3, r4
 80087f8:	4602      	mov	r2, r0
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 ff76 	bl	800a6ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2200      	movs	r2, #0
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f002 fa85 	bl	800ad18 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800880e:	2300      	movs	r3, #0
 8008810:	2200      	movs	r2, #0
 8008812:	210a      	movs	r1, #10
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fc0a 	bl	800902e <USBH_FindInterface>
 800881a:	4603      	mov	r3, r0
 800881c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	2bff      	cmp	r3, #255	@ 0xff
 8008822:	d002      	beq.n	800882a <USBH_CDC_InterfaceInit+0x11a>
 8008824:	7bfb      	ldrb	r3, [r7, #15]
 8008826:	2b01      	cmp	r3, #1
 8008828:	d901      	bls.n	800882e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800882a:	2302      	movs	r3, #2
 800882c:	e0c2      	b.n	80089b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	211a      	movs	r1, #26
 8008834:	fb01 f303 	mul.w	r3, r1, r3
 8008838:	4413      	add	r3, r2
 800883a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	b25b      	sxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	da16      	bge.n	8008874 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008846:	7bfb      	ldrb	r3, [r7, #15]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	211a      	movs	r1, #26
 800884c:	fb01 f303 	mul.w	r3, r1, r3
 8008850:	4413      	add	r3, r2
 8008852:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008856:	781a      	ldrb	r2, [r3, #0]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	211a      	movs	r1, #26
 8008862:	fb01 f303 	mul.w	r3, r1, r3
 8008866:	4413      	add	r3, r2
 8008868:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800886c:	881a      	ldrh	r2, [r3, #0]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	835a      	strh	r2, [r3, #26]
 8008872:	e015      	b.n	80088a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	211a      	movs	r1, #26
 800887a:	fb01 f303 	mul.w	r3, r1, r3
 800887e:	4413      	add	r3, r2
 8008880:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008884:	781a      	ldrb	r2, [r3, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	211a      	movs	r1, #26
 8008890:	fb01 f303 	mul.w	r3, r1, r3
 8008894:	4413      	add	r3, r2
 8008896:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800889a:	881a      	ldrh	r2, [r3, #0]
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80088a0:	7bfb      	ldrb	r3, [r7, #15]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	211a      	movs	r1, #26
 80088a6:	fb01 f303 	mul.w	r3, r1, r3
 80088aa:	4413      	add	r3, r2
 80088ac:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	da16      	bge.n	80088e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80088b8:	7bfb      	ldrb	r3, [r7, #15]
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	211a      	movs	r1, #26
 80088be:	fb01 f303 	mul.w	r3, r1, r3
 80088c2:	4413      	add	r3, r2
 80088c4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80088c8:	781a      	ldrb	r2, [r3, #0]
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	211a      	movs	r1, #26
 80088d4:	fb01 f303 	mul.w	r3, r1, r3
 80088d8:	4413      	add	r3, r2
 80088da:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80088de:	881a      	ldrh	r2, [r3, #0]
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	835a      	strh	r2, [r3, #26]
 80088e4:	e015      	b.n	8008912 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80088e6:	7bfb      	ldrb	r3, [r7, #15]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	211a      	movs	r1, #26
 80088ec:	fb01 f303 	mul.w	r3, r1, r3
 80088f0:	4413      	add	r3, r2
 80088f2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80088f6:	781a      	ldrb	r2, [r3, #0]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	211a      	movs	r1, #26
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	4413      	add	r3, r2
 8008908:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800890c:	881a      	ldrh	r2, [r3, #0]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	7b9b      	ldrb	r3, [r3, #14]
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 ff16 	bl	800a74a <USBH_AllocPipe>
 800891e:	4603      	mov	r3, r0
 8008920:	461a      	mov	r2, r3
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	7bdb      	ldrb	r3, [r3, #15]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f001 ff0c 	bl	800a74a <USBH_AllocPipe>
 8008932:	4603      	mov	r3, r0
 8008934:	461a      	mov	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	7b59      	ldrb	r1, [r3, #13]
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	7b98      	ldrb	r0, [r3, #14]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	8b12      	ldrh	r2, [r2, #24]
 8008952:	9202      	str	r2, [sp, #8]
 8008954:	2202      	movs	r2, #2
 8008956:	9201      	str	r2, [sp, #4]
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	4623      	mov	r3, r4
 800895c:	4602      	mov	r2, r0
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f001 fec4 	bl	800a6ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	7b19      	ldrb	r1, [r3, #12]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	7bd8      	ldrb	r0, [r3, #15]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008978:	68ba      	ldr	r2, [r7, #8]
 800897a:	8b52      	ldrh	r2, [r2, #26]
 800897c:	9202      	str	r2, [sp, #8]
 800897e:	2202      	movs	r2, #2
 8008980:	9201      	str	r2, [sp, #4]
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	4623      	mov	r3, r4
 8008986:	4602      	mov	r2, r0
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 feaf 	bl	800a6ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	7b5b      	ldrb	r3, [r3, #13]
 800899a:	2200      	movs	r2, #0
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f002 f9ba 	bl	800ad18 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	7b1b      	ldrb	r3, [r3, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f002 f9b3 	bl	800ad18 <USBH_LL_SetToggle>

  return USBH_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3714      	adds	r7, #20
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd90      	pop	{r4, r7, pc}

080089bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80089ca:	69db      	ldr	r3, [r3, #28]
 80089cc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00e      	beq.n	80089f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 fea4 	bl	800a72a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f001 fecf 	bl	800a78c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	7b1b      	ldrb	r3, [r3, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00e      	beq.n	8008a1a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	7b1b      	ldrb	r3, [r3, #12]
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f001 fe91 	bl	800a72a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	7b1b      	ldrb	r3, [r3, #12]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 febc 	bl	800a78c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	7b5b      	ldrb	r3, [r3, #13]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00e      	beq.n	8008a40 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	7b5b      	ldrb	r3, [r3, #13]
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f001 fe7e 	bl	800a72a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	7b5b      	ldrb	r3, [r3, #13]
 8008a32:	4619      	mov	r1, r3
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f001 fea9 	bl	800a78c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a46:	69db      	ldr	r3, [r3, #28]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00b      	beq.n	8008a64 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f002 f9ed 	bl	800ae34 <free>
    phost->pActiveClass->pData = 0U;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a60:	2200      	movs	r2, #0
 8008a62:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b084      	sub	sp, #16
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3340      	adds	r3, #64	@ 0x40
 8008a84:	4619      	mov	r1, r3
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 f8b1 	bl	8008bee <GetLineCoding>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008a90:	7afb      	ldrb	r3, [r7, #11]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d105      	bne.n	8008aa2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ac2:	69db      	ldr	r3, [r3, #28]
 8008ac4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d877      	bhi.n	8008bc0 <USBH_CDC_Process+0x114>
 8008ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ad8 <USBH_CDC_Process+0x2c>)
 8008ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad6:	bf00      	nop
 8008ad8:	08008aed 	.word	0x08008aed
 8008adc:	08008af3 	.word	0x08008af3
 8008ae0:	08008b23 	.word	0x08008b23
 8008ae4:	08008b97 	.word	0x08008b97
 8008ae8:	08008ba5 	.word	0x08008ba5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008aec:	2300      	movs	r3, #0
 8008aee:	73fb      	strb	r3, [r7, #15]
      break;
 8008af0:	e06d      	b.n	8008bce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008af6:	4619      	mov	r1, r3
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f897 	bl	8008c2c <SetLineCoding>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d104      	bne.n	8008b12 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008b10:	e058      	b.n	8008bc4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008b12:	7bbb      	ldrb	r3, [r7, #14]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d055      	beq.n	8008bc4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2204      	movs	r2, #4
 8008b1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008b20:	e050      	b.n	8008bc4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	3340      	adds	r3, #64	@ 0x40
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f860 	bl	8008bee <GetLineCoding>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b32:	7bbb      	ldrb	r3, [r7, #14]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d126      	bne.n	8008b86 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b4a:	791b      	ldrb	r3, [r3, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d13b      	bne.n	8008bc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b5a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d133      	bne.n	8008bc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b6a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d12b      	bne.n	8008bc8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b78:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d124      	bne.n	8008bc8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f000 f958 	bl	8008e34 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008b84:	e020      	b.n	8008bc8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008b86:	7bbb      	ldrb	r3, [r7, #14]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d01d      	beq.n	8008bc8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2204      	movs	r2, #4
 8008b90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008b94:	e018      	b.n	8008bc8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f867 	bl	8008c6a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f000 f8da 	bl	8008d56 <CDC_ProcessReception>
      break;
 8008ba2:	e014      	b.n	8008bce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f001 f81a 	bl	8009be0 <USBH_ClrFeature>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10a      	bne.n	8008bcc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008bbe:	e005      	b.n	8008bcc <USBH_CDC_Process+0x120>

    default:
      break;
 8008bc0:	bf00      	nop
 8008bc2:	e004      	b.n	8008bce <USBH_CDC_Process+0x122>
      break;
 8008bc4:	bf00      	nop
 8008bc6:	e002      	b.n	8008bce <USBH_CDC_Process+0x122>
      break;
 8008bc8:	bf00      	nop
 8008bca:	e000      	b.n	8008bce <USBH_CDC_Process+0x122>
      break;
 8008bcc:	bf00      	nop

  }

  return status;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	370c      	adds	r7, #12
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr

08008bee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	22a1      	movs	r2, #161	@ 0xa1
 8008bfc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2221      	movs	r2, #33	@ 0x21
 8008c02:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2207      	movs	r2, #7
 8008c14:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	2207      	movs	r2, #7
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f001 fb14 	bl	800a24a <USBH_CtlReq>
 8008c22:	4603      	mov	r3, r0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2221      	movs	r2, #33	@ 0x21
 8008c3a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2207      	movs	r2, #7
 8008c52:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2207      	movs	r2, #7
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 faf5 	bl	800a24a <USBH_CtlReq>
 8008c60:	4603      	mov	r3, r0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b086      	sub	sp, #24
 8008c6e:	af02      	add	r7, sp, #8
 8008c70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d002      	beq.n	8008c90 <CDC_ProcessTransmission+0x26>
 8008c8a:	2b02      	cmp	r3, #2
 8008c8c:	d023      	beq.n	8008cd6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008c8e:	e05e      	b.n	8008d4e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c94:	68fa      	ldr	r2, [r7, #12]
 8008c96:	8b12      	ldrh	r2, [r2, #24]
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d90b      	bls.n	8008cb4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	69d9      	ldr	r1, [r3, #28]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8b1a      	ldrh	r2, [r3, #24]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	7b5b      	ldrb	r3, [r3, #13]
 8008ca8:	2001      	movs	r0, #1
 8008caa:	9000      	str	r0, [sp, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f001 fcda 	bl	800a666 <USBH_BulkSendData>
 8008cb2:	e00b      	b.n	8008ccc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	7b5b      	ldrb	r3, [r3, #13]
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	9000      	str	r0, [sp, #0]
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 fccd 	bl	800a666 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008cd4:	e03b      	b.n	8008d4e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	7b5b      	ldrb	r3, [r3, #13]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fff1 	bl	800acc4 <USBH_LL_GetURBState>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008ce6:	7afb      	ldrb	r3, [r7, #11]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d128      	bne.n	8008d3e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	8b12      	ldrh	r2, [r2, #24]
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d90e      	bls.n	8008d16 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	8b12      	ldrh	r2, [r2, #24]
 8008d00:	1a9a      	subs	r2, r3, r2
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	69db      	ldr	r3, [r3, #28]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	8b12      	ldrh	r2, [r2, #24]
 8008d0e:	441a      	add	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	61da      	str	r2, [r3, #28]
 8008d14:	e002      	b.n	8008d1c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008d2c:	e00e      	b.n	8008d4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f868 	bl	8008e0c <USBH_CDC_TransmitCallback>
      break;
 8008d3c:	e006      	b.n	8008d4c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008d3e:	7afb      	ldrb	r3, [r7, #11]
 8008d40:	2b02      	cmp	r3, #2
 8008d42:	d103      	bne.n	8008d4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008d4c:	bf00      	nop
  }
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d002      	beq.n	8008d7c <CDC_ProcessReception+0x26>
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d00e      	beq.n	8008d98 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008d7a:	e043      	b.n	8008e04 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	6a19      	ldr	r1, [r3, #32]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	8b5a      	ldrh	r2, [r3, #26]
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	7b1b      	ldrb	r3, [r3, #12]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 fc91 	bl	800a6b0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2204      	movs	r2, #4
 8008d92:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008d96:	e035      	b.n	8008e04 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	7b1b      	ldrb	r3, [r3, #12]
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 ff90 	bl	800acc4 <USBH_LL_GetURBState>
 8008da4:	4603      	mov	r3, r0
 8008da6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008da8:	7cfb      	ldrb	r3, [r7, #19]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d129      	bne.n	8008e02 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	7b1b      	ldrb	r3, [r3, #12]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 fef3 	bl	800aba0 <USBH_LL_GetLastXferSize>
 8008dba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d016      	beq.n	8008df4 <CDC_ProcessReception+0x9e>
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	8b5b      	ldrh	r3, [r3, #26]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d110      	bne.n	8008df4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	1ad2      	subs	r2, r2, r3
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	6a1a      	ldr	r2, [r3, #32]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	441a      	add	r2, r3
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	2203      	movs	r2, #3
 8008dee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008df2:	e006      	b.n	8008e02 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f80f 	bl	8008e20 <USBH_CDC_ReceiveCallback>
      break;
 8008e02:	bf00      	nop
  }
}
 8008e04:	bf00      	nop
 8008e06:	3718      	adds	r7, #24
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e28:	bf00      	nop
 8008e2a:	370c      	adds	r7, #12
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	4613      	mov	r3, r2
 8008e54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d101      	bne.n	8008e60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008e5c:	2302      	movs	r3, #2
 8008e5e:	e029      	b.n	8008eb4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	79fa      	ldrb	r2, [r7, #7]
 8008e64:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008e78:	68f8      	ldr	r0, [r7, #12]
 8008e7a:	f000 f81f 	bl	8008ebc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d003      	beq.n	8008eac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f001 fdc3 	bl	800aa38 <USBH_LL_Init>

  return USBH_OK;
 8008eb2:	2300      	movs	r3, #0
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e009      	b.n	8008ee2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	33e0      	adds	r3, #224	@ 0xe0
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	2200      	movs	r2, #0
 8008eda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	60fb      	str	r3, [r7, #12]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b0f      	cmp	r3, #15
 8008ee6:	d9f2      	bls.n	8008ece <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	60fb      	str	r3, [r7, #12]
 8008eec:	e009      	b.n	8008f02 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ef8:	2200      	movs	r2, #0
 8008efa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	3301      	adds	r3, #1
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f08:	d3f1      	bcc.n	8008eee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2240      	movs	r2, #64	@ 0x40
 8008f2e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2201      	movs	r2, #1
 8008f42:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	331c      	adds	r3, #28
 8008f5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f002 fadb 	bl	800b51c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008f6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f70:	2100      	movs	r1, #0
 8008f72:	4618      	mov	r0, r3
 8008f74:	f002 fad2 	bl	800b51c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008f7e:	2212      	movs	r2, #18
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f002 faca 	bl	800b51c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008f8e:	223e      	movs	r2, #62	@ 0x3e
 8008f90:	2100      	movs	r1, #0
 8008f92:	4618      	mov	r0, r3
 8008f94:	f002 fac2 	bl	800b51c <memset>

  return USBH_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008fa2:	b480      	push	{r7}
 8008fa4:	b085      	sub	sp, #20
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
 8008faa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008fac:	2300      	movs	r3, #0
 8008fae:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d016      	beq.n	8008fe4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10e      	bne.n	8008fde <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008fc6:	1c59      	adds	r1, r3, #1
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	33de      	adds	r3, #222	@ 0xde
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
 8008fdc:	e004      	b.n	8008fe8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008fde:	2302      	movs	r3, #2
 8008fe0:	73fb      	strb	r3, [r7, #15]
 8008fe2:	e001      	b.n	8008fe8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b085      	sub	sp, #20
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009002:	2300      	movs	r3, #0
 8009004:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800900c:	78fa      	ldrb	r2, [r7, #3]
 800900e:	429a      	cmp	r2, r3
 8009010:	d204      	bcs.n	800901c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	78fa      	ldrb	r2, [r7, #3]
 8009016:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800901a:	e001      	b.n	8009020 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800901c:	2302      	movs	r3, #2
 800901e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800902e:	b480      	push	{r7}
 8009030:	b087      	sub	sp, #28
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	4608      	mov	r0, r1
 8009038:	4611      	mov	r1, r2
 800903a:	461a      	mov	r2, r3
 800903c:	4603      	mov	r3, r0
 800903e:	70fb      	strb	r3, [r7, #3]
 8009040:	460b      	mov	r3, r1
 8009042:	70bb      	strb	r3, [r7, #2]
 8009044:	4613      	mov	r3, r2
 8009046:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800904c:	2300      	movs	r3, #0
 800904e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009056:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009058:	e025      	b.n	80090a6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	221a      	movs	r2, #26
 800905e:	fb02 f303 	mul.w	r3, r2, r3
 8009062:	3308      	adds	r3, #8
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4413      	add	r3, r2
 8009068:	3302      	adds	r3, #2
 800906a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	795b      	ldrb	r3, [r3, #5]
 8009070:	78fa      	ldrb	r2, [r7, #3]
 8009072:	429a      	cmp	r2, r3
 8009074:	d002      	beq.n	800907c <USBH_FindInterface+0x4e>
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	2bff      	cmp	r3, #255	@ 0xff
 800907a:	d111      	bne.n	80090a0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009080:	78ba      	ldrb	r2, [r7, #2]
 8009082:	429a      	cmp	r2, r3
 8009084:	d002      	beq.n	800908c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009086:	78bb      	ldrb	r3, [r7, #2]
 8009088:	2bff      	cmp	r3, #255	@ 0xff
 800908a:	d109      	bne.n	80090a0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009090:	787a      	ldrb	r2, [r7, #1]
 8009092:	429a      	cmp	r2, r3
 8009094:	d002      	beq.n	800909c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009096:	787b      	ldrb	r3, [r7, #1]
 8009098:	2bff      	cmp	r3, #255	@ 0xff
 800909a:	d101      	bne.n	80090a0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
 800909e:	e006      	b.n	80090ae <USBH_FindInterface+0x80>
    }
    if_ix++;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	3301      	adds	r3, #1
 80090a4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80090a6:	7dfb      	ldrb	r3, [r7, #23]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d9d6      	bls.n	800905a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80090ac:	23ff      	movs	r3, #255	@ 0xff
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f001 fcf4 	bl	800aab0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80090c8:	2101      	movs	r1, #1
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f001 fe0d 	bl	800acea <USBH_LL_DriverVBUS>

  return USBH_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af04      	add	r7, sp, #16
 80090e2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80090e4:	2302      	movs	r3, #2
 80090e6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d102      	bne.n	80090fe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2203      	movs	r2, #3
 80090fc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	781b      	ldrb	r3, [r3, #0]
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b0b      	cmp	r3, #11
 8009106:	f200 81bb 	bhi.w	8009480 <USBH_Process+0x3a4>
 800910a:	a201      	add	r2, pc, #4	@ (adr r2, 8009110 <USBH_Process+0x34>)
 800910c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009110:	08009141 	.word	0x08009141
 8009114:	08009173 	.word	0x08009173
 8009118:	080091db 	.word	0x080091db
 800911c:	0800941b 	.word	0x0800941b
 8009120:	08009481 	.word	0x08009481
 8009124:	0800927b 	.word	0x0800927b
 8009128:	080093c1 	.word	0x080093c1
 800912c:	080092b1 	.word	0x080092b1
 8009130:	080092d1 	.word	0x080092d1
 8009134:	080092ef 	.word	0x080092ef
 8009138:	08009333 	.word	0x08009333
 800913c:	08009403 	.word	0x08009403
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009146:	b2db      	uxtb	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	f000 819b 	beq.w	8009484 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009154:	20c8      	movs	r0, #200	@ 0xc8
 8009156:	f001 fe12 	bl	800ad7e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f001 fd05 	bl	800ab6a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009170:	e188      	b.n	8009484 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009178:	2b01      	cmp	r3, #1
 800917a:	d107      	bne.n	800918c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800918a:	e18a      	b.n	80094a2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009192:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009196:	d914      	bls.n	80091c2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800919e:	3301      	adds	r3, #1
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d903      	bls.n	80091ba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	220d      	movs	r2, #13
 80091b6:	701a      	strb	r2, [r3, #0]
      break;
 80091b8:	e173      	b.n	80094a2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	701a      	strb	r2, [r3, #0]
      break;
 80091c0:	e16f      	b.n	80094a2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80091c8:	f103 020a 	add.w	r2, r3, #10
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80091d2:	200a      	movs	r0, #10
 80091d4:	f001 fdd3 	bl	800ad7e <USBH_Delay>
      break;
 80091d8:	e163      	b.n	80094a2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80091ea:	2104      	movs	r1, #4
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80091f0:	2064      	movs	r0, #100	@ 0x64
 80091f2:	f001 fdc4 	bl	800ad7e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 fc90 	bl	800ab1c <USBH_LL_GetSpeed>
 80091fc:	4603      	mov	r3, r0
 80091fe:	461a      	mov	r2, r3
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2205      	movs	r2, #5
 800920a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800920c:	2100      	movs	r1, #0
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f001 fa9b 	bl	800a74a <USBH_AllocPipe>
 8009214:	4603      	mov	r3, r0
 8009216:	461a      	mov	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800921c:	2180      	movs	r1, #128	@ 0x80
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 fa93 	bl	800a74a <USBH_AllocPipe>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	7919      	ldrb	r1, [r3, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009240:	9202      	str	r2, [sp, #8]
 8009242:	2200      	movs	r2, #0
 8009244:	9201      	str	r2, [sp, #4]
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4603      	mov	r3, r0
 800924a:	2280      	movs	r2, #128	@ 0x80
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 fa4d 	bl	800a6ec <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	7959      	ldrb	r1, [r3, #5]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009266:	9202      	str	r2, [sp, #8]
 8009268:	2200      	movs	r2, #0
 800926a:	9201      	str	r2, [sp, #4]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	4603      	mov	r3, r0
 8009270:	2200      	movs	r2, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 fa3a 	bl	800a6ec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009278:	e113      	b.n	80094a2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f916 	bl	80094ac <USBH_HandleEnum>
 8009280:	4603      	mov	r3, r0
 8009282:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	f040 80fd 	bne.w	8009488 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800929c:	2b01      	cmp	r3, #1
 800929e:	d103      	bne.n	80092a8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2208      	movs	r2, #8
 80092a4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092a6:	e0ef      	b.n	8009488 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2207      	movs	r2, #7
 80092ac:	701a      	strb	r2, [r3, #0]
      break;
 80092ae:	e0eb      	b.n	8009488 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 80e8 	beq.w	800948c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80092c2:	2101      	movs	r1, #1
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2208      	movs	r2, #8
 80092cc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80092ce:	e0dd      	b.n	800948c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fc3a 	bl	8009b52 <USBH_SetCfg>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f040 80d5 	bne.w	8009490 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2209      	movs	r2, #9
 80092ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092ec:	e0d0      	b.n	8009490 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d016      	beq.n	800932a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80092fc:	2101      	movs	r1, #1
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fc4a 	bl	8009b98 <USBH_SetFeature>
 8009304:	4603      	mov	r3, r0
 8009306:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009308:	7bbb      	ldrb	r3, [r7, #14]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d103      	bne.n	8009318 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	220a      	movs	r2, #10
 8009314:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009316:	e0bd      	b.n	8009494 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009318:	7bbb      	ldrb	r3, [r7, #14]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	2b03      	cmp	r3, #3
 800931e:	f040 80b9 	bne.w	8009494 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	220a      	movs	r2, #10
 8009326:	701a      	strb	r2, [r3, #0]
      break;
 8009328:	e0b4      	b.n	8009494 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	220a      	movs	r2, #10
 800932e:	701a      	strb	r2, [r3, #0]
      break;
 8009330:	e0b0      	b.n	8009494 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 80ad 	beq.w	8009498 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009346:	2300      	movs	r3, #0
 8009348:	73fb      	strb	r3, [r7, #15]
 800934a:	e016      	b.n	800937a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800934c:	7bfa      	ldrb	r2, [r7, #15]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	32de      	adds	r2, #222	@ 0xde
 8009352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009356:	791a      	ldrb	r2, [r3, #4]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800935e:	429a      	cmp	r2, r3
 8009360:	d108      	bne.n	8009374 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009362:	7bfa      	ldrb	r2, [r7, #15]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	32de      	adds	r2, #222	@ 0xde
 8009368:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009372:	e005      	b.n	8009380 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	3301      	adds	r3, #1
 8009378:	73fb      	strb	r3, [r7, #15]
 800937a:	7bfb      	ldrb	r3, [r7, #15]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0e5      	beq.n	800934c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009386:	2b00      	cmp	r3, #0
 8009388:	d016      	beq.n	80093b8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	4798      	blx	r3
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d109      	bne.n	80093b0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2206      	movs	r2, #6
 80093a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80093a8:	2103      	movs	r1, #3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093ae:	e073      	b.n	8009498 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	220d      	movs	r2, #13
 80093b4:	701a      	strb	r2, [r3, #0]
      break;
 80093b6:	e06f      	b.n	8009498 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	220d      	movs	r2, #13
 80093bc:	701a      	strb	r2, [r3, #0]
      break;
 80093be:	e06b      	b.n	8009498 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d017      	beq.n	80093fa <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	4798      	blx	r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80093da:	7bbb      	ldrb	r3, [r7, #14]
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d103      	bne.n	80093ea <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	220b      	movs	r2, #11
 80093e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093e8:	e058      	b.n	800949c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d154      	bne.n	800949c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	220d      	movs	r2, #13
 80093f6:	701a      	strb	r2, [r3, #0]
      break;
 80093f8:	e050      	b.n	800949c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	220d      	movs	r2, #13
 80093fe:	701a      	strb	r2, [r3, #0]
      break;
 8009400:	e04c      	b.n	800949c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009408:	2b00      	cmp	r3, #0
 800940a:	d049      	beq.n	80094a0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	4798      	blx	r3
      }
      break;
 8009418:	e042      	b.n	80094a0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f7ff fd4a 	bl	8008ebc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800942e:	2b00      	cmp	r3, #0
 8009430:	d009      	beq.n	8009446 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800944c:	2b00      	cmp	r3, #0
 800944e:	d005      	beq.n	800945c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009456:	2105      	movs	r1, #5
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b01      	cmp	r3, #1
 8009466:	d107      	bne.n	8009478 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f7ff fe22 	bl	80090ba <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009476:	e014      	b.n	80094a2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 fb19 	bl	800aab0 <USBH_LL_Start>
      break;
 800947e:	e010      	b.n	80094a2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009480:	bf00      	nop
 8009482:	e00e      	b.n	80094a2 <USBH_Process+0x3c6>
      break;
 8009484:	bf00      	nop
 8009486:	e00c      	b.n	80094a2 <USBH_Process+0x3c6>
      break;
 8009488:	bf00      	nop
 800948a:	e00a      	b.n	80094a2 <USBH_Process+0x3c6>
    break;
 800948c:	bf00      	nop
 800948e:	e008      	b.n	80094a2 <USBH_Process+0x3c6>
      break;
 8009490:	bf00      	nop
 8009492:	e006      	b.n	80094a2 <USBH_Process+0x3c6>
      break;
 8009494:	bf00      	nop
 8009496:	e004      	b.n	80094a2 <USBH_Process+0x3c6>
      break;
 8009498:	bf00      	nop
 800949a:	e002      	b.n	80094a2 <USBH_Process+0x3c6>
      break;
 800949c:	bf00      	nop
 800949e:	e000      	b.n	80094a2 <USBH_Process+0x3c6>
      break;
 80094a0:	bf00      	nop
  }
  return USBH_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af04      	add	r7, sp, #16
 80094b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80094b4:	2301      	movs	r3, #1
 80094b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80094b8:	2301      	movs	r3, #1
 80094ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	785b      	ldrb	r3, [r3, #1]
 80094c0:	2b07      	cmp	r3, #7
 80094c2:	f200 81bd 	bhi.w	8009840 <USBH_HandleEnum+0x394>
 80094c6:	a201      	add	r2, pc, #4	@ (adr r2, 80094cc <USBH_HandleEnum+0x20>)
 80094c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094cc:	080094ed 	.word	0x080094ed
 80094d0:	080095a7 	.word	0x080095a7
 80094d4:	08009611 	.word	0x08009611
 80094d8:	0800969b 	.word	0x0800969b
 80094dc:	08009705 	.word	0x08009705
 80094e0:	08009775 	.word	0x08009775
 80094e4:	080097bb 	.word	0x080097bb
 80094e8:	08009801 	.word	0x08009801
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80094ec:	2108      	movs	r1, #8
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fa4c 	bl	800998c <USBH_Get_DevDesc>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d12e      	bne.n	800955c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	7919      	ldrb	r1, [r3, #4]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009522:	9202      	str	r2, [sp, #8]
 8009524:	2200      	movs	r2, #0
 8009526:	9201      	str	r2, [sp, #4]
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	4603      	mov	r3, r0
 800952c:	2280      	movs	r2, #128	@ 0x80
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 f8dc 	bl	800a6ec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	7959      	ldrb	r1, [r3, #5]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009548:	9202      	str	r2, [sp, #8]
 800954a:	2200      	movs	r2, #0
 800954c:	9201      	str	r2, [sp, #4]
 800954e:	9300      	str	r3, [sp, #0]
 8009550:	4603      	mov	r3, r0
 8009552:	2200      	movs	r2, #0
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 f8c9 	bl	800a6ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800955a:	e173      	b.n	8009844 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	2b03      	cmp	r3, #3
 8009560:	f040 8170 	bne.w	8009844 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800956a:	3301      	adds	r3, #1
 800956c:	b2da      	uxtb	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800957a:	2b03      	cmp	r3, #3
 800957c:	d903      	bls.n	8009586 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	220d      	movs	r2, #13
 8009582:	701a      	strb	r2, [r3, #0]
      break;
 8009584:	e15e      	b.n	8009844 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	795b      	ldrb	r3, [r3, #5]
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 f8fd 	bl	800a78c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	791b      	ldrb	r3, [r3, #4]
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f001 f8f7 	bl	800a78c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	701a      	strb	r2, [r3, #0]
      break;
 80095a4:	e14e      	b.n	8009844 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80095a6:	2112      	movs	r1, #18
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f9ef 	bl	800998c <USBH_Get_DevDesc>
 80095ae:	4603      	mov	r3, r0
 80095b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095b2:	7bbb      	ldrb	r3, [r7, #14]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d103      	bne.n	80095c0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2202      	movs	r2, #2
 80095bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095be:	e143      	b.n	8009848 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	f040 8140 	bne.w	8009848 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095ce:	3301      	adds	r3, #1
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d903      	bls.n	80095ea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	220d      	movs	r2, #13
 80095e6:	701a      	strb	r2, [r3, #0]
      break;
 80095e8:	e12e      	b.n	8009848 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	795b      	ldrb	r3, [r3, #5]
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 f8cb 	bl	800a78c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	791b      	ldrb	r3, [r3, #4]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f001 f8c5 	bl	800a78c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	701a      	strb	r2, [r3, #0]
      break;
 800960e:	e11b      	b.n	8009848 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009610:	2101      	movs	r1, #1
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fa79 	bl	8009b0a <USBH_SetAddress>
 8009618:	4603      	mov	r3, r0
 800961a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800961c:	7bbb      	ldrb	r3, [r7, #14]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d130      	bne.n	8009684 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009622:	2002      	movs	r0, #2
 8009624:	f001 fbab 	bl	800ad7e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2203      	movs	r2, #3
 8009634:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	7919      	ldrb	r1, [r3, #4]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800964a:	9202      	str	r2, [sp, #8]
 800964c:	2200      	movs	r2, #0
 800964e:	9201      	str	r2, [sp, #4]
 8009650:	9300      	str	r3, [sp, #0]
 8009652:	4603      	mov	r3, r0
 8009654:	2280      	movs	r2, #128	@ 0x80
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 f848 	bl	800a6ec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	7959      	ldrb	r1, [r3, #5]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009670:	9202      	str	r2, [sp, #8]
 8009672:	2200      	movs	r2, #0
 8009674:	9201      	str	r2, [sp, #4]
 8009676:	9300      	str	r3, [sp, #0]
 8009678:	4603      	mov	r3, r0
 800967a:	2200      	movs	r2, #0
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 f835 	bl	800a6ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009682:	e0e3      	b.n	800984c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	2b03      	cmp	r3, #3
 8009688:	f040 80e0 	bne.w	800984c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	220d      	movs	r2, #13
 8009690:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2200      	movs	r2, #0
 8009696:	705a      	strb	r2, [r3, #1]
      break;
 8009698:	e0d8      	b.n	800984c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800969a:	2109      	movs	r1, #9
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f000 f9a1 	bl	80099e4 <USBH_Get_CfgDesc>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80096a6:	7bbb      	ldrb	r3, [r7, #14]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2204      	movs	r2, #4
 80096b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80096b2:	e0cd      	b.n	8009850 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096b4:	7bbb      	ldrb	r3, [r7, #14]
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	f040 80ca 	bne.w	8009850 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80096c2:	3301      	adds	r3, #1
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d903      	bls.n	80096de <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	220d      	movs	r2, #13
 80096da:	701a      	strb	r2, [r3, #0]
      break;
 80096dc:	e0b8      	b.n	8009850 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	795b      	ldrb	r3, [r3, #5]
 80096e2:	4619      	mov	r1, r3
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f001 f851 	bl	800a78c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	791b      	ldrb	r3, [r3, #4]
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f001 f84b 	bl	800a78c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	701a      	strb	r2, [r3, #0]
      break;
 8009702:	e0a5      	b.n	8009850 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f969 	bl	80099e4 <USBH_Get_CfgDesc>
 8009712:	4603      	mov	r3, r0
 8009714:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009716:	7bbb      	ldrb	r3, [r7, #14]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d103      	bne.n	8009724 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2205      	movs	r2, #5
 8009720:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009722:	e097      	b.n	8009854 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009724:	7bbb      	ldrb	r3, [r7, #14]
 8009726:	2b03      	cmp	r3, #3
 8009728:	f040 8094 	bne.w	8009854 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009732:	3301      	adds	r3, #1
 8009734:	b2da      	uxtb	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009742:	2b03      	cmp	r3, #3
 8009744:	d903      	bls.n	800974e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	220d      	movs	r2, #13
 800974a:	701a      	strb	r2, [r3, #0]
      break;
 800974c:	e082      	b.n	8009854 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	795b      	ldrb	r3, [r3, #5]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 f819 	bl	800a78c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	791b      	ldrb	r3, [r3, #4]
 800975e:	4619      	mov	r1, r3
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f001 f813 	bl	800a78c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]
      break;
 8009772:	e06f      	b.n	8009854 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800977a:	2b00      	cmp	r3, #0
 800977c:	d019      	beq.n	80097b2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800978a:	23ff      	movs	r3, #255	@ 0xff
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 f953 	bl	8009a38 <USBH_Get_StringDesc>
 8009792:	4603      	mov	r3, r0
 8009794:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009796:	7bbb      	ldrb	r3, [r7, #14]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d103      	bne.n	80097a4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2206      	movs	r2, #6
 80097a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80097a2:	e059      	b.n	8009858 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d156      	bne.n	8009858 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2206      	movs	r2, #6
 80097ae:	705a      	strb	r2, [r3, #1]
      break;
 80097b0:	e052      	b.n	8009858 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2206      	movs	r2, #6
 80097b6:	705a      	strb	r2, [r3, #1]
      break;
 80097b8:	e04e      	b.n	8009858 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d019      	beq.n	80097f8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80097d0:	23ff      	movs	r3, #255	@ 0xff
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f930 	bl	8009a38 <USBH_Get_StringDesc>
 80097d8:	4603      	mov	r3, r0
 80097da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d103      	bne.n	80097ea <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2207      	movs	r2, #7
 80097e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80097e8:	e038      	b.n	800985c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d135      	bne.n	800985c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2207      	movs	r2, #7
 80097f4:	705a      	strb	r2, [r3, #1]
      break;
 80097f6:	e031      	b.n	800985c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2207      	movs	r2, #7
 80097fc:	705a      	strb	r2, [r3, #1]
      break;
 80097fe:	e02d      	b.n	800985c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009806:	2b00      	cmp	r3, #0
 8009808:	d017      	beq.n	800983a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009816:	23ff      	movs	r3, #255	@ 0xff
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 f90d 	bl	8009a38 <USBH_Get_StringDesc>
 800981e:	4603      	mov	r3, r0
 8009820:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009822:	7bbb      	ldrb	r3, [r7, #14]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d102      	bne.n	800982e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009828:	2300      	movs	r3, #0
 800982a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800982c:	e018      	b.n	8009860 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800982e:	7bbb      	ldrb	r3, [r7, #14]
 8009830:	2b03      	cmp	r3, #3
 8009832:	d115      	bne.n	8009860 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
      break;
 8009838:	e012      	b.n	8009860 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
      break;
 800983e:	e00f      	b.n	8009860 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009840:	bf00      	nop
 8009842:	e00e      	b.n	8009862 <USBH_HandleEnum+0x3b6>
      break;
 8009844:	bf00      	nop
 8009846:	e00c      	b.n	8009862 <USBH_HandleEnum+0x3b6>
      break;
 8009848:	bf00      	nop
 800984a:	e00a      	b.n	8009862 <USBH_HandleEnum+0x3b6>
      break;
 800984c:	bf00      	nop
 800984e:	e008      	b.n	8009862 <USBH_HandleEnum+0x3b6>
      break;
 8009850:	bf00      	nop
 8009852:	e006      	b.n	8009862 <USBH_HandleEnum+0x3b6>
      break;
 8009854:	bf00      	nop
 8009856:	e004      	b.n	8009862 <USBH_HandleEnum+0x3b6>
      break;
 8009858:	bf00      	nop
 800985a:	e002      	b.n	8009862 <USBH_HandleEnum+0x3b6>
      break;
 800985c:	bf00      	nop
 800985e:	e000      	b.n	8009862 <USBH_HandleEnum+0x3b6>
      break;
 8009860:	bf00      	nop
  }
  return Status;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800987e:	bf00      	nop
 8009880:	370c      	adds	r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b082      	sub	sp, #8
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009898:	1c5a      	adds	r2, r3, #1
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f804 	bl	80098ae <USBH_HandleSof>
}
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b0b      	cmp	r3, #11
 80098be:	d10a      	bne.n	80098d6 <USBH_HandleSof+0x28>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d005      	beq.n	80098d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
  }
}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80098ee:	bf00      	nop
}
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b083      	sub	sp, #12
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800990a:	bf00      	nop
}
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2201      	movs	r2, #1
 8009922:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	370c      	adds	r7, #12
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b082      	sub	sp, #8
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f001 f8be 	bl	800aae6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	791b      	ldrb	r3, [r3, #4]
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 ff0b 	bl	800a78c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	795b      	ldrb	r3, [r3, #5]
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 ff05 	bl	800a78c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3708      	adds	r7, #8
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af02      	add	r7, sp, #8
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	460b      	mov	r3, r1
 8009996:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009998:	887b      	ldrh	r3, [r7, #2]
 800999a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800999e:	d901      	bls.n	80099a4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80099a0:	2303      	movs	r3, #3
 80099a2:	e01b      	b.n	80099dc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80099aa:	887b      	ldrh	r3, [r7, #2]
 80099ac:	9300      	str	r3, [sp, #0]
 80099ae:	4613      	mov	r3, r2
 80099b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099b4:	2100      	movs	r1, #0
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f872 	bl	8009aa0 <USBH_GetDescriptor>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80099cc:	887a      	ldrh	r2, [r7, #2]
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f929 	bl	8009c28 <USBH_ParseDevDesc>
 80099d6:	4603      	mov	r3, r0
 80099d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af02      	add	r7, sp, #8
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	460b      	mov	r3, r1
 80099ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	331c      	adds	r3, #28
 80099f4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80099f6:	887b      	ldrh	r3, [r7, #2]
 80099f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099fc:	d901      	bls.n	8009a02 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e016      	b.n	8009a30 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009a02:	887b      	ldrh	r3, [r7, #2]
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a0c:	2100      	movs	r1, #0
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f846 	bl	8009aa0 <USBH_GetDescriptor>
 8009a14:	4603      	mov	r3, r0
 8009a16:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d107      	bne.n	8009a2e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009a1e:	887b      	ldrh	r3, [r7, #2]
 8009a20:	461a      	mov	r2, r3
 8009a22:	68b9      	ldr	r1, [r7, #8]
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f000 f9af 	bl	8009d88 <USBH_ParseCfgDesc>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af02      	add	r7, sp, #8
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	607a      	str	r2, [r7, #4]
 8009a42:	461a      	mov	r2, r3
 8009a44:	460b      	mov	r3, r1
 8009a46:	72fb      	strb	r3, [r7, #11]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009a4c:	893b      	ldrh	r3, [r7, #8]
 8009a4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a52:	d802      	bhi.n	8009a5a <USBH_Get_StringDesc+0x22>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e01c      	b.n	8009a98 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009a5e:	7afb      	ldrb	r3, [r7, #11]
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009a66:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009a6e:	893b      	ldrh	r3, [r7, #8]
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	460b      	mov	r3, r1
 8009a74:	2100      	movs	r1, #0
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f000 f812 	bl	8009aa0 <USBH_GetDescriptor>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d107      	bne.n	8009a96 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a8c:	893a      	ldrh	r2, [r7, #8]
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	4618      	mov	r0, r3
 8009a92:	f000 fb8d 	bl	800a1b0 <USBH_ParseStringDesc>
  }

  return status;
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	607b      	str	r3, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	72fb      	strb	r3, [r7, #11]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	789b      	ldrb	r3, [r3, #2]
 8009ab6:	2b01      	cmp	r3, #1
 8009ab8:	d11c      	bne.n	8009af4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ac0:	b2da      	uxtb	r2, r3
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2206      	movs	r2, #6
 8009aca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	893a      	ldrh	r2, [r7, #8]
 8009ad0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009ad2:	893b      	ldrh	r3, [r7, #8]
 8009ad4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ad8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009adc:	d104      	bne.n	8009ae8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f240 4209 	movw	r2, #1033	@ 0x409
 8009ae4:	829a      	strh	r2, [r3, #20]
 8009ae6:	e002      	b.n	8009aee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8b3a      	ldrh	r2, [r7, #24]
 8009af2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009af4:	8b3b      	ldrh	r3, [r7, #24]
 8009af6:	461a      	mov	r2, r3
 8009af8:	6879      	ldr	r1, [r7, #4]
 8009afa:	68f8      	ldr	r0, [r7, #12]
 8009afc:	f000 fba5 	bl	800a24a <USBH_CtlReq>
 8009b00:	4603      	mov	r3, r0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	460b      	mov	r3, r1
 8009b14:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	789b      	ldrb	r3, [r3, #2]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d10f      	bne.n	8009b3e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2205      	movs	r2, #5
 8009b28:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b2a:	78fb      	ldrb	r3, [r7, #3]
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2200      	movs	r2, #0
 8009b36:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2100      	movs	r1, #0
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fb81 	bl	800a24a <USBH_CtlReq>
 8009b48:	4603      	mov	r3, r0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	789b      	ldrb	r3, [r3, #2]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d10e      	bne.n	8009b84 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2209      	movs	r2, #9
 8009b70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	887a      	ldrh	r2, [r7, #2]
 8009b76:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b84:	2200      	movs	r2, #0
 8009b86:	2100      	movs	r1, #0
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f000 fb5e 	bl	800a24a <USBH_CtlReq>
 8009b8e:	4603      	mov	r3, r0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	789b      	ldrb	r3, [r3, #2]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d10f      	bne.n	8009bcc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2203      	movs	r2, #3
 8009bb6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2100      	movs	r1, #0
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fb3a 	bl	800a24a <USBH_CtlReq>
 8009bd6:	4603      	mov	r3, r0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	789b      	ldrb	r3, [r3, #2]
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d10f      	bne.n	8009c14 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2202      	movs	r2, #2
 8009bf8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c06:	78fb      	ldrb	r3, [r7, #3]
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009c14:	2200      	movs	r2, #0
 8009c16:	2100      	movs	r1, #0
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 fb16 	bl	800a24a <USBH_CtlReq>
 8009c1e:	4603      	mov	r3, r0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	4613      	mov	r3, r2
 8009c34:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009c3c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e094      	b.n	8009d76 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	781a      	ldrb	r2, [r3, #0]
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	785a      	ldrb	r2, [r3, #1]
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	3302      	adds	r3, #2
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	3303      	adds	r3, #3
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	021b      	lsls	r3, r3, #8
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	b29a      	uxth	r2, r3
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	791a      	ldrb	r2, [r3, #4]
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	795a      	ldrb	r2, [r3, #5]
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	799a      	ldrb	r2, [r3, #6]
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	79da      	ldrb	r2, [r3, #7]
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d004      	beq.n	8009caa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d11b      	bne.n	8009ce2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	79db      	ldrb	r3, [r3, #7]
 8009cae:	2b20      	cmp	r3, #32
 8009cb0:	dc0f      	bgt.n	8009cd2 <USBH_ParseDevDesc+0xaa>
 8009cb2:	2b08      	cmp	r3, #8
 8009cb4:	db0f      	blt.n	8009cd6 <USBH_ParseDevDesc+0xae>
 8009cb6:	3b08      	subs	r3, #8
 8009cb8:	4a32      	ldr	r2, [pc, #200]	@ (8009d84 <USBH_ParseDevDesc+0x15c>)
 8009cba:	fa22 f303 	lsr.w	r3, r2, r3
 8009cbe:	f003 0301 	and.w	r3, r3, #1
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bf14      	ite	ne
 8009cc6:	2301      	movne	r3, #1
 8009cc8:	2300      	moveq	r3, #0
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d106      	bne.n	8009cde <USBH_ParseDevDesc+0xb6>
 8009cd0:	e001      	b.n	8009cd6 <USBH_ParseDevDesc+0xae>
 8009cd2:	2b40      	cmp	r3, #64	@ 0x40
 8009cd4:	d003      	beq.n	8009cde <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	2208      	movs	r2, #8
 8009cda:	71da      	strb	r2, [r3, #7]
        break;
 8009cdc:	e000      	b.n	8009ce0 <USBH_ParseDevDesc+0xb8>
        break;
 8009cde:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009ce0:	e00e      	b.n	8009d00 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d107      	bne.n	8009cfc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	79db      	ldrb	r3, [r3, #7]
 8009cf0:	2b08      	cmp	r3, #8
 8009cf2:	d005      	beq.n	8009d00 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2208      	movs	r2, #8
 8009cf8:	71da      	strb	r2, [r3, #7]
 8009cfa:	e001      	b.n	8009d00 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009d00:	88fb      	ldrh	r3, [r7, #6]
 8009d02:	2b08      	cmp	r3, #8
 8009d04:	d936      	bls.n	8009d74 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	3308      	adds	r3, #8
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	3309      	adds	r3, #9
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	330a      	adds	r3, #10
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	461a      	mov	r2, r3
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	330b      	adds	r3, #11
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	021b      	lsls	r3, r3, #8
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	4313      	orrs	r3, r2
 8009d34:	b29a      	uxth	r2, r3
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	330c      	adds	r3, #12
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	461a      	mov	r2, r3
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	330d      	adds	r3, #13
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	021b      	lsls	r3, r3, #8
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	7b9a      	ldrb	r2, [r3, #14]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	7bda      	ldrb	r2, [r3, #15]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	7c1a      	ldrb	r2, [r3, #16]
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	7c5a      	ldrb	r2, [r3, #17]
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	01000101 	.word	0x01000101

08009d88 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08c      	sub	sp, #48	@ 0x30
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009d9c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009da4:	2300      	movs	r3, #0
 8009da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009db6:	2302      	movs	r3, #2
 8009db8:	e0da      	b.n	8009f70 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b09      	cmp	r3, #9
 8009dc4:	d002      	beq.n	8009dcc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc8:	2209      	movs	r2, #9
 8009dca:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	781a      	ldrb	r2, [r3, #0]
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	785a      	ldrb	r2, [r3, #1]
 8009dd8:	6a3b      	ldr	r3, [r7, #32]
 8009dda:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	3302      	adds	r3, #2
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	3303      	adds	r3, #3
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	021b      	lsls	r3, r3, #8
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	4313      	orrs	r3, r2
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009df6:	bf28      	it	cs
 8009df8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	6a3b      	ldr	r3, [r7, #32]
 8009e00:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	791a      	ldrb	r2, [r3, #4]
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	795a      	ldrb	r2, [r3, #5]
 8009e0e:	6a3b      	ldr	r3, [r7, #32]
 8009e10:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	799a      	ldrb	r2, [r3, #6]
 8009e16:	6a3b      	ldr	r3, [r7, #32]
 8009e18:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	79da      	ldrb	r2, [r3, #7]
 8009e1e:	6a3b      	ldr	r3, [r7, #32]
 8009e20:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	7a1a      	ldrb	r2, [r3, #8]
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009e2a:	88fb      	ldrh	r3, [r7, #6]
 8009e2c:	2b09      	cmp	r3, #9
 8009e2e:	f240 809d 	bls.w	8009f6c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009e32:	2309      	movs	r3, #9
 8009e34:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009e36:	2300      	movs	r3, #0
 8009e38:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e3a:	e081      	b.n	8009f40 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e3c:	f107 0316 	add.w	r3, r7, #22
 8009e40:	4619      	mov	r1, r3
 8009e42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e44:	f000 f9e7 	bl	800a216 <USBH_GetNextDesc>
 8009e48:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e4c:	785b      	ldrb	r3, [r3, #1]
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d176      	bne.n	8009f40 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b09      	cmp	r3, #9
 8009e58:	d002      	beq.n	8009e60 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5c:	2209      	movs	r2, #9
 8009e5e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009e60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e64:	221a      	movs	r2, #26
 8009e66:	fb02 f303 	mul.w	r3, r2, r3
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	6a3a      	ldr	r2, [r7, #32]
 8009e6e:	4413      	add	r3, r2
 8009e70:	3302      	adds	r3, #2
 8009e72:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e76:	69f8      	ldr	r0, [r7, #28]
 8009e78:	f000 f87e 	bl	8009f78 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009e82:	2300      	movs	r3, #0
 8009e84:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e86:	e043      	b.n	8009f10 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e88:	f107 0316 	add.w	r3, r7, #22
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e90:	f000 f9c1 	bl	800a216 <USBH_GetNextDesc>
 8009e94:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e98:	785b      	ldrb	r3, [r3, #1]
 8009e9a:	2b05      	cmp	r3, #5
 8009e9c:	d138      	bne.n	8009f10 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	795b      	ldrb	r3, [r3, #5]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d113      	bne.n	8009ece <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d003      	beq.n	8009eb6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	799b      	ldrb	r3, [r3, #6]
 8009eb2:	2b03      	cmp	r3, #3
 8009eb4:	d10b      	bne.n	8009ece <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	79db      	ldrb	r3, [r3, #7]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10b      	bne.n	8009ed6 <USBH_ParseCfgDesc+0x14e>
 8009ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	2b09      	cmp	r3, #9
 8009ec4:	d007      	beq.n	8009ed6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec8:	2209      	movs	r2, #9
 8009eca:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ecc:	e003      	b.n	8009ed6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed0:	2207      	movs	r2, #7
 8009ed2:	701a      	strb	r2, [r3, #0]
 8009ed4:	e000      	b.n	8009ed8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ed6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009ed8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009edc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009ee0:	3201      	adds	r2, #1
 8009ee2:	00d2      	lsls	r2, r2, #3
 8009ee4:	211a      	movs	r1, #26
 8009ee6:	fb01 f303 	mul.w	r3, r1, r3
 8009eea:	4413      	add	r3, r2
 8009eec:	3308      	adds	r3, #8
 8009eee:	6a3a      	ldr	r2, [r7, #32]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	3304      	adds	r3, #4
 8009ef4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009ef6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ef8:	69b9      	ldr	r1, [r7, #24]
 8009efa:	68f8      	ldr	r0, [r7, #12]
 8009efc:	f000 f870 	bl	8009fe0 <USBH_ParseEPDesc>
 8009f00:	4603      	mov	r3, r0
 8009f02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009f06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	791b      	ldrb	r3, [r3, #4]
 8009f14:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d204      	bcs.n	8009f26 <USBH_ParseCfgDesc+0x19e>
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	885a      	ldrh	r2, [r3, #2]
 8009f20:	8afb      	ldrh	r3, [r7, #22]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d8b0      	bhi.n	8009e88 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	791b      	ldrb	r3, [r3, #4]
 8009f2a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d201      	bcs.n	8009f36 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e01c      	b.n	8009f70 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009f40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d805      	bhi.n	8009f54 <USBH_ParseCfgDesc+0x1cc>
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	885a      	ldrh	r2, [r3, #2]
 8009f4c:	8afb      	ldrh	r3, [r7, #22]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	f63f af74 	bhi.w	8009e3c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009f54:	6a3b      	ldr	r3, [r7, #32]
 8009f56:	791b      	ldrb	r3, [r3, #4]
 8009f58:	2b02      	cmp	r3, #2
 8009f5a:	bf28      	it	cs
 8009f5c:	2302      	movcs	r3, #2
 8009f5e:	b2db      	uxtb	r3, r3
 8009f60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d201      	bcs.n	8009f6c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e001      	b.n	8009f70 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3730      	adds	r7, #48	@ 0x30
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	781a      	ldrb	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	785a      	ldrb	r2, [r3, #1]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	789a      	ldrb	r2, [r3, #2]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	78da      	ldrb	r2, [r3, #3]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	bf28      	it	cs
 8009fac:	2302      	movcs	r3, #2
 8009fae:	b2da      	uxtb	r2, r3
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	795a      	ldrb	r2, [r3, #5]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	799a      	ldrb	r2, [r3, #6]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	79da      	ldrb	r2, [r3, #7]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	7a1a      	ldrb	r2, [r3, #8]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	721a      	strb	r2, [r3, #8]
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b087      	sub	sp, #28
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	781a      	ldrb	r2, [r3, #0]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	785a      	ldrb	r2, [r3, #1]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	789a      	ldrb	r2, [r3, #2]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	78da      	ldrb	r2, [r3, #3]
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3304      	adds	r3, #4
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	3305      	adds	r3, #5
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	021b      	lsls	r3, r3, #8
 800a020:	b29b      	uxth	r3, r3
 800a022:	4313      	orrs	r3, r2
 800a024:	b29a      	uxth	r2, r3
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	799a      	ldrb	r2, [r3, #6]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	889b      	ldrh	r3, [r3, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d009      	beq.n	800a04e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a03e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a042:	d804      	bhi.n	800a04e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a048:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a04c:	d901      	bls.n	800a052 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a04e:	2303      	movs	r3, #3
 800a050:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d136      	bne.n	800a0ca <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	78db      	ldrb	r3, [r3, #3]
 800a060:	f003 0303 	and.w	r3, r3, #3
 800a064:	2b02      	cmp	r3, #2
 800a066:	d108      	bne.n	800a07a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	889b      	ldrh	r3, [r3, #4]
 800a06c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a070:	f240 8097 	bls.w	800a1a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a074:	2303      	movs	r3, #3
 800a076:	75fb      	strb	r3, [r7, #23]
 800a078:	e093      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	78db      	ldrb	r3, [r3, #3]
 800a07e:	f003 0303 	and.w	r3, r3, #3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d107      	bne.n	800a096 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	889b      	ldrh	r3, [r3, #4]
 800a08a:	2b40      	cmp	r3, #64	@ 0x40
 800a08c:	f240 8089 	bls.w	800a1a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a090:	2303      	movs	r3, #3
 800a092:	75fb      	strb	r3, [r7, #23]
 800a094:	e085      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	78db      	ldrb	r3, [r3, #3]
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d005      	beq.n	800a0ae <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	78db      	ldrb	r3, [r3, #3]
 800a0a6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a0aa:	2b03      	cmp	r3, #3
 800a0ac:	d10a      	bne.n	800a0c4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	799b      	ldrb	r3, [r3, #6]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <USBH_ParseEPDesc+0xde>
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	799b      	ldrb	r3, [r3, #6]
 800a0ba:	2b10      	cmp	r3, #16
 800a0bc:	d970      	bls.n	800a1a0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a0be:	2303      	movs	r3, #3
 800a0c0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a0c2:	e06d      	b.n	800a1a0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	75fb      	strb	r3, [r7, #23]
 800a0c8:	e06b      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d13c      	bne.n	800a14e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	78db      	ldrb	r3, [r3, #3]
 800a0d8:	f003 0303 	and.w	r3, r3, #3
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d005      	beq.n	800a0ec <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	78db      	ldrb	r3, [r3, #3]
 800a0e4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d106      	bne.n	800a0fa <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	889b      	ldrh	r3, [r3, #4]
 800a0f0:	2b40      	cmp	r3, #64	@ 0x40
 800a0f2:	d956      	bls.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a0f8:	e053      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	78db      	ldrb	r3, [r3, #3]
 800a0fe:	f003 0303 	and.w	r3, r3, #3
 800a102:	2b01      	cmp	r3, #1
 800a104:	d10e      	bne.n	800a124 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	799b      	ldrb	r3, [r3, #6]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d007      	beq.n	800a11e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a112:	2b10      	cmp	r3, #16
 800a114:	d803      	bhi.n	800a11e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a11a:	2b40      	cmp	r3, #64	@ 0x40
 800a11c:	d941      	bls.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a11e:	2303      	movs	r3, #3
 800a120:	75fb      	strb	r3, [r7, #23]
 800a122:	e03e      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	78db      	ldrb	r3, [r3, #3]
 800a128:	f003 0303 	and.w	r3, r3, #3
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	d10b      	bne.n	800a148 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	799b      	ldrb	r3, [r3, #6]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d004      	beq.n	800a142 <USBH_ParseEPDesc+0x162>
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	889b      	ldrh	r3, [r3, #4]
 800a13c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a140:	d32f      	bcc.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a142:	2303      	movs	r3, #3
 800a144:	75fb      	strb	r3, [r7, #23]
 800a146:	e02c      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a148:	2303      	movs	r3, #3
 800a14a:	75fb      	strb	r3, [r7, #23]
 800a14c:	e029      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a154:	2b02      	cmp	r3, #2
 800a156:	d120      	bne.n	800a19a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	78db      	ldrb	r3, [r3, #3]
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	2b00      	cmp	r3, #0
 800a162:	d106      	bne.n	800a172 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	889b      	ldrh	r3, [r3, #4]
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d01a      	beq.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a16c:	2303      	movs	r3, #3
 800a16e:	75fb      	strb	r3, [r7, #23]
 800a170:	e017      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	78db      	ldrb	r3, [r3, #3]
 800a176:	f003 0303 	and.w	r3, r3, #3
 800a17a:	2b03      	cmp	r3, #3
 800a17c:	d10a      	bne.n	800a194 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	799b      	ldrb	r3, [r3, #6]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <USBH_ParseEPDesc+0x1ae>
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	889b      	ldrh	r3, [r3, #4]
 800a18a:	2b08      	cmp	r3, #8
 800a18c:	d909      	bls.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a18e:	2303      	movs	r3, #3
 800a190:	75fb      	strb	r3, [r7, #23]
 800a192:	e006      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a194:	2303      	movs	r3, #3
 800a196:	75fb      	strb	r3, [r7, #23]
 800a198:	e003      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a19a:	2303      	movs	r3, #3
 800a19c:	75fb      	strb	r3, [r7, #23]
 800a19e:	e000      	b.n	800a1a2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a1a0:	bf00      	nop
  }

  return status;
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	371c      	adds	r7, #28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b087      	sub	sp, #28
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b03      	cmp	r3, #3
 800a1c6:	d120      	bne.n	800a20a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	1e9a      	subs	r2, r3, #2
 800a1ce:	88fb      	ldrh	r3, [r7, #6]
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	bf28      	it	cs
 800a1d4:	4613      	movcs	r3, r2
 800a1d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	3302      	adds	r3, #2
 800a1dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a1de:	2300      	movs	r3, #0
 800a1e0:	82fb      	strh	r3, [r7, #22]
 800a1e2:	e00b      	b.n	800a1fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a1e4:	8afb      	ldrh	r3, [r7, #22]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	781a      	ldrb	r2, [r3, #0]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a1f6:	8afb      	ldrh	r3, [r7, #22]
 800a1f8:	3302      	adds	r3, #2
 800a1fa:	82fb      	strh	r3, [r7, #22]
 800a1fc:	8afa      	ldrh	r2, [r7, #22]
 800a1fe:	8abb      	ldrh	r3, [r7, #20]
 800a200:	429a      	cmp	r2, r3
 800a202:	d3ef      	bcc.n	800a1e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2200      	movs	r2, #0
 800a208:	701a      	strb	r2, [r3, #0]
  }
}
 800a20a:	bf00      	nop
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a216:	b480      	push	{r7}
 800a218:	b085      	sub	sp, #20
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	687a      	ldr	r2, [r7, #4]
 800a226:	7812      	ldrb	r2, [r2, #0]
 800a228:	4413      	add	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4413      	add	r3, r2
 800a23a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a23c:	68fb      	ldr	r3, [r7, #12]
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b086      	sub	sp, #24
 800a24e:	af00      	add	r7, sp, #0
 800a250:	60f8      	str	r0, [r7, #12]
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	4613      	mov	r3, r2
 800a256:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a258:	2301      	movs	r3, #1
 800a25a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	789b      	ldrb	r3, [r3, #2]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d002      	beq.n	800a26a <USBH_CtlReq+0x20>
 800a264:	2b02      	cmp	r3, #2
 800a266:	d00f      	beq.n	800a288 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a268:	e027      	b.n	800a2ba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	88fa      	ldrh	r2, [r7, #6]
 800a274:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2201      	movs	r2, #1
 800a27a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2202      	movs	r2, #2
 800a280:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a282:	2301      	movs	r3, #1
 800a284:	75fb      	strb	r3, [r7, #23]
      break;
 800a286:	e018      	b.n	800a2ba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a288:	68f8      	ldr	r0, [r7, #12]
 800a28a:	f000 f81b 	bl	800a2c4 <USBH_HandleControl>
 800a28e:	4603      	mov	r3, r0
 800a290:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a292:	7dfb      	ldrb	r3, [r7, #23]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <USBH_CtlReq+0x54>
 800a298:	7dfb      	ldrb	r3, [r7, #23]
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d106      	bne.n	800a2ac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	761a      	strb	r2, [r3, #24]
      break;
 800a2aa:	e005      	b.n	800a2b8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	2b02      	cmp	r3, #2
 800a2b0:	d102      	bne.n	800a2b8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	709a      	strb	r2, [r3, #2]
      break;
 800a2b8:	bf00      	nop
  }
  return status;
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	7e1b      	ldrb	r3, [r3, #24]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	2b0a      	cmp	r3, #10
 800a2dc:	f200 8156 	bhi.w	800a58c <USBH_HandleControl+0x2c8>
 800a2e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a2e8 <USBH_HandleControl+0x24>)
 800a2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e6:	bf00      	nop
 800a2e8:	0800a315 	.word	0x0800a315
 800a2ec:	0800a32f 	.word	0x0800a32f
 800a2f0:	0800a399 	.word	0x0800a399
 800a2f4:	0800a3bf 	.word	0x0800a3bf
 800a2f8:	0800a3f7 	.word	0x0800a3f7
 800a2fc:	0800a421 	.word	0x0800a421
 800a300:	0800a473 	.word	0x0800a473
 800a304:	0800a495 	.word	0x0800a495
 800a308:	0800a4d1 	.word	0x0800a4d1
 800a30c:	0800a4f7 	.word	0x0800a4f7
 800a310:	0800a535 	.word	0x0800a535
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f103 0110 	add.w	r1, r3, #16
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	795b      	ldrb	r3, [r3, #5]
 800a31e:	461a      	mov	r2, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f943 	bl	800a5ac <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2202      	movs	r2, #2
 800a32a:	761a      	strb	r2, [r3, #24]
      break;
 800a32c:	e139      	b.n	800a5a2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	795b      	ldrb	r3, [r3, #5]
 800a332:	4619      	mov	r1, r3
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fcc5 	bl	800acc4 <USBH_LL_GetURBState>
 800a33a:	4603      	mov	r3, r0
 800a33c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a33e:	7bbb      	ldrb	r3, [r7, #14]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d11e      	bne.n	800a382 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7c1b      	ldrb	r3, [r3, #16]
 800a348:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a34c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	8adb      	ldrh	r3, [r3, #22]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d00a      	beq.n	800a36c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a356:	7b7b      	ldrb	r3, [r7, #13]
 800a358:	2b80      	cmp	r3, #128	@ 0x80
 800a35a:	d103      	bne.n	800a364 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2203      	movs	r2, #3
 800a360:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a362:	e115      	b.n	800a590 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2205      	movs	r2, #5
 800a368:	761a      	strb	r2, [r3, #24]
      break;
 800a36a:	e111      	b.n	800a590 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a36c:	7b7b      	ldrb	r3, [r7, #13]
 800a36e:	2b80      	cmp	r3, #128	@ 0x80
 800a370:	d103      	bne.n	800a37a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2209      	movs	r2, #9
 800a376:	761a      	strb	r2, [r3, #24]
      break;
 800a378:	e10a      	b.n	800a590 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2207      	movs	r2, #7
 800a37e:	761a      	strb	r2, [r3, #24]
      break;
 800a380:	e106      	b.n	800a590 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a382:	7bbb      	ldrb	r3, [r7, #14]
 800a384:	2b04      	cmp	r3, #4
 800a386:	d003      	beq.n	800a390 <USBH_HandleControl+0xcc>
 800a388:	7bbb      	ldrb	r3, [r7, #14]
 800a38a:	2b02      	cmp	r3, #2
 800a38c:	f040 8100 	bne.w	800a590 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	220b      	movs	r2, #11
 800a394:	761a      	strb	r2, [r3, #24]
      break;
 800a396:	e0fb      	b.n	800a590 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6899      	ldr	r1, [r3, #8]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	899a      	ldrh	r2, [r3, #12]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	791b      	ldrb	r3, [r3, #4]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f93a 	bl	800a62a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2204      	movs	r2, #4
 800a3ba:	761a      	strb	r2, [r3, #24]
      break;
 800a3bc:	e0f1      	b.n	800a5a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	791b      	ldrb	r3, [r3, #4]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 fc7d 	bl	800acc4 <USBH_LL_GetURBState>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	d102      	bne.n	800a3da <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2209      	movs	r2, #9
 800a3d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
 800a3dc:	2b05      	cmp	r3, #5
 800a3de:	d102      	bne.n	800a3e6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3e4:	e0d6      	b.n	800a594 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	f040 80d3 	bne.w	800a594 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	220b      	movs	r2, #11
 800a3f2:	761a      	strb	r2, [r3, #24]
      break;
 800a3f4:	e0ce      	b.n	800a594 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6899      	ldr	r1, [r3, #8]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	899a      	ldrh	r2, [r3, #12]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	795b      	ldrb	r3, [r3, #5]
 800a402:	2001      	movs	r0, #1
 800a404:	9000      	str	r0, [sp, #0]
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f8ea 	bl	800a5e0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a412:	b29a      	uxth	r2, r3
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2206      	movs	r2, #6
 800a41c:	761a      	strb	r2, [r3, #24]
      break;
 800a41e:	e0c0      	b.n	800a5a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	795b      	ldrb	r3, [r3, #5]
 800a424:	4619      	mov	r1, r3
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fc4c 	bl	800acc4 <USBH_LL_GetURBState>
 800a42c:	4603      	mov	r3, r0
 800a42e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a430:	7bbb      	ldrb	r3, [r7, #14]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d103      	bne.n	800a43e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2207      	movs	r2, #7
 800a43a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a43c:	e0ac      	b.n	800a598 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	2b05      	cmp	r3, #5
 800a442:	d105      	bne.n	800a450 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	220c      	movs	r2, #12
 800a448:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a44a:	2303      	movs	r3, #3
 800a44c:	73fb      	strb	r3, [r7, #15]
      break;
 800a44e:	e0a3      	b.n	800a598 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a450:	7bbb      	ldrb	r3, [r7, #14]
 800a452:	2b02      	cmp	r3, #2
 800a454:	d103      	bne.n	800a45e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2205      	movs	r2, #5
 800a45a:	761a      	strb	r2, [r3, #24]
      break;
 800a45c:	e09c      	b.n	800a598 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a45e:	7bbb      	ldrb	r3, [r7, #14]
 800a460:	2b04      	cmp	r3, #4
 800a462:	f040 8099 	bne.w	800a598 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	220b      	movs	r2, #11
 800a46a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a46c:	2302      	movs	r3, #2
 800a46e:	73fb      	strb	r3, [r7, #15]
      break;
 800a470:	e092      	b.n	800a598 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	791b      	ldrb	r3, [r3, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	2100      	movs	r1, #0
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f8d5 	bl	800a62a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a486:	b29a      	uxth	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2208      	movs	r2, #8
 800a490:	761a      	strb	r2, [r3, #24]

      break;
 800a492:	e086      	b.n	800a5a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	791b      	ldrb	r3, [r3, #4]
 800a498:	4619      	mov	r1, r3
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 fc12 	bl	800acc4 <USBH_LL_GetURBState>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4a4:	7bbb      	ldrb	r3, [r7, #14]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d105      	bne.n	800a4b6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	220d      	movs	r2, #13
 800a4ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4b4:	e072      	b.n	800a59c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a4b6:	7bbb      	ldrb	r3, [r7, #14]
 800a4b8:	2b04      	cmp	r3, #4
 800a4ba:	d103      	bne.n	800a4c4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	220b      	movs	r2, #11
 800a4c0:	761a      	strb	r2, [r3, #24]
      break;
 800a4c2:	e06b      	b.n	800a59c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a4c4:	7bbb      	ldrb	r3, [r7, #14]
 800a4c6:	2b05      	cmp	r3, #5
 800a4c8:	d168      	bne.n	800a59c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ce:	e065      	b.n	800a59c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	795b      	ldrb	r3, [r3, #5]
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	9200      	str	r2, [sp, #0]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	2100      	movs	r1, #0
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f87f 	bl	800a5e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	220a      	movs	r2, #10
 800a4f2:	761a      	strb	r2, [r3, #24]
      break;
 800a4f4:	e055      	b.n	800a5a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	795b      	ldrb	r3, [r3, #5]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 fbe1 	bl	800acc4 <USBH_LL_GetURBState>
 800a502:	4603      	mov	r3, r0
 800a504:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d105      	bne.n	800a518 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	220d      	movs	r2, #13
 800a514:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a516:	e043      	b.n	800a5a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a518:	7bbb      	ldrb	r3, [r7, #14]
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d103      	bne.n	800a526 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2209      	movs	r2, #9
 800a522:	761a      	strb	r2, [r3, #24]
      break;
 800a524:	e03c      	b.n	800a5a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a526:	7bbb      	ldrb	r3, [r7, #14]
 800a528:	2b04      	cmp	r3, #4
 800a52a:	d139      	bne.n	800a5a0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	220b      	movs	r2, #11
 800a530:	761a      	strb	r2, [r3, #24]
      break;
 800a532:	e035      	b.n	800a5a0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	7e5b      	ldrb	r3, [r3, #25]
 800a538:	3301      	adds	r3, #1
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	765a      	strb	r2, [r3, #25]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	7e5b      	ldrb	r3, [r3, #25]
 800a544:	2b02      	cmp	r3, #2
 800a546:	d806      	bhi.n	800a556 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a554:	e025      	b.n	800a5a2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a55c:	2106      	movs	r1, #6
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	795b      	ldrb	r3, [r3, #5]
 800a56c:	4619      	mov	r1, r3
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f90c 	bl	800a78c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	791b      	ldrb	r3, [r3, #4]
 800a578:	4619      	mov	r1, r3
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f000 f906 	bl	800a78c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a586:	2302      	movs	r3, #2
 800a588:	73fb      	strb	r3, [r7, #15]
      break;
 800a58a:	e00a      	b.n	800a5a2 <USBH_HandleControl+0x2de>

    default:
      break;
 800a58c:	bf00      	nop
 800a58e:	e008      	b.n	800a5a2 <USBH_HandleControl+0x2de>
      break;
 800a590:	bf00      	nop
 800a592:	e006      	b.n	800a5a2 <USBH_HandleControl+0x2de>
      break;
 800a594:	bf00      	nop
 800a596:	e004      	b.n	800a5a2 <USBH_HandleControl+0x2de>
      break;
 800a598:	bf00      	nop
 800a59a:	e002      	b.n	800a5a2 <USBH_HandleControl+0x2de>
      break;
 800a59c:	bf00      	nop
 800a59e:	e000      	b.n	800a5a2 <USBH_HandleControl+0x2de>
      break;
 800a5a0:	bf00      	nop
  }

  return status;
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b088      	sub	sp, #32
 800a5b0:	af04      	add	r7, sp, #16
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	4613      	mov	r3, r2
 800a5b8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a5ba:	79f9      	ldrb	r1, [r7, #7]
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9303      	str	r3, [sp, #12]
 800a5c0:	2308      	movs	r3, #8
 800a5c2:	9302      	str	r3, [sp, #8]
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fb46 	bl	800ac62 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af04      	add	r7, sp, #16
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	4611      	mov	r1, r2
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	80fb      	strh	r3, [r7, #6]
 800a5f2:	4613      	mov	r3, r2
 800a5f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a604:	7979      	ldrb	r1, [r7, #5]
 800a606:	7e3b      	ldrb	r3, [r7, #24]
 800a608:	9303      	str	r3, [sp, #12]
 800a60a:	88fb      	ldrh	r3, [r7, #6]
 800a60c:	9302      	str	r3, [sp, #8]
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	9301      	str	r3, [sp, #4]
 800a612:	2301      	movs	r3, #1
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	2300      	movs	r3, #0
 800a618:	2200      	movs	r2, #0
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 fb21 	bl	800ac62 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}

0800a62a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a62a:	b580      	push	{r7, lr}
 800a62c:	b088      	sub	sp, #32
 800a62e:	af04      	add	r7, sp, #16
 800a630:	60f8      	str	r0, [r7, #12]
 800a632:	60b9      	str	r1, [r7, #8]
 800a634:	4611      	mov	r1, r2
 800a636:	461a      	mov	r2, r3
 800a638:	460b      	mov	r3, r1
 800a63a:	80fb      	strh	r3, [r7, #6]
 800a63c:	4613      	mov	r3, r2
 800a63e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a640:	7979      	ldrb	r1, [r7, #5]
 800a642:	2300      	movs	r3, #0
 800a644:	9303      	str	r3, [sp, #12]
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	9302      	str	r3, [sp, #8]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	2301      	movs	r3, #1
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	2300      	movs	r3, #0
 800a654:	2201      	movs	r2, #1
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 fb03 	bl	800ac62 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a65c:	2300      	movs	r3, #0

}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}

0800a666 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b088      	sub	sp, #32
 800a66a:	af04      	add	r7, sp, #16
 800a66c:	60f8      	str	r0, [r7, #12]
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	4611      	mov	r1, r2
 800a672:	461a      	mov	r2, r3
 800a674:	460b      	mov	r3, r1
 800a676:	80fb      	strh	r3, [r7, #6]
 800a678:	4613      	mov	r3, r2
 800a67a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a686:	2300      	movs	r3, #0
 800a688:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a68a:	7979      	ldrb	r1, [r7, #5]
 800a68c:	7e3b      	ldrb	r3, [r7, #24]
 800a68e:	9303      	str	r3, [sp, #12]
 800a690:	88fb      	ldrh	r3, [r7, #6]
 800a692:	9302      	str	r3, [sp, #8]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	9301      	str	r3, [sp, #4]
 800a698:	2301      	movs	r3, #1
 800a69a:	9300      	str	r3, [sp, #0]
 800a69c:	2302      	movs	r3, #2
 800a69e:	2200      	movs	r2, #0
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f000 fade 	bl	800ac62 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b088      	sub	sp, #32
 800a6b4:	af04      	add	r7, sp, #16
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	461a      	mov	r2, r3
 800a6be:	460b      	mov	r3, r1
 800a6c0:	80fb      	strh	r3, [r7, #6]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6c6:	7979      	ldrb	r1, [r7, #5]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9303      	str	r3, [sp, #12]
 800a6cc:	88fb      	ldrh	r3, [r7, #6]
 800a6ce:	9302      	str	r3, [sp, #8]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	9301      	str	r3, [sp, #4]
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	2302      	movs	r3, #2
 800a6da:	2201      	movs	r2, #1
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 fac0 	bl	800ac62 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b086      	sub	sp, #24
 800a6f0:	af04      	add	r7, sp, #16
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	70fb      	strb	r3, [r7, #3]
 800a6fe:	460b      	mov	r3, r1
 800a700:	70bb      	strb	r3, [r7, #2]
 800a702:	4613      	mov	r3, r2
 800a704:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a706:	7878      	ldrb	r0, [r7, #1]
 800a708:	78ba      	ldrb	r2, [r7, #2]
 800a70a:	78f9      	ldrb	r1, [r7, #3]
 800a70c:	8b3b      	ldrh	r3, [r7, #24]
 800a70e:	9302      	str	r3, [sp, #8]
 800a710:	7d3b      	ldrb	r3, [r7, #20]
 800a712:	9301      	str	r3, [sp, #4]
 800a714:	7c3b      	ldrb	r3, [r7, #16]
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	4603      	mov	r3, r0
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fa53 	bl	800abc6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b082      	sub	sp, #8
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	460b      	mov	r3, r1
 800a734:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 fa72 	bl	800ac24 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	460b      	mov	r3, r1
 800a754:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 f836 	bl	800a7c8 <USBH_GetFreePipe>
 800a75c:	4603      	mov	r3, r0
 800a75e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a760:	89fb      	ldrh	r3, [r7, #14]
 800a762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a766:	4293      	cmp	r3, r2
 800a768:	d00a      	beq.n	800a780 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a76a:	78fa      	ldrb	r2, [r7, #3]
 800a76c:	89fb      	ldrh	r3, [r7, #14]
 800a76e:	f003 030f 	and.w	r3, r3, #15
 800a772:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a776:	6879      	ldr	r1, [r7, #4]
 800a778:	33e0      	adds	r3, #224	@ 0xe0
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	440b      	add	r3, r1
 800a77e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a780:	89fb      	ldrh	r3, [r7, #14]
 800a782:	b2db      	uxtb	r3, r3
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	460b      	mov	r3, r1
 800a796:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	2b0f      	cmp	r3, #15
 800a79c:	d80d      	bhi.n	800a7ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a79e:	78fb      	ldrb	r3, [r7, #3]
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	33e0      	adds	r3, #224	@ 0xe0
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	685a      	ldr	r2, [r3, #4]
 800a7aa:	78fb      	ldrb	r3, [r7, #3]
 800a7ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	33e0      	adds	r3, #224	@ 0xe0
 800a7b4:	009b      	lsls	r3, r3, #2
 800a7b6:	440b      	add	r3, r1
 800a7b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
 800a7d8:	e00f      	b.n	800a7fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a7da:	7bfb      	ldrb	r3, [r7, #15]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	33e0      	adds	r3, #224	@ 0xe0
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d102      	bne.n	800a7f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	e007      	b.n	800a804 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	73fb      	strb	r3, [r7, #15]
 800a7fa:	7bfb      	ldrb	r3, [r7, #15]
 800a7fc:	2b0f      	cmp	r3, #15
 800a7fe:	d9ec      	bls.n	800a7da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a800:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a804:	4618      	mov	r0, r3
 800a806:	3714      	adds	r7, #20
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a814:	2201      	movs	r2, #1
 800a816:	490e      	ldr	r1, [pc, #56]	@ (800a850 <MX_USB_HOST_Init+0x40>)
 800a818:	480e      	ldr	r0, [pc, #56]	@ (800a854 <MX_USB_HOST_Init+0x44>)
 800a81a:	f7fe fb15 	bl	8008e48 <USBH_Init>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a824:	f7f7 f8b8 	bl	8001998 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a828:	490b      	ldr	r1, [pc, #44]	@ (800a858 <MX_USB_HOST_Init+0x48>)
 800a82a:	480a      	ldr	r0, [pc, #40]	@ (800a854 <MX_USB_HOST_Init+0x44>)
 800a82c:	f7fe fbb9 	bl	8008fa2 <USBH_RegisterClass>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a836:	f7f7 f8af 	bl	8001998 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a83a:	4806      	ldr	r0, [pc, #24]	@ (800a854 <MX_USB_HOST_Init+0x44>)
 800a83c:	f7fe fc3d 	bl	80090ba <USBH_Start>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d001      	beq.n	800a84a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a846:	f7f7 f8a7 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a84a:	bf00      	nop
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	0800a871 	.word	0x0800a871
 800a854:	200001f8 	.word	0x200001f8
 800a858:	2000000c 	.word	0x2000000c

0800a85c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a860:	4802      	ldr	r0, [pc, #8]	@ (800a86c <MX_USB_HOST_Process+0x10>)
 800a862:	f7fe fc3b 	bl	80090dc <USBH_Process>
}
 800a866:	bf00      	nop
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	200001f8 	.word	0x200001f8

0800a870 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	460b      	mov	r3, r1
 800a87a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	3b01      	subs	r3, #1
 800a880:	2b04      	cmp	r3, #4
 800a882:	d819      	bhi.n	800a8b8 <USBH_UserProcess+0x48>
 800a884:	a201      	add	r2, pc, #4	@ (adr r2, 800a88c <USBH_UserProcess+0x1c>)
 800a886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88a:	bf00      	nop
 800a88c:	0800a8b9 	.word	0x0800a8b9
 800a890:	0800a8a9 	.word	0x0800a8a9
 800a894:	0800a8b9 	.word	0x0800a8b9
 800a898:	0800a8b1 	.word	0x0800a8b1
 800a89c:	0800a8a1 	.word	0x0800a8a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a8a0:	4b09      	ldr	r3, [pc, #36]	@ (800a8c8 <USBH_UserProcess+0x58>)
 800a8a2:	2203      	movs	r2, #3
 800a8a4:	701a      	strb	r2, [r3, #0]
  break;
 800a8a6:	e008      	b.n	800a8ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a8a8:	4b07      	ldr	r3, [pc, #28]	@ (800a8c8 <USBH_UserProcess+0x58>)
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	701a      	strb	r2, [r3, #0]
  break;
 800a8ae:	e004      	b.n	800a8ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a8b0:	4b05      	ldr	r3, [pc, #20]	@ (800a8c8 <USBH_UserProcess+0x58>)
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	701a      	strb	r2, [r3, #0]
  break;
 800a8b6:	e000      	b.n	800a8ba <USBH_UserProcess+0x4a>

  default:
  break;
 800a8b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a8ba:	bf00      	nop
 800a8bc:	370c      	adds	r7, #12
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	200005d0 	.word	0x200005d0

0800a8cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08a      	sub	sp, #40	@ 0x28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8d4:	f107 0314 	add.w	r3, r7, #20
 800a8d8:	2200      	movs	r2, #0
 800a8da:	601a      	str	r2, [r3, #0]
 800a8dc:	605a      	str	r2, [r3, #4]
 800a8de:	609a      	str	r2, [r3, #8]
 800a8e0:	60da      	str	r2, [r3, #12]
 800a8e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a8ec:	d147      	bne.n	800a97e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	613b      	str	r3, [r7, #16]
 800a8f2:	4b25      	ldr	r3, [pc, #148]	@ (800a988 <HAL_HCD_MspInit+0xbc>)
 800a8f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f6:	4a24      	ldr	r2, [pc, #144]	@ (800a988 <HAL_HCD_MspInit+0xbc>)
 800a8f8:	f043 0301 	orr.w	r3, r3, #1
 800a8fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8fe:	4b22      	ldr	r3, [pc, #136]	@ (800a988 <HAL_HCD_MspInit+0xbc>)
 800a900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	613b      	str	r3, [r7, #16]
 800a908:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a90a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a90e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a910:	2300      	movs	r3, #0
 800a912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a918:	f107 0314 	add.w	r3, r7, #20
 800a91c:	4619      	mov	r1, r3
 800a91e:	481b      	ldr	r0, [pc, #108]	@ (800a98c <HAL_HCD_MspInit+0xc0>)
 800a920:	f7f8 f9cc 	bl	8002cbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a924:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a92a:	2302      	movs	r3, #2
 800a92c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a932:	2300      	movs	r3, #0
 800a934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a936:	230a      	movs	r3, #10
 800a938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a93a:	f107 0314 	add.w	r3, r7, #20
 800a93e:	4619      	mov	r1, r3
 800a940:	4812      	ldr	r0, [pc, #72]	@ (800a98c <HAL_HCD_MspInit+0xc0>)
 800a942:	f7f8 f9bb 	bl	8002cbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a946:	4b10      	ldr	r3, [pc, #64]	@ (800a988 <HAL_HCD_MspInit+0xbc>)
 800a948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a94a:	4a0f      	ldr	r2, [pc, #60]	@ (800a988 <HAL_HCD_MspInit+0xbc>)
 800a94c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a950:	6353      	str	r3, [r2, #52]	@ 0x34
 800a952:	2300      	movs	r3, #0
 800a954:	60fb      	str	r3, [r7, #12]
 800a956:	4b0c      	ldr	r3, [pc, #48]	@ (800a988 <HAL_HCD_MspInit+0xbc>)
 800a958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a95a:	4a0b      	ldr	r2, [pc, #44]	@ (800a988 <HAL_HCD_MspInit+0xbc>)
 800a95c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a960:	6453      	str	r3, [r2, #68]	@ 0x44
 800a962:	4b09      	ldr	r3, [pc, #36]	@ (800a988 <HAL_HCD_MspInit+0xbc>)
 800a964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a96e:	2200      	movs	r2, #0
 800a970:	2100      	movs	r1, #0
 800a972:	2043      	movs	r0, #67	@ 0x43
 800a974:	f7f8 f96b 	bl	8002c4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a978:	2043      	movs	r0, #67	@ 0x43
 800a97a:	f7f8 f984 	bl	8002c86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a97e:	bf00      	nop
 800a980:	3728      	adds	r7, #40	@ 0x28
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	40023800 	.word	0x40023800
 800a98c:	40020000 	.word	0x40020000

0800a990 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b082      	sub	sp, #8
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7fe ff73 	bl	800988a <USBH_LL_IncTimer>
}
 800a9a4:	bf00      	nop
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b082      	sub	sp, #8
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe ffab 	bl	8009916 <USBH_LL_Connect>
}
 800a9c0:	bf00      	nop
 800a9c2:	3708      	adds	r7, #8
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe ffb4 	bl	8009944 <USBH_LL_Disconnect>
}
 800a9dc:	bf00      	nop
 800a9de:	3708      	adds	r7, #8
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	70fb      	strb	r3, [r7, #3]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7fe ff65 	bl	80098de <USBH_LL_PortEnabled>
}
 800aa14:	bf00      	nop
 800aa16:	3708      	adds	r7, #8
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe ff65 	bl	80098fa <USBH_LL_PortDisabled>
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d12a      	bne.n	800aaa0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aa4a:	4a18      	ldr	r2, [pc, #96]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a15      	ldr	r2, [pc, #84]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa56:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa5a:	4b14      	ldr	r3, [pc, #80]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa5c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aa60:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aa62:	4b12      	ldr	r3, [pc, #72]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa64:	2208      	movs	r2, #8
 800aa66:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aa68:	4b10      	ldr	r3, [pc, #64]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa6e:	4b0f      	ldr	r3, [pc, #60]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aa74:	4b0d      	ldr	r3, [pc, #52]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa76:	2202      	movs	r2, #2
 800aa78:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aa7a:	4b0c      	ldr	r3, [pc, #48]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aa80:	480a      	ldr	r0, [pc, #40]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa82:	f7f8 fad0 	bl	8003026 <HAL_HCD_Init>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d001      	beq.n	800aa90 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aa8c:	f7f6 ff84 	bl	8001998 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aa90:	4806      	ldr	r0, [pc, #24]	@ (800aaac <USBH_LL_Init+0x74>)
 800aa92:	f7f8 ff31 	bl	80038f8 <HAL_HCD_GetCurrentFrame>
 800aa96:	4603      	mov	r3, r0
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7fe fee6 	bl	800986c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	200005d4 	.word	0x200005d4

0800aab0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7f8 fe9e 	bl	8003808 <HAL_HCD_Start>
 800aacc:	4603      	mov	r3, r0
 800aace:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f000 f95e 	bl	800ad94 <USBH_Get_USB_Status>
 800aad8:	4603      	mov	r3, r0
 800aada:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aadc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b084      	sub	sp, #16
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7f8 fea6 	bl	800384e <HAL_HCD_Stop>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f000 f943 	bl	800ad94 <USBH_Get_USB_Status>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3710      	adds	r7, #16
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ab24:	2301      	movs	r3, #1
 800ab26:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7f8 fef0 	bl	8003914 <HAL_HCD_GetCurrentSpeed>
 800ab34:	4603      	mov	r3, r0
 800ab36:	2b02      	cmp	r3, #2
 800ab38:	d00c      	beq.n	800ab54 <USBH_LL_GetSpeed+0x38>
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d80d      	bhi.n	800ab5a <USBH_LL_GetSpeed+0x3e>
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <USBH_LL_GetSpeed+0x2c>
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d003      	beq.n	800ab4e <USBH_LL_GetSpeed+0x32>
 800ab46:	e008      	b.n	800ab5a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab4c:	e008      	b.n	800ab60 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	73fb      	strb	r3, [r7, #15]
    break;
 800ab52:	e005      	b.n	800ab60 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ab54:	2302      	movs	r3, #2
 800ab56:	73fb      	strb	r3, [r7, #15]
    break;
 800ab58:	e002      	b.n	800ab60 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	73fb      	strb	r3, [r7, #15]
    break;
 800ab5e:	bf00      	nop
  }
  return  speed;
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ab6a:	b580      	push	{r7, lr}
 800ab6c:	b084      	sub	sp, #16
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7f8 fe81 	bl	8003888 <HAL_HCD_ResetPort>
 800ab86:	4603      	mov	r3, r0
 800ab88:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab8a:	7bfb      	ldrb	r3, [r7, #15]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f000 f901 	bl	800ad94 <USBH_Get_USB_Status>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab96:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3710      	adds	r7, #16
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800abb2:	78fa      	ldrb	r2, [r7, #3]
 800abb4:	4611      	mov	r1, r2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7f8 fe89 	bl	80038ce <HAL_HCD_HC_GetXferCount>
 800abbc:	4603      	mov	r3, r0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800abc6:	b590      	push	{r4, r7, lr}
 800abc8:	b089      	sub	sp, #36	@ 0x24
 800abca:	af04      	add	r7, sp, #16
 800abcc:	6078      	str	r0, [r7, #4]
 800abce:	4608      	mov	r0, r1
 800abd0:	4611      	mov	r1, r2
 800abd2:	461a      	mov	r2, r3
 800abd4:	4603      	mov	r3, r0
 800abd6:	70fb      	strb	r3, [r7, #3]
 800abd8:	460b      	mov	r3, r1
 800abda:	70bb      	strb	r3, [r7, #2]
 800abdc:	4613      	mov	r3, r2
 800abde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800abee:	787c      	ldrb	r4, [r7, #1]
 800abf0:	78ba      	ldrb	r2, [r7, #2]
 800abf2:	78f9      	ldrb	r1, [r7, #3]
 800abf4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800abf6:	9302      	str	r3, [sp, #8]
 800abf8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800abfc:	9301      	str	r3, [sp, #4]
 800abfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	4623      	mov	r3, r4
 800ac06:	f7f8 fa75 	bl	80030f4 <HAL_HCD_HC_Init>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 f8bf 	bl	800ad94 <USBH_Get_USB_Status>
 800ac16:	4603      	mov	r3, r0
 800ac18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd90      	pop	{r4, r7, pc}

0800ac24 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b084      	sub	sp, #16
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac34:	2300      	movs	r3, #0
 800ac36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac3e:	78fa      	ldrb	r2, [r7, #3]
 800ac40:	4611      	mov	r1, r2
 800ac42:	4618      	mov	r0, r3
 800ac44:	f7f8 fb0e 	bl	8003264 <HAL_HCD_HC_Halt>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f000 f8a0 	bl	800ad94 <USBH_Get_USB_Status>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac58:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ac62:	b590      	push	{r4, r7, lr}
 800ac64:	b089      	sub	sp, #36	@ 0x24
 800ac66:	af04      	add	r7, sp, #16
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	4608      	mov	r0, r1
 800ac6c:	4611      	mov	r1, r2
 800ac6e:	461a      	mov	r2, r3
 800ac70:	4603      	mov	r3, r0
 800ac72:	70fb      	strb	r3, [r7, #3]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70bb      	strb	r3, [r7, #2]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ac8a:	787c      	ldrb	r4, [r7, #1]
 800ac8c:	78ba      	ldrb	r2, [r7, #2]
 800ac8e:	78f9      	ldrb	r1, [r7, #3]
 800ac90:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac98:	9302      	str	r3, [sp, #8]
 800ac9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9c:	9301      	str	r3, [sp, #4]
 800ac9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	4623      	mov	r3, r4
 800aca6:	f7f8 fb01 	bl	80032ac <HAL_HCD_HC_SubmitRequest>
 800acaa:	4603      	mov	r3, r0
 800acac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800acae:	7bfb      	ldrb	r3, [r7, #15]
 800acb0:	4618      	mov	r0, r3
 800acb2:	f000 f86f 	bl	800ad94 <USBH_Get_USB_Status>
 800acb6:	4603      	mov	r3, r0
 800acb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acba:	7bbb      	ldrb	r3, [r7, #14]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3714      	adds	r7, #20
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd90      	pop	{r4, r7, pc}

0800acc4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800acd6:	78fa      	ldrb	r2, [r7, #3]
 800acd8:	4611      	mov	r1, r2
 800acda:	4618      	mov	r0, r3
 800acdc:	f7f8 fde2 	bl	80038a4 <HAL_HCD_HC_GetURBState>
 800ace0:	4603      	mov	r3, r0
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
 800acf2:	460b      	mov	r3, r1
 800acf4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d103      	bne.n	800ad08 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ad00:	78fb      	ldrb	r3, [r7, #3]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 f872 	bl	800adec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ad08:	20c8      	movs	r0, #200	@ 0xc8
 800ad0a:	f7f7 fea1 	bl	8002a50 <HAL_Delay>
  return USBH_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3708      	adds	r7, #8
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
 800ad24:	4613      	mov	r3, r2
 800ad26:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad2e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ad30:	78fa      	ldrb	r2, [r7, #3]
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	4613      	mov	r3, r2
 800ad36:	011b      	lsls	r3, r3, #4
 800ad38:	1a9b      	subs	r3, r3, r2
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	440b      	add	r3, r1
 800ad3e:	3317      	adds	r3, #23
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00a      	beq.n	800ad5c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ad46:	78fa      	ldrb	r2, [r7, #3]
 800ad48:	68f9      	ldr	r1, [r7, #12]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	011b      	lsls	r3, r3, #4
 800ad4e:	1a9b      	subs	r3, r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	440b      	add	r3, r1
 800ad54:	333c      	adds	r3, #60	@ 0x3c
 800ad56:	78ba      	ldrb	r2, [r7, #2]
 800ad58:	701a      	strb	r2, [r3, #0]
 800ad5a:	e009      	b.n	800ad70 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ad5c:	78fa      	ldrb	r2, [r7, #3]
 800ad5e:	68f9      	ldr	r1, [r7, #12]
 800ad60:	4613      	mov	r3, r2
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	1a9b      	subs	r3, r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	440b      	add	r3, r1
 800ad6a:	333d      	adds	r3, #61	@ 0x3d
 800ad6c:	78ba      	ldrb	r2, [r7, #2]
 800ad6e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ad70:	2300      	movs	r3, #0
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3714      	adds	r7, #20
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7f7 fe62 	bl	8002a50 <HAL_Delay>
}
 800ad8c:	bf00      	nop
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ada2:	79fb      	ldrb	r3, [r7, #7]
 800ada4:	2b03      	cmp	r3, #3
 800ada6:	d817      	bhi.n	800add8 <USBH_Get_USB_Status+0x44>
 800ada8:	a201      	add	r2, pc, #4	@ (adr r2, 800adb0 <USBH_Get_USB_Status+0x1c>)
 800adaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adae:	bf00      	nop
 800adb0:	0800adc1 	.word	0x0800adc1
 800adb4:	0800adc7 	.word	0x0800adc7
 800adb8:	0800adcd 	.word	0x0800adcd
 800adbc:	0800add3 	.word	0x0800add3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800adc0:	2300      	movs	r3, #0
 800adc2:	73fb      	strb	r3, [r7, #15]
    break;
 800adc4:	e00b      	b.n	800adde <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800adc6:	2302      	movs	r3, #2
 800adc8:	73fb      	strb	r3, [r7, #15]
    break;
 800adca:	e008      	b.n	800adde <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800adcc:	2301      	movs	r3, #1
 800adce:	73fb      	strb	r3, [r7, #15]
    break;
 800add0:	e005      	b.n	800adde <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800add2:	2302      	movs	r3, #2
 800add4:	73fb      	strb	r3, [r7, #15]
    break;
 800add6:	e002      	b.n	800adde <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800add8:	2302      	movs	r3, #2
 800adda:	73fb      	strb	r3, [r7, #15]
    break;
 800addc:	bf00      	nop
  }
  return usb_status;
 800adde:	7bfb      	ldrb	r3, [r7, #15]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3714      	adds	r7, #20
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	4603      	mov	r3, r0
 800adf4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d102      	bne.n	800ae06 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73fb      	strb	r3, [r7, #15]
 800ae04:	e001      	b.n	800ae0a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	2101      	movs	r1, #1
 800ae10:	4803      	ldr	r0, [pc, #12]	@ (800ae20 <MX_DriverVbusFS+0x34>)
 800ae12:	f7f8 f8ef 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 800ae16:	bf00      	nop
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	40020800 	.word	0x40020800

0800ae24 <malloc>:
 800ae24:	4b02      	ldr	r3, [pc, #8]	@ (800ae30 <malloc+0xc>)
 800ae26:	4601      	mov	r1, r0
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f000 b82d 	b.w	800ae88 <_malloc_r>
 800ae2e:	bf00      	nop
 800ae30:	20000038 	.word	0x20000038

0800ae34 <free>:
 800ae34:	4b02      	ldr	r3, [pc, #8]	@ (800ae40 <free+0xc>)
 800ae36:	4601      	mov	r1, r0
 800ae38:	6818      	ldr	r0, [r3, #0]
 800ae3a:	f000 bc09 	b.w	800b650 <_free_r>
 800ae3e:	bf00      	nop
 800ae40:	20000038 	.word	0x20000038

0800ae44 <sbrk_aligned>:
 800ae44:	b570      	push	{r4, r5, r6, lr}
 800ae46:	4e0f      	ldr	r6, [pc, #60]	@ (800ae84 <sbrk_aligned+0x40>)
 800ae48:	460c      	mov	r4, r1
 800ae4a:	6831      	ldr	r1, [r6, #0]
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	b911      	cbnz	r1, 800ae56 <sbrk_aligned+0x12>
 800ae50:	f000 fba0 	bl	800b594 <_sbrk_r>
 800ae54:	6030      	str	r0, [r6, #0]
 800ae56:	4621      	mov	r1, r4
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f000 fb9b 	bl	800b594 <_sbrk_r>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d103      	bne.n	800ae6a <sbrk_aligned+0x26>
 800ae62:	f04f 34ff 	mov.w	r4, #4294967295
 800ae66:	4620      	mov	r0, r4
 800ae68:	bd70      	pop	{r4, r5, r6, pc}
 800ae6a:	1cc4      	adds	r4, r0, #3
 800ae6c:	f024 0403 	bic.w	r4, r4, #3
 800ae70:	42a0      	cmp	r0, r4
 800ae72:	d0f8      	beq.n	800ae66 <sbrk_aligned+0x22>
 800ae74:	1a21      	subs	r1, r4, r0
 800ae76:	4628      	mov	r0, r5
 800ae78:	f000 fb8c 	bl	800b594 <_sbrk_r>
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	d1f2      	bne.n	800ae66 <sbrk_aligned+0x22>
 800ae80:	e7ef      	b.n	800ae62 <sbrk_aligned+0x1e>
 800ae82:	bf00      	nop
 800ae84:	200009b4 	.word	0x200009b4

0800ae88 <_malloc_r>:
 800ae88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae8c:	1ccd      	adds	r5, r1, #3
 800ae8e:	f025 0503 	bic.w	r5, r5, #3
 800ae92:	3508      	adds	r5, #8
 800ae94:	2d0c      	cmp	r5, #12
 800ae96:	bf38      	it	cc
 800ae98:	250c      	movcc	r5, #12
 800ae9a:	2d00      	cmp	r5, #0
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	db01      	blt.n	800aea4 <_malloc_r+0x1c>
 800aea0:	42a9      	cmp	r1, r5
 800aea2:	d904      	bls.n	800aeae <_malloc_r+0x26>
 800aea4:	230c      	movs	r3, #12
 800aea6:	6033      	str	r3, [r6, #0]
 800aea8:	2000      	movs	r0, #0
 800aeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af84 <_malloc_r+0xfc>
 800aeb2:	f000 f869 	bl	800af88 <__malloc_lock>
 800aeb6:	f8d8 3000 	ldr.w	r3, [r8]
 800aeba:	461c      	mov	r4, r3
 800aebc:	bb44      	cbnz	r4, 800af10 <_malloc_r+0x88>
 800aebe:	4629      	mov	r1, r5
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7ff ffbf 	bl	800ae44 <sbrk_aligned>
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	4604      	mov	r4, r0
 800aeca:	d158      	bne.n	800af7e <_malloc_r+0xf6>
 800aecc:	f8d8 4000 	ldr.w	r4, [r8]
 800aed0:	4627      	mov	r7, r4
 800aed2:	2f00      	cmp	r7, #0
 800aed4:	d143      	bne.n	800af5e <_malloc_r+0xd6>
 800aed6:	2c00      	cmp	r4, #0
 800aed8:	d04b      	beq.n	800af72 <_malloc_r+0xea>
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	4639      	mov	r1, r7
 800aede:	4630      	mov	r0, r6
 800aee0:	eb04 0903 	add.w	r9, r4, r3
 800aee4:	f000 fb56 	bl	800b594 <_sbrk_r>
 800aee8:	4581      	cmp	r9, r0
 800aeea:	d142      	bne.n	800af72 <_malloc_r+0xea>
 800aeec:	6821      	ldr	r1, [r4, #0]
 800aeee:	1a6d      	subs	r5, r5, r1
 800aef0:	4629      	mov	r1, r5
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7ff ffa6 	bl	800ae44 <sbrk_aligned>
 800aef8:	3001      	adds	r0, #1
 800aefa:	d03a      	beq.n	800af72 <_malloc_r+0xea>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	442b      	add	r3, r5
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	f8d8 3000 	ldr.w	r3, [r8]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	bb62      	cbnz	r2, 800af64 <_malloc_r+0xdc>
 800af0a:	f8c8 7000 	str.w	r7, [r8]
 800af0e:	e00f      	b.n	800af30 <_malloc_r+0xa8>
 800af10:	6822      	ldr	r2, [r4, #0]
 800af12:	1b52      	subs	r2, r2, r5
 800af14:	d420      	bmi.n	800af58 <_malloc_r+0xd0>
 800af16:	2a0b      	cmp	r2, #11
 800af18:	d917      	bls.n	800af4a <_malloc_r+0xc2>
 800af1a:	1961      	adds	r1, r4, r5
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	6025      	str	r5, [r4, #0]
 800af20:	bf18      	it	ne
 800af22:	6059      	strne	r1, [r3, #4]
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	bf08      	it	eq
 800af28:	f8c8 1000 	streq.w	r1, [r8]
 800af2c:	5162      	str	r2, [r4, r5]
 800af2e:	604b      	str	r3, [r1, #4]
 800af30:	4630      	mov	r0, r6
 800af32:	f000 f82f 	bl	800af94 <__malloc_unlock>
 800af36:	f104 000b 	add.w	r0, r4, #11
 800af3a:	1d23      	adds	r3, r4, #4
 800af3c:	f020 0007 	bic.w	r0, r0, #7
 800af40:	1ac2      	subs	r2, r0, r3
 800af42:	bf1c      	itt	ne
 800af44:	1a1b      	subne	r3, r3, r0
 800af46:	50a3      	strne	r3, [r4, r2]
 800af48:	e7af      	b.n	800aeaa <_malloc_r+0x22>
 800af4a:	6862      	ldr	r2, [r4, #4]
 800af4c:	42a3      	cmp	r3, r4
 800af4e:	bf0c      	ite	eq
 800af50:	f8c8 2000 	streq.w	r2, [r8]
 800af54:	605a      	strne	r2, [r3, #4]
 800af56:	e7eb      	b.n	800af30 <_malloc_r+0xa8>
 800af58:	4623      	mov	r3, r4
 800af5a:	6864      	ldr	r4, [r4, #4]
 800af5c:	e7ae      	b.n	800aebc <_malloc_r+0x34>
 800af5e:	463c      	mov	r4, r7
 800af60:	687f      	ldr	r7, [r7, #4]
 800af62:	e7b6      	b.n	800aed2 <_malloc_r+0x4a>
 800af64:	461a      	mov	r2, r3
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	42a3      	cmp	r3, r4
 800af6a:	d1fb      	bne.n	800af64 <_malloc_r+0xdc>
 800af6c:	2300      	movs	r3, #0
 800af6e:	6053      	str	r3, [r2, #4]
 800af70:	e7de      	b.n	800af30 <_malloc_r+0xa8>
 800af72:	230c      	movs	r3, #12
 800af74:	6033      	str	r3, [r6, #0]
 800af76:	4630      	mov	r0, r6
 800af78:	f000 f80c 	bl	800af94 <__malloc_unlock>
 800af7c:	e794      	b.n	800aea8 <_malloc_r+0x20>
 800af7e:	6005      	str	r5, [r0, #0]
 800af80:	e7d6      	b.n	800af30 <_malloc_r+0xa8>
 800af82:	bf00      	nop
 800af84:	200009b8 	.word	0x200009b8

0800af88 <__malloc_lock>:
 800af88:	4801      	ldr	r0, [pc, #4]	@ (800af90 <__malloc_lock+0x8>)
 800af8a:	f000 bb50 	b.w	800b62e <__retarget_lock_acquire_recursive>
 800af8e:	bf00      	nop
 800af90:	20000afc 	.word	0x20000afc

0800af94 <__malloc_unlock>:
 800af94:	4801      	ldr	r0, [pc, #4]	@ (800af9c <__malloc_unlock+0x8>)
 800af96:	f000 bb4b 	b.w	800b630 <__retarget_lock_release_recursive>
 800af9a:	bf00      	nop
 800af9c:	20000afc 	.word	0x20000afc

0800afa0 <std>:
 800afa0:	2300      	movs	r3, #0
 800afa2:	b510      	push	{r4, lr}
 800afa4:	4604      	mov	r4, r0
 800afa6:	e9c0 3300 	strd	r3, r3, [r0]
 800afaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afae:	6083      	str	r3, [r0, #8]
 800afb0:	8181      	strh	r1, [r0, #12]
 800afb2:	6643      	str	r3, [r0, #100]	@ 0x64
 800afb4:	81c2      	strh	r2, [r0, #14]
 800afb6:	6183      	str	r3, [r0, #24]
 800afb8:	4619      	mov	r1, r3
 800afba:	2208      	movs	r2, #8
 800afbc:	305c      	adds	r0, #92	@ 0x5c
 800afbe:	f000 faad 	bl	800b51c <memset>
 800afc2:	4b0d      	ldr	r3, [pc, #52]	@ (800aff8 <std+0x58>)
 800afc4:	6263      	str	r3, [r4, #36]	@ 0x24
 800afc6:	4b0d      	ldr	r3, [pc, #52]	@ (800affc <std+0x5c>)
 800afc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800afca:	4b0d      	ldr	r3, [pc, #52]	@ (800b000 <std+0x60>)
 800afcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800afce:	4b0d      	ldr	r3, [pc, #52]	@ (800b004 <std+0x64>)
 800afd0:	6323      	str	r3, [r4, #48]	@ 0x30
 800afd2:	4b0d      	ldr	r3, [pc, #52]	@ (800b008 <std+0x68>)
 800afd4:	6224      	str	r4, [r4, #32]
 800afd6:	429c      	cmp	r4, r3
 800afd8:	d006      	beq.n	800afe8 <std+0x48>
 800afda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800afde:	4294      	cmp	r4, r2
 800afe0:	d002      	beq.n	800afe8 <std+0x48>
 800afe2:	33d0      	adds	r3, #208	@ 0xd0
 800afe4:	429c      	cmp	r4, r3
 800afe6:	d105      	bne.n	800aff4 <std+0x54>
 800afe8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800afec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aff0:	f000 bb1c 	b.w	800b62c <__retarget_lock_init_recursive>
 800aff4:	bd10      	pop	{r4, pc}
 800aff6:	bf00      	nop
 800aff8:	0800b36d 	.word	0x0800b36d
 800affc:	0800b38f 	.word	0x0800b38f
 800b000:	0800b3c7 	.word	0x0800b3c7
 800b004:	0800b3eb 	.word	0x0800b3eb
 800b008:	200009bc 	.word	0x200009bc

0800b00c <stdio_exit_handler>:
 800b00c:	4a02      	ldr	r2, [pc, #8]	@ (800b018 <stdio_exit_handler+0xc>)
 800b00e:	4903      	ldr	r1, [pc, #12]	@ (800b01c <stdio_exit_handler+0x10>)
 800b010:	4803      	ldr	r0, [pc, #12]	@ (800b020 <stdio_exit_handler+0x14>)
 800b012:	f000 b869 	b.w	800b0e8 <_fwalk_sglue>
 800b016:	bf00      	nop
 800b018:	2000002c 	.word	0x2000002c
 800b01c:	0800bd89 	.word	0x0800bd89
 800b020:	2000003c 	.word	0x2000003c

0800b024 <cleanup_stdio>:
 800b024:	6841      	ldr	r1, [r0, #4]
 800b026:	4b0c      	ldr	r3, [pc, #48]	@ (800b058 <cleanup_stdio+0x34>)
 800b028:	4299      	cmp	r1, r3
 800b02a:	b510      	push	{r4, lr}
 800b02c:	4604      	mov	r4, r0
 800b02e:	d001      	beq.n	800b034 <cleanup_stdio+0x10>
 800b030:	f000 feaa 	bl	800bd88 <_fflush_r>
 800b034:	68a1      	ldr	r1, [r4, #8]
 800b036:	4b09      	ldr	r3, [pc, #36]	@ (800b05c <cleanup_stdio+0x38>)
 800b038:	4299      	cmp	r1, r3
 800b03a:	d002      	beq.n	800b042 <cleanup_stdio+0x1e>
 800b03c:	4620      	mov	r0, r4
 800b03e:	f000 fea3 	bl	800bd88 <_fflush_r>
 800b042:	68e1      	ldr	r1, [r4, #12]
 800b044:	4b06      	ldr	r3, [pc, #24]	@ (800b060 <cleanup_stdio+0x3c>)
 800b046:	4299      	cmp	r1, r3
 800b048:	d004      	beq.n	800b054 <cleanup_stdio+0x30>
 800b04a:	4620      	mov	r0, r4
 800b04c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b050:	f000 be9a 	b.w	800bd88 <_fflush_r>
 800b054:	bd10      	pop	{r4, pc}
 800b056:	bf00      	nop
 800b058:	200009bc 	.word	0x200009bc
 800b05c:	20000a24 	.word	0x20000a24
 800b060:	20000a8c 	.word	0x20000a8c

0800b064 <global_stdio_init.part.0>:
 800b064:	b510      	push	{r4, lr}
 800b066:	4b0b      	ldr	r3, [pc, #44]	@ (800b094 <global_stdio_init.part.0+0x30>)
 800b068:	4c0b      	ldr	r4, [pc, #44]	@ (800b098 <global_stdio_init.part.0+0x34>)
 800b06a:	4a0c      	ldr	r2, [pc, #48]	@ (800b09c <global_stdio_init.part.0+0x38>)
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	4620      	mov	r0, r4
 800b070:	2200      	movs	r2, #0
 800b072:	2104      	movs	r1, #4
 800b074:	f7ff ff94 	bl	800afa0 <std>
 800b078:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b07c:	2201      	movs	r2, #1
 800b07e:	2109      	movs	r1, #9
 800b080:	f7ff ff8e 	bl	800afa0 <std>
 800b084:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b088:	2202      	movs	r2, #2
 800b08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b08e:	2112      	movs	r1, #18
 800b090:	f7ff bf86 	b.w	800afa0 <std>
 800b094:	20000af4 	.word	0x20000af4
 800b098:	200009bc 	.word	0x200009bc
 800b09c:	0800b00d 	.word	0x0800b00d

0800b0a0 <__sfp_lock_acquire>:
 800b0a0:	4801      	ldr	r0, [pc, #4]	@ (800b0a8 <__sfp_lock_acquire+0x8>)
 800b0a2:	f000 bac4 	b.w	800b62e <__retarget_lock_acquire_recursive>
 800b0a6:	bf00      	nop
 800b0a8:	20000afd 	.word	0x20000afd

0800b0ac <__sfp_lock_release>:
 800b0ac:	4801      	ldr	r0, [pc, #4]	@ (800b0b4 <__sfp_lock_release+0x8>)
 800b0ae:	f000 babf 	b.w	800b630 <__retarget_lock_release_recursive>
 800b0b2:	bf00      	nop
 800b0b4:	20000afd 	.word	0x20000afd

0800b0b8 <__sinit>:
 800b0b8:	b510      	push	{r4, lr}
 800b0ba:	4604      	mov	r4, r0
 800b0bc:	f7ff fff0 	bl	800b0a0 <__sfp_lock_acquire>
 800b0c0:	6a23      	ldr	r3, [r4, #32]
 800b0c2:	b11b      	cbz	r3, 800b0cc <__sinit+0x14>
 800b0c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c8:	f7ff bff0 	b.w	800b0ac <__sfp_lock_release>
 800b0cc:	4b04      	ldr	r3, [pc, #16]	@ (800b0e0 <__sinit+0x28>)
 800b0ce:	6223      	str	r3, [r4, #32]
 800b0d0:	4b04      	ldr	r3, [pc, #16]	@ (800b0e4 <__sinit+0x2c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1f5      	bne.n	800b0c4 <__sinit+0xc>
 800b0d8:	f7ff ffc4 	bl	800b064 <global_stdio_init.part.0>
 800b0dc:	e7f2      	b.n	800b0c4 <__sinit+0xc>
 800b0de:	bf00      	nop
 800b0e0:	0800b025 	.word	0x0800b025
 800b0e4:	20000af4 	.word	0x20000af4

0800b0e8 <_fwalk_sglue>:
 800b0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	4688      	mov	r8, r1
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	2600      	movs	r6, #0
 800b0f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0f8:	f1b9 0901 	subs.w	r9, r9, #1
 800b0fc:	d505      	bpl.n	800b10a <_fwalk_sglue+0x22>
 800b0fe:	6824      	ldr	r4, [r4, #0]
 800b100:	2c00      	cmp	r4, #0
 800b102:	d1f7      	bne.n	800b0f4 <_fwalk_sglue+0xc>
 800b104:	4630      	mov	r0, r6
 800b106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10a:	89ab      	ldrh	r3, [r5, #12]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d907      	bls.n	800b120 <_fwalk_sglue+0x38>
 800b110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b114:	3301      	adds	r3, #1
 800b116:	d003      	beq.n	800b120 <_fwalk_sglue+0x38>
 800b118:	4629      	mov	r1, r5
 800b11a:	4638      	mov	r0, r7
 800b11c:	47c0      	blx	r8
 800b11e:	4306      	orrs	r6, r0
 800b120:	3568      	adds	r5, #104	@ 0x68
 800b122:	e7e9      	b.n	800b0f8 <_fwalk_sglue+0x10>

0800b124 <iprintf>:
 800b124:	b40f      	push	{r0, r1, r2, r3}
 800b126:	b507      	push	{r0, r1, r2, lr}
 800b128:	4906      	ldr	r1, [pc, #24]	@ (800b144 <iprintf+0x20>)
 800b12a:	ab04      	add	r3, sp, #16
 800b12c:	6808      	ldr	r0, [r1, #0]
 800b12e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b132:	6881      	ldr	r1, [r0, #8]
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	f000 faff 	bl	800b738 <_vfiprintf_r>
 800b13a:	b003      	add	sp, #12
 800b13c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b140:	b004      	add	sp, #16
 800b142:	4770      	bx	lr
 800b144:	20000038 	.word	0x20000038

0800b148 <_puts_r>:
 800b148:	6a03      	ldr	r3, [r0, #32]
 800b14a:	b570      	push	{r4, r5, r6, lr}
 800b14c:	6884      	ldr	r4, [r0, #8]
 800b14e:	4605      	mov	r5, r0
 800b150:	460e      	mov	r6, r1
 800b152:	b90b      	cbnz	r3, 800b158 <_puts_r+0x10>
 800b154:	f7ff ffb0 	bl	800b0b8 <__sinit>
 800b158:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b15a:	07db      	lsls	r3, r3, #31
 800b15c:	d405      	bmi.n	800b16a <_puts_r+0x22>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	0598      	lsls	r0, r3, #22
 800b162:	d402      	bmi.n	800b16a <_puts_r+0x22>
 800b164:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b166:	f000 fa62 	bl	800b62e <__retarget_lock_acquire_recursive>
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	0719      	lsls	r1, r3, #28
 800b16e:	d502      	bpl.n	800b176 <_puts_r+0x2e>
 800b170:	6923      	ldr	r3, [r4, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d135      	bne.n	800b1e2 <_puts_r+0x9a>
 800b176:	4621      	mov	r1, r4
 800b178:	4628      	mov	r0, r5
 800b17a:	f000 f979 	bl	800b470 <__swsetup_r>
 800b17e:	b380      	cbz	r0, 800b1e2 <_puts_r+0x9a>
 800b180:	f04f 35ff 	mov.w	r5, #4294967295
 800b184:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b186:	07da      	lsls	r2, r3, #31
 800b188:	d405      	bmi.n	800b196 <_puts_r+0x4e>
 800b18a:	89a3      	ldrh	r3, [r4, #12]
 800b18c:	059b      	lsls	r3, r3, #22
 800b18e:	d402      	bmi.n	800b196 <_puts_r+0x4e>
 800b190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b192:	f000 fa4d 	bl	800b630 <__retarget_lock_release_recursive>
 800b196:	4628      	mov	r0, r5
 800b198:	bd70      	pop	{r4, r5, r6, pc}
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	da04      	bge.n	800b1a8 <_puts_r+0x60>
 800b19e:	69a2      	ldr	r2, [r4, #24]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	dc17      	bgt.n	800b1d4 <_puts_r+0x8c>
 800b1a4:	290a      	cmp	r1, #10
 800b1a6:	d015      	beq.n	800b1d4 <_puts_r+0x8c>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	6022      	str	r2, [r4, #0]
 800b1ae:	7019      	strb	r1, [r3, #0]
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	60a3      	str	r3, [r4, #8]
 800b1ba:	2900      	cmp	r1, #0
 800b1bc:	d1ed      	bne.n	800b19a <_puts_r+0x52>
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	da11      	bge.n	800b1e6 <_puts_r+0x9e>
 800b1c2:	4622      	mov	r2, r4
 800b1c4:	210a      	movs	r1, #10
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	f000 f913 	bl	800b3f2 <__swbuf_r>
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d0d7      	beq.n	800b180 <_puts_r+0x38>
 800b1d0:	250a      	movs	r5, #10
 800b1d2:	e7d7      	b.n	800b184 <_puts_r+0x3c>
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f000 f90b 	bl	800b3f2 <__swbuf_r>
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d1e7      	bne.n	800b1b0 <_puts_r+0x68>
 800b1e0:	e7ce      	b.n	800b180 <_puts_r+0x38>
 800b1e2:	3e01      	subs	r6, #1
 800b1e4:	e7e4      	b.n	800b1b0 <_puts_r+0x68>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	6022      	str	r2, [r4, #0]
 800b1ec:	220a      	movs	r2, #10
 800b1ee:	701a      	strb	r2, [r3, #0]
 800b1f0:	e7ee      	b.n	800b1d0 <_puts_r+0x88>
	...

0800b1f4 <puts>:
 800b1f4:	4b02      	ldr	r3, [pc, #8]	@ (800b200 <puts+0xc>)
 800b1f6:	4601      	mov	r1, r0
 800b1f8:	6818      	ldr	r0, [r3, #0]
 800b1fa:	f7ff bfa5 	b.w	800b148 <_puts_r>
 800b1fe:	bf00      	nop
 800b200:	20000038 	.word	0x20000038

0800b204 <setvbuf>:
 800b204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b208:	461d      	mov	r5, r3
 800b20a:	4b57      	ldr	r3, [pc, #348]	@ (800b368 <setvbuf+0x164>)
 800b20c:	681f      	ldr	r7, [r3, #0]
 800b20e:	4604      	mov	r4, r0
 800b210:	460e      	mov	r6, r1
 800b212:	4690      	mov	r8, r2
 800b214:	b127      	cbz	r7, 800b220 <setvbuf+0x1c>
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	b913      	cbnz	r3, 800b220 <setvbuf+0x1c>
 800b21a:	4638      	mov	r0, r7
 800b21c:	f7ff ff4c 	bl	800b0b8 <__sinit>
 800b220:	f1b8 0f02 	cmp.w	r8, #2
 800b224:	d006      	beq.n	800b234 <setvbuf+0x30>
 800b226:	f1b8 0f01 	cmp.w	r8, #1
 800b22a:	f200 809a 	bhi.w	800b362 <setvbuf+0x15e>
 800b22e:	2d00      	cmp	r5, #0
 800b230:	f2c0 8097 	blt.w	800b362 <setvbuf+0x15e>
 800b234:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b236:	07d9      	lsls	r1, r3, #31
 800b238:	d405      	bmi.n	800b246 <setvbuf+0x42>
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	059a      	lsls	r2, r3, #22
 800b23e:	d402      	bmi.n	800b246 <setvbuf+0x42>
 800b240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b242:	f000 f9f4 	bl	800b62e <__retarget_lock_acquire_recursive>
 800b246:	4621      	mov	r1, r4
 800b248:	4638      	mov	r0, r7
 800b24a:	f000 fd9d 	bl	800bd88 <_fflush_r>
 800b24e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b250:	b141      	cbz	r1, 800b264 <setvbuf+0x60>
 800b252:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b256:	4299      	cmp	r1, r3
 800b258:	d002      	beq.n	800b260 <setvbuf+0x5c>
 800b25a:	4638      	mov	r0, r7
 800b25c:	f000 f9f8 	bl	800b650 <_free_r>
 800b260:	2300      	movs	r3, #0
 800b262:	6363      	str	r3, [r4, #52]	@ 0x34
 800b264:	2300      	movs	r3, #0
 800b266:	61a3      	str	r3, [r4, #24]
 800b268:	6063      	str	r3, [r4, #4]
 800b26a:	89a3      	ldrh	r3, [r4, #12]
 800b26c:	061b      	lsls	r3, r3, #24
 800b26e:	d503      	bpl.n	800b278 <setvbuf+0x74>
 800b270:	6921      	ldr	r1, [r4, #16]
 800b272:	4638      	mov	r0, r7
 800b274:	f000 f9ec 	bl	800b650 <_free_r>
 800b278:	89a3      	ldrh	r3, [r4, #12]
 800b27a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b27e:	f023 0303 	bic.w	r3, r3, #3
 800b282:	f1b8 0f02 	cmp.w	r8, #2
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	d061      	beq.n	800b34e <setvbuf+0x14a>
 800b28a:	ab01      	add	r3, sp, #4
 800b28c:	466a      	mov	r2, sp
 800b28e:	4621      	mov	r1, r4
 800b290:	4638      	mov	r0, r7
 800b292:	f000 fda1 	bl	800bdd8 <__swhatbuf_r>
 800b296:	89a3      	ldrh	r3, [r4, #12]
 800b298:	4318      	orrs	r0, r3
 800b29a:	81a0      	strh	r0, [r4, #12]
 800b29c:	bb2d      	cbnz	r5, 800b2ea <setvbuf+0xe6>
 800b29e:	9d00      	ldr	r5, [sp, #0]
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	f7ff fdbf 	bl	800ae24 <malloc>
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d152      	bne.n	800b352 <setvbuf+0x14e>
 800b2ac:	f8dd 9000 	ldr.w	r9, [sp]
 800b2b0:	45a9      	cmp	r9, r5
 800b2b2:	d140      	bne.n	800b336 <setvbuf+0x132>
 800b2b4:	f04f 35ff 	mov.w	r5, #4294967295
 800b2b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2bc:	f043 0202 	orr.w	r2, r3, #2
 800b2c0:	81a2      	strh	r2, [r4, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	60a2      	str	r2, [r4, #8]
 800b2c6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b2ca:	6022      	str	r2, [r4, #0]
 800b2cc:	6122      	str	r2, [r4, #16]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	6162      	str	r2, [r4, #20]
 800b2d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2d4:	07d6      	lsls	r6, r2, #31
 800b2d6:	d404      	bmi.n	800b2e2 <setvbuf+0xde>
 800b2d8:	0598      	lsls	r0, r3, #22
 800b2da:	d402      	bmi.n	800b2e2 <setvbuf+0xde>
 800b2dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2de:	f000 f9a7 	bl	800b630 <__retarget_lock_release_recursive>
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	b003      	add	sp, #12
 800b2e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2ea:	2e00      	cmp	r6, #0
 800b2ec:	d0d8      	beq.n	800b2a0 <setvbuf+0x9c>
 800b2ee:	6a3b      	ldr	r3, [r7, #32]
 800b2f0:	b913      	cbnz	r3, 800b2f8 <setvbuf+0xf4>
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	f7ff fee0 	bl	800b0b8 <__sinit>
 800b2f8:	f1b8 0f01 	cmp.w	r8, #1
 800b2fc:	bf08      	it	eq
 800b2fe:	89a3      	ldrheq	r3, [r4, #12]
 800b300:	6026      	str	r6, [r4, #0]
 800b302:	bf04      	itt	eq
 800b304:	f043 0301 	orreq.w	r3, r3, #1
 800b308:	81a3      	strheq	r3, [r4, #12]
 800b30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b30e:	f013 0208 	ands.w	r2, r3, #8
 800b312:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b316:	d01e      	beq.n	800b356 <setvbuf+0x152>
 800b318:	07d9      	lsls	r1, r3, #31
 800b31a:	bf41      	itttt	mi
 800b31c:	2200      	movmi	r2, #0
 800b31e:	426d      	negmi	r5, r5
 800b320:	60a2      	strmi	r2, [r4, #8]
 800b322:	61a5      	strmi	r5, [r4, #24]
 800b324:	bf58      	it	pl
 800b326:	60a5      	strpl	r5, [r4, #8]
 800b328:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b32a:	07d2      	lsls	r2, r2, #31
 800b32c:	d401      	bmi.n	800b332 <setvbuf+0x12e>
 800b32e:	059b      	lsls	r3, r3, #22
 800b330:	d513      	bpl.n	800b35a <setvbuf+0x156>
 800b332:	2500      	movs	r5, #0
 800b334:	e7d5      	b.n	800b2e2 <setvbuf+0xde>
 800b336:	4648      	mov	r0, r9
 800b338:	f7ff fd74 	bl	800ae24 <malloc>
 800b33c:	4606      	mov	r6, r0
 800b33e:	2800      	cmp	r0, #0
 800b340:	d0b8      	beq.n	800b2b4 <setvbuf+0xb0>
 800b342:	89a3      	ldrh	r3, [r4, #12]
 800b344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b348:	81a3      	strh	r3, [r4, #12]
 800b34a:	464d      	mov	r5, r9
 800b34c:	e7cf      	b.n	800b2ee <setvbuf+0xea>
 800b34e:	2500      	movs	r5, #0
 800b350:	e7b2      	b.n	800b2b8 <setvbuf+0xb4>
 800b352:	46a9      	mov	r9, r5
 800b354:	e7f5      	b.n	800b342 <setvbuf+0x13e>
 800b356:	60a2      	str	r2, [r4, #8]
 800b358:	e7e6      	b.n	800b328 <setvbuf+0x124>
 800b35a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b35c:	f000 f968 	bl	800b630 <__retarget_lock_release_recursive>
 800b360:	e7e7      	b.n	800b332 <setvbuf+0x12e>
 800b362:	f04f 35ff 	mov.w	r5, #4294967295
 800b366:	e7bc      	b.n	800b2e2 <setvbuf+0xde>
 800b368:	20000038 	.word	0x20000038

0800b36c <__sread>:
 800b36c:	b510      	push	{r4, lr}
 800b36e:	460c      	mov	r4, r1
 800b370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b374:	f000 f8fc 	bl	800b570 <_read_r>
 800b378:	2800      	cmp	r0, #0
 800b37a:	bfab      	itete	ge
 800b37c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b37e:	89a3      	ldrhlt	r3, [r4, #12]
 800b380:	181b      	addge	r3, r3, r0
 800b382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b386:	bfac      	ite	ge
 800b388:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b38a:	81a3      	strhlt	r3, [r4, #12]
 800b38c:	bd10      	pop	{r4, pc}

0800b38e <__swrite>:
 800b38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b392:	461f      	mov	r7, r3
 800b394:	898b      	ldrh	r3, [r1, #12]
 800b396:	05db      	lsls	r3, r3, #23
 800b398:	4605      	mov	r5, r0
 800b39a:	460c      	mov	r4, r1
 800b39c:	4616      	mov	r6, r2
 800b39e:	d505      	bpl.n	800b3ac <__swrite+0x1e>
 800b3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f000 f8d0 	bl	800b54c <_lseek_r>
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b3b6:	81a3      	strh	r3, [r4, #12]
 800b3b8:	4632      	mov	r2, r6
 800b3ba:	463b      	mov	r3, r7
 800b3bc:	4628      	mov	r0, r5
 800b3be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c2:	f000 b8f7 	b.w	800b5b4 <_write_r>

0800b3c6 <__sseek>:
 800b3c6:	b510      	push	{r4, lr}
 800b3c8:	460c      	mov	r4, r1
 800b3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ce:	f000 f8bd 	bl	800b54c <_lseek_r>
 800b3d2:	1c43      	adds	r3, r0, #1
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	bf15      	itete	ne
 800b3d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b3da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b3de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b3e2:	81a3      	strheq	r3, [r4, #12]
 800b3e4:	bf18      	it	ne
 800b3e6:	81a3      	strhne	r3, [r4, #12]
 800b3e8:	bd10      	pop	{r4, pc}

0800b3ea <__sclose>:
 800b3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ee:	f000 b89d 	b.w	800b52c <_close_r>

0800b3f2 <__swbuf_r>:
 800b3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f4:	460e      	mov	r6, r1
 800b3f6:	4614      	mov	r4, r2
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	b118      	cbz	r0, 800b404 <__swbuf_r+0x12>
 800b3fc:	6a03      	ldr	r3, [r0, #32]
 800b3fe:	b90b      	cbnz	r3, 800b404 <__swbuf_r+0x12>
 800b400:	f7ff fe5a 	bl	800b0b8 <__sinit>
 800b404:	69a3      	ldr	r3, [r4, #24]
 800b406:	60a3      	str	r3, [r4, #8]
 800b408:	89a3      	ldrh	r3, [r4, #12]
 800b40a:	071a      	lsls	r2, r3, #28
 800b40c:	d501      	bpl.n	800b412 <__swbuf_r+0x20>
 800b40e:	6923      	ldr	r3, [r4, #16]
 800b410:	b943      	cbnz	r3, 800b424 <__swbuf_r+0x32>
 800b412:	4621      	mov	r1, r4
 800b414:	4628      	mov	r0, r5
 800b416:	f000 f82b 	bl	800b470 <__swsetup_r>
 800b41a:	b118      	cbz	r0, 800b424 <__swbuf_r+0x32>
 800b41c:	f04f 37ff 	mov.w	r7, #4294967295
 800b420:	4638      	mov	r0, r7
 800b422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	6922      	ldr	r2, [r4, #16]
 800b428:	1a98      	subs	r0, r3, r2
 800b42a:	6963      	ldr	r3, [r4, #20]
 800b42c:	b2f6      	uxtb	r6, r6
 800b42e:	4283      	cmp	r3, r0
 800b430:	4637      	mov	r7, r6
 800b432:	dc05      	bgt.n	800b440 <__swbuf_r+0x4e>
 800b434:	4621      	mov	r1, r4
 800b436:	4628      	mov	r0, r5
 800b438:	f000 fca6 	bl	800bd88 <_fflush_r>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d1ed      	bne.n	800b41c <__swbuf_r+0x2a>
 800b440:	68a3      	ldr	r3, [r4, #8]
 800b442:	3b01      	subs	r3, #1
 800b444:	60a3      	str	r3, [r4, #8]
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	1c5a      	adds	r2, r3, #1
 800b44a:	6022      	str	r2, [r4, #0]
 800b44c:	701e      	strb	r6, [r3, #0]
 800b44e:	6962      	ldr	r2, [r4, #20]
 800b450:	1c43      	adds	r3, r0, #1
 800b452:	429a      	cmp	r2, r3
 800b454:	d004      	beq.n	800b460 <__swbuf_r+0x6e>
 800b456:	89a3      	ldrh	r3, [r4, #12]
 800b458:	07db      	lsls	r3, r3, #31
 800b45a:	d5e1      	bpl.n	800b420 <__swbuf_r+0x2e>
 800b45c:	2e0a      	cmp	r6, #10
 800b45e:	d1df      	bne.n	800b420 <__swbuf_r+0x2e>
 800b460:	4621      	mov	r1, r4
 800b462:	4628      	mov	r0, r5
 800b464:	f000 fc90 	bl	800bd88 <_fflush_r>
 800b468:	2800      	cmp	r0, #0
 800b46a:	d0d9      	beq.n	800b420 <__swbuf_r+0x2e>
 800b46c:	e7d6      	b.n	800b41c <__swbuf_r+0x2a>
	...

0800b470 <__swsetup_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4b29      	ldr	r3, [pc, #164]	@ (800b518 <__swsetup_r+0xa8>)
 800b474:	4605      	mov	r5, r0
 800b476:	6818      	ldr	r0, [r3, #0]
 800b478:	460c      	mov	r4, r1
 800b47a:	b118      	cbz	r0, 800b484 <__swsetup_r+0x14>
 800b47c:	6a03      	ldr	r3, [r0, #32]
 800b47e:	b90b      	cbnz	r3, 800b484 <__swsetup_r+0x14>
 800b480:	f7ff fe1a 	bl	800b0b8 <__sinit>
 800b484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b488:	0719      	lsls	r1, r3, #28
 800b48a:	d422      	bmi.n	800b4d2 <__swsetup_r+0x62>
 800b48c:	06da      	lsls	r2, r3, #27
 800b48e:	d407      	bmi.n	800b4a0 <__swsetup_r+0x30>
 800b490:	2209      	movs	r2, #9
 800b492:	602a      	str	r2, [r5, #0]
 800b494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b498:	81a3      	strh	r3, [r4, #12]
 800b49a:	f04f 30ff 	mov.w	r0, #4294967295
 800b49e:	e033      	b.n	800b508 <__swsetup_r+0x98>
 800b4a0:	0758      	lsls	r0, r3, #29
 800b4a2:	d512      	bpl.n	800b4ca <__swsetup_r+0x5a>
 800b4a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4a6:	b141      	cbz	r1, 800b4ba <__swsetup_r+0x4a>
 800b4a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4ac:	4299      	cmp	r1, r3
 800b4ae:	d002      	beq.n	800b4b6 <__swsetup_r+0x46>
 800b4b0:	4628      	mov	r0, r5
 800b4b2:	f000 f8cd 	bl	800b650 <_free_r>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b4c0:	81a3      	strh	r3, [r4, #12]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	6063      	str	r3, [r4, #4]
 800b4c6:	6923      	ldr	r3, [r4, #16]
 800b4c8:	6023      	str	r3, [r4, #0]
 800b4ca:	89a3      	ldrh	r3, [r4, #12]
 800b4cc:	f043 0308 	orr.w	r3, r3, #8
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	6923      	ldr	r3, [r4, #16]
 800b4d4:	b94b      	cbnz	r3, 800b4ea <__swsetup_r+0x7a>
 800b4d6:	89a3      	ldrh	r3, [r4, #12]
 800b4d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b4dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4e0:	d003      	beq.n	800b4ea <__swsetup_r+0x7a>
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	f000 fc9d 	bl	800be24 <__smakebuf_r>
 800b4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ee:	f013 0201 	ands.w	r2, r3, #1
 800b4f2:	d00a      	beq.n	800b50a <__swsetup_r+0x9a>
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	60a2      	str	r2, [r4, #8]
 800b4f8:	6962      	ldr	r2, [r4, #20]
 800b4fa:	4252      	negs	r2, r2
 800b4fc:	61a2      	str	r2, [r4, #24]
 800b4fe:	6922      	ldr	r2, [r4, #16]
 800b500:	b942      	cbnz	r2, 800b514 <__swsetup_r+0xa4>
 800b502:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b506:	d1c5      	bne.n	800b494 <__swsetup_r+0x24>
 800b508:	bd38      	pop	{r3, r4, r5, pc}
 800b50a:	0799      	lsls	r1, r3, #30
 800b50c:	bf58      	it	pl
 800b50e:	6962      	ldrpl	r2, [r4, #20]
 800b510:	60a2      	str	r2, [r4, #8]
 800b512:	e7f4      	b.n	800b4fe <__swsetup_r+0x8e>
 800b514:	2000      	movs	r0, #0
 800b516:	e7f7      	b.n	800b508 <__swsetup_r+0x98>
 800b518:	20000038 	.word	0x20000038

0800b51c <memset>:
 800b51c:	4402      	add	r2, r0
 800b51e:	4603      	mov	r3, r0
 800b520:	4293      	cmp	r3, r2
 800b522:	d100      	bne.n	800b526 <memset+0xa>
 800b524:	4770      	bx	lr
 800b526:	f803 1b01 	strb.w	r1, [r3], #1
 800b52a:	e7f9      	b.n	800b520 <memset+0x4>

0800b52c <_close_r>:
 800b52c:	b538      	push	{r3, r4, r5, lr}
 800b52e:	4d06      	ldr	r5, [pc, #24]	@ (800b548 <_close_r+0x1c>)
 800b530:	2300      	movs	r3, #0
 800b532:	4604      	mov	r4, r0
 800b534:	4608      	mov	r0, r1
 800b536:	602b      	str	r3, [r5, #0]
 800b538:	f7f7 f971 	bl	800281e <_close>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d102      	bne.n	800b546 <_close_r+0x1a>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b103      	cbz	r3, 800b546 <_close_r+0x1a>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	20000af8 	.word	0x20000af8

0800b54c <_lseek_r>:
 800b54c:	b538      	push	{r3, r4, r5, lr}
 800b54e:	4d07      	ldr	r5, [pc, #28]	@ (800b56c <_lseek_r+0x20>)
 800b550:	4604      	mov	r4, r0
 800b552:	4608      	mov	r0, r1
 800b554:	4611      	mov	r1, r2
 800b556:	2200      	movs	r2, #0
 800b558:	602a      	str	r2, [r5, #0]
 800b55a:	461a      	mov	r2, r3
 800b55c:	f7f7 f986 	bl	800286c <_lseek>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	d102      	bne.n	800b56a <_lseek_r+0x1e>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	b103      	cbz	r3, 800b56a <_lseek_r+0x1e>
 800b568:	6023      	str	r3, [r4, #0]
 800b56a:	bd38      	pop	{r3, r4, r5, pc}
 800b56c:	20000af8 	.word	0x20000af8

0800b570 <_read_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	4d07      	ldr	r5, [pc, #28]	@ (800b590 <_read_r+0x20>)
 800b574:	4604      	mov	r4, r0
 800b576:	4608      	mov	r0, r1
 800b578:	4611      	mov	r1, r2
 800b57a:	2200      	movs	r2, #0
 800b57c:	602a      	str	r2, [r5, #0]
 800b57e:	461a      	mov	r2, r3
 800b580:	f7f7 f930 	bl	80027e4 <_read>
 800b584:	1c43      	adds	r3, r0, #1
 800b586:	d102      	bne.n	800b58e <_read_r+0x1e>
 800b588:	682b      	ldr	r3, [r5, #0]
 800b58a:	b103      	cbz	r3, 800b58e <_read_r+0x1e>
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
 800b590:	20000af8 	.word	0x20000af8

0800b594 <_sbrk_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d06      	ldr	r5, [pc, #24]	@ (800b5b0 <_sbrk_r+0x1c>)
 800b598:	2300      	movs	r3, #0
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	f7f7 f972 	bl	8002888 <_sbrk>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_sbrk_r+0x1a>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_sbrk_r+0x1a>
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	20000af8 	.word	0x20000af8

0800b5b4 <_write_r>:
 800b5b4:	b538      	push	{r3, r4, r5, lr}
 800b5b6:	4d07      	ldr	r5, [pc, #28]	@ (800b5d4 <_write_r+0x20>)
 800b5b8:	4604      	mov	r4, r0
 800b5ba:	4608      	mov	r0, r1
 800b5bc:	4611      	mov	r1, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	602a      	str	r2, [r5, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f7f5 fa7c 	bl	8000ac0 <_write>
 800b5c8:	1c43      	adds	r3, r0, #1
 800b5ca:	d102      	bne.n	800b5d2 <_write_r+0x1e>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	b103      	cbz	r3, 800b5d2 <_write_r+0x1e>
 800b5d0:	6023      	str	r3, [r4, #0]
 800b5d2:	bd38      	pop	{r3, r4, r5, pc}
 800b5d4:	20000af8 	.word	0x20000af8

0800b5d8 <__errno>:
 800b5d8:	4b01      	ldr	r3, [pc, #4]	@ (800b5e0 <__errno+0x8>)
 800b5da:	6818      	ldr	r0, [r3, #0]
 800b5dc:	4770      	bx	lr
 800b5de:	bf00      	nop
 800b5e0:	20000038 	.word	0x20000038

0800b5e4 <__libc_init_array>:
 800b5e4:	b570      	push	{r4, r5, r6, lr}
 800b5e6:	4d0d      	ldr	r5, [pc, #52]	@ (800b61c <__libc_init_array+0x38>)
 800b5e8:	4c0d      	ldr	r4, [pc, #52]	@ (800b620 <__libc_init_array+0x3c>)
 800b5ea:	1b64      	subs	r4, r4, r5
 800b5ec:	10a4      	asrs	r4, r4, #2
 800b5ee:	2600      	movs	r6, #0
 800b5f0:	42a6      	cmp	r6, r4
 800b5f2:	d109      	bne.n	800b608 <__libc_init_array+0x24>
 800b5f4:	4d0b      	ldr	r5, [pc, #44]	@ (800b624 <__libc_init_array+0x40>)
 800b5f6:	4c0c      	ldr	r4, [pc, #48]	@ (800b628 <__libc_init_array+0x44>)
 800b5f8:	f000 fc72 	bl	800bee0 <_init>
 800b5fc:	1b64      	subs	r4, r4, r5
 800b5fe:	10a4      	asrs	r4, r4, #2
 800b600:	2600      	movs	r6, #0
 800b602:	42a6      	cmp	r6, r4
 800b604:	d105      	bne.n	800b612 <__libc_init_array+0x2e>
 800b606:	bd70      	pop	{r4, r5, r6, pc}
 800b608:	f855 3b04 	ldr.w	r3, [r5], #4
 800b60c:	4798      	blx	r3
 800b60e:	3601      	adds	r6, #1
 800b610:	e7ee      	b.n	800b5f0 <__libc_init_array+0xc>
 800b612:	f855 3b04 	ldr.w	r3, [r5], #4
 800b616:	4798      	blx	r3
 800b618:	3601      	adds	r6, #1
 800b61a:	e7f2      	b.n	800b602 <__libc_init_array+0x1e>
 800b61c:	0800c1a8 	.word	0x0800c1a8
 800b620:	0800c1a8 	.word	0x0800c1a8
 800b624:	0800c1a8 	.word	0x0800c1a8
 800b628:	0800c1ac 	.word	0x0800c1ac

0800b62c <__retarget_lock_init_recursive>:
 800b62c:	4770      	bx	lr

0800b62e <__retarget_lock_acquire_recursive>:
 800b62e:	4770      	bx	lr

0800b630 <__retarget_lock_release_recursive>:
 800b630:	4770      	bx	lr

0800b632 <memcpy>:
 800b632:	440a      	add	r2, r1
 800b634:	4291      	cmp	r1, r2
 800b636:	f100 33ff 	add.w	r3, r0, #4294967295
 800b63a:	d100      	bne.n	800b63e <memcpy+0xc>
 800b63c:	4770      	bx	lr
 800b63e:	b510      	push	{r4, lr}
 800b640:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b644:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b648:	4291      	cmp	r1, r2
 800b64a:	d1f9      	bne.n	800b640 <memcpy+0xe>
 800b64c:	bd10      	pop	{r4, pc}
	...

0800b650 <_free_r>:
 800b650:	b538      	push	{r3, r4, r5, lr}
 800b652:	4605      	mov	r5, r0
 800b654:	2900      	cmp	r1, #0
 800b656:	d041      	beq.n	800b6dc <_free_r+0x8c>
 800b658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b65c:	1f0c      	subs	r4, r1, #4
 800b65e:	2b00      	cmp	r3, #0
 800b660:	bfb8      	it	lt
 800b662:	18e4      	addlt	r4, r4, r3
 800b664:	f7ff fc90 	bl	800af88 <__malloc_lock>
 800b668:	4a1d      	ldr	r2, [pc, #116]	@ (800b6e0 <_free_r+0x90>)
 800b66a:	6813      	ldr	r3, [r2, #0]
 800b66c:	b933      	cbnz	r3, 800b67c <_free_r+0x2c>
 800b66e:	6063      	str	r3, [r4, #4]
 800b670:	6014      	str	r4, [r2, #0]
 800b672:	4628      	mov	r0, r5
 800b674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b678:	f7ff bc8c 	b.w	800af94 <__malloc_unlock>
 800b67c:	42a3      	cmp	r3, r4
 800b67e:	d908      	bls.n	800b692 <_free_r+0x42>
 800b680:	6820      	ldr	r0, [r4, #0]
 800b682:	1821      	adds	r1, r4, r0
 800b684:	428b      	cmp	r3, r1
 800b686:	bf01      	itttt	eq
 800b688:	6819      	ldreq	r1, [r3, #0]
 800b68a:	685b      	ldreq	r3, [r3, #4]
 800b68c:	1809      	addeq	r1, r1, r0
 800b68e:	6021      	streq	r1, [r4, #0]
 800b690:	e7ed      	b.n	800b66e <_free_r+0x1e>
 800b692:	461a      	mov	r2, r3
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	b10b      	cbz	r3, 800b69c <_free_r+0x4c>
 800b698:	42a3      	cmp	r3, r4
 800b69a:	d9fa      	bls.n	800b692 <_free_r+0x42>
 800b69c:	6811      	ldr	r1, [r2, #0]
 800b69e:	1850      	adds	r0, r2, r1
 800b6a0:	42a0      	cmp	r0, r4
 800b6a2:	d10b      	bne.n	800b6bc <_free_r+0x6c>
 800b6a4:	6820      	ldr	r0, [r4, #0]
 800b6a6:	4401      	add	r1, r0
 800b6a8:	1850      	adds	r0, r2, r1
 800b6aa:	4283      	cmp	r3, r0
 800b6ac:	6011      	str	r1, [r2, #0]
 800b6ae:	d1e0      	bne.n	800b672 <_free_r+0x22>
 800b6b0:	6818      	ldr	r0, [r3, #0]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	6053      	str	r3, [r2, #4]
 800b6b6:	4408      	add	r0, r1
 800b6b8:	6010      	str	r0, [r2, #0]
 800b6ba:	e7da      	b.n	800b672 <_free_r+0x22>
 800b6bc:	d902      	bls.n	800b6c4 <_free_r+0x74>
 800b6be:	230c      	movs	r3, #12
 800b6c0:	602b      	str	r3, [r5, #0]
 800b6c2:	e7d6      	b.n	800b672 <_free_r+0x22>
 800b6c4:	6820      	ldr	r0, [r4, #0]
 800b6c6:	1821      	adds	r1, r4, r0
 800b6c8:	428b      	cmp	r3, r1
 800b6ca:	bf04      	itt	eq
 800b6cc:	6819      	ldreq	r1, [r3, #0]
 800b6ce:	685b      	ldreq	r3, [r3, #4]
 800b6d0:	6063      	str	r3, [r4, #4]
 800b6d2:	bf04      	itt	eq
 800b6d4:	1809      	addeq	r1, r1, r0
 800b6d6:	6021      	streq	r1, [r4, #0]
 800b6d8:	6054      	str	r4, [r2, #4]
 800b6da:	e7ca      	b.n	800b672 <_free_r+0x22>
 800b6dc:	bd38      	pop	{r3, r4, r5, pc}
 800b6de:	bf00      	nop
 800b6e0:	200009b8 	.word	0x200009b8

0800b6e4 <__sfputc_r>:
 800b6e4:	6893      	ldr	r3, [r2, #8]
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	b410      	push	{r4}
 800b6ec:	6093      	str	r3, [r2, #8]
 800b6ee:	da08      	bge.n	800b702 <__sfputc_r+0x1e>
 800b6f0:	6994      	ldr	r4, [r2, #24]
 800b6f2:	42a3      	cmp	r3, r4
 800b6f4:	db01      	blt.n	800b6fa <__sfputc_r+0x16>
 800b6f6:	290a      	cmp	r1, #10
 800b6f8:	d103      	bne.n	800b702 <__sfputc_r+0x1e>
 800b6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6fe:	f7ff be78 	b.w	800b3f2 <__swbuf_r>
 800b702:	6813      	ldr	r3, [r2, #0]
 800b704:	1c58      	adds	r0, r3, #1
 800b706:	6010      	str	r0, [r2, #0]
 800b708:	7019      	strb	r1, [r3, #0]
 800b70a:	4608      	mov	r0, r1
 800b70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <__sfputs_r>:
 800b712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b714:	4606      	mov	r6, r0
 800b716:	460f      	mov	r7, r1
 800b718:	4614      	mov	r4, r2
 800b71a:	18d5      	adds	r5, r2, r3
 800b71c:	42ac      	cmp	r4, r5
 800b71e:	d101      	bne.n	800b724 <__sfputs_r+0x12>
 800b720:	2000      	movs	r0, #0
 800b722:	e007      	b.n	800b734 <__sfputs_r+0x22>
 800b724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b728:	463a      	mov	r2, r7
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7ff ffda 	bl	800b6e4 <__sfputc_r>
 800b730:	1c43      	adds	r3, r0, #1
 800b732:	d1f3      	bne.n	800b71c <__sfputs_r+0xa>
 800b734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b738 <_vfiprintf_r>:
 800b738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73c:	460d      	mov	r5, r1
 800b73e:	b09d      	sub	sp, #116	@ 0x74
 800b740:	4614      	mov	r4, r2
 800b742:	4698      	mov	r8, r3
 800b744:	4606      	mov	r6, r0
 800b746:	b118      	cbz	r0, 800b750 <_vfiprintf_r+0x18>
 800b748:	6a03      	ldr	r3, [r0, #32]
 800b74a:	b90b      	cbnz	r3, 800b750 <_vfiprintf_r+0x18>
 800b74c:	f7ff fcb4 	bl	800b0b8 <__sinit>
 800b750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b752:	07d9      	lsls	r1, r3, #31
 800b754:	d405      	bmi.n	800b762 <_vfiprintf_r+0x2a>
 800b756:	89ab      	ldrh	r3, [r5, #12]
 800b758:	059a      	lsls	r2, r3, #22
 800b75a:	d402      	bmi.n	800b762 <_vfiprintf_r+0x2a>
 800b75c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b75e:	f7ff ff66 	bl	800b62e <__retarget_lock_acquire_recursive>
 800b762:	89ab      	ldrh	r3, [r5, #12]
 800b764:	071b      	lsls	r3, r3, #28
 800b766:	d501      	bpl.n	800b76c <_vfiprintf_r+0x34>
 800b768:	692b      	ldr	r3, [r5, #16]
 800b76a:	b99b      	cbnz	r3, 800b794 <_vfiprintf_r+0x5c>
 800b76c:	4629      	mov	r1, r5
 800b76e:	4630      	mov	r0, r6
 800b770:	f7ff fe7e 	bl	800b470 <__swsetup_r>
 800b774:	b170      	cbz	r0, 800b794 <_vfiprintf_r+0x5c>
 800b776:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b778:	07dc      	lsls	r4, r3, #31
 800b77a:	d504      	bpl.n	800b786 <_vfiprintf_r+0x4e>
 800b77c:	f04f 30ff 	mov.w	r0, #4294967295
 800b780:	b01d      	add	sp, #116	@ 0x74
 800b782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b786:	89ab      	ldrh	r3, [r5, #12]
 800b788:	0598      	lsls	r0, r3, #22
 800b78a:	d4f7      	bmi.n	800b77c <_vfiprintf_r+0x44>
 800b78c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b78e:	f7ff ff4f 	bl	800b630 <__retarget_lock_release_recursive>
 800b792:	e7f3      	b.n	800b77c <_vfiprintf_r+0x44>
 800b794:	2300      	movs	r3, #0
 800b796:	9309      	str	r3, [sp, #36]	@ 0x24
 800b798:	2320      	movs	r3, #32
 800b79a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7a2:	2330      	movs	r3, #48	@ 0x30
 800b7a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b954 <_vfiprintf_r+0x21c>
 800b7a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b7ac:	f04f 0901 	mov.w	r9, #1
 800b7b0:	4623      	mov	r3, r4
 800b7b2:	469a      	mov	sl, r3
 800b7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7b8:	b10a      	cbz	r2, 800b7be <_vfiprintf_r+0x86>
 800b7ba:	2a25      	cmp	r2, #37	@ 0x25
 800b7bc:	d1f9      	bne.n	800b7b2 <_vfiprintf_r+0x7a>
 800b7be:	ebba 0b04 	subs.w	fp, sl, r4
 800b7c2:	d00b      	beq.n	800b7dc <_vfiprintf_r+0xa4>
 800b7c4:	465b      	mov	r3, fp
 800b7c6:	4622      	mov	r2, r4
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7ff ffa1 	bl	800b712 <__sfputs_r>
 800b7d0:	3001      	adds	r0, #1
 800b7d2:	f000 80a7 	beq.w	800b924 <_vfiprintf_r+0x1ec>
 800b7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7d8:	445a      	add	r2, fp
 800b7da:	9209      	str	r2, [sp, #36]	@ 0x24
 800b7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 809f 	beq.w	800b924 <_vfiprintf_r+0x1ec>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7f0:	f10a 0a01 	add.w	sl, sl, #1
 800b7f4:	9304      	str	r3, [sp, #16]
 800b7f6:	9307      	str	r3, [sp, #28]
 800b7f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b7fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b7fe:	4654      	mov	r4, sl
 800b800:	2205      	movs	r2, #5
 800b802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b806:	4853      	ldr	r0, [pc, #332]	@ (800b954 <_vfiprintf_r+0x21c>)
 800b808:	f7f4 fce2 	bl	80001d0 <memchr>
 800b80c:	9a04      	ldr	r2, [sp, #16]
 800b80e:	b9d8      	cbnz	r0, 800b848 <_vfiprintf_r+0x110>
 800b810:	06d1      	lsls	r1, r2, #27
 800b812:	bf44      	itt	mi
 800b814:	2320      	movmi	r3, #32
 800b816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b81a:	0713      	lsls	r3, r2, #28
 800b81c:	bf44      	itt	mi
 800b81e:	232b      	movmi	r3, #43	@ 0x2b
 800b820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b824:	f89a 3000 	ldrb.w	r3, [sl]
 800b828:	2b2a      	cmp	r3, #42	@ 0x2a
 800b82a:	d015      	beq.n	800b858 <_vfiprintf_r+0x120>
 800b82c:	9a07      	ldr	r2, [sp, #28]
 800b82e:	4654      	mov	r4, sl
 800b830:	2000      	movs	r0, #0
 800b832:	f04f 0c0a 	mov.w	ip, #10
 800b836:	4621      	mov	r1, r4
 800b838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b83c:	3b30      	subs	r3, #48	@ 0x30
 800b83e:	2b09      	cmp	r3, #9
 800b840:	d94b      	bls.n	800b8da <_vfiprintf_r+0x1a2>
 800b842:	b1b0      	cbz	r0, 800b872 <_vfiprintf_r+0x13a>
 800b844:	9207      	str	r2, [sp, #28]
 800b846:	e014      	b.n	800b872 <_vfiprintf_r+0x13a>
 800b848:	eba0 0308 	sub.w	r3, r0, r8
 800b84c:	fa09 f303 	lsl.w	r3, r9, r3
 800b850:	4313      	orrs	r3, r2
 800b852:	9304      	str	r3, [sp, #16]
 800b854:	46a2      	mov	sl, r4
 800b856:	e7d2      	b.n	800b7fe <_vfiprintf_r+0xc6>
 800b858:	9b03      	ldr	r3, [sp, #12]
 800b85a:	1d19      	adds	r1, r3, #4
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	9103      	str	r1, [sp, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	bfbb      	ittet	lt
 800b864:	425b      	neglt	r3, r3
 800b866:	f042 0202 	orrlt.w	r2, r2, #2
 800b86a:	9307      	strge	r3, [sp, #28]
 800b86c:	9307      	strlt	r3, [sp, #28]
 800b86e:	bfb8      	it	lt
 800b870:	9204      	strlt	r2, [sp, #16]
 800b872:	7823      	ldrb	r3, [r4, #0]
 800b874:	2b2e      	cmp	r3, #46	@ 0x2e
 800b876:	d10a      	bne.n	800b88e <_vfiprintf_r+0x156>
 800b878:	7863      	ldrb	r3, [r4, #1]
 800b87a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b87c:	d132      	bne.n	800b8e4 <_vfiprintf_r+0x1ac>
 800b87e:	9b03      	ldr	r3, [sp, #12]
 800b880:	1d1a      	adds	r2, r3, #4
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	9203      	str	r2, [sp, #12]
 800b886:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b88a:	3402      	adds	r4, #2
 800b88c:	9305      	str	r3, [sp, #20]
 800b88e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b964 <_vfiprintf_r+0x22c>
 800b892:	7821      	ldrb	r1, [r4, #0]
 800b894:	2203      	movs	r2, #3
 800b896:	4650      	mov	r0, sl
 800b898:	f7f4 fc9a 	bl	80001d0 <memchr>
 800b89c:	b138      	cbz	r0, 800b8ae <_vfiprintf_r+0x176>
 800b89e:	9b04      	ldr	r3, [sp, #16]
 800b8a0:	eba0 000a 	sub.w	r0, r0, sl
 800b8a4:	2240      	movs	r2, #64	@ 0x40
 800b8a6:	4082      	lsls	r2, r0
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	3401      	adds	r4, #1
 800b8ac:	9304      	str	r3, [sp, #16]
 800b8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b2:	4829      	ldr	r0, [pc, #164]	@ (800b958 <_vfiprintf_r+0x220>)
 800b8b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b8b8:	2206      	movs	r2, #6
 800b8ba:	f7f4 fc89 	bl	80001d0 <memchr>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d03f      	beq.n	800b942 <_vfiprintf_r+0x20a>
 800b8c2:	4b26      	ldr	r3, [pc, #152]	@ (800b95c <_vfiprintf_r+0x224>)
 800b8c4:	bb1b      	cbnz	r3, 800b90e <_vfiprintf_r+0x1d6>
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	3307      	adds	r3, #7
 800b8ca:	f023 0307 	bic.w	r3, r3, #7
 800b8ce:	3308      	adds	r3, #8
 800b8d0:	9303      	str	r3, [sp, #12]
 800b8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8d4:	443b      	add	r3, r7
 800b8d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8d8:	e76a      	b.n	800b7b0 <_vfiprintf_r+0x78>
 800b8da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8de:	460c      	mov	r4, r1
 800b8e0:	2001      	movs	r0, #1
 800b8e2:	e7a8      	b.n	800b836 <_vfiprintf_r+0xfe>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	3401      	adds	r4, #1
 800b8e8:	9305      	str	r3, [sp, #20]
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	f04f 0c0a 	mov.w	ip, #10
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8f6:	3a30      	subs	r2, #48	@ 0x30
 800b8f8:	2a09      	cmp	r2, #9
 800b8fa:	d903      	bls.n	800b904 <_vfiprintf_r+0x1cc>
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d0c6      	beq.n	800b88e <_vfiprintf_r+0x156>
 800b900:	9105      	str	r1, [sp, #20]
 800b902:	e7c4      	b.n	800b88e <_vfiprintf_r+0x156>
 800b904:	fb0c 2101 	mla	r1, ip, r1, r2
 800b908:	4604      	mov	r4, r0
 800b90a:	2301      	movs	r3, #1
 800b90c:	e7f0      	b.n	800b8f0 <_vfiprintf_r+0x1b8>
 800b90e:	ab03      	add	r3, sp, #12
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	462a      	mov	r2, r5
 800b914:	4b12      	ldr	r3, [pc, #72]	@ (800b960 <_vfiprintf_r+0x228>)
 800b916:	a904      	add	r1, sp, #16
 800b918:	4630      	mov	r0, r6
 800b91a:	f3af 8000 	nop.w
 800b91e:	4607      	mov	r7, r0
 800b920:	1c78      	adds	r0, r7, #1
 800b922:	d1d6      	bne.n	800b8d2 <_vfiprintf_r+0x19a>
 800b924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b926:	07d9      	lsls	r1, r3, #31
 800b928:	d405      	bmi.n	800b936 <_vfiprintf_r+0x1fe>
 800b92a:	89ab      	ldrh	r3, [r5, #12]
 800b92c:	059a      	lsls	r2, r3, #22
 800b92e:	d402      	bmi.n	800b936 <_vfiprintf_r+0x1fe>
 800b930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b932:	f7ff fe7d 	bl	800b630 <__retarget_lock_release_recursive>
 800b936:	89ab      	ldrh	r3, [r5, #12]
 800b938:	065b      	lsls	r3, r3, #25
 800b93a:	f53f af1f 	bmi.w	800b77c <_vfiprintf_r+0x44>
 800b93e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b940:	e71e      	b.n	800b780 <_vfiprintf_r+0x48>
 800b942:	ab03      	add	r3, sp, #12
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	462a      	mov	r2, r5
 800b948:	4b05      	ldr	r3, [pc, #20]	@ (800b960 <_vfiprintf_r+0x228>)
 800b94a:	a904      	add	r1, sp, #16
 800b94c:	4630      	mov	r0, r6
 800b94e:	f000 f879 	bl	800ba44 <_printf_i>
 800b952:	e7e4      	b.n	800b91e <_vfiprintf_r+0x1e6>
 800b954:	0800c16c 	.word	0x0800c16c
 800b958:	0800c176 	.word	0x0800c176
 800b95c:	00000000 	.word	0x00000000
 800b960:	0800b713 	.word	0x0800b713
 800b964:	0800c172 	.word	0x0800c172

0800b968 <_printf_common>:
 800b968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b96c:	4616      	mov	r6, r2
 800b96e:	4698      	mov	r8, r3
 800b970:	688a      	ldr	r2, [r1, #8]
 800b972:	690b      	ldr	r3, [r1, #16]
 800b974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b978:	4293      	cmp	r3, r2
 800b97a:	bfb8      	it	lt
 800b97c:	4613      	movlt	r3, r2
 800b97e:	6033      	str	r3, [r6, #0]
 800b980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b984:	4607      	mov	r7, r0
 800b986:	460c      	mov	r4, r1
 800b988:	b10a      	cbz	r2, 800b98e <_printf_common+0x26>
 800b98a:	3301      	adds	r3, #1
 800b98c:	6033      	str	r3, [r6, #0]
 800b98e:	6823      	ldr	r3, [r4, #0]
 800b990:	0699      	lsls	r1, r3, #26
 800b992:	bf42      	ittt	mi
 800b994:	6833      	ldrmi	r3, [r6, #0]
 800b996:	3302      	addmi	r3, #2
 800b998:	6033      	strmi	r3, [r6, #0]
 800b99a:	6825      	ldr	r5, [r4, #0]
 800b99c:	f015 0506 	ands.w	r5, r5, #6
 800b9a0:	d106      	bne.n	800b9b0 <_printf_common+0x48>
 800b9a2:	f104 0a19 	add.w	sl, r4, #25
 800b9a6:	68e3      	ldr	r3, [r4, #12]
 800b9a8:	6832      	ldr	r2, [r6, #0]
 800b9aa:	1a9b      	subs	r3, r3, r2
 800b9ac:	42ab      	cmp	r3, r5
 800b9ae:	dc26      	bgt.n	800b9fe <_printf_common+0x96>
 800b9b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b9b4:	6822      	ldr	r2, [r4, #0]
 800b9b6:	3b00      	subs	r3, #0
 800b9b8:	bf18      	it	ne
 800b9ba:	2301      	movne	r3, #1
 800b9bc:	0692      	lsls	r2, r2, #26
 800b9be:	d42b      	bmi.n	800ba18 <_printf_common+0xb0>
 800b9c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b9c4:	4641      	mov	r1, r8
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	47c8      	blx	r9
 800b9ca:	3001      	adds	r0, #1
 800b9cc:	d01e      	beq.n	800ba0c <_printf_common+0xa4>
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	6922      	ldr	r2, [r4, #16]
 800b9d2:	f003 0306 	and.w	r3, r3, #6
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	bf02      	ittt	eq
 800b9da:	68e5      	ldreq	r5, [r4, #12]
 800b9dc:	6833      	ldreq	r3, [r6, #0]
 800b9de:	1aed      	subeq	r5, r5, r3
 800b9e0:	68a3      	ldr	r3, [r4, #8]
 800b9e2:	bf0c      	ite	eq
 800b9e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9e8:	2500      	movne	r5, #0
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	bfc4      	itt	gt
 800b9ee:	1a9b      	subgt	r3, r3, r2
 800b9f0:	18ed      	addgt	r5, r5, r3
 800b9f2:	2600      	movs	r6, #0
 800b9f4:	341a      	adds	r4, #26
 800b9f6:	42b5      	cmp	r5, r6
 800b9f8:	d11a      	bne.n	800ba30 <_printf_common+0xc8>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	e008      	b.n	800ba10 <_printf_common+0xa8>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	4652      	mov	r2, sl
 800ba02:	4641      	mov	r1, r8
 800ba04:	4638      	mov	r0, r7
 800ba06:	47c8      	blx	r9
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d103      	bne.n	800ba14 <_printf_common+0xac>
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba14:	3501      	adds	r5, #1
 800ba16:	e7c6      	b.n	800b9a6 <_printf_common+0x3e>
 800ba18:	18e1      	adds	r1, r4, r3
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	2030      	movs	r0, #48	@ 0x30
 800ba1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba22:	4422      	add	r2, r4
 800ba24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ba2c:	3302      	adds	r3, #2
 800ba2e:	e7c7      	b.n	800b9c0 <_printf_common+0x58>
 800ba30:	2301      	movs	r3, #1
 800ba32:	4622      	mov	r2, r4
 800ba34:	4641      	mov	r1, r8
 800ba36:	4638      	mov	r0, r7
 800ba38:	47c8      	blx	r9
 800ba3a:	3001      	adds	r0, #1
 800ba3c:	d0e6      	beq.n	800ba0c <_printf_common+0xa4>
 800ba3e:	3601      	adds	r6, #1
 800ba40:	e7d9      	b.n	800b9f6 <_printf_common+0x8e>
	...

0800ba44 <_printf_i>:
 800ba44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ba48:	7e0f      	ldrb	r7, [r1, #24]
 800ba4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba4c:	2f78      	cmp	r7, #120	@ 0x78
 800ba4e:	4691      	mov	r9, r2
 800ba50:	4680      	mov	r8, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	469a      	mov	sl, r3
 800ba56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba5a:	d807      	bhi.n	800ba6c <_printf_i+0x28>
 800ba5c:	2f62      	cmp	r7, #98	@ 0x62
 800ba5e:	d80a      	bhi.n	800ba76 <_printf_i+0x32>
 800ba60:	2f00      	cmp	r7, #0
 800ba62:	f000 80d1 	beq.w	800bc08 <_printf_i+0x1c4>
 800ba66:	2f58      	cmp	r7, #88	@ 0x58
 800ba68:	f000 80b8 	beq.w	800bbdc <_printf_i+0x198>
 800ba6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba74:	e03a      	b.n	800baec <_printf_i+0xa8>
 800ba76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba7a:	2b15      	cmp	r3, #21
 800ba7c:	d8f6      	bhi.n	800ba6c <_printf_i+0x28>
 800ba7e:	a101      	add	r1, pc, #4	@ (adr r1, 800ba84 <_printf_i+0x40>)
 800ba80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba84:	0800badd 	.word	0x0800badd
 800ba88:	0800baf1 	.word	0x0800baf1
 800ba8c:	0800ba6d 	.word	0x0800ba6d
 800ba90:	0800ba6d 	.word	0x0800ba6d
 800ba94:	0800ba6d 	.word	0x0800ba6d
 800ba98:	0800ba6d 	.word	0x0800ba6d
 800ba9c:	0800baf1 	.word	0x0800baf1
 800baa0:	0800ba6d 	.word	0x0800ba6d
 800baa4:	0800ba6d 	.word	0x0800ba6d
 800baa8:	0800ba6d 	.word	0x0800ba6d
 800baac:	0800ba6d 	.word	0x0800ba6d
 800bab0:	0800bbef 	.word	0x0800bbef
 800bab4:	0800bb1b 	.word	0x0800bb1b
 800bab8:	0800bba9 	.word	0x0800bba9
 800babc:	0800ba6d 	.word	0x0800ba6d
 800bac0:	0800ba6d 	.word	0x0800ba6d
 800bac4:	0800bc11 	.word	0x0800bc11
 800bac8:	0800ba6d 	.word	0x0800ba6d
 800bacc:	0800bb1b 	.word	0x0800bb1b
 800bad0:	0800ba6d 	.word	0x0800ba6d
 800bad4:	0800ba6d 	.word	0x0800ba6d
 800bad8:	0800bbb1 	.word	0x0800bbb1
 800badc:	6833      	ldr	r3, [r6, #0]
 800bade:	1d1a      	adds	r2, r3, #4
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	6032      	str	r2, [r6, #0]
 800bae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800baec:	2301      	movs	r3, #1
 800baee:	e09c      	b.n	800bc2a <_printf_i+0x1e6>
 800baf0:	6833      	ldr	r3, [r6, #0]
 800baf2:	6820      	ldr	r0, [r4, #0]
 800baf4:	1d19      	adds	r1, r3, #4
 800baf6:	6031      	str	r1, [r6, #0]
 800baf8:	0606      	lsls	r6, r0, #24
 800bafa:	d501      	bpl.n	800bb00 <_printf_i+0xbc>
 800bafc:	681d      	ldr	r5, [r3, #0]
 800bafe:	e003      	b.n	800bb08 <_printf_i+0xc4>
 800bb00:	0645      	lsls	r5, r0, #25
 800bb02:	d5fb      	bpl.n	800bafc <_printf_i+0xb8>
 800bb04:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb08:	2d00      	cmp	r5, #0
 800bb0a:	da03      	bge.n	800bb14 <_printf_i+0xd0>
 800bb0c:	232d      	movs	r3, #45	@ 0x2d
 800bb0e:	426d      	negs	r5, r5
 800bb10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb14:	4858      	ldr	r0, [pc, #352]	@ (800bc78 <_printf_i+0x234>)
 800bb16:	230a      	movs	r3, #10
 800bb18:	e011      	b.n	800bb3e <_printf_i+0xfa>
 800bb1a:	6821      	ldr	r1, [r4, #0]
 800bb1c:	6833      	ldr	r3, [r6, #0]
 800bb1e:	0608      	lsls	r0, r1, #24
 800bb20:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb24:	d402      	bmi.n	800bb2c <_printf_i+0xe8>
 800bb26:	0649      	lsls	r1, r1, #25
 800bb28:	bf48      	it	mi
 800bb2a:	b2ad      	uxthmi	r5, r5
 800bb2c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bb2e:	4852      	ldr	r0, [pc, #328]	@ (800bc78 <_printf_i+0x234>)
 800bb30:	6033      	str	r3, [r6, #0]
 800bb32:	bf14      	ite	ne
 800bb34:	230a      	movne	r3, #10
 800bb36:	2308      	moveq	r3, #8
 800bb38:	2100      	movs	r1, #0
 800bb3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bb3e:	6866      	ldr	r6, [r4, #4]
 800bb40:	60a6      	str	r6, [r4, #8]
 800bb42:	2e00      	cmp	r6, #0
 800bb44:	db05      	blt.n	800bb52 <_printf_i+0x10e>
 800bb46:	6821      	ldr	r1, [r4, #0]
 800bb48:	432e      	orrs	r6, r5
 800bb4a:	f021 0104 	bic.w	r1, r1, #4
 800bb4e:	6021      	str	r1, [r4, #0]
 800bb50:	d04b      	beq.n	800bbea <_printf_i+0x1a6>
 800bb52:	4616      	mov	r6, r2
 800bb54:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb58:	fb03 5711 	mls	r7, r3, r1, r5
 800bb5c:	5dc7      	ldrb	r7, [r0, r7]
 800bb5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb62:	462f      	mov	r7, r5
 800bb64:	42bb      	cmp	r3, r7
 800bb66:	460d      	mov	r5, r1
 800bb68:	d9f4      	bls.n	800bb54 <_printf_i+0x110>
 800bb6a:	2b08      	cmp	r3, #8
 800bb6c:	d10b      	bne.n	800bb86 <_printf_i+0x142>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	07df      	lsls	r7, r3, #31
 800bb72:	d508      	bpl.n	800bb86 <_printf_i+0x142>
 800bb74:	6923      	ldr	r3, [r4, #16]
 800bb76:	6861      	ldr	r1, [r4, #4]
 800bb78:	4299      	cmp	r1, r3
 800bb7a:	bfde      	ittt	le
 800bb7c:	2330      	movle	r3, #48	@ 0x30
 800bb7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb82:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb86:	1b92      	subs	r2, r2, r6
 800bb88:	6122      	str	r2, [r4, #16]
 800bb8a:	f8cd a000 	str.w	sl, [sp]
 800bb8e:	464b      	mov	r3, r9
 800bb90:	aa03      	add	r2, sp, #12
 800bb92:	4621      	mov	r1, r4
 800bb94:	4640      	mov	r0, r8
 800bb96:	f7ff fee7 	bl	800b968 <_printf_common>
 800bb9a:	3001      	adds	r0, #1
 800bb9c:	d14a      	bne.n	800bc34 <_printf_i+0x1f0>
 800bb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bba2:	b004      	add	sp, #16
 800bba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	f043 0320 	orr.w	r3, r3, #32
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	4832      	ldr	r0, [pc, #200]	@ (800bc7c <_printf_i+0x238>)
 800bbb2:	2778      	movs	r7, #120	@ 0x78
 800bbb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bbb8:	6823      	ldr	r3, [r4, #0]
 800bbba:	6831      	ldr	r1, [r6, #0]
 800bbbc:	061f      	lsls	r7, r3, #24
 800bbbe:	f851 5b04 	ldr.w	r5, [r1], #4
 800bbc2:	d402      	bmi.n	800bbca <_printf_i+0x186>
 800bbc4:	065f      	lsls	r7, r3, #25
 800bbc6:	bf48      	it	mi
 800bbc8:	b2ad      	uxthmi	r5, r5
 800bbca:	6031      	str	r1, [r6, #0]
 800bbcc:	07d9      	lsls	r1, r3, #31
 800bbce:	bf44      	itt	mi
 800bbd0:	f043 0320 	orrmi.w	r3, r3, #32
 800bbd4:	6023      	strmi	r3, [r4, #0]
 800bbd6:	b11d      	cbz	r5, 800bbe0 <_printf_i+0x19c>
 800bbd8:	2310      	movs	r3, #16
 800bbda:	e7ad      	b.n	800bb38 <_printf_i+0xf4>
 800bbdc:	4826      	ldr	r0, [pc, #152]	@ (800bc78 <_printf_i+0x234>)
 800bbde:	e7e9      	b.n	800bbb4 <_printf_i+0x170>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	f023 0320 	bic.w	r3, r3, #32
 800bbe6:	6023      	str	r3, [r4, #0]
 800bbe8:	e7f6      	b.n	800bbd8 <_printf_i+0x194>
 800bbea:	4616      	mov	r6, r2
 800bbec:	e7bd      	b.n	800bb6a <_printf_i+0x126>
 800bbee:	6833      	ldr	r3, [r6, #0]
 800bbf0:	6825      	ldr	r5, [r4, #0]
 800bbf2:	6961      	ldr	r1, [r4, #20]
 800bbf4:	1d18      	adds	r0, r3, #4
 800bbf6:	6030      	str	r0, [r6, #0]
 800bbf8:	062e      	lsls	r6, r5, #24
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	d501      	bpl.n	800bc02 <_printf_i+0x1be>
 800bbfe:	6019      	str	r1, [r3, #0]
 800bc00:	e002      	b.n	800bc08 <_printf_i+0x1c4>
 800bc02:	0668      	lsls	r0, r5, #25
 800bc04:	d5fb      	bpl.n	800bbfe <_printf_i+0x1ba>
 800bc06:	8019      	strh	r1, [r3, #0]
 800bc08:	2300      	movs	r3, #0
 800bc0a:	6123      	str	r3, [r4, #16]
 800bc0c:	4616      	mov	r6, r2
 800bc0e:	e7bc      	b.n	800bb8a <_printf_i+0x146>
 800bc10:	6833      	ldr	r3, [r6, #0]
 800bc12:	1d1a      	adds	r2, r3, #4
 800bc14:	6032      	str	r2, [r6, #0]
 800bc16:	681e      	ldr	r6, [r3, #0]
 800bc18:	6862      	ldr	r2, [r4, #4]
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7f4 fad7 	bl	80001d0 <memchr>
 800bc22:	b108      	cbz	r0, 800bc28 <_printf_i+0x1e4>
 800bc24:	1b80      	subs	r0, r0, r6
 800bc26:	6060      	str	r0, [r4, #4]
 800bc28:	6863      	ldr	r3, [r4, #4]
 800bc2a:	6123      	str	r3, [r4, #16]
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bc32:	e7aa      	b.n	800bb8a <_printf_i+0x146>
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	4632      	mov	r2, r6
 800bc38:	4649      	mov	r1, r9
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	47d0      	blx	sl
 800bc3e:	3001      	adds	r0, #1
 800bc40:	d0ad      	beq.n	800bb9e <_printf_i+0x15a>
 800bc42:	6823      	ldr	r3, [r4, #0]
 800bc44:	079b      	lsls	r3, r3, #30
 800bc46:	d413      	bmi.n	800bc70 <_printf_i+0x22c>
 800bc48:	68e0      	ldr	r0, [r4, #12]
 800bc4a:	9b03      	ldr	r3, [sp, #12]
 800bc4c:	4298      	cmp	r0, r3
 800bc4e:	bfb8      	it	lt
 800bc50:	4618      	movlt	r0, r3
 800bc52:	e7a6      	b.n	800bba2 <_printf_i+0x15e>
 800bc54:	2301      	movs	r3, #1
 800bc56:	4632      	mov	r2, r6
 800bc58:	4649      	mov	r1, r9
 800bc5a:	4640      	mov	r0, r8
 800bc5c:	47d0      	blx	sl
 800bc5e:	3001      	adds	r0, #1
 800bc60:	d09d      	beq.n	800bb9e <_printf_i+0x15a>
 800bc62:	3501      	adds	r5, #1
 800bc64:	68e3      	ldr	r3, [r4, #12]
 800bc66:	9903      	ldr	r1, [sp, #12]
 800bc68:	1a5b      	subs	r3, r3, r1
 800bc6a:	42ab      	cmp	r3, r5
 800bc6c:	dcf2      	bgt.n	800bc54 <_printf_i+0x210>
 800bc6e:	e7eb      	b.n	800bc48 <_printf_i+0x204>
 800bc70:	2500      	movs	r5, #0
 800bc72:	f104 0619 	add.w	r6, r4, #25
 800bc76:	e7f5      	b.n	800bc64 <_printf_i+0x220>
 800bc78:	0800c17d 	.word	0x0800c17d
 800bc7c:	0800c18e 	.word	0x0800c18e

0800bc80 <__sflush_r>:
 800bc80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc88:	0716      	lsls	r6, r2, #28
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	d454      	bmi.n	800bd3a <__sflush_r+0xba>
 800bc90:	684b      	ldr	r3, [r1, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc02      	bgt.n	800bc9c <__sflush_r+0x1c>
 800bc96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	dd48      	ble.n	800bd2e <__sflush_r+0xae>
 800bc9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d045      	beq.n	800bd2e <__sflush_r+0xae>
 800bca2:	2300      	movs	r3, #0
 800bca4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bca8:	682f      	ldr	r7, [r5, #0]
 800bcaa:	6a21      	ldr	r1, [r4, #32]
 800bcac:	602b      	str	r3, [r5, #0]
 800bcae:	d030      	beq.n	800bd12 <__sflush_r+0x92>
 800bcb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcb2:	89a3      	ldrh	r3, [r4, #12]
 800bcb4:	0759      	lsls	r1, r3, #29
 800bcb6:	d505      	bpl.n	800bcc4 <__sflush_r+0x44>
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	1ad2      	subs	r2, r2, r3
 800bcbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcbe:	b10b      	cbz	r3, 800bcc4 <__sflush_r+0x44>
 800bcc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcc2:	1ad2      	subs	r2, r2, r3
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcc8:	6a21      	ldr	r1, [r4, #32]
 800bcca:	4628      	mov	r0, r5
 800bccc:	47b0      	blx	r6
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	d106      	bne.n	800bce2 <__sflush_r+0x62>
 800bcd4:	6829      	ldr	r1, [r5, #0]
 800bcd6:	291d      	cmp	r1, #29
 800bcd8:	d82b      	bhi.n	800bd32 <__sflush_r+0xb2>
 800bcda:	4a2a      	ldr	r2, [pc, #168]	@ (800bd84 <__sflush_r+0x104>)
 800bcdc:	40ca      	lsrs	r2, r1
 800bcde:	07d6      	lsls	r6, r2, #31
 800bce0:	d527      	bpl.n	800bd32 <__sflush_r+0xb2>
 800bce2:	2200      	movs	r2, #0
 800bce4:	6062      	str	r2, [r4, #4]
 800bce6:	04d9      	lsls	r1, r3, #19
 800bce8:	6922      	ldr	r2, [r4, #16]
 800bcea:	6022      	str	r2, [r4, #0]
 800bcec:	d504      	bpl.n	800bcf8 <__sflush_r+0x78>
 800bcee:	1c42      	adds	r2, r0, #1
 800bcf0:	d101      	bne.n	800bcf6 <__sflush_r+0x76>
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	b903      	cbnz	r3, 800bcf8 <__sflush_r+0x78>
 800bcf6:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcfa:	602f      	str	r7, [r5, #0]
 800bcfc:	b1b9      	cbz	r1, 800bd2e <__sflush_r+0xae>
 800bcfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd02:	4299      	cmp	r1, r3
 800bd04:	d002      	beq.n	800bd0c <__sflush_r+0x8c>
 800bd06:	4628      	mov	r0, r5
 800bd08:	f7ff fca2 	bl	800b650 <_free_r>
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd10:	e00d      	b.n	800bd2e <__sflush_r+0xae>
 800bd12:	2301      	movs	r3, #1
 800bd14:	4628      	mov	r0, r5
 800bd16:	47b0      	blx	r6
 800bd18:	4602      	mov	r2, r0
 800bd1a:	1c50      	adds	r0, r2, #1
 800bd1c:	d1c9      	bne.n	800bcb2 <__sflush_r+0x32>
 800bd1e:	682b      	ldr	r3, [r5, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d0c6      	beq.n	800bcb2 <__sflush_r+0x32>
 800bd24:	2b1d      	cmp	r3, #29
 800bd26:	d001      	beq.n	800bd2c <__sflush_r+0xac>
 800bd28:	2b16      	cmp	r3, #22
 800bd2a:	d11e      	bne.n	800bd6a <__sflush_r+0xea>
 800bd2c:	602f      	str	r7, [r5, #0]
 800bd2e:	2000      	movs	r0, #0
 800bd30:	e022      	b.n	800bd78 <__sflush_r+0xf8>
 800bd32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd36:	b21b      	sxth	r3, r3
 800bd38:	e01b      	b.n	800bd72 <__sflush_r+0xf2>
 800bd3a:	690f      	ldr	r7, [r1, #16]
 800bd3c:	2f00      	cmp	r7, #0
 800bd3e:	d0f6      	beq.n	800bd2e <__sflush_r+0xae>
 800bd40:	0793      	lsls	r3, r2, #30
 800bd42:	680e      	ldr	r6, [r1, #0]
 800bd44:	bf08      	it	eq
 800bd46:	694b      	ldreq	r3, [r1, #20]
 800bd48:	600f      	str	r7, [r1, #0]
 800bd4a:	bf18      	it	ne
 800bd4c:	2300      	movne	r3, #0
 800bd4e:	eba6 0807 	sub.w	r8, r6, r7
 800bd52:	608b      	str	r3, [r1, #8]
 800bd54:	f1b8 0f00 	cmp.w	r8, #0
 800bd58:	dde9      	ble.n	800bd2e <__sflush_r+0xae>
 800bd5a:	6a21      	ldr	r1, [r4, #32]
 800bd5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd5e:	4643      	mov	r3, r8
 800bd60:	463a      	mov	r2, r7
 800bd62:	4628      	mov	r0, r5
 800bd64:	47b0      	blx	r6
 800bd66:	2800      	cmp	r0, #0
 800bd68:	dc08      	bgt.n	800bd7c <__sflush_r+0xfc>
 800bd6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd72:	81a3      	strh	r3, [r4, #12]
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295
 800bd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd7c:	4407      	add	r7, r0
 800bd7e:	eba8 0800 	sub.w	r8, r8, r0
 800bd82:	e7e7      	b.n	800bd54 <__sflush_r+0xd4>
 800bd84:	20400001 	.word	0x20400001

0800bd88 <_fflush_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	690b      	ldr	r3, [r1, #16]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b913      	cbnz	r3, 800bd98 <_fflush_r+0x10>
 800bd92:	2500      	movs	r5, #0
 800bd94:	4628      	mov	r0, r5
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	b118      	cbz	r0, 800bda2 <_fflush_r+0x1a>
 800bd9a:	6a03      	ldr	r3, [r0, #32]
 800bd9c:	b90b      	cbnz	r3, 800bda2 <_fflush_r+0x1a>
 800bd9e:	f7ff f98b 	bl	800b0b8 <__sinit>
 800bda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d0f3      	beq.n	800bd92 <_fflush_r+0xa>
 800bdaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bdac:	07d0      	lsls	r0, r2, #31
 800bdae:	d404      	bmi.n	800bdba <_fflush_r+0x32>
 800bdb0:	0599      	lsls	r1, r3, #22
 800bdb2:	d402      	bmi.n	800bdba <_fflush_r+0x32>
 800bdb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdb6:	f7ff fc3a 	bl	800b62e <__retarget_lock_acquire_recursive>
 800bdba:	4628      	mov	r0, r5
 800bdbc:	4621      	mov	r1, r4
 800bdbe:	f7ff ff5f 	bl	800bc80 <__sflush_r>
 800bdc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdc4:	07da      	lsls	r2, r3, #31
 800bdc6:	4605      	mov	r5, r0
 800bdc8:	d4e4      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdca:	89a3      	ldrh	r3, [r4, #12]
 800bdcc:	059b      	lsls	r3, r3, #22
 800bdce:	d4e1      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdd2:	f7ff fc2d 	bl	800b630 <__retarget_lock_release_recursive>
 800bdd6:	e7dd      	b.n	800bd94 <_fflush_r+0xc>

0800bdd8 <__swhatbuf_r>:
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	460c      	mov	r4, r1
 800bddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde0:	2900      	cmp	r1, #0
 800bde2:	b096      	sub	sp, #88	@ 0x58
 800bde4:	4615      	mov	r5, r2
 800bde6:	461e      	mov	r6, r3
 800bde8:	da0d      	bge.n	800be06 <__swhatbuf_r+0x2e>
 800bdea:	89a3      	ldrh	r3, [r4, #12]
 800bdec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdf0:	f04f 0100 	mov.w	r1, #0
 800bdf4:	bf14      	ite	ne
 800bdf6:	2340      	movne	r3, #64	@ 0x40
 800bdf8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	6031      	str	r1, [r6, #0]
 800be00:	602b      	str	r3, [r5, #0]
 800be02:	b016      	add	sp, #88	@ 0x58
 800be04:	bd70      	pop	{r4, r5, r6, pc}
 800be06:	466a      	mov	r2, sp
 800be08:	f000 f848 	bl	800be9c <_fstat_r>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	dbec      	blt.n	800bdea <__swhatbuf_r+0x12>
 800be10:	9901      	ldr	r1, [sp, #4]
 800be12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be1a:	4259      	negs	r1, r3
 800be1c:	4159      	adcs	r1, r3
 800be1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be22:	e7eb      	b.n	800bdfc <__swhatbuf_r+0x24>

0800be24 <__smakebuf_r>:
 800be24:	898b      	ldrh	r3, [r1, #12]
 800be26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be28:	079d      	lsls	r5, r3, #30
 800be2a:	4606      	mov	r6, r0
 800be2c:	460c      	mov	r4, r1
 800be2e:	d507      	bpl.n	800be40 <__smakebuf_r+0x1c>
 800be30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	6123      	str	r3, [r4, #16]
 800be38:	2301      	movs	r3, #1
 800be3a:	6163      	str	r3, [r4, #20]
 800be3c:	b003      	add	sp, #12
 800be3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be40:	ab01      	add	r3, sp, #4
 800be42:	466a      	mov	r2, sp
 800be44:	f7ff ffc8 	bl	800bdd8 <__swhatbuf_r>
 800be48:	9f00      	ldr	r7, [sp, #0]
 800be4a:	4605      	mov	r5, r0
 800be4c:	4639      	mov	r1, r7
 800be4e:	4630      	mov	r0, r6
 800be50:	f7ff f81a 	bl	800ae88 <_malloc_r>
 800be54:	b948      	cbnz	r0, 800be6a <__smakebuf_r+0x46>
 800be56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be5a:	059a      	lsls	r2, r3, #22
 800be5c:	d4ee      	bmi.n	800be3c <__smakebuf_r+0x18>
 800be5e:	f023 0303 	bic.w	r3, r3, #3
 800be62:	f043 0302 	orr.w	r3, r3, #2
 800be66:	81a3      	strh	r3, [r4, #12]
 800be68:	e7e2      	b.n	800be30 <__smakebuf_r+0xc>
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	6020      	str	r0, [r4, #0]
 800be6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be72:	81a3      	strh	r3, [r4, #12]
 800be74:	9b01      	ldr	r3, [sp, #4]
 800be76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be7a:	b15b      	cbz	r3, 800be94 <__smakebuf_r+0x70>
 800be7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be80:	4630      	mov	r0, r6
 800be82:	f000 f81d 	bl	800bec0 <_isatty_r>
 800be86:	b128      	cbz	r0, 800be94 <__smakebuf_r+0x70>
 800be88:	89a3      	ldrh	r3, [r4, #12]
 800be8a:	f023 0303 	bic.w	r3, r3, #3
 800be8e:	f043 0301 	orr.w	r3, r3, #1
 800be92:	81a3      	strh	r3, [r4, #12]
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	431d      	orrs	r5, r3
 800be98:	81a5      	strh	r5, [r4, #12]
 800be9a:	e7cf      	b.n	800be3c <__smakebuf_r+0x18>

0800be9c <_fstat_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4d07      	ldr	r5, [pc, #28]	@ (800bebc <_fstat_r+0x20>)
 800bea0:	2300      	movs	r3, #0
 800bea2:	4604      	mov	r4, r0
 800bea4:	4608      	mov	r0, r1
 800bea6:	4611      	mov	r1, r2
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	f7f6 fcc4 	bl	8002836 <_fstat>
 800beae:	1c43      	adds	r3, r0, #1
 800beb0:	d102      	bne.n	800beb8 <_fstat_r+0x1c>
 800beb2:	682b      	ldr	r3, [r5, #0]
 800beb4:	b103      	cbz	r3, 800beb8 <_fstat_r+0x1c>
 800beb6:	6023      	str	r3, [r4, #0]
 800beb8:	bd38      	pop	{r3, r4, r5, pc}
 800beba:	bf00      	nop
 800bebc:	20000af8 	.word	0x20000af8

0800bec0 <_isatty_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	4d06      	ldr	r5, [pc, #24]	@ (800bedc <_isatty_r+0x1c>)
 800bec4:	2300      	movs	r3, #0
 800bec6:	4604      	mov	r4, r0
 800bec8:	4608      	mov	r0, r1
 800beca:	602b      	str	r3, [r5, #0]
 800becc:	f7f6 fcc3 	bl	8002856 <_isatty>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_isatty_r+0x1a>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b103      	cbz	r3, 800beda <_isatty_r+0x1a>
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	20000af8 	.word	0x20000af8

0800bee0 <_init>:
 800bee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee2:	bf00      	nop
 800bee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bee6:	bc08      	pop	{r3}
 800bee8:	469e      	mov	lr, r3
 800beea:	4770      	bx	lr

0800beec <_fini>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	bf00      	nop
 800bef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bef2:	bc08      	pop	{r3}
 800bef4:	469e      	mov	lr, r3
 800bef6:	4770      	bx	lr
