
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800b75c  0800b75c  0000c75c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b8  0800b8b8  0000d088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b8b8  0800b8b8  0000c8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b8c0  0800b8c0  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8c0  0800b8c0  0000c8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8c4  0800b8c4  0000c8c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800b8c8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000d088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000d088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b561  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004757  00000000  00000000  00028619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  0002cd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001119  00000000  00000000  0002e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000699b  00000000  00000000  0002f4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f39d  00000000  00000000  00035e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e53  00000000  00000000  00055209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012705c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006618  00000000  00000000  001270a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012d6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b744 	.word	0x0800b744

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800b744 	.word	0x0800b744

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <chi>:
    }
  }
}

void chi(uint64_t* state)
{
 800059c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80005a0:	b08e      	sub	sp, #56	@ 0x38
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  /* Chi */
  uint64_t C[5];

  int x, y;
  for (y = 0; y < 5; ++y) {
 80005a6:	2100      	movs	r1, #0
 80005a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80005aa:	e072      	b.n	8000692 <chi+0xf6>
    for (x = 0; x < 5; ++x) {
 80005ac:	2100      	movs	r1, #0
 80005ae:	6379      	str	r1, [r7, #52]	@ 0x34
 80005b0:	e04e      	b.n	8000650 <chi+0xb4>
      C[x] = state[y * 5 + x] ^ ((~state[y * 5 + ((x + 1) % 5)]) & state[y * 5 + ((x + 2) % 5)]);
 80005b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80005b4:	4601      	mov	r1, r0
 80005b6:	0089      	lsls	r1, r1, #2
 80005b8:	4408      	add	r0, r1
 80005ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80005bc:	4401      	add	r1, r0
 80005be:	00c9      	lsls	r1, r1, #3
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	4401      	add	r1, r0
 80005c4:	e9d1 ab00 	ldrd	sl, fp, [r1]
 80005c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80005ca:	4601      	mov	r1, r0
 80005cc:	0089      	lsls	r1, r1, #2
 80005ce:	eb01 0c00 	add.w	ip, r1, r0
 80005d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80005d4:	1c4e      	adds	r6, r1, #1
 80005d6:	4934      	ldr	r1, [pc, #208]	@ (80006a8 <chi+0x10c>)
 80005d8:	fb81 0106 	smull	r0, r1, r1, r6
 80005dc:	1048      	asrs	r0, r1, #1
 80005de:	17f1      	asrs	r1, r6, #31
 80005e0:	1a40      	subs	r0, r0, r1
 80005e2:	4601      	mov	r1, r0
 80005e4:	0089      	lsls	r1, r1, #2
 80005e6:	4401      	add	r1, r0
 80005e8:	1a70      	subs	r0, r6, r1
 80005ea:	eb0c 0100 	add.w	r1, ip, r0
 80005ee:	00c9      	lsls	r1, r1, #3
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	4401      	add	r1, r0
 80005f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80005f8:	43c2      	mvns	r2, r0
 80005fa:	43cb      	mvns	r3, r1
 80005fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80005fe:	4601      	mov	r1, r0
 8000600:	0089      	lsls	r1, r1, #2
 8000602:	eb01 0c00 	add.w	ip, r1, r0
 8000606:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000608:	1c8e      	adds	r6, r1, #2
 800060a:	4927      	ldr	r1, [pc, #156]	@ (80006a8 <chi+0x10c>)
 800060c:	fb81 0106 	smull	r0, r1, r1, r6
 8000610:	1048      	asrs	r0, r1, #1
 8000612:	17f1      	asrs	r1, r6, #31
 8000614:	1a40      	subs	r0, r0, r1
 8000616:	4601      	mov	r1, r0
 8000618:	0089      	lsls	r1, r1, #2
 800061a:	4401      	add	r1, r0
 800061c:	1a70      	subs	r0, r6, r1
 800061e:	eb0c 0100 	add.w	r1, ip, r0
 8000622:	00c9      	lsls	r1, r1, #3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	4401      	add	r1, r0
 8000628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800062c:	ea02 0400 	and.w	r4, r2, r0
 8000630:	ea03 0501 	and.w	r5, r3, r1
 8000634:	ea8a 0804 	eor.w	r8, sl, r4
 8000638:	ea8b 0905 	eor.w	r9, fp, r5
 800063c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800063e:	00c9      	lsls	r1, r1, #3
 8000640:	3138      	adds	r1, #56	@ 0x38
 8000642:	4439      	add	r1, r7
 8000644:	3930      	subs	r1, #48	@ 0x30
 8000646:	e9c1 8900 	strd	r8, r9, [r1]
    for (x = 0; x < 5; ++x) {
 800064a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800064c:	3101      	adds	r1, #1
 800064e:	6379      	str	r1, [r7, #52]	@ 0x34
 8000650:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000652:	2904      	cmp	r1, #4
 8000654:	ddad      	ble.n	80005b2 <chi+0x16>
    }

    for (x = 0; x < 5; ++x) {
 8000656:	2100      	movs	r1, #0
 8000658:	6379      	str	r1, [r7, #52]	@ 0x34
 800065a:	e014      	b.n	8000686 <chi+0xea>
      state[y * 5 + x] = C[x];
 800065c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800065e:	4601      	mov	r1, r0
 8000660:	0089      	lsls	r1, r1, #2
 8000662:	4408      	add	r0, r1
 8000664:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000666:	4401      	add	r1, r0
 8000668:	00c9      	lsls	r1, r1, #3
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	1846      	adds	r6, r0, r1
 800066e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000670:	00c9      	lsls	r1, r1, #3
 8000672:	3138      	adds	r1, #56	@ 0x38
 8000674:	4439      	add	r1, r7
 8000676:	3930      	subs	r1, #48	@ 0x30
 8000678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800067c:	e9c6 0100 	strd	r0, r1, [r6]
    for (x = 0; x < 5; ++x) {
 8000680:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000682:	3101      	adds	r1, #1
 8000684:	6379      	str	r1, [r7, #52]	@ 0x34
 8000686:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000688:	2904      	cmp	r1, #4
 800068a:	dde7      	ble.n	800065c <chi+0xc0>
  for (y = 0; y < 5; ++y) {
 800068c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800068e:	3101      	adds	r1, #1
 8000690:	6339      	str	r1, [r7, #48]	@ 0x30
 8000692:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000694:	2904      	cmp	r1, #4
 8000696:	dd89      	ble.n	80005ac <chi+0x10>
    }
  }
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	3738      	adds	r7, #56	@ 0x38
 800069e:	46bd      	mov	sp, r7
 80006a0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	66666667 	.word	0x66666667

080006ac <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <_write+0x28>)
 80006c4:	f005 ff2d 	bl	8006522 <HAL_UART_Transmit>
    return len;
 80006c8:	687b      	ldr	r3, [r7, #4]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200001a8 	.word	0x200001a8

080006d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006de:	f001 fd77 	bl	80021d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e2:	f000 f835 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e6:	f000 f96f 	bl	80009c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006ea:	f000 f89b 	bl	8000824 <MX_I2C1_Init>
  MX_I2S3_Init();
 80006ee:	f000 f8c7 	bl	8000880 <MX_I2S3_Init>
  MX_SPI1_Init();
 80006f2:	f000 f909 	bl	8000908 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80006f6:	f009 fcbd 	bl	800a074 <MX_USB_HOST_Init>
  MX_RNG_Init();
 80006fa:	f000 f8f1 	bl	80008e0 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 f939 	bl	8000974 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <main+0x6c>)
 8000708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800070a:	4a0e      	ldr	r2, [pc, #56]	@ (8000744 <main+0x6c>)
 800070c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000710:	6353      	str	r3, [r2, #52]	@ 0x34
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <main+0x6c>)
 8000714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 800071e:	480a      	ldr	r0, [pc, #40]	@ (8000748 <main+0x70>)
 8000720:	f005 fda6 	bl	8006270 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <main+0x74>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	6898      	ldr	r0, [r3, #8]
 800072a:	2300      	movs	r3, #0
 800072c:	2202      	movs	r2, #2
 800072e:	2100      	movs	r1, #0
 8000730:	f00a f99a 	bl	800aa68 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_masked_chi_outofplace_single_lanes();
 8000734:	f001 f9d4 	bl	8001ae0 <test_masked_chi_outofplace_single_lanes>
	  test_masked_chi_against_reference_keccak();
 8000738:	f000 fe82 	bl	8001440 <test_masked_chi_against_reference_keccak>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800073c:	f009 fcc0 	bl	800a0c0 <MX_USB_HOST_Process>
	  test_masked_chi_outofplace_single_lanes();
 8000740:	bf00      	nop
 8000742:	e7f7      	b.n	8000734 <main+0x5c>
 8000744:	40023800 	.word	0x40023800
 8000748:	20000140 	.word	0x20000140
 800074c:	20000038 	.word	0x20000038

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	@ 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	@ 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f00a fb0e 	bl	800ad80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b28      	ldr	r3, [pc, #160]	@ (800081c <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077c:	4a27      	ldr	r2, [pc, #156]	@ (800081c <SystemClock_Config+0xcc>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	@ 0x40
 8000784:	4b25      	ldr	r3, [pc, #148]	@ (800081c <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b22      	ldr	r3, [pc, #136]	@ (8000820 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a21      	ldr	r2, [pc, #132]	@ (8000820 <SystemClock_Config+0xd0>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ac:	2301      	movs	r3, #1
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c0:	2308      	movs	r3, #8
 80007c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007ce:	2307      	movs	r3, #7
 80007d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 0320 	add.w	r3, r7, #32
 80007d6:	4618      	mov	r0, r3
 80007d8:	f004 ff70 	bl	80056bc <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007e2:	f000 f9ef 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2302      	movs	r3, #2
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	2105      	movs	r1, #5
 8000804:	4618      	mov	r0, r3
 8000806:	f005 f9d1 	bl	8005bac <HAL_RCC_ClockConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000810:	f000 f9d8 	bl	8000bc4 <Error_Handler>
  }
}
 8000814:	bf00      	nop
 8000816:	3750      	adds	r7, #80	@ 0x50
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_I2C1_Init+0x50>)
 800082a:	4a13      	ldr	r2, [pc, #76]	@ (8000878 <MX_I2C1_Init+0x54>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000830:	4a12      	ldr	r2, [pc, #72]	@ (800087c <MX_I2C1_Init+0x58>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_I2C1_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000842:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000846:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000848:	4b0a      	ldr	r3, [pc, #40]	@ (8000874 <MX_I2C1_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000854:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_I2C1_Init+0x50>)
 8000862:	f004 f947 	bl	8004af4 <HAL_I2C_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800086c:	f000 f9aa 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000a4 	.word	0x200000a4
 8000878:	40005400 	.word	0x40005400
 800087c:	000186a0 	.word	0x000186a0

08000880 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <MX_I2S3_Init+0x54>)
 8000886:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <MX_I2S3_Init+0x58>)
 8000888:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800088a:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_I2S3_Init+0x54>)
 800088c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000890:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <MX_I2S3_Init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_I2S3_Init+0x54>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <MX_I2S3_Init+0x54>)
 80008a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008a6:	4b0b      	ldr	r3, [pc, #44]	@ (80008d4 <MX_I2S3_Init+0x54>)
 80008a8:	4a0c      	ldr	r2, [pc, #48]	@ (80008dc <MX_I2S3_Init+0x5c>)
 80008aa:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008ac:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_I2S3_Init+0x54>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008b2:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <MX_I2S3_Init+0x54>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_I2S3_Init+0x54>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	@ (80008d4 <MX_I2S3_Init+0x54>)
 80008c0:	f004 fa5c 	bl	8004d7c <HAL_I2S_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ca:	f000 f97b 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000f8 	.word	0x200000f8
 80008d8:	40003c00 	.word	0x40003c00
 80008dc:	00017700 	.word	0x00017700

080008e0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_RNG_Init+0x20>)
 80008e6:	4a07      	ldr	r2, [pc, #28]	@ (8000904 <MX_RNG_Init+0x24>)
 80008e8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_RNG_Init+0x20>)
 80008ec:	f005 fcc0 	bl	8006270 <HAL_RNG_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80008f6:	f000 f965 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000140 	.word	0x20000140
 8000904:	50060800 	.word	0x50060800

08000908 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800090c:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_SPI1_Init+0x64>)
 800090e:	4a18      	ldr	r2, [pc, #96]	@ (8000970 <MX_SPI1_Init+0x68>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_SPI1_Init+0x64>)
 8000914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_SPI1_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_SPI1_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_SPI1_Init+0x64>)
 8000934:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000938:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_SPI1_Init+0x64>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000940:	4b0a      	ldr	r3, [pc, #40]	@ (800096c <MX_SPI1_Init+0x64>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_SPI1_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094c:	4b07      	ldr	r3, [pc, #28]	@ (800096c <MX_SPI1_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_SPI1_Init+0x64>)
 8000954:	220a      	movs	r2, #10
 8000956:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000958:	4804      	ldr	r0, [pc, #16]	@ (800096c <MX_SPI1_Init+0x64>)
 800095a:	f005 fd09 	bl	8006370 <HAL_SPI_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000964:	f000 f92e 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000150 	.word	0x20000150
 8000970:	40013000 	.word	0x40013000

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ac:	f005 fd69 	bl	8006482 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f905 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	200001a8 	.word	0x200001a8
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08c      	sub	sp, #48	@ 0x30
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	4b72      	ldr	r3, [pc, #456]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a71      	ldr	r2, [pc, #452]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 80009e8:	f043 0310 	orr.w	r3, r3, #16
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b6f      	ldr	r3, [pc, #444]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	61bb      	str	r3, [r7, #24]
 80009f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	4b6b      	ldr	r3, [pc, #428]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a6a      	ldr	r2, [pc, #424]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b68      	ldr	r3, [pc, #416]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	4b64      	ldr	r3, [pc, #400]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a63      	ldr	r2, [pc, #396]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b61      	ldr	r3, [pc, #388]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	4b5d      	ldr	r3, [pc, #372]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b5a      	ldr	r3, [pc, #360]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	4b56      	ldr	r3, [pc, #344]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a55      	ldr	r2, [pc, #340]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b53      	ldr	r3, [pc, #332]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0302 	and.w	r3, r3, #2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b4f      	ldr	r3, [pc, #316]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	4a4e      	ldr	r2, [pc, #312]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7a:	4b4c      	ldr	r3, [pc, #304]	@ (8000bac <MX_GPIO_Init+0x1e4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	f003 0308 	and.w	r3, r3, #8
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2108      	movs	r1, #8
 8000a8a:	4849      	ldr	r0, [pc, #292]	@ (8000bb0 <MX_GPIO_Init+0x1e8>)
 8000a8c:	f001 fee4 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a90:	2201      	movs	r2, #1
 8000a92:	2101      	movs	r1, #1
 8000a94:	4847      	ldr	r0, [pc, #284]	@ (8000bb4 <MX_GPIO_Init+0x1ec>)
 8000a96:	f001 fedf 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000aa0:	4845      	ldr	r0, [pc, #276]	@ (8000bb8 <MX_GPIO_Init+0x1f0>)
 8000aa2:	f001 fed9 	bl	8002858 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	483c      	ldr	r0, [pc, #240]	@ (8000bb0 <MX_GPIO_Init+0x1e8>)
 8000abe:	f001 fd2f 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4836      	ldr	r0, [pc, #216]	@ (8000bb4 <MX_GPIO_Init+0x1ec>)
 8000ada:	f001 fd21 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000ade:	2308      	movs	r3, #8
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aee:	2305      	movs	r3, #5
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	482e      	ldr	r0, [pc, #184]	@ (8000bb4 <MX_GPIO_Init+0x1ec>)
 8000afa:	f001 fd11 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afe:	2301      	movs	r3, #1
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b02:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	4619      	mov	r1, r3
 8000b12:	482a      	ldr	r0, [pc, #168]	@ (8000bbc <MX_GPIO_Init+0x1f4>)
 8000b14:	f001 fd04 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000b24:	f107 031c 	add.w	r3, r7, #28
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4825      	ldr	r0, [pc, #148]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000b2c:	f001 fcf8 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b42:	2305      	movs	r3, #5
 8000b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481c      	ldr	r0, [pc, #112]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000b4e:	f001 fce7 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b52:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000b56:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4813      	ldr	r0, [pc, #76]	@ (8000bb8 <MX_GPIO_Init+0x1f0>)
 8000b6c:	f001 fcd8 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b70:	2320      	movs	r3, #32
 8000b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <MX_GPIO_Init+0x1f0>)
 8000b84:	f001 fccc 	bl	8002520 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b8c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <MX_GPIO_Init+0x1e8>)
 8000b9e:	f001 fcbf 	bl	8002520 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3730      	adds	r7, #48	@ 0x30
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020c00 	.word	0x40020c00
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <Error_Handler+0x8>

08000bd0 <get_random64>:
#include "debug_log.h"// for HAL_RNG
  // or your specific STM32 HAL header

extern RNG_HandleTypeDef hrng;

uint64_t get_random64(void) {
 8000bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bd4:	b082      	sub	sp, #8
 8000bd6:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    HAL_RNG_GenerateRandomNumber(&hrng, &r1);
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4810      	ldr	r0, [pc, #64]	@ (8000c20 <get_random64+0x50>)
 8000bde:	f005 fb71 	bl	80062c4 <HAL_RNG_GenerateRandomNumber>
    HAL_RNG_GenerateRandomNumber(&hrng, &r2);
 8000be2:	463b      	mov	r3, r7
 8000be4:	4619      	mov	r1, r3
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <get_random64+0x50>)
 8000be8:	f005 fb6c 	bl	80062c4 <HAL_RNG_GenerateRandomNumber>
    return ((uint64_t)r1 << 32) | r2;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	469a      	mov	sl, r3
 8000bf2:	4693      	mov	fp, r2
 8000bf4:	f04f 0200 	mov.w	r2, #0
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	4653      	mov	r3, sl
 8000bfe:	2200      	movs	r2, #0
 8000c00:	6839      	ldr	r1, [r7, #0]
 8000c02:	2000      	movs	r0, #0
 8000c04:	460c      	mov	r4, r1
 8000c06:	4605      	mov	r5, r0
 8000c08:	ea42 0804 	orr.w	r8, r2, r4
 8000c0c:	ea43 0905 	orr.w	r9, r3, r5
 8000c10:	4642      	mov	r2, r8
 8000c12:	464b      	mov	r3, r9
}
 8000c14:	4610      	mov	r0, r2
 8000c16:	4619      	mov	r1, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c20:	20000140 	.word	0x20000140

08000c24 <masked_not>:
/* ─── tiny helper: masked bitwise NOT (Boolean shares) ───────────────── */
/* ─── Boolean-masked bitwise NOT ───────────────────────────────────────
   dst ← ¬src   (while preserving the XOR-mask invariant)              */
void masked_not(masked_uint64_t *dst,
                              const masked_uint64_t *src)
{
 8000c24:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c28:	b092      	sub	sp, #72	@ 0x48
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	61f8      	str	r0, [r7, #28]
 8000c2e:	61b9      	str	r1, [r7, #24]
    /* 1.  Invert every share ------------------------------------------ */
    for (size_t i = 0; i < MASKING_N; ++i)
 8000c30:	2300      	movs	r3, #0
 8000c32:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c34:	e012      	b.n	8000c5c <masked_not+0x38>
        dst->share[i] = ~src->share[i];
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c3a:	00db      	lsls	r3, r3, #3
 8000c3c:	4413      	add	r3, r2
 8000c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c42:	ea6f 0802 	mvn.w	r8, r2
 8000c46:	ea6f 0903 	mvn.w	r9, r3
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	4413      	add	r3, r2
 8000c52:	e9c3 8900 	strd	r8, r9, [r3]
    for (size_t i = 0; i < MASKING_N; ++i)
 8000c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c58:	3301      	adds	r3, #1
 8000c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d9e9      	bls.n	8000c36 <masked_not+0x12>

    /* 2.  Re-align the mask so that XOR(shares) == ¬XOR(original) ----- */
    uint64_t orig_parity = 0, inv_parity = 0;
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	f04f 0300 	mov.w	r3, #0
 8000c6a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	f04f 0300 	mov.w	r3, #0
 8000c76:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c7e:	e024      	b.n	8000cca <masked_not+0xa6>
        orig_parity ^= src->share[i];
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	4413      	add	r3, r2
 8000c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000c90:	ea80 0602 	eor.w	r6, r0, r2
 8000c94:	613e      	str	r6, [r7, #16]
 8000c96:	404b      	eors	r3, r1
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c9e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        inv_parity  ^= dst->share[i];
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4413      	add	r3, r2
 8000caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cae:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000cb2:	ea80 0602 	eor.w	r6, r0, r2
 8000cb6:	60be      	str	r6, [r7, #8]
 8000cb8:	404b      	eors	r3, r1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000cc0:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 8000cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9d7      	bls.n	8000c80 <masked_not+0x5c>
    }
    /* delta is the amount by which the parity is off */
    uint64_t delta = inv_parity ^ ~orig_parity;
 8000cd0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000cd8:	ea80 0402 	eor.w	r4, r0, r2
 8000cdc:	ea81 0503 	eor.w	r5, r1, r3
 8000ce0:	43e3      	mvns	r3, r4
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	43eb      	mvns	r3, r5
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000cec:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* flip ‘delta’ in ONE share (here: share 0) */
    dst->share[0] ^= delta;
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000cfa:	ea80 0a02 	eor.w	sl, r0, r2
 8000cfe:	ea81 0b03 	eor.w	fp, r1, r3
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	e9c3 ab00 	strd	sl, fp, [r3]
}
 8000d08:	bf00      	nop
 8000d0a:	3748      	adds	r7, #72	@ 0x48
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000d12:	4770      	bx	lr

08000d14 <fill_random_matrix>:
               hi, lo, ehi, elo);
        return 1;
    }
}

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 8000d14:	b5b0      	push	{r4, r5, r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	e037      	b.n	8000d92 <fill_random_matrix+0x7e>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	e020      	b.n	8000d6c <fill_random_matrix+0x58>
            uint64_t val = get_random64();
 8000d2a:	f7ff ff51 	bl	8000bd0 <get_random64>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	17da      	asrs	r2, r3, #31
 8000d32:	461c      	mov	r4, r3
 8000d34:	4615      	mov	r5, r2
 8000d36:	e9c7 4502 	strd	r4, r5, [r7, #8]
            r[i][j] = val;
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	015b      	lsls	r3, r3, #5
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	441a      	add	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	18d1      	adds	r1, r2, r3
 8000d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d4c:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry!
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	015b      	lsls	r3, r3, #5
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	441a      	add	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	18d1      	adds	r1, r2, r3
 8000d5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d62:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	2b03      	cmp	r3, #3
 8000d70:	d9db      	bls.n	8000d2a <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	015b      	lsls	r3, r3, #5
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	441a      	add	r2, r3
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	18d1      	adds	r1, r2, r3
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	f04f 0300 	mov.w	r3, #0
 8000d88:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	617b      	str	r3, [r7, #20]
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	d9c4      	bls.n	8000d22 <fill_random_matrix+0xe>
    }
}
 8000d98:	bf00      	nop
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bdb0      	pop	{r4, r5, r7, pc}

08000da2 <masked_xor>:



void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 8000da2:	b4b0      	push	{r4, r5, r7}
 8000da4:	b087      	sub	sp, #28
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	60f8      	str	r0, [r7, #12]
 8000daa:	60b9      	str	r1, [r7, #8]
 8000dac:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	e018      	b.n	8000de6 <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 8000db4:	68ba      	ldr	r2, [r7, #8]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	4413      	add	r3, r2
 8000dbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dc0:	687a      	ldr	r2, [r7, #4]
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	00db      	lsls	r3, r3, #3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	ea80 0402 	eor.w	r4, r0, r2
 8000dd0:	ea81 0503 	eor.w	r5, r1, r3
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4413      	add	r3, r2
 8000ddc:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	3301      	adds	r3, #1
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d9e3      	bls.n	8000db4 <masked_xor+0x12>
    }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bcb0      	pop	{r4, r5, r7}
 8000df6:	4770      	bx	lr

08000df8 <masked_and>:

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N])
{
 8000df8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000dfc:	b097      	sub	sp, #92	@ 0x5c
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8000e02:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000e04:	627a      	str	r2, [r7, #36]	@ 0x24
 8000e06:	623b      	str	r3, [r7, #32]
    /* diagonal terms --------------------------------------------------- */
    for (size_t i = 0; i < MASKING_N; ++i)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8000e0c:	e018      	b.n	8000e40 <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 8000e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	4413      	add	r3, r2
 8000e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	4413      	add	r3, r2
 8000e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e26:	ea00 0402 	and.w	r4, r0, r2
 8000e2a:	ea01 0503 	and.w	r5, r1, r3
 8000e2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	4413      	add	r3, r2
 8000e36:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; ++i)
 8000e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8000e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d9e3      	bls.n	8000e0e <masked_and+0x16>

    /* cross terms ------------------------------------------------------ */
    for (size_t i = 0; i < MASKING_N; ++i)
 8000e46:	2300      	movs	r3, #0
 8000e48:	653b      	str	r3, [r7, #80]	@ 0x50
 8000e4a:	e079      	b.n	8000f40 <masked_and+0x148>
        for (size_t j = i + 1; j < MASKING_N; ++j) {
 8000e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e4e:	3301      	adds	r3, #1
 8000e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000e52:	e06f      	b.n	8000f34 <masked_and+0x13c>

            uint64_t rij   = r[i][j];
 8000e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e56:	015b      	lsls	r3, r3, #5
 8000e58:	6a3a      	ldr	r2, [r7, #32]
 8000e5a:	441a      	add	r2, r3
 8000e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	4413      	add	r3, r2
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

            uint64_t t_ij  = (a->share[i] & b->share[j]) ^ rij;
 8000e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	4413      	add	r3, r2
 8000e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	ea00 0802 	and.w	r8, r0, r2
 8000e86:	ea01 0903 	and.w	r9, r1, r3
 8000e8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000e8e:	ea82 0108 	eor.w	r1, r2, r8
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	ea83 0309 	eor.w	r3, r3, r9
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000e9e:	e9c7 340e 	strd	r3, r4, [r7, #56]	@ 0x38
            uint64_t t_ji  = (a->share[j] & b->share[i]) ^ rij;
 8000ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000eb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	ea00 0a02 	and.w	sl, r0, r2
 8000ebe:	ea01 0b03 	and.w	fp, r1, r3
 8000ec2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000ec6:	ea82 010a 	eor.w	r1, r2, sl
 8000eca:	6039      	str	r1, [r7, #0]
 8000ecc:	ea83 030b 	eor.w	r3, r3, fp
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000ed6:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            out->share[i] ^= t_ij;   /* add to share i */
 8000eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ee6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000eea:	ea80 0402 	eor.w	r4, r0, r2
 8000eee:	61bc      	str	r4, [r7, #24]
 8000ef0:	404b      	eors	r3, r1
 8000ef2:	61fb      	str	r3, [r7, #28]
 8000ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	4413      	add	r3, r2
 8000efc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000f00:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= t_ji;   /* add to share j */
 8000f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	4413      	add	r3, r2
 8000f0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000f14:	ea80 0402 	eor.w	r4, r0, r2
 8000f18:	613c      	str	r4, [r7, #16]
 8000f1a:	404b      	eors	r3, r1
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	4413      	add	r3, r2
 8000f26:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000f2a:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; ++j) {
 8000f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f30:	3301      	adds	r3, #1
 8000f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d98c      	bls.n	8000e54 <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; ++i)
 8000f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8000f40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d982      	bls.n	8000e4c <masked_and+0x54>
        }
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	375c      	adds	r7, #92	@ 0x5c
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000f52:	4770      	bx	lr

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_MspInit+0x4c>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f92:	2007      	movs	r0, #7
 8000f94:	f001 fa82 	bl	800249c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a19      	ldr	r2, [pc, #100]	@ (8001028 <HAL_I2C_MspInit+0x84>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d12c      	bne.n	8001020 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_I2C_MspInit+0x88>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a17      	ldr	r2, [pc, #92]	@ (800102c <HAL_I2C_MspInit+0x88>)
 8000fd0:	f043 0302 	orr.w	r3, r3, #2
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_I2C_MspInit+0x88>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000fe2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe8:	2312      	movs	r3, #18
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480c      	ldr	r0, [pc, #48]	@ (8001030 <HAL_I2C_MspInit+0x8c>)
 8001000:	f001 fa8e 	bl	8002520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_I2C_MspInit+0x88>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	4a07      	ldr	r2, [pc, #28]	@ (800102c <HAL_I2C_MspInit+0x88>)
 800100e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001012:	6413      	str	r3, [r2, #64]	@ 0x40
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <HAL_I2C_MspInit+0x88>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	@ 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40005400 	.word	0x40005400
 800102c:	40023800 	.word	0x40023800
 8001030:	40020400 	.word	0x40020400

08001034 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	@ 0x38
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a31      	ldr	r2, [pc, #196]	@ (8001124 <HAL_I2S_MspInit+0xf0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d15a      	bne.n	800111a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001064:	2301      	movs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001068:	23c0      	movs	r3, #192	@ 0xc0
 800106a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800106c:	2302      	movs	r3, #2
 800106e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4618      	mov	r0, r3
 8001076:	f004 ffb9 	bl	8005fec <HAL_RCCEx_PeriphCLKConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001080:	f7ff fda0 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <HAL_I2S_MspInit+0xf4>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108c:	4a26      	ldr	r2, [pc, #152]	@ (8001128 <HAL_I2S_MspInit+0xf4>)
 800108e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001092:	6413      	str	r3, [r2, #64]	@ 0x40
 8001094:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <HAL_I2S_MspInit+0xf4>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4b20      	ldr	r3, [pc, #128]	@ (8001128 <HAL_I2S_MspInit+0xf4>)
 80010a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001128 <HAL_I2S_MspInit+0xf4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001128 <HAL_I2S_MspInit+0xf4>)
 80010b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <HAL_I2S_MspInit+0xf4>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c4:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <HAL_I2S_MspInit+0xf4>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80010cc:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <HAL_I2S_MspInit+0xf4>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010d8:	2310      	movs	r3, #16
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010e8:	2306      	movs	r3, #6
 80010ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010f0:	4619      	mov	r1, r3
 80010f2:	480e      	ldr	r0, [pc, #56]	@ (800112c <HAL_I2S_MspInit+0xf8>)
 80010f4:	f001 fa14 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010f8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800110a:	2306      	movs	r3, #6
 800110c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001112:	4619      	mov	r1, r3
 8001114:	4806      	ldr	r0, [pc, #24]	@ (8001130 <HAL_I2S_MspInit+0xfc>)
 8001116:	f001 fa03 	bl	8002520 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800111a:	bf00      	nop
 800111c:	3738      	adds	r7, #56	@ 0x38
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40003c00 	.word	0x40003c00
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020800 	.word	0x40020800

08001134 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0b      	ldr	r2, [pc, #44]	@ (8001170 <HAL_RNG_MspInit+0x3c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d10d      	bne.n	8001162 <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <HAL_RNG_MspInit+0x40>)
 800114c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800114e:	4a09      	ldr	r2, [pc, #36]	@ (8001174 <HAL_RNG_MspInit+0x40>)
 8001150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001154:	6353      	str	r3, [r2, #52]	@ 0x34
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <HAL_RNG_MspInit+0x40>)
 8001158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800115a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	50060800 	.word	0x50060800
 8001174:	40023800 	.word	0x40023800

08001178 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	@ 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a19      	ldr	r2, [pc, #100]	@ (80011fc <HAL_SPI_MspInit+0x84>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d12b      	bne.n	80011f2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a10      	ldr	r2, [pc, #64]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <HAL_SPI_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011d2:	23e0      	movs	r3, #224	@ 0xe0
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011e2:	2305      	movs	r3, #5
 80011e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	@ (8001204 <HAL_SPI_MspInit+0x8c>)
 80011ee:	f001 f997 	bl	8002520 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	@ 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40013000 	.word	0x40013000
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000

08001208 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a19      	ldr	r2, [pc, #100]	@ (800128c <HAL_UART_MspInit+0x84>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d12b      	bne.n	8001282 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <HAL_UART_MspInit+0x88>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	4a17      	ldr	r2, [pc, #92]	@ (8001290 <HAL_UART_MspInit+0x88>)
 8001234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001238:	6413      	str	r3, [r2, #64]	@ 0x40
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_UART_MspInit+0x88>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <HAL_UART_MspInit+0x88>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a10      	ldr	r2, [pc, #64]	@ (8001290 <HAL_UART_MspInit+0x88>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <HAL_UART_MspInit+0x88>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001262:	230c      	movs	r3, #12
 8001264:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001272:	2307      	movs	r3, #7
 8001274:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	@ (8001294 <HAL_UART_MspInit+0x8c>)
 800127e:	f001 f94f 	bl	8002520 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40004400 	.word	0x40004400
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <NMI_Handler+0x4>

080012a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <MemManage_Handler+0x4>

080012b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <UsageFault_Handler+0x4>

080012c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ee:	f000 ffc1 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80012fc:	4802      	ldr	r0, [pc, #8]	@ (8001308 <OTG_FS_IRQHandler+0x10>)
 80012fe:	f001 fda5 	bl	8002e4c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200005d4 	.word	0x200005d4

0800130c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	e00a      	b.n	8001334 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800131e:	f3af 8000 	nop.w
 8001322:	4601      	mov	r1, r0
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	b2ca      	uxtb	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbf0      	blt.n	800131e <_read+0x12>
  }

  return len;
 800133c:	687b      	ldr	r3, [r7, #4]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800136e:	605a      	str	r2, [r3, #4]
  return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_isatty>:

int _isatty(int file)
{
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b8:	4a14      	ldr	r2, [pc, #80]	@ (800140c <_sbrk+0x5c>)
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <_sbrk+0x60>)
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <_sbrk+0x64>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <_sbrk+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d207      	bcs.n	80013f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e0:	f009 fd2c 	bl	800ae3c <__errno>
 80013e4:	4603      	mov	r3, r0
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e009      	b.n	8001404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a05      	ldr	r2, [pc, #20]	@ (8001414 <_sbrk+0x64>)
 8001400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20020000 	.word	0x20020000
 8001410:	00000400 	.word	0x00000400
 8001414:	200001f0 	.word	0x200001f0
 8001418:	20000b00 	.word	0x20000b00

0800141c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001420:	4b06      	ldr	r3, [pc, #24]	@ (800143c <SystemInit+0x20>)
 8001422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <SystemInit+0x20>)
 8001428:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <test_masked_chi_against_reference_keccak>:
#include <stdio.h>       // for printf
#include "masked_gadgets.h"
#include "params.h"
#include "keccak.h"

int test_masked_chi_against_reference_keccak(void) {
 8001440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001444:	f5ad 5da5 	sub.w	sp, sp, #5280	@ 0x14a0
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
    int fail_count = 0;
 800144c:	2600      	movs	r6, #0
 800144e:	f507 5ca5 	add.w	ip, r7, #5280	@ 0x14a0
 8001452:	f10c 0c0c 	add.w	ip, ip, #12
 8001456:	f8cc 6000 	str.w	r6, [ip]

    // 1. Initialize known Keccak state (25 lanes)
    uint64_t input_state[25];
    for (int i = 0; i < 25; i++) {
 800145a:	2600      	movs	r6, #0
 800145c:	f507 5ca5 	add.w	ip, r7, #5280	@ 0x14a0
 8001460:	f10c 0c08 	add.w	ip, ip, #8
 8001464:	f8cc 6000 	str.w	r6, [ip]
 8001468:	e030      	b.n	80014cc <test_masked_chi_against_reference_keccak+0x8c>
        input_state[i] = i * 0x123456789ABCDEFULL;
 800146a:	f507 56a5 	add.w	r6, r7, #5280	@ 0x14a0
 800146e:	f106 0608 	add.w	r6, r6, #8
 8001472:	6836      	ldr	r6, [r6, #0]
 8001474:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 8001478:	4630      	mov	r0, r6
 800147a:	4661      	mov	r1, ip
 800147c:	4ec7      	ldr	r6, [pc, #796]	@ (800179c <test_masked_chi_against_reference_keccak+0x35c>)
 800147e:	fb06 fc01 	mul.w	ip, r6, r1
 8001482:	4ec7      	ldr	r6, [pc, #796]	@ (80017a0 <test_masked_chi_against_reference_keccak+0x360>)
 8001484:	fb00 f606 	mul.w	r6, r0, r6
 8001488:	44b4      	add	ip, r6
 800148a:	4ec4      	ldr	r6, [pc, #784]	@ (800179c <test_masked_chi_against_reference_keccak+0x35c>)
 800148c:	fba0 2306 	umull	r2, r3, r0, r6
 8001490:	eb0c 0603 	add.w	r6, ip, r3
 8001494:	4633      	mov	r3, r6
 8001496:	f507 56a5 	add.w	r6, r7, #5280	@ 0x14a0
 800149a:	f106 0610 	add.w	r6, r6, #16
 800149e:	f5a6 7c94 	sub.w	ip, r6, #296	@ 0x128
 80014a2:	f507 56a5 	add.w	r6, r7, #5280	@ 0x14a0
 80014a6:	f106 0608 	add.w	r6, r6, #8
 80014aa:	6836      	ldr	r6, [r6, #0]
 80014ac:	00f6      	lsls	r6, r6, #3
 80014ae:	4466      	add	r6, ip
 80014b0:	e9c6 2300 	strd	r2, r3, [r6]
    for (int i = 0; i < 25; i++) {
 80014b4:	f507 56a5 	add.w	r6, r7, #5280	@ 0x14a0
 80014b8:	f106 0608 	add.w	r6, r6, #8
 80014bc:	6836      	ldr	r6, [r6, #0]
 80014be:	3601      	adds	r6, #1
 80014c0:	f507 5ca5 	add.w	ip, r7, #5280	@ 0x14a0
 80014c4:	f10c 0c08 	add.w	ip, ip, #8
 80014c8:	f8cc 6000 	str.w	r6, [ip]
 80014cc:	f507 56a5 	add.w	r6, r7, #5280	@ 0x14a0
 80014d0:	f106 0608 	add.w	r6, r6, #8
 80014d4:	6836      	ldr	r6, [r6, #0]
 80014d6:	2e18      	cmp	r6, #24
 80014d8:	ddc7      	ble.n	800146a <test_masked_chi_against_reference_keccak+0x2a>
    }

    // 2. Copy and run reference chi() on unmasked state
    uint64_t reference_state[25];
    memcpy(reference_state, input_state, sizeof(input_state));
 80014da:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 80014de:	f103 0310 	add.w	r3, r3, #16
 80014e2:	f5a3 72f8 	sub.w	r2, r3, #496	@ 0x1f0
 80014e6:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 80014ea:	f103 0310 	add.w	r3, r3, #16
 80014ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	23c8      	movs	r3, #200	@ 0xc8
 80014f8:	461a      	mov	r2, r3
 80014fa:	f009 fccc 	bl	800ae96 <memcpy>
    chi(reference_state); // from your reference keccak.c
 80014fe:	f507 5396 	add.w	r3, r7, #4800	@ 0x12c0
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f84a 	bl	800059c <chi>

    // 3. Build 5x5 masked input
    masked_uint64_t masked_in[5][5];
    for (int y = 0; y < 5; y++) {
 8001508:	2300      	movs	r3, #0
 800150a:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 800150e:	f102 0204 	add.w	r2, r2, #4
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e0c9      	b.n	80016aa <test_masked_chi_against_reference_keccak+0x26a>
        for (int x = 0; x < 5; x++) {
 8001516:	2300      	movs	r3, #0
 8001518:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	e0b3      	b.n	8001688 <test_masked_chi_against_reference_keccak+0x248>
            uint64_t val = input_state[y * 5 + x];
 8001520:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 8001524:	f103 0304 	add.w	r3, r3, #4
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	441a      	add	r2, r3
 8001530:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4413      	add	r3, r2
 8001538:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 800153c:	f102 0210 	add.w	r2, r2, #16
 8001540:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f507 51a2 	add.w	r1, r7, #5184	@ 0x1440
 8001550:	f101 0110 	add.w	r1, r1, #16
 8001554:	e9c1 2300 	strd	r2, r3, [r1]
            uint64_t tmp = val;
 8001558:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800155c:	f103 0310 	add.w	r3, r3, #16
 8001560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001564:	f507 51a4 	add.w	r1, r7, #5248	@ 0x1480
 8001568:	f101 0118 	add.w	r1, r1, #24
 800156c:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 1; i < MASKING_N; i++) {
 8001570:	2301      	movs	r3, #1
 8001572:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 8001576:	f102 0214 	add.w	r2, r2, #20
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	e05a      	b.n	8001634 <test_masked_chi_against_reference_keccak+0x1f4>
                masked_in[x][y].share[i] = get_random64();
 800157e:	f7ff fb27 	bl	8000bd0 <get_random64>
 8001582:	4603      	mov	r3, r0
 8001584:	17da      	asrs	r2, r3, #31
 8001586:	469a      	mov	sl, r3
 8001588:	4693      	mov	fp, r2
 800158a:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 800158e:	f103 0310 	add.w	r3, r3, #16
 8001592:	f5a3 61a2 	sub.w	r1, r3, #1296	@ 0x510
 8001596:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4613      	mov	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	4413      	add	r3, r2
 80015a2:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 80015a6:	f102 0204 	add.w	r2, r2, #4
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	009a      	lsls	r2, r3, #2
 80015b0:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 80015b4:	f103 0314 	add.w	r3, r3, #20
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	00db      	lsls	r3, r3, #3
 80015be:	440b      	add	r3, r1
 80015c0:	e9c3 ab00 	strd	sl, fp, [r3]
                tmp ^= masked_in[x][y].share[i];
 80015c4:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 80015c8:	f103 0310 	add.w	r3, r3, #16
 80015cc:	f5a3 61a2 	sub.w	r1, r3, #1296	@ 0x510
 80015d0:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 80015e0:	f102 0204 	add.w	r2, r2, #4
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	009a      	lsls	r2, r3, #2
 80015ea:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 80015ee:	f103 0314 	add.w	r3, r3, #20
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	440b      	add	r3, r1
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f507 51a4 	add.w	r1, r7, #5248	@ 0x1480
 8001602:	f101 0118 	add.w	r1, r1, #24
 8001606:	e9d1 0100 	ldrd	r0, r1, [r1]
 800160a:	ea80 0802 	eor.w	r8, r0, r2
 800160e:	ea81 0903 	eor.w	r9, r1, r3
 8001612:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 8001616:	f103 0318 	add.w	r3, r3, #24
 800161a:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 1; i < MASKING_N; i++) {
 800161e:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 8001622:	f103 0314 	add.w	r3, r3, #20
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 800162e:	f102 0214 	add.w	r2, r2, #20
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 8001638:	f103 0314 	add.w	r3, r3, #20
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b03      	cmp	r3, #3
 8001640:	dd9d      	ble.n	800157e <test_masked_chi_against_reference_keccak+0x13e>
            }
            masked_in[x][y].share[0] = tmp;
 8001642:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 8001646:	f103 0310 	add.w	r3, r3, #16
 800164a:	f5a3 61a2 	sub.w	r1, r3, #1296	@ 0x510
 800164e:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 800165e:	f102 0204 	add.w	r2, r2, #4
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4413      	add	r3, r2
 8001666:	015b      	lsls	r3, r3, #5
 8001668:	4419      	add	r1, r3
 800166a:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 800166e:	f103 0318 	add.w	r3, r3, #24
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; x++) {
 800167a:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b04      	cmp	r3, #4
 8001690:	f77f af46 	ble.w	8001520 <test_masked_chi_against_reference_keccak+0xe0>
    for (int y = 0; y < 5; y++) {
 8001694:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 8001698:	f103 0304 	add.w	r3, r3, #4
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 80016a4:	f102 0204 	add.w	r2, r2, #4
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 80016ae:	f103 0304 	add.w	r3, r3, #4
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b04      	cmp	r3, #4
 80016b6:	f77f af2e 	ble.w	8001516 <test_masked_chi_against_reference_keccak+0xd6>
    }

    // 4. Allocate output + randomness and run masked Chi
    masked_uint64_t masked_out[5][5];
    uint64_t r[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; y++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 80016c0:	f102 0210 	add.w	r2, r2, #16
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e039      	b.n	800173c <test_masked_chi_against_reference_keccak+0x2fc>
        for (int x = 0; x < 5; x++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 80016ce:	f102 020c 	add.w	r2, r2, #12
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	e020      	b.n	8001718 <test_masked_chi_against_reference_keccak+0x2d8>
            fill_random_matrix(r[x][y]);
 80016d6:	f107 0210 	add.w	r2, r7, #16
 80016da:	3a10      	subs	r2, #16
 80016dc:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 80016e0:	f103 030c 	add.w	r3, r3, #12
 80016e4:	6819      	ldr	r1, [r3, #0]
 80016e6:	460b      	mov	r3, r1
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	f507 51a4 	add.w	r1, r7, #5248	@ 0x1480
 80016f0:	f101 0110 	add.w	r1, r1, #16
 80016f4:	6809      	ldr	r1, [r1, #0]
 80016f6:	440b      	add	r3, r1
 80016f8:	01db      	lsls	r3, r3, #7
 80016fa:	4413      	add	r3, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb09 	bl	8000d14 <fill_random_matrix>
        for (int x = 0; x < 5; x++)
 8001702:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 8001706:	f103 030c 	add.w	r3, r3, #12
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 8001712:	f102 020c 	add.w	r2, r2, #12
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 800171c:	f103 030c 	add.w	r3, r3, #12
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b04      	cmp	r3, #4
 8001724:	ddd7      	ble.n	80016d6 <test_masked_chi_against_reference_keccak+0x296>
    for (int y = 0; y < 5; y++)
 8001726:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 800172a:	f103 0310 	add.w	r3, r3, #16
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	3301      	adds	r3, #1
 8001732:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 8001736:	f102 0210 	add.w	r2, r2, #16
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 8001740:	f103 0310 	add.w	r3, r3, #16
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b04      	cmp	r3, #4
 8001748:	ddbe      	ble.n	80016c8 <test_masked_chi_against_reference_keccak+0x288>

    masked_chi_outofplace(masked_out, masked_in, r);
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	3b10      	subs	r3, #16
 8001750:	f507 617a 	add.w	r1, r7, #4000	@ 0xfa0
 8001754:	f507 6048 	add.w	r0, r7, #3200	@ 0xc80
 8001758:	461a      	mov	r2, r3
 800175a:	f000 f93d 	bl	80019d8 <masked_chi_outofplace>

    // 5. Compare each output lane
    for (int y = 0; y < 5; y++) {
 800175e:	2300      	movs	r3, #0
 8001760:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 8001764:	f102 0208 	add.w	r2, r2, #8
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e10e      	b.n	800198a <test_masked_chi_against_reference_keccak+0x54a>
        for (int x = 0; x < 5; x++) {
 800176c:	2300      	movs	r3, #0
 800176e:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 8001772:	f102 0204 	add.w	r2, r2, #4
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	e0f4      	b.n	8001964 <test_masked_chi_against_reference_keccak+0x524>
            uint64_t recombined = 0;
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	f507 51a3 	add.w	r1, r7, #5216	@ 0x1460
 8001786:	f101 0118 	add.w	r1, r1, #24
 800178a:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 800178e:	2300      	movs	r3, #0
 8001790:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 8001794:	f102 0214 	add.w	r2, r2, #20
 8001798:	6013      	str	r3, [r2, #0]
 800179a:	e03d      	b.n	8001818 <test_masked_chi_against_reference_keccak+0x3d8>
 800179c:	89abcdef 	.word	0x89abcdef
 80017a0:	01234567 	.word	0x01234567
                recombined ^= masked_out[x][y].share[i];
 80017a4:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 80017a8:	f103 0310 	add.w	r3, r3, #16
 80017ac:	f5a3 6103 	sub.w	r1, r3, #2096	@ 0x830
 80017b0:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 80017b4:	f103 0304 	add.w	r3, r3, #4
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 80017c4:	f102 0208 	add.w	r2, r2, #8
 80017c8:	6812      	ldr	r2, [r2, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	009a      	lsls	r2, r3, #2
 80017ce:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 80017d2:	f103 0314 	add.w	r3, r3, #20
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	440b      	add	r3, r1
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f507 51a3 	add.w	r1, r7, #5216	@ 0x1460
 80017e6:	f101 0118 	add.w	r1, r1, #24
 80017ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017ee:	ea80 0402 	eor.w	r4, r0, r2
 80017f2:	ea81 0503 	eor.w	r5, r1, r3
 80017f6:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 80017fa:	f103 0318 	add.w	r3, r3, #24
 80017fe:	e9c3 4500 	strd	r4, r5, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 8001802:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8001806:	f103 0314 	add.w	r3, r3, #20
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 8001812:	f102 0214 	add.w	r2, r2, #20
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 800181c:	f103 0314 	add.w	r3, r3, #20
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b03      	cmp	r3, #3
 8001824:	ddbe      	ble.n	80017a4 <test_masked_chi_against_reference_keccak+0x364>
            }

            uint64_t expected = reference_state[y * 5 + x];
 8001826:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 800182a:	f103 0308 	add.w	r3, r3, #8
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	441a      	add	r2, r3
 8001836:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 800183a:	f103 0304 	add.w	r3, r3, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4413      	add	r3, r2
 8001842:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 8001846:	f102 0210 	add.w	r2, r2, #16
 800184a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4413      	add	r3, r2
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f507 51a3 	add.w	r1, r7, #5216	@ 0x1460
 800185a:	f101 0108 	add.w	r1, r1, #8
 800185e:	e9c1 2300 	strd	r2, r3, [r1]
            if (recombined != expected) {
 8001862:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8001866:	f103 0318 	add.w	r3, r3, #24
 800186a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800186e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8001872:	f103 0308 	add.w	r3, r3, #8
 8001876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187a:	4299      	cmp	r1, r3
 800187c:	bf08      	it	eq
 800187e:	4290      	cmpeq	r0, r2
 8001880:	d065      	beq.n	800194e <test_masked_chi_against_reference_keccak+0x50e>
                uint32_t rh = (uint32_t)(recombined >> 32);
 8001882:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8001886:	f103 0318 	add.w	r3, r3, #24
 800188a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800188e:	f04f 0200 	mov.w	r2, #0
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	000a      	movs	r2, r1
 8001898:	2300      	movs	r3, #0
 800189a:	4613      	mov	r3, r2
 800189c:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 80018a0:	f102 0204 	add.w	r2, r2, #4
 80018a4:	6013      	str	r3, [r2, #0]
                uint32_t rl = (uint32_t)(recombined & 0xFFFFFFFF);
 80018a6:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 80018aa:	f103 0318 	add.w	r3, r3, #24
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f507 52a3 	add.w	r2, r7, #5216	@ 0x1460
 80018b4:	6013      	str	r3, [r2, #0]
                uint32_t eh = (uint32_t)(expected >> 32);
 80018b6:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 80018ba:	f103 0308 	add.w	r3, r3, #8
 80018be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	000a      	movs	r2, r1
 80018cc:	2300      	movs	r3, #0
 80018ce:	4613      	mov	r3, r2
 80018d0:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 80018d4:	f102 021c 	add.w	r2, r2, #28
 80018d8:	6013      	str	r3, [r2, #0]
                uint32_t el = (uint32_t)(expected & 0xFFFFFFFF);
 80018da:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 80018de:	f103 0308 	add.w	r3, r3, #8
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 80018e8:	f102 0218 	add.w	r2, r2, #24
 80018ec:	6013      	str	r3, [r2, #0]

                printf("FAIL: RefChi[%d][%d] mismatch\r\n", x, y);
 80018ee:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 80018f2:	f103 0308 	add.w	r3, r3, #8
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 80018fc:	f103 0304 	add.w	r3, r3, #4
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	4831      	ldr	r0, [pc, #196]	@ (80019c8 <test_masked_chi_against_reference_keccak+0x588>)
 8001904:	f009 f840 	bl	800a988 <iprintf>
                printf("  Got:      %08lX%08lX\r\n", (unsigned long)rh, (unsigned long)rl);
 8001908:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f507 53a3 	add.w	r3, r7, #5216	@ 0x1460
 8001912:	f103 0304 	add.w	r3, r3, #4
 8001916:	6819      	ldr	r1, [r3, #0]
 8001918:	482c      	ldr	r0, [pc, #176]	@ (80019cc <test_masked_chi_against_reference_keccak+0x58c>)
 800191a:	f009 f835 	bl	800a988 <iprintf>
                printf("  Expected: %08lX%08lX\r\n", (unsigned long)eh, (unsigned long)el);
 800191e:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8001922:	f103 0318 	add.w	r3, r3, #24
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800192c:	f103 031c 	add.w	r3, r3, #28
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	4827      	ldr	r0, [pc, #156]	@ (80019d0 <test_masked_chi_against_reference_keccak+0x590>)
 8001934:	f009 f828 	bl	800a988 <iprintf>
                fail_count++;
 8001938:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 800193c:	f103 030c 	add.w	r3, r3, #12
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	3301      	adds	r3, #1
 8001944:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 8001948:	f102 020c 	add.w	r2, r2, #12
 800194c:	6013      	str	r3, [r2, #0]
        for (int x = 0; x < 5; x++) {
 800194e:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 8001952:	f103 0304 	add.w	r3, r3, #4
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 800195e:	f102 0204 	add.w	r2, r2, #4
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 8001968:	f103 0304 	add.w	r3, r3, #4
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b04      	cmp	r3, #4
 8001970:	f77f af03 	ble.w	800177a <test_masked_chi_against_reference_keccak+0x33a>
    for (int y = 0; y < 5; y++) {
 8001974:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 8001978:	f103 0308 	add.w	r3, r3, #8
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	f507 52a4 	add.w	r2, r7, #5248	@ 0x1480
 8001984:	f102 0208 	add.w	r2, r2, #8
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	f507 53a4 	add.w	r3, r7, #5248	@ 0x1480
 800198e:	f103 0308 	add.w	r3, r3, #8
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b04      	cmp	r3, #4
 8001996:	f77f aee9 	ble.w	800176c <test_masked_chi_against_reference_keccak+0x32c>
            }
        }
    }

    if (fail_count == 0) {
 800199a:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 800199e:	f103 030c 	add.w	r3, r3, #12
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <test_masked_chi_against_reference_keccak+0x56e>
        printf("PASS: test_masked_chi_against_reference_keccak passed.\r\n");
 80019a8:	480a      	ldr	r0, [pc, #40]	@ (80019d4 <test_masked_chi_against_reference_keccak+0x594>)
 80019aa:	f009 f855 	bl	800aa58 <puts>
    }

    return fail_count;
 80019ae:	f507 53a5 	add.w	r3, r7, #5280	@ 0x14a0
 80019b2:	f103 030c 	add.w	r3, r3, #12
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	f507 57a5 	add.w	r7, r7, #5280	@ 0x14a0
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019c6:	bf00      	nop
 80019c8:	0800b75c 	.word	0x0800b75c
 80019cc:	0800b77c 	.word	0x0800b77c
 80019d0:	0800b798 	.word	0x0800b798
 80019d4:	0800b7b4 	.word	0x0800b7b4

080019d8 <masked_chi_outofplace>:


void masked_chi_outofplace(masked_uint64_t out[5][5],
                           const masked_uint64_t in[5][5],
                           const uint64_t r[5][5][MASKING_N][MASKING_N]) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b09a      	sub	sp, #104	@ 0x68
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
    for (int y = 0; y < 5; y++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80019e8:	e070      	b.n	8001acc <masked_chi_outofplace+0xf4>
        for (int x = 0; x < 5; x++) {
 80019ea:	2300      	movs	r3, #0
 80019ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80019ee:	e067      	b.n	8001ac0 <masked_chi_outofplace+0xe8>
            const masked_uint64_t *a = &in[x][y];
 80019f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	015b      	lsls	r3, r3, #5
 80019fa:	461a      	mov	r2, r3
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	441a      	add	r2, r3
 8001a00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a02:	015b      	lsls	r3, r3, #5
 8001a04:	4413      	add	r3, r2
 8001a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
            const masked_uint64_t *b = &in[(x + 1) % 5][y];
 8001a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	4b33      	ldr	r3, [pc, #204]	@ (8001adc <masked_chi_outofplace+0x104>)
 8001a0e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a12:	1059      	asrs	r1, r3, #1
 8001a14:	17d3      	asrs	r3, r2, #31
 8001a16:	1ac9      	subs	r1, r1, r3
 8001a18:	460b      	mov	r3, r1
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	1ad1      	subs	r1, r2, r3
 8001a20:	460a      	mov	r2, r1
 8001a22:	4613      	mov	r3, r2
 8001a24:	009b      	lsls	r3, r3, #2
 8001a26:	4413      	add	r3, r2
 8001a28:	015b      	lsls	r3, r3, #5
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	441a      	add	r2, r3
 8001a30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a32:	015b      	lsls	r3, r3, #5
 8001a34:	4413      	add	r3, r2
 8001a36:	65bb      	str	r3, [r7, #88]	@ 0x58
            const masked_uint64_t *c = &in[(x + 2) % 5][y];
 8001a38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a3a:	1c9a      	adds	r2, r3, #2
 8001a3c:	4b27      	ldr	r3, [pc, #156]	@ (8001adc <masked_chi_outofplace+0x104>)
 8001a3e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a42:	1059      	asrs	r1, r3, #1
 8001a44:	17d3      	asrs	r3, r2, #31
 8001a46:	1ac9      	subs	r1, r1, r3
 8001a48:	460b      	mov	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	1ad1      	subs	r1, r2, r3
 8001a50:	460a      	mov	r2, r1
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	015b      	lsls	r3, r3, #5
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	441a      	add	r2, r3
 8001a60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a62:	015b      	lsls	r3, r3, #5
 8001a64:	4413      	add	r3, r2
 8001a66:	657b      	str	r3, [r7, #84]	@ 0x54
            masked_uint64_t t1, t2;

            masked_not(&t1, b);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff f8d8 	bl	8000c24 <masked_not>
            masked_and(&t2, &t1, c, r[x][y]);
 8001a74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a76:	4613      	mov	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	01db      	lsls	r3, r3, #7
 8001a7e:	461a      	mov	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	441a      	add	r2, r3
 8001a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a86:	01db      	lsls	r3, r3, #7
 8001a88:	4413      	add	r3, r2
 8001a8a:	f107 0110 	add.w	r1, r7, #16
 8001a8e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001a92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001a94:	f7ff f9b0 	bl	8000df8 <masked_and>
            masked_xor(&out[x][y], a, &t2);
 8001a98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	015b      	lsls	r3, r3, #5
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	441a      	add	r2, r3
 8001aa8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001aaa:	015b      	lsls	r3, r3, #5
 8001aac:	4413      	add	r3, r2
 8001aae:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001ab2:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f974 	bl	8000da2 <masked_xor>
        for (int x = 0; x < 5; x++) {
 8001aba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001abc:	3301      	adds	r3, #1
 8001abe:	663b      	str	r3, [r7, #96]	@ 0x60
 8001ac0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	dd94      	ble.n	80019f0 <masked_chi_outofplace+0x18>
    for (int y = 0; y < 5; y++) {
 8001ac6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ac8:	3301      	adds	r3, #1
 8001aca:	667b      	str	r3, [r7, #100]	@ 0x64
 8001acc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	dd8b      	ble.n	80019ea <masked_chi_outofplace+0x12>
        }
    }
}
 8001ad2:	bf00      	nop
 8001ad4:	bf00      	nop
 8001ad6:	3768      	adds	r7, #104	@ 0x68
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	66666667 	.word	0x66666667

08001ae0 <test_masked_chi_outofplace_single_lanes>:

int test_masked_chi_outofplace_single_lanes(void) {
 8001ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae4:	f5ad 5da1 	sub.w	sp, sp, #5152	@ 0x1420
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
    int fail_count = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 8001af2:	f102 020c 	add.w	r2, r2, #12
 8001af6:	6013      	str	r3, [r2, #0]

    // 1. Known unmasked input
    uint64_t ref[5][5];
    for (int y = 0; y < 5; y++)
 8001af8:	2300      	movs	r3, #0
 8001afa:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 8001afe:	f102 0208 	add.w	r2, r2, #8
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	e062      	b.n	8001bcc <test_masked_chi_outofplace_single_lanes+0xec>
        for (int x = 0; x < 5; x++)
 8001b06:	2300      	movs	r3, #0
 8001b08:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 8001b0c:	f102 0204 	add.w	r2, r2, #4
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e049      	b.n	8001ba8 <test_masked_chi_outofplace_single_lanes+0xc8>
            ref[x][y] = (uint64_t)(x + 5 * y) * 0x1111111111111111ULL;
 8001b14:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001b18:	f103 0308 	add.w	r3, r3, #8
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	441a      	add	r2, r3
 8001b24:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001b28:	f103 0304 	add.w	r3, r3, #4
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4413      	add	r3, r2
 8001b30:	17da      	asrs	r2, r3, #31
 8001b32:	623b      	str	r3, [r7, #32]
 8001b34:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b36:	f04f 3311 	mov.w	r3, #286331153	@ 0x11111111
 8001b3a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b3e:	460a      	mov	r2, r1
 8001b40:	fb03 f202 	mul.w	r2, r3, r2
 8001b44:	f04f 3311 	mov.w	r3, #286331153	@ 0x11111111
 8001b48:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	441a      	add	r2, r3
 8001b54:	f04f 3311 	mov.w	r3, #286331153	@ 0x11111111
 8001b58:	6a39      	ldr	r1, [r7, #32]
 8001b5a:	fba1 4503 	umull	r4, r5, r1, r3
 8001b5e:	1953      	adds	r3, r2, r5
 8001b60:	461d      	mov	r5, r3
 8001b62:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001b66:	f103 0310 	add.w	r3, r3, #16
 8001b6a:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8001b6e:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001b72:	f103 0304 	add.w	r3, r3, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001b82:	f103 0308 	add.w	r3, r3, #8
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	e9c3 4500 	strd	r4, r5, [r3]
        for (int x = 0; x < 5; x++)
 8001b92:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001b96:	f103 0304 	add.w	r3, r3, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 8001ba2:	f102 0204 	add.w	r2, r2, #4
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001bac:	f103 0304 	add.w	r3, r3, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	ddae      	ble.n	8001b14 <test_masked_chi_outofplace_single_lanes+0x34>
    for (int y = 0; y < 5; y++)
 8001bb6:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001bba:	f103 0308 	add.w	r3, r3, #8
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 8001bc6:	f102 0208 	add.w	r2, r2, #8
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001bd0:	f103 0308 	add.w	r3, r3, #8
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	dd95      	ble.n	8001b06 <test_masked_chi_outofplace_single_lanes+0x26>

    // 2. Mask it
    masked_uint64_t masked_in[5][5];
    for (int y = 0; y < 5; y++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e0d2      	b.n	8001d8a <test_masked_chi_outofplace_single_lanes+0x2aa>
        for (int x = 0; x < 5; x++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001bea:	f102 021c 	add.w	r2, r2, #28
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e0bc      	b.n	8001d6c <test_masked_chi_outofplace_single_lanes+0x28c>
            uint64_t val = ref[x][y];
 8001bf2:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001bf6:	f103 0310 	add.w	r3, r3, #16
 8001bfa:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8001bfe:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001c02:	f103 031c 	add.w	r3, r3, #28
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	441a      	add	r2, r3
 8001c0e:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	440b      	add	r3, r1
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f507 519d 	add.w	r1, r7, #5024	@ 0x13a0
 8001c22:	f101 0110 	add.w	r1, r1, #16
 8001c26:	e9c1 2300 	strd	r2, r3, [r1]
            uint64_t temp = val;
 8001c2a:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 8001c2e:	f103 0310 	add.w	r3, r3, #16
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f507 51a0 	add.w	r1, r7, #5120	@ 0x1400
 8001c3a:	f101 0110 	add.w	r1, r1, #16
 8001c3e:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 1; i < MASKING_N; i++) {
 8001c42:	2301      	movs	r3, #1
 8001c44:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001c48:	f102 020c 	add.w	r2, r2, #12
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e05f      	b.n	8001d10 <test_masked_chi_outofplace_single_lanes+0x230>
                masked_in[x][y].share[i] = get_random64();
 8001c50:	f7fe ffbe 	bl	8000bd0 <get_random64>
 8001c54:	4603      	mov	r3, r0
 8001c56:	17da      	asrs	r2, r3, #31
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	61fa      	str	r2, [r7, #28]
 8001c5c:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001c60:	f103 0310 	add.w	r3, r3, #16
 8001c64:	f5a3 618d 	sub.w	r1, r3, #1128	@ 0x468
 8001c68:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001c6c:	f103 031c 	add.w	r3, r3, #28
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	0092      	lsls	r2, r2, #2
 8001c76:	441a      	add	r2, r3
 8001c78:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	009a      	lsls	r2, r3, #2
 8001c82:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001c86:	f103 030c 	add.w	r3, r3, #12
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	440b      	add	r3, r1
 8001c92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c96:	e9c3 1200 	strd	r1, r2, [r3]
                temp ^= masked_in[x][y].share[i];
 8001c9a:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001c9e:	f103 0310 	add.w	r3, r3, #16
 8001ca2:	f5a3 618d 	sub.w	r1, r3, #1128	@ 0x468
 8001ca6:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001caa:	f103 031c 	add.w	r3, r3, #28
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	0092      	lsls	r2, r2, #2
 8001cb4:	441a      	add	r2, r3
 8001cb6:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009a      	lsls	r2, r3, #2
 8001cc0:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001cc4:	f103 030c 	add.w	r3, r3, #12
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	440b      	add	r3, r1
 8001cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd4:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001cd8:	f103 0310 	add.w	r3, r3, #16
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	ea82 0400 	eor.w	r4, r2, r0
 8001ce4:	613c      	str	r4, [r7, #16]
 8001ce6:	404b      	eors	r3, r1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001cee:	f102 0210 	add.w	r2, r2, #16
 8001cf2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001cf6:	e9c2 3400 	strd	r3, r4, [r2]
            for (int i = 1; i < MASKING_N; i++) {
 8001cfa:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001cfe:	f103 030c 	add.w	r3, r3, #12
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001d0a:	f102 020c 	add.w	r2, r2, #12
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001d14:	f103 030c 	add.w	r3, r3, #12
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	dd98      	ble.n	8001c50 <test_masked_chi_outofplace_single_lanes+0x170>
            }
            masked_in[x][y].share[0] = temp;
 8001d1e:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001d22:	f103 0310 	add.w	r3, r3, #16
 8001d26:	f5a3 618d 	sub.w	r1, r3, #1128	@ 0x468
 8001d2a:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001d2e:	f103 031c 	add.w	r3, r3, #28
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	441a      	add	r2, r3
 8001d3a:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4413      	add	r3, r2
 8001d42:	015b      	lsls	r3, r3, #5
 8001d44:	4419      	add	r1, r3
 8001d46:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001d4a:	f103 0310 	add.w	r3, r3, #16
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; x++) {
 8001d56:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001d5a:	f103 031c 	add.w	r3, r3, #28
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001d66:	f102 021c 	add.w	r2, r2, #28
 8001d6a:	6013      	str	r3, [r2, #0]
 8001d6c:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001d70:	f103 031c 	add.w	r3, r3, #28
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	f77f af3b 	ble.w	8001bf2 <test_masked_chi_outofplace_single_lanes+0x112>
    for (int y = 0; y < 5; y++) {
 8001d7c:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	f77f af27 	ble.w	8001be4 <test_masked_chi_outofplace_single_lanes+0x104>
    }

    // 3. Allocate output + randomness
    masked_uint64_t masked_out[5][5];
    uint64_t r[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; y++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001d9c:	f102 0208 	add.w	r2, r2, #8
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e039      	b.n	8001e18 <test_masked_chi_outofplace_single_lanes+0x338>
        for (int x = 0; x < 5; x++)
 8001da4:	2300      	movs	r3, #0
 8001da6:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001daa:	f102 0204 	add.w	r2, r2, #4
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e020      	b.n	8001df4 <test_masked_chi_outofplace_single_lanes+0x314>
            fill_random_matrix(r[x][y]);
 8001db2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001db6:	3a08      	subs	r2, #8
 8001db8:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001dbc:	f103 0304 	add.w	r3, r3, #4
 8001dc0:	6819      	ldr	r1, [r3, #0]
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f507 51a0 	add.w	r1, r7, #5120	@ 0x1400
 8001dcc:	f101 0108 	add.w	r1, r1, #8
 8001dd0:	6809      	ldr	r1, [r1, #0]
 8001dd2:	440b      	add	r3, r1
 8001dd4:	01db      	lsls	r3, r3, #7
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe ff9b 	bl	8000d14 <fill_random_matrix>
        for (int x = 0; x < 5; x++)
 8001dde:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001de2:	f103 0304 	add.w	r3, r3, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3301      	adds	r3, #1
 8001dea:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001dee:	f102 0204 	add.w	r2, r2, #4
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001df8:	f103 0304 	add.w	r3, r3, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	ddd7      	ble.n	8001db2 <test_masked_chi_outofplace_single_lanes+0x2d2>
    for (int y = 0; y < 5; y++)
 8001e02:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001e06:	f103 0308 	add.w	r3, r3, #8
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001e12:	f102 0208 	add.w	r2, r2, #8
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8001e1c:	f103 0308 	add.w	r3, r3, #8
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	ddbe      	ble.n	8001da4 <test_masked_chi_outofplace_single_lanes+0x2c4>

    // 4. Apply masked Chi
    masked_chi_outofplace(masked_out, masked_in, r);
 8001e26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	f607 71c8 	addw	r1, r7, #4040	@ 0xfc8
 8001e30:	f607 40a8 	addw	r0, r7, #3240	@ 0xca8
 8001e34:	461a      	mov	r2, r3
 8001e36:	f7ff fdcf 	bl	80019d8 <masked_chi_outofplace>

    // 5. Check each output lane
    for (int y = 0; y < 5; y++) {
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	e175      	b.n	8002130 <test_masked_chi_outofplace_single_lanes+0x650>
        for (int x = 0; x < 5; x++) {
 8001e44:	2300      	movs	r3, #0
 8001e46:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 8001e4a:	f102 021c 	add.w	r2, r2, #28
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e15f      	b.n	8002112 <test_masked_chi_outofplace_single_lanes+0x632>
            // Recombine masked output
            uint64_t recombined = 0;
 8001e52:	f04f 0200 	mov.w	r2, #0
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	f507 519f 	add.w	r1, r7, #5088	@ 0x13e0
 8001e5e:	f101 0110 	add.w	r1, r1, #16
 8001e62:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8001e66:	2300      	movs	r3, #0
 8001e68:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 8001e6c:	f102 020c 	add.w	r2, r2, #12
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e03a      	b.n	8001eea <test_masked_chi_outofplace_single_lanes+0x40a>
                recombined ^= masked_out[x][y].share[i];
 8001e74:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001e78:	f103 0310 	add.w	r3, r3, #16
 8001e7c:	f5a3 61f1 	sub.w	r1, r3, #1928	@ 0x788
 8001e80:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8001e84:	f103 031c 	add.w	r3, r3, #28
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	009a      	lsls	r2, r3, #2
 8001e9a:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8001e9e:	f103 030c 	add.w	r3, r3, #12
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	f507 519f 	add.w	r1, r7, #5088	@ 0x13e0
 8001eb2:	f101 0110 	add.w	r1, r1, #16
 8001eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001eba:	ea80 0402 	eor.w	r4, r0, r2
 8001ebe:	60bc      	str	r4, [r7, #8]
 8001ec0:	404b      	eors	r3, r1
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 8001ec8:	f102 0210 	add.w	r2, r2, #16
 8001ecc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001ed0:	e9c2 3400 	strd	r3, r4, [r2]
            for (int i = 0; i < MASKING_N; i++) {
 8001ed4:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8001ed8:	f103 030c 	add.w	r3, r3, #12
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 8001ee4:	f102 020c 	add.w	r2, r2, #12
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8001eee:	f103 030c 	add.w	r3, r3, #12
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	ddbd      	ble.n	8001e74 <test_masked_chi_outofplace_single_lanes+0x394>
            }

            // Compute expected Chi output
            uint64_t a = ref[x][y];
 8001ef8:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001efc:	f103 0310 	add.w	r3, r3, #16
 8001f00:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8001f04:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8001f08:	f103 031c 	add.w	r3, r3, #28
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f507 519f 	add.w	r1, r7, #5088	@ 0x13e0
 8001f28:	e9c1 2300 	strd	r2, r3, [r1]
            uint64_t b = ref[(x + 1) % 5][y];
 8001f2c:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8001f30:	f103 031c 	add.w	r3, r3, #28
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	1c59      	adds	r1, r3, #1
 8001f38:	4b8b      	ldr	r3, [pc, #556]	@ (8002168 <test_masked_chi_outofplace_single_lanes+0x688>)
 8001f3a:	fb83 2301 	smull	r2, r3, r3, r1
 8001f3e:	105a      	asrs	r2, r3, #1
 8001f40:	17cb      	asrs	r3, r1, #31
 8001f42:	1ad2      	subs	r2, r2, r3
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	1aca      	subs	r2, r1, r3
 8001f4c:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001f50:	f103 0310 	add.w	r3, r3, #16
 8001f54:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	f507 519e 	add.w	r1, r7, #5056	@ 0x13c0
 8001f72:	f101 0118 	add.w	r1, r1, #24
 8001f76:	e9c1 2300 	strd	r2, r3, [r1]
            uint64_t c = ref[(x + 2) % 5][y];
 8001f7a:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8001f7e:	f103 031c 	add.w	r3, r3, #28
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	1c99      	adds	r1, r3, #2
 8001f86:	4b78      	ldr	r3, [pc, #480]	@ (8002168 <test_masked_chi_outofplace_single_lanes+0x688>)
 8001f88:	fb83 2301 	smull	r2, r3, r3, r1
 8001f8c:	105a      	asrs	r2, r3, #1
 8001f8e:	17cb      	asrs	r3, r1, #31
 8001f90:	1ad2      	subs	r2, r2, r3
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	1aca      	subs	r2, r1, r3
 8001f9a:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8001f9e:	f103 0310 	add.w	r3, r3, #16
 8001fa2:	f5a3 71a4 	sub.w	r1, r3, #328	@ 0x148
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	440b      	add	r3, r1
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f507 519e 	add.w	r1, r7, #5056	@ 0x13c0
 8001fc0:	f101 0110 	add.w	r1, r1, #16
 8001fc4:	e9c1 2300 	strd	r2, r3, [r1]
            uint64_t expected = a ^ ((~b) & c);
 8001fc8:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8001fcc:	f103 0318 	add.w	r3, r3, #24
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	ea6f 0802 	mvn.w	r8, r2
 8001fd8:	ea6f 0903 	mvn.w	r9, r3
 8001fdc:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8001fe0:	f103 0310 	add.w	r3, r3, #16
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	ea08 0a02 	and.w	sl, r8, r2
 8001fec:	ea09 0b03 	and.w	fp, r9, r3
 8001ff0:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8001ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff8:	ea82 010a 	eor.w	r1, r2, sl
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	ea83 030b 	eor.w	r3, r3, fp
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 8002008:	f102 0208 	add.w	r2, r2, #8
 800200c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002010:	e9c2 3400 	strd	r3, r4, [r2]

            if (recombined != expected) {
 8002014:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8002018:	f103 0310 	add.w	r3, r3, #16
 800201c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002020:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8002024:	f103 0308 	add.w	r3, r3, #8
 8002028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202c:	4299      	cmp	r1, r3
 800202e:	bf08      	it	eq
 8002030:	4290      	cmpeq	r0, r2
 8002032:	d063      	beq.n	80020fc <test_masked_chi_outofplace_single_lanes+0x61c>
                uint32_t re_hi = (uint32_t)(recombined >> 32);
 8002034:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8002038:	f103 0310 	add.w	r3, r3, #16
 800203c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	000a      	movs	r2, r1
 800204a:	2300      	movs	r3, #0
 800204c:	4613      	mov	r3, r2
 800204e:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 8002052:	f102 0204 	add.w	r2, r2, #4
 8002056:	6013      	str	r3, [r2, #0]
                uint32_t re_lo = (uint32_t)(recombined & 0xFFFFFFFF);
 8002058:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 800205c:	f103 0310 	add.w	r3, r3, #16
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f507 529e 	add.w	r2, r7, #5056	@ 0x13c0
 8002066:	6013      	str	r3, [r2, #0]
                uint32_t ex_hi = (uint32_t)(expected >> 32);
 8002068:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 800206c:	f103 0308 	add.w	r3, r3, #8
 8002070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 0300 	mov.w	r3, #0
 800207c:	000a      	movs	r2, r1
 800207e:	2300      	movs	r3, #0
 8002080:	4613      	mov	r3, r2
 8002082:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 8002086:	f102 021c 	add.w	r2, r2, #28
 800208a:	6013      	str	r3, [r2, #0]
                uint32_t ex_lo = (uint32_t)(expected & 0xFFFFFFFF);
 800208c:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 8002090:	f103 0308 	add.w	r3, r3, #8
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f507 529d 	add.w	r2, r7, #5024	@ 0x13a0
 800209a:	f102 0218 	add.w	r2, r2, #24
 800209e:	6013      	str	r3, [r2, #0]

                printf("FAIL: Chi[%d][%d]\r\n", x, y);
 80020a0:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 80020aa:	f103 031c 	add.w	r3, r3, #28
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	482e      	ldr	r0, [pc, #184]	@ (800216c <test_masked_chi_outofplace_single_lanes+0x68c>)
 80020b2:	f008 fc69 	bl	800a988 <iprintf>
                printf("  Got:     %08lX%08lX\r\n", (unsigned long)re_hi, (unsigned long)re_lo);
 80020b6:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	f507 539e 	add.w	r3, r7, #5056	@ 0x13c0
 80020c0:	f103 0304 	add.w	r3, r3, #4
 80020c4:	6819      	ldr	r1, [r3, #0]
 80020c6:	482a      	ldr	r0, [pc, #168]	@ (8002170 <test_masked_chi_outofplace_single_lanes+0x690>)
 80020c8:	f008 fc5e 	bl	800a988 <iprintf>
                printf("  Expected:%08lX%08lX\r\n", (unsigned long)ex_hi, (unsigned long)ex_lo);
 80020cc:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 80020d0:	f103 0318 	add.w	r3, r3, #24
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 80020da:	f103 031c 	add.w	r3, r3, #28
 80020de:	6819      	ldr	r1, [r3, #0]
 80020e0:	4824      	ldr	r0, [pc, #144]	@ (8002174 <test_masked_chi_outofplace_single_lanes+0x694>)
 80020e2:	f008 fc51 	bl	800a988 <iprintf>
                fail_count++;
 80020e6:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 80020ea:	f103 030c 	add.w	r3, r3, #12
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	f507 52a1 	add.w	r2, r7, #5152	@ 0x1420
 80020f6:	f102 020c 	add.w	r2, r2, #12
 80020fa:	6013      	str	r3, [r2, #0]
        for (int x = 0; x < 5; x++) {
 80020fc:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8002100:	f103 031c 	add.w	r3, r3, #28
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	f507 529f 	add.w	r2, r7, #5088	@ 0x13e0
 800210c:	f102 021c 	add.w	r2, r2, #28
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	f507 539f 	add.w	r3, r7, #5088	@ 0x13e0
 8002116:	f103 031c 	add.w	r3, r3, #28
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b04      	cmp	r3, #4
 800211e:	f77f ae98 	ble.w	8001e52 <test_masked_chi_outofplace_single_lanes+0x372>
    for (int y = 0; y < 5; y++) {
 8002122:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	f507 52a0 	add.w	r2, r7, #5120	@ 0x1400
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	f507 53a0 	add.w	r3, r7, #5120	@ 0x1400
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b04      	cmp	r3, #4
 8002138:	f77f ae84 	ble.w	8001e44 <test_masked_chi_outofplace_single_lanes+0x364>
            }
        }
    }

    if (fail_count == 0) {
 800213c:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8002140:	f103 030c 	add.w	r3, r3, #12
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <test_masked_chi_outofplace_single_lanes+0x670>
        printf("PASS: test_masked_chi_outofplace_single_lanes passed.\r\n");
 800214a:	480b      	ldr	r0, [pc, #44]	@ (8002178 <test_masked_chi_outofplace_single_lanes+0x698>)
 800214c:	f008 fc84 	bl	800aa58 <puts>
    }

    return fail_count;
 8002150:	f507 53a1 	add.w	r3, r7, #5152	@ 0x1420
 8002154:	f103 030c 	add.w	r3, r3, #12
 8002158:	681b      	ldr	r3, [r3, #0]
}
 800215a:	4618      	mov	r0, r3
 800215c:	f507 57a1 	add.w	r7, r7, #5152	@ 0x1420
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002168:	66666667 	.word	0x66666667
 800216c:	0800b7ec 	.word	0x0800b7ec
 8002170:	0800b800 	.word	0x0800b800
 8002174:	0800b818 	.word	0x0800b818
 8002178:	0800b830 	.word	0x0800b830

0800217c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800217c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002180:	f7ff f94c 	bl	800141c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002186:	490d      	ldr	r1, [pc, #52]	@ (80021bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002188:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800218c:	e002      	b.n	8002194 <LoopCopyDataInit>

0800218e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002192:	3304      	adds	r3, #4

08002194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002198:	d3f9      	bcc.n	800218e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219a:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800219c:	4c0a      	ldr	r4, [pc, #40]	@ (80021c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a0:	e001      	b.n	80021a6 <LoopFillZerobss>

080021a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a4:	3204      	adds	r2, #4

080021a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a8:	d3fb      	bcc.n	80021a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021aa:	f008 fe4d 	bl	800ae48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ae:	f7fe fa93 	bl	80006d8 <main>
  bx  lr    
 80021b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021bc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80021c0:	0800b8c8 	.word	0x0800b8c8
  ldr r2, =_sbss
 80021c4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80021c8:	20000b00 	.word	0x20000b00

080021cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021cc:	e7fe      	b.n	80021cc <ADC_IRQHandler>
	...

080021d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <HAL_Init+0x40>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002210 <HAL_Init+0x40>)
 80021da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <HAL_Init+0x40>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <HAL_Init+0x40>)
 80021e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ec:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a07      	ldr	r2, [pc, #28]	@ (8002210 <HAL_Init+0x40>)
 80021f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f8:	2003      	movs	r0, #3
 80021fa:	f000 f94f 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 f808 	bl	8002214 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002204:	f7fe fea6 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00

08002214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800221c:	4b12      	ldr	r3, [pc, #72]	@ (8002268 <HAL_InitTick+0x54>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_InitTick+0x58>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222a:	fbb3 f3f1 	udiv	r3, r3, r1
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f967 	bl	8002506 <HAL_SYSTICK_Config>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00e      	b.n	8002260 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0f      	cmp	r3, #15
 8002246:	d80a      	bhi.n	800225e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002248:	2200      	movs	r2, #0
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f000 f92f 	bl	80024b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4a06      	ldr	r2, [pc, #24]	@ (8002270 <HAL_InitTick+0x5c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	4618      	mov	r0, r3
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000000 	.word	0x20000000
 800226c:	20000008 	.word	0x20000008
 8002270:	20000004 	.word	0x20000004

08002274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <HAL_IncTick+0x20>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4413      	add	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <HAL_IncTick+0x24>)
 8002286:	6013      	str	r3, [r2, #0]
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000008 	.word	0x20000008
 8002298:	200001f4 	.word	0x200001f4

0800229c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return uwTick;
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <HAL_GetTick+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	200001f4 	.word	0x200001f4

080022b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022bc:	f7ff ffee 	bl	800229c <HAL_GetTick>
 80022c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d005      	beq.n	80022da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ce:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <HAL_Delay+0x44>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022da:	bf00      	nop
 80022dc:	f7ff ffde 	bl	800229c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d8f7      	bhi.n	80022dc <HAL_Delay+0x28>
  {
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3710      	adds	r7, #16
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000008 	.word	0x20000008

080022fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002318:	4013      	ands	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800232c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800232e:	4a04      	ldr	r2, [pc, #16]	@ (8002340 <__NVIC_SetPriorityGrouping+0x44>)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	60d3      	str	r3, [r2, #12]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__NVIC_GetPriorityGrouping+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 0307 	and.w	r3, r3, #7
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	2b00      	cmp	r3, #0
 8002370:	db0b      	blt.n	800238a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002372:	79fb      	ldrb	r3, [r7, #7]
 8002374:	f003 021f 	and.w	r2, r3, #31
 8002378:	4907      	ldr	r1, [pc, #28]	@ (8002398 <__NVIC_EnableIRQ+0x38>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2001      	movs	r0, #1
 8002382:	fa00 f202 	lsl.w	r2, r0, r2
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000e100 	.word	0xe000e100

0800239c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	6039      	str	r1, [r7, #0]
 80023a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	db0a      	blt.n	80023c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	490c      	ldr	r1, [pc, #48]	@ (80023e8 <__NVIC_SetPriority+0x4c>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	0112      	lsls	r2, r2, #4
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c4:	e00a      	b.n	80023dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4908      	ldr	r1, [pc, #32]	@ (80023ec <__NVIC_SetPriority+0x50>)
 80023cc:	79fb      	ldrb	r3, [r7, #7]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3b04      	subs	r3, #4
 80023d4:	0112      	lsls	r2, r2, #4
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	440b      	add	r3, r1
 80023da:	761a      	strb	r2, [r3, #24]
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	e000e100 	.word	0xe000e100
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b089      	sub	sp, #36	@ 0x24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f1c3 0307 	rsb	r3, r3, #7
 800240a:	2b04      	cmp	r3, #4
 800240c:	bf28      	it	cs
 800240e:	2304      	movcs	r3, #4
 8002410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3304      	adds	r3, #4
 8002416:	2b06      	cmp	r3, #6
 8002418:	d902      	bls.n	8002420 <NVIC_EncodePriority+0x30>
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b03      	subs	r3, #3
 800241e:	e000      	b.n	8002422 <NVIC_EncodePriority+0x32>
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	f04f 32ff 	mov.w	r2, #4294967295
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	401a      	ands	r2, r3
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002438:	f04f 31ff 	mov.w	r1, #4294967295
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	43d9      	mvns	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002448:	4313      	orrs	r3, r2
         );
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff8e 	bl	800239c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff29 	bl	80022fc <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff3e 	bl	8002344 <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff8e 	bl	80023f0 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5d 	bl	800239c <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff31 	bl	8002360 <__NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffa2 	bl	8002458 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	@ 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	e16b      	b.n	8002814 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800253c:	2201      	movs	r2, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	429a      	cmp	r2, r3
 8002556:	f040 815a 	bne.w	800280e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b01      	cmp	r3, #1
 8002564:	d005      	beq.n	8002572 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800256e:	2b02      	cmp	r3, #2
 8002570:	d130      	bne.n	80025d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a8:	2201      	movs	r2, #1
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4013      	ands	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0201 	and.w	r2, r3, #1
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 0303 	and.w	r3, r3, #3
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d017      	beq.n	8002610 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0303 	and.w	r3, r3, #3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d123      	bne.n	8002664 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	08da      	lsrs	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3208      	adds	r2, #8
 8002624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	220f      	movs	r2, #15
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	691a      	ldr	r2, [r3, #16]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	69b9      	ldr	r1, [r7, #24]
 8002660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	2203      	movs	r2, #3
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80b4 	beq.w	800280e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b60      	ldr	r3, [pc, #384]	@ (800282c <HAL_GPIO_Init+0x30c>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ae:	4a5f      	ldr	r2, [pc, #380]	@ (800282c <HAL_GPIO_Init+0x30c>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026b6:	4b5d      	ldr	r3, [pc, #372]	@ (800282c <HAL_GPIO_Init+0x30c>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002830 <HAL_GPIO_Init+0x310>)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	089b      	lsrs	r3, r3, #2
 80026c8:	3302      	adds	r3, #2
 80026ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	220f      	movs	r2, #15
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a52      	ldr	r2, [pc, #328]	@ (8002834 <HAL_GPIO_Init+0x314>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d02b      	beq.n	8002746 <HAL_GPIO_Init+0x226>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a51      	ldr	r2, [pc, #324]	@ (8002838 <HAL_GPIO_Init+0x318>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d025      	beq.n	8002742 <HAL_GPIO_Init+0x222>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a50      	ldr	r2, [pc, #320]	@ (800283c <HAL_GPIO_Init+0x31c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d01f      	beq.n	800273e <HAL_GPIO_Init+0x21e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a4f      	ldr	r2, [pc, #316]	@ (8002840 <HAL_GPIO_Init+0x320>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d019      	beq.n	800273a <HAL_GPIO_Init+0x21a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4e      	ldr	r2, [pc, #312]	@ (8002844 <HAL_GPIO_Init+0x324>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d013      	beq.n	8002736 <HAL_GPIO_Init+0x216>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4d      	ldr	r2, [pc, #308]	@ (8002848 <HAL_GPIO_Init+0x328>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00d      	beq.n	8002732 <HAL_GPIO_Init+0x212>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4c      	ldr	r2, [pc, #304]	@ (800284c <HAL_GPIO_Init+0x32c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <HAL_GPIO_Init+0x20e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a4b      	ldr	r2, [pc, #300]	@ (8002850 <HAL_GPIO_Init+0x330>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d101      	bne.n	800272a <HAL_GPIO_Init+0x20a>
 8002726:	2307      	movs	r3, #7
 8002728:	e00e      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272a:	2308      	movs	r3, #8
 800272c:	e00c      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800272e:	2306      	movs	r3, #6
 8002730:	e00a      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002732:	2305      	movs	r3, #5
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002736:	2304      	movs	r3, #4
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x228>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x228>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002758:	4935      	ldr	r1, [pc, #212]	@ (8002830 <HAL_GPIO_Init+0x310>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002766:	4b3b      	ldr	r3, [pc, #236]	@ (8002854 <HAL_GPIO_Init+0x334>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278a:	4a32      	ldr	r2, [pc, #200]	@ (8002854 <HAL_GPIO_Init+0x334>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002790:	4b30      	ldr	r3, [pc, #192]	@ (8002854 <HAL_GPIO_Init+0x334>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b4:	4a27      	ldr	r2, [pc, #156]	@ (8002854 <HAL_GPIO_Init+0x334>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ba:	4b26      	ldr	r3, [pc, #152]	@ (8002854 <HAL_GPIO_Init+0x334>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027de:	4a1d      	ldr	r2, [pc, #116]	@ (8002854 <HAL_GPIO_Init+0x334>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_GPIO_Init+0x334>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002808:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <HAL_GPIO_Init+0x334>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f ae90 	bls.w	800253c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	@ 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40013800 	.word	0x40013800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40021400 	.word	0x40021400
 800284c:	40021800 	.word	0x40021800
 8002850:	40021c00 	.word	0x40021c00
 8002854:	40013c00 	.word	0x40013c00

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af02      	add	r7, sp, #8
 8002890:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e059      	b.n	8002950 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f007 fc3a 	bl	800a130 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2203      	movs	r2, #3
 80028c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028ca:	d102      	bne.n	80028d2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f004 fa53 	bl	8006d82 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7c1a      	ldrb	r2, [r3, #16]
 80028e4:	f88d 2000 	strb.w	r2, [sp]
 80028e8:	3304      	adds	r3, #4
 80028ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ec:	f004 f9d4 	bl	8006c98 <USB_CoreInit>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e026      	b.n	8002950 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2101      	movs	r1, #1
 8002908:	4618      	mov	r0, r3
 800290a:	f004 fa4b 	bl	8006da4 <USB_SetCurrentMode>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e017      	b.n	8002950 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6818      	ldr	r0, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	7c1a      	ldrb	r2, [r3, #16]
 8002928:	f88d 2000 	strb.w	r2, [sp]
 800292c:	3304      	adds	r3, #4
 800292e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002930:	f004 fbee 	bl	8007110 <USB_HostInit>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2202      	movs	r2, #2
 800293e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e004      	b.n	8002950 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b08b      	sub	sp, #44	@ 0x2c
 800295c:	af04      	add	r7, sp, #16
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	4608      	mov	r0, r1
 8002962:	4611      	mov	r1, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4603      	mov	r3, r0
 8002968:	70fb      	strb	r3, [r7, #3]
 800296a:	460b      	mov	r3, r1
 800296c:	70bb      	strb	r3, [r7, #2]
 800296e:	4613      	mov	r3, r2
 8002970:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002972:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002974:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_HCD_HC_Init+0x2c>
 8002980:	2302      	movs	r3, #2
 8002982:	e09d      	b.n	8002ac0 <HAL_HCD_HC_Init+0x168>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3319      	adds	r3, #25
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	3314      	adds	r3, #20
 80029b0:	787a      	ldrb	r2, [r7, #1]
 80029b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3315      	adds	r3, #21
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3326      	adds	r3, #38	@ 0x26
 80029d8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80029dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	78bb      	ldrb	r3, [r7, #2]
 80029e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029e6:	b2d8      	uxtb	r0, r3
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3316      	adds	r3, #22
 80029f6:	4602      	mov	r2, r0
 80029f8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	4619      	mov	r1, r3
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fbc8 	bl	8003194 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002a04:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da0a      	bge.n	8002a22 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3317      	adds	r3, #23
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e009      	b.n	8002a36 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3317      	adds	r3, #23
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f004 fccc 	bl	80073d8 <USB_GetHostSpeed>
 8002a40:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002a42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10b      	bne.n	8002a62 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_HCD_HC_Init+0x10a>
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2bbc      	cmp	r3, #188	@ 0xbc
 8002a5c:	d901      	bls.n	8002a62 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002a5e:	23bc      	movs	r3, #188	@ 0xbc
 8002a60:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3318      	adds	r3, #24
 8002a72:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002a76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	b298      	uxth	r0, r3
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	3328      	adds	r3, #40	@ 0x28
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	787c      	ldrb	r4, [r7, #1]
 8002a9a:	78ba      	ldrb	r2, [r7, #2]
 8002a9c:	78f9      	ldrb	r1, [r7, #3]
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	4623      	mov	r3, r4
 8002aae:	f004 fcbb 	bl	8007428 <USB_HC_Init>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd90      	pop	{r4, r7, pc}

08002ac8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_HCD_HC_Halt+0x1e>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e00f      	b.n	8002b06 <HAL_HCD_HC_Halt+0x3e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	4611      	mov	r1, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f005 f84d 	bl	8007b96 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
	...

08002b10 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	70fb      	strb	r3, [r7, #3]
 8002b22:	460b      	mov	r3, r1
 8002b24:	70bb      	strb	r3, [r7, #2]
 8002b26:	4613      	mov	r3, r2
 8002b28:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b2a:	78fa      	ldrb	r2, [r7, #3]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3317      	adds	r3, #23
 8002b3a:	78ba      	ldrb	r2, [r7, #2]
 8002b3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b3e:	78fa      	ldrb	r2, [r7, #3]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3326      	adds	r3, #38	@ 0x26
 8002b4e:	787a      	ldrb	r2, [r7, #1]
 8002b50:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b52:	7c3b      	ldrb	r3, [r7, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d114      	bne.n	8002b82 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	332a      	adds	r3, #42	@ 0x2a
 8002b68:	2203      	movs	r2, #3
 8002b6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3319      	adds	r3, #25
 8002b7c:	7f3a      	ldrb	r2, [r7, #28]
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e009      	b.n	8002b96 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	332a      	adds	r3, #42	@ 0x2a
 8002b92:	2202      	movs	r2, #2
 8002b94:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b96:	787b      	ldrb	r3, [r7, #1]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	f200 8102 	bhi.w	8002da2 <HAL_HCD_HC_SubmitRequest+0x292>
 8002b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ba4 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002d8d 	.word	0x08002d8d
 8002bac:	08002c79 	.word	0x08002c79
 8002bb0:	08002d03 	.word	0x08002d03
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002bb4:	7c3b      	ldrb	r3, [r7, #16]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	f040 80f5 	bne.w	8002da6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002bbc:	78bb      	ldrb	r3, [r7, #2]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d12d      	bne.n	8002c1e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002bc2:	8b3b      	ldrh	r3, [r7, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d109      	bne.n	8002bdc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	333d      	adds	r3, #61	@ 0x3d
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	333d      	adds	r3, #61	@ 0x3d
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	332a      	adds	r3, #42	@ 0x2a
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002c06:	e0ce      	b.n	8002da6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	332a      	adds	r3, #42	@ 0x2a
 8002c18:	2202      	movs	r2, #2
 8002c1a:	701a      	strb	r2, [r3, #0]
      break;
 8002c1c:	e0c3      	b.n	8002da6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	331a      	adds	r3, #26
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	f040 80b8 	bne.w	8002da6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	6879      	ldr	r1, [r7, #4]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	333c      	adds	r3, #60	@ 0x3c
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	440b      	add	r3, r1
 8002c5a:	332a      	adds	r3, #42	@ 0x2a
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
      break;
 8002c60:	e0a1      	b.n	8002da6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	332a      	adds	r3, #42	@ 0x2a
 8002c72:	2202      	movs	r2, #2
 8002c74:	701a      	strb	r2, [r3, #0]
      break;
 8002c76:	e096      	b.n	8002da6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c78:	78bb      	ldrb	r3, [r7, #2]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d120      	bne.n	8002cc0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c7e:	78fa      	ldrb	r2, [r7, #3]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	011b      	lsls	r3, r3, #4
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	333d      	adds	r3, #61	@ 0x3d
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10a      	bne.n	8002caa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	332a      	adds	r3, #42	@ 0x2a
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ca8:	e07e      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	332a      	adds	r3, #42	@ 0x2a
 8002cba:	2202      	movs	r2, #2
 8002cbc:	701a      	strb	r2, [r3, #0]
      break;
 8002cbe:	e073      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	333c      	adds	r3, #60	@ 0x3c
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	332a      	adds	r3, #42	@ 0x2a
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
      break;
 8002cea:	e05d      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	332a      	adds	r3, #42	@ 0x2a
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
      break;
 8002d00:	e052      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d02:	78bb      	ldrb	r3, [r7, #2]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d120      	bne.n	8002d4a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	333d      	adds	r3, #61	@ 0x3d
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10a      	bne.n	8002d34 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	332a      	adds	r3, #42	@ 0x2a
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d32:	e039      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	332a      	adds	r3, #42	@ 0x2a
 8002d44:	2202      	movs	r2, #2
 8002d46:	701a      	strb	r2, [r3, #0]
      break;
 8002d48:	e02e      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	333c      	adds	r3, #60	@ 0x3c
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	332a      	adds	r3, #42	@ 0x2a
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
      break;
 8002d74:	e018      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d76:	78fa      	ldrb	r2, [r7, #3]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4613      	mov	r3, r2
 8002d7c:	011b      	lsls	r3, r3, #4
 8002d7e:	1a9b      	subs	r3, r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	440b      	add	r3, r1
 8002d84:	332a      	adds	r3, #42	@ 0x2a
 8002d86:	2202      	movs	r2, #2
 8002d88:	701a      	strb	r2, [r3, #0]
      break;
 8002d8a:	e00d      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d8c:	78fa      	ldrb	r2, [r7, #3]
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	1a9b      	subs	r3, r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	332a      	adds	r3, #42	@ 0x2a
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]
      break;
 8002da0:	e002      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002da2:	bf00      	nop
 8002da4:	e000      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002da6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	332c      	adds	r3, #44	@ 0x2c
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	8b39      	ldrh	r1, [r7, #24]
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4403      	add	r3, r0
 8002dcc:	3334      	adds	r3, #52	@ 0x34
 8002dce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	334c      	adds	r3, #76	@ 0x4c
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	3338      	adds	r3, #56	@ 0x38
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	3315      	adds	r3, #21
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	334d      	adds	r3, #77	@ 0x4d
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	3310      	adds	r3, #16
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	1d19      	adds	r1, r3, #4
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	799b      	ldrb	r3, [r3, #6]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f004 fc20 	bl	8007680 <USB_HC_StartXfer>
 8002e40:	4603      	mov	r3, r0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop

08002e4c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 f914 	bl	8007090 <USB_GetMode>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	f040 80fb 	bne.w	8003066 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f004 f8d7 	bl	8007028 <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80f1 	beq.w	8003064 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f004 f8ce 	bl	8007028 <USB_ReadInterrupts>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e96:	d104      	bne.n	8002ea2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002ea0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f004 f8be 	bl	8007028 <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eb6:	d104      	bne.n	8002ec2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 f8ae 	bl	8007028 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ed2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ed6:	d104      	bne.n	8002ee2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ee0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 f89e 	bl	8007028 <USB_ReadInterrupts>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d103      	bne.n	8002efe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2202      	movs	r2, #2
 8002efc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f004 f890 	bl	8007028 <USB_ReadInterrupts>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f12:	d120      	bne.n	8002f56 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002f1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d113      	bne.n	8002f56 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f2e:	2110      	movs	r1, #16
 8002f30:	6938      	ldr	r0, [r7, #16]
 8002f32:	f003 ff83 	bl	8006e3c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f36:	6938      	ldr	r0, [r7, #16]
 8002f38:	f003 ffb2 	bl	8006ea0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7a5b      	ldrb	r3, [r3, #9]
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d105      	bne.n	8002f50 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f004 f9a4 	bl	8007298 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f007 f96b 	bl	800a22c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 f864 	bl	8007028 <USB_ReadInterrupts>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f6a:	d102      	bne.n	8002f72 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f001 fd4d 	bl	8004a0c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f004 f856 	bl	8007028 <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d106      	bne.n	8002f94 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f007 f934 	bl	800a1f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2208      	movs	r2, #8
 8002f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f004 f845 	bl	8007028 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002fa8:	d139      	bne.n	800301e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f004 fde0 	bl	8007b74 <USB_HC_ReadInterrupt>
 8002fb4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e025      	b.n	8003008 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d018      	beq.n	8003002 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fe6:	d106      	bne.n	8002ff6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f905 	bl	80031fe <HCD_HC_IN_IRQHandler>
 8002ff4:	e005      	b.n	8003002 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 ff67 	bl	8003ed0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	3301      	adds	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	795b      	ldrb	r3, [r3, #5]
 800300c:	461a      	mov	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	4293      	cmp	r3, r2
 8003012:	d3d3      	bcc.n	8002fbc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800301c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f004 f800 	bl	8007028 <USB_ReadInterrupts>
 8003028:	4603      	mov	r3, r0
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b10      	cmp	r3, #16
 8003030:	d101      	bne.n	8003036 <HAL_HCD_IRQHandler+0x1ea>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <HAL_HCD_IRQHandler+0x1ec>
 8003036:	2300      	movs	r3, #0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d014      	beq.n	8003066 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0210 	bic.w	r2, r2, #16
 800304a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f001 fbfe 	bl	800484e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699a      	ldr	r2, [r3, #24]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0210 	orr.w	r2, r2, #16
 8003060:	619a      	str	r2, [r3, #24]
 8003062:	e000      	b.n	8003066 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003064:	bf00      	nop
    }
  }
}
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_HCD_Start+0x16>
 800307e:	2302      	movs	r3, #2
 8003080:	e013      	b.n	80030aa <HAL_HCD_Start+0x3e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2101      	movs	r1, #1
 8003090:	4618      	mov	r0, r3
 8003092:	f004 f968 	bl	8007366 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f003 fe60 	bl	8006d60 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <HAL_HCD_Stop+0x16>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e00d      	b.n	80030e4 <HAL_HCD_Stop+0x32>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f004 febb 	bl	8007e50 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f004 f90a 	bl	8007312 <USB_ResetPort>
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	334c      	adds	r3, #76	@ 0x4c
 8003124:	781b      	ldrb	r3, [r3, #0]
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	3338      	adds	r3, #56	@ 0x38
 800314e:	681b      	ldr	r3, [r3, #0]
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f004 f94c 	bl	8007406 <USB_GetCurrentFrame>
 800316e:	4603      	mov	r3, r0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3708      	adds	r7, #8
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f004 f927 	bl	80073d8 <USB_GetHostSpeed>
 800318a:	4603      	mov	r3, r0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3708      	adds	r7, #8
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	331a      	adds	r3, #26
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	331b      	adds	r3, #27
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	6879      	ldr	r1, [r7, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3325      	adds	r3, #37	@ 0x25
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	3324      	adds	r3, #36	@ 0x24
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	4611      	mov	r1, r2
 800321c:	4618      	mov	r0, r3
 800321e:	f003 ff16 	bl	800704e <USB_ReadChInterrupts>
 8003222:	4603      	mov	r3, r0
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b04      	cmp	r3, #4
 800322a:	d11a      	bne.n	8003262 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	015a      	lsls	r2, r3, #5
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	4413      	add	r3, r2
 8003234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003238:	461a      	mov	r2, r3
 800323a:	2304      	movs	r3, #4
 800323c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	334d      	adds	r3, #77	@ 0x4d
 800324e:	2207      	movs	r2, #7
 8003250:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	4611      	mov	r1, r2
 800325a:	4618      	mov	r0, r3
 800325c:	f004 fc9b 	bl	8007b96 <USB_HC_Halt>
 8003260:	e09e      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	4611      	mov	r1, r2
 800326a:	4618      	mov	r0, r3
 800326c:	f003 feef 	bl	800704e <USB_ReadChInterrupts>
 8003270:	4603      	mov	r3, r0
 8003272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003276:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800327a:	d11b      	bne.n	80032b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800328e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	334d      	adds	r3, #77	@ 0x4d
 80032a0:	2208      	movs	r2, #8
 80032a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	78fa      	ldrb	r2, [r7, #3]
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f004 fc72 	bl	8007b96 <USB_HC_Halt>
 80032b2:	e075      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f003 fec6 	bl	800704e <USB_ReadChInterrupts>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d11a      	bne.n	8003302 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80032cc:	78fb      	ldrb	r3, [r7, #3]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d8:	461a      	mov	r2, r3
 80032da:	2308      	movs	r3, #8
 80032dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	334d      	adds	r3, #77	@ 0x4d
 80032ee:	2206      	movs	r2, #6
 80032f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 fc4b 	bl	8007b96 <USB_HC_Halt>
 8003300:	e04e      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fe9f 	bl	800704e <USB_ReadChInterrupts>
 8003310:	4603      	mov	r3, r0
 8003312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331a:	d11b      	bne.n	8003354 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800331c:	78fb      	ldrb	r3, [r7, #3]
 800331e:	015a      	lsls	r2, r3, #5
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	4413      	add	r3, r2
 8003324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003328:	461a      	mov	r2, r3
 800332a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800332e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334d      	adds	r3, #77	@ 0x4d
 8003340:	2209      	movs	r2, #9
 8003342:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	4611      	mov	r1, r2
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fc22 	bl	8007b96 <USB_HC_Halt>
 8003352:	e025      	b.n	80033a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f003 fe76 	bl	800704e <USB_ReadChInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003368:	2b80      	cmp	r3, #128	@ 0x80
 800336a:	d119      	bne.n	80033a0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	4413      	add	r3, r2
 8003374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003378:	461a      	mov	r2, r3
 800337a:	2380      	movs	r3, #128	@ 0x80
 800337c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	334d      	adds	r3, #77	@ 0x4d
 800338e:	2207      	movs	r2, #7
 8003390:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f004 fbfb 	bl	8007b96 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f003 fe50 	bl	800704e <USB_ReadChInterrupts>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033b8:	d112      	bne.n	80033e0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	f004 fbe7 	bl	8007b96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d4:	461a      	mov	r2, r3
 80033d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033da:	6093      	str	r3, [r2, #8]
 80033dc:	f000 bd75 	b.w	8003eca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	78fa      	ldrb	r2, [r7, #3]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f003 fe30 	bl	800704e <USB_ReadChInterrupts>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	f040 8128 	bne.w	800364a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4413      	add	r3, r2
 8003402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003406:	461a      	mov	r2, r3
 8003408:	2320      	movs	r3, #32
 800340a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	331b      	adds	r3, #27
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d119      	bne.n	8003456 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	331b      	adds	r3, #27
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003436:	78fb      	ldrb	r3, [r7, #3]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4413      	add	r3, r2
 800343e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	0151      	lsls	r1, r2, #5
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	440a      	add	r2, r1
 800344c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003454:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	799b      	ldrb	r3, [r3, #6]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01b      	beq.n	8003496 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	3330      	adds	r3, #48	@ 0x30
 800346e:	6819      	ldr	r1, [r3, #0]
 8003470:	78fb      	ldrb	r3, [r7, #3]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	4413      	add	r3, r2
 8003478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	1ac9      	subs	r1, r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4403      	add	r3, r0
 8003492:	3338      	adds	r3, #56	@ 0x38
 8003494:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	334d      	adds	r3, #77	@ 0x4d
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3344      	adds	r3, #68	@ 0x44
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	015a      	lsls	r2, r3, #5
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	4413      	add	r3, r2
 80034c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ca:	461a      	mov	r2, r3
 80034cc:	2301      	movs	r3, #1
 80034ce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3326      	adds	r3, #38	@ 0x26
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3326      	adds	r3, #38	@ 0x26
 80034f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d110      	bne.n	800351e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f004 fb46 	bl	8007b96 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4413      	add	r3, r2
 8003512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003516:	461a      	mov	r2, r3
 8003518:	2310      	movs	r3, #16
 800351a:	6093      	str	r3, [r2, #8]
 800351c:	e03d      	b.n	800359a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	3326      	adds	r3, #38	@ 0x26
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d00a      	beq.n	800354a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3326      	adds	r3, #38	@ 0x26
 8003544:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003546:	2b01      	cmp	r3, #1
 8003548:	d127      	bne.n	800359a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	4413      	add	r3, r2
 8003552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	78fa      	ldrb	r2, [r7, #3]
 800355a:	0151      	lsls	r1, r2, #5
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	440a      	add	r2, r1
 8003560:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003564:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003568:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	334c      	adds	r3, #76	@ 0x4c
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800357e:	78fa      	ldrb	r2, [r7, #3]
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	4613      	mov	r3, r2
 8003584:	011b      	lsls	r3, r3, #4
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	440b      	add	r3, r1
 800358c:	334c      	adds	r3, #76	@ 0x4c
 800358e:	781a      	ldrb	r2, [r3, #0]
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f006 fe57 	bl	800a248 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	799b      	ldrb	r3, [r3, #6]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d13b      	bne.n	800361a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3338      	adds	r3, #56	@ 0x38
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	78fa      	ldrb	r2, [r7, #3]
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4403      	add	r3, r0
 80035c2:	3328      	adds	r3, #40	@ 0x28
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	440b      	add	r3, r1
 80035c8:	1e59      	subs	r1, r3, #1
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4613      	mov	r3, r2
 80035d0:	011b      	lsls	r3, r3, #4
 80035d2:	1a9b      	subs	r3, r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4403      	add	r3, r0
 80035d8:	3328      	adds	r3, #40	@ 0x28
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8470 	beq.w	8003eca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80035ea:	78fa      	ldrb	r2, [r7, #3]
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	011b      	lsls	r3, r3, #4
 80035f2:	1a9b      	subs	r3, r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	440b      	add	r3, r1
 80035f8:	333c      	adds	r3, #60	@ 0x3c
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	78fa      	ldrb	r2, [r7, #3]
 80035fe:	f083 0301 	eor.w	r3, r3, #1
 8003602:	b2d8      	uxtb	r0, r3
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	333c      	adds	r3, #60	@ 0x3c
 8003612:	4602      	mov	r2, r0
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	f000 bc58 	b.w	8003eca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	1a9b      	subs	r3, r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	333c      	adds	r3, #60	@ 0x3c
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	f083 0301 	eor.w	r3, r3, #1
 8003632:	b2d8      	uxtb	r0, r3
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	333c      	adds	r3, #60	@ 0x3c
 8003642:	4602      	mov	r2, r0
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	f000 bc40 	b.w	8003eca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f003 fcfb 	bl	800704e <USB_ReadChInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b20      	cmp	r3, #32
 8003660:	d131      	bne.n	80036c6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800366e:	461a      	mov	r2, r3
 8003670:	2320      	movs	r3, #32
 8003672:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	331a      	adds	r3, #26
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	f040 841f 	bne.w	8003eca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	331b      	adds	r3, #27
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	334d      	adds	r3, #77	@ 0x4d
 80036b0:	2203      	movs	r2, #3
 80036b2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f004 fa6a 	bl	8007b96 <USB_HC_Halt>
 80036c2:	f000 bc02 	b.w	8003eca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	4611      	mov	r1, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f003 fcbd 	bl	800704e <USB_ReadChInterrupts>
 80036d4:	4603      	mov	r3, r0
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b02      	cmp	r3, #2
 80036dc:	f040 8305 	bne.w	8003cea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80036e0:	78fb      	ldrb	r3, [r7, #3]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	2302      	movs	r3, #2
 80036f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334d      	adds	r3, #77	@ 0x4d
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d114      	bne.n	8003732 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	334d      	adds	r3, #77	@ 0x4d
 8003718:	2202      	movs	r2, #2
 800371a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	334c      	adds	r3, #76	@ 0x4c
 800372c:	2201      	movs	r2, #1
 800372e:	701a      	strb	r2, [r3, #0]
 8003730:	e2cc      	b.n	8003ccc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	334d      	adds	r3, #77	@ 0x4d
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b06      	cmp	r3, #6
 8003746:	d114      	bne.n	8003772 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	334d      	adds	r3, #77	@ 0x4d
 8003758:	2202      	movs	r2, #2
 800375a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	334c      	adds	r3, #76	@ 0x4c
 800376c:	2205      	movs	r2, #5
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	e2ac      	b.n	8003ccc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	334d      	adds	r3, #77	@ 0x4d
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b07      	cmp	r3, #7
 8003786:	d00b      	beq.n	80037a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	334d      	adds	r3, #77	@ 0x4d
 8003798:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800379a:	2b09      	cmp	r3, #9
 800379c:	f040 80a6 	bne.w	80038ec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	334d      	adds	r3, #77	@ 0x4d
 80037b0:	2202      	movs	r2, #2
 80037b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	3344      	adds	r3, #68	@ 0x44
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1c59      	adds	r1, r3, #1
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4403      	add	r3, r0
 80037d4:	3344      	adds	r3, #68	@ 0x44
 80037d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3344      	adds	r3, #68	@ 0x44
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d943      	bls.n	8003876 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	3344      	adds	r3, #68	@ 0x44
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	1a9b      	subs	r3, r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	331a      	adds	r3, #26
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d123      	bne.n	8003860 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	331b      	adds	r3, #27
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	6879      	ldr	r1, [r7, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	011b      	lsls	r3, r3, #4
 8003834:	1a9b      	subs	r3, r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	331c      	adds	r3, #28
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	440a      	add	r2, r1
 8003856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800385a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800385e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	440b      	add	r3, r1
 800386e:	334c      	adds	r3, #76	@ 0x4c
 8003870:	2204      	movs	r2, #4
 8003872:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003874:	e229      	b.n	8003cca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	334c      	adds	r3, #76	@ 0x4c
 8003886:	2202      	movs	r2, #2
 8003888:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3326      	adds	r3, #38	@ 0x26
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3326      	adds	r3, #38	@ 0x26
 80038b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	f040 8209 	bne.w	8003cca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e4:	461a      	mov	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038ea:	e1ee      	b.n	8003cca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	334d      	adds	r3, #77	@ 0x4d
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	f040 80c8 	bne.w	8003a94 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	334d      	adds	r3, #77	@ 0x4d
 8003914:	2202      	movs	r2, #2
 8003916:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	4613      	mov	r3, r2
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	1a9b      	subs	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	331b      	adds	r3, #27
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b01      	cmp	r3, #1
 800392c:	f040 81ce 	bne.w	8003ccc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	3326      	adds	r3, #38	@ 0x26
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d16b      	bne.n	8003a1e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003946:	78fa      	ldrb	r2, [r7, #3]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	3348      	adds	r3, #72	@ 0x48
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	1c59      	adds	r1, r3, #1
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4403      	add	r3, r0
 8003966:	3348      	adds	r3, #72	@ 0x48
 8003968:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	3348      	adds	r3, #72	@ 0x48
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d943      	bls.n	8003a08 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003980:	78fa      	ldrb	r2, [r7, #3]
 8003982:	6879      	ldr	r1, [r7, #4]
 8003984:	4613      	mov	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3348      	adds	r3, #72	@ 0x48
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	331b      	adds	r3, #27
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	3344      	adds	r3, #68	@ 0x44
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d809      	bhi.n	80039d2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80039be:	78fa      	ldrb	r2, [r7, #3]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	331c      	adds	r3, #28
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	0151      	lsls	r1, r2, #5
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	440a      	add	r2, r1
 80039e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	334c      	adds	r3, #76	@ 0x4c
 8003a02:	2204      	movs	r2, #4
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e014      	b.n	8003a32 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	334c      	adds	r3, #76	@ 0x4c
 8003a18:	2202      	movs	r2, #2
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e009      	b.n	8003a32 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	334c      	adds	r3, #76	@ 0x4c
 8003a2e:	2202      	movs	r2, #2
 8003a30:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3326      	adds	r3, #38	@ 0x26
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3326      	adds	r3, #38	@ 0x26
 8003a58:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	f040 8136 	bne.w	8003ccc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a60:	78fb      	ldrb	r3, [r7, #3]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a76:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a7e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e11b      	b.n	8003ccc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	011b      	lsls	r3, r3, #4
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	334d      	adds	r3, #77	@ 0x4d
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	f040 8081 	bne.w	8003bae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	334d      	adds	r3, #77	@ 0x4d
 8003abc:	2202      	movs	r2, #2
 8003abe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	331b      	adds	r3, #27
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	f040 80fa 	bne.w	8003ccc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	334c      	adds	r3, #76	@ 0x4c
 8003ae8:	2202      	movs	r2, #2
 8003aea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	0151      	lsls	r1, r2, #5
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	440a      	add	r2, r1
 8003b02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003b0c:	78fb      	ldrb	r3, [r7, #3]
 8003b0e:	015a      	lsls	r2, r3, #5
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	0151      	lsls	r1, r2, #5
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	440a      	add	r2, r1
 8003b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b2a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b46:	f023 0320 	bic.w	r3, r3, #32
 8003b4a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3326      	adds	r3, #38	@ 0x26
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	3326      	adds	r3, #38	@ 0x26
 8003b72:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	f040 80a9 	bne.w	8003ccc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b98:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b9a:	78fb      	ldrb	r3, [r7, #3]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e08e      	b.n	8003ccc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	334d      	adds	r3, #77	@ 0x4d
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	d143      	bne.n	8003c4c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	334d      	adds	r3, #77	@ 0x4d
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bd8:	78fa      	ldrb	r2, [r7, #3]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	334c      	adds	r3, #76	@ 0x4c
 8003be8:	2202      	movs	r2, #2
 8003bea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3326      	adds	r3, #38	@ 0x26
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	3326      	adds	r3, #38	@ 0x26
 8003c12:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d159      	bne.n	8003ccc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c2e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c36:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e03f      	b.n	8003ccc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	334d      	adds	r3, #77	@ 0x4d
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d126      	bne.n	8003cb0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334d      	adds	r3, #77	@ 0x4d
 8003c72:	2202      	movs	r2, #2
 8003c74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	3344      	adds	r3, #68	@ 0x44
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	1c59      	adds	r1, r3, #1
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4403      	add	r3, r0
 8003c96:	3344      	adds	r3, #68	@ 0x44
 8003c98:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	334c      	adds	r3, #76	@ 0x4c
 8003caa:	2204      	movs	r2, #4
 8003cac:	701a      	strb	r2, [r3, #0]
 8003cae:	e00d      	b.n	8003ccc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003cb0:	78fa      	ldrb	r2, [r7, #3]
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	334d      	adds	r3, #77	@ 0x4d
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	f000 8100 	beq.w	8003ec8 <HCD_HC_IN_IRQHandler+0xcca>
 8003cc8:	e000      	b.n	8003ccc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	334c      	adds	r3, #76	@ 0x4c
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f006 fab0 	bl	800a248 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ce8:	e0ef      	b.n	8003eca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	78fa      	ldrb	r2, [r7, #3]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f003 f9ab 	bl	800704e <USB_ReadChInterrupts>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfe:	2b40      	cmp	r3, #64	@ 0x40
 8003d00:	d12f      	bne.n	8003d62 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2340      	movs	r3, #64	@ 0x40
 8003d12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334d      	adds	r3, #77	@ 0x4d
 8003d24:	2205      	movs	r2, #5
 8003d26:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	331a      	adds	r3, #26
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3344      	adds	r3, #68	@ 0x44
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f003 ff1b 	bl	8007b96 <USB_HC_Halt>
 8003d60:	e0b3      	b.n	8003eca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f003 f96f 	bl	800704e <USB_ReadChInterrupts>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f003 0310 	and.w	r3, r3, #16
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	f040 80a7 	bne.w	8003eca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3326      	adds	r3, #38	@ 0x26
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b03      	cmp	r3, #3
 8003d90:	d11b      	bne.n	8003dca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3344      	adds	r3, #68	@ 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	334d      	adds	r3, #77	@ 0x4d
 8003db6:	2204      	movs	r2, #4
 8003db8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f003 fee7 	bl	8007b96 <USB_HC_Halt>
 8003dc8:	e03f      	b.n	8003e4a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3326      	adds	r3, #38	@ 0x26
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00a      	beq.n	8003df6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	3326      	adds	r3, #38	@ 0x26
 8003df0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d129      	bne.n	8003e4a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3344      	adds	r3, #68	@ 0x44
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	799b      	ldrb	r3, [r3, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <HCD_HC_IN_IRQHandler+0xc2a>
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	1a9b      	subs	r3, r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	440b      	add	r3, r1
 8003e20:	331b      	adds	r3, #27
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d110      	bne.n	8003e4a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	334d      	adds	r3, #77	@ 0x4d
 8003e38:	2204      	movs	r2, #4
 8003e3a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 fea6 	bl	8007b96 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e4a:	78fa      	ldrb	r2, [r7, #3]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	331b      	adds	r3, #27
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d129      	bne.n	8003eb4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	331b      	adds	r3, #27
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e74:	78fb      	ldrb	r3, [r7, #3]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	0151      	lsls	r1, r2, #5
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	440a      	add	r2, r1
 8003e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e92:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	0151      	lsls	r1, r2, #5
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	440a      	add	r2, r1
 8003eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003eae:	f043 0320 	orr.w	r3, r3, #32
 8003eb2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2310      	movs	r3, #16
 8003ec4:	6093      	str	r3, [r2, #8]
 8003ec6:	e000      	b.n	8003eca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ec8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f003 f8ad 	bl	800704e <USB_ReadChInterrupts>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d11b      	bne.n	8003f36 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f10:	78fa      	ldrb	r2, [r7, #3]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	1a9b      	subs	r3, r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	334d      	adds	r3, #77	@ 0x4d
 8003f20:	2207      	movs	r2, #7
 8003f22:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fe32 	bl	8007b96 <USB_HC_Halt>
 8003f32:	f000 bc89 	b.w	8004848 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	78fa      	ldrb	r2, [r7, #3]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f003 f885 	bl	800704e <USB_ReadChInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	f040 8082 	bne.w	8004054 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2320      	movs	r3, #32
 8003f60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3319      	adds	r3, #25
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d124      	bne.n	8003fc2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003f78:	78fa      	ldrb	r2, [r7, #3]
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	1a9b      	subs	r3, r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	3319      	adds	r3, #25
 8003f88:	2200      	movs	r2, #0
 8003f8a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	334c      	adds	r3, #76	@ 0x4c
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	334d      	adds	r3, #77	@ 0x4d
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 fdea 	bl	8007b96 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	331a      	adds	r3, #26
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	f040 8437 	bne.w	8004848 <HCD_HC_OUT_IRQHandler+0x978>
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	011b      	lsls	r3, r3, #4
 8003fe2:	1a9b      	subs	r3, r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	331b      	adds	r3, #27
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f040 842b 	bne.w	8004848 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	3326      	adds	r3, #38	@ 0x26
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d009      	beq.n	800401c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004008:	78fa      	ldrb	r2, [r7, #3]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	011b      	lsls	r3, r3, #4
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	331b      	adds	r3, #27
 8004018:	2201      	movs	r2, #1
 800401a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	1a9b      	subs	r3, r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	334d      	adds	r3, #77	@ 0x4d
 800402c:	2203      	movs	r2, #3
 800402e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	78fa      	ldrb	r2, [r7, #3]
 8004036:	4611      	mov	r1, r2
 8004038:	4618      	mov	r0, r3
 800403a:	f003 fdac 	bl	8007b96 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3344      	adds	r3, #68	@ 0x44
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e3f9      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f002 fff6 	bl	800704e <USB_ReadChInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800406c:	d111      	bne.n	8004092 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800406e:	78fb      	ldrb	r3, [r7, #3]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800407a:	461a      	mov	r2, r3
 800407c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004080:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fd83 	bl	8007b96 <USB_HC_Halt>
 8004090:	e3da      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f002 ffd7 	bl	800704e <USB_ReadChInterrupts>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d168      	bne.n	800417c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80040aa:	78fa      	ldrb	r2, [r7, #3]
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	1a9b      	subs	r3, r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	3344      	adds	r3, #68	@ 0x44
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f002 ffc1 	bl	800704e <USB_ReadChInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	2b40      	cmp	r3, #64	@ 0x40
 80040d4:	d112      	bne.n	80040fc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	3319      	adds	r3, #25
 80040e6:	2201      	movs	r2, #1
 80040e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f6:	461a      	mov	r2, r3
 80040f8:	2340      	movs	r3, #64	@ 0x40
 80040fa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	331b      	adds	r3, #27
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d019      	beq.n	8004146 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	331b      	adds	r3, #27
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4413      	add	r3, r2
 800412e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	0151      	lsls	r1, r2, #5
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	440a      	add	r2, r1
 800413c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004140:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004144:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004152:	461a      	mov	r2, r3
 8004154:	2301      	movs	r3, #1
 8004156:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	334d      	adds	r3, #77	@ 0x4d
 8004168:	2201      	movs	r2, #1
 800416a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	4611      	mov	r1, r2
 8004174:	4618      	mov	r0, r3
 8004176:	f003 fd0e 	bl	8007b96 <USB_HC_Halt>
 800417a:	e365      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	78fa      	ldrb	r2, [r7, #3]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f002 ff62 	bl	800704e <USB_ReadChInterrupts>
 800418a:	4603      	mov	r3, r0
 800418c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004190:	2b40      	cmp	r3, #64	@ 0x40
 8004192:	d139      	bne.n	8004208 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	334d      	adds	r3, #77	@ 0x4d
 80041a4:	2205      	movs	r2, #5
 80041a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	6879      	ldr	r1, [r7, #4]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	331a      	adds	r3, #26
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	1a9b      	subs	r3, r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	3319      	adds	r3, #25
 80041ce:	2201      	movs	r2, #1
 80041d0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	4613      	mov	r3, r2
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	1a9b      	subs	r3, r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	3344      	adds	r3, #68	@ 0x44
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f003 fcd1 	bl	8007b96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004200:	461a      	mov	r2, r3
 8004202:	2340      	movs	r3, #64	@ 0x40
 8004204:	6093      	str	r3, [r2, #8]
 8004206:	e31f      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	78fa      	ldrb	r2, [r7, #3]
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f002 ff1c 	bl	800704e <USB_ReadChInterrupts>
 8004216:	4603      	mov	r3, r0
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d11a      	bne.n	8004256 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	015a      	lsls	r2, r3, #5
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	4413      	add	r3, r2
 8004228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422c:	461a      	mov	r2, r3
 800422e:	2308      	movs	r3, #8
 8004230:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	334d      	adds	r3, #77	@ 0x4d
 8004242:	2206      	movs	r2, #6
 8004244:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	4611      	mov	r1, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f003 fca1 	bl	8007b96 <USB_HC_Halt>
 8004254:	e2f8      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f002 fef5 	bl	800704e <USB_ReadChInterrupts>
 8004264:	4603      	mov	r3, r0
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b10      	cmp	r3, #16
 800426c:	d144      	bne.n	80042f8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800426e:	78fa      	ldrb	r2, [r7, #3]
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	4613      	mov	r3, r2
 8004274:	011b      	lsls	r3, r3, #4
 8004276:	1a9b      	subs	r3, r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	3344      	adds	r3, #68	@ 0x44
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	334d      	adds	r3, #77	@ 0x4d
 8004292:	2204      	movs	r2, #4
 8004294:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	3319      	adds	r3, #25
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d114      	bne.n	80042d6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	3318      	adds	r3, #24
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d109      	bne.n	80042d6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	3319      	adds	r3, #25
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	78fa      	ldrb	r2, [r7, #3]
 80042dc:	4611      	mov	r1, r2
 80042de:	4618      	mov	r0, r3
 80042e0:	f003 fc59 	bl	8007b96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f0:	461a      	mov	r2, r3
 80042f2:	2310      	movs	r3, #16
 80042f4:	6093      	str	r3, [r2, #8]
 80042f6:	e2a7      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f002 fea4 	bl	800704e <USB_ReadChInterrupts>
 8004306:	4603      	mov	r3, r0
 8004308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800430c:	2b80      	cmp	r3, #128	@ 0x80
 800430e:	f040 8083 	bne.w	8004418 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	799b      	ldrb	r3, [r3, #6]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d111      	bne.n	800433e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	334d      	adds	r3, #77	@ 0x4d
 800432a:	2207      	movs	r2, #7
 800432c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	78fa      	ldrb	r2, [r7, #3]
 8004334:	4611      	mov	r1, r2
 8004336:	4618      	mov	r0, r3
 8004338:	f003 fc2d 	bl	8007b96 <USB_HC_Halt>
 800433c:	e062      	b.n	8004404 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	3344      	adds	r3, #68	@ 0x44
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	1c59      	adds	r1, r3, #1
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4403      	add	r3, r0
 800435e:	3344      	adds	r3, #68	@ 0x44
 8004360:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	3344      	adds	r3, #68	@ 0x44
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d922      	bls.n	80043be <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004378:	78fa      	ldrb	r2, [r7, #3]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	3344      	adds	r3, #68	@ 0x44
 8004388:	2200      	movs	r2, #0
 800438a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	334c      	adds	r3, #76	@ 0x4c
 800439c:	2204      	movs	r2, #4
 800439e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	334c      	adds	r3, #76	@ 0x4c
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	4619      	mov	r1, r3
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f005 ff46 	bl	800a248 <HAL_HCD_HC_NotifyURBChange_Callback>
 80043bc:	e022      	b.n	8004404 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043be:	78fa      	ldrb	r2, [r7, #3]
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	4613      	mov	r3, r2
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	334c      	adds	r3, #76	@ 0x4c
 80043ce:	2202      	movs	r2, #2
 80043d0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80043e8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043f0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004410:	461a      	mov	r2, r3
 8004412:	2380      	movs	r3, #128	@ 0x80
 8004414:	6093      	str	r3, [r2, #8]
 8004416:	e217      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f002 fe14 	bl	800704e <USB_ReadChInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800442c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004430:	d11b      	bne.n	800446a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	334d      	adds	r3, #77	@ 0x4d
 8004442:	2209      	movs	r2, #9
 8004444:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	4611      	mov	r1, r2
 800444e:	4618      	mov	r0, r3
 8004450:	f003 fba1 	bl	8007b96 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	015a      	lsls	r2, r3, #5
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4413      	add	r3, r2
 800445c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004460:	461a      	mov	r2, r3
 8004462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004466:	6093      	str	r3, [r2, #8]
 8004468:	e1ee      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	78fa      	ldrb	r2, [r7, #3]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f002 fdeb 	bl	800704e <USB_ReadChInterrupts>
 8004478:	4603      	mov	r3, r0
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b02      	cmp	r3, #2
 8004480:	f040 81df 	bne.w	8004842 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004490:	461a      	mov	r2, r3
 8004492:	2302      	movs	r3, #2
 8004494:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	334d      	adds	r3, #77	@ 0x4d
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	f040 8093 	bne.w	80045d4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	4613      	mov	r3, r2
 80044b4:	011b      	lsls	r3, r3, #4
 80044b6:	1a9b      	subs	r3, r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	440b      	add	r3, r1
 80044bc:	334d      	adds	r3, #77	@ 0x4d
 80044be:	2202      	movs	r2, #2
 80044c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044c2:	78fa      	ldrb	r2, [r7, #3]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	1a9b      	subs	r3, r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	334c      	adds	r3, #76	@ 0x4c
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3326      	adds	r3, #38	@ 0x26
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d00b      	beq.n	8004504 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3326      	adds	r3, #38	@ 0x26
 80044fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80044fe:	2b03      	cmp	r3, #3
 8004500:	f040 8190 	bne.w	8004824 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	799b      	ldrb	r3, [r3, #6]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d115      	bne.n	8004538 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800450c:	78fa      	ldrb	r2, [r7, #3]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	4613      	mov	r3, r2
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	1a9b      	subs	r3, r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	333d      	adds	r3, #61	@ 0x3d
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	f083 0301 	eor.w	r3, r3, #1
 8004524:	b2d8      	uxtb	r0, r3
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	333d      	adds	r3, #61	@ 0x3d
 8004534:	4602      	mov	r2, r0
 8004536:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	799b      	ldrb	r3, [r3, #6]
 800453c:	2b01      	cmp	r3, #1
 800453e:	f040 8171 	bne.w	8004824 <HCD_HC_OUT_IRQHandler+0x954>
 8004542:	78fa      	ldrb	r2, [r7, #3]
 8004544:	6879      	ldr	r1, [r7, #4]
 8004546:	4613      	mov	r3, r2
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	1a9b      	subs	r3, r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	440b      	add	r3, r1
 8004550:	3334      	adds	r3, #52	@ 0x34
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8165 	beq.w	8004824 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	3334      	adds	r3, #52	@ 0x34
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4403      	add	r3, r0
 800457a:	3328      	adds	r3, #40	@ 0x28
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	440b      	add	r3, r1
 8004580:	1e59      	subs	r1, r3, #1
 8004582:	78fa      	ldrb	r2, [r7, #3]
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4613      	mov	r3, r2
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	1a9b      	subs	r3, r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4403      	add	r3, r0
 8004590:	3328      	adds	r3, #40	@ 0x28
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	fbb1 f3f3 	udiv	r3, r1, r3
 8004598:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f000 813f 	beq.w	8004824 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	333d      	adds	r3, #61	@ 0x3d
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	78fa      	ldrb	r2, [r7, #3]
 80045ba:	f083 0301 	eor.w	r3, r3, #1
 80045be:	b2d8      	uxtb	r0, r3
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	4613      	mov	r3, r2
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	333d      	adds	r3, #61	@ 0x3d
 80045ce:	4602      	mov	r2, r0
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	e127      	b.n	8004824 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80045d4:	78fa      	ldrb	r2, [r7, #3]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	011b      	lsls	r3, r3, #4
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	334d      	adds	r3, #77	@ 0x4d
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d120      	bne.n	800462c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045ea:	78fa      	ldrb	r2, [r7, #3]
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	1a9b      	subs	r3, r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	334d      	adds	r3, #77	@ 0x4d
 80045fa:	2202      	movs	r2, #2
 80045fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045fe:	78fa      	ldrb	r2, [r7, #3]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	331b      	adds	r3, #27
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	f040 8107 	bne.w	8004824 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	4613      	mov	r3, r2
 800461c:	011b      	lsls	r3, r3, #4
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	334c      	adds	r3, #76	@ 0x4c
 8004626:	2202      	movs	r2, #2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	e0fb      	b.n	8004824 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800462c:	78fa      	ldrb	r2, [r7, #3]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	4613      	mov	r3, r2
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	1a9b      	subs	r3, r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	440b      	add	r3, r1
 800463a:	334d      	adds	r3, #77	@ 0x4d
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b04      	cmp	r3, #4
 8004640:	d13a      	bne.n	80046b8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004642:	78fa      	ldrb	r2, [r7, #3]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	4613      	mov	r3, r2
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	1a9b      	subs	r3, r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	334d      	adds	r3, #77	@ 0x4d
 8004652:	2202      	movs	r2, #2
 8004654:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004656:	78fa      	ldrb	r2, [r7, #3]
 8004658:	6879      	ldr	r1, [r7, #4]
 800465a:	4613      	mov	r3, r2
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	440b      	add	r3, r1
 8004664:	334c      	adds	r3, #76	@ 0x4c
 8004666:	2202      	movs	r2, #2
 8004668:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800466a:	78fa      	ldrb	r2, [r7, #3]
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	331b      	adds	r3, #27
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	f040 80d1 	bne.w	8004824 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004682:	78fa      	ldrb	r2, [r7, #3]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	1a9b      	subs	r3, r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	331b      	adds	r3, #27
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004696:	78fb      	ldrb	r3, [r7, #3]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	78fa      	ldrb	r2, [r7, #3]
 80046a6:	0151      	lsls	r1, r2, #5
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	440a      	add	r2, r1
 80046ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046b4:	6053      	str	r3, [r2, #4]
 80046b6:	e0b5      	b.n	8004824 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	334d      	adds	r3, #77	@ 0x4d
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b05      	cmp	r3, #5
 80046cc:	d114      	bne.n	80046f8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	334d      	adds	r3, #77	@ 0x4d
 80046de:	2202      	movs	r2, #2
 80046e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	4613      	mov	r3, r2
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	440b      	add	r3, r1
 80046f0:	334c      	adds	r3, #76	@ 0x4c
 80046f2:	2202      	movs	r2, #2
 80046f4:	701a      	strb	r2, [r3, #0]
 80046f6:	e095      	b.n	8004824 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	334d      	adds	r3, #77	@ 0x4d
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b06      	cmp	r3, #6
 800470c:	d114      	bne.n	8004738 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	334d      	adds	r3, #77	@ 0x4d
 800471e:	2202      	movs	r2, #2
 8004720:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	334c      	adds	r3, #76	@ 0x4c
 8004732:	2205      	movs	r2, #5
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e075      	b.n	8004824 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	334d      	adds	r3, #77	@ 0x4d
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b07      	cmp	r3, #7
 800474c:	d00a      	beq.n	8004764 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	334d      	adds	r3, #77	@ 0x4d
 800475e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004760:	2b09      	cmp	r3, #9
 8004762:	d170      	bne.n	8004846 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004764:	78fa      	ldrb	r2, [r7, #3]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	334d      	adds	r3, #77	@ 0x4d
 8004774:	2202      	movs	r2, #2
 8004776:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	3344      	adds	r3, #68	@ 0x44
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4403      	add	r3, r0
 8004798:	3344      	adds	r3, #68	@ 0x44
 800479a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800479c:	78fa      	ldrb	r2, [r7, #3]
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	4613      	mov	r3, r2
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	440b      	add	r3, r1
 80047aa:	3344      	adds	r3, #68	@ 0x44
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d914      	bls.n	80047dc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	3344      	adds	r3, #68	@ 0x44
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047c6:	78fa      	ldrb	r2, [r7, #3]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	011b      	lsls	r3, r3, #4
 80047ce:	1a9b      	subs	r3, r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	334c      	adds	r3, #76	@ 0x4c
 80047d6:	2204      	movs	r2, #4
 80047d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047da:	e022      	b.n	8004822 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	334c      	adds	r3, #76	@ 0x4c
 80047ec:	2202      	movs	r2, #2
 80047ee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80047f0:	78fb      	ldrb	r3, [r7, #3]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004806:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800480e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	015a      	lsls	r2, r3, #5
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	4413      	add	r3, r2
 8004818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800481c:	461a      	mov	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004822:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004824:	78fa      	ldrb	r2, [r7, #3]
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	011b      	lsls	r3, r3, #4
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	334c      	adds	r3, #76	@ 0x4c
 8004834:	781a      	ldrb	r2, [r3, #0]
 8004836:	78fb      	ldrb	r3, [r7, #3]
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f005 fd04 	bl	800a248 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004840:	e002      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004842:	bf00      	nop
 8004844:	e000      	b.n	8004848 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004846:	bf00      	nop
  }
}
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b08a      	sub	sp, #40	@ 0x28
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	0c5b      	lsrs	r3, r3, #17
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004882:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d004      	beq.n	8004894 <HCD_RXQLVL_IRQHandler+0x46>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b05      	cmp	r3, #5
 800488e:	f000 80b6 	beq.w	80049fe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004892:	e0b7      	b.n	8004a04 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80b3 	beq.w	8004a02 <HCD_RXQLVL_IRQHandler+0x1b4>
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4613      	mov	r3, r2
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	332c      	adds	r3, #44	@ 0x2c
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80a7 	beq.w	8004a02 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80048b4:	6879      	ldr	r1, [r7, #4]
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4613      	mov	r3, r2
 80048ba:	011b      	lsls	r3, r3, #4
 80048bc:	1a9b      	subs	r3, r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	3338      	adds	r3, #56	@ 0x38
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	18d1      	adds	r1, r2, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4613      	mov	r3, r2
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4403      	add	r3, r0
 80048d8:	3334      	adds	r3, #52	@ 0x34
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4299      	cmp	r1, r3
 80048de:	f200 8083 	bhi.w	80049e8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	332c      	adds	r3, #44	@ 0x2c
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	b292      	uxth	r2, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	f002 fb3b 	bl	8006f78 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4613      	mov	r3, r2
 8004908:	011b      	lsls	r3, r3, #4
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	332c      	adds	r3, #44	@ 0x2c
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	18d1      	adds	r1, r2, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4403      	add	r3, r0
 8004926:	332c      	adds	r3, #44	@ 0x2c
 8004928:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4613      	mov	r3, r2
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	1a9b      	subs	r3, r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	3338      	adds	r3, #56	@ 0x38
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	18d1      	adds	r1, r2, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4613      	mov	r3, r2
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	1a9b      	subs	r3, r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4403      	add	r3, r0
 800494e:	3338      	adds	r3, #56	@ 0x38
 8004950:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	4413      	add	r3, r2
 800495a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	0cdb      	lsrs	r3, r3, #19
 8004962:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004966:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4613      	mov	r3, r2
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	1a9b      	subs	r3, r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	3328      	adds	r3, #40	@ 0x28
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4293      	cmp	r3, r2
 8004980:	d13f      	bne.n	8004a02 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d03c      	beq.n	8004a02 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800499e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4613      	mov	r3, r2
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	333c      	adds	r3, #60	@ 0x3c
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	f083 0301 	eor.w	r3, r3, #1
 80049d0:	b2d8      	uxtb	r0, r3
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4613      	mov	r3, r2
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	1a9b      	subs	r3, r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	333c      	adds	r3, #60	@ 0x3c
 80049e2:	4602      	mov	r2, r0
 80049e4:	701a      	strb	r2, [r3, #0]
      break;
 80049e6:	e00c      	b.n	8004a02 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4613      	mov	r3, r2
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	1a9b      	subs	r3, r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	334c      	adds	r3, #76	@ 0x4c
 80049f8:	2204      	movs	r2, #4
 80049fa:	701a      	strb	r2, [r3, #0]
      break;
 80049fc:	e001      	b.n	8004a02 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004a02:	bf00      	nop
  }
}
 8004a04:	bf00      	nop
 8004a06:	3728      	adds	r7, #40	@ 0x28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004a38:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d10b      	bne.n	8004a5c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d102      	bne.n	8004a54 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f005 fbde 	bl	800a210 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f043 0302 	orr.w	r3, r3, #2
 8004a5a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b08      	cmp	r3, #8
 8004a64:	d132      	bne.n	8004acc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f043 0308 	orr.w	r3, r3, #8
 8004a6c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d126      	bne.n	8004ac6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	7a5b      	ldrb	r3, [r3, #9]
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d113      	bne.n	8004aa8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a8a:	d106      	bne.n	8004a9a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2102      	movs	r1, #2
 8004a92:	4618      	mov	r0, r3
 8004a94:	f002 fc00 	bl	8007298 <USB_InitFSLSPClkSel>
 8004a98:	e011      	b.n	8004abe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f002 fbf9 	bl	8007298 <USB_InitFSLSPClkSel>
 8004aa6:	e00a      	b.n	8004abe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	79db      	ldrb	r3, [r3, #7]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d106      	bne.n	8004abe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004abc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f005 fbd0 	bl	800a264 <HAL_HCD_PortEnabled_Callback>
 8004ac4:	e002      	b.n	8004acc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f005 fbda 	bl	800a280 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	d103      	bne.n	8004ade <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f043 0320 	orr.w	r3, r3, #32
 8004adc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6013      	str	r3, [r2, #0]
}
 8004aea:	bf00      	nop
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e12b      	b.n	8004d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc fa42 	bl	8000fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	@ 0x24
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b58:	f001 fa20 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 8004b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4a81      	ldr	r2, [pc, #516]	@ (8004d68 <HAL_I2C_Init+0x274>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d807      	bhi.n	8004b78 <HAL_I2C_Init+0x84>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a80      	ldr	r2, [pc, #512]	@ (8004d6c <HAL_I2C_Init+0x278>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	bf94      	ite	ls
 8004b70:	2301      	movls	r3, #1
 8004b72:	2300      	movhi	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e006      	b.n	8004b86 <HAL_I2C_Init+0x92>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a7d      	ldr	r2, [pc, #500]	@ (8004d70 <HAL_I2C_Init+0x27c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	bf94      	ite	ls
 8004b80:	2301      	movls	r3, #1
 8004b82:	2300      	movhi	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e0e7      	b.n	8004d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a78      	ldr	r2, [pc, #480]	@ (8004d74 <HAL_I2C_Init+0x280>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	0c9b      	lsrs	r3, r3, #18
 8004b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8004d68 <HAL_I2C_Init+0x274>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d802      	bhi.n	8004bc8 <HAL_I2C_Init+0xd4>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	e009      	b.n	8004bdc <HAL_I2C_Init+0xe8>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	4a69      	ldr	r2, [pc, #420]	@ (8004d78 <HAL_I2C_Init+0x284>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	099b      	lsrs	r3, r3, #6
 8004bda:	3301      	adds	r3, #1
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004bee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	495c      	ldr	r1, [pc, #368]	@ (8004d68 <HAL_I2C_Init+0x274>)
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	d819      	bhi.n	8004c30 <HAL_I2C_Init+0x13c>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e59      	subs	r1, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c0a:	1c59      	adds	r1, r3, #1
 8004c0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c10:	400b      	ands	r3, r1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_I2C_Init+0x138>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1e59      	subs	r1, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c24:	3301      	adds	r3, #1
 8004c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2a:	e051      	b.n	8004cd0 <HAL_I2C_Init+0x1dc>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	e04f      	b.n	8004cd0 <HAL_I2C_Init+0x1dc>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d111      	bne.n	8004c5c <HAL_I2C_Init+0x168>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1e58      	subs	r0, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	440b      	add	r3, r1
 8004c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e012      	b.n	8004c82 <HAL_I2C_Init+0x18e>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1e58      	subs	r0, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	0099      	lsls	r1, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c72:	3301      	adds	r3, #1
 8004c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_Init+0x196>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e022      	b.n	8004cd0 <HAL_I2C_Init+0x1dc>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10e      	bne.n	8004cb0 <HAL_I2C_Init+0x1bc>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1e58      	subs	r0, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6859      	ldr	r1, [r3, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	440b      	add	r3, r1
 8004ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cae:	e00f      	b.n	8004cd0 <HAL_I2C_Init+0x1dc>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1e58      	subs	r0, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	0099      	lsls	r1, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	6809      	ldr	r1, [r1, #0]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004cfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6911      	ldr	r1, [r2, #16]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68d2      	ldr	r2, [r2, #12]
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	000186a0 	.word	0x000186a0
 8004d6c:	001e847f 	.word	0x001e847f
 8004d70:	003d08ff 	.word	0x003d08ff
 8004d74:	431bde83 	.word	0x431bde83
 8004d78:	10624dd3 	.word	0x10624dd3

08004d7c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e128      	b.n	8004fe0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a90      	ldr	r2, [pc, #576]	@ (8004fe8 <HAL_I2S_Init+0x26c>)
 8004da6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fc f943 	bl	8001034 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004dc4:	f023 030f 	bic.w	r3, r3, #15
 8004dc8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d060      	beq.n	8004e9c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004de2:	2310      	movs	r3, #16
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e001      	b.n	8004dec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004de8:	2320      	movs	r3, #32
 8004dea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	d802      	bhi.n	8004dfa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	005b      	lsls	r3, r3, #1
 8004df8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	f001 f9d8 	bl	80061b0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e00:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e0a:	d125      	bne.n	8004e58 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d010      	beq.n	8004e36 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	461a      	mov	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	3305      	adds	r3, #5
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	e01f      	b.n	8004e76 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	3305      	adds	r3, #5
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	e00e      	b.n	8004e76 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	461a      	mov	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e72:	3305      	adds	r3, #5
 8004e74:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	4a5c      	ldr	r2, [pc, #368]	@ (8004fec <HAL_I2S_Init+0x270>)
 8004e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7e:	08db      	lsrs	r3, r3, #3
 8004e80:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	e003      	b.n	8004ea4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d902      	bls.n	8004eb0 <HAL_I2S_Init+0x134>
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	2bff      	cmp	r3, #255	@ 0xff
 8004eae:	d907      	bls.n	8004ec0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eb4:	f043 0210 	orr.w	r2, r3, #16
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e08f      	b.n	8004fe0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	ea42 0103 	orr.w	r1, r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69db      	ldr	r3, [r3, #28]
 8004eda:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004ede:	f023 030f 	bic.w	r3, r3, #15
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6851      	ldr	r1, [r2, #4]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	6892      	ldr	r2, [r2, #8]
 8004eea:	4311      	orrs	r1, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	68d2      	ldr	r2, [r2, #12]
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6992      	ldr	r2, [r2, #24]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f02:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d161      	bne.n	8004fd0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a38      	ldr	r2, [pc, #224]	@ (8004ff0 <HAL_I2S_Init+0x274>)
 8004f10:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a37      	ldr	r2, [pc, #220]	@ (8004ff4 <HAL_I2S_Init+0x278>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d101      	bne.n	8004f20 <HAL_I2S_Init+0x1a4>
 8004f1c:	4b36      	ldr	r3, [pc, #216]	@ (8004ff8 <HAL_I2S_Init+0x27c>)
 8004f1e:	e001      	b.n	8004f24 <HAL_I2S_Init+0x1a8>
 8004f20:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6812      	ldr	r2, [r2, #0]
 8004f2a:	4932      	ldr	r1, [pc, #200]	@ (8004ff4 <HAL_I2S_Init+0x278>)
 8004f2c:	428a      	cmp	r2, r1
 8004f2e:	d101      	bne.n	8004f34 <HAL_I2S_Init+0x1b8>
 8004f30:	4a31      	ldr	r2, [pc, #196]	@ (8004ff8 <HAL_I2S_Init+0x27c>)
 8004f32:	e001      	b.n	8004f38 <HAL_I2S_Init+0x1bc>
 8004f34:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004f38:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004f3c:	f023 030f 	bic.w	r3, r3, #15
 8004f40:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2b      	ldr	r2, [pc, #172]	@ (8004ff4 <HAL_I2S_Init+0x278>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d101      	bne.n	8004f50 <HAL_I2S_Init+0x1d4>
 8004f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ff8 <HAL_I2S_Init+0x27c>)
 8004f4e:	e001      	b.n	8004f54 <HAL_I2S_Init+0x1d8>
 8004f50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f54:	2202      	movs	r2, #2
 8004f56:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a25      	ldr	r2, [pc, #148]	@ (8004ff4 <HAL_I2S_Init+0x278>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d101      	bne.n	8004f66 <HAL_I2S_Init+0x1ea>
 8004f62:	4b25      	ldr	r3, [pc, #148]	@ (8004ff8 <HAL_I2S_Init+0x27c>)
 8004f64:	e001      	b.n	8004f6a <HAL_I2S_Init+0x1ee>
 8004f66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f76:	d003      	beq.n	8004f80 <HAL_I2S_Init+0x204>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d103      	bne.n	8004f88 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004f80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	e001      	b.n	8004f8c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f96:	4313      	orrs	r3, r2
 8004f98:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	897b      	ldrh	r3, [r7, #10]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fb8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff4 <HAL_I2S_Init+0x278>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d101      	bne.n	8004fc8 <HAL_I2S_Init+0x24c>
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff8 <HAL_I2S_Init+0x27c>)
 8004fc6:	e001      	b.n	8004fcc <HAL_I2S_Init+0x250>
 8004fc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fcc:	897a      	ldrh	r2, [r7, #10]
 8004fce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3720      	adds	r7, #32
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	080050f3 	.word	0x080050f3
 8004fec:	cccccccd 	.word	0xcccccccd
 8004ff0:	08005209 	.word	0x08005209
 8004ff4:	40003800 	.word	0x40003800
 8004ff8:	40003400 	.word	0x40003400

08004ffc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005018:	bf00      	nop
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	881a      	ldrh	r2, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	1c9a      	adds	r2, r3, #2
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10e      	bne.n	800508c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685a      	ldr	r2, [r3, #4]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800507c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7ff ffb8 	bl	8004ffc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800508c:	bf00      	nop
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a6:	b292      	uxth	r2, r2
 80050a8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ae:	1c9a      	adds	r2, r3, #2
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10e      	bne.n	80050ea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff ff93 	bl	8005010 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b04      	cmp	r3, #4
 800510c:	d13a      	bne.n	8005184 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d109      	bne.n	800512c <I2S_IRQHandler+0x3a>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005122:	2b40      	cmp	r3, #64	@ 0x40
 8005124:	d102      	bne.n	800512c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff ffb4 	bl	8005094 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005132:	2b40      	cmp	r3, #64	@ 0x40
 8005134:	d126      	bne.n	8005184 <I2S_IRQHandler+0x92>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f003 0320 	and.w	r3, r3, #32
 8005140:	2b20      	cmp	r3, #32
 8005142:	d11f      	bne.n	8005184 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005152:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005154:	2300      	movs	r3, #0
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	f043 0202 	orr.w	r2, r3, #2
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff ff50 	bl	8005024 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b03      	cmp	r3, #3
 800518e:	d136      	bne.n	80051fe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b02      	cmp	r3, #2
 8005198:	d109      	bne.n	80051ae <I2S_IRQHandler+0xbc>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a4:	2b80      	cmp	r3, #128	@ 0x80
 80051a6:	d102      	bne.n	80051ae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff45 	bl	8005038 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d122      	bne.n	80051fe <I2S_IRQHandler+0x10c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d11b      	bne.n	80051fe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051d4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051f0:	f043 0204 	orr.w	r2, r3, #4
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff ff13 	bl	8005024 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051fe:	bf00      	nop
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a92      	ldr	r2, [pc, #584]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d101      	bne.n	8005226 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005222:	4b92      	ldr	r3, [pc, #584]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005224:	e001      	b.n	800522a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005226:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a8b      	ldr	r2, [pc, #556]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d101      	bne.n	8005244 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005240:	4b8a      	ldr	r3, [pc, #552]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005242:	e001      	b.n	8005248 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005244:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005254:	d004      	beq.n	8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f040 8099 	bne.w	8005392 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b02      	cmp	r3, #2
 8005268:	d107      	bne.n	800527a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f925 	bl	80054c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b01      	cmp	r3, #1
 8005282:	d107      	bne.n	8005294 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f9c8 	bl	8005624 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529a:	2b40      	cmp	r3, #64	@ 0x40
 800529c:	d13a      	bne.n	8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f003 0320 	and.w	r3, r3, #32
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d035      	beq.n	8005314 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a6e      	ldr	r2, [pc, #440]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80052b2:	4b6e      	ldr	r3, [pc, #440]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052b4:	e001      	b.n	80052ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80052b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4969      	ldr	r1, [pc, #420]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80052c2:	428b      	cmp	r3, r1
 80052c4:	d101      	bne.n	80052ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80052c6:	4b69      	ldr	r3, [pc, #420]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80052c8:	e001      	b.n	80052ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80052ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60fb      	str	r3, [r7, #12]
 80052f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005306:	f043 0202 	orr.w	r2, r3, #2
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7ff fe88 	bl	8005024 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b08      	cmp	r3, #8
 800531c:	f040 80c3 	bne.w	80054a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80bd 	beq.w	80054a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800533a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a49      	ldr	r2, [pc, #292]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005346:	4b49      	ldr	r3, [pc, #292]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005348:	e001      	b.n	800534e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800534a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4944      	ldr	r1, [pc, #272]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005356:	428b      	cmp	r3, r1
 8005358:	d101      	bne.n	800535e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800535a:	4b44      	ldr	r3, [pc, #272]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800535c:	e001      	b.n	8005362 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800535e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005362:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005366:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005368:	2300      	movs	r3, #0
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005382:	f043 0204 	orr.w	r2, r3, #4
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff fe4a 	bl	8005024 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005390:	e089      	b.n	80054a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b02      	cmp	r3, #2
 800539a:	d107      	bne.n	80053ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f8be 	bl	8005528 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d107      	bne.n	80053c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f8fd 	bl	80055c0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053cc:	2b40      	cmp	r3, #64	@ 0x40
 80053ce:	d12f      	bne.n	8005430 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d02a      	beq.n	8005430 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1e      	ldr	r2, [pc, #120]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d101      	bne.n	80053f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80053f4:	4b1d      	ldr	r3, [pc, #116]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80053f6:	e001      	b.n	80053fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80053f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4919      	ldr	r1, [pc, #100]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005404:	428b      	cmp	r3, r1
 8005406:	d101      	bne.n	800540c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005408:	4b18      	ldr	r3, [pc, #96]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800540a:	e001      	b.n	8005410 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800540c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005410:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005414:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005422:	f043 0202 	orr.w	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff fdfa 	bl	8005024 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b08      	cmp	r3, #8
 8005438:	d136      	bne.n	80054a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d031      	beq.n	80054a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a07      	ldr	r2, [pc, #28]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d101      	bne.n	8005452 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800544e:	4b07      	ldr	r3, [pc, #28]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005450:	e001      	b.n	8005456 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005452:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4902      	ldr	r1, [pc, #8]	@ (8005468 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800545e:	428b      	cmp	r3, r1
 8005460:	d106      	bne.n	8005470 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005462:	4b02      	ldr	r3, [pc, #8]	@ (800546c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005464:	e006      	b.n	8005474 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005466:	bf00      	nop
 8005468:	40003800 	.word	0x40003800
 800546c:	40003400 	.word	0x40003400
 8005470:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005474:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005478:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005488:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005496:	f043 0204 	orr.w	r2, r3, #4
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff fdc0 	bl	8005024 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80054a4:	e000      	b.n	80054a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80054a6:	bf00      	nop
}
 80054a8:	bf00      	nop
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	1c99      	adds	r1, r3, #2
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80054d6:	881a      	ldrh	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d113      	bne.n	800551e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005504:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800550a:	b29b      	uxth	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	d106      	bne.n	800551e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff ffc9 	bl	80054b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	1c99      	adds	r1, r3, #2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	6251      	str	r1, [r2, #36]	@ 0x24
 800553a:	8819      	ldrh	r1, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1d      	ldr	r2, [pc, #116]	@ (80055b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d101      	bne.n	800554a <I2SEx_TxISR_I2SExt+0x22>
 8005546:	4b1d      	ldr	r3, [pc, #116]	@ (80055bc <I2SEx_TxISR_I2SExt+0x94>)
 8005548:	e001      	b.n	800554e <I2SEx_TxISR_I2SExt+0x26>
 800554a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800554e:	460a      	mov	r2, r1
 8005550:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005556:	b29b      	uxth	r3, r3
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d121      	bne.n	80055ae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a12      	ldr	r2, [pc, #72]	@ (80055b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <I2SEx_TxISR_I2SExt+0x50>
 8005574:	4b11      	ldr	r3, [pc, #68]	@ (80055bc <I2SEx_TxISR_I2SExt+0x94>)
 8005576:	e001      	b.n	800557c <I2SEx_TxISR_I2SExt+0x54>
 8005578:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	490d      	ldr	r1, [pc, #52]	@ (80055b8 <I2SEx_TxISR_I2SExt+0x90>)
 8005584:	428b      	cmp	r3, r1
 8005586:	d101      	bne.n	800558c <I2SEx_TxISR_I2SExt+0x64>
 8005588:	4b0c      	ldr	r3, [pc, #48]	@ (80055bc <I2SEx_TxISR_I2SExt+0x94>)
 800558a:	e001      	b.n	8005590 <I2SEx_TxISR_I2SExt+0x68>
 800558c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005590:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005594:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7ff ff81 	bl	80054b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40003800 	.word	0x40003800
 80055bc:	40003400 	.word	0x40003400

080055c0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68d8      	ldr	r0, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	1c99      	adds	r1, r3, #2
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80055d8:	b282      	uxth	r2, r0
 80055da:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	3b01      	subs	r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d113      	bne.n	800561c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005602:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d106      	bne.n	800561c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f7ff ff4a 	bl	80054b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a20      	ldr	r2, [pc, #128]	@ (80056b4 <I2SEx_RxISR_I2SExt+0x90>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d101      	bne.n	800563a <I2SEx_RxISR_I2SExt+0x16>
 8005636:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005638:	e001      	b.n	800563e <I2SEx_RxISR_I2SExt+0x1a>
 800563a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800563e:	68d8      	ldr	r0, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005644:	1c99      	adds	r1, r3, #2
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800564a:	b282      	uxth	r2, r0
 800564c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d121      	bne.n	80056aa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a12      	ldr	r2, [pc, #72]	@ (80056b4 <I2SEx_RxISR_I2SExt+0x90>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d101      	bne.n	8005674 <I2SEx_RxISR_I2SExt+0x50>
 8005670:	4b11      	ldr	r3, [pc, #68]	@ (80056b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005672:	e001      	b.n	8005678 <I2SEx_RxISR_I2SExt+0x54>
 8005674:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	490d      	ldr	r1, [pc, #52]	@ (80056b4 <I2SEx_RxISR_I2SExt+0x90>)
 8005680:	428b      	cmp	r3, r1
 8005682:	d101      	bne.n	8005688 <I2SEx_RxISR_I2SExt+0x64>
 8005684:	4b0c      	ldr	r3, [pc, #48]	@ (80056b8 <I2SEx_RxISR_I2SExt+0x94>)
 8005686:	e001      	b.n	800568c <I2SEx_RxISR_I2SExt+0x68>
 8005688:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800568c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005690:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005696:	b29b      	uxth	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f7ff ff03 	bl	80054b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40003800 	.word	0x40003800
 80056b8:	40003400 	.word	0x40003400

080056bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e267      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d075      	beq.n	80057c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056da:	4b88      	ldr	r3, [pc, #544]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 030c 	and.w	r3, r3, #12
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d00c      	beq.n	8005700 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056e6:	4b85      	ldr	r3, [pc, #532]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d112      	bne.n	8005718 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056f2:	4b82      	ldr	r3, [pc, #520]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056fe:	d10b      	bne.n	8005718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005700:	4b7e      	ldr	r3, [pc, #504]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d05b      	beq.n	80057c4 <HAL_RCC_OscConfig+0x108>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d157      	bne.n	80057c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e242      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005720:	d106      	bne.n	8005730 <HAL_RCC_OscConfig+0x74>
 8005722:	4b76      	ldr	r3, [pc, #472]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a75      	ldr	r2, [pc, #468]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e01d      	b.n	800576c <HAL_RCC_OscConfig+0xb0>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005738:	d10c      	bne.n	8005754 <HAL_RCC_OscConfig+0x98>
 800573a:	4b70      	ldr	r3, [pc, #448]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a6f      	ldr	r2, [pc, #444]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	4b6d      	ldr	r3, [pc, #436]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a6c      	ldr	r2, [pc, #432]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 800574c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	e00b      	b.n	800576c <HAL_RCC_OscConfig+0xb0>
 8005754:	4b69      	ldr	r3, [pc, #420]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a68      	ldr	r2, [pc, #416]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 800575a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	4b66      	ldr	r3, [pc, #408]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a65      	ldr	r2, [pc, #404]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800576a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d013      	beq.n	800579c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005774:	f7fc fd92 	bl	800229c <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800577c:	f7fc fd8e 	bl	800229c <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b64      	cmp	r3, #100	@ 0x64
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e207      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578e:	4b5b      	ldr	r3, [pc, #364]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCC_OscConfig+0xc0>
 800579a:	e014      	b.n	80057c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579c:	f7fc fd7e 	bl	800229c <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057a2:	e008      	b.n	80057b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a4:	f7fc fd7a 	bl	800229c <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b64      	cmp	r3, #100	@ 0x64
 80057b0:	d901      	bls.n	80057b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e1f3      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057b6:	4b51      	ldr	r3, [pc, #324]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f0      	bne.n	80057a4 <HAL_RCC_OscConfig+0xe8>
 80057c2:	e000      	b.n	80057c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d063      	beq.n	800589a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057d2:	4b4a      	ldr	r3, [pc, #296]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 030c 	and.w	r3, r3, #12
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057de:	4b47      	ldr	r3, [pc, #284]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d11c      	bne.n	8005824 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057ea:	4b44      	ldr	r3, [pc, #272]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d116      	bne.n	8005824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057f6:	4b41      	ldr	r3, [pc, #260]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d005      	beq.n	800580e <HAL_RCC_OscConfig+0x152>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d001      	beq.n	800580e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e1c7      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800580e:	4b3b      	ldr	r3, [pc, #236]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4937      	ldr	r1, [pc, #220]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 800581e:	4313      	orrs	r3, r2
 8005820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005822:	e03a      	b.n	800589a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d020      	beq.n	800586e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800582c:	4b34      	ldr	r3, [pc, #208]	@ (8005900 <HAL_RCC_OscConfig+0x244>)
 800582e:	2201      	movs	r2, #1
 8005830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005832:	f7fc fd33 	bl	800229c <HAL_GetTick>
 8005836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005838:	e008      	b.n	800584c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800583a:	f7fc fd2f 	bl	800229c <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b02      	cmp	r3, #2
 8005846:	d901      	bls.n	800584c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e1a8      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800584c:	4b2b      	ldr	r3, [pc, #172]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0f0      	beq.n	800583a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005858:	4b28      	ldr	r3, [pc, #160]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	00db      	lsls	r3, r3, #3
 8005866:	4925      	ldr	r1, [pc, #148]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005868:	4313      	orrs	r3, r2
 800586a:	600b      	str	r3, [r1, #0]
 800586c:	e015      	b.n	800589a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800586e:	4b24      	ldr	r3, [pc, #144]	@ (8005900 <HAL_RCC_OscConfig+0x244>)
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fc fd12 	bl	800229c <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800587c:	f7fc fd0e 	bl	800229c <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e187      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800588e:	4b1b      	ldr	r3, [pc, #108]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d036      	beq.n	8005914 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058ae:	4b15      	ldr	r3, [pc, #84]	@ (8005904 <HAL_RCC_OscConfig+0x248>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058b4:	f7fc fcf2 	bl	800229c <HAL_GetTick>
 80058b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ba:	e008      	b.n	80058ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058bc:	f7fc fcee 	bl	800229c <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d901      	bls.n	80058ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e167      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058ce:	4b0b      	ldr	r3, [pc, #44]	@ (80058fc <HAL_RCC_OscConfig+0x240>)
 80058d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d0f0      	beq.n	80058bc <HAL_RCC_OscConfig+0x200>
 80058da:	e01b      	b.n	8005914 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058dc:	4b09      	ldr	r3, [pc, #36]	@ (8005904 <HAL_RCC_OscConfig+0x248>)
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058e2:	f7fc fcdb 	bl	800229c <HAL_GetTick>
 80058e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058e8:	e00e      	b.n	8005908 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ea:	f7fc fcd7 	bl	800229c <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d907      	bls.n	8005908 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e150      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
 80058fc:	40023800 	.word	0x40023800
 8005900:	42470000 	.word	0x42470000
 8005904:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005908:	4b88      	ldr	r3, [pc, #544]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 800590a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1ea      	bne.n	80058ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8097 	beq.w	8005a50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005922:	2300      	movs	r3, #0
 8005924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005926:	4b81      	ldr	r3, [pc, #516]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10f      	bne.n	8005952 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005932:	2300      	movs	r3, #0
 8005934:	60bb      	str	r3, [r7, #8]
 8005936:	4b7d      	ldr	r3, [pc, #500]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593a:	4a7c      	ldr	r2, [pc, #496]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 800593c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005940:	6413      	str	r3, [r2, #64]	@ 0x40
 8005942:	4b7a      	ldr	r3, [pc, #488]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800594a:	60bb      	str	r3, [r7, #8]
 800594c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800594e:	2301      	movs	r3, #1
 8005950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005952:	4b77      	ldr	r3, [pc, #476]	@ (8005b30 <HAL_RCC_OscConfig+0x474>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d118      	bne.n	8005990 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800595e:	4b74      	ldr	r3, [pc, #464]	@ (8005b30 <HAL_RCC_OscConfig+0x474>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a73      	ldr	r2, [pc, #460]	@ (8005b30 <HAL_RCC_OscConfig+0x474>)
 8005964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800596a:	f7fc fc97 	bl	800229c <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005972:	f7fc fc93 	bl	800229c <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e10c      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005984:	4b6a      	ldr	r3, [pc, #424]	@ (8005b30 <HAL_RCC_OscConfig+0x474>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d106      	bne.n	80059a6 <HAL_RCC_OscConfig+0x2ea>
 8005998:	4b64      	ldr	r3, [pc, #400]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 800599a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800599c:	4a63      	ldr	r2, [pc, #396]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 800599e:	f043 0301 	orr.w	r3, r3, #1
 80059a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059a4:	e01c      	b.n	80059e0 <HAL_RCC_OscConfig+0x324>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x30c>
 80059ae:	4b5f      	ldr	r3, [pc, #380]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059b2:	4a5e      	ldr	r2, [pc, #376]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059b4:	f043 0304 	orr.w	r3, r3, #4
 80059b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80059ba:	4b5c      	ldr	r3, [pc, #368]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059be:	4a5b      	ldr	r2, [pc, #364]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80059c6:	e00b      	b.n	80059e0 <HAL_RCC_OscConfig+0x324>
 80059c8:	4b58      	ldr	r3, [pc, #352]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059cc:	4a57      	ldr	r2, [pc, #348]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059d4:	4b55      	ldr	r3, [pc, #340]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059d8:	4a54      	ldr	r2, [pc, #336]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 80059da:	f023 0304 	bic.w	r3, r3, #4
 80059de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d015      	beq.n	8005a14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059e8:	f7fc fc58 	bl	800229c <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ee:	e00a      	b.n	8005a06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f0:	f7fc fc54 	bl	800229c <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e0cb      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a06:	4b49      	ldr	r3, [pc, #292]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d0ee      	beq.n	80059f0 <HAL_RCC_OscConfig+0x334>
 8005a12:	e014      	b.n	8005a3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a14:	f7fc fc42 	bl	800229c <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1a:	e00a      	b.n	8005a32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1c:	f7fc fc3e 	bl	800229c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d901      	bls.n	8005a32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	e0b5      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a32:	4b3e      	ldr	r3, [pc, #248]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1ee      	bne.n	8005a1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d105      	bne.n	8005a50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a44:	4b39      	ldr	r3, [pc, #228]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	4a38      	ldr	r2, [pc, #224]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 80a1 	beq.w	8005b9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a5a:	4b34      	ldr	r3, [pc, #208]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d05c      	beq.n	8005b20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d141      	bne.n	8005af2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a6e:	4b31      	ldr	r3, [pc, #196]	@ (8005b34 <HAL_RCC_OscConfig+0x478>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a74:	f7fc fc12 	bl	800229c <HAL_GetTick>
 8005a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a7a:	e008      	b.n	8005a8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a7c:	f7fc fc0e 	bl	800229c <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d901      	bls.n	8005a8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e087      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a8e:	4b27      	ldr	r3, [pc, #156]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1f0      	bne.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69da      	ldr	r2, [r3, #28]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa8:	019b      	lsls	r3, r3, #6
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	041b      	lsls	r3, r3, #16
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abc:	061b      	lsls	r3, r3, #24
 8005abe:	491b      	ldr	r1, [pc, #108]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8005b34 <HAL_RCC_OscConfig+0x478>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aca:	f7fc fbe7 	bl	800229c <HAL_GetTick>
 8005ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad0:	e008      	b.n	8005ae4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad2:	f7fc fbe3 	bl	800229c <HAL_GetTick>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d901      	bls.n	8005ae4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e05c      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae4:	4b11      	ldr	r3, [pc, #68]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0f0      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x416>
 8005af0:	e054      	b.n	8005b9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af2:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <HAL_RCC_OscConfig+0x478>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af8:	f7fc fbd0 	bl	800229c <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b00:	f7fc fbcc 	bl	800229c <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e045      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b12:	4b06      	ldr	r3, [pc, #24]	@ (8005b2c <HAL_RCC_OscConfig+0x470>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d1f0      	bne.n	8005b00 <HAL_RCC_OscConfig+0x444>
 8005b1e:	e03d      	b.n	8005b9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d107      	bne.n	8005b38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e038      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	40007000 	.word	0x40007000
 8005b34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b38:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba8 <HAL_RCC_OscConfig+0x4ec>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d028      	beq.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d121      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d11a      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005b68:	4013      	ands	r3, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005b6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d111      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	3b01      	subs	r3, #1
 8005b82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d107      	bne.n	8005b98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800

08005bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0cc      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc0:	4b68      	ldr	r3, [pc, #416]	@ (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d90c      	bls.n	8005be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bce:	4b65      	ldr	r3, [pc, #404]	@ (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd6:	4b63      	ldr	r3, [pc, #396]	@ (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0b8      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d020      	beq.n	8005c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d005      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c00:	4b59      	ldr	r3, [pc, #356]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	4a58      	ldr	r2, [pc, #352]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0308 	and.w	r3, r3, #8
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c18:	4b53      	ldr	r3, [pc, #332]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	4a52      	ldr	r2, [pc, #328]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c24:	4b50      	ldr	r3, [pc, #320]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	494d      	ldr	r1, [pc, #308]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d044      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c4a:	4b47      	ldr	r3, [pc, #284]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d119      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e07f      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d003      	beq.n	8005c6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d107      	bne.n	8005c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d109      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e06f      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c7a:	4b3b      	ldr	r3, [pc, #236]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e067      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c8a:	4b37      	ldr	r3, [pc, #220]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	f023 0203 	bic.w	r2, r3, #3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	4934      	ldr	r1, [pc, #208]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c9c:	f7fc fafe 	bl	800229c <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ca2:	e00a      	b.n	8005cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca4:	f7fc fafa 	bl	800229c <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e04f      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cba:	4b2b      	ldr	r3, [pc, #172]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 020c 	and.w	r2, r3, #12
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d1eb      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ccc:	4b25      	ldr	r3, [pc, #148]	@ (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d20c      	bcs.n	8005cf4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cda:	4b22      	ldr	r3, [pc, #136]	@ (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	b2d2      	uxtb	r2, r2
 8005ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce2:	4b20      	ldr	r3, [pc, #128]	@ (8005d64 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f003 0307 	and.w	r3, r3, #7
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d001      	beq.n	8005cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e032      	b.n	8005d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d00:	4b19      	ldr	r3, [pc, #100]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4916      	ldr	r1, [pc, #88]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d009      	beq.n	8005d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d1e:	4b12      	ldr	r3, [pc, #72]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	490e      	ldr	r1, [pc, #56]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d32:	f000 f821 	bl	8005d78 <HAL_RCC_GetSysClockFreq>
 8005d36:	4602      	mov	r2, r0
 8005d38:	4b0b      	ldr	r3, [pc, #44]	@ (8005d68 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	490a      	ldr	r1, [pc, #40]	@ (8005d6c <HAL_RCC_ClockConfig+0x1c0>)
 8005d44:	5ccb      	ldrb	r3, [r1, r3]
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	4a09      	ldr	r2, [pc, #36]	@ (8005d70 <HAL_RCC_ClockConfig+0x1c4>)
 8005d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d4e:	4b09      	ldr	r3, [pc, #36]	@ (8005d74 <HAL_RCC_ClockConfig+0x1c8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7fc fa5e 	bl	8002214 <HAL_InitTick>

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40023c00 	.word	0x40023c00
 8005d68:	40023800 	.word	0x40023800
 8005d6c:	0800b86c 	.word	0x0800b86c
 8005d70:	20000000 	.word	0x20000000
 8005d74:	20000004 	.word	0x20000004

08005d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d7c:	b094      	sub	sp, #80	@ 0x50
 8005d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d90:	4b79      	ldr	r3, [pc, #484]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f003 030c 	and.w	r3, r3, #12
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d00d      	beq.n	8005db8 <HAL_RCC_GetSysClockFreq+0x40>
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	f200 80e1 	bhi.w	8005f64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_RCC_GetSysClockFreq+0x34>
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d003      	beq.n	8005db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005daa:	e0db      	b.n	8005f64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dac:	4b73      	ldr	r3, [pc, #460]	@ (8005f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005dae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005db0:	e0db      	b.n	8005f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005db2:	4b73      	ldr	r3, [pc, #460]	@ (8005f80 <HAL_RCC_GetSysClockFreq+0x208>)
 8005db4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005db6:	e0d8      	b.n	8005f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005db8:	4b6f      	ldr	r3, [pc, #444]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005dc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d063      	beq.n	8005e96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dce:	4b6a      	ldr	r3, [pc, #424]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	099b      	lsrs	r3, r3, #6
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005de2:	2300      	movs	r3, #0
 8005de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005de6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005dea:	4622      	mov	r2, r4
 8005dec:	462b      	mov	r3, r5
 8005dee:	f04f 0000 	mov.w	r0, #0
 8005df2:	f04f 0100 	mov.w	r1, #0
 8005df6:	0159      	lsls	r1, r3, #5
 8005df8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dfc:	0150      	lsls	r0, r2, #5
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4621      	mov	r1, r4
 8005e04:	1a51      	subs	r1, r2, r1
 8005e06:	6139      	str	r1, [r7, #16]
 8005e08:	4629      	mov	r1, r5
 8005e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	f04f 0300 	mov.w	r3, #0
 8005e18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e1c:	4659      	mov	r1, fp
 8005e1e:	018b      	lsls	r3, r1, #6
 8005e20:	4651      	mov	r1, sl
 8005e22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e26:	4651      	mov	r1, sl
 8005e28:	018a      	lsls	r2, r1, #6
 8005e2a:	4651      	mov	r1, sl
 8005e2c:	ebb2 0801 	subs.w	r8, r2, r1
 8005e30:	4659      	mov	r1, fp
 8005e32:	eb63 0901 	sbc.w	r9, r3, r1
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	f04f 0300 	mov.w	r3, #0
 8005e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e4a:	4690      	mov	r8, r2
 8005e4c:	4699      	mov	r9, r3
 8005e4e:	4623      	mov	r3, r4
 8005e50:	eb18 0303 	adds.w	r3, r8, r3
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	462b      	mov	r3, r5
 8005e58:	eb49 0303 	adc.w	r3, r9, r3
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	024b      	lsls	r3, r1, #9
 8005e6e:	4621      	mov	r1, r4
 8005e70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e74:	4621      	mov	r1, r4
 8005e76:	024a      	lsls	r2, r1, #9
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e7e:	2200      	movs	r2, #0
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e88:	f7fa f9f2 	bl	8000270 <__aeabi_uldivmod>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4613      	mov	r3, r2
 8005e92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e94:	e058      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e96:	4b38      	ldr	r3, [pc, #224]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	099b      	lsrs	r3, r3, #6
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	4611      	mov	r1, r2
 8005ea2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005ea6:	623b      	str	r3, [r7, #32]
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	f04f 0000 	mov.w	r0, #0
 8005eb8:	f04f 0100 	mov.w	r1, #0
 8005ebc:	0159      	lsls	r1, r3, #5
 8005ebe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ec2:	0150      	lsls	r0, r2, #5
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4641      	mov	r1, r8
 8005eca:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ece:	4649      	mov	r1, r9
 8005ed0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	f04f 0300 	mov.w	r3, #0
 8005edc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ee0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ee4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ee8:	ebb2 040a 	subs.w	r4, r2, sl
 8005eec:	eb63 050b 	sbc.w	r5, r3, fp
 8005ef0:	f04f 0200 	mov.w	r2, #0
 8005ef4:	f04f 0300 	mov.w	r3, #0
 8005ef8:	00eb      	lsls	r3, r5, #3
 8005efa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005efe:	00e2      	lsls	r2, r4, #3
 8005f00:	4614      	mov	r4, r2
 8005f02:	461d      	mov	r5, r3
 8005f04:	4643      	mov	r3, r8
 8005f06:	18e3      	adds	r3, r4, r3
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	464b      	mov	r3, r9
 8005f0c:	eb45 0303 	adc.w	r3, r5, r3
 8005f10:	607b      	str	r3, [r7, #4]
 8005f12:	f04f 0200 	mov.w	r2, #0
 8005f16:	f04f 0300 	mov.w	r3, #0
 8005f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f1e:	4629      	mov	r1, r5
 8005f20:	028b      	lsls	r3, r1, #10
 8005f22:	4621      	mov	r1, r4
 8005f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f28:	4621      	mov	r1, r4
 8005f2a:	028a      	lsls	r2, r1, #10
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4619      	mov	r1, r3
 8005f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f32:	2200      	movs	r2, #0
 8005f34:	61bb      	str	r3, [r7, #24]
 8005f36:	61fa      	str	r2, [r7, #28]
 8005f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f3c:	f7fa f998 	bl	8000270 <__aeabi_uldivmod>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4613      	mov	r3, r2
 8005f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f48:	4b0b      	ldr	r3, [pc, #44]	@ (8005f78 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	0c1b      	lsrs	r3, r3, #16
 8005f4e:	f003 0303 	and.w	r3, r3, #3
 8005f52:	3301      	adds	r3, #1
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005f58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f62:	e002      	b.n	8005f6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f64:	4b05      	ldr	r3, [pc, #20]	@ (8005f7c <HAL_RCC_GetSysClockFreq+0x204>)
 8005f66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3750      	adds	r7, #80	@ 0x50
 8005f70:	46bd      	mov	sp, r7
 8005f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f76:	bf00      	nop
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	00f42400 	.word	0x00f42400
 8005f80:	007a1200 	.word	0x007a1200

08005f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f84:	b480      	push	{r7}
 8005f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f88:	4b03      	ldr	r3, [pc, #12]	@ (8005f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000000 	.word	0x20000000

08005f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fa0:	f7ff fff0 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	4b05      	ldr	r3, [pc, #20]	@ (8005fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	0a9b      	lsrs	r3, r3, #10
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	4903      	ldr	r1, [pc, #12]	@ (8005fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fb2:	5ccb      	ldrb	r3, [r1, r3]
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	40023800 	.word	0x40023800
 8005fc0:	0800b87c 	.word	0x0800b87c

08005fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fc8:	f7ff ffdc 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	0b5b      	lsrs	r3, r3, #13
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	4903      	ldr	r1, [pc, #12]	@ (8005fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fda:	5ccb      	ldrb	r3, [r1, r3]
 8005fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	0800b87c 	.word	0x0800b87c

08005fec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006010:	2b00      	cmp	r3, #0
 8006012:	d035      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006014:	4b62      	ldr	r3, [pc, #392]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800601a:	f7fc f93f 	bl	800229c <HAL_GetTick>
 800601e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006020:	e008      	b.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006022:	f7fc f93b 	bl	800229c <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d901      	bls.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e0b0      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006034:	4b5b      	ldr	r3, [pc, #364]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1f0      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	019a      	lsls	r2, r3, #6
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	071b      	lsls	r3, r3, #28
 800604c:	4955      	ldr	r1, [pc, #340]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006054:	4b52      	ldr	r3, [pc, #328]	@ (80061a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006056:	2201      	movs	r2, #1
 8006058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800605a:	f7fc f91f 	bl	800229c <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006060:	e008      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006062:	f7fc f91b 	bl	800229c <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e090      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006074:	4b4b      	ldr	r3, [pc, #300]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f0      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8083 	beq.w	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	4b44      	ldr	r3, [pc, #272]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	4a43      	ldr	r2, [pc, #268]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800609c:	6413      	str	r3, [r2, #64]	@ 0x40
 800609e:	4b41      	ldr	r3, [pc, #260]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80060aa:	4b3f      	ldr	r3, [pc, #252]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a3e      	ldr	r2, [pc, #248]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80060b6:	f7fc f8f1 	bl	800229c <HAL_GetTick>
 80060ba:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80060bc:	e008      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060be:	f7fc f8ed 	bl	800229c <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e062      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80060d0:	4b35      	ldr	r3, [pc, #212]	@ (80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060dc:	4b31      	ldr	r3, [pc, #196]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060e4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d02f      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d028      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060fa:	4b2a      	ldr	r3, [pc, #168]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006102:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006104:	4b29      	ldr	r3, [pc, #164]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006106:	2201      	movs	r2, #1
 8006108:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800610a:	4b28      	ldr	r3, [pc, #160]	@ (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006110:	4a24      	ldr	r2, [pc, #144]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006116:	4b23      	ldr	r3, [pc, #140]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b01      	cmp	r3, #1
 8006120:	d114      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006122:	f7fc f8bb 	bl	800229c <HAL_GetTick>
 8006126:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006128:	e00a      	b.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800612a:	f7fc f8b7 	bl	800229c <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e02a      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006140:	4b18      	ldr	r3, [pc, #96]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0ee      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006158:	d10d      	bne.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800615a:	4b12      	ldr	r3, [pc, #72]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800616a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800616e:	490d      	ldr	r1, [pc, #52]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006170:	4313      	orrs	r3, r2
 8006172:	608b      	str	r3, [r1, #8]
 8006174:	e005      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006176:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	4a0a      	ldr	r2, [pc, #40]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800617c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006180:	6093      	str	r3, [r2, #8]
 8006182:	4b08      	ldr	r3, [pc, #32]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006184:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800618e:	4905      	ldr	r1, [pc, #20]	@ (80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006190:	4313      	orrs	r3, r2
 8006192:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	42470068 	.word	0x42470068
 80061a4:	40023800 	.word	0x40023800
 80061a8:	40007000 	.word	0x40007000
 80061ac:	42470e40 	.word	0x42470e40

080061b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d13f      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80061ce:	4b24      	ldr	r3, [pc, #144]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80061d6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d006      	beq.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80061e4:	d12f      	bne.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80061e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006264 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80061e8:	617b      	str	r3, [r7, #20]
          break;
 80061ea:	e02f      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80061ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061f8:	d108      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80061fa:	4b19      	ldr	r3, [pc, #100]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006202:	4a19      	ldr	r2, [pc, #100]	@ (8006268 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006204:	fbb2 f3f3 	udiv	r3, r2, r3
 8006208:	613b      	str	r3, [r7, #16]
 800620a:	e007      	b.n	800621c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800620c:	4b14      	ldr	r3, [pc, #80]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006214:	4a15      	ldr	r2, [pc, #84]	@ (800626c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006216:	fbb2 f3f3 	udiv	r3, r2, r3
 800621a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800621c:	4b10      	ldr	r3, [pc, #64]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800621e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006222:	099b      	lsrs	r3, r3, #6
 8006224:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006230:	4b0b      	ldr	r3, [pc, #44]	@ (8006260 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006236:	0f1b      	lsrs	r3, r3, #28
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006242:	617b      	str	r3, [r7, #20]
          break;
 8006244:	e002      	b.n	800624c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
          break;
 800624a:	bf00      	nop
        }
      }
      break;
 800624c:	e000      	b.n	8006250 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800624e:	bf00      	nop
    }
  }
  return frequency;
 8006250:	697b      	ldr	r3, [r7, #20]
}
 8006252:	4618      	mov	r0, r3
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	40023800 	.word	0x40023800
 8006264:	00bb8000 	.word	0x00bb8000
 8006268:	007a1200 	.word	0x007a1200
 800626c:	00f42400 	.word	0x00f42400

08006270 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e01c      	b.n	80062bc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	795b      	ldrb	r3, [r3, #5]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d105      	bne.n	8006298 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fa ff4e 	bl	8001134 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0204 	orr.w	r2, r2, #4
 80062ac:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2201      	movs	r2, #1
 80062b2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	791b      	ldrb	r3, [r3, #4]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d101      	bne.n	80062de <HAL_RNG_GenerateRandomNumber+0x1a>
 80062da:	2302      	movs	r3, #2
 80062dc:	e044      	b.n	8006368 <HAL_RNG_GenerateRandomNumber+0xa4>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	795b      	ldrb	r3, [r3, #5]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d133      	bne.n	8006356 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062f4:	f7fb ffd2 	bl	800229c <HAL_GetTick>
 80062f8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80062fa:	e018      	b.n	800632e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80062fc:	f7fb ffce 	bl	800229c <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d911      	bls.n	800632e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b01      	cmp	r3, #1
 8006316:	d00a      	beq.n	800632e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e01c      	b.n	8006368 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b01      	cmp	r3, #1
 800633a:	d1df      	bne.n	80062fc <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	689a      	ldr	r2, [r3, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	715a      	strb	r2, [r3, #5]
 8006354:	e004      	b.n	8006360 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2204      	movs	r2, #4
 800635a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	711a      	strb	r2, [r3, #4]

  return status;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e07b      	b.n	800647a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006386:	2b00      	cmp	r3, #0
 8006388:	d108      	bne.n	800639c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006392:	d009      	beq.n	80063a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	61da      	str	r2, [r3, #28]
 800639a:	e005      	b.n	80063a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d106      	bne.n	80063c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f7fa fed8 	bl	8001178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	431a      	orrs	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006418:	431a      	orrs	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69db      	ldr	r3, [r3, #28]
 800641e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800642c:	ea42 0103 	orr.w	r1, r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006434:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	0c1b      	lsrs	r3, r3, #16
 8006446:	f003 0104 	and.w	r1, r3, #4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644e:	f003 0210 	and.w	r2, r3, #16
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	69da      	ldr	r2, [r3, #28]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006468:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b082      	sub	sp, #8
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e042      	b.n	800651a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800649a:	b2db      	uxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	d106      	bne.n	80064ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7fa fead 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2224      	movs	r2, #36	@ 0x24
 80064b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f972 	bl	80067b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691a      	ldr	r2, [r3, #16]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	695a      	ldr	r2, [r3, #20]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2220      	movs	r2, #32
 8006506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b08a      	sub	sp, #40	@ 0x28
 8006526:	af02      	add	r7, sp, #8
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	603b      	str	r3, [r7, #0]
 800652e:	4613      	mov	r3, r2
 8006530:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b20      	cmp	r3, #32
 8006540:	d175      	bne.n	800662e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_UART_Transmit+0x2c>
 8006548:	88fb      	ldrh	r3, [r7, #6]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d101      	bne.n	8006552 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e06e      	b.n	8006630 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2221      	movs	r2, #33	@ 0x21
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006560:	f7fb fe9c 	bl	800229c <HAL_GetTick>
 8006564:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	88fa      	ldrh	r2, [r7, #6]
 800656a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	88fa      	ldrh	r2, [r7, #6]
 8006570:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657a:	d108      	bne.n	800658e <HAL_UART_Transmit+0x6c>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	61bb      	str	r3, [r7, #24]
 800658c:	e003      	b.n	8006596 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006596:	e02e      	b.n	80065f6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2200      	movs	r2, #0
 80065a0:	2180      	movs	r1, #128	@ 0x80
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 f848 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e03a      	b.n	8006630 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10b      	bne.n	80065d8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	3302      	adds	r3, #2
 80065d4:	61bb      	str	r3, [r7, #24]
 80065d6:	e007      	b.n	80065e8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	781a      	ldrb	r2, [r3, #0]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3301      	adds	r3, #1
 80065e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	3b01      	subs	r3, #1
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1cb      	bne.n	8006598 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	2140      	movs	r1, #64	@ 0x40
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f814 	bl	8006638 <UART_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d005      	beq.n	8006622 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800661e:	2303      	movs	r3, #3
 8006620:	e006      	b.n	8006630 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e000      	b.n	8006630 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800662e:	2302      	movs	r3, #2
  }
}
 8006630:	4618      	mov	r0, r3
 8006632:	3720      	adds	r7, #32
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006648:	e03b      	b.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d037      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006652:	f7fb fe23 	bl	800229c <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	6a3a      	ldr	r2, [r7, #32]
 800665e:	429a      	cmp	r2, r3
 8006660:	d302      	bcc.n	8006668 <UART_WaitOnFlagUntilTimeout+0x30>
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e03a      	b.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	d023      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b80      	cmp	r3, #128	@ 0x80
 800667e:	d020      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	d01d      	beq.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b08      	cmp	r3, #8
 8006692:	d116      	bne.n	80066c2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f81d 	bl	80066ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2208      	movs	r2, #8
 80066b4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e00f      	b.n	80066e2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	4013      	ands	r3, r2
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	bf0c      	ite	eq
 80066d2:	2301      	moveq	r3, #1
 80066d4:	2300      	movne	r3, #0
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	461a      	mov	r2, r3
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d0b4      	beq.n	800664a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b095      	sub	sp, #84	@ 0x54
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	330c      	adds	r3, #12
 80066f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066fc:	e853 3f00 	ldrex	r3, [r3]
 8006700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006712:	643a      	str	r2, [r7, #64]	@ 0x40
 8006714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800671a:	e841 2300 	strex	r3, r2, [r1]
 800671e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1e5      	bne.n	80066f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	3314      	adds	r3, #20
 800672c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	e853 3f00 	ldrex	r3, [r3]
 8006734:	61fb      	str	r3, [r7, #28]
   return(result);
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	f023 0301 	bic.w	r3, r3, #1
 800673c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3314      	adds	r3, #20
 8006744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800674c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800674e:	e841 2300 	strex	r3, r2, [r1]
 8006752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e5      	bne.n	8006726 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800675e:	2b01      	cmp	r3, #1
 8006760:	d119      	bne.n	8006796 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	e853 3f00 	ldrex	r3, [r3]
 8006770:	60bb      	str	r3, [r7, #8]
   return(result);
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	f023 0310 	bic.w	r3, r3, #16
 8006778:	647b      	str	r3, [r7, #68]	@ 0x44
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006782:	61ba      	str	r2, [r7, #24]
 8006784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006786:	6979      	ldr	r1, [r7, #20]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	613b      	str	r3, [r7, #16]
   return(result);
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e5      	bne.n	8006762 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80067a4:	bf00      	nop
 80067a6:	3754      	adds	r7, #84	@ 0x54
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067b4:	b0c0      	sub	sp, #256	@ 0x100
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	68d9      	ldr	r1, [r3, #12]
 80067ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	ea40 0301 	orr.w	r3, r0, r1
 80067d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067de:	689a      	ldr	r2, [r3, #8]
 80067e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	431a      	orrs	r2, r3
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	431a      	orrs	r2, r3
 80067f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006808:	f021 010c 	bic.w	r1, r1, #12
 800680c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006816:	430b      	orrs	r3, r1
 8006818:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800681a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682a:	6999      	ldr	r1, [r3, #24]
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	ea40 0301 	orr.w	r3, r0, r1
 8006836:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4b8f      	ldr	r3, [pc, #572]	@ (8006a7c <UART_SetConfig+0x2cc>)
 8006840:	429a      	cmp	r2, r3
 8006842:	d005      	beq.n	8006850 <UART_SetConfig+0xa0>
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b8d      	ldr	r3, [pc, #564]	@ (8006a80 <UART_SetConfig+0x2d0>)
 800684c:	429a      	cmp	r2, r3
 800684e:	d104      	bne.n	800685a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006850:	f7ff fbb8 	bl	8005fc4 <HAL_RCC_GetPCLK2Freq>
 8006854:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006858:	e003      	b.n	8006862 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800685a:	f7ff fb9f 	bl	8005f9c <HAL_RCC_GetPCLK1Freq>
 800685e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800686c:	f040 810c 	bne.w	8006a88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006874:	2200      	movs	r2, #0
 8006876:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800687a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800687e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006882:	4622      	mov	r2, r4
 8006884:	462b      	mov	r3, r5
 8006886:	1891      	adds	r1, r2, r2
 8006888:	65b9      	str	r1, [r7, #88]	@ 0x58
 800688a:	415b      	adcs	r3, r3
 800688c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800688e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006892:	4621      	mov	r1, r4
 8006894:	eb12 0801 	adds.w	r8, r2, r1
 8006898:	4629      	mov	r1, r5
 800689a:	eb43 0901 	adc.w	r9, r3, r1
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068b2:	4690      	mov	r8, r2
 80068b4:	4699      	mov	r9, r3
 80068b6:	4623      	mov	r3, r4
 80068b8:	eb18 0303 	adds.w	r3, r8, r3
 80068bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068c0:	462b      	mov	r3, r5
 80068c2:	eb49 0303 	adc.w	r3, r9, r3
 80068c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068de:	460b      	mov	r3, r1
 80068e0:	18db      	adds	r3, r3, r3
 80068e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80068e4:	4613      	mov	r3, r2
 80068e6:	eb42 0303 	adc.w	r3, r2, r3
 80068ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068f4:	f7f9 fcbc 	bl	8000270 <__aeabi_uldivmod>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4b61      	ldr	r3, [pc, #388]	@ (8006a84 <UART_SetConfig+0x2d4>)
 80068fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006902:	095b      	lsrs	r3, r3, #5
 8006904:	011c      	lsls	r4, r3, #4
 8006906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800690a:	2200      	movs	r2, #0
 800690c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006910:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006914:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006918:	4642      	mov	r2, r8
 800691a:	464b      	mov	r3, r9
 800691c:	1891      	adds	r1, r2, r2
 800691e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006920:	415b      	adcs	r3, r3
 8006922:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006924:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006928:	4641      	mov	r1, r8
 800692a:	eb12 0a01 	adds.w	sl, r2, r1
 800692e:	4649      	mov	r1, r9
 8006930:	eb43 0b01 	adc.w	fp, r3, r1
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006940:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006948:	4692      	mov	sl, r2
 800694a:	469b      	mov	fp, r3
 800694c:	4643      	mov	r3, r8
 800694e:	eb1a 0303 	adds.w	r3, sl, r3
 8006952:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006956:	464b      	mov	r3, r9
 8006958:	eb4b 0303 	adc.w	r3, fp, r3
 800695c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800696c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006970:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006974:	460b      	mov	r3, r1
 8006976:	18db      	adds	r3, r3, r3
 8006978:	643b      	str	r3, [r7, #64]	@ 0x40
 800697a:	4613      	mov	r3, r2
 800697c:	eb42 0303 	adc.w	r3, r2, r3
 8006980:	647b      	str	r3, [r7, #68]	@ 0x44
 8006982:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006986:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800698a:	f7f9 fc71 	bl	8000270 <__aeabi_uldivmod>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	4611      	mov	r1, r2
 8006994:	4b3b      	ldr	r3, [pc, #236]	@ (8006a84 <UART_SetConfig+0x2d4>)
 8006996:	fba3 2301 	umull	r2, r3, r3, r1
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	2264      	movs	r2, #100	@ 0x64
 800699e:	fb02 f303 	mul.w	r3, r2, r3
 80069a2:	1acb      	subs	r3, r1, r3
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80069aa:	4b36      	ldr	r3, [pc, #216]	@ (8006a84 <UART_SetConfig+0x2d4>)
 80069ac:	fba3 2302 	umull	r2, r3, r3, r2
 80069b0:	095b      	lsrs	r3, r3, #5
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069b8:	441c      	add	r4, r3
 80069ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069be:	2200      	movs	r2, #0
 80069c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069cc:	4642      	mov	r2, r8
 80069ce:	464b      	mov	r3, r9
 80069d0:	1891      	adds	r1, r2, r2
 80069d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069d4:	415b      	adcs	r3, r3
 80069d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069dc:	4641      	mov	r1, r8
 80069de:	1851      	adds	r1, r2, r1
 80069e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80069e2:	4649      	mov	r1, r9
 80069e4:	414b      	adcs	r3, r1
 80069e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069f4:	4659      	mov	r1, fp
 80069f6:	00cb      	lsls	r3, r1, #3
 80069f8:	4651      	mov	r1, sl
 80069fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fe:	4651      	mov	r1, sl
 8006a00:	00ca      	lsls	r2, r1, #3
 8006a02:	4610      	mov	r0, r2
 8006a04:	4619      	mov	r1, r3
 8006a06:	4603      	mov	r3, r0
 8006a08:	4642      	mov	r2, r8
 8006a0a:	189b      	adds	r3, r3, r2
 8006a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a10:	464b      	mov	r3, r9
 8006a12:	460a      	mov	r2, r1
 8006a14:	eb42 0303 	adc.w	r3, r2, r3
 8006a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a30:	460b      	mov	r3, r1
 8006a32:	18db      	adds	r3, r3, r3
 8006a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a36:	4613      	mov	r3, r2
 8006a38:	eb42 0303 	adc.w	r3, r2, r3
 8006a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a46:	f7f9 fc13 	bl	8000270 <__aeabi_uldivmod>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <UART_SetConfig+0x2d4>)
 8006a50:	fba3 1302 	umull	r1, r3, r3, r2
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	2164      	movs	r1, #100	@ 0x64
 8006a58:	fb01 f303 	mul.w	r3, r1, r3
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	3332      	adds	r3, #50	@ 0x32
 8006a62:	4a08      	ldr	r2, [pc, #32]	@ (8006a84 <UART_SetConfig+0x2d4>)
 8006a64:	fba2 2303 	umull	r2, r3, r2, r3
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	f003 0207 	and.w	r2, r3, #7
 8006a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4422      	add	r2, r4
 8006a76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a78:	e106      	b.n	8006c88 <UART_SetConfig+0x4d8>
 8006a7a:	bf00      	nop
 8006a7c:	40011000 	.word	0x40011000
 8006a80:	40011400 	.word	0x40011400
 8006a84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a9a:	4642      	mov	r2, r8
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	1891      	adds	r1, r2, r2
 8006aa0:	6239      	str	r1, [r7, #32]
 8006aa2:	415b      	adcs	r3, r3
 8006aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aaa:	4641      	mov	r1, r8
 8006aac:	1854      	adds	r4, r2, r1
 8006aae:	4649      	mov	r1, r9
 8006ab0:	eb43 0501 	adc.w	r5, r3, r1
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	00eb      	lsls	r3, r5, #3
 8006abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ac2:	00e2      	lsls	r2, r4, #3
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	4643      	mov	r3, r8
 8006aca:	18e3      	adds	r3, r4, r3
 8006acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ad0:	464b      	mov	r3, r9
 8006ad2:	eb45 0303 	adc.w	r3, r5, r3
 8006ad6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ae6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006af6:	4629      	mov	r1, r5
 8006af8:	008b      	lsls	r3, r1, #2
 8006afa:	4621      	mov	r1, r4
 8006afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b00:	4621      	mov	r1, r4
 8006b02:	008a      	lsls	r2, r1, #2
 8006b04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006b08:	f7f9 fbb2 	bl	8000270 <__aeabi_uldivmod>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4b60      	ldr	r3, [pc, #384]	@ (8006c94 <UART_SetConfig+0x4e4>)
 8006b12:	fba3 2302 	umull	r2, r3, r3, r2
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	011c      	lsls	r4, r3, #4
 8006b1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	464b      	mov	r3, r9
 8006b30:	1891      	adds	r1, r2, r2
 8006b32:	61b9      	str	r1, [r7, #24]
 8006b34:	415b      	adcs	r3, r3
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b3c:	4641      	mov	r1, r8
 8006b3e:	1851      	adds	r1, r2, r1
 8006b40:	6139      	str	r1, [r7, #16]
 8006b42:	4649      	mov	r1, r9
 8006b44:	414b      	adcs	r3, r1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b54:	4659      	mov	r1, fp
 8006b56:	00cb      	lsls	r3, r1, #3
 8006b58:	4651      	mov	r1, sl
 8006b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b5e:	4651      	mov	r1, sl
 8006b60:	00ca      	lsls	r2, r1, #3
 8006b62:	4610      	mov	r0, r2
 8006b64:	4619      	mov	r1, r3
 8006b66:	4603      	mov	r3, r0
 8006b68:	4642      	mov	r2, r8
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b70:	464b      	mov	r3, r9
 8006b72:	460a      	mov	r2, r1
 8006b74:	eb42 0303 	adc.w	r3, r2, r3
 8006b78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b88:	f04f 0200 	mov.w	r2, #0
 8006b8c:	f04f 0300 	mov.w	r3, #0
 8006b90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b94:	4649      	mov	r1, r9
 8006b96:	008b      	lsls	r3, r1, #2
 8006b98:	4641      	mov	r1, r8
 8006b9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b9e:	4641      	mov	r1, r8
 8006ba0:	008a      	lsls	r2, r1, #2
 8006ba2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ba6:	f7f9 fb63 	bl	8000270 <__aeabi_uldivmod>
 8006baa:	4602      	mov	r2, r0
 8006bac:	460b      	mov	r3, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	4b38      	ldr	r3, [pc, #224]	@ (8006c94 <UART_SetConfig+0x4e4>)
 8006bb2:	fba3 2301 	umull	r2, r3, r3, r1
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	2264      	movs	r2, #100	@ 0x64
 8006bba:	fb02 f303 	mul.w	r3, r2, r3
 8006bbe:	1acb      	subs	r3, r1, r3
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	3332      	adds	r3, #50	@ 0x32
 8006bc4:	4a33      	ldr	r2, [pc, #204]	@ (8006c94 <UART_SetConfig+0x4e4>)
 8006bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bd0:	441c      	add	r4, r3
 8006bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bda:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	1891      	adds	r1, r2, r2
 8006be6:	60b9      	str	r1, [r7, #8]
 8006be8:	415b      	adcs	r3, r3
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bf0:	4641      	mov	r1, r8
 8006bf2:	1851      	adds	r1, r2, r1
 8006bf4:	6039      	str	r1, [r7, #0]
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	414b      	adcs	r3, r1
 8006bfa:	607b      	str	r3, [r7, #4]
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c08:	4659      	mov	r1, fp
 8006c0a:	00cb      	lsls	r3, r1, #3
 8006c0c:	4651      	mov	r1, sl
 8006c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c12:	4651      	mov	r1, sl
 8006c14:	00ca      	lsls	r2, r1, #3
 8006c16:	4610      	mov	r0, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	189b      	adds	r3, r3, r2
 8006c20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c22:	464b      	mov	r3, r9
 8006c24:	460a      	mov	r2, r1
 8006c26:	eb42 0303 	adc.w	r3, r2, r3
 8006c2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c36:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c44:	4649      	mov	r1, r9
 8006c46:	008b      	lsls	r3, r1, #2
 8006c48:	4641      	mov	r1, r8
 8006c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c4e:	4641      	mov	r1, r8
 8006c50:	008a      	lsls	r2, r1, #2
 8006c52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c56:	f7f9 fb0b 	bl	8000270 <__aeabi_uldivmod>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <UART_SetConfig+0x4e4>)
 8006c60:	fba3 1302 	umull	r1, r3, r3, r2
 8006c64:	095b      	lsrs	r3, r3, #5
 8006c66:	2164      	movs	r1, #100	@ 0x64
 8006c68:	fb01 f303 	mul.w	r3, r1, r3
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	3332      	adds	r3, #50	@ 0x32
 8006c72:	4a08      	ldr	r2, [pc, #32]	@ (8006c94 <UART_SetConfig+0x4e4>)
 8006c74:	fba2 2303 	umull	r2, r3, r2, r3
 8006c78:	095b      	lsrs	r3, r3, #5
 8006c7a:	f003 020f 	and.w	r2, r3, #15
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4422      	add	r2, r4
 8006c86:	609a      	str	r2, [r3, #8]
}
 8006c88:	bf00      	nop
 8006c8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c94:	51eb851f 	.word	0x51eb851f

08006c98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c98:	b084      	sub	sp, #16
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b084      	sub	sp, #16
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
 8006ca2:	f107 001c 	add.w	r0, r7, #28
 8006ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006caa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d123      	bne.n	8006cfa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006cda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d105      	bne.n	8006cee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f9dc 	bl	80070ac <USB_CoreReset>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	73fb      	strb	r3, [r7, #15]
 8006cf8:	e01b      	b.n	8006d32 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f9d0 	bl	80070ac <USB_CoreReset>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006d10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d106      	bne.n	8006d26 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	639a      	str	r2, [r3, #56]	@ 0x38
 8006d24:	e005      	b.n	8006d32 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006d32:	7fbb      	ldrb	r3, [r7, #30]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d10b      	bne.n	8006d50 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f043 0206 	orr.w	r2, r3, #6
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f043 0220 	orr.w	r2, r3, #32
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d5c:	b004      	add	sp, #16
 8006d5e:	4770      	bx	lr

08006d60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f043 0201 	orr.w	r2, r3, #1
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f023 0201 	bic.w	r2, r3, #1
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006dc0:	78fb      	ldrb	r3, [r7, #3]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d115      	bne.n	8006df2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006dd2:	200a      	movs	r0, #10
 8006dd4:	f7fb fa6e 	bl	80022b4 <HAL_Delay>
      ms += 10U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	330a      	adds	r3, #10
 8006ddc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 f956 	bl	8007090 <USB_GetMode>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d01e      	beq.n	8006e28 <USB_SetCurrentMode+0x84>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dee:	d9f0      	bls.n	8006dd2 <USB_SetCurrentMode+0x2e>
 8006df0:	e01a      	b.n	8006e28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d115      	bne.n	8006e24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006e04:	200a      	movs	r0, #10
 8006e06:	f7fb fa55 	bl	80022b4 <HAL_Delay>
      ms += 10U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	330a      	adds	r3, #10
 8006e0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f93d 	bl	8007090 <USB_GetMode>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <USB_SetCurrentMode+0x84>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006e20:	d9f0      	bls.n	8006e04 <USB_SetCurrentMode+0x60>
 8006e22:	e001      	b.n	8006e28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e005      	b.n	8006e34 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006e2c:	d101      	bne.n	8006e32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e56:	d901      	bls.n	8006e5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e01b      	b.n	8006e94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	daf2      	bge.n	8006e4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	019b      	lsls	r3, r3, #6
 8006e6c:	f043 0220 	orr.w	r2, r3, #32
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3301      	adds	r3, #1
 8006e78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e80:	d901      	bls.n	8006e86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e006      	b.n	8006e94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	f003 0320 	and.w	r3, r3, #32
 8006e8e:	2b20      	cmp	r3, #32
 8006e90:	d0f0      	beq.n	8006e74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3714      	adds	r7, #20
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eb8:	d901      	bls.n	8006ebe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e018      	b.n	8006ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	daf2      	bge.n	8006eac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2210      	movs	r2, #16
 8006ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006edc:	d901      	bls.n	8006ee2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e006      	b.n	8006ef0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	f003 0310 	and.w	r3, r3, #16
 8006eea:	2b10      	cmp	r3, #16
 8006eec:	d0f0      	beq.n	8006ed0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b089      	sub	sp, #36	@ 0x24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	4611      	mov	r1, r2
 8006f08:	461a      	mov	r2, r3
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	71fb      	strb	r3, [r7, #7]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d123      	bne.n	8006f6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f22:	88bb      	ldrh	r3, [r7, #4]
 8006f24:	3303      	adds	r3, #3
 8006f26:	089b      	lsrs	r3, r3, #2
 8006f28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	e018      	b.n	8006f62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	031a      	lsls	r2, r3, #12
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	3301      	adds	r3, #1
 8006f48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	3301      	adds	r3, #1
 8006f54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d3e2      	bcc.n	8006f30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3724      	adds	r7, #36	@ 0x24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b08b      	sub	sp, #44	@ 0x2c
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	089b      	lsrs	r3, r3, #2
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	f003 0303 	and.w	r3, r3, #3
 8006f9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	623b      	str	r3, [r7, #32]
 8006fa2:	e014      	b.n	8006fce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	3301      	adds	r3, #1
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	6a3a      	ldr	r2, [r7, #32]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d3e6      	bcc.n	8006fa4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fd6:	8bfb      	ldrh	r3, [r7, #30]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01e      	beq.n	800701a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	6812      	ldr	r2, [r2, #0]
 8006fee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	701a      	strb	r2, [r3, #0]
      i++;
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	3301      	adds	r3, #1
 8007006:	623b      	str	r3, [r7, #32]
      pDest++;
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	3301      	adds	r3, #1
 800700c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800700e:	8bfb      	ldrh	r3, [r7, #30]
 8007010:	3b01      	subs	r3, #1
 8007012:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007014:	8bfb      	ldrh	r3, [r7, #30]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1ea      	bne.n	8006ff0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800701c:	4618      	mov	r0, r3
 800701e:	372c      	adds	r7, #44	@ 0x2c
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4013      	ands	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007040:	68fb      	ldr	r3, [r7, #12]
}
 8007042:	4618      	mov	r0, r3
 8007044:	3714      	adds	r7, #20
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr

0800704e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800704e:	b480      	push	{r7}
 8007050:	b085      	sub	sp, #20
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4413      	add	r3, r2
 8007066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	68ba      	ldr	r2, [r7, #8]
 800707e:	4013      	ands	r3, r2
 8007080:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007082:	68bb      	ldr	r3, [r7, #8]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	f003 0301 	and.w	r3, r3, #1
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	3301      	adds	r3, #1
 80070bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070c4:	d901      	bls.n	80070ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070c6:	2303      	movs	r3, #3
 80070c8:	e01b      	b.n	8007102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	daf2      	bge.n	80070b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f043 0201 	orr.w	r2, r3, #1
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ee:	d901      	bls.n	80070f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e006      	b.n	8007102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d0f0      	beq.n	80070e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
	...

08007110 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007110:	b084      	sub	sp, #16
 8007112:	b580      	push	{r7, lr}
 8007114:	b086      	sub	sp, #24
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
 800711a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800711e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007130:	461a      	mov	r2, r3
 8007132:	2300      	movs	r3, #0
 8007134:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007146:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007152:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	d119      	bne.n	800719a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007166:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800716a:	2b01      	cmp	r3, #1
 800716c:	d10a      	bne.n	8007184 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800717c:	f043 0304 	orr.w	r3, r3, #4
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	e014      	b.n	80071ae <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007192:	f023 0304 	bic.w	r3, r3, #4
 8007196:	6013      	str	r3, [r2, #0]
 8007198:	e009      	b.n	80071ae <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80071a8:	f023 0304 	bic.w	r3, r3, #4
 80071ac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80071ae:	2110      	movs	r1, #16
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7ff fe43 	bl	8006e3c <USB_FlushTxFifo>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f7ff fe6d 	bl	8006ea0 <USB_FlushRxFifo>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d001      	beq.n	80071d0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80071d0:	2300      	movs	r3, #0
 80071d2:	613b      	str	r3, [r7, #16]
 80071d4:	e015      	b.n	8007202 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e2:	461a      	mov	r2, r3
 80071e4:	f04f 33ff 	mov.w	r3, #4294967295
 80071e8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071f6:	461a      	mov	r2, r3
 80071f8:	2300      	movs	r3, #0
 80071fa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	3301      	adds	r3, #1
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007206:	461a      	mov	r2, r3
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	4293      	cmp	r3, r2
 800720c:	d3e3      	bcc.n	80071d6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f04f 32ff 	mov.w	r2, #4294967295
 800721a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a18      	ldr	r2, [pc, #96]	@ (8007280 <USB_HostInit+0x170>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d10b      	bne.n	800723c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800722a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a15      	ldr	r2, [pc, #84]	@ (8007284 <USB_HostInit+0x174>)
 8007230:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a14      	ldr	r2, [pc, #80]	@ (8007288 <USB_HostInit+0x178>)
 8007236:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800723a:	e009      	b.n	8007250 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2280      	movs	r2, #128	@ 0x80
 8007240:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a11      	ldr	r2, [pc, #68]	@ (800728c <USB_HostInit+0x17c>)
 8007246:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a11      	ldr	r2, [pc, #68]	@ (8007290 <USB_HostInit+0x180>)
 800724c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007250:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007254:	2b00      	cmp	r3, #0
 8007256:	d105      	bne.n	8007264 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	f043 0210 	orr.w	r2, r3, #16
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	699a      	ldr	r2, [r3, #24]
 8007268:	4b0a      	ldr	r3, [pc, #40]	@ (8007294 <USB_HostInit+0x184>)
 800726a:	4313      	orrs	r3, r2
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800727c:	b004      	add	sp, #16
 800727e:	4770      	bx	lr
 8007280:	40040000 	.word	0x40040000
 8007284:	01000200 	.word	0x01000200
 8007288:	00e00300 	.word	0x00e00300
 800728c:	00600080 	.word	0x00600080
 8007290:	004000e0 	.word	0x004000e0
 8007294:	a3200008 	.word	0xa3200008

08007298 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80072b6:	f023 0303 	bic.w	r3, r3, #3
 80072ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	f003 0303 	and.w	r3, r3, #3
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80072d0:	4313      	orrs	r3, r2
 80072d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80072d4:	78fb      	ldrb	r3, [r7, #3]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d107      	bne.n	80072ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072e0:	461a      	mov	r2, r3
 80072e2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80072e6:	6053      	str	r3, [r2, #4]
 80072e8:	e00c      	b.n	8007304 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d107      	bne.n	8007300 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072f6:	461a      	mov	r2, r3
 80072f8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80072fc:	6053      	str	r3, [r2, #4]
 80072fe:	e001      	b.n	8007304 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007332:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800733c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007340:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007342:	2064      	movs	r0, #100	@ 0x64
 8007344:	f7fa ffb6 	bl	80022b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007354:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007356:	200a      	movs	r0, #10
 8007358:	f7fa ffac 	bl	80022b4 <HAL_Delay>

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007366:	b480      	push	{r7}
 8007368:	b085      	sub	sp, #20
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	460b      	mov	r3, r1
 8007370:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800738a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d109      	bne.n	80073aa <USB_DriveVbus+0x44>
 8007396:	78fb      	ldrb	r3, [r7, #3]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d106      	bne.n	80073aa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80073a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80073a8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b4:	d109      	bne.n	80073ca <USB_DriveVbus+0x64>
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80073c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073c8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3714      	adds	r7, #20
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	0c5b      	lsrs	r3, r3, #17
 80073f6:	f003 0303 	and.w	r3, r3, #3
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3714      	adds	r7, #20
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	b29b      	uxth	r3, r3
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	4608      	mov	r0, r1
 8007432:	4611      	mov	r1, r2
 8007434:	461a      	mov	r2, r3
 8007436:	4603      	mov	r3, r0
 8007438:	70fb      	strb	r3, [r7, #3]
 800743a:	460b      	mov	r3, r1
 800743c:	70bb      	strb	r3, [r7, #2]
 800743e:	4613      	mov	r3, r2
 8007440:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4413      	add	r3, r2
 8007452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007456:	461a      	mov	r2, r3
 8007458:	f04f 33ff 	mov.w	r3, #4294967295
 800745c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800745e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007462:	2b03      	cmp	r3, #3
 8007464:	d87c      	bhi.n	8007560 <USB_HC_Init+0x138>
 8007466:	a201      	add	r2, pc, #4	@ (adr r2, 800746c <USB_HC_Init+0x44>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	0800747d 	.word	0x0800747d
 8007470:	08007523 	.word	0x08007523
 8007474:	0800747d 	.word	0x0800747d
 8007478:	080074e5 	.word	0x080074e5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	4413      	add	r3, r2
 8007484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007488:	461a      	mov	r2, r3
 800748a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800748e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007490:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007494:	2b00      	cmp	r3, #0
 8007496:	da10      	bge.n	80074ba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	0151      	lsls	r1, r2, #5
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	440a      	add	r2, r1
 80074ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074b6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80074b8:	e055      	b.n	8007566 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a6f      	ldr	r2, [pc, #444]	@ (800767c <USB_HC_Init+0x254>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d151      	bne.n	8007566 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	0151      	lsls	r1, r2, #5
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	440a      	add	r2, r1
 80074d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074dc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80074e0:	60d3      	str	r3, [r2, #12]
      break;
 80074e2:	e040      	b.n	8007566 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074e4:	78fb      	ldrb	r3, [r7, #3]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f0:	461a      	mov	r2, r3
 80074f2:	f240 639d 	movw	r3, #1693	@ 0x69d
 80074f6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074f8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	da34      	bge.n	800756a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	4413      	add	r3, r2
 8007508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	440a      	add	r2, r1
 8007516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800751a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800751e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007520:	e023      	b.n	800756a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	4413      	add	r3, r2
 800752a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800752e:	461a      	mov	r2, r3
 8007530:	f240 2325 	movw	r3, #549	@ 0x225
 8007534:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007536:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800753a:	2b00      	cmp	r3, #0
 800753c:	da17      	bge.n	800756e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	4413      	add	r3, r2
 8007546:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	78fa      	ldrb	r2, [r7, #3]
 800754e:	0151      	lsls	r1, r2, #5
 8007550:	693a      	ldr	r2, [r7, #16]
 8007552:	440a      	add	r2, r1
 8007554:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007558:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800755c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800755e:	e006      	b.n	800756e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	77fb      	strb	r3, [r7, #31]
      break;
 8007564:	e004      	b.n	8007570 <USB_HC_Init+0x148>
      break;
 8007566:	bf00      	nop
 8007568:	e002      	b.n	8007570 <USB_HC_Init+0x148>
      break;
 800756a:	bf00      	nop
 800756c:	e000      	b.n	8007570 <USB_HC_Init+0x148>
      break;
 800756e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	4413      	add	r3, r2
 8007578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800757c:	461a      	mov	r2, r3
 800757e:	2300      	movs	r3, #0
 8007580:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	015a      	lsls	r2, r3, #5
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	4413      	add	r3, r2
 800758a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	78fa      	ldrb	r2, [r7, #3]
 8007592:	0151      	lsls	r1, r2, #5
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	440a      	add	r2, r1
 8007598:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800759c:	f043 0302 	orr.w	r3, r3, #2
 80075a0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075a8:	699a      	ldr	r2, [r3, #24]
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	f003 030f 	and.w	r3, r3, #15
 80075b0:	2101      	movs	r1, #1
 80075b2:	fa01 f303 	lsl.w	r3, r1, r3
 80075b6:	6939      	ldr	r1, [r7, #16]
 80075b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80075bc:	4313      	orrs	r3, r2
 80075be:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80075cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	da03      	bge.n	80075dc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80075d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	e001      	b.n	80075e0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff fef9 	bl	80073d8 <USB_GetHostSpeed>
 80075e6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80075e8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075ec:	2b02      	cmp	r3, #2
 80075ee:	d106      	bne.n	80075fe <USB_HC_Init+0x1d6>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d003      	beq.n	80075fe <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80075f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	e001      	b.n	8007602 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80075fe:	2300      	movs	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007602:	787b      	ldrb	r3, [r7, #1]
 8007604:	059b      	lsls	r3, r3, #22
 8007606:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800760a:	78bb      	ldrb	r3, [r7, #2]
 800760c:	02db      	lsls	r3, r3, #11
 800760e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007612:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007614:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007618:	049b      	lsls	r3, r3, #18
 800761a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800761e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007620:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007622:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007626:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	431a      	orrs	r2, r3
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007630:	78fa      	ldrb	r2, [r7, #3]
 8007632:	0151      	lsls	r1, r2, #5
 8007634:	693a      	ldr	r2, [r7, #16]
 8007636:	440a      	add	r2, r1
 8007638:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800763c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007640:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007642:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007646:	2b03      	cmp	r3, #3
 8007648:	d003      	beq.n	8007652 <USB_HC_Init+0x22a>
 800764a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d10f      	bne.n	8007672 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007652:	78fb      	ldrb	r3, [r7, #3]
 8007654:	015a      	lsls	r2, r3, #5
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	4413      	add	r3, r2
 800765a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	0151      	lsls	r1, r2, #5
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	440a      	add	r2, r1
 8007668:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800766c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007670:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007672:	7ffb      	ldrb	r3, [r7, #31]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3720      	adds	r7, #32
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	40040000 	.word	0x40040000

08007680 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08c      	sub	sp, #48	@ 0x30
 8007684:	af02      	add	r7, sp, #8
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	4613      	mov	r3, r2
 800768c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	785b      	ldrb	r3, [r3, #1]
 8007696:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007698:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800769c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	4a5d      	ldr	r2, [pc, #372]	@ (8007818 <USB_HC_StartXfer+0x198>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d12f      	bne.n	8007706 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80076a6:	79fb      	ldrb	r3, [r7, #7]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d11c      	bne.n	80076e6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	7c9b      	ldrb	r3, [r3, #18]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <USB_HC_StartXfer+0x3c>
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	7c9b      	ldrb	r3, [r3, #18]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d124      	bne.n	8007706 <USB_HC_StartXfer+0x86>
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	799b      	ldrb	r3, [r3, #6]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d120      	bne.n	8007706 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	69fa      	ldr	r2, [r7, #28]
 80076d4:	0151      	lsls	r1, r2, #5
 80076d6:	6a3a      	ldr	r2, [r7, #32]
 80076d8:	440a      	add	r2, r1
 80076da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80076de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e2:	60d3      	str	r3, [r2, #12]
 80076e4:	e00f      	b.n	8007706 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	791b      	ldrb	r3, [r3, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d10b      	bne.n	8007706 <USB_HC_StartXfer+0x86>
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	795b      	ldrb	r3, [r3, #5]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d107      	bne.n	8007706 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	785b      	ldrb	r3, [r3, #1]
 80076fa:	4619      	mov	r1, r3
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 fb6b 	bl	8007dd8 <USB_DoPing>
        return HAL_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	e232      	b.n	8007b6c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	799b      	ldrb	r3, [r3, #6]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d158      	bne.n	80077c0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800770e:	2301      	movs	r3, #1
 8007710:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	78db      	ldrb	r3, [r3, #3]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d007      	beq.n	800772a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800771a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	8a92      	ldrh	r2, [r2, #20]
 8007720:	fb03 f202 	mul.w	r2, r3, r2
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	61da      	str	r2, [r3, #28]
 8007728:	e07c      	b.n	8007824 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	7c9b      	ldrb	r3, [r3, #18]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d130      	bne.n	8007794 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	2bbc      	cmp	r3, #188	@ 0xbc
 8007738:	d918      	bls.n	800776c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	8a9b      	ldrh	r3, [r3, #20]
 800773e:	461a      	mov	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d003      	beq.n	800775c <USB_HC_StartXfer+0xdc>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	2b02      	cmp	r3, #2
 800775a:	d103      	bne.n	8007764 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2202      	movs	r2, #2
 8007760:	60da      	str	r2, [r3, #12]
 8007762:	e05f      	b.n	8007824 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2201      	movs	r2, #1
 8007768:	60da      	str	r2, [r3, #12]
 800776a:	e05b      	b.n	8007824 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6a1a      	ldr	r2, [r3, #32]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d007      	beq.n	800778c <USB_HC_StartXfer+0x10c>
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b02      	cmp	r3, #2
 8007782:	d003      	beq.n	800778c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2204      	movs	r2, #4
 8007788:	60da      	str	r2, [r3, #12]
 800778a:	e04b      	b.n	8007824 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	2203      	movs	r2, #3
 8007790:	60da      	str	r2, [r3, #12]
 8007792:	e047      	b.n	8007824 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d10d      	bne.n	80077b6 <USB_HC_StartXfer+0x136>
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6a1b      	ldr	r3, [r3, #32]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	8a92      	ldrh	r2, [r2, #20]
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d907      	bls.n	80077b6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	8a92      	ldrh	r2, [r2, #20]
 80077ac:	fb03 f202 	mul.w	r2, r3, r2
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	61da      	str	r2, [r3, #28]
 80077b4:	e036      	b.n	8007824 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	6a1a      	ldr	r2, [r3, #32]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	61da      	str	r2, [r3, #28]
 80077be:	e031      	b.n	8007824 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d018      	beq.n	80077fa <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	8a92      	ldrh	r2, [r2, #20]
 80077d0:	4413      	add	r3, r2
 80077d2:	3b01      	subs	r3, #1
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	8a92      	ldrh	r2, [r2, #20]
 80077d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80077dc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80077de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80077e0:	8b7b      	ldrh	r3, [r7, #26]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d90b      	bls.n	80077fe <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80077e6:	8b7b      	ldrh	r3, [r7, #26]
 80077e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	8a92      	ldrh	r2, [r2, #20]
 80077f0:	fb03 f202 	mul.w	r2, r3, r2
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	61da      	str	r2, [r3, #28]
 80077f8:	e001      	b.n	80077fe <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80077fa:	2301      	movs	r3, #1
 80077fc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	78db      	ldrb	r3, [r3, #3]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007806:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	8a92      	ldrh	r2, [r2, #20]
 800780c:	fb03 f202 	mul.w	r2, r3, r2
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	61da      	str	r2, [r3, #28]
 8007814:	e006      	b.n	8007824 <USB_HC_StartXfer+0x1a4>
 8007816:	bf00      	nop
 8007818:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6a1a      	ldr	r2, [r3, #32]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800782c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800782e:	04d9      	lsls	r1, r3, #19
 8007830:	4ba3      	ldr	r3, [pc, #652]	@ (8007ac0 <USB_HC_StartXfer+0x440>)
 8007832:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007834:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	7d9b      	ldrb	r3, [r3, #22]
 800783a:	075b      	lsls	r3, r3, #29
 800783c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007840:	69f9      	ldr	r1, [r7, #28]
 8007842:	0148      	lsls	r0, r1, #5
 8007844:	6a39      	ldr	r1, [r7, #32]
 8007846:	4401      	add	r1, r0
 8007848:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800784c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800784e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d009      	beq.n	800786a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	6999      	ldr	r1, [r3, #24]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	015a      	lsls	r2, r3, #5
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	4413      	add	r3, r2
 8007862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007866:	460a      	mov	r2, r1
 8007868:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800786a:	6a3b      	ldr	r3, [r7, #32]
 800786c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	2b00      	cmp	r3, #0
 8007878:	bf0c      	ite	eq
 800787a:	2301      	moveq	r3, #1
 800787c:	2300      	movne	r3, #0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	4413      	add	r3, r2
 800788a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69fa      	ldr	r2, [r7, #28]
 8007892:	0151      	lsls	r1, r2, #5
 8007894:	6a3a      	ldr	r2, [r7, #32]
 8007896:	440a      	add	r2, r1
 8007898:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800789c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	7e7b      	ldrb	r3, [r7, #25]
 80078b2:	075b      	lsls	r3, r3, #29
 80078b4:	69f9      	ldr	r1, [r7, #28]
 80078b6:	0148      	lsls	r0, r1, #5
 80078b8:	6a39      	ldr	r1, [r7, #32]
 80078ba:	4401      	add	r1, r0
 80078bc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80078c0:	4313      	orrs	r3, r2
 80078c2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	799b      	ldrb	r3, [r3, #6]
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	f040 80c3 	bne.w	8007a54 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	7c5b      	ldrb	r3, [r3, #17]
 80078d2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80078d8:	4313      	orrs	r3, r2
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	0151      	lsls	r1, r2, #5
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	440a      	add	r2, r1
 80078e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80078e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80078ea:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	0151      	lsls	r1, r2, #5
 80078fe:	6a3a      	ldr	r2, [r7, #32]
 8007900:	440a      	add	r2, r1
 8007902:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007906:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800790a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	79db      	ldrb	r3, [r3, #7]
 8007910:	2b01      	cmp	r3, #1
 8007912:	d123      	bne.n	800795c <USB_HC_StartXfer+0x2dc>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d11f      	bne.n	800795c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	4413      	add	r3, r2
 8007924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	6a3a      	ldr	r2, [r7, #32]
 8007930:	440a      	add	r2, r1
 8007932:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800793a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	0151      	lsls	r1, r2, #5
 800794e:	6a3a      	ldr	r2, [r7, #32]
 8007950:	440a      	add	r2, r1
 8007952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800795a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	7c9b      	ldrb	r3, [r3, #18]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d003      	beq.n	800796c <USB_HC_StartXfer+0x2ec>
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	7c9b      	ldrb	r3, [r3, #18]
 8007968:	2b03      	cmp	r3, #3
 800796a:	d117      	bne.n	800799c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007970:	2b01      	cmp	r3, #1
 8007972:	d113      	bne.n	800799c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	78db      	ldrb	r3, [r3, #3]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d10f      	bne.n	800799c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	015a      	lsls	r2, r3, #5
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	4413      	add	r3, r2
 8007984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	6a3a      	ldr	r2, [r7, #32]
 8007990:	440a      	add	r2, r1
 8007992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007996:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800799a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	7c9b      	ldrb	r3, [r3, #18]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d162      	bne.n	8007a6a <USB_HC_StartXfer+0x3ea>
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	78db      	ldrb	r3, [r3, #3]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d15e      	bne.n	8007a6a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	68db      	ldr	r3, [r3, #12]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	2b03      	cmp	r3, #3
 80079b4:	d858      	bhi.n	8007a68 <USB_HC_StartXfer+0x3e8>
 80079b6:	a201      	add	r2, pc, #4	@ (adr r2, 80079bc <USB_HC_StartXfer+0x33c>)
 80079b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	080079ef 	.word	0x080079ef
 80079c4:	08007a11 	.word	0x08007a11
 80079c8:	08007a33 	.word	0x08007a33
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	6a3b      	ldr	r3, [r7, #32]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	69fa      	ldr	r2, [r7, #28]
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	6a3a      	ldr	r2, [r7, #32]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079ea:	6053      	str	r3, [r2, #4]
          break;
 80079ec:	e03d      	b.n	8007a6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	69fa      	ldr	r2, [r7, #28]
 80079fe:	0151      	lsls	r1, r2, #5
 8007a00:	6a3a      	ldr	r2, [r7, #32]
 8007a02:	440a      	add	r2, r1
 8007a04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a08:	f043 030e 	orr.w	r3, r3, #14
 8007a0c:	6053      	str	r3, [r2, #4]
          break;
 8007a0e:	e02c      	b.n	8007a6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	6a3a      	ldr	r2, [r7, #32]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a2e:	6053      	str	r3, [r2, #4]
          break;
 8007a30:	e01b      	b.n	8007a6a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	6a3b      	ldr	r3, [r7, #32]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	6a3a      	ldr	r2, [r7, #32]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007a50:	6053      	str	r3, [r2, #4]
          break;
 8007a52:	e00a      	b.n	8007a6a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a60:	461a      	mov	r2, r3
 8007a62:	2300      	movs	r3, #0
 8007a64:	6053      	str	r3, [r2, #4]
 8007a66:	e000      	b.n	8007a6a <USB_HC_StartXfer+0x3ea>
          break;
 8007a68:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	015a      	lsls	r2, r3, #5
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a80:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	78db      	ldrb	r3, [r3, #3]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d004      	beq.n	8007a94 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a90:	613b      	str	r3, [r7, #16]
 8007a92:	e003      	b.n	8007a9c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a9a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007aa2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e055      	b.n	8007b6c <USB_HC_StartXfer+0x4ec>
 8007ac0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	78db      	ldrb	r3, [r3, #3]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d14e      	bne.n	8007b6a <USB_HC_StartXfer+0x4ea>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6a1b      	ldr	r3, [r3, #32]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d04a      	beq.n	8007b6a <USB_HC_StartXfer+0x4ea>
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	79db      	ldrb	r3, [r3, #7]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d146      	bne.n	8007b6a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	7c9b      	ldrb	r3, [r3, #18]
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d831      	bhi.n	8007b48 <USB_HC_StartXfer+0x4c8>
 8007ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8007aec <USB_HC_StartXfer+0x46c>)
 8007ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aea:	bf00      	nop
 8007aec:	08007afd 	.word	0x08007afd
 8007af0:	08007b21 	.word	0x08007b21
 8007af4:	08007afd 	.word	0x08007afd
 8007af8:	08007b21 	.word	0x08007b21
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	3303      	adds	r3, #3
 8007b02:	089b      	lsrs	r3, r3, #2
 8007b04:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007b06:	8afa      	ldrh	r2, [r7, #22]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d91c      	bls.n	8007b4c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	f043 0220 	orr.w	r2, r3, #32
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b1e:	e015      	b.n	8007b4c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	3303      	adds	r3, #3
 8007b26:	089b      	lsrs	r3, r3, #2
 8007b28:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007b2a:	8afa      	ldrh	r2, [r7, #22]
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d90a      	bls.n	8007b50 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	619a      	str	r2, [r3, #24]
        }
        break;
 8007b46:	e003      	b.n	8007b50 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007b48:	bf00      	nop
 8007b4a:	e002      	b.n	8007b52 <USB_HC_StartXfer+0x4d2>
        break;
 8007b4c:	bf00      	nop
 8007b4e:	e000      	b.n	8007b52 <USB_HC_StartXfer+0x4d2>
        break;
 8007b50:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6999      	ldr	r1, [r3, #24]
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	785a      	ldrb	r2, [r3, #1]
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	b29b      	uxth	r3, r3
 8007b60:	2000      	movs	r0, #0
 8007b62:	9000      	str	r0, [sp, #0]
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff f9c9 	bl	8006efc <USB_WritePacket>
  }

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3728      	adds	r7, #40	@ 0x28
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	b29b      	uxth	r3, r3
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b089      	sub	sp, #36	@ 0x24
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007ba6:	78fb      	ldrb	r3, [r7, #3]
 8007ba8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	0c9b      	lsrs	r3, r3, #18
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	0fdb      	lsrs	r3, r3, #31
 8007bd4:	f003 0301 	and.w	r3, r3, #1
 8007bd8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	0fdb      	lsrs	r3, r3, #31
 8007bea:	f003 0301 	and.w	r3, r3, #1
 8007bee:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 0320 	and.w	r3, r3, #32
 8007bf8:	2b20      	cmp	r3, #32
 8007bfa:	d10d      	bne.n	8007c18 <USB_HC_Halt+0x82>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10a      	bne.n	8007c18 <USB_HC_Halt+0x82>
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d002      	beq.n	8007c14 <USB_HC_Halt+0x7e>
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d101      	bne.n	8007c18 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007c14:	2300      	movs	r3, #0
 8007c16:	e0d8      	b.n	8007dca <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <USB_HC_Halt+0x8e>
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d173      	bne.n	8007d0c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c42:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d14a      	bne.n	8007ce6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d133      	bne.n	8007cc4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	0151      	lsls	r1, r2, #5
 8007c6e:	69fa      	ldr	r2, [r7, #28]
 8007c70:	440a      	add	r2, r1
 8007c72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c7a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	69ba      	ldr	r2, [r7, #24]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	69fa      	ldr	r2, [r7, #28]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c9a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ca8:	d82e      	bhi.n	8007d08 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cc0:	d0ec      	beq.n	8007c9c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cc2:	e081      	b.n	8007dc8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69ba      	ldr	r2, [r7, #24]
 8007cd4:	0151      	lsls	r1, r2, #5
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	440a      	add	r2, r1
 8007cda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cde:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ce2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ce4:	e070      	b.n	8007dc8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d04:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d06:	e05f      	b.n	8007dc8 <USB_HC_Halt+0x232>
            break;
 8007d08:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d0a:	e05d      	b.n	8007dc8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	69fa      	ldr	r2, [r7, #28]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d2a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d133      	bne.n	8007da4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007d3c:	69bb      	ldr	r3, [r7, #24]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	69ba      	ldr	r2, [r7, #24]
 8007d4c:	0151      	lsls	r1, r2, #5
 8007d4e:	69fa      	ldr	r2, [r7, #28]
 8007d50:	440a      	add	r2, r1
 8007d52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d5a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	0151      	lsls	r1, r2, #5
 8007d6e:	69fa      	ldr	r2, [r7, #28]
 8007d70:	440a      	add	r2, r1
 8007d72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d7a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d88:	d81d      	bhi.n	8007dc6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007da0:	d0ec      	beq.n	8007d7c <USB_HC_Halt+0x1e6>
 8007da2:	e011      	b.n	8007dc8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	0151      	lsls	r1, r2, #5
 8007db6:	69fa      	ldr	r2, [r7, #28]
 8007db8:	440a      	add	r2, r1
 8007dba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	e000      	b.n	8007dc8 <USB_HC_Halt+0x232>
          break;
 8007dc6:	bf00      	nop
    }
  }

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3724      	adds	r7, #36	@ 0x24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
	...

08007dd8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b087      	sub	sp, #28
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	460b      	mov	r3, r1
 8007de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007dec:	2301      	movs	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	04da      	lsls	r2, r3, #19
 8007df4:	4b15      	ldr	r3, [pc, #84]	@ (8007e4c <USB_DoPing+0x74>)
 8007df6:	4013      	ands	r3, r2
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	0151      	lsls	r1, r2, #5
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	440a      	add	r2, r1
 8007e00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e08:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007e20:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e28:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e36:	461a      	mov	r2, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	371c      	adds	r7, #28
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr
 8007e4a:	bf00      	nop
 8007e4c:	1ff80000 	.word	0x1ff80000

08007e50 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b088      	sub	sp, #32
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7fe ff8c 	bl	8006d82 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e6a:	2110      	movs	r1, #16
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fe ffe5 	bl	8006e3c <USB_FlushTxFifo>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d001      	beq.n	8007e7c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff f80f 	bl	8006ea0 <USB_FlushRxFifo>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	61bb      	str	r3, [r7, #24]
 8007e90:	e01f      	b.n	8007ed2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	015a      	lsls	r2, r3, #5
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ea8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007eb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007eb8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b0f      	cmp	r3, #15
 8007ed6:	d9dc      	bls.n	8007e92 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61bb      	str	r3, [r7, #24]
 8007edc:	e034      	b.n	8007f48 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ef4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007efc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f04:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f12:	461a      	mov	r2, r3
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f24:	d80c      	bhi.n	8007f40 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f3c:	d0ec      	beq.n	8007f18 <USB_StopHost+0xc8>
 8007f3e:	e000      	b.n	8007f42 <USB_StopHost+0xf2>
        break;
 8007f40:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	3301      	adds	r3, #1
 8007f46:	61bb      	str	r3, [r7, #24]
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	2b0f      	cmp	r3, #15
 8007f4c:	d9c7      	bls.n	8007ede <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f54:	461a      	mov	r2, r3
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f62:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7fe fefb 	bl	8006d60 <USB_EnableGlobalInt>

  return ret;
 8007f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3720      	adds	r7, #32
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007f74:	b590      	push	{r4, r7, lr}
 8007f76:	b089      	sub	sp, #36	@ 0x24
 8007f78:	af04      	add	r7, sp, #16
 8007f7a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	2202      	movs	r2, #2
 8007f80:	2102      	movs	r1, #2
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fc85 	bl	8008892 <USBH_FindInterface>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	2bff      	cmp	r3, #255	@ 0xff
 8007f90:	d002      	beq.n	8007f98 <USBH_CDC_InterfaceInit+0x24>
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d901      	bls.n	8007f9c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e13d      	b.n	8008218 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fc5a 	bl	800885a <USBH_SelectInterface>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d001      	beq.n	8007fb4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e131      	b.n	8008218 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007fba:	2050      	movs	r0, #80	@ 0x50
 8007fbc:	f002 fb64 	bl	800a688 <malloc>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e11f      	b.n	8008218 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007fd8:	2250      	movs	r2, #80	@ 0x50
 8007fda:	2100      	movs	r1, #0
 8007fdc:	68b8      	ldr	r0, [r7, #8]
 8007fde:	f002 fecf 	bl	800ad80 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	211a      	movs	r1, #26
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	b25b      	sxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	da15      	bge.n	8008026 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	211a      	movs	r1, #26
 8008000:	fb01 f303 	mul.w	r3, r1, r3
 8008004:	4413      	add	r3, r2
 8008006:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800800a:	781a      	ldrb	r2, [r3, #0]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	211a      	movs	r1, #26
 8008016:	fb01 f303 	mul.w	r3, r1, r3
 800801a:	4413      	add	r3, r2
 800801c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008020:	881a      	ldrh	r2, [r3, #0]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	785b      	ldrb	r3, [r3, #1]
 800802a:	4619      	mov	r1, r3
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 ffbe 	bl	8009fae <USBH_AllocPipe>
 8008032:	4603      	mov	r3, r0
 8008034:	461a      	mov	r2, r3
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	7819      	ldrb	r1, [r3, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	7858      	ldrb	r0, [r3, #1]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	8952      	ldrh	r2, [r2, #10]
 8008052:	9202      	str	r2, [sp, #8]
 8008054:	2203      	movs	r2, #3
 8008056:	9201      	str	r2, [sp, #4]
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	4623      	mov	r3, r4
 800805c:	4602      	mov	r2, r0
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f001 ff76 	bl	8009f50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2200      	movs	r2, #0
 800806a:	4619      	mov	r1, r3
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f002 fa85 	bl	800a57c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008072:	2300      	movs	r3, #0
 8008074:	2200      	movs	r2, #0
 8008076:	210a      	movs	r1, #10
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fc0a 	bl	8008892 <USBH_FindInterface>
 800807e:	4603      	mov	r3, r0
 8008080:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	2bff      	cmp	r3, #255	@ 0xff
 8008086:	d002      	beq.n	800808e <USBH_CDC_InterfaceInit+0x11a>
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	2b01      	cmp	r3, #1
 800808c:	d901      	bls.n	8008092 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800808e:	2302      	movs	r3, #2
 8008090:	e0c2      	b.n	8008218 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008092:	7bfb      	ldrb	r3, [r7, #15]
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	211a      	movs	r1, #26
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	4413      	add	r3, r2
 800809e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	b25b      	sxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da16      	bge.n	80080d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080aa:	7bfb      	ldrb	r3, [r7, #15]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	211a      	movs	r1, #26
 80080b0:	fb01 f303 	mul.w	r3, r1, r3
 80080b4:	4413      	add	r3, r2
 80080b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080ba:	781a      	ldrb	r2, [r3, #0]
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	211a      	movs	r1, #26
 80080c6:	fb01 f303 	mul.w	r3, r1, r3
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80080d0:	881a      	ldrh	r2, [r3, #0]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	835a      	strh	r2, [r3, #26]
 80080d6:	e015      	b.n	8008104 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	211a      	movs	r1, #26
 80080de:	fb01 f303 	mul.w	r3, r1, r3
 80080e2:	4413      	add	r3, r2
 80080e4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80080e8:	781a      	ldrb	r2, [r3, #0]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	211a      	movs	r1, #26
 80080f4:	fb01 f303 	mul.w	r3, r1, r3
 80080f8:	4413      	add	r3, r2
 80080fa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80080fe:	881a      	ldrh	r2, [r3, #0]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	211a      	movs	r1, #26
 800810a:	fb01 f303 	mul.w	r3, r1, r3
 800810e:	4413      	add	r3, r2
 8008110:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b25b      	sxtb	r3, r3
 8008118:	2b00      	cmp	r3, #0
 800811a:	da16      	bge.n	800814a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	211a      	movs	r1, #26
 8008122:	fb01 f303 	mul.w	r3, r1, r3
 8008126:	4413      	add	r3, r2
 8008128:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008132:	7bfb      	ldrb	r3, [r7, #15]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	211a      	movs	r1, #26
 8008138:	fb01 f303 	mul.w	r3, r1, r3
 800813c:	4413      	add	r3, r2
 800813e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008142:	881a      	ldrh	r2, [r3, #0]
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	835a      	strh	r2, [r3, #26]
 8008148:	e015      	b.n	8008176 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	211a      	movs	r1, #26
 8008150:	fb01 f303 	mul.w	r3, r1, r3
 8008154:	4413      	add	r3, r2
 8008156:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800815a:	781a      	ldrb	r2, [r3, #0]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	211a      	movs	r1, #26
 8008166:	fb01 f303 	mul.w	r3, r1, r3
 800816a:	4413      	add	r3, r2
 800816c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008170:	881a      	ldrh	r2, [r3, #0]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	7b9b      	ldrb	r3, [r3, #14]
 800817a:	4619      	mov	r1, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 ff16 	bl	8009fae <USBH_AllocPipe>
 8008182:	4603      	mov	r3, r0
 8008184:	461a      	mov	r2, r3
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	7bdb      	ldrb	r3, [r3, #15]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 ff0c 	bl	8009fae <USBH_AllocPipe>
 8008196:	4603      	mov	r3, r0
 8008198:	461a      	mov	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	7b59      	ldrb	r1, [r3, #13]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	7b98      	ldrb	r0, [r3, #14]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	8b12      	ldrh	r2, [r2, #24]
 80081b6:	9202      	str	r2, [sp, #8]
 80081b8:	2202      	movs	r2, #2
 80081ba:	9201      	str	r2, [sp, #4]
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	4623      	mov	r3, r4
 80081c0:	4602      	mov	r2, r0
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f001 fec4 	bl	8009f50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	7b19      	ldrb	r1, [r3, #12]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	7bd8      	ldrb	r0, [r3, #15]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	8b52      	ldrh	r2, [r2, #26]
 80081e0:	9202      	str	r2, [sp, #8]
 80081e2:	2202      	movs	r2, #2
 80081e4:	9201      	str	r2, [sp, #4]
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	4623      	mov	r3, r4
 80081ea:	4602      	mov	r2, r0
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 feaf 	bl	8009f50 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	7b5b      	ldrb	r3, [r3, #13]
 80081fe:	2200      	movs	r2, #0
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f002 f9ba 	bl	800a57c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	7b1b      	ldrb	r3, [r3, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f002 f9b3 	bl	800a57c <USBH_LL_SetToggle>

  return USBH_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	bd90      	pop	{r4, r7, pc}

08008220 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00e      	beq.n	8008258 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 fea4 	bl	8009f8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	4619      	mov	r1, r3
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f001 fecf 	bl	8009ff0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2200      	movs	r2, #0
 8008256:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	7b1b      	ldrb	r3, [r3, #12]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00e      	beq.n	800827e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	7b1b      	ldrb	r3, [r3, #12]
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f001 fe91 	bl	8009f8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	7b1b      	ldrb	r3, [r3, #12]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 febc 	bl	8009ff0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	7b5b      	ldrb	r3, [r3, #13]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00e      	beq.n	80082a4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	7b5b      	ldrb	r3, [r3, #13]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 fe7e 	bl	8009f8e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	7b5b      	ldrb	r3, [r3, #13]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 fea9 	bl	8009ff0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d00b      	beq.n	80082c8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f002 f9ed 	bl	800a698 <free>
    phost->pActiveClass->pData = 0U;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082c4:	2200      	movs	r2, #0
 80082c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3340      	adds	r3, #64	@ 0x40
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f8b1 	bl	8008452 <GetLineCoding>
 80082f0:	4603      	mov	r3, r0
 80082f2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80082f4:	7afb      	ldrb	r3, [r7, #11]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d105      	bne.n	8008306 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008300:	2102      	movs	r1, #2
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008306:	7afb      	ldrb	r3, [r7, #11]
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008318:	2301      	movs	r3, #1
 800831a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008330:	2b04      	cmp	r3, #4
 8008332:	d877      	bhi.n	8008424 <USBH_CDC_Process+0x114>
 8008334:	a201      	add	r2, pc, #4	@ (adr r2, 800833c <USBH_CDC_Process+0x2c>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	08008351 	.word	0x08008351
 8008340:	08008357 	.word	0x08008357
 8008344:	08008387 	.word	0x08008387
 8008348:	080083fb 	.word	0x080083fb
 800834c:	08008409 	.word	0x08008409
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008350:	2300      	movs	r3, #0
 8008352:	73fb      	strb	r3, [r7, #15]
      break;
 8008354:	e06d      	b.n	8008432 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f897 	bl	8008490 <SetLineCoding>
 8008362:	4603      	mov	r3, r0
 8008364:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d104      	bne.n	8008376 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2202      	movs	r2, #2
 8008370:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008374:	e058      	b.n	8008428 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d055      	beq.n	8008428 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2204      	movs	r2, #4
 8008380:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008384:	e050      	b.n	8008428 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	3340      	adds	r3, #64	@ 0x40
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f860 	bl	8008452 <GetLineCoding>
 8008392:	4603      	mov	r3, r0
 8008394:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d126      	bne.n	80083ea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ae:	791b      	ldrb	r3, [r3, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d13b      	bne.n	800842c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083be:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d133      	bne.n	800842c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d12b      	bne.n	800842c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083dc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80083de:	429a      	cmp	r2, r3
 80083e0:	d124      	bne.n	800842c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 f958 	bl	8008698 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80083e8:	e020      	b.n	800842c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80083ea:	7bbb      	ldrb	r3, [r7, #14]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d01d      	beq.n	800842c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2204      	movs	r2, #4
 80083f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80083f8:	e018      	b.n	800842c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f867 	bl	80084ce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f8da 	bl	80085ba <CDC_ProcessReception>
      break;
 8008406:	e014      	b.n	8008432 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008408:	2100      	movs	r1, #0
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 f81a 	bl	8009444 <USBH_ClrFeature>
 8008410:	4603      	mov	r3, r0
 8008412:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10a      	bne.n	8008430 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008422:	e005      	b.n	8008430 <USBH_CDC_Process+0x120>

    default:
      break;
 8008424:	bf00      	nop
 8008426:	e004      	b.n	8008432 <USBH_CDC_Process+0x122>
      break;
 8008428:	bf00      	nop
 800842a:	e002      	b.n	8008432 <USBH_CDC_Process+0x122>
      break;
 800842c:	bf00      	nop
 800842e:	e000      	b.n	8008432 <USBH_CDC_Process+0x122>
      break;
 8008430:	bf00      	nop

  }

  return status;
 8008432:	7bfb      	ldrb	r3, [r7, #15]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	370c      	adds	r7, #12
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	22a1      	movs	r2, #161	@ 0xa1
 8008460:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2221      	movs	r2, #33	@ 0x21
 8008466:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2200      	movs	r2, #0
 8008472:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2207      	movs	r2, #7
 8008478:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2207      	movs	r2, #7
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f001 fb14 	bl	8009aae <USBH_CtlReq>
 8008486:	4603      	mov	r3, r0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2221      	movs	r2, #33	@ 0x21
 800849e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2220      	movs	r2, #32
 80084a4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2207      	movs	r2, #7
 80084b6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	2207      	movs	r2, #7
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 faf5 	bl	8009aae <USBH_CtlReq>
 80084c4:	4603      	mov	r3, r0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}

080084ce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80084ce:	b580      	push	{r7, lr}
 80084d0:	b086      	sub	sp, #24
 80084d2:	af02      	add	r7, sp, #8
 80084d4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084e0:	2300      	movs	r3, #0
 80084e2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d002      	beq.n	80084f4 <CDC_ProcessTransmission+0x26>
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d023      	beq.n	800853a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80084f2:	e05e      	b.n	80085b2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f8:	68fa      	ldr	r2, [r7, #12]
 80084fa:	8b12      	ldrh	r2, [r2, #24]
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d90b      	bls.n	8008518 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	69d9      	ldr	r1, [r3, #28]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	8b1a      	ldrh	r2, [r3, #24]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	7b5b      	ldrb	r3, [r3, #13]
 800850c:	2001      	movs	r0, #1
 800850e:	9000      	str	r0, [sp, #0]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 fcda 	bl	8009eca <USBH_BulkSendData>
 8008516:	e00b      	b.n	8008530 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008520:	b29a      	uxth	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	7b5b      	ldrb	r3, [r3, #13]
 8008526:	2001      	movs	r0, #1
 8008528:	9000      	str	r0, [sp, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f001 fccd 	bl	8009eca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2202      	movs	r2, #2
 8008534:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008538:	e03b      	b.n	80085b2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	7b5b      	ldrb	r3, [r3, #13]
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f001 fff1 	bl	800a528 <USBH_LL_GetURBState>
 8008546:	4603      	mov	r3, r0
 8008548:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800854a:	7afb      	ldrb	r3, [r7, #11]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d128      	bne.n	80085a2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	8b12      	ldrh	r2, [r2, #24]
 8008558:	4293      	cmp	r3, r2
 800855a:	d90e      	bls.n	800857a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	8b12      	ldrh	r2, [r2, #24]
 8008564:	1a9a      	subs	r2, r3, r2
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	8b12      	ldrh	r2, [r2, #24]
 8008572:	441a      	add	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	61da      	str	r2, [r3, #28]
 8008578:	e002      	b.n	8008580 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008590:	e00e      	b.n	80085b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 f868 	bl	8008670 <USBH_CDC_TransmitCallback>
      break;
 80085a0:	e006      	b.n	80085b0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80085a2:	7afb      	ldrb	r3, [r7, #11]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d103      	bne.n	80085b0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80085b0:	bf00      	nop
  }
}
 80085b2:	bf00      	nop
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085cc:	2300      	movs	r3, #0
 80085ce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d002      	beq.n	80085e0 <CDC_ProcessReception+0x26>
 80085da:	2b04      	cmp	r3, #4
 80085dc:	d00e      	beq.n	80085fc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80085de:	e043      	b.n	8008668 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	6a19      	ldr	r1, [r3, #32]
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	8b5a      	ldrh	r2, [r3, #26]
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	7b1b      	ldrb	r3, [r3, #12]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 fc91 	bl	8009f14 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	2204      	movs	r2, #4
 80085f6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80085fa:	e035      	b.n	8008668 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	7b1b      	ldrb	r3, [r3, #12]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f001 ff90 	bl	800a528 <USBH_LL_GetURBState>
 8008608:	4603      	mov	r3, r0
 800860a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800860c:	7cfb      	ldrb	r3, [r7, #19]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d129      	bne.n	8008666 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	7b1b      	ldrb	r3, [r3, #12]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 fef3 	bl	800a404 <USBH_LL_GetLastXferSize>
 800861e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	429a      	cmp	r2, r3
 8008628:	d016      	beq.n	8008658 <CDC_ProcessReception+0x9e>
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	8b5b      	ldrh	r3, [r3, #26]
 800862e:	461a      	mov	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4293      	cmp	r3, r2
 8008634:	d110      	bne.n	8008658 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	1ad2      	subs	r2, r2, r3
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	6a1a      	ldr	r2, [r3, #32]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	441a      	add	r2, r3
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2203      	movs	r2, #3
 8008652:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008656:	e006      	b.n	8008666 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f80f 	bl	8008684 <USBH_CDC_ReceiveCallback>
      break;
 8008666:	bf00      	nop
  }
}
 8008668:	bf00      	nop
 800866a:	3718      	adds	r7, #24
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80086c0:	2302      	movs	r3, #2
 80086c2:	e029      	b.n	8008718 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	79fa      	ldrb	r2, [r7, #7]
 80086c8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80086dc:	68f8      	ldr	r0, [r7, #12]
 80086de:	f000 f81f 	bl	8008720 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f001 fdc3 	bl	800a29c <USBH_LL_Init>

  return USBH_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008728:	2300      	movs	r3, #0
 800872a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	e009      	b.n	8008746 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	33e0      	adds	r3, #224	@ 0xe0
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	2200      	movs	r2, #0
 800873e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b0f      	cmp	r3, #15
 800874a:	d9f2      	bls.n	8008732 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
 8008750:	e009      	b.n	8008766 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4413      	add	r3, r2
 8008758:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800875c:	2200      	movs	r2, #0
 800875e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3301      	adds	r3, #1
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800876c:	d3f1      	bcc.n	8008752 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2201      	movs	r2, #1
 800877e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2240      	movs	r2, #64	@ 0x40
 8008792:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2201      	movs	r2, #1
 80087a6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	331c      	adds	r3, #28
 80087be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80087c2:	2100      	movs	r1, #0
 80087c4:	4618      	mov	r0, r3
 80087c6:	f002 fadb 	bl	800ad80 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80087d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f002 fad2 	bl	800ad80 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80087e2:	2212      	movs	r2, #18
 80087e4:	2100      	movs	r1, #0
 80087e6:	4618      	mov	r0, r3
 80087e8:	f002 faca 	bl	800ad80 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80087f2:	223e      	movs	r2, #62	@ 0x3e
 80087f4:	2100      	movs	r1, #0
 80087f6:	4618      	mov	r0, r3
 80087f8:	f002 fac2 	bl	800ad80 <memset>

  return USBH_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008806:	b480      	push	{r7}
 8008808:	b085      	sub	sp, #20
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d016      	beq.n	8008848 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10e      	bne.n	8008842 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800882a:	1c59      	adds	r1, r3, #1
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	33de      	adds	r3, #222	@ 0xde
 8008836:	6839      	ldr	r1, [r7, #0]
 8008838:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800883c:	2300      	movs	r3, #0
 800883e:	73fb      	strb	r3, [r7, #15]
 8008840:	e004      	b.n	800884c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008842:	2302      	movs	r3, #2
 8008844:	73fb      	strb	r3, [r7, #15]
 8008846:	e001      	b.n	800884c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008848:	2302      	movs	r3, #2
 800884a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3714      	adds	r7, #20
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800885a:	b480      	push	{r7}
 800885c:	b085      	sub	sp, #20
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	460b      	mov	r3, r1
 8008864:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008866:	2300      	movs	r3, #0
 8008868:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	429a      	cmp	r2, r3
 8008874:	d204      	bcs.n	8008880 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	78fa      	ldrb	r2, [r7, #3]
 800887a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800887e:	e001      	b.n	8008884 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008880:	2302      	movs	r3, #2
 8008882:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008892:	b480      	push	{r7}
 8008894:	b087      	sub	sp, #28
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	461a      	mov	r2, r3
 80088a0:	4603      	mov	r3, r0
 80088a2:	70fb      	strb	r3, [r7, #3]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70bb      	strb	r3, [r7, #2]
 80088a8:	4613      	mov	r3, r2
 80088aa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088b0:	2300      	movs	r3, #0
 80088b2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088ba:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80088bc:	e025      	b.n	800890a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	221a      	movs	r2, #26
 80088c2:	fb02 f303 	mul.w	r3, r2, r3
 80088c6:	3308      	adds	r3, #8
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4413      	add	r3, r2
 80088cc:	3302      	adds	r3, #2
 80088ce:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	795b      	ldrb	r3, [r3, #5]
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d002      	beq.n	80088e0 <USBH_FindInterface+0x4e>
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	2bff      	cmp	r3, #255	@ 0xff
 80088de:	d111      	bne.n	8008904 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80088e4:	78ba      	ldrb	r2, [r7, #2]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d002      	beq.n	80088f0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088ea:	78bb      	ldrb	r3, [r7, #2]
 80088ec:	2bff      	cmp	r3, #255	@ 0xff
 80088ee:	d109      	bne.n	8008904 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80088f4:	787a      	ldrb	r2, [r7, #1]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d002      	beq.n	8008900 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80088fa:	787b      	ldrb	r3, [r7, #1]
 80088fc:	2bff      	cmp	r3, #255	@ 0xff
 80088fe:	d101      	bne.n	8008904 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	e006      	b.n	8008912 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	3301      	adds	r3, #1
 8008908:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800890a:	7dfb      	ldrb	r3, [r7, #23]
 800890c:	2b01      	cmp	r3, #1
 800890e:	d9d6      	bls.n	80088be <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008910:	23ff      	movs	r3, #255	@ 0xff
}
 8008912:	4618      	mov	r0, r3
 8008914:	371c      	adds	r7, #28
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f001 fcf4 	bl	800a314 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800892c:	2101      	movs	r1, #1
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 fe0d 	bl	800a54e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008934:	2300      	movs	r3, #0
}
 8008936:	4618      	mov	r0, r3
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
	...

08008940 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af04      	add	r7, sp, #16
 8008946:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008948:	2302      	movs	r3, #2
 800894a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800894c:	2300      	movs	r3, #0
 800894e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b01      	cmp	r3, #1
 800895a:	d102      	bne.n	8008962 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2203      	movs	r2, #3
 8008960:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b0b      	cmp	r3, #11
 800896a:	f200 81bb 	bhi.w	8008ce4 <USBH_Process+0x3a4>
 800896e:	a201      	add	r2, pc, #4	@ (adr r2, 8008974 <USBH_Process+0x34>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	080089a5 	.word	0x080089a5
 8008978:	080089d7 	.word	0x080089d7
 800897c:	08008a3f 	.word	0x08008a3f
 8008980:	08008c7f 	.word	0x08008c7f
 8008984:	08008ce5 	.word	0x08008ce5
 8008988:	08008adf 	.word	0x08008adf
 800898c:	08008c25 	.word	0x08008c25
 8008990:	08008b15 	.word	0x08008b15
 8008994:	08008b35 	.word	0x08008b35
 8008998:	08008b53 	.word	0x08008b53
 800899c:	08008b97 	.word	0x08008b97
 80089a0:	08008c67 	.word	0x08008c67
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 819b 	beq.w	8008ce8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80089b8:	20c8      	movs	r0, #200	@ 0xc8
 80089ba:	f001 fe12 	bl	800a5e2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fd05 	bl	800a3ce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089d4:	e188      	b.n	8008ce8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d107      	bne.n	80089f0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089ee:	e18a      	b.n	8008d06 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80089f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089fa:	d914      	bls.n	8008a26 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008a02:	3301      	adds	r3, #1
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d903      	bls.n	8008a1e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	220d      	movs	r2, #13
 8008a1a:	701a      	strb	r2, [r3, #0]
      break;
 8008a1c:	e173      	b.n	8008d06 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]
      break;
 8008a24:	e16f      	b.n	8008d06 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008a2c:	f103 020a 	add.w	r2, r3, #10
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008a36:	200a      	movs	r0, #10
 8008a38:	f001 fdd3 	bl	800a5e2 <USBH_Delay>
      break;
 8008a3c:	e163      	b.n	8008d06 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d005      	beq.n	8008a54 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a4e:	2104      	movs	r1, #4
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008a54:	2064      	movs	r0, #100	@ 0x64
 8008a56:	f001 fdc4 	bl	800a5e2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f001 fc90 	bl	800a380 <USBH_LL_GetSpeed>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2205      	movs	r2, #5
 8008a6e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008a70:	2100      	movs	r1, #0
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 fa9b 	bl	8009fae <USBH_AllocPipe>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008a80:	2180      	movs	r1, #128	@ 0x80
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f001 fa93 	bl	8009fae <USBH_AllocPipe>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	7919      	ldrb	r1, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008aa4:	9202      	str	r2, [sp, #8]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	9201      	str	r2, [sp, #4]
 8008aaa:	9300      	str	r3, [sp, #0]
 8008aac:	4603      	mov	r3, r0
 8008aae:	2280      	movs	r2, #128	@ 0x80
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f001 fa4d 	bl	8009f50 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7959      	ldrb	r1, [r3, #5]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008aca:	9202      	str	r2, [sp, #8]
 8008acc:	2200      	movs	r2, #0
 8008ace:	9201      	str	r2, [sp, #4]
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f001 fa3a 	bl	8009f50 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008adc:	e113      	b.n	8008d06 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f916 	bl	8008d10 <USBH_HandleEnum>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f040 80fd 	bne.w	8008cec <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d103      	bne.n	8008b0c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2208      	movs	r2, #8
 8008b08:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008b0a:	e0ef      	b.n	8008cec <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2207      	movs	r2, #7
 8008b10:	701a      	strb	r2, [r3, #0]
      break;
 8008b12:	e0eb      	b.n	8008cec <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 80e8 	beq.w	8008cf0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b26:	2101      	movs	r1, #1
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2208      	movs	r2, #8
 8008b30:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008b32:	e0dd      	b.n	8008cf0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fc3a 	bl	80093b6 <USBH_SetCfg>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f040 80d5 	bne.w	8008cf4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2209      	movs	r2, #9
 8008b4e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b50:	e0d0      	b.n	8008cf4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008b58:	f003 0320 	and.w	r3, r3, #32
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d016      	beq.n	8008b8e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008b60:	2101      	movs	r1, #1
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fc4a 	bl	80093fc <USBH_SetFeature>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d103      	bne.n	8008b7c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	220a      	movs	r2, #10
 8008b78:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b7a:	e0bd      	b.n	8008cf8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008b7c:	7bbb      	ldrb	r3, [r7, #14]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	f040 80b9 	bne.w	8008cf8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	220a      	movs	r2, #10
 8008b8a:	701a      	strb	r2, [r3, #0]
      break;
 8008b8c:	e0b4      	b.n	8008cf8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	220a      	movs	r2, #10
 8008b92:	701a      	strb	r2, [r3, #0]
      break;
 8008b94:	e0b0      	b.n	8008cf8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 80ad 	beq.w	8008cfc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008baa:	2300      	movs	r3, #0
 8008bac:	73fb      	strb	r3, [r7, #15]
 8008bae:	e016      	b.n	8008bde <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008bb0:	7bfa      	ldrb	r2, [r7, #15]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	32de      	adds	r2, #222	@ 0xde
 8008bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bba:	791a      	ldrb	r2, [r3, #4]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d108      	bne.n	8008bd8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008bc6:	7bfa      	ldrb	r2, [r7, #15]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	32de      	adds	r2, #222	@ 0xde
 8008bcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008bd6:	e005      	b.n	8008be4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	73fb      	strb	r3, [r7, #15]
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d0e5      	beq.n	8008bb0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d016      	beq.n	8008c1c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	4798      	blx	r3
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d109      	bne.n	8008c14 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2206      	movs	r2, #6
 8008c04:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008c0c:	2103      	movs	r1, #3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c12:	e073      	b.n	8008cfc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	220d      	movs	r2, #13
 8008c18:	701a      	strb	r2, [r3, #0]
      break;
 8008c1a:	e06f      	b.n	8008cfc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	220d      	movs	r2, #13
 8008c20:	701a      	strb	r2, [r3, #0]
      break;
 8008c22:	e06b      	b.n	8008cfc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d017      	beq.n	8008c5e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	4798      	blx	r3
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c3e:	7bbb      	ldrb	r3, [r7, #14]
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d103      	bne.n	8008c4e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	220b      	movs	r2, #11
 8008c4a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c4c:	e058      	b.n	8008d00 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d154      	bne.n	8008d00 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	220d      	movs	r2, #13
 8008c5a:	701a      	strb	r2, [r3, #0]
      break;
 8008c5c:	e050      	b.n	8008d00 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	220d      	movs	r2, #13
 8008c62:	701a      	strb	r2, [r3, #0]
      break;
 8008c64:	e04c      	b.n	8008d00 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d049      	beq.n	8008d04 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c76:	695b      	ldr	r3, [r3, #20]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	4798      	blx	r3
      }
      break;
 8008c7c:	e042      	b.n	8008d04 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f7ff fd4a 	bl	8008720 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d009      	beq.n	8008caa <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d005      	beq.n	8008cc0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cba:	2105      	movs	r1, #5
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d107      	bne.n	8008cdc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7ff fe22 	bl	800891e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008cda:	e014      	b.n	8008d06 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fb19 	bl	800a314 <USBH_LL_Start>
      break;
 8008ce2:	e010      	b.n	8008d06 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008ce4:	bf00      	nop
 8008ce6:	e00e      	b.n	8008d06 <USBH_Process+0x3c6>
      break;
 8008ce8:	bf00      	nop
 8008cea:	e00c      	b.n	8008d06 <USBH_Process+0x3c6>
      break;
 8008cec:	bf00      	nop
 8008cee:	e00a      	b.n	8008d06 <USBH_Process+0x3c6>
    break;
 8008cf0:	bf00      	nop
 8008cf2:	e008      	b.n	8008d06 <USBH_Process+0x3c6>
      break;
 8008cf4:	bf00      	nop
 8008cf6:	e006      	b.n	8008d06 <USBH_Process+0x3c6>
      break;
 8008cf8:	bf00      	nop
 8008cfa:	e004      	b.n	8008d06 <USBH_Process+0x3c6>
      break;
 8008cfc:	bf00      	nop
 8008cfe:	e002      	b.n	8008d06 <USBH_Process+0x3c6>
      break;
 8008d00:	bf00      	nop
 8008d02:	e000      	b.n	8008d06 <USBH_Process+0x3c6>
      break;
 8008d04:	bf00      	nop
  }
  return USBH_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af04      	add	r7, sp, #16
 8008d16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	785b      	ldrb	r3, [r3, #1]
 8008d24:	2b07      	cmp	r3, #7
 8008d26:	f200 81bd 	bhi.w	80090a4 <USBH_HandleEnum+0x394>
 8008d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d30 <USBH_HandleEnum+0x20>)
 8008d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d30:	08008d51 	.word	0x08008d51
 8008d34:	08008e0b 	.word	0x08008e0b
 8008d38:	08008e75 	.word	0x08008e75
 8008d3c:	08008eff 	.word	0x08008eff
 8008d40:	08008f69 	.word	0x08008f69
 8008d44:	08008fd9 	.word	0x08008fd9
 8008d48:	0800901f 	.word	0x0800901f
 8008d4c:	08009065 	.word	0x08009065
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008d50:	2108      	movs	r1, #8
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fa4c 	bl	80091f0 <USBH_Get_DevDesc>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d12e      	bne.n	8008dc0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	7919      	ldrb	r1, [r3, #4]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008d86:	9202      	str	r2, [sp, #8]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	9201      	str	r2, [sp, #4]
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2280      	movs	r2, #128	@ 0x80
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 f8dc 	bl	8009f50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	7959      	ldrb	r1, [r3, #5]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008dac:	9202      	str	r2, [sp, #8]
 8008dae:	2200      	movs	r2, #0
 8008db0:	9201      	str	r2, [sp, #4]
 8008db2:	9300      	str	r3, [sp, #0]
 8008db4:	4603      	mov	r3, r0
 8008db6:	2200      	movs	r2, #0
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 f8c9 	bl	8009f50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008dbe:	e173      	b.n	80090a8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	f040 8170 	bne.w	80090a8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008dce:	3301      	adds	r3, #1
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d903      	bls.n	8008dea <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	220d      	movs	r2, #13
 8008de6:	701a      	strb	r2, [r3, #0]
      break;
 8008de8:	e15e      	b.n	80090a8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	795b      	ldrb	r3, [r3, #5]
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f001 f8fd 	bl	8009ff0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	791b      	ldrb	r3, [r3, #4]
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f001 f8f7 	bl	8009ff0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	701a      	strb	r2, [r3, #0]
      break;
 8008e08:	e14e      	b.n	80090a8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008e0a:	2112      	movs	r1, #18
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f9ef 	bl	80091f0 <USBH_Get_DevDesc>
 8008e12:	4603      	mov	r3, r0
 8008e14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d103      	bne.n	8008e24 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e22:	e143      	b.n	80090ac <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	f040 8140 	bne.w	80090ac <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e32:	3301      	adds	r3, #1
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d903      	bls.n	8008e4e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	220d      	movs	r2, #13
 8008e4a:	701a      	strb	r2, [r3, #0]
      break;
 8008e4c:	e12e      	b.n	80090ac <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	795b      	ldrb	r3, [r3, #5]
 8008e52:	4619      	mov	r1, r3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f001 f8cb 	bl	8009ff0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	791b      	ldrb	r3, [r3, #4]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 f8c5 	bl	8009ff0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	701a      	strb	r2, [r3, #0]
      break;
 8008e72:	e11b      	b.n	80090ac <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008e74:	2101      	movs	r1, #1
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fa79 	bl	800936e <USBH_SetAddress>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d130      	bne.n	8008ee8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008e86:	2002      	movs	r0, #2
 8008e88:	f001 fbab 	bl	800a5e2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2203      	movs	r2, #3
 8008e98:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7919      	ldrb	r1, [r3, #4]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008eae:	9202      	str	r2, [sp, #8]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	9201      	str	r2, [sp, #4]
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2280      	movs	r2, #128	@ 0x80
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f001 f848 	bl	8009f50 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	7959      	ldrb	r1, [r3, #5]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ed4:	9202      	str	r2, [sp, #8]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	9201      	str	r2, [sp, #4]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	4603      	mov	r3, r0
 8008ede:	2200      	movs	r2, #0
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 f835 	bl	8009f50 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ee6:	e0e3      	b.n	80090b0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2b03      	cmp	r3, #3
 8008eec:	f040 80e0 	bne.w	80090b0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	220d      	movs	r2, #13
 8008ef4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	705a      	strb	r2, [r3, #1]
      break;
 8008efc:	e0d8      	b.n	80090b0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008efe:	2109      	movs	r1, #9
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 f9a1 	bl	8009248 <USBH_Get_CfgDesc>
 8008f06:	4603      	mov	r3, r0
 8008f08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d103      	bne.n	8008f18 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2204      	movs	r2, #4
 8008f14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f16:	e0cd      	b.n	80090b4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	f040 80ca 	bne.w	80090b4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f26:	3301      	adds	r3, #1
 8008f28:	b2da      	uxtb	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f36:	2b03      	cmp	r3, #3
 8008f38:	d903      	bls.n	8008f42 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	220d      	movs	r2, #13
 8008f3e:	701a      	strb	r2, [r3, #0]
      break;
 8008f40:	e0b8      	b.n	80090b4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	795b      	ldrb	r3, [r3, #5]
 8008f46:	4619      	mov	r1, r3
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 f851 	bl	8009ff0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	791b      	ldrb	r3, [r3, #4]
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f001 f84b 	bl	8009ff0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
      break;
 8008f66:	e0a5      	b.n	80090b4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008f6e:	4619      	mov	r1, r3
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f969 	bl	8009248 <USBH_Get_CfgDesc>
 8008f76:	4603      	mov	r3, r0
 8008f78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d103      	bne.n	8008f88 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2205      	movs	r2, #5
 8008f84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f86:	e097      	b.n	80090b8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	f040 8094 	bne.w	80090b8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f96:	3301      	adds	r3, #1
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008fa6:	2b03      	cmp	r3, #3
 8008fa8:	d903      	bls.n	8008fb2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	220d      	movs	r2, #13
 8008fae:	701a      	strb	r2, [r3, #0]
      break;
 8008fb0:	e082      	b.n	80090b8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	795b      	ldrb	r3, [r3, #5]
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f001 f819 	bl	8009ff0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	791b      	ldrb	r3, [r3, #4]
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f001 f813 	bl	8009ff0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	701a      	strb	r2, [r3, #0]
      break;
 8008fd6:	e06f      	b.n	80090b8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d019      	beq.n	8009016 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008fee:	23ff      	movs	r3, #255	@ 0xff
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f953 	bl	800929c <USBH_Get_StringDesc>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d103      	bne.n	8009008 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2206      	movs	r2, #6
 8009004:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009006:	e059      	b.n	80090bc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	2b03      	cmp	r3, #3
 800900c:	d156      	bne.n	80090bc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2206      	movs	r2, #6
 8009012:	705a      	strb	r2, [r3, #1]
      break;
 8009014:	e052      	b.n	80090bc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2206      	movs	r2, #6
 800901a:	705a      	strb	r2, [r3, #1]
      break;
 800901c:	e04e      	b.n	80090bc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009024:	2b00      	cmp	r3, #0
 8009026:	d019      	beq.n	800905c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009034:	23ff      	movs	r3, #255	@ 0xff
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f930 	bl	800929c <USBH_Get_StringDesc>
 800903c:	4603      	mov	r3, r0
 800903e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009040:	7bbb      	ldrb	r3, [r7, #14]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d103      	bne.n	800904e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2207      	movs	r2, #7
 800904a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800904c:	e038      	b.n	80090c0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b03      	cmp	r3, #3
 8009052:	d135      	bne.n	80090c0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2207      	movs	r2, #7
 8009058:	705a      	strb	r2, [r3, #1]
      break;
 800905a:	e031      	b.n	80090c0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2207      	movs	r2, #7
 8009060:	705a      	strb	r2, [r3, #1]
      break;
 8009062:	e02d      	b.n	80090c0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800906a:	2b00      	cmp	r3, #0
 800906c:	d017      	beq.n	800909e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800907a:	23ff      	movs	r3, #255	@ 0xff
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f90d 	bl	800929c <USBH_Get_StringDesc>
 8009082:	4603      	mov	r3, r0
 8009084:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009086:	7bbb      	ldrb	r3, [r7, #14]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800908c:	2300      	movs	r3, #0
 800908e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009090:	e018      	b.n	80090c4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009092:	7bbb      	ldrb	r3, [r7, #14]
 8009094:	2b03      	cmp	r3, #3
 8009096:	d115      	bne.n	80090c4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73fb      	strb	r3, [r7, #15]
      break;
 800909c:	e012      	b.n	80090c4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	73fb      	strb	r3, [r7, #15]
      break;
 80090a2:	e00f      	b.n	80090c4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80090a4:	bf00      	nop
 80090a6:	e00e      	b.n	80090c6 <USBH_HandleEnum+0x3b6>
      break;
 80090a8:	bf00      	nop
 80090aa:	e00c      	b.n	80090c6 <USBH_HandleEnum+0x3b6>
      break;
 80090ac:	bf00      	nop
 80090ae:	e00a      	b.n	80090c6 <USBH_HandleEnum+0x3b6>
      break;
 80090b0:	bf00      	nop
 80090b2:	e008      	b.n	80090c6 <USBH_HandleEnum+0x3b6>
      break;
 80090b4:	bf00      	nop
 80090b6:	e006      	b.n	80090c6 <USBH_HandleEnum+0x3b6>
      break;
 80090b8:	bf00      	nop
 80090ba:	e004      	b.n	80090c6 <USBH_HandleEnum+0x3b6>
      break;
 80090bc:	bf00      	nop
 80090be:	e002      	b.n	80090c6 <USBH_HandleEnum+0x3b6>
      break;
 80090c0:	bf00      	nop
 80090c2:	e000      	b.n	80090c6 <USBH_HandleEnum+0x3b6>
      break;
 80090c4:	bf00      	nop
  }
  return Status;
 80090c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80090e2:	bf00      	nop
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f804 	bl	8009112 <USBH_HandleSof>
}
 800910a:	bf00      	nop
 800910c:	3708      	adds	r7, #8
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b082      	sub	sp, #8
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	2b0b      	cmp	r3, #11
 8009122:	d10a      	bne.n	800913a <USBH_HandleSof+0x28>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800912a:	2b00      	cmp	r3, #0
 800912c:	d005      	beq.n	800913a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	4798      	blx	r3
  }
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009152:	bf00      	nop
}
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800915e:	b480      	push	{r7}
 8009160:	b083      	sub	sp, #12
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800916e:	bf00      	nop
}
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 f8be 	bl	800a34a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	791b      	ldrb	r3, [r3, #4]
 80091d2:	4619      	mov	r1, r3
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 ff0b 	bl	8009ff0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	795b      	ldrb	r3, [r3, #5]
 80091de:	4619      	mov	r1, r3
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 ff05 	bl	8009ff0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af02      	add	r7, sp, #8
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80091fc:	887b      	ldrh	r3, [r7, #2]
 80091fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009202:	d901      	bls.n	8009208 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009204:	2303      	movs	r3, #3
 8009206:	e01b      	b.n	8009240 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800920e:	887b      	ldrh	r3, [r7, #2]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	4613      	mov	r3, r2
 8009214:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009218:	2100      	movs	r1, #0
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f872 	bl	8009304 <USBH_GetDescriptor>
 8009220:	4603      	mov	r3, r0
 8009222:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d109      	bne.n	800923e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009230:	887a      	ldrh	r2, [r7, #2]
 8009232:	4619      	mov	r1, r3
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f929 	bl	800948c <USBH_ParseDevDesc>
 800923a:	4603      	mov	r3, r0
 800923c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800923e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af02      	add	r7, sp, #8
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	331c      	adds	r3, #28
 8009258:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800925a:	887b      	ldrh	r3, [r7, #2]
 800925c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009260:	d901      	bls.n	8009266 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009262:	2303      	movs	r3, #3
 8009264:	e016      	b.n	8009294 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009266:	887b      	ldrh	r3, [r7, #2]
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f846 	bl	8009304 <USBH_GetDescriptor>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d107      	bne.n	8009292 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009282:	887b      	ldrh	r3, [r7, #2]
 8009284:	461a      	mov	r2, r3
 8009286:	68b9      	ldr	r1, [r7, #8]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 f9af 	bl	80095ec <USBH_ParseCfgDesc>
 800928e:	4603      	mov	r3, r0
 8009290:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009292:	7bfb      	ldrb	r3, [r7, #15]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af02      	add	r7, sp, #8
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	607a      	str	r2, [r7, #4]
 80092a6:	461a      	mov	r2, r3
 80092a8:	460b      	mov	r3, r1
 80092aa:	72fb      	strb	r3, [r7, #11]
 80092ac:	4613      	mov	r3, r2
 80092ae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80092b0:	893b      	ldrh	r3, [r7, #8]
 80092b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092b6:	d802      	bhi.n	80092be <USBH_Get_StringDesc+0x22>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d101      	bne.n	80092c2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80092be:	2303      	movs	r3, #3
 80092c0:	e01c      	b.n	80092fc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80092c2:	7afb      	ldrb	r3, [r7, #11]
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80092ca:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80092d2:	893b      	ldrh	r3, [r7, #8]
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	460b      	mov	r3, r1
 80092d8:	2100      	movs	r1, #0
 80092da:	68f8      	ldr	r0, [r7, #12]
 80092dc:	f000 f812 	bl	8009304 <USBH_GetDescriptor>
 80092e0:	4603      	mov	r3, r0
 80092e2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80092e4:	7dfb      	ldrb	r3, [r7, #23]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d107      	bne.n	80092fa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80092f0:	893a      	ldrh	r2, [r7, #8]
 80092f2:	6879      	ldr	r1, [r7, #4]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f000 fb8d 	bl	8009a14 <USBH_ParseStringDesc>
  }

  return status;
 80092fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3718      	adds	r7, #24
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	607b      	str	r3, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	72fb      	strb	r3, [r7, #11]
 8009312:	4613      	mov	r3, r2
 8009314:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	789b      	ldrb	r3, [r3, #2]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d11c      	bne.n	8009358 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800931e:	7afb      	ldrb	r3, [r7, #11]
 8009320:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009324:	b2da      	uxtb	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2206      	movs	r2, #6
 800932e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	893a      	ldrh	r2, [r7, #8]
 8009334:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009336:	893b      	ldrh	r3, [r7, #8]
 8009338:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800933c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009340:	d104      	bne.n	800934c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f240 4209 	movw	r2, #1033	@ 0x409
 8009348:	829a      	strh	r2, [r3, #20]
 800934a:	e002      	b.n	8009352 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	8b3a      	ldrh	r2, [r7, #24]
 8009356:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009358:	8b3b      	ldrh	r3, [r7, #24]
 800935a:	461a      	mov	r2, r3
 800935c:	6879      	ldr	r1, [r7, #4]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 fba5 	bl	8009aae <USBH_CtlReq>
 8009364:	4603      	mov	r3, r0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b082      	sub	sp, #8
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	460b      	mov	r3, r1
 8009378:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	789b      	ldrb	r3, [r3, #2]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d10f      	bne.n	80093a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2205      	movs	r2, #5
 800938c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800938e:	78fb      	ldrb	r3, [r7, #3]
 8009390:	b29a      	uxth	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80093a2:	2200      	movs	r2, #0
 80093a4:	2100      	movs	r1, #0
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fb81 	bl	8009aae <USBH_CtlReq>
 80093ac:	4603      	mov	r3, r0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
 80093be:	460b      	mov	r3, r1
 80093c0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	789b      	ldrb	r3, [r3, #2]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d10e      	bne.n	80093e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2209      	movs	r2, #9
 80093d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	887a      	ldrh	r2, [r7, #2]
 80093da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2200      	movs	r2, #0
 80093e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2200      	movs	r2, #0
 80093e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80093e8:	2200      	movs	r2, #0
 80093ea:	2100      	movs	r1, #0
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fb5e 	bl	8009aae <USBH_CtlReq>
 80093f2:	4603      	mov	r3, r0
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3708      	adds	r7, #8
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	460b      	mov	r3, r1
 8009406:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	789b      	ldrb	r3, [r3, #2]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d10f      	bne.n	8009430 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2203      	movs	r2, #3
 800941a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	b29a      	uxth	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2200      	movs	r2, #0
 8009428:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009430:	2200      	movs	r2, #0
 8009432:	2100      	movs	r1, #0
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fb3a 	bl	8009aae <USBH_CtlReq>
 800943a:	4603      	mov	r3, r0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}

08009444 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	460b      	mov	r3, r1
 800944e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	789b      	ldrb	r3, [r3, #2]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d10f      	bne.n	8009478 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2202      	movs	r2, #2
 800945c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2200      	movs	r2, #0
 8009468:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	b29a      	uxth	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2200      	movs	r2, #0
 8009476:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009478:	2200      	movs	r2, #0
 800947a:	2100      	movs	r1, #0
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fb16 	bl	8009aae <USBH_CtlReq>
 8009482:	4603      	mov	r3, r0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800948c:	b480      	push	{r7}
 800948e:	b087      	sub	sp, #28
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	4613      	mov	r3, r2
 8009498:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80094a0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80094a2:	2300      	movs	r3, #0
 80094a4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d101      	bne.n	80094b0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80094ac:	2302      	movs	r3, #2
 80094ae:	e094      	b.n	80095da <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	781a      	ldrb	r2, [r3, #0]
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	785a      	ldrb	r2, [r3, #1]
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	3302      	adds	r3, #2
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	461a      	mov	r2, r3
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	3303      	adds	r3, #3
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	021b      	lsls	r3, r3, #8
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	4313      	orrs	r3, r2
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	791a      	ldrb	r2, [r3, #4]
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	795a      	ldrb	r2, [r3, #5]
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	799a      	ldrb	r2, [r3, #6]
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	79da      	ldrb	r2, [r3, #7]
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009500:	2b00      	cmp	r3, #0
 8009502:	d004      	beq.n	800950e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800950a:	2b01      	cmp	r3, #1
 800950c:	d11b      	bne.n	8009546 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	79db      	ldrb	r3, [r3, #7]
 8009512:	2b20      	cmp	r3, #32
 8009514:	dc0f      	bgt.n	8009536 <USBH_ParseDevDesc+0xaa>
 8009516:	2b08      	cmp	r3, #8
 8009518:	db0f      	blt.n	800953a <USBH_ParseDevDesc+0xae>
 800951a:	3b08      	subs	r3, #8
 800951c:	4a32      	ldr	r2, [pc, #200]	@ (80095e8 <USBH_ParseDevDesc+0x15c>)
 800951e:	fa22 f303 	lsr.w	r3, r2, r3
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	2b00      	cmp	r3, #0
 8009528:	bf14      	ite	ne
 800952a:	2301      	movne	r3, #1
 800952c:	2300      	moveq	r3, #0
 800952e:	b2db      	uxtb	r3, r3
 8009530:	2b00      	cmp	r3, #0
 8009532:	d106      	bne.n	8009542 <USBH_ParseDevDesc+0xb6>
 8009534:	e001      	b.n	800953a <USBH_ParseDevDesc+0xae>
 8009536:	2b40      	cmp	r3, #64	@ 0x40
 8009538:	d003      	beq.n	8009542 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2208      	movs	r2, #8
 800953e:	71da      	strb	r2, [r3, #7]
        break;
 8009540:	e000      	b.n	8009544 <USBH_ParseDevDesc+0xb8>
        break;
 8009542:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009544:	e00e      	b.n	8009564 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800954c:	2b02      	cmp	r3, #2
 800954e:	d107      	bne.n	8009560 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	79db      	ldrb	r3, [r3, #7]
 8009554:	2b08      	cmp	r3, #8
 8009556:	d005      	beq.n	8009564 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	2208      	movs	r2, #8
 800955c:	71da      	strb	r2, [r3, #7]
 800955e:	e001      	b.n	8009564 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009560:	2303      	movs	r3, #3
 8009562:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009564:	88fb      	ldrh	r3, [r7, #6]
 8009566:	2b08      	cmp	r3, #8
 8009568:	d936      	bls.n	80095d8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	3308      	adds	r3, #8
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	461a      	mov	r2, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	3309      	adds	r3, #9
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	021b      	lsls	r3, r3, #8
 800957a:	b29b      	uxth	r3, r3
 800957c:	4313      	orrs	r3, r2
 800957e:	b29a      	uxth	r2, r3
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	330a      	adds	r3, #10
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	461a      	mov	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	330b      	adds	r3, #11
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	021b      	lsls	r3, r3, #8
 8009594:	b29b      	uxth	r3, r3
 8009596:	4313      	orrs	r3, r2
 8009598:	b29a      	uxth	r2, r3
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	330c      	adds	r3, #12
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	461a      	mov	r2, r3
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	330d      	adds	r3, #13
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	4313      	orrs	r3, r2
 80095b2:	b29a      	uxth	r2, r3
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	7b9a      	ldrb	r2, [r3, #14]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	7bda      	ldrb	r2, [r3, #15]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80095c8:	68bb      	ldr	r3, [r7, #8]
 80095ca:	7c1a      	ldrb	r2, [r3, #16]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	7c5a      	ldrb	r2, [r3, #17]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80095d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	01000101 	.word	0x01000101

080095ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b08c      	sub	sp, #48	@ 0x30
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	4613      	mov	r3, r2
 80095f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009600:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800961a:	2302      	movs	r3, #2
 800961c:	e0da      	b.n	80097d4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2b09      	cmp	r3, #9
 8009628:	d002      	beq.n	8009630 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800962a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962c:	2209      	movs	r2, #9
 800962e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	785a      	ldrb	r2, [r3, #1]
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	3302      	adds	r3, #2
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	3303      	adds	r3, #3
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	b29b      	uxth	r3, r3
 8009652:	4313      	orrs	r3, r2
 8009654:	b29b      	uxth	r3, r3
 8009656:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800965a:	bf28      	it	cs
 800965c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009660:	b29a      	uxth	r2, r3
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	791a      	ldrb	r2, [r3, #4]
 800966a:	6a3b      	ldr	r3, [r7, #32]
 800966c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	795a      	ldrb	r2, [r3, #5]
 8009672:	6a3b      	ldr	r3, [r7, #32]
 8009674:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	799a      	ldrb	r2, [r3, #6]
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	79da      	ldrb	r2, [r3, #7]
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	7a1a      	ldrb	r2, [r3, #8]
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800968e:	88fb      	ldrh	r3, [r7, #6]
 8009690:	2b09      	cmp	r3, #9
 8009692:	f240 809d 	bls.w	80097d0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009696:	2309      	movs	r3, #9
 8009698:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800969a:	2300      	movs	r3, #0
 800969c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800969e:	e081      	b.n	80097a4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80096a0:	f107 0316 	add.w	r3, r7, #22
 80096a4:	4619      	mov	r1, r3
 80096a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096a8:	f000 f9e7 	bl	8009a7a <USBH_GetNextDesc>
 80096ac:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80096ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b04      	cmp	r3, #4
 80096b4:	d176      	bne.n	80097a4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80096b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	2b09      	cmp	r3, #9
 80096bc:	d002      	beq.n	80096c4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80096be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096c0:	2209      	movs	r2, #9
 80096c2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80096c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096c8:	221a      	movs	r2, #26
 80096ca:	fb02 f303 	mul.w	r3, r2, r3
 80096ce:	3308      	adds	r3, #8
 80096d0:	6a3a      	ldr	r2, [r7, #32]
 80096d2:	4413      	add	r3, r2
 80096d4:	3302      	adds	r3, #2
 80096d6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80096d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096da:	69f8      	ldr	r0, [r7, #28]
 80096dc:	f000 f87e 	bl	80097dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80096ea:	e043      	b.n	8009774 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80096ec:	f107 0316 	add.w	r3, r7, #22
 80096f0:	4619      	mov	r1, r3
 80096f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80096f4:	f000 f9c1 	bl	8009a7a <USBH_GetNextDesc>
 80096f8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80096fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	2b05      	cmp	r3, #5
 8009700:	d138      	bne.n	8009774 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	795b      	ldrb	r3, [r3, #5]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d113      	bne.n	8009732 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800970e:	2b02      	cmp	r3, #2
 8009710:	d003      	beq.n	800971a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	799b      	ldrb	r3, [r3, #6]
 8009716:	2b03      	cmp	r3, #3
 8009718:	d10b      	bne.n	8009732 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	79db      	ldrb	r3, [r3, #7]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10b      	bne.n	800973a <USBH_ParseCfgDesc+0x14e>
 8009722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	2b09      	cmp	r3, #9
 8009728:	d007      	beq.n	800973a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800972a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972c:	2209      	movs	r2, #9
 800972e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009730:	e003      	b.n	800973a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009734:	2207      	movs	r2, #7
 8009736:	701a      	strb	r2, [r3, #0]
 8009738:	e000      	b.n	800973c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800973a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800973c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009740:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009744:	3201      	adds	r2, #1
 8009746:	00d2      	lsls	r2, r2, #3
 8009748:	211a      	movs	r1, #26
 800974a:	fb01 f303 	mul.w	r3, r1, r3
 800974e:	4413      	add	r3, r2
 8009750:	3308      	adds	r3, #8
 8009752:	6a3a      	ldr	r2, [r7, #32]
 8009754:	4413      	add	r3, r2
 8009756:	3304      	adds	r3, #4
 8009758:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800975a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800975c:	69b9      	ldr	r1, [r7, #24]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 f870 	bl	8009844 <USBH_ParseEPDesc>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800976a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800976e:	3301      	adds	r3, #1
 8009770:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	791b      	ldrb	r3, [r3, #4]
 8009778:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800977c:	429a      	cmp	r2, r3
 800977e:	d204      	bcs.n	800978a <USBH_ParseCfgDesc+0x19e>
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	885a      	ldrh	r2, [r3, #2]
 8009784:	8afb      	ldrh	r3, [r7, #22]
 8009786:	429a      	cmp	r2, r3
 8009788:	d8b0      	bhi.n	80096ec <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	791b      	ldrb	r3, [r3, #4]
 800978e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009792:	429a      	cmp	r2, r3
 8009794:	d201      	bcs.n	800979a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009796:	2303      	movs	r3, #3
 8009798:	e01c      	b.n	80097d4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800979a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800979e:	3301      	adds	r3, #1
 80097a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80097a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d805      	bhi.n	80097b8 <USBH_ParseCfgDesc+0x1cc>
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	885a      	ldrh	r2, [r3, #2]
 80097b0:	8afb      	ldrh	r3, [r7, #22]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	f63f af74 	bhi.w	80096a0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	791b      	ldrb	r3, [r3, #4]
 80097bc:	2b02      	cmp	r3, #2
 80097be:	bf28      	it	cs
 80097c0:	2302      	movcs	r3, #2
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d201      	bcs.n	80097d0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80097cc:	2303      	movs	r3, #3
 80097ce:	e001      	b.n	80097d4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80097d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3730      	adds	r7, #48	@ 0x30
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	781a      	ldrb	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	785a      	ldrb	r2, [r3, #1]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	789a      	ldrb	r2, [r3, #2]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	78da      	ldrb	r2, [r3, #3]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	3304      	adds	r3, #4
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b02      	cmp	r3, #2
 800980e:	bf28      	it	cs
 8009810:	2302      	movcs	r3, #2
 8009812:	b2da      	uxtb	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	795a      	ldrb	r2, [r3, #5]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	799a      	ldrb	r2, [r3, #6]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	79da      	ldrb	r2, [r3, #7]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	7a1a      	ldrb	r2, [r3, #8]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	721a      	strb	r2, [r3, #8]
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	781a      	ldrb	r2, [r3, #0]
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	785a      	ldrb	r2, [r3, #1]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	789a      	ldrb	r2, [r3, #2]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	78da      	ldrb	r2, [r3, #3]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	3304      	adds	r3, #4
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	3305      	adds	r3, #5
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	021b      	lsls	r3, r3, #8
 8009884:	b29b      	uxth	r3, r3
 8009886:	4313      	orrs	r3, r2
 8009888:	b29a      	uxth	r2, r3
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	799a      	ldrb	r2, [r3, #6]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	889b      	ldrh	r3, [r3, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d009      	beq.n	80098b2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80098a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098a6:	d804      	bhi.n	80098b2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80098ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098b0:	d901      	bls.n	80098b6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80098b2:	2303      	movs	r3, #3
 80098b4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d136      	bne.n	800992e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	78db      	ldrb	r3, [r3, #3]
 80098c4:	f003 0303 	and.w	r3, r3, #3
 80098c8:	2b02      	cmp	r3, #2
 80098ca:	d108      	bne.n	80098de <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	889b      	ldrh	r3, [r3, #4]
 80098d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098d4:	f240 8097 	bls.w	8009a06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098d8:	2303      	movs	r3, #3
 80098da:	75fb      	strb	r3, [r7, #23]
 80098dc:	e093      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	78db      	ldrb	r3, [r3, #3]
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d107      	bne.n	80098fa <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	889b      	ldrh	r3, [r3, #4]
 80098ee:	2b40      	cmp	r3, #64	@ 0x40
 80098f0:	f240 8089 	bls.w	8009a06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098f4:	2303      	movs	r3, #3
 80098f6:	75fb      	strb	r3, [r7, #23]
 80098f8:	e085      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	78db      	ldrb	r3, [r3, #3]
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	2b01      	cmp	r3, #1
 8009904:	d005      	beq.n	8009912 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	78db      	ldrb	r3, [r3, #3]
 800990a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800990e:	2b03      	cmp	r3, #3
 8009910:	d10a      	bne.n	8009928 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	799b      	ldrb	r3, [r3, #6]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d003      	beq.n	8009922 <USBH_ParseEPDesc+0xde>
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	799b      	ldrb	r3, [r3, #6]
 800991e:	2b10      	cmp	r3, #16
 8009920:	d970      	bls.n	8009a04 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009922:	2303      	movs	r3, #3
 8009924:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009926:	e06d      	b.n	8009a04 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009928:	2303      	movs	r3, #3
 800992a:	75fb      	strb	r3, [r7, #23]
 800992c:	e06b      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009934:	2b01      	cmp	r3, #1
 8009936:	d13c      	bne.n	80099b2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	78db      	ldrb	r3, [r3, #3]
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	2b02      	cmp	r3, #2
 8009942:	d005      	beq.n	8009950 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	78db      	ldrb	r3, [r3, #3]
 8009948:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800994c:	2b00      	cmp	r3, #0
 800994e:	d106      	bne.n	800995e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	889b      	ldrh	r3, [r3, #4]
 8009954:	2b40      	cmp	r3, #64	@ 0x40
 8009956:	d956      	bls.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009958:	2303      	movs	r3, #3
 800995a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800995c:	e053      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	78db      	ldrb	r3, [r3, #3]
 8009962:	f003 0303 	and.w	r3, r3, #3
 8009966:	2b01      	cmp	r3, #1
 8009968:	d10e      	bne.n	8009988 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	799b      	ldrb	r3, [r3, #6]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d007      	beq.n	8009982 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009976:	2b10      	cmp	r3, #16
 8009978:	d803      	bhi.n	8009982 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800997e:	2b40      	cmp	r3, #64	@ 0x40
 8009980:	d941      	bls.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009982:	2303      	movs	r3, #3
 8009984:	75fb      	strb	r3, [r7, #23]
 8009986:	e03e      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	78db      	ldrb	r3, [r3, #3]
 800998c:	f003 0303 	and.w	r3, r3, #3
 8009990:	2b03      	cmp	r3, #3
 8009992:	d10b      	bne.n	80099ac <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	799b      	ldrb	r3, [r3, #6]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d004      	beq.n	80099a6 <USBH_ParseEPDesc+0x162>
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	889b      	ldrh	r3, [r3, #4]
 80099a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099a4:	d32f      	bcc.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099a6:	2303      	movs	r3, #3
 80099a8:	75fb      	strb	r3, [r7, #23]
 80099aa:	e02c      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80099ac:	2303      	movs	r3, #3
 80099ae:	75fb      	strb	r3, [r7, #23]
 80099b0:	e029      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d120      	bne.n	80099fe <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	78db      	ldrb	r3, [r3, #3]
 80099c0:	f003 0303 	and.w	r3, r3, #3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d106      	bne.n	80099d6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	889b      	ldrh	r3, [r3, #4]
 80099cc:	2b08      	cmp	r3, #8
 80099ce:	d01a      	beq.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099d0:	2303      	movs	r3, #3
 80099d2:	75fb      	strb	r3, [r7, #23]
 80099d4:	e017      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	78db      	ldrb	r3, [r3, #3]
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d10a      	bne.n	80099f8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	799b      	ldrb	r3, [r3, #6]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <USBH_ParseEPDesc+0x1ae>
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	889b      	ldrh	r3, [r3, #4]
 80099ee:	2b08      	cmp	r3, #8
 80099f0:	d909      	bls.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80099f2:	2303      	movs	r3, #3
 80099f4:	75fb      	strb	r3, [r7, #23]
 80099f6:	e006      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80099f8:	2303      	movs	r3, #3
 80099fa:	75fb      	strb	r3, [r7, #23]
 80099fc:	e003      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80099fe:	2303      	movs	r3, #3
 8009a00:	75fb      	strb	r3, [r7, #23]
 8009a02:	e000      	b.n	8009a06 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009a04:	bf00      	nop
  }

  return status;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	371c      	adds	r7, #28
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b087      	sub	sp, #28
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	60f8      	str	r0, [r7, #12]
 8009a1c:	60b9      	str	r1, [r7, #8]
 8009a1e:	4613      	mov	r3, r2
 8009a20:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3301      	adds	r3, #1
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b03      	cmp	r3, #3
 8009a2a:	d120      	bne.n	8009a6e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	1e9a      	subs	r2, r3, #2
 8009a32:	88fb      	ldrh	r3, [r7, #6]
 8009a34:	4293      	cmp	r3, r2
 8009a36:	bf28      	it	cs
 8009a38:	4613      	movcs	r3, r2
 8009a3a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3302      	adds	r3, #2
 8009a40:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009a42:	2300      	movs	r3, #0
 8009a44:	82fb      	strh	r3, [r7, #22]
 8009a46:	e00b      	b.n	8009a60 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009a48:	8afb      	ldrh	r3, [r7, #22]
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	781a      	ldrb	r2, [r3, #0]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	3301      	adds	r3, #1
 8009a58:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009a5a:	8afb      	ldrh	r3, [r7, #22]
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	82fb      	strh	r3, [r7, #22]
 8009a60:	8afa      	ldrh	r2, [r7, #22]
 8009a62:	8abb      	ldrh	r3, [r7, #20]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d3ef      	bcc.n	8009a48 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	701a      	strb	r2, [r3, #0]
  }
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b085      	sub	sp, #20
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	881b      	ldrh	r3, [r3, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	7812      	ldrb	r2, [r2, #0]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	b29a      	uxth	r2, r3
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	781b      	ldrb	r3, [r3, #0]
 8009a98:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b086      	sub	sp, #24
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	4613      	mov	r3, r2
 8009aba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009abc:	2301      	movs	r3, #1
 8009abe:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	789b      	ldrb	r3, [r3, #2]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d002      	beq.n	8009ace <USBH_CtlReq+0x20>
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d00f      	beq.n	8009aec <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009acc:	e027      	b.n	8009b1e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	88fa      	ldrh	r2, [r7, #6]
 8009ad8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2201      	movs	r2, #1
 8009ade:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8009aea:	e018      	b.n	8009b1e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f000 f81b 	bl	8009b28 <USBH_HandleControl>
 8009af2:	4603      	mov	r3, r0
 8009af4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <USBH_CtlReq+0x54>
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
 8009afe:	2b03      	cmp	r3, #3
 8009b00:	d106      	bne.n	8009b10 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2201      	movs	r2, #1
 8009b06:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	761a      	strb	r2, [r3, #24]
      break;
 8009b0e:	e005      	b.n	8009b1c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009b10:	7dfb      	ldrb	r3, [r7, #23]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d102      	bne.n	8009b1c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	709a      	strb	r2, [r3, #2]
      break;
 8009b1c:	bf00      	nop
  }
  return status;
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af02      	add	r7, sp, #8
 8009b2e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009b30:	2301      	movs	r3, #1
 8009b32:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009b34:	2300      	movs	r3, #0
 8009b36:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	7e1b      	ldrb	r3, [r3, #24]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	2b0a      	cmp	r3, #10
 8009b40:	f200 8156 	bhi.w	8009df0 <USBH_HandleControl+0x2c8>
 8009b44:	a201      	add	r2, pc, #4	@ (adr r2, 8009b4c <USBH_HandleControl+0x24>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009b79 	.word	0x08009b79
 8009b50:	08009b93 	.word	0x08009b93
 8009b54:	08009bfd 	.word	0x08009bfd
 8009b58:	08009c23 	.word	0x08009c23
 8009b5c:	08009c5b 	.word	0x08009c5b
 8009b60:	08009c85 	.word	0x08009c85
 8009b64:	08009cd7 	.word	0x08009cd7
 8009b68:	08009cf9 	.word	0x08009cf9
 8009b6c:	08009d35 	.word	0x08009d35
 8009b70:	08009d5b 	.word	0x08009d5b
 8009b74:	08009d99 	.word	0x08009d99
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f103 0110 	add.w	r1, r3, #16
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	795b      	ldrb	r3, [r3, #5]
 8009b82:	461a      	mov	r2, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f943 	bl	8009e10 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	761a      	strb	r2, [r3, #24]
      break;
 8009b90:	e139      	b.n	8009e06 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	795b      	ldrb	r3, [r3, #5]
 8009b96:	4619      	mov	r1, r3
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fcc5 	bl	800a528 <USBH_LL_GetURBState>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d11e      	bne.n	8009be6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	7c1b      	ldrb	r3, [r3, #16]
 8009bac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009bb0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	8adb      	ldrh	r3, [r3, #22]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00a      	beq.n	8009bd0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009bba:	7b7b      	ldrb	r3, [r7, #13]
 8009bbc:	2b80      	cmp	r3, #128	@ 0x80
 8009bbe:	d103      	bne.n	8009bc8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2203      	movs	r2, #3
 8009bc4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bc6:	e115      	b.n	8009df4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2205      	movs	r2, #5
 8009bcc:	761a      	strb	r2, [r3, #24]
      break;
 8009bce:	e111      	b.n	8009df4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009bd0:	7b7b      	ldrb	r3, [r7, #13]
 8009bd2:	2b80      	cmp	r3, #128	@ 0x80
 8009bd4:	d103      	bne.n	8009bde <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2209      	movs	r2, #9
 8009bda:	761a      	strb	r2, [r3, #24]
      break;
 8009bdc:	e10a      	b.n	8009df4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2207      	movs	r2, #7
 8009be2:	761a      	strb	r2, [r3, #24]
      break;
 8009be4:	e106      	b.n	8009df4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
 8009be8:	2b04      	cmp	r3, #4
 8009bea:	d003      	beq.n	8009bf4 <USBH_HandleControl+0xcc>
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	f040 8100 	bne.w	8009df4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	220b      	movs	r2, #11
 8009bf8:	761a      	strb	r2, [r3, #24]
      break;
 8009bfa:	e0fb      	b.n	8009df4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6899      	ldr	r1, [r3, #8]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	899a      	ldrh	r2, [r3, #12]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	791b      	ldrb	r3, [r3, #4]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f93a 	bl	8009e8e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2204      	movs	r2, #4
 8009c1e:	761a      	strb	r2, [r3, #24]
      break;
 8009c20:	e0f1      	b.n	8009e06 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	791b      	ldrb	r3, [r3, #4]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 fc7d 	bl	800a528 <USBH_LL_GetURBState>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d102      	bne.n	8009c3e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2209      	movs	r2, #9
 8009c3c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	2b05      	cmp	r3, #5
 8009c42:	d102      	bne.n	8009c4a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009c44:	2303      	movs	r3, #3
 8009c46:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c48:	e0d6      	b.n	8009df8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	2b04      	cmp	r3, #4
 8009c4e:	f040 80d3 	bne.w	8009df8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	220b      	movs	r2, #11
 8009c56:	761a      	strb	r2, [r3, #24]
      break;
 8009c58:	e0ce      	b.n	8009df8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6899      	ldr	r1, [r3, #8]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	899a      	ldrh	r2, [r3, #12]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	795b      	ldrb	r3, [r3, #5]
 8009c66:	2001      	movs	r0, #1
 8009c68:	9000      	str	r0, [sp, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 f8ea 	bl	8009e44 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2206      	movs	r2, #6
 8009c80:	761a      	strb	r2, [r3, #24]
      break;
 8009c82:	e0c0      	b.n	8009e06 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	795b      	ldrb	r3, [r3, #5]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fc4c 	bl	800a528 <USBH_LL_GetURBState>
 8009c90:	4603      	mov	r3, r0
 8009c92:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d103      	bne.n	8009ca2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2207      	movs	r2, #7
 8009c9e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ca0:	e0ac      	b.n	8009dfc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	2b05      	cmp	r3, #5
 8009ca6:	d105      	bne.n	8009cb4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	220c      	movs	r2, #12
 8009cac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb2:	e0a3      	b.n	8009dfc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d103      	bne.n	8009cc2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2205      	movs	r2, #5
 8009cbe:	761a      	strb	r2, [r3, #24]
      break;
 8009cc0:	e09c      	b.n	8009dfc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	2b04      	cmp	r3, #4
 8009cc6:	f040 8099 	bne.w	8009dfc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	220b      	movs	r2, #11
 8009cce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd4:	e092      	b.n	8009dfc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	791b      	ldrb	r3, [r3, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	2100      	movs	r1, #0
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 f8d5 	bl	8009e8e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2208      	movs	r2, #8
 8009cf4:	761a      	strb	r2, [r3, #24]

      break;
 8009cf6:	e086      	b.n	8009e06 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	791b      	ldrb	r3, [r3, #4]
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fc12 	bl	800a528 <USBH_LL_GetURBState>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009d08:	7bbb      	ldrb	r3, [r7, #14]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d105      	bne.n	8009d1a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	220d      	movs	r2, #13
 8009d12:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009d14:	2300      	movs	r3, #0
 8009d16:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d18:	e072      	b.n	8009e00 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009d1a:	7bbb      	ldrb	r3, [r7, #14]
 8009d1c:	2b04      	cmp	r3, #4
 8009d1e:	d103      	bne.n	8009d28 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	220b      	movs	r2, #11
 8009d24:	761a      	strb	r2, [r3, #24]
      break;
 8009d26:	e06b      	b.n	8009e00 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
 8009d2a:	2b05      	cmp	r3, #5
 8009d2c:	d168      	bne.n	8009e00 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	73fb      	strb	r3, [r7, #15]
      break;
 8009d32:	e065      	b.n	8009e00 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	795b      	ldrb	r3, [r3, #5]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	9200      	str	r2, [sp, #0]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2100      	movs	r1, #0
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f87f 	bl	8009e44 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	220a      	movs	r2, #10
 8009d56:	761a      	strb	r2, [r3, #24]
      break;
 8009d58:	e055      	b.n	8009e06 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	795b      	ldrb	r3, [r3, #5]
 8009d5e:	4619      	mov	r1, r3
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fbe1 	bl	800a528 <USBH_LL_GetURBState>
 8009d66:	4603      	mov	r3, r0
 8009d68:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d105      	bne.n	8009d7c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	220d      	movs	r2, #13
 8009d78:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009d7a:	e043      	b.n	8009e04 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d103      	bne.n	8009d8a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2209      	movs	r2, #9
 8009d86:	761a      	strb	r2, [r3, #24]
      break;
 8009d88:	e03c      	b.n	8009e04 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	d139      	bne.n	8009e04 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	220b      	movs	r2, #11
 8009d94:	761a      	strb	r2, [r3, #24]
      break;
 8009d96:	e035      	b.n	8009e04 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	7e5b      	ldrb	r3, [r3, #25]
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	765a      	strb	r2, [r3, #25]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	7e5b      	ldrb	r3, [r3, #25]
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d806      	bhi.n	8009dba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2201      	movs	r2, #1
 8009db0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009db8:	e025      	b.n	8009e06 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009dc0:	2106      	movs	r1, #6
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	795b      	ldrb	r3, [r3, #5]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f90c 	bl	8009ff0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	791b      	ldrb	r3, [r3, #4]
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f906 	bl	8009ff0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009dea:	2302      	movs	r3, #2
 8009dec:	73fb      	strb	r3, [r7, #15]
      break;
 8009dee:	e00a      	b.n	8009e06 <USBH_HandleControl+0x2de>

    default:
      break;
 8009df0:	bf00      	nop
 8009df2:	e008      	b.n	8009e06 <USBH_HandleControl+0x2de>
      break;
 8009df4:	bf00      	nop
 8009df6:	e006      	b.n	8009e06 <USBH_HandleControl+0x2de>
      break;
 8009df8:	bf00      	nop
 8009dfa:	e004      	b.n	8009e06 <USBH_HandleControl+0x2de>
      break;
 8009dfc:	bf00      	nop
 8009dfe:	e002      	b.n	8009e06 <USBH_HandleControl+0x2de>
      break;
 8009e00:	bf00      	nop
 8009e02:	e000      	b.n	8009e06 <USBH_HandleControl+0x2de>
      break;
 8009e04:	bf00      	nop
  }

  return status;
 8009e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af04      	add	r7, sp, #16
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	4613      	mov	r3, r2
 8009e1c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e1e:	79f9      	ldrb	r1, [r7, #7]
 8009e20:	2300      	movs	r3, #0
 8009e22:	9303      	str	r3, [sp, #12]
 8009e24:	2308      	movs	r3, #8
 8009e26:	9302      	str	r3, [sp, #8]
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	2300      	movs	r3, #0
 8009e32:	2200      	movs	r2, #0
 8009e34:	68f8      	ldr	r0, [r7, #12]
 8009e36:	f000 fb46 	bl	800a4c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3710      	adds	r7, #16
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b088      	sub	sp, #32
 8009e48:	af04      	add	r7, sp, #16
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	461a      	mov	r2, r3
 8009e52:	460b      	mov	r3, r1
 8009e54:	80fb      	strh	r3, [r7, #6]
 8009e56:	4613      	mov	r3, r2
 8009e58:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d001      	beq.n	8009e68 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009e64:	2300      	movs	r3, #0
 8009e66:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e68:	7979      	ldrb	r1, [r7, #5]
 8009e6a:	7e3b      	ldrb	r3, [r7, #24]
 8009e6c:	9303      	str	r3, [sp, #12]
 8009e6e:	88fb      	ldrh	r3, [r7, #6]
 8009e70:	9302      	str	r3, [sp, #8]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	2301      	movs	r3, #1
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f000 fb21 	bl	800a4c6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b088      	sub	sp, #32
 8009e92:	af04      	add	r7, sp, #16
 8009e94:	60f8      	str	r0, [r7, #12]
 8009e96:	60b9      	str	r1, [r7, #8]
 8009e98:	4611      	mov	r1, r2
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	80fb      	strh	r3, [r7, #6]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009ea4:	7979      	ldrb	r1, [r7, #5]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	9303      	str	r3, [sp, #12]
 8009eaa:	88fb      	ldrh	r3, [r7, #6]
 8009eac:	9302      	str	r3, [sp, #8]
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	2201      	movs	r2, #1
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f000 fb03 	bl	800a4c6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009ec0:	2300      	movs	r3, #0

}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b088      	sub	sp, #32
 8009ece:	af04      	add	r7, sp, #16
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	460b      	mov	r3, r1
 8009eda:	80fb      	strh	r3, [r7, #6]
 8009edc:	4613      	mov	r3, r2
 8009ede:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009eee:	7979      	ldrb	r1, [r7, #5]
 8009ef0:	7e3b      	ldrb	r3, [r7, #24]
 8009ef2:	9303      	str	r3, [sp, #12]
 8009ef4:	88fb      	ldrh	r3, [r7, #6]
 8009ef6:	9302      	str	r3, [sp, #8]
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	9301      	str	r3, [sp, #4]
 8009efc:	2301      	movs	r3, #1
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	2302      	movs	r3, #2
 8009f02:	2200      	movs	r2, #0
 8009f04:	68f8      	ldr	r0, [r7, #12]
 8009f06:	f000 fade 	bl	800a4c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b088      	sub	sp, #32
 8009f18:	af04      	add	r7, sp, #16
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	4611      	mov	r1, r2
 8009f20:	461a      	mov	r2, r3
 8009f22:	460b      	mov	r3, r1
 8009f24:	80fb      	strh	r3, [r7, #6]
 8009f26:	4613      	mov	r3, r2
 8009f28:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009f2a:	7979      	ldrb	r1, [r7, #5]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9303      	str	r3, [sp, #12]
 8009f30:	88fb      	ldrh	r3, [r7, #6]
 8009f32:	9302      	str	r3, [sp, #8]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	9301      	str	r3, [sp, #4]
 8009f38:	2301      	movs	r3, #1
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	2201      	movs	r2, #1
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 fac0 	bl	800a4c6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af04      	add	r7, sp, #16
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	4608      	mov	r0, r1
 8009f5a:	4611      	mov	r1, r2
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	4603      	mov	r3, r0
 8009f60:	70fb      	strb	r3, [r7, #3]
 8009f62:	460b      	mov	r3, r1
 8009f64:	70bb      	strb	r3, [r7, #2]
 8009f66:	4613      	mov	r3, r2
 8009f68:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009f6a:	7878      	ldrb	r0, [r7, #1]
 8009f6c:	78ba      	ldrb	r2, [r7, #2]
 8009f6e:	78f9      	ldrb	r1, [r7, #3]
 8009f70:	8b3b      	ldrh	r3, [r7, #24]
 8009f72:	9302      	str	r3, [sp, #8]
 8009f74:	7d3b      	ldrb	r3, [r7, #20]
 8009f76:	9301      	str	r3, [sp, #4]
 8009f78:	7c3b      	ldrb	r3, [r7, #16]
 8009f7a:	9300      	str	r3, [sp, #0]
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fa53 	bl	800a42a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3708      	adds	r7, #8
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b082      	sub	sp, #8
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	460b      	mov	r3, r1
 8009f98:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009f9a:	78fb      	ldrb	r3, [r7, #3]
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fa72 	bl	800a488 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009fa4:	2300      	movs	r3, #0
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}

08009fae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009fae:	b580      	push	{r7, lr}
 8009fb0:	b084      	sub	sp, #16
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f836 	bl	800a02c <USBH_GetFreePipe>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009fc4:	89fb      	ldrh	r3, [r7, #14]
 8009fc6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d00a      	beq.n	8009fe4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	89fb      	ldrh	r3, [r7, #14]
 8009fd2:	f003 030f 	and.w	r3, r3, #15
 8009fd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009fda:	6879      	ldr	r1, [r7, #4]
 8009fdc:	33e0      	adds	r3, #224	@ 0xe0
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	440b      	add	r3, r1
 8009fe2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009fe4:	89fb      	ldrh	r3, [r7, #14]
 8009fe6:	b2db      	uxtb	r3, r3
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009ffc:	78fb      	ldrb	r3, [r7, #3]
 8009ffe:	2b0f      	cmp	r3, #15
 800a000:	d80d      	bhi.n	800a01e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a002:	78fb      	ldrb	r3, [r7, #3]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	33e0      	adds	r3, #224	@ 0xe0
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a014:	6879      	ldr	r1, [r7, #4]
 800a016:	33e0      	adds	r3, #224	@ 0xe0
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	440b      	add	r3, r1
 800a01c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a034:	2300      	movs	r3, #0
 800a036:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a038:	2300      	movs	r3, #0
 800a03a:	73fb      	strb	r3, [r7, #15]
 800a03c:	e00f      	b.n	800a05e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	33e0      	adds	r3, #224	@ 0xe0
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	4413      	add	r3, r2
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d102      	bne.n	800a058 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	b29b      	uxth	r3, r3
 800a056:	e007      	b.n	800a068 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	3301      	adds	r3, #1
 800a05c:	73fb      	strb	r3, [r7, #15]
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
 800a060:	2b0f      	cmp	r3, #15
 800a062:	d9ec      	bls.n	800a03e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a064:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a078:	2201      	movs	r2, #1
 800a07a:	490e      	ldr	r1, [pc, #56]	@ (800a0b4 <MX_USB_HOST_Init+0x40>)
 800a07c:	480e      	ldr	r0, [pc, #56]	@ (800a0b8 <MX_USB_HOST_Init+0x44>)
 800a07e:	f7fe fb15 	bl	80086ac <USBH_Init>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a088:	f7f6 fd9c 	bl	8000bc4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a08c:	490b      	ldr	r1, [pc, #44]	@ (800a0bc <MX_USB_HOST_Init+0x48>)
 800a08e:	480a      	ldr	r0, [pc, #40]	@ (800a0b8 <MX_USB_HOST_Init+0x44>)
 800a090:	f7fe fbb9 	bl	8008806 <USBH_RegisterClass>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d001      	beq.n	800a09e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a09a:	f7f6 fd93 	bl	8000bc4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a09e:	4806      	ldr	r0, [pc, #24]	@ (800a0b8 <MX_USB_HOST_Init+0x44>)
 800a0a0:	f7fe fc3d 	bl	800891e <USBH_Start>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a0aa:	f7f6 fd8b 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a0ae:	bf00      	nop
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	0800a0d5 	.word	0x0800a0d5
 800a0b8:	200001f8 	.word	0x200001f8
 800a0bc:	2000000c 	.word	0x2000000c

0800a0c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a0c4:	4802      	ldr	r0, [pc, #8]	@ (800a0d0 <MX_USB_HOST_Process+0x10>)
 800a0c6:	f7fe fc3b 	bl	8008940 <USBH_Process>
}
 800a0ca:	bf00      	nop
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	200001f8 	.word	0x200001f8

0800a0d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	460b      	mov	r3, r1
 800a0de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d819      	bhi.n	800a11c <USBH_UserProcess+0x48>
 800a0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <USBH_UserProcess+0x1c>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a11d 	.word	0x0800a11d
 800a0f4:	0800a10d 	.word	0x0800a10d
 800a0f8:	0800a11d 	.word	0x0800a11d
 800a0fc:	0800a115 	.word	0x0800a115
 800a100:	0800a105 	.word	0x0800a105
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a104:	4b09      	ldr	r3, [pc, #36]	@ (800a12c <USBH_UserProcess+0x58>)
 800a106:	2203      	movs	r2, #3
 800a108:	701a      	strb	r2, [r3, #0]
  break;
 800a10a:	e008      	b.n	800a11e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a10c:	4b07      	ldr	r3, [pc, #28]	@ (800a12c <USBH_UserProcess+0x58>)
 800a10e:	2202      	movs	r2, #2
 800a110:	701a      	strb	r2, [r3, #0]
  break;
 800a112:	e004      	b.n	800a11e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a114:	4b05      	ldr	r3, [pc, #20]	@ (800a12c <USBH_UserProcess+0x58>)
 800a116:	2201      	movs	r2, #1
 800a118:	701a      	strb	r2, [r3, #0]
  break;
 800a11a:	e000      	b.n	800a11e <USBH_UserProcess+0x4a>

  default:
  break;
 800a11c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	200005d0 	.word	0x200005d0

0800a130 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	@ 0x28
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a138:	f107 0314 	add.w	r3, r7, #20
 800a13c:	2200      	movs	r2, #0
 800a13e:	601a      	str	r2, [r3, #0]
 800a140:	605a      	str	r2, [r3, #4]
 800a142:	609a      	str	r2, [r3, #8]
 800a144:	60da      	str	r2, [r3, #12]
 800a146:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a150:	d147      	bne.n	800a1e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a152:	2300      	movs	r3, #0
 800a154:	613b      	str	r3, [r7, #16]
 800a156:	4b25      	ldr	r3, [pc, #148]	@ (800a1ec <HAL_HCD_MspInit+0xbc>)
 800a158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15a:	4a24      	ldr	r2, [pc, #144]	@ (800a1ec <HAL_HCD_MspInit+0xbc>)
 800a15c:	f043 0301 	orr.w	r3, r3, #1
 800a160:	6313      	str	r3, [r2, #48]	@ 0x30
 800a162:	4b22      	ldr	r3, [pc, #136]	@ (800a1ec <HAL_HCD_MspInit+0xbc>)
 800a164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a166:	f003 0301 	and.w	r3, r3, #1
 800a16a:	613b      	str	r3, [r7, #16]
 800a16c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a16e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a174:	2300      	movs	r3, #0
 800a176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a178:	2300      	movs	r3, #0
 800a17a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a17c:	f107 0314 	add.w	r3, r7, #20
 800a180:	4619      	mov	r1, r3
 800a182:	481b      	ldr	r0, [pc, #108]	@ (800a1f0 <HAL_HCD_MspInit+0xc0>)
 800a184:	f7f8 f9cc 	bl	8002520 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a188:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a18c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a18e:	2302      	movs	r3, #2
 800a190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a192:	2300      	movs	r3, #0
 800a194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a196:	2300      	movs	r3, #0
 800a198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a19a:	230a      	movs	r3, #10
 800a19c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a19e:	f107 0314 	add.w	r3, r7, #20
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4812      	ldr	r0, [pc, #72]	@ (800a1f0 <HAL_HCD_MspInit+0xc0>)
 800a1a6:	f7f8 f9bb 	bl	8002520 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a1aa:	4b10      	ldr	r3, [pc, #64]	@ (800a1ec <HAL_HCD_MspInit+0xbc>)
 800a1ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ae:	4a0f      	ldr	r2, [pc, #60]	@ (800a1ec <HAL_HCD_MspInit+0xbc>)
 800a1b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1b4:	6353      	str	r3, [r2, #52]	@ 0x34
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60fb      	str	r3, [r7, #12]
 800a1ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a1ec <HAL_HCD_MspInit+0xbc>)
 800a1bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1be:	4a0b      	ldr	r2, [pc, #44]	@ (800a1ec <HAL_HCD_MspInit+0xbc>)
 800a1c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a1c4:	6453      	str	r3, [r2, #68]	@ 0x44
 800a1c6:	4b09      	ldr	r3, [pc, #36]	@ (800a1ec <HAL_HCD_MspInit+0xbc>)
 800a1c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	2100      	movs	r1, #0
 800a1d6:	2043      	movs	r0, #67	@ 0x43
 800a1d8:	f7f8 f96b 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a1dc:	2043      	movs	r0, #67	@ 0x43
 800a1de:	f7f8 f984 	bl	80024ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a1e2:	bf00      	nop
 800a1e4:	3728      	adds	r7, #40	@ 0x28
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	40023800 	.word	0x40023800
 800a1f0:	40020000 	.word	0x40020000

0800a1f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b082      	sub	sp, #8
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe ff73 	bl	80090ee <USBH_LL_IncTimer>
}
 800a208:	bf00      	nop
 800a20a:	3708      	adds	r7, #8
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b082      	sub	sp, #8
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a21e:	4618      	mov	r0, r3
 800a220:	f7fe ffab 	bl	800917a <USBH_LL_Connect>
}
 800a224:	bf00      	nop
 800a226:	3708      	adds	r7, #8
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b082      	sub	sp, #8
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe ffb4 	bl	80091a8 <USBH_LL_Disconnect>
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	460b      	mov	r3, r1
 800a252:	70fb      	strb	r3, [r7, #3]
 800a254:	4613      	mov	r3, r2
 800a256:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a272:	4618      	mov	r0, r3
 800a274:	f7fe ff65 	bl	8009142 <USBH_LL_PortEnabled>
}
 800a278:	bf00      	nop
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a28e:	4618      	mov	r0, r3
 800a290:	f7fe ff65 	bl	800915e <USBH_LL_PortDisabled>
}
 800a294:	bf00      	nop
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}

0800a29c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d12a      	bne.n	800a304 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a2ae:	4a18      	ldr	r2, [pc, #96]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a15      	ldr	r2, [pc, #84]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2ba:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a2be:	4b14      	ldr	r3, [pc, #80]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a2c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a2c6:	4b12      	ldr	r3, [pc, #72]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2c8:	2208      	movs	r2, #8
 800a2ca:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a2cc:	4b10      	ldr	r3, [pc, #64]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a2d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a2d8:	4b0d      	ldr	r3, [pc, #52]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2da:	2202      	movs	r2, #2
 800a2dc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a2de:	4b0c      	ldr	r3, [pc, #48]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a2e4:	480a      	ldr	r0, [pc, #40]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2e6:	f7f8 fad0 	bl	800288a <HAL_HCD_Init>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a2f0:	f7f6 fc68 	bl	8000bc4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a2f4:	4806      	ldr	r0, [pc, #24]	@ (800a310 <USBH_LL_Init+0x74>)
 800a2f6:	f7f8 ff31 	bl	800315c <HAL_HCD_GetCurrentFrame>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fe fee6 	bl	80090d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	200005d4 	.word	0x200005d4

0800a314 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a31c:	2300      	movs	r3, #0
 800a31e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7f8 fe9e 	bl	800306c <HAL_HCD_Start>
 800a330:	4603      	mov	r3, r0
 800a332:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a334:	7bfb      	ldrb	r3, [r7, #15]
 800a336:	4618      	mov	r0, r3
 800a338:	f000 f95e 	bl	800a5f8 <USBH_Get_USB_Status>
 800a33c:	4603      	mov	r3, r0
 800a33e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a340:	7bbb      	ldrb	r3, [r7, #14]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b084      	sub	sp, #16
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a356:	2300      	movs	r3, #0
 800a358:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a360:	4618      	mov	r0, r3
 800a362:	f7f8 fea6 	bl	80030b2 <HAL_HCD_Stop>
 800a366:	4603      	mov	r3, r0
 800a368:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a36a:	7bfb      	ldrb	r3, [r7, #15]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 f943 	bl	800a5f8 <USBH_Get_USB_Status>
 800a372:	4603      	mov	r3, r0
 800a374:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a376:	7bbb      	ldrb	r3, [r7, #14]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a388:	2301      	movs	r3, #1
 800a38a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a392:	4618      	mov	r0, r3
 800a394:	f7f8 fef0 	bl	8003178 <HAL_HCD_GetCurrentSpeed>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d00c      	beq.n	800a3b8 <USBH_LL_GetSpeed+0x38>
 800a39e:	2b02      	cmp	r3, #2
 800a3a0:	d80d      	bhi.n	800a3be <USBH_LL_GetSpeed+0x3e>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d002      	beq.n	800a3ac <USBH_LL_GetSpeed+0x2c>
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d003      	beq.n	800a3b2 <USBH_LL_GetSpeed+0x32>
 800a3aa:	e008      	b.n	800a3be <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b0:	e008      	b.n	800a3c4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a3b6:	e005      	b.n	800a3c4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a3bc:	e002      	b.n	800a3c4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3c2:	bf00      	nop
  }
  return  speed;
 800a3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7f8 fe81 	bl	80030ec <HAL_HCD_ResetPort>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3ee:	7bfb      	ldrb	r3, [r7, #15]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 f901 	bl	800a5f8 <USBH_Get_USB_Status>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	460b      	mov	r3, r1
 800a40e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a416:	78fa      	ldrb	r2, [r7, #3]
 800a418:	4611      	mov	r1, r2
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7f8 fe89 	bl	8003132 <HAL_HCD_HC_GetXferCount>
 800a420:	4603      	mov	r3, r0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a42a:	b590      	push	{r4, r7, lr}
 800a42c:	b089      	sub	sp, #36	@ 0x24
 800a42e:	af04      	add	r7, sp, #16
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	4608      	mov	r0, r1
 800a434:	4611      	mov	r1, r2
 800a436:	461a      	mov	r2, r3
 800a438:	4603      	mov	r3, r0
 800a43a:	70fb      	strb	r3, [r7, #3]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70bb      	strb	r3, [r7, #2]
 800a440:	4613      	mov	r3, r2
 800a442:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a444:	2300      	movs	r3, #0
 800a446:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a448:	2300      	movs	r3, #0
 800a44a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a452:	787c      	ldrb	r4, [r7, #1]
 800a454:	78ba      	ldrb	r2, [r7, #2]
 800a456:	78f9      	ldrb	r1, [r7, #3]
 800a458:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a45a:	9302      	str	r3, [sp, #8]
 800a45c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a460:	9301      	str	r3, [sp, #4]
 800a462:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	4623      	mov	r3, r4
 800a46a:	f7f8 fa75 	bl	8002958 <HAL_HCD_HC_Init>
 800a46e:	4603      	mov	r3, r0
 800a470:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a472:	7bfb      	ldrb	r3, [r7, #15]
 800a474:	4618      	mov	r0, r3
 800a476:	f000 f8bf 	bl	800a5f8 <USBH_Get_USB_Status>
 800a47a:	4603      	mov	r3, r0
 800a47c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a47e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3714      	adds	r7, #20
 800a484:	46bd      	mov	sp, r7
 800a486:	bd90      	pop	{r4, r7, pc}

0800a488 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	460b      	mov	r3, r1
 800a492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a498:	2300      	movs	r3, #0
 800a49a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a4a2:	78fa      	ldrb	r2, [r7, #3]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7f8 fb0e 	bl	8002ac8 <HAL_HCD_HC_Halt>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a4b0:	7bfb      	ldrb	r3, [r7, #15]
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 f8a0 	bl	800a5f8 <USBH_Get_USB_Status>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a4c6:	b590      	push	{r4, r7, lr}
 800a4c8:	b089      	sub	sp, #36	@ 0x24
 800a4ca:	af04      	add	r7, sp, #16
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	4608      	mov	r0, r1
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	70fb      	strb	r3, [r7, #3]
 800a4d8:	460b      	mov	r3, r1
 800a4da:	70bb      	strb	r3, [r7, #2]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a4ee:	787c      	ldrb	r4, [r7, #1]
 800a4f0:	78ba      	ldrb	r2, [r7, #2]
 800a4f2:	78f9      	ldrb	r1, [r7, #3]
 800a4f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a4f8:	9303      	str	r3, [sp, #12]
 800a4fa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a4fc:	9302      	str	r3, [sp, #8]
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	4623      	mov	r3, r4
 800a50a:	f7f8 fb01 	bl	8002b10 <HAL_HCD_HC_SubmitRequest>
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 f86f 	bl	800a5f8 <USBH_Get_USB_Status>
 800a51a:	4603      	mov	r3, r0
 800a51c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a51e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3714      	adds	r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	bd90      	pop	{r4, r7, pc}

0800a528 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	460b      	mov	r3, r1
 800a532:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a53a:	78fa      	ldrb	r2, [r7, #3]
 800a53c:	4611      	mov	r1, r2
 800a53e:	4618      	mov	r0, r3
 800a540:	f7f8 fde2 	bl	8003108 <HAL_HCD_HC_GetURBState>
 800a544:	4603      	mov	r3, r0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	460b      	mov	r3, r1
 800a558:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a560:	2b01      	cmp	r3, #1
 800a562:	d103      	bne.n	800a56c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	4618      	mov	r0, r3
 800a568:	f000 f872 	bl	800a650 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a56c:	20c8      	movs	r0, #200	@ 0xc8
 800a56e:	f7f7 fea1 	bl	80022b4 <HAL_Delay>
  return USBH_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
 800a588:	4613      	mov	r3, r2
 800a58a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a592:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a594:	78fa      	ldrb	r2, [r7, #3]
 800a596:	68f9      	ldr	r1, [r7, #12]
 800a598:	4613      	mov	r3, r2
 800a59a:	011b      	lsls	r3, r3, #4
 800a59c:	1a9b      	subs	r3, r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	440b      	add	r3, r1
 800a5a2:	3317      	adds	r3, #23
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a5aa:	78fa      	ldrb	r2, [r7, #3]
 800a5ac:	68f9      	ldr	r1, [r7, #12]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	011b      	lsls	r3, r3, #4
 800a5b2:	1a9b      	subs	r3, r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	333c      	adds	r3, #60	@ 0x3c
 800a5ba:	78ba      	ldrb	r2, [r7, #2]
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e009      	b.n	800a5d4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a5c0:	78fa      	ldrb	r2, [r7, #3]
 800a5c2:	68f9      	ldr	r1, [r7, #12]
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	011b      	lsls	r3, r3, #4
 800a5c8:	1a9b      	subs	r3, r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	440b      	add	r3, r1
 800a5ce:	333d      	adds	r3, #61	@ 0x3d
 800a5d0:	78ba      	ldrb	r2, [r7, #2]
 800a5d2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b082      	sub	sp, #8
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7f7 fe62 	bl	80022b4 <HAL_Delay>
}
 800a5f0:	bf00      	nop
 800a5f2:	3708      	adds	r7, #8
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	4603      	mov	r3, r0
 800a600:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a602:	2300      	movs	r3, #0
 800a604:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a606:	79fb      	ldrb	r3, [r7, #7]
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d817      	bhi.n	800a63c <USBH_Get_USB_Status+0x44>
 800a60c:	a201      	add	r2, pc, #4	@ (adr r2, 800a614 <USBH_Get_USB_Status+0x1c>)
 800a60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a612:	bf00      	nop
 800a614:	0800a625 	.word	0x0800a625
 800a618:	0800a62b 	.word	0x0800a62b
 800a61c:	0800a631 	.word	0x0800a631
 800a620:	0800a637 	.word	0x0800a637
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a624:	2300      	movs	r3, #0
 800a626:	73fb      	strb	r3, [r7, #15]
    break;
 800a628:	e00b      	b.n	800a642 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a62a:	2302      	movs	r3, #2
 800a62c:	73fb      	strb	r3, [r7, #15]
    break;
 800a62e:	e008      	b.n	800a642 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a630:	2301      	movs	r3, #1
 800a632:	73fb      	strb	r3, [r7, #15]
    break;
 800a634:	e005      	b.n	800a642 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a636:	2302      	movs	r3, #2
 800a638:	73fb      	strb	r3, [r7, #15]
    break;
 800a63a:	e002      	b.n	800a642 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a63c:	2302      	movs	r3, #2
 800a63e:	73fb      	strb	r3, [r7, #15]
    break;
 800a640:	bf00      	nop
  }
  return usb_status;
 800a642:	7bfb      	ldrb	r3, [r7, #15]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3714      	adds	r7, #20
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d102      	bne.n	800a66a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a664:	2300      	movs	r3, #0
 800a666:	73fb      	strb	r3, [r7, #15]
 800a668:	e001      	b.n	800a66e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a66a:	2301      	movs	r3, #1
 800a66c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	461a      	mov	r2, r3
 800a672:	2101      	movs	r1, #1
 800a674:	4803      	ldr	r0, [pc, #12]	@ (800a684 <MX_DriverVbusFS+0x34>)
 800a676:	f7f8 f8ef 	bl	8002858 <HAL_GPIO_WritePin>
}
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	40020800 	.word	0x40020800

0800a688 <malloc>:
 800a688:	4b02      	ldr	r3, [pc, #8]	@ (800a694 <malloc+0xc>)
 800a68a:	4601      	mov	r1, r0
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	f000 b82d 	b.w	800a6ec <_malloc_r>
 800a692:	bf00      	nop
 800a694:	20000038 	.word	0x20000038

0800a698 <free>:
 800a698:	4b02      	ldr	r3, [pc, #8]	@ (800a6a4 <free+0xc>)
 800a69a:	4601      	mov	r1, r0
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	f000 bc09 	b.w	800aeb4 <_free_r>
 800a6a2:	bf00      	nop
 800a6a4:	20000038 	.word	0x20000038

0800a6a8 <sbrk_aligned>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a6e8 <sbrk_aligned+0x40>)
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	6831      	ldr	r1, [r6, #0]
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	b911      	cbnz	r1, 800a6ba <sbrk_aligned+0x12>
 800a6b4:	f000 fba0 	bl	800adf8 <_sbrk_r>
 800a6b8:	6030      	str	r0, [r6, #0]
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f000 fb9b 	bl	800adf8 <_sbrk_r>
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	d103      	bne.n	800a6ce <sbrk_aligned+0x26>
 800a6c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	bd70      	pop	{r4, r5, r6, pc}
 800a6ce:	1cc4      	adds	r4, r0, #3
 800a6d0:	f024 0403 	bic.w	r4, r4, #3
 800a6d4:	42a0      	cmp	r0, r4
 800a6d6:	d0f8      	beq.n	800a6ca <sbrk_aligned+0x22>
 800a6d8:	1a21      	subs	r1, r4, r0
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f000 fb8c 	bl	800adf8 <_sbrk_r>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d1f2      	bne.n	800a6ca <sbrk_aligned+0x22>
 800a6e4:	e7ef      	b.n	800a6c6 <sbrk_aligned+0x1e>
 800a6e6:	bf00      	nop
 800a6e8:	200009b4 	.word	0x200009b4

0800a6ec <_malloc_r>:
 800a6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f0:	1ccd      	adds	r5, r1, #3
 800a6f2:	f025 0503 	bic.w	r5, r5, #3
 800a6f6:	3508      	adds	r5, #8
 800a6f8:	2d0c      	cmp	r5, #12
 800a6fa:	bf38      	it	cc
 800a6fc:	250c      	movcc	r5, #12
 800a6fe:	2d00      	cmp	r5, #0
 800a700:	4606      	mov	r6, r0
 800a702:	db01      	blt.n	800a708 <_malloc_r+0x1c>
 800a704:	42a9      	cmp	r1, r5
 800a706:	d904      	bls.n	800a712 <_malloc_r+0x26>
 800a708:	230c      	movs	r3, #12
 800a70a:	6033      	str	r3, [r6, #0]
 800a70c:	2000      	movs	r0, #0
 800a70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7e8 <_malloc_r+0xfc>
 800a716:	f000 f869 	bl	800a7ec <__malloc_lock>
 800a71a:	f8d8 3000 	ldr.w	r3, [r8]
 800a71e:	461c      	mov	r4, r3
 800a720:	bb44      	cbnz	r4, 800a774 <_malloc_r+0x88>
 800a722:	4629      	mov	r1, r5
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff ffbf 	bl	800a6a8 <sbrk_aligned>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	4604      	mov	r4, r0
 800a72e:	d158      	bne.n	800a7e2 <_malloc_r+0xf6>
 800a730:	f8d8 4000 	ldr.w	r4, [r8]
 800a734:	4627      	mov	r7, r4
 800a736:	2f00      	cmp	r7, #0
 800a738:	d143      	bne.n	800a7c2 <_malloc_r+0xd6>
 800a73a:	2c00      	cmp	r4, #0
 800a73c:	d04b      	beq.n	800a7d6 <_malloc_r+0xea>
 800a73e:	6823      	ldr	r3, [r4, #0]
 800a740:	4639      	mov	r1, r7
 800a742:	4630      	mov	r0, r6
 800a744:	eb04 0903 	add.w	r9, r4, r3
 800a748:	f000 fb56 	bl	800adf8 <_sbrk_r>
 800a74c:	4581      	cmp	r9, r0
 800a74e:	d142      	bne.n	800a7d6 <_malloc_r+0xea>
 800a750:	6821      	ldr	r1, [r4, #0]
 800a752:	1a6d      	subs	r5, r5, r1
 800a754:	4629      	mov	r1, r5
 800a756:	4630      	mov	r0, r6
 800a758:	f7ff ffa6 	bl	800a6a8 <sbrk_aligned>
 800a75c:	3001      	adds	r0, #1
 800a75e:	d03a      	beq.n	800a7d6 <_malloc_r+0xea>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	442b      	add	r3, r5
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	f8d8 3000 	ldr.w	r3, [r8]
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	bb62      	cbnz	r2, 800a7c8 <_malloc_r+0xdc>
 800a76e:	f8c8 7000 	str.w	r7, [r8]
 800a772:	e00f      	b.n	800a794 <_malloc_r+0xa8>
 800a774:	6822      	ldr	r2, [r4, #0]
 800a776:	1b52      	subs	r2, r2, r5
 800a778:	d420      	bmi.n	800a7bc <_malloc_r+0xd0>
 800a77a:	2a0b      	cmp	r2, #11
 800a77c:	d917      	bls.n	800a7ae <_malloc_r+0xc2>
 800a77e:	1961      	adds	r1, r4, r5
 800a780:	42a3      	cmp	r3, r4
 800a782:	6025      	str	r5, [r4, #0]
 800a784:	bf18      	it	ne
 800a786:	6059      	strne	r1, [r3, #4]
 800a788:	6863      	ldr	r3, [r4, #4]
 800a78a:	bf08      	it	eq
 800a78c:	f8c8 1000 	streq.w	r1, [r8]
 800a790:	5162      	str	r2, [r4, r5]
 800a792:	604b      	str	r3, [r1, #4]
 800a794:	4630      	mov	r0, r6
 800a796:	f000 f82f 	bl	800a7f8 <__malloc_unlock>
 800a79a:	f104 000b 	add.w	r0, r4, #11
 800a79e:	1d23      	adds	r3, r4, #4
 800a7a0:	f020 0007 	bic.w	r0, r0, #7
 800a7a4:	1ac2      	subs	r2, r0, r3
 800a7a6:	bf1c      	itt	ne
 800a7a8:	1a1b      	subne	r3, r3, r0
 800a7aa:	50a3      	strne	r3, [r4, r2]
 800a7ac:	e7af      	b.n	800a70e <_malloc_r+0x22>
 800a7ae:	6862      	ldr	r2, [r4, #4]
 800a7b0:	42a3      	cmp	r3, r4
 800a7b2:	bf0c      	ite	eq
 800a7b4:	f8c8 2000 	streq.w	r2, [r8]
 800a7b8:	605a      	strne	r2, [r3, #4]
 800a7ba:	e7eb      	b.n	800a794 <_malloc_r+0xa8>
 800a7bc:	4623      	mov	r3, r4
 800a7be:	6864      	ldr	r4, [r4, #4]
 800a7c0:	e7ae      	b.n	800a720 <_malloc_r+0x34>
 800a7c2:	463c      	mov	r4, r7
 800a7c4:	687f      	ldr	r7, [r7, #4]
 800a7c6:	e7b6      	b.n	800a736 <_malloc_r+0x4a>
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	42a3      	cmp	r3, r4
 800a7ce:	d1fb      	bne.n	800a7c8 <_malloc_r+0xdc>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	6053      	str	r3, [r2, #4]
 800a7d4:	e7de      	b.n	800a794 <_malloc_r+0xa8>
 800a7d6:	230c      	movs	r3, #12
 800a7d8:	6033      	str	r3, [r6, #0]
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f000 f80c 	bl	800a7f8 <__malloc_unlock>
 800a7e0:	e794      	b.n	800a70c <_malloc_r+0x20>
 800a7e2:	6005      	str	r5, [r0, #0]
 800a7e4:	e7d6      	b.n	800a794 <_malloc_r+0xa8>
 800a7e6:	bf00      	nop
 800a7e8:	200009b8 	.word	0x200009b8

0800a7ec <__malloc_lock>:
 800a7ec:	4801      	ldr	r0, [pc, #4]	@ (800a7f4 <__malloc_lock+0x8>)
 800a7ee:	f000 bb50 	b.w	800ae92 <__retarget_lock_acquire_recursive>
 800a7f2:	bf00      	nop
 800a7f4:	20000afc 	.word	0x20000afc

0800a7f8 <__malloc_unlock>:
 800a7f8:	4801      	ldr	r0, [pc, #4]	@ (800a800 <__malloc_unlock+0x8>)
 800a7fa:	f000 bb4b 	b.w	800ae94 <__retarget_lock_release_recursive>
 800a7fe:	bf00      	nop
 800a800:	20000afc 	.word	0x20000afc

0800a804 <std>:
 800a804:	2300      	movs	r3, #0
 800a806:	b510      	push	{r4, lr}
 800a808:	4604      	mov	r4, r0
 800a80a:	e9c0 3300 	strd	r3, r3, [r0]
 800a80e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a812:	6083      	str	r3, [r0, #8]
 800a814:	8181      	strh	r1, [r0, #12]
 800a816:	6643      	str	r3, [r0, #100]	@ 0x64
 800a818:	81c2      	strh	r2, [r0, #14]
 800a81a:	6183      	str	r3, [r0, #24]
 800a81c:	4619      	mov	r1, r3
 800a81e:	2208      	movs	r2, #8
 800a820:	305c      	adds	r0, #92	@ 0x5c
 800a822:	f000 faad 	bl	800ad80 <memset>
 800a826:	4b0d      	ldr	r3, [pc, #52]	@ (800a85c <std+0x58>)
 800a828:	6263      	str	r3, [r4, #36]	@ 0x24
 800a82a:	4b0d      	ldr	r3, [pc, #52]	@ (800a860 <std+0x5c>)
 800a82c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a82e:	4b0d      	ldr	r3, [pc, #52]	@ (800a864 <std+0x60>)
 800a830:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a832:	4b0d      	ldr	r3, [pc, #52]	@ (800a868 <std+0x64>)
 800a834:	6323      	str	r3, [r4, #48]	@ 0x30
 800a836:	4b0d      	ldr	r3, [pc, #52]	@ (800a86c <std+0x68>)
 800a838:	6224      	str	r4, [r4, #32]
 800a83a:	429c      	cmp	r4, r3
 800a83c:	d006      	beq.n	800a84c <std+0x48>
 800a83e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a842:	4294      	cmp	r4, r2
 800a844:	d002      	beq.n	800a84c <std+0x48>
 800a846:	33d0      	adds	r3, #208	@ 0xd0
 800a848:	429c      	cmp	r4, r3
 800a84a:	d105      	bne.n	800a858 <std+0x54>
 800a84c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a854:	f000 bb1c 	b.w	800ae90 <__retarget_lock_init_recursive>
 800a858:	bd10      	pop	{r4, pc}
 800a85a:	bf00      	nop
 800a85c:	0800abd1 	.word	0x0800abd1
 800a860:	0800abf3 	.word	0x0800abf3
 800a864:	0800ac2b 	.word	0x0800ac2b
 800a868:	0800ac4f 	.word	0x0800ac4f
 800a86c:	200009bc 	.word	0x200009bc

0800a870 <stdio_exit_handler>:
 800a870:	4a02      	ldr	r2, [pc, #8]	@ (800a87c <stdio_exit_handler+0xc>)
 800a872:	4903      	ldr	r1, [pc, #12]	@ (800a880 <stdio_exit_handler+0x10>)
 800a874:	4803      	ldr	r0, [pc, #12]	@ (800a884 <stdio_exit_handler+0x14>)
 800a876:	f000 b869 	b.w	800a94c <_fwalk_sglue>
 800a87a:	bf00      	nop
 800a87c:	2000002c 	.word	0x2000002c
 800a880:	0800b5ed 	.word	0x0800b5ed
 800a884:	2000003c 	.word	0x2000003c

0800a888 <cleanup_stdio>:
 800a888:	6841      	ldr	r1, [r0, #4]
 800a88a:	4b0c      	ldr	r3, [pc, #48]	@ (800a8bc <cleanup_stdio+0x34>)
 800a88c:	4299      	cmp	r1, r3
 800a88e:	b510      	push	{r4, lr}
 800a890:	4604      	mov	r4, r0
 800a892:	d001      	beq.n	800a898 <cleanup_stdio+0x10>
 800a894:	f000 feaa 	bl	800b5ec <_fflush_r>
 800a898:	68a1      	ldr	r1, [r4, #8]
 800a89a:	4b09      	ldr	r3, [pc, #36]	@ (800a8c0 <cleanup_stdio+0x38>)
 800a89c:	4299      	cmp	r1, r3
 800a89e:	d002      	beq.n	800a8a6 <cleanup_stdio+0x1e>
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f000 fea3 	bl	800b5ec <_fflush_r>
 800a8a6:	68e1      	ldr	r1, [r4, #12]
 800a8a8:	4b06      	ldr	r3, [pc, #24]	@ (800a8c4 <cleanup_stdio+0x3c>)
 800a8aa:	4299      	cmp	r1, r3
 800a8ac:	d004      	beq.n	800a8b8 <cleanup_stdio+0x30>
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8b4:	f000 be9a 	b.w	800b5ec <_fflush_r>
 800a8b8:	bd10      	pop	{r4, pc}
 800a8ba:	bf00      	nop
 800a8bc:	200009bc 	.word	0x200009bc
 800a8c0:	20000a24 	.word	0x20000a24
 800a8c4:	20000a8c 	.word	0x20000a8c

0800a8c8 <global_stdio_init.part.0>:
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a8f8 <global_stdio_init.part.0+0x30>)
 800a8cc:	4c0b      	ldr	r4, [pc, #44]	@ (800a8fc <global_stdio_init.part.0+0x34>)
 800a8ce:	4a0c      	ldr	r2, [pc, #48]	@ (800a900 <global_stdio_init.part.0+0x38>)
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2104      	movs	r1, #4
 800a8d8:	f7ff ff94 	bl	800a804 <std>
 800a8dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	2109      	movs	r1, #9
 800a8e4:	f7ff ff8e 	bl	800a804 <std>
 800a8e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8f2:	2112      	movs	r1, #18
 800a8f4:	f7ff bf86 	b.w	800a804 <std>
 800a8f8:	20000af4 	.word	0x20000af4
 800a8fc:	200009bc 	.word	0x200009bc
 800a900:	0800a871 	.word	0x0800a871

0800a904 <__sfp_lock_acquire>:
 800a904:	4801      	ldr	r0, [pc, #4]	@ (800a90c <__sfp_lock_acquire+0x8>)
 800a906:	f000 bac4 	b.w	800ae92 <__retarget_lock_acquire_recursive>
 800a90a:	bf00      	nop
 800a90c:	20000afd 	.word	0x20000afd

0800a910 <__sfp_lock_release>:
 800a910:	4801      	ldr	r0, [pc, #4]	@ (800a918 <__sfp_lock_release+0x8>)
 800a912:	f000 babf 	b.w	800ae94 <__retarget_lock_release_recursive>
 800a916:	bf00      	nop
 800a918:	20000afd 	.word	0x20000afd

0800a91c <__sinit>:
 800a91c:	b510      	push	{r4, lr}
 800a91e:	4604      	mov	r4, r0
 800a920:	f7ff fff0 	bl	800a904 <__sfp_lock_acquire>
 800a924:	6a23      	ldr	r3, [r4, #32]
 800a926:	b11b      	cbz	r3, 800a930 <__sinit+0x14>
 800a928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a92c:	f7ff bff0 	b.w	800a910 <__sfp_lock_release>
 800a930:	4b04      	ldr	r3, [pc, #16]	@ (800a944 <__sinit+0x28>)
 800a932:	6223      	str	r3, [r4, #32]
 800a934:	4b04      	ldr	r3, [pc, #16]	@ (800a948 <__sinit+0x2c>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1f5      	bne.n	800a928 <__sinit+0xc>
 800a93c:	f7ff ffc4 	bl	800a8c8 <global_stdio_init.part.0>
 800a940:	e7f2      	b.n	800a928 <__sinit+0xc>
 800a942:	bf00      	nop
 800a944:	0800a889 	.word	0x0800a889
 800a948:	20000af4 	.word	0x20000af4

0800a94c <_fwalk_sglue>:
 800a94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a950:	4607      	mov	r7, r0
 800a952:	4688      	mov	r8, r1
 800a954:	4614      	mov	r4, r2
 800a956:	2600      	movs	r6, #0
 800a958:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a95c:	f1b9 0901 	subs.w	r9, r9, #1
 800a960:	d505      	bpl.n	800a96e <_fwalk_sglue+0x22>
 800a962:	6824      	ldr	r4, [r4, #0]
 800a964:	2c00      	cmp	r4, #0
 800a966:	d1f7      	bne.n	800a958 <_fwalk_sglue+0xc>
 800a968:	4630      	mov	r0, r6
 800a96a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a96e:	89ab      	ldrh	r3, [r5, #12]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d907      	bls.n	800a984 <_fwalk_sglue+0x38>
 800a974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a978:	3301      	adds	r3, #1
 800a97a:	d003      	beq.n	800a984 <_fwalk_sglue+0x38>
 800a97c:	4629      	mov	r1, r5
 800a97e:	4638      	mov	r0, r7
 800a980:	47c0      	blx	r8
 800a982:	4306      	orrs	r6, r0
 800a984:	3568      	adds	r5, #104	@ 0x68
 800a986:	e7e9      	b.n	800a95c <_fwalk_sglue+0x10>

0800a988 <iprintf>:
 800a988:	b40f      	push	{r0, r1, r2, r3}
 800a98a:	b507      	push	{r0, r1, r2, lr}
 800a98c:	4906      	ldr	r1, [pc, #24]	@ (800a9a8 <iprintf+0x20>)
 800a98e:	ab04      	add	r3, sp, #16
 800a990:	6808      	ldr	r0, [r1, #0]
 800a992:	f853 2b04 	ldr.w	r2, [r3], #4
 800a996:	6881      	ldr	r1, [r0, #8]
 800a998:	9301      	str	r3, [sp, #4]
 800a99a:	f000 faff 	bl	800af9c <_vfiprintf_r>
 800a99e:	b003      	add	sp, #12
 800a9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9a4:	b004      	add	sp, #16
 800a9a6:	4770      	bx	lr
 800a9a8:	20000038 	.word	0x20000038

0800a9ac <_puts_r>:
 800a9ac:	6a03      	ldr	r3, [r0, #32]
 800a9ae:	b570      	push	{r4, r5, r6, lr}
 800a9b0:	6884      	ldr	r4, [r0, #8]
 800a9b2:	4605      	mov	r5, r0
 800a9b4:	460e      	mov	r6, r1
 800a9b6:	b90b      	cbnz	r3, 800a9bc <_puts_r+0x10>
 800a9b8:	f7ff ffb0 	bl	800a91c <__sinit>
 800a9bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9be:	07db      	lsls	r3, r3, #31
 800a9c0:	d405      	bmi.n	800a9ce <_puts_r+0x22>
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	0598      	lsls	r0, r3, #22
 800a9c6:	d402      	bmi.n	800a9ce <_puts_r+0x22>
 800a9c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ca:	f000 fa62 	bl	800ae92 <__retarget_lock_acquire_recursive>
 800a9ce:	89a3      	ldrh	r3, [r4, #12]
 800a9d0:	0719      	lsls	r1, r3, #28
 800a9d2:	d502      	bpl.n	800a9da <_puts_r+0x2e>
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d135      	bne.n	800aa46 <_puts_r+0x9a>
 800a9da:	4621      	mov	r1, r4
 800a9dc:	4628      	mov	r0, r5
 800a9de:	f000 f979 	bl	800acd4 <__swsetup_r>
 800a9e2:	b380      	cbz	r0, 800aa46 <_puts_r+0x9a>
 800a9e4:	f04f 35ff 	mov.w	r5, #4294967295
 800a9e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ea:	07da      	lsls	r2, r3, #31
 800a9ec:	d405      	bmi.n	800a9fa <_puts_r+0x4e>
 800a9ee:	89a3      	ldrh	r3, [r4, #12]
 800a9f0:	059b      	lsls	r3, r3, #22
 800a9f2:	d402      	bmi.n	800a9fa <_puts_r+0x4e>
 800a9f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9f6:	f000 fa4d 	bl	800ae94 <__retarget_lock_release_recursive>
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	bd70      	pop	{r4, r5, r6, pc}
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	da04      	bge.n	800aa0c <_puts_r+0x60>
 800aa02:	69a2      	ldr	r2, [r4, #24]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	dc17      	bgt.n	800aa38 <_puts_r+0x8c>
 800aa08:	290a      	cmp	r1, #10
 800aa0a:	d015      	beq.n	800aa38 <_puts_r+0x8c>
 800aa0c:	6823      	ldr	r3, [r4, #0]
 800aa0e:	1c5a      	adds	r2, r3, #1
 800aa10:	6022      	str	r2, [r4, #0]
 800aa12:	7019      	strb	r1, [r3, #0]
 800aa14:	68a3      	ldr	r3, [r4, #8]
 800aa16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	60a3      	str	r3, [r4, #8]
 800aa1e:	2900      	cmp	r1, #0
 800aa20:	d1ed      	bne.n	800a9fe <_puts_r+0x52>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da11      	bge.n	800aa4a <_puts_r+0x9e>
 800aa26:	4622      	mov	r2, r4
 800aa28:	210a      	movs	r1, #10
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	f000 f913 	bl	800ac56 <__swbuf_r>
 800aa30:	3001      	adds	r0, #1
 800aa32:	d0d7      	beq.n	800a9e4 <_puts_r+0x38>
 800aa34:	250a      	movs	r5, #10
 800aa36:	e7d7      	b.n	800a9e8 <_puts_r+0x3c>
 800aa38:	4622      	mov	r2, r4
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	f000 f90b 	bl	800ac56 <__swbuf_r>
 800aa40:	3001      	adds	r0, #1
 800aa42:	d1e7      	bne.n	800aa14 <_puts_r+0x68>
 800aa44:	e7ce      	b.n	800a9e4 <_puts_r+0x38>
 800aa46:	3e01      	subs	r6, #1
 800aa48:	e7e4      	b.n	800aa14 <_puts_r+0x68>
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	1c5a      	adds	r2, r3, #1
 800aa4e:	6022      	str	r2, [r4, #0]
 800aa50:	220a      	movs	r2, #10
 800aa52:	701a      	strb	r2, [r3, #0]
 800aa54:	e7ee      	b.n	800aa34 <_puts_r+0x88>
	...

0800aa58 <puts>:
 800aa58:	4b02      	ldr	r3, [pc, #8]	@ (800aa64 <puts+0xc>)
 800aa5a:	4601      	mov	r1, r0
 800aa5c:	6818      	ldr	r0, [r3, #0]
 800aa5e:	f7ff bfa5 	b.w	800a9ac <_puts_r>
 800aa62:	bf00      	nop
 800aa64:	20000038 	.word	0x20000038

0800aa68 <setvbuf>:
 800aa68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa6c:	461d      	mov	r5, r3
 800aa6e:	4b57      	ldr	r3, [pc, #348]	@ (800abcc <setvbuf+0x164>)
 800aa70:	681f      	ldr	r7, [r3, #0]
 800aa72:	4604      	mov	r4, r0
 800aa74:	460e      	mov	r6, r1
 800aa76:	4690      	mov	r8, r2
 800aa78:	b127      	cbz	r7, 800aa84 <setvbuf+0x1c>
 800aa7a:	6a3b      	ldr	r3, [r7, #32]
 800aa7c:	b913      	cbnz	r3, 800aa84 <setvbuf+0x1c>
 800aa7e:	4638      	mov	r0, r7
 800aa80:	f7ff ff4c 	bl	800a91c <__sinit>
 800aa84:	f1b8 0f02 	cmp.w	r8, #2
 800aa88:	d006      	beq.n	800aa98 <setvbuf+0x30>
 800aa8a:	f1b8 0f01 	cmp.w	r8, #1
 800aa8e:	f200 809a 	bhi.w	800abc6 <setvbuf+0x15e>
 800aa92:	2d00      	cmp	r5, #0
 800aa94:	f2c0 8097 	blt.w	800abc6 <setvbuf+0x15e>
 800aa98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa9a:	07d9      	lsls	r1, r3, #31
 800aa9c:	d405      	bmi.n	800aaaa <setvbuf+0x42>
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	059a      	lsls	r2, r3, #22
 800aaa2:	d402      	bmi.n	800aaaa <setvbuf+0x42>
 800aaa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaa6:	f000 f9f4 	bl	800ae92 <__retarget_lock_acquire_recursive>
 800aaaa:	4621      	mov	r1, r4
 800aaac:	4638      	mov	r0, r7
 800aaae:	f000 fd9d 	bl	800b5ec <_fflush_r>
 800aab2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aab4:	b141      	cbz	r1, 800aac8 <setvbuf+0x60>
 800aab6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aaba:	4299      	cmp	r1, r3
 800aabc:	d002      	beq.n	800aac4 <setvbuf+0x5c>
 800aabe:	4638      	mov	r0, r7
 800aac0:	f000 f9f8 	bl	800aeb4 <_free_r>
 800aac4:	2300      	movs	r3, #0
 800aac6:	6363      	str	r3, [r4, #52]	@ 0x34
 800aac8:	2300      	movs	r3, #0
 800aaca:	61a3      	str	r3, [r4, #24]
 800aacc:	6063      	str	r3, [r4, #4]
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	061b      	lsls	r3, r3, #24
 800aad2:	d503      	bpl.n	800aadc <setvbuf+0x74>
 800aad4:	6921      	ldr	r1, [r4, #16]
 800aad6:	4638      	mov	r0, r7
 800aad8:	f000 f9ec 	bl	800aeb4 <_free_r>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800aae2:	f023 0303 	bic.w	r3, r3, #3
 800aae6:	f1b8 0f02 	cmp.w	r8, #2
 800aaea:	81a3      	strh	r3, [r4, #12]
 800aaec:	d061      	beq.n	800abb2 <setvbuf+0x14a>
 800aaee:	ab01      	add	r3, sp, #4
 800aaf0:	466a      	mov	r2, sp
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	f000 fda1 	bl	800b63c <__swhatbuf_r>
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	4318      	orrs	r0, r3
 800aafe:	81a0      	strh	r0, [r4, #12]
 800ab00:	bb2d      	cbnz	r5, 800ab4e <setvbuf+0xe6>
 800ab02:	9d00      	ldr	r5, [sp, #0]
 800ab04:	4628      	mov	r0, r5
 800ab06:	f7ff fdbf 	bl	800a688 <malloc>
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d152      	bne.n	800abb6 <setvbuf+0x14e>
 800ab10:	f8dd 9000 	ldr.w	r9, [sp]
 800ab14:	45a9      	cmp	r9, r5
 800ab16:	d140      	bne.n	800ab9a <setvbuf+0x132>
 800ab18:	f04f 35ff 	mov.w	r5, #4294967295
 800ab1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab20:	f043 0202 	orr.w	r2, r3, #2
 800ab24:	81a2      	strh	r2, [r4, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	60a2      	str	r2, [r4, #8]
 800ab2a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800ab2e:	6022      	str	r2, [r4, #0]
 800ab30:	6122      	str	r2, [r4, #16]
 800ab32:	2201      	movs	r2, #1
 800ab34:	6162      	str	r2, [r4, #20]
 800ab36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab38:	07d6      	lsls	r6, r2, #31
 800ab3a:	d404      	bmi.n	800ab46 <setvbuf+0xde>
 800ab3c:	0598      	lsls	r0, r3, #22
 800ab3e:	d402      	bmi.n	800ab46 <setvbuf+0xde>
 800ab40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab42:	f000 f9a7 	bl	800ae94 <__retarget_lock_release_recursive>
 800ab46:	4628      	mov	r0, r5
 800ab48:	b003      	add	sp, #12
 800ab4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab4e:	2e00      	cmp	r6, #0
 800ab50:	d0d8      	beq.n	800ab04 <setvbuf+0x9c>
 800ab52:	6a3b      	ldr	r3, [r7, #32]
 800ab54:	b913      	cbnz	r3, 800ab5c <setvbuf+0xf4>
 800ab56:	4638      	mov	r0, r7
 800ab58:	f7ff fee0 	bl	800a91c <__sinit>
 800ab5c:	f1b8 0f01 	cmp.w	r8, #1
 800ab60:	bf08      	it	eq
 800ab62:	89a3      	ldrheq	r3, [r4, #12]
 800ab64:	6026      	str	r6, [r4, #0]
 800ab66:	bf04      	itt	eq
 800ab68:	f043 0301 	orreq.w	r3, r3, #1
 800ab6c:	81a3      	strheq	r3, [r4, #12]
 800ab6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab72:	f013 0208 	ands.w	r2, r3, #8
 800ab76:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ab7a:	d01e      	beq.n	800abba <setvbuf+0x152>
 800ab7c:	07d9      	lsls	r1, r3, #31
 800ab7e:	bf41      	itttt	mi
 800ab80:	2200      	movmi	r2, #0
 800ab82:	426d      	negmi	r5, r5
 800ab84:	60a2      	strmi	r2, [r4, #8]
 800ab86:	61a5      	strmi	r5, [r4, #24]
 800ab88:	bf58      	it	pl
 800ab8a:	60a5      	strpl	r5, [r4, #8]
 800ab8c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab8e:	07d2      	lsls	r2, r2, #31
 800ab90:	d401      	bmi.n	800ab96 <setvbuf+0x12e>
 800ab92:	059b      	lsls	r3, r3, #22
 800ab94:	d513      	bpl.n	800abbe <setvbuf+0x156>
 800ab96:	2500      	movs	r5, #0
 800ab98:	e7d5      	b.n	800ab46 <setvbuf+0xde>
 800ab9a:	4648      	mov	r0, r9
 800ab9c:	f7ff fd74 	bl	800a688 <malloc>
 800aba0:	4606      	mov	r6, r0
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d0b8      	beq.n	800ab18 <setvbuf+0xb0>
 800aba6:	89a3      	ldrh	r3, [r4, #12]
 800aba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abac:	81a3      	strh	r3, [r4, #12]
 800abae:	464d      	mov	r5, r9
 800abb0:	e7cf      	b.n	800ab52 <setvbuf+0xea>
 800abb2:	2500      	movs	r5, #0
 800abb4:	e7b2      	b.n	800ab1c <setvbuf+0xb4>
 800abb6:	46a9      	mov	r9, r5
 800abb8:	e7f5      	b.n	800aba6 <setvbuf+0x13e>
 800abba:	60a2      	str	r2, [r4, #8]
 800abbc:	e7e6      	b.n	800ab8c <setvbuf+0x124>
 800abbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abc0:	f000 f968 	bl	800ae94 <__retarget_lock_release_recursive>
 800abc4:	e7e7      	b.n	800ab96 <setvbuf+0x12e>
 800abc6:	f04f 35ff 	mov.w	r5, #4294967295
 800abca:	e7bc      	b.n	800ab46 <setvbuf+0xde>
 800abcc:	20000038 	.word	0x20000038

0800abd0 <__sread>:
 800abd0:	b510      	push	{r4, lr}
 800abd2:	460c      	mov	r4, r1
 800abd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd8:	f000 f8fc 	bl	800add4 <_read_r>
 800abdc:	2800      	cmp	r0, #0
 800abde:	bfab      	itete	ge
 800abe0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800abe2:	89a3      	ldrhlt	r3, [r4, #12]
 800abe4:	181b      	addge	r3, r3, r0
 800abe6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800abea:	bfac      	ite	ge
 800abec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800abee:	81a3      	strhlt	r3, [r4, #12]
 800abf0:	bd10      	pop	{r4, pc}

0800abf2 <__swrite>:
 800abf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf6:	461f      	mov	r7, r3
 800abf8:	898b      	ldrh	r3, [r1, #12]
 800abfa:	05db      	lsls	r3, r3, #23
 800abfc:	4605      	mov	r5, r0
 800abfe:	460c      	mov	r4, r1
 800ac00:	4616      	mov	r6, r2
 800ac02:	d505      	bpl.n	800ac10 <__swrite+0x1e>
 800ac04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac08:	2302      	movs	r3, #2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f000 f8d0 	bl	800adb0 <_lseek_r>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ac1a:	81a3      	strh	r3, [r4, #12]
 800ac1c:	4632      	mov	r2, r6
 800ac1e:	463b      	mov	r3, r7
 800ac20:	4628      	mov	r0, r5
 800ac22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac26:	f000 b8f7 	b.w	800ae18 <_write_r>

0800ac2a <__sseek>:
 800ac2a:	b510      	push	{r4, lr}
 800ac2c:	460c      	mov	r4, r1
 800ac2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac32:	f000 f8bd 	bl	800adb0 <_lseek_r>
 800ac36:	1c43      	adds	r3, r0, #1
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	bf15      	itete	ne
 800ac3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ac3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ac42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ac46:	81a3      	strheq	r3, [r4, #12]
 800ac48:	bf18      	it	ne
 800ac4a:	81a3      	strhne	r3, [r4, #12]
 800ac4c:	bd10      	pop	{r4, pc}

0800ac4e <__sclose>:
 800ac4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac52:	f000 b89d 	b.w	800ad90 <_close_r>

0800ac56 <__swbuf_r>:
 800ac56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac58:	460e      	mov	r6, r1
 800ac5a:	4614      	mov	r4, r2
 800ac5c:	4605      	mov	r5, r0
 800ac5e:	b118      	cbz	r0, 800ac68 <__swbuf_r+0x12>
 800ac60:	6a03      	ldr	r3, [r0, #32]
 800ac62:	b90b      	cbnz	r3, 800ac68 <__swbuf_r+0x12>
 800ac64:	f7ff fe5a 	bl	800a91c <__sinit>
 800ac68:	69a3      	ldr	r3, [r4, #24]
 800ac6a:	60a3      	str	r3, [r4, #8]
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	071a      	lsls	r2, r3, #28
 800ac70:	d501      	bpl.n	800ac76 <__swbuf_r+0x20>
 800ac72:	6923      	ldr	r3, [r4, #16]
 800ac74:	b943      	cbnz	r3, 800ac88 <__swbuf_r+0x32>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f000 f82b 	bl	800acd4 <__swsetup_r>
 800ac7e:	b118      	cbz	r0, 800ac88 <__swbuf_r+0x32>
 800ac80:	f04f 37ff 	mov.w	r7, #4294967295
 800ac84:	4638      	mov	r0, r7
 800ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	6922      	ldr	r2, [r4, #16]
 800ac8c:	1a98      	subs	r0, r3, r2
 800ac8e:	6963      	ldr	r3, [r4, #20]
 800ac90:	b2f6      	uxtb	r6, r6
 800ac92:	4283      	cmp	r3, r0
 800ac94:	4637      	mov	r7, r6
 800ac96:	dc05      	bgt.n	800aca4 <__swbuf_r+0x4e>
 800ac98:	4621      	mov	r1, r4
 800ac9a:	4628      	mov	r0, r5
 800ac9c:	f000 fca6 	bl	800b5ec <_fflush_r>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d1ed      	bne.n	800ac80 <__swbuf_r+0x2a>
 800aca4:	68a3      	ldr	r3, [r4, #8]
 800aca6:	3b01      	subs	r3, #1
 800aca8:	60a3      	str	r3, [r4, #8]
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	1c5a      	adds	r2, r3, #1
 800acae:	6022      	str	r2, [r4, #0]
 800acb0:	701e      	strb	r6, [r3, #0]
 800acb2:	6962      	ldr	r2, [r4, #20]
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d004      	beq.n	800acc4 <__swbuf_r+0x6e>
 800acba:	89a3      	ldrh	r3, [r4, #12]
 800acbc:	07db      	lsls	r3, r3, #31
 800acbe:	d5e1      	bpl.n	800ac84 <__swbuf_r+0x2e>
 800acc0:	2e0a      	cmp	r6, #10
 800acc2:	d1df      	bne.n	800ac84 <__swbuf_r+0x2e>
 800acc4:	4621      	mov	r1, r4
 800acc6:	4628      	mov	r0, r5
 800acc8:	f000 fc90 	bl	800b5ec <_fflush_r>
 800accc:	2800      	cmp	r0, #0
 800acce:	d0d9      	beq.n	800ac84 <__swbuf_r+0x2e>
 800acd0:	e7d6      	b.n	800ac80 <__swbuf_r+0x2a>
	...

0800acd4 <__swsetup_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4b29      	ldr	r3, [pc, #164]	@ (800ad7c <__swsetup_r+0xa8>)
 800acd8:	4605      	mov	r5, r0
 800acda:	6818      	ldr	r0, [r3, #0]
 800acdc:	460c      	mov	r4, r1
 800acde:	b118      	cbz	r0, 800ace8 <__swsetup_r+0x14>
 800ace0:	6a03      	ldr	r3, [r0, #32]
 800ace2:	b90b      	cbnz	r3, 800ace8 <__swsetup_r+0x14>
 800ace4:	f7ff fe1a 	bl	800a91c <__sinit>
 800ace8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acec:	0719      	lsls	r1, r3, #28
 800acee:	d422      	bmi.n	800ad36 <__swsetup_r+0x62>
 800acf0:	06da      	lsls	r2, r3, #27
 800acf2:	d407      	bmi.n	800ad04 <__swsetup_r+0x30>
 800acf4:	2209      	movs	r2, #9
 800acf6:	602a      	str	r2, [r5, #0]
 800acf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ad02:	e033      	b.n	800ad6c <__swsetup_r+0x98>
 800ad04:	0758      	lsls	r0, r3, #29
 800ad06:	d512      	bpl.n	800ad2e <__swsetup_r+0x5a>
 800ad08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad0a:	b141      	cbz	r1, 800ad1e <__swsetup_r+0x4a>
 800ad0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad10:	4299      	cmp	r1, r3
 800ad12:	d002      	beq.n	800ad1a <__swsetup_r+0x46>
 800ad14:	4628      	mov	r0, r5
 800ad16:	f000 f8cd 	bl	800aeb4 <_free_r>
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad1e:	89a3      	ldrh	r3, [r4, #12]
 800ad20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad24:	81a3      	strh	r3, [r4, #12]
 800ad26:	2300      	movs	r3, #0
 800ad28:	6063      	str	r3, [r4, #4]
 800ad2a:	6923      	ldr	r3, [r4, #16]
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	f043 0308 	orr.w	r3, r3, #8
 800ad34:	81a3      	strh	r3, [r4, #12]
 800ad36:	6923      	ldr	r3, [r4, #16]
 800ad38:	b94b      	cbnz	r3, 800ad4e <__swsetup_r+0x7a>
 800ad3a:	89a3      	ldrh	r3, [r4, #12]
 800ad3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad44:	d003      	beq.n	800ad4e <__swsetup_r+0x7a>
 800ad46:	4621      	mov	r1, r4
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f000 fc9d 	bl	800b688 <__smakebuf_r>
 800ad4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad52:	f013 0201 	ands.w	r2, r3, #1
 800ad56:	d00a      	beq.n	800ad6e <__swsetup_r+0x9a>
 800ad58:	2200      	movs	r2, #0
 800ad5a:	60a2      	str	r2, [r4, #8]
 800ad5c:	6962      	ldr	r2, [r4, #20]
 800ad5e:	4252      	negs	r2, r2
 800ad60:	61a2      	str	r2, [r4, #24]
 800ad62:	6922      	ldr	r2, [r4, #16]
 800ad64:	b942      	cbnz	r2, 800ad78 <__swsetup_r+0xa4>
 800ad66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad6a:	d1c5      	bne.n	800acf8 <__swsetup_r+0x24>
 800ad6c:	bd38      	pop	{r3, r4, r5, pc}
 800ad6e:	0799      	lsls	r1, r3, #30
 800ad70:	bf58      	it	pl
 800ad72:	6962      	ldrpl	r2, [r4, #20]
 800ad74:	60a2      	str	r2, [r4, #8]
 800ad76:	e7f4      	b.n	800ad62 <__swsetup_r+0x8e>
 800ad78:	2000      	movs	r0, #0
 800ad7a:	e7f7      	b.n	800ad6c <__swsetup_r+0x98>
 800ad7c:	20000038 	.word	0x20000038

0800ad80 <memset>:
 800ad80:	4402      	add	r2, r0
 800ad82:	4603      	mov	r3, r0
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d100      	bne.n	800ad8a <memset+0xa>
 800ad88:	4770      	bx	lr
 800ad8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad8e:	e7f9      	b.n	800ad84 <memset+0x4>

0800ad90 <_close_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d06      	ldr	r5, [pc, #24]	@ (800adac <_close_r+0x1c>)
 800ad94:	2300      	movs	r3, #0
 800ad96:	4604      	mov	r4, r0
 800ad98:	4608      	mov	r0, r1
 800ad9a:	602b      	str	r3, [r5, #0]
 800ad9c:	f7f6 fad3 	bl	8001346 <_close>
 800ada0:	1c43      	adds	r3, r0, #1
 800ada2:	d102      	bne.n	800adaa <_close_r+0x1a>
 800ada4:	682b      	ldr	r3, [r5, #0]
 800ada6:	b103      	cbz	r3, 800adaa <_close_r+0x1a>
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	bd38      	pop	{r3, r4, r5, pc}
 800adac:	20000af8 	.word	0x20000af8

0800adb0 <_lseek_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d07      	ldr	r5, [pc, #28]	@ (800add0 <_lseek_r+0x20>)
 800adb4:	4604      	mov	r4, r0
 800adb6:	4608      	mov	r0, r1
 800adb8:	4611      	mov	r1, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	602a      	str	r2, [r5, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	f7f6 fae8 	bl	8001394 <_lseek>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_lseek_r+0x1e>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_lseek_r+0x1e>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20000af8 	.word	0x20000af8

0800add4 <_read_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	@ (800adf4 <_read_r+0x20>)
 800add8:	4604      	mov	r4, r0
 800adda:	4608      	mov	r0, r1
 800addc:	4611      	mov	r1, r2
 800adde:	2200      	movs	r2, #0
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f7f6 fa92 	bl	800130c <_read>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_read_r+0x1e>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_read_r+0x1e>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20000af8 	.word	0x20000af8

0800adf8 <_sbrk_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d06      	ldr	r5, [pc, #24]	@ (800ae14 <_sbrk_r+0x1c>)
 800adfc:	2300      	movs	r3, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	f7f6 fad4 	bl	80013b0 <_sbrk>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	d102      	bne.n	800ae12 <_sbrk_r+0x1a>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b103      	cbz	r3, 800ae12 <_sbrk_r+0x1a>
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	20000af8 	.word	0x20000af8

0800ae18 <_write_r>:
 800ae18:	b538      	push	{r3, r4, r5, lr}
 800ae1a:	4d07      	ldr	r5, [pc, #28]	@ (800ae38 <_write_r+0x20>)
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	4608      	mov	r0, r1
 800ae20:	4611      	mov	r1, r2
 800ae22:	2200      	movs	r2, #0
 800ae24:	602a      	str	r2, [r5, #0]
 800ae26:	461a      	mov	r2, r3
 800ae28:	f7f5 fc40 	bl	80006ac <_write>
 800ae2c:	1c43      	adds	r3, r0, #1
 800ae2e:	d102      	bne.n	800ae36 <_write_r+0x1e>
 800ae30:	682b      	ldr	r3, [r5, #0]
 800ae32:	b103      	cbz	r3, 800ae36 <_write_r+0x1e>
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	bd38      	pop	{r3, r4, r5, pc}
 800ae38:	20000af8 	.word	0x20000af8

0800ae3c <__errno>:
 800ae3c:	4b01      	ldr	r3, [pc, #4]	@ (800ae44 <__errno+0x8>)
 800ae3e:	6818      	ldr	r0, [r3, #0]
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	20000038 	.word	0x20000038

0800ae48 <__libc_init_array>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	4d0d      	ldr	r5, [pc, #52]	@ (800ae80 <__libc_init_array+0x38>)
 800ae4c:	4c0d      	ldr	r4, [pc, #52]	@ (800ae84 <__libc_init_array+0x3c>)
 800ae4e:	1b64      	subs	r4, r4, r5
 800ae50:	10a4      	asrs	r4, r4, #2
 800ae52:	2600      	movs	r6, #0
 800ae54:	42a6      	cmp	r6, r4
 800ae56:	d109      	bne.n	800ae6c <__libc_init_array+0x24>
 800ae58:	4d0b      	ldr	r5, [pc, #44]	@ (800ae88 <__libc_init_array+0x40>)
 800ae5a:	4c0c      	ldr	r4, [pc, #48]	@ (800ae8c <__libc_init_array+0x44>)
 800ae5c:	f000 fc72 	bl	800b744 <_init>
 800ae60:	1b64      	subs	r4, r4, r5
 800ae62:	10a4      	asrs	r4, r4, #2
 800ae64:	2600      	movs	r6, #0
 800ae66:	42a6      	cmp	r6, r4
 800ae68:	d105      	bne.n	800ae76 <__libc_init_array+0x2e>
 800ae6a:	bd70      	pop	{r4, r5, r6, pc}
 800ae6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae70:	4798      	blx	r3
 800ae72:	3601      	adds	r6, #1
 800ae74:	e7ee      	b.n	800ae54 <__libc_init_array+0xc>
 800ae76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae7a:	4798      	blx	r3
 800ae7c:	3601      	adds	r6, #1
 800ae7e:	e7f2      	b.n	800ae66 <__libc_init_array+0x1e>
 800ae80:	0800b8c0 	.word	0x0800b8c0
 800ae84:	0800b8c0 	.word	0x0800b8c0
 800ae88:	0800b8c0 	.word	0x0800b8c0
 800ae8c:	0800b8c4 	.word	0x0800b8c4

0800ae90 <__retarget_lock_init_recursive>:
 800ae90:	4770      	bx	lr

0800ae92 <__retarget_lock_acquire_recursive>:
 800ae92:	4770      	bx	lr

0800ae94 <__retarget_lock_release_recursive>:
 800ae94:	4770      	bx	lr

0800ae96 <memcpy>:
 800ae96:	440a      	add	r2, r1
 800ae98:	4291      	cmp	r1, r2
 800ae9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae9e:	d100      	bne.n	800aea2 <memcpy+0xc>
 800aea0:	4770      	bx	lr
 800aea2:	b510      	push	{r4, lr}
 800aea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aeac:	4291      	cmp	r1, r2
 800aeae:	d1f9      	bne.n	800aea4 <memcpy+0xe>
 800aeb0:	bd10      	pop	{r4, pc}
	...

0800aeb4 <_free_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	2900      	cmp	r1, #0
 800aeba:	d041      	beq.n	800af40 <_free_r+0x8c>
 800aebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aec0:	1f0c      	subs	r4, r1, #4
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	bfb8      	it	lt
 800aec6:	18e4      	addlt	r4, r4, r3
 800aec8:	f7ff fc90 	bl	800a7ec <__malloc_lock>
 800aecc:	4a1d      	ldr	r2, [pc, #116]	@ (800af44 <_free_r+0x90>)
 800aece:	6813      	ldr	r3, [r2, #0]
 800aed0:	b933      	cbnz	r3, 800aee0 <_free_r+0x2c>
 800aed2:	6063      	str	r3, [r4, #4]
 800aed4:	6014      	str	r4, [r2, #0]
 800aed6:	4628      	mov	r0, r5
 800aed8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aedc:	f7ff bc8c 	b.w	800a7f8 <__malloc_unlock>
 800aee0:	42a3      	cmp	r3, r4
 800aee2:	d908      	bls.n	800aef6 <_free_r+0x42>
 800aee4:	6820      	ldr	r0, [r4, #0]
 800aee6:	1821      	adds	r1, r4, r0
 800aee8:	428b      	cmp	r3, r1
 800aeea:	bf01      	itttt	eq
 800aeec:	6819      	ldreq	r1, [r3, #0]
 800aeee:	685b      	ldreq	r3, [r3, #4]
 800aef0:	1809      	addeq	r1, r1, r0
 800aef2:	6021      	streq	r1, [r4, #0]
 800aef4:	e7ed      	b.n	800aed2 <_free_r+0x1e>
 800aef6:	461a      	mov	r2, r3
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	b10b      	cbz	r3, 800af00 <_free_r+0x4c>
 800aefc:	42a3      	cmp	r3, r4
 800aefe:	d9fa      	bls.n	800aef6 <_free_r+0x42>
 800af00:	6811      	ldr	r1, [r2, #0]
 800af02:	1850      	adds	r0, r2, r1
 800af04:	42a0      	cmp	r0, r4
 800af06:	d10b      	bne.n	800af20 <_free_r+0x6c>
 800af08:	6820      	ldr	r0, [r4, #0]
 800af0a:	4401      	add	r1, r0
 800af0c:	1850      	adds	r0, r2, r1
 800af0e:	4283      	cmp	r3, r0
 800af10:	6011      	str	r1, [r2, #0]
 800af12:	d1e0      	bne.n	800aed6 <_free_r+0x22>
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	6053      	str	r3, [r2, #4]
 800af1a:	4408      	add	r0, r1
 800af1c:	6010      	str	r0, [r2, #0]
 800af1e:	e7da      	b.n	800aed6 <_free_r+0x22>
 800af20:	d902      	bls.n	800af28 <_free_r+0x74>
 800af22:	230c      	movs	r3, #12
 800af24:	602b      	str	r3, [r5, #0]
 800af26:	e7d6      	b.n	800aed6 <_free_r+0x22>
 800af28:	6820      	ldr	r0, [r4, #0]
 800af2a:	1821      	adds	r1, r4, r0
 800af2c:	428b      	cmp	r3, r1
 800af2e:	bf04      	itt	eq
 800af30:	6819      	ldreq	r1, [r3, #0]
 800af32:	685b      	ldreq	r3, [r3, #4]
 800af34:	6063      	str	r3, [r4, #4]
 800af36:	bf04      	itt	eq
 800af38:	1809      	addeq	r1, r1, r0
 800af3a:	6021      	streq	r1, [r4, #0]
 800af3c:	6054      	str	r4, [r2, #4]
 800af3e:	e7ca      	b.n	800aed6 <_free_r+0x22>
 800af40:	bd38      	pop	{r3, r4, r5, pc}
 800af42:	bf00      	nop
 800af44:	200009b8 	.word	0x200009b8

0800af48 <__sfputc_r>:
 800af48:	6893      	ldr	r3, [r2, #8]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	b410      	push	{r4}
 800af50:	6093      	str	r3, [r2, #8]
 800af52:	da08      	bge.n	800af66 <__sfputc_r+0x1e>
 800af54:	6994      	ldr	r4, [r2, #24]
 800af56:	42a3      	cmp	r3, r4
 800af58:	db01      	blt.n	800af5e <__sfputc_r+0x16>
 800af5a:	290a      	cmp	r1, #10
 800af5c:	d103      	bne.n	800af66 <__sfputc_r+0x1e>
 800af5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af62:	f7ff be78 	b.w	800ac56 <__swbuf_r>
 800af66:	6813      	ldr	r3, [r2, #0]
 800af68:	1c58      	adds	r0, r3, #1
 800af6a:	6010      	str	r0, [r2, #0]
 800af6c:	7019      	strb	r1, [r3, #0]
 800af6e:	4608      	mov	r0, r1
 800af70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <__sfputs_r>:
 800af76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af78:	4606      	mov	r6, r0
 800af7a:	460f      	mov	r7, r1
 800af7c:	4614      	mov	r4, r2
 800af7e:	18d5      	adds	r5, r2, r3
 800af80:	42ac      	cmp	r4, r5
 800af82:	d101      	bne.n	800af88 <__sfputs_r+0x12>
 800af84:	2000      	movs	r0, #0
 800af86:	e007      	b.n	800af98 <__sfputs_r+0x22>
 800af88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af8c:	463a      	mov	r2, r7
 800af8e:	4630      	mov	r0, r6
 800af90:	f7ff ffda 	bl	800af48 <__sfputc_r>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d1f3      	bne.n	800af80 <__sfputs_r+0xa>
 800af98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af9c <_vfiprintf_r>:
 800af9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	460d      	mov	r5, r1
 800afa2:	b09d      	sub	sp, #116	@ 0x74
 800afa4:	4614      	mov	r4, r2
 800afa6:	4698      	mov	r8, r3
 800afa8:	4606      	mov	r6, r0
 800afaa:	b118      	cbz	r0, 800afb4 <_vfiprintf_r+0x18>
 800afac:	6a03      	ldr	r3, [r0, #32]
 800afae:	b90b      	cbnz	r3, 800afb4 <_vfiprintf_r+0x18>
 800afb0:	f7ff fcb4 	bl	800a91c <__sinit>
 800afb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afb6:	07d9      	lsls	r1, r3, #31
 800afb8:	d405      	bmi.n	800afc6 <_vfiprintf_r+0x2a>
 800afba:	89ab      	ldrh	r3, [r5, #12]
 800afbc:	059a      	lsls	r2, r3, #22
 800afbe:	d402      	bmi.n	800afc6 <_vfiprintf_r+0x2a>
 800afc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afc2:	f7ff ff66 	bl	800ae92 <__retarget_lock_acquire_recursive>
 800afc6:	89ab      	ldrh	r3, [r5, #12]
 800afc8:	071b      	lsls	r3, r3, #28
 800afca:	d501      	bpl.n	800afd0 <_vfiprintf_r+0x34>
 800afcc:	692b      	ldr	r3, [r5, #16]
 800afce:	b99b      	cbnz	r3, 800aff8 <_vfiprintf_r+0x5c>
 800afd0:	4629      	mov	r1, r5
 800afd2:	4630      	mov	r0, r6
 800afd4:	f7ff fe7e 	bl	800acd4 <__swsetup_r>
 800afd8:	b170      	cbz	r0, 800aff8 <_vfiprintf_r+0x5c>
 800afda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afdc:	07dc      	lsls	r4, r3, #31
 800afde:	d504      	bpl.n	800afea <_vfiprintf_r+0x4e>
 800afe0:	f04f 30ff 	mov.w	r0, #4294967295
 800afe4:	b01d      	add	sp, #116	@ 0x74
 800afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	0598      	lsls	r0, r3, #22
 800afee:	d4f7      	bmi.n	800afe0 <_vfiprintf_r+0x44>
 800aff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aff2:	f7ff ff4f 	bl	800ae94 <__retarget_lock_release_recursive>
 800aff6:	e7f3      	b.n	800afe0 <_vfiprintf_r+0x44>
 800aff8:	2300      	movs	r3, #0
 800affa:	9309      	str	r3, [sp, #36]	@ 0x24
 800affc:	2320      	movs	r3, #32
 800affe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b002:	f8cd 800c 	str.w	r8, [sp, #12]
 800b006:	2330      	movs	r3, #48	@ 0x30
 800b008:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b1b8 <_vfiprintf_r+0x21c>
 800b00c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b010:	f04f 0901 	mov.w	r9, #1
 800b014:	4623      	mov	r3, r4
 800b016:	469a      	mov	sl, r3
 800b018:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b01c:	b10a      	cbz	r2, 800b022 <_vfiprintf_r+0x86>
 800b01e:	2a25      	cmp	r2, #37	@ 0x25
 800b020:	d1f9      	bne.n	800b016 <_vfiprintf_r+0x7a>
 800b022:	ebba 0b04 	subs.w	fp, sl, r4
 800b026:	d00b      	beq.n	800b040 <_vfiprintf_r+0xa4>
 800b028:	465b      	mov	r3, fp
 800b02a:	4622      	mov	r2, r4
 800b02c:	4629      	mov	r1, r5
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ffa1 	bl	800af76 <__sfputs_r>
 800b034:	3001      	adds	r0, #1
 800b036:	f000 80a7 	beq.w	800b188 <_vfiprintf_r+0x1ec>
 800b03a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b03c:	445a      	add	r2, fp
 800b03e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b040:	f89a 3000 	ldrb.w	r3, [sl]
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 809f 	beq.w	800b188 <_vfiprintf_r+0x1ec>
 800b04a:	2300      	movs	r3, #0
 800b04c:	f04f 32ff 	mov.w	r2, #4294967295
 800b050:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b054:	f10a 0a01 	add.w	sl, sl, #1
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	9307      	str	r3, [sp, #28]
 800b05c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b060:	931a      	str	r3, [sp, #104]	@ 0x68
 800b062:	4654      	mov	r4, sl
 800b064:	2205      	movs	r2, #5
 800b066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b06a:	4853      	ldr	r0, [pc, #332]	@ (800b1b8 <_vfiprintf_r+0x21c>)
 800b06c:	f7f5 f8b0 	bl	80001d0 <memchr>
 800b070:	9a04      	ldr	r2, [sp, #16]
 800b072:	b9d8      	cbnz	r0, 800b0ac <_vfiprintf_r+0x110>
 800b074:	06d1      	lsls	r1, r2, #27
 800b076:	bf44      	itt	mi
 800b078:	2320      	movmi	r3, #32
 800b07a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b07e:	0713      	lsls	r3, r2, #28
 800b080:	bf44      	itt	mi
 800b082:	232b      	movmi	r3, #43	@ 0x2b
 800b084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b088:	f89a 3000 	ldrb.w	r3, [sl]
 800b08c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b08e:	d015      	beq.n	800b0bc <_vfiprintf_r+0x120>
 800b090:	9a07      	ldr	r2, [sp, #28]
 800b092:	4654      	mov	r4, sl
 800b094:	2000      	movs	r0, #0
 800b096:	f04f 0c0a 	mov.w	ip, #10
 800b09a:	4621      	mov	r1, r4
 800b09c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0a0:	3b30      	subs	r3, #48	@ 0x30
 800b0a2:	2b09      	cmp	r3, #9
 800b0a4:	d94b      	bls.n	800b13e <_vfiprintf_r+0x1a2>
 800b0a6:	b1b0      	cbz	r0, 800b0d6 <_vfiprintf_r+0x13a>
 800b0a8:	9207      	str	r2, [sp, #28]
 800b0aa:	e014      	b.n	800b0d6 <_vfiprintf_r+0x13a>
 800b0ac:	eba0 0308 	sub.w	r3, r0, r8
 800b0b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	9304      	str	r3, [sp, #16]
 800b0b8:	46a2      	mov	sl, r4
 800b0ba:	e7d2      	b.n	800b062 <_vfiprintf_r+0xc6>
 800b0bc:	9b03      	ldr	r3, [sp, #12]
 800b0be:	1d19      	adds	r1, r3, #4
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	9103      	str	r1, [sp, #12]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	bfbb      	ittet	lt
 800b0c8:	425b      	neglt	r3, r3
 800b0ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ce:	9307      	strge	r3, [sp, #28]
 800b0d0:	9307      	strlt	r3, [sp, #28]
 800b0d2:	bfb8      	it	lt
 800b0d4:	9204      	strlt	r2, [sp, #16]
 800b0d6:	7823      	ldrb	r3, [r4, #0]
 800b0d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0da:	d10a      	bne.n	800b0f2 <_vfiprintf_r+0x156>
 800b0dc:	7863      	ldrb	r3, [r4, #1]
 800b0de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0e0:	d132      	bne.n	800b148 <_vfiprintf_r+0x1ac>
 800b0e2:	9b03      	ldr	r3, [sp, #12]
 800b0e4:	1d1a      	adds	r2, r3, #4
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	9203      	str	r2, [sp, #12]
 800b0ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b0ee:	3402      	adds	r4, #2
 800b0f0:	9305      	str	r3, [sp, #20]
 800b0f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b1c8 <_vfiprintf_r+0x22c>
 800b0f6:	7821      	ldrb	r1, [r4, #0]
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	f7f5 f868 	bl	80001d0 <memchr>
 800b100:	b138      	cbz	r0, 800b112 <_vfiprintf_r+0x176>
 800b102:	9b04      	ldr	r3, [sp, #16]
 800b104:	eba0 000a 	sub.w	r0, r0, sl
 800b108:	2240      	movs	r2, #64	@ 0x40
 800b10a:	4082      	lsls	r2, r0
 800b10c:	4313      	orrs	r3, r2
 800b10e:	3401      	adds	r4, #1
 800b110:	9304      	str	r3, [sp, #16]
 800b112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b116:	4829      	ldr	r0, [pc, #164]	@ (800b1bc <_vfiprintf_r+0x220>)
 800b118:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b11c:	2206      	movs	r2, #6
 800b11e:	f7f5 f857 	bl	80001d0 <memchr>
 800b122:	2800      	cmp	r0, #0
 800b124:	d03f      	beq.n	800b1a6 <_vfiprintf_r+0x20a>
 800b126:	4b26      	ldr	r3, [pc, #152]	@ (800b1c0 <_vfiprintf_r+0x224>)
 800b128:	bb1b      	cbnz	r3, 800b172 <_vfiprintf_r+0x1d6>
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	3307      	adds	r3, #7
 800b12e:	f023 0307 	bic.w	r3, r3, #7
 800b132:	3308      	adds	r3, #8
 800b134:	9303      	str	r3, [sp, #12]
 800b136:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b138:	443b      	add	r3, r7
 800b13a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b13c:	e76a      	b.n	800b014 <_vfiprintf_r+0x78>
 800b13e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b142:	460c      	mov	r4, r1
 800b144:	2001      	movs	r0, #1
 800b146:	e7a8      	b.n	800b09a <_vfiprintf_r+0xfe>
 800b148:	2300      	movs	r3, #0
 800b14a:	3401      	adds	r4, #1
 800b14c:	9305      	str	r3, [sp, #20]
 800b14e:	4619      	mov	r1, r3
 800b150:	f04f 0c0a 	mov.w	ip, #10
 800b154:	4620      	mov	r0, r4
 800b156:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b15a:	3a30      	subs	r2, #48	@ 0x30
 800b15c:	2a09      	cmp	r2, #9
 800b15e:	d903      	bls.n	800b168 <_vfiprintf_r+0x1cc>
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0c6      	beq.n	800b0f2 <_vfiprintf_r+0x156>
 800b164:	9105      	str	r1, [sp, #20]
 800b166:	e7c4      	b.n	800b0f2 <_vfiprintf_r+0x156>
 800b168:	fb0c 2101 	mla	r1, ip, r1, r2
 800b16c:	4604      	mov	r4, r0
 800b16e:	2301      	movs	r3, #1
 800b170:	e7f0      	b.n	800b154 <_vfiprintf_r+0x1b8>
 800b172:	ab03      	add	r3, sp, #12
 800b174:	9300      	str	r3, [sp, #0]
 800b176:	462a      	mov	r2, r5
 800b178:	4b12      	ldr	r3, [pc, #72]	@ (800b1c4 <_vfiprintf_r+0x228>)
 800b17a:	a904      	add	r1, sp, #16
 800b17c:	4630      	mov	r0, r6
 800b17e:	f3af 8000 	nop.w
 800b182:	4607      	mov	r7, r0
 800b184:	1c78      	adds	r0, r7, #1
 800b186:	d1d6      	bne.n	800b136 <_vfiprintf_r+0x19a>
 800b188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b18a:	07d9      	lsls	r1, r3, #31
 800b18c:	d405      	bmi.n	800b19a <_vfiprintf_r+0x1fe>
 800b18e:	89ab      	ldrh	r3, [r5, #12]
 800b190:	059a      	lsls	r2, r3, #22
 800b192:	d402      	bmi.n	800b19a <_vfiprintf_r+0x1fe>
 800b194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b196:	f7ff fe7d 	bl	800ae94 <__retarget_lock_release_recursive>
 800b19a:	89ab      	ldrh	r3, [r5, #12]
 800b19c:	065b      	lsls	r3, r3, #25
 800b19e:	f53f af1f 	bmi.w	800afe0 <_vfiprintf_r+0x44>
 800b1a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1a4:	e71e      	b.n	800afe4 <_vfiprintf_r+0x48>
 800b1a6:	ab03      	add	r3, sp, #12
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	462a      	mov	r2, r5
 800b1ac:	4b05      	ldr	r3, [pc, #20]	@ (800b1c4 <_vfiprintf_r+0x228>)
 800b1ae:	a904      	add	r1, sp, #16
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	f000 f879 	bl	800b2a8 <_printf_i>
 800b1b6:	e7e4      	b.n	800b182 <_vfiprintf_r+0x1e6>
 800b1b8:	0800b884 	.word	0x0800b884
 800b1bc:	0800b88e 	.word	0x0800b88e
 800b1c0:	00000000 	.word	0x00000000
 800b1c4:	0800af77 	.word	0x0800af77
 800b1c8:	0800b88a 	.word	0x0800b88a

0800b1cc <_printf_common>:
 800b1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d0:	4616      	mov	r6, r2
 800b1d2:	4698      	mov	r8, r3
 800b1d4:	688a      	ldr	r2, [r1, #8]
 800b1d6:	690b      	ldr	r3, [r1, #16]
 800b1d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	bfb8      	it	lt
 800b1e0:	4613      	movlt	r3, r2
 800b1e2:	6033      	str	r3, [r6, #0]
 800b1e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b1e8:	4607      	mov	r7, r0
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	b10a      	cbz	r2, 800b1f2 <_printf_common+0x26>
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	6033      	str	r3, [r6, #0]
 800b1f2:	6823      	ldr	r3, [r4, #0]
 800b1f4:	0699      	lsls	r1, r3, #26
 800b1f6:	bf42      	ittt	mi
 800b1f8:	6833      	ldrmi	r3, [r6, #0]
 800b1fa:	3302      	addmi	r3, #2
 800b1fc:	6033      	strmi	r3, [r6, #0]
 800b1fe:	6825      	ldr	r5, [r4, #0]
 800b200:	f015 0506 	ands.w	r5, r5, #6
 800b204:	d106      	bne.n	800b214 <_printf_common+0x48>
 800b206:	f104 0a19 	add.w	sl, r4, #25
 800b20a:	68e3      	ldr	r3, [r4, #12]
 800b20c:	6832      	ldr	r2, [r6, #0]
 800b20e:	1a9b      	subs	r3, r3, r2
 800b210:	42ab      	cmp	r3, r5
 800b212:	dc26      	bgt.n	800b262 <_printf_common+0x96>
 800b214:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b218:	6822      	ldr	r2, [r4, #0]
 800b21a:	3b00      	subs	r3, #0
 800b21c:	bf18      	it	ne
 800b21e:	2301      	movne	r3, #1
 800b220:	0692      	lsls	r2, r2, #26
 800b222:	d42b      	bmi.n	800b27c <_printf_common+0xb0>
 800b224:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b228:	4641      	mov	r1, r8
 800b22a:	4638      	mov	r0, r7
 800b22c:	47c8      	blx	r9
 800b22e:	3001      	adds	r0, #1
 800b230:	d01e      	beq.n	800b270 <_printf_common+0xa4>
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	6922      	ldr	r2, [r4, #16]
 800b236:	f003 0306 	and.w	r3, r3, #6
 800b23a:	2b04      	cmp	r3, #4
 800b23c:	bf02      	ittt	eq
 800b23e:	68e5      	ldreq	r5, [r4, #12]
 800b240:	6833      	ldreq	r3, [r6, #0]
 800b242:	1aed      	subeq	r5, r5, r3
 800b244:	68a3      	ldr	r3, [r4, #8]
 800b246:	bf0c      	ite	eq
 800b248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b24c:	2500      	movne	r5, #0
 800b24e:	4293      	cmp	r3, r2
 800b250:	bfc4      	itt	gt
 800b252:	1a9b      	subgt	r3, r3, r2
 800b254:	18ed      	addgt	r5, r5, r3
 800b256:	2600      	movs	r6, #0
 800b258:	341a      	adds	r4, #26
 800b25a:	42b5      	cmp	r5, r6
 800b25c:	d11a      	bne.n	800b294 <_printf_common+0xc8>
 800b25e:	2000      	movs	r0, #0
 800b260:	e008      	b.n	800b274 <_printf_common+0xa8>
 800b262:	2301      	movs	r3, #1
 800b264:	4652      	mov	r2, sl
 800b266:	4641      	mov	r1, r8
 800b268:	4638      	mov	r0, r7
 800b26a:	47c8      	blx	r9
 800b26c:	3001      	adds	r0, #1
 800b26e:	d103      	bne.n	800b278 <_printf_common+0xac>
 800b270:	f04f 30ff 	mov.w	r0, #4294967295
 800b274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b278:	3501      	adds	r5, #1
 800b27a:	e7c6      	b.n	800b20a <_printf_common+0x3e>
 800b27c:	18e1      	adds	r1, r4, r3
 800b27e:	1c5a      	adds	r2, r3, #1
 800b280:	2030      	movs	r0, #48	@ 0x30
 800b282:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b286:	4422      	add	r2, r4
 800b288:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b28c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b290:	3302      	adds	r3, #2
 800b292:	e7c7      	b.n	800b224 <_printf_common+0x58>
 800b294:	2301      	movs	r3, #1
 800b296:	4622      	mov	r2, r4
 800b298:	4641      	mov	r1, r8
 800b29a:	4638      	mov	r0, r7
 800b29c:	47c8      	blx	r9
 800b29e:	3001      	adds	r0, #1
 800b2a0:	d0e6      	beq.n	800b270 <_printf_common+0xa4>
 800b2a2:	3601      	adds	r6, #1
 800b2a4:	e7d9      	b.n	800b25a <_printf_common+0x8e>
	...

0800b2a8 <_printf_i>:
 800b2a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2ac:	7e0f      	ldrb	r7, [r1, #24]
 800b2ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2b0:	2f78      	cmp	r7, #120	@ 0x78
 800b2b2:	4691      	mov	r9, r2
 800b2b4:	4680      	mov	r8, r0
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	469a      	mov	sl, r3
 800b2ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2be:	d807      	bhi.n	800b2d0 <_printf_i+0x28>
 800b2c0:	2f62      	cmp	r7, #98	@ 0x62
 800b2c2:	d80a      	bhi.n	800b2da <_printf_i+0x32>
 800b2c4:	2f00      	cmp	r7, #0
 800b2c6:	f000 80d1 	beq.w	800b46c <_printf_i+0x1c4>
 800b2ca:	2f58      	cmp	r7, #88	@ 0x58
 800b2cc:	f000 80b8 	beq.w	800b440 <_printf_i+0x198>
 800b2d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b2d8:	e03a      	b.n	800b350 <_printf_i+0xa8>
 800b2da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b2de:	2b15      	cmp	r3, #21
 800b2e0:	d8f6      	bhi.n	800b2d0 <_printf_i+0x28>
 800b2e2:	a101      	add	r1, pc, #4	@ (adr r1, 800b2e8 <_printf_i+0x40>)
 800b2e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2e8:	0800b341 	.word	0x0800b341
 800b2ec:	0800b355 	.word	0x0800b355
 800b2f0:	0800b2d1 	.word	0x0800b2d1
 800b2f4:	0800b2d1 	.word	0x0800b2d1
 800b2f8:	0800b2d1 	.word	0x0800b2d1
 800b2fc:	0800b2d1 	.word	0x0800b2d1
 800b300:	0800b355 	.word	0x0800b355
 800b304:	0800b2d1 	.word	0x0800b2d1
 800b308:	0800b2d1 	.word	0x0800b2d1
 800b30c:	0800b2d1 	.word	0x0800b2d1
 800b310:	0800b2d1 	.word	0x0800b2d1
 800b314:	0800b453 	.word	0x0800b453
 800b318:	0800b37f 	.word	0x0800b37f
 800b31c:	0800b40d 	.word	0x0800b40d
 800b320:	0800b2d1 	.word	0x0800b2d1
 800b324:	0800b2d1 	.word	0x0800b2d1
 800b328:	0800b475 	.word	0x0800b475
 800b32c:	0800b2d1 	.word	0x0800b2d1
 800b330:	0800b37f 	.word	0x0800b37f
 800b334:	0800b2d1 	.word	0x0800b2d1
 800b338:	0800b2d1 	.word	0x0800b2d1
 800b33c:	0800b415 	.word	0x0800b415
 800b340:	6833      	ldr	r3, [r6, #0]
 800b342:	1d1a      	adds	r2, r3, #4
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	6032      	str	r2, [r6, #0]
 800b348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b34c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b350:	2301      	movs	r3, #1
 800b352:	e09c      	b.n	800b48e <_printf_i+0x1e6>
 800b354:	6833      	ldr	r3, [r6, #0]
 800b356:	6820      	ldr	r0, [r4, #0]
 800b358:	1d19      	adds	r1, r3, #4
 800b35a:	6031      	str	r1, [r6, #0]
 800b35c:	0606      	lsls	r6, r0, #24
 800b35e:	d501      	bpl.n	800b364 <_printf_i+0xbc>
 800b360:	681d      	ldr	r5, [r3, #0]
 800b362:	e003      	b.n	800b36c <_printf_i+0xc4>
 800b364:	0645      	lsls	r5, r0, #25
 800b366:	d5fb      	bpl.n	800b360 <_printf_i+0xb8>
 800b368:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b36c:	2d00      	cmp	r5, #0
 800b36e:	da03      	bge.n	800b378 <_printf_i+0xd0>
 800b370:	232d      	movs	r3, #45	@ 0x2d
 800b372:	426d      	negs	r5, r5
 800b374:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b378:	4858      	ldr	r0, [pc, #352]	@ (800b4dc <_printf_i+0x234>)
 800b37a:	230a      	movs	r3, #10
 800b37c:	e011      	b.n	800b3a2 <_printf_i+0xfa>
 800b37e:	6821      	ldr	r1, [r4, #0]
 800b380:	6833      	ldr	r3, [r6, #0]
 800b382:	0608      	lsls	r0, r1, #24
 800b384:	f853 5b04 	ldr.w	r5, [r3], #4
 800b388:	d402      	bmi.n	800b390 <_printf_i+0xe8>
 800b38a:	0649      	lsls	r1, r1, #25
 800b38c:	bf48      	it	mi
 800b38e:	b2ad      	uxthmi	r5, r5
 800b390:	2f6f      	cmp	r7, #111	@ 0x6f
 800b392:	4852      	ldr	r0, [pc, #328]	@ (800b4dc <_printf_i+0x234>)
 800b394:	6033      	str	r3, [r6, #0]
 800b396:	bf14      	ite	ne
 800b398:	230a      	movne	r3, #10
 800b39a:	2308      	moveq	r3, #8
 800b39c:	2100      	movs	r1, #0
 800b39e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3a2:	6866      	ldr	r6, [r4, #4]
 800b3a4:	60a6      	str	r6, [r4, #8]
 800b3a6:	2e00      	cmp	r6, #0
 800b3a8:	db05      	blt.n	800b3b6 <_printf_i+0x10e>
 800b3aa:	6821      	ldr	r1, [r4, #0]
 800b3ac:	432e      	orrs	r6, r5
 800b3ae:	f021 0104 	bic.w	r1, r1, #4
 800b3b2:	6021      	str	r1, [r4, #0]
 800b3b4:	d04b      	beq.n	800b44e <_printf_i+0x1a6>
 800b3b6:	4616      	mov	r6, r2
 800b3b8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3bc:	fb03 5711 	mls	r7, r3, r1, r5
 800b3c0:	5dc7      	ldrb	r7, [r0, r7]
 800b3c2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3c6:	462f      	mov	r7, r5
 800b3c8:	42bb      	cmp	r3, r7
 800b3ca:	460d      	mov	r5, r1
 800b3cc:	d9f4      	bls.n	800b3b8 <_printf_i+0x110>
 800b3ce:	2b08      	cmp	r3, #8
 800b3d0:	d10b      	bne.n	800b3ea <_printf_i+0x142>
 800b3d2:	6823      	ldr	r3, [r4, #0]
 800b3d4:	07df      	lsls	r7, r3, #31
 800b3d6:	d508      	bpl.n	800b3ea <_printf_i+0x142>
 800b3d8:	6923      	ldr	r3, [r4, #16]
 800b3da:	6861      	ldr	r1, [r4, #4]
 800b3dc:	4299      	cmp	r1, r3
 800b3de:	bfde      	ittt	le
 800b3e0:	2330      	movle	r3, #48	@ 0x30
 800b3e2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3e6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b3ea:	1b92      	subs	r2, r2, r6
 800b3ec:	6122      	str	r2, [r4, #16]
 800b3ee:	f8cd a000 	str.w	sl, [sp]
 800b3f2:	464b      	mov	r3, r9
 800b3f4:	aa03      	add	r2, sp, #12
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	f7ff fee7 	bl	800b1cc <_printf_common>
 800b3fe:	3001      	adds	r0, #1
 800b400:	d14a      	bne.n	800b498 <_printf_i+0x1f0>
 800b402:	f04f 30ff 	mov.w	r0, #4294967295
 800b406:	b004      	add	sp, #16
 800b408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b40c:	6823      	ldr	r3, [r4, #0]
 800b40e:	f043 0320 	orr.w	r3, r3, #32
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	4832      	ldr	r0, [pc, #200]	@ (800b4e0 <_printf_i+0x238>)
 800b416:	2778      	movs	r7, #120	@ 0x78
 800b418:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	6831      	ldr	r1, [r6, #0]
 800b420:	061f      	lsls	r7, r3, #24
 800b422:	f851 5b04 	ldr.w	r5, [r1], #4
 800b426:	d402      	bmi.n	800b42e <_printf_i+0x186>
 800b428:	065f      	lsls	r7, r3, #25
 800b42a:	bf48      	it	mi
 800b42c:	b2ad      	uxthmi	r5, r5
 800b42e:	6031      	str	r1, [r6, #0]
 800b430:	07d9      	lsls	r1, r3, #31
 800b432:	bf44      	itt	mi
 800b434:	f043 0320 	orrmi.w	r3, r3, #32
 800b438:	6023      	strmi	r3, [r4, #0]
 800b43a:	b11d      	cbz	r5, 800b444 <_printf_i+0x19c>
 800b43c:	2310      	movs	r3, #16
 800b43e:	e7ad      	b.n	800b39c <_printf_i+0xf4>
 800b440:	4826      	ldr	r0, [pc, #152]	@ (800b4dc <_printf_i+0x234>)
 800b442:	e7e9      	b.n	800b418 <_printf_i+0x170>
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	f023 0320 	bic.w	r3, r3, #32
 800b44a:	6023      	str	r3, [r4, #0]
 800b44c:	e7f6      	b.n	800b43c <_printf_i+0x194>
 800b44e:	4616      	mov	r6, r2
 800b450:	e7bd      	b.n	800b3ce <_printf_i+0x126>
 800b452:	6833      	ldr	r3, [r6, #0]
 800b454:	6825      	ldr	r5, [r4, #0]
 800b456:	6961      	ldr	r1, [r4, #20]
 800b458:	1d18      	adds	r0, r3, #4
 800b45a:	6030      	str	r0, [r6, #0]
 800b45c:	062e      	lsls	r6, r5, #24
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	d501      	bpl.n	800b466 <_printf_i+0x1be>
 800b462:	6019      	str	r1, [r3, #0]
 800b464:	e002      	b.n	800b46c <_printf_i+0x1c4>
 800b466:	0668      	lsls	r0, r5, #25
 800b468:	d5fb      	bpl.n	800b462 <_printf_i+0x1ba>
 800b46a:	8019      	strh	r1, [r3, #0]
 800b46c:	2300      	movs	r3, #0
 800b46e:	6123      	str	r3, [r4, #16]
 800b470:	4616      	mov	r6, r2
 800b472:	e7bc      	b.n	800b3ee <_printf_i+0x146>
 800b474:	6833      	ldr	r3, [r6, #0]
 800b476:	1d1a      	adds	r2, r3, #4
 800b478:	6032      	str	r2, [r6, #0]
 800b47a:	681e      	ldr	r6, [r3, #0]
 800b47c:	6862      	ldr	r2, [r4, #4]
 800b47e:	2100      	movs	r1, #0
 800b480:	4630      	mov	r0, r6
 800b482:	f7f4 fea5 	bl	80001d0 <memchr>
 800b486:	b108      	cbz	r0, 800b48c <_printf_i+0x1e4>
 800b488:	1b80      	subs	r0, r0, r6
 800b48a:	6060      	str	r0, [r4, #4]
 800b48c:	6863      	ldr	r3, [r4, #4]
 800b48e:	6123      	str	r3, [r4, #16]
 800b490:	2300      	movs	r3, #0
 800b492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b496:	e7aa      	b.n	800b3ee <_printf_i+0x146>
 800b498:	6923      	ldr	r3, [r4, #16]
 800b49a:	4632      	mov	r2, r6
 800b49c:	4649      	mov	r1, r9
 800b49e:	4640      	mov	r0, r8
 800b4a0:	47d0      	blx	sl
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d0ad      	beq.n	800b402 <_printf_i+0x15a>
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	079b      	lsls	r3, r3, #30
 800b4aa:	d413      	bmi.n	800b4d4 <_printf_i+0x22c>
 800b4ac:	68e0      	ldr	r0, [r4, #12]
 800b4ae:	9b03      	ldr	r3, [sp, #12]
 800b4b0:	4298      	cmp	r0, r3
 800b4b2:	bfb8      	it	lt
 800b4b4:	4618      	movlt	r0, r3
 800b4b6:	e7a6      	b.n	800b406 <_printf_i+0x15e>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	4632      	mov	r2, r6
 800b4bc:	4649      	mov	r1, r9
 800b4be:	4640      	mov	r0, r8
 800b4c0:	47d0      	blx	sl
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	d09d      	beq.n	800b402 <_printf_i+0x15a>
 800b4c6:	3501      	adds	r5, #1
 800b4c8:	68e3      	ldr	r3, [r4, #12]
 800b4ca:	9903      	ldr	r1, [sp, #12]
 800b4cc:	1a5b      	subs	r3, r3, r1
 800b4ce:	42ab      	cmp	r3, r5
 800b4d0:	dcf2      	bgt.n	800b4b8 <_printf_i+0x210>
 800b4d2:	e7eb      	b.n	800b4ac <_printf_i+0x204>
 800b4d4:	2500      	movs	r5, #0
 800b4d6:	f104 0619 	add.w	r6, r4, #25
 800b4da:	e7f5      	b.n	800b4c8 <_printf_i+0x220>
 800b4dc:	0800b895 	.word	0x0800b895
 800b4e0:	0800b8a6 	.word	0x0800b8a6

0800b4e4 <__sflush_r>:
 800b4e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ec:	0716      	lsls	r6, r2, #28
 800b4ee:	4605      	mov	r5, r0
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	d454      	bmi.n	800b59e <__sflush_r+0xba>
 800b4f4:	684b      	ldr	r3, [r1, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	dc02      	bgt.n	800b500 <__sflush_r+0x1c>
 800b4fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	dd48      	ble.n	800b592 <__sflush_r+0xae>
 800b500:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b502:	2e00      	cmp	r6, #0
 800b504:	d045      	beq.n	800b592 <__sflush_r+0xae>
 800b506:	2300      	movs	r3, #0
 800b508:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b50c:	682f      	ldr	r7, [r5, #0]
 800b50e:	6a21      	ldr	r1, [r4, #32]
 800b510:	602b      	str	r3, [r5, #0]
 800b512:	d030      	beq.n	800b576 <__sflush_r+0x92>
 800b514:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	0759      	lsls	r1, r3, #29
 800b51a:	d505      	bpl.n	800b528 <__sflush_r+0x44>
 800b51c:	6863      	ldr	r3, [r4, #4]
 800b51e:	1ad2      	subs	r2, r2, r3
 800b520:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b522:	b10b      	cbz	r3, 800b528 <__sflush_r+0x44>
 800b524:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b526:	1ad2      	subs	r2, r2, r3
 800b528:	2300      	movs	r3, #0
 800b52a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b52c:	6a21      	ldr	r1, [r4, #32]
 800b52e:	4628      	mov	r0, r5
 800b530:	47b0      	blx	r6
 800b532:	1c43      	adds	r3, r0, #1
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	d106      	bne.n	800b546 <__sflush_r+0x62>
 800b538:	6829      	ldr	r1, [r5, #0]
 800b53a:	291d      	cmp	r1, #29
 800b53c:	d82b      	bhi.n	800b596 <__sflush_r+0xb2>
 800b53e:	4a2a      	ldr	r2, [pc, #168]	@ (800b5e8 <__sflush_r+0x104>)
 800b540:	40ca      	lsrs	r2, r1
 800b542:	07d6      	lsls	r6, r2, #31
 800b544:	d527      	bpl.n	800b596 <__sflush_r+0xb2>
 800b546:	2200      	movs	r2, #0
 800b548:	6062      	str	r2, [r4, #4]
 800b54a:	04d9      	lsls	r1, r3, #19
 800b54c:	6922      	ldr	r2, [r4, #16]
 800b54e:	6022      	str	r2, [r4, #0]
 800b550:	d504      	bpl.n	800b55c <__sflush_r+0x78>
 800b552:	1c42      	adds	r2, r0, #1
 800b554:	d101      	bne.n	800b55a <__sflush_r+0x76>
 800b556:	682b      	ldr	r3, [r5, #0]
 800b558:	b903      	cbnz	r3, 800b55c <__sflush_r+0x78>
 800b55a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b55c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b55e:	602f      	str	r7, [r5, #0]
 800b560:	b1b9      	cbz	r1, 800b592 <__sflush_r+0xae>
 800b562:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b566:	4299      	cmp	r1, r3
 800b568:	d002      	beq.n	800b570 <__sflush_r+0x8c>
 800b56a:	4628      	mov	r0, r5
 800b56c:	f7ff fca2 	bl	800aeb4 <_free_r>
 800b570:	2300      	movs	r3, #0
 800b572:	6363      	str	r3, [r4, #52]	@ 0x34
 800b574:	e00d      	b.n	800b592 <__sflush_r+0xae>
 800b576:	2301      	movs	r3, #1
 800b578:	4628      	mov	r0, r5
 800b57a:	47b0      	blx	r6
 800b57c:	4602      	mov	r2, r0
 800b57e:	1c50      	adds	r0, r2, #1
 800b580:	d1c9      	bne.n	800b516 <__sflush_r+0x32>
 800b582:	682b      	ldr	r3, [r5, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d0c6      	beq.n	800b516 <__sflush_r+0x32>
 800b588:	2b1d      	cmp	r3, #29
 800b58a:	d001      	beq.n	800b590 <__sflush_r+0xac>
 800b58c:	2b16      	cmp	r3, #22
 800b58e:	d11e      	bne.n	800b5ce <__sflush_r+0xea>
 800b590:	602f      	str	r7, [r5, #0]
 800b592:	2000      	movs	r0, #0
 800b594:	e022      	b.n	800b5dc <__sflush_r+0xf8>
 800b596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b59a:	b21b      	sxth	r3, r3
 800b59c:	e01b      	b.n	800b5d6 <__sflush_r+0xf2>
 800b59e:	690f      	ldr	r7, [r1, #16]
 800b5a0:	2f00      	cmp	r7, #0
 800b5a2:	d0f6      	beq.n	800b592 <__sflush_r+0xae>
 800b5a4:	0793      	lsls	r3, r2, #30
 800b5a6:	680e      	ldr	r6, [r1, #0]
 800b5a8:	bf08      	it	eq
 800b5aa:	694b      	ldreq	r3, [r1, #20]
 800b5ac:	600f      	str	r7, [r1, #0]
 800b5ae:	bf18      	it	ne
 800b5b0:	2300      	movne	r3, #0
 800b5b2:	eba6 0807 	sub.w	r8, r6, r7
 800b5b6:	608b      	str	r3, [r1, #8]
 800b5b8:	f1b8 0f00 	cmp.w	r8, #0
 800b5bc:	dde9      	ble.n	800b592 <__sflush_r+0xae>
 800b5be:	6a21      	ldr	r1, [r4, #32]
 800b5c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b5c2:	4643      	mov	r3, r8
 800b5c4:	463a      	mov	r2, r7
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	47b0      	blx	r6
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	dc08      	bgt.n	800b5e0 <__sflush_r+0xfc>
 800b5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5e0:	4407      	add	r7, r0
 800b5e2:	eba8 0800 	sub.w	r8, r8, r0
 800b5e6:	e7e7      	b.n	800b5b8 <__sflush_r+0xd4>
 800b5e8:	20400001 	.word	0x20400001

0800b5ec <_fflush_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	690b      	ldr	r3, [r1, #16]
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	b913      	cbnz	r3, 800b5fc <_fflush_r+0x10>
 800b5f6:	2500      	movs	r5, #0
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	b118      	cbz	r0, 800b606 <_fflush_r+0x1a>
 800b5fe:	6a03      	ldr	r3, [r0, #32]
 800b600:	b90b      	cbnz	r3, 800b606 <_fflush_r+0x1a>
 800b602:	f7ff f98b 	bl	800a91c <__sinit>
 800b606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d0f3      	beq.n	800b5f6 <_fflush_r+0xa>
 800b60e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b610:	07d0      	lsls	r0, r2, #31
 800b612:	d404      	bmi.n	800b61e <_fflush_r+0x32>
 800b614:	0599      	lsls	r1, r3, #22
 800b616:	d402      	bmi.n	800b61e <_fflush_r+0x32>
 800b618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b61a:	f7ff fc3a 	bl	800ae92 <__retarget_lock_acquire_recursive>
 800b61e:	4628      	mov	r0, r5
 800b620:	4621      	mov	r1, r4
 800b622:	f7ff ff5f 	bl	800b4e4 <__sflush_r>
 800b626:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b628:	07da      	lsls	r2, r3, #31
 800b62a:	4605      	mov	r5, r0
 800b62c:	d4e4      	bmi.n	800b5f8 <_fflush_r+0xc>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	059b      	lsls	r3, r3, #22
 800b632:	d4e1      	bmi.n	800b5f8 <_fflush_r+0xc>
 800b634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b636:	f7ff fc2d 	bl	800ae94 <__retarget_lock_release_recursive>
 800b63a:	e7dd      	b.n	800b5f8 <_fflush_r+0xc>

0800b63c <__swhatbuf_r>:
 800b63c:	b570      	push	{r4, r5, r6, lr}
 800b63e:	460c      	mov	r4, r1
 800b640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b644:	2900      	cmp	r1, #0
 800b646:	b096      	sub	sp, #88	@ 0x58
 800b648:	4615      	mov	r5, r2
 800b64a:	461e      	mov	r6, r3
 800b64c:	da0d      	bge.n	800b66a <__swhatbuf_r+0x2e>
 800b64e:	89a3      	ldrh	r3, [r4, #12]
 800b650:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b654:	f04f 0100 	mov.w	r1, #0
 800b658:	bf14      	ite	ne
 800b65a:	2340      	movne	r3, #64	@ 0x40
 800b65c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b660:	2000      	movs	r0, #0
 800b662:	6031      	str	r1, [r6, #0]
 800b664:	602b      	str	r3, [r5, #0]
 800b666:	b016      	add	sp, #88	@ 0x58
 800b668:	bd70      	pop	{r4, r5, r6, pc}
 800b66a:	466a      	mov	r2, sp
 800b66c:	f000 f848 	bl	800b700 <_fstat_r>
 800b670:	2800      	cmp	r0, #0
 800b672:	dbec      	blt.n	800b64e <__swhatbuf_r+0x12>
 800b674:	9901      	ldr	r1, [sp, #4]
 800b676:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b67a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b67e:	4259      	negs	r1, r3
 800b680:	4159      	adcs	r1, r3
 800b682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b686:	e7eb      	b.n	800b660 <__swhatbuf_r+0x24>

0800b688 <__smakebuf_r>:
 800b688:	898b      	ldrh	r3, [r1, #12]
 800b68a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b68c:	079d      	lsls	r5, r3, #30
 800b68e:	4606      	mov	r6, r0
 800b690:	460c      	mov	r4, r1
 800b692:	d507      	bpl.n	800b6a4 <__smakebuf_r+0x1c>
 800b694:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b698:	6023      	str	r3, [r4, #0]
 800b69a:	6123      	str	r3, [r4, #16]
 800b69c:	2301      	movs	r3, #1
 800b69e:	6163      	str	r3, [r4, #20]
 800b6a0:	b003      	add	sp, #12
 800b6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6a4:	ab01      	add	r3, sp, #4
 800b6a6:	466a      	mov	r2, sp
 800b6a8:	f7ff ffc8 	bl	800b63c <__swhatbuf_r>
 800b6ac:	9f00      	ldr	r7, [sp, #0]
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	4630      	mov	r0, r6
 800b6b4:	f7ff f81a 	bl	800a6ec <_malloc_r>
 800b6b8:	b948      	cbnz	r0, 800b6ce <__smakebuf_r+0x46>
 800b6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6be:	059a      	lsls	r2, r3, #22
 800b6c0:	d4ee      	bmi.n	800b6a0 <__smakebuf_r+0x18>
 800b6c2:	f023 0303 	bic.w	r3, r3, #3
 800b6c6:	f043 0302 	orr.w	r3, r3, #2
 800b6ca:	81a3      	strh	r3, [r4, #12]
 800b6cc:	e7e2      	b.n	800b694 <__smakebuf_r+0xc>
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	6020      	str	r0, [r4, #0]
 800b6d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6d6:	81a3      	strh	r3, [r4, #12]
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b6de:	b15b      	cbz	r3, 800b6f8 <__smakebuf_r+0x70>
 800b6e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f000 f81d 	bl	800b724 <_isatty_r>
 800b6ea:	b128      	cbz	r0, 800b6f8 <__smakebuf_r+0x70>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	f023 0303 	bic.w	r3, r3, #3
 800b6f2:	f043 0301 	orr.w	r3, r3, #1
 800b6f6:	81a3      	strh	r3, [r4, #12]
 800b6f8:	89a3      	ldrh	r3, [r4, #12]
 800b6fa:	431d      	orrs	r5, r3
 800b6fc:	81a5      	strh	r5, [r4, #12]
 800b6fe:	e7cf      	b.n	800b6a0 <__smakebuf_r+0x18>

0800b700 <_fstat_r>:
 800b700:	b538      	push	{r3, r4, r5, lr}
 800b702:	4d07      	ldr	r5, [pc, #28]	@ (800b720 <_fstat_r+0x20>)
 800b704:	2300      	movs	r3, #0
 800b706:	4604      	mov	r4, r0
 800b708:	4608      	mov	r0, r1
 800b70a:	4611      	mov	r1, r2
 800b70c:	602b      	str	r3, [r5, #0]
 800b70e:	f7f5 fe26 	bl	800135e <_fstat>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	d102      	bne.n	800b71c <_fstat_r+0x1c>
 800b716:	682b      	ldr	r3, [r5, #0]
 800b718:	b103      	cbz	r3, 800b71c <_fstat_r+0x1c>
 800b71a:	6023      	str	r3, [r4, #0]
 800b71c:	bd38      	pop	{r3, r4, r5, pc}
 800b71e:	bf00      	nop
 800b720:	20000af8 	.word	0x20000af8

0800b724 <_isatty_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4d06      	ldr	r5, [pc, #24]	@ (800b740 <_isatty_r+0x1c>)
 800b728:	2300      	movs	r3, #0
 800b72a:	4604      	mov	r4, r0
 800b72c:	4608      	mov	r0, r1
 800b72e:	602b      	str	r3, [r5, #0]
 800b730:	f7f5 fe25 	bl	800137e <_isatty>
 800b734:	1c43      	adds	r3, r0, #1
 800b736:	d102      	bne.n	800b73e <_isatty_r+0x1a>
 800b738:	682b      	ldr	r3, [r5, #0]
 800b73a:	b103      	cbz	r3, 800b73e <_isatty_r+0x1a>
 800b73c:	6023      	str	r3, [r4, #0]
 800b73e:	bd38      	pop	{r3, r4, r5, pc}
 800b740:	20000af8 	.word	0x20000af8

0800b744 <_init>:
 800b744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b746:	bf00      	nop
 800b748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b74a:	bc08      	pop	{r3}
 800b74c:	469e      	mov	lr, r3
 800b74e:	4770      	bx	lr

0800b750 <_fini>:
 800b750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b752:	bf00      	nop
 800b754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b756:	bc08      	pop	{r3}
 800b758:	469e      	mov	lr, r3
 800b75a:	4770      	bx	lr
