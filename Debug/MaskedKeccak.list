
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c210  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800c3a0  0800c3a0  0000d3a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7c4  0800c7c4  0000e088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c7c4  0800c7c4  0000d7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7cc  0800c7cc  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7cc  0800c7cc  0000d7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7d0  0800c7d0  0000d7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800c7d4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b882  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a89  00000000  00000000  0002993a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001688  00000000  00000000  0002e3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113b  00000000  00000000  0002fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006deb  00000000  00000000  00030b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000204a9  00000000  00000000  00037976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e8c  00000000  00000000  00057e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129cab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006674  00000000  00000000  00129cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00130364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c388 	.word	0x0800c388

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c388 	.word	0x0800c388

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <theta>:
    x = z;
  }
}

void theta(uint64_t* state)
{
 800059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a0:	b0a0      	sub	sp, #128	@ 0x80
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Theta */

  uint64_t C[5] = {0, 0, 0, 0, 0};
 80005a6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80005aa:	2328      	movs	r3, #40	@ 0x28
 80005ac:	461a      	mov	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f00b f9d4 	bl	800b95c <memset>
  uint64_t D[5] = {0, 0, 0, 0, 0};
 80005b4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80005b8:	2328      	movs	r3, #40	@ 0x28
 80005ba:	461a      	mov	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f00b f9cd 	bl	800b95c <memset>

  int x, y;
  for (x = 0; x < 5; ++x) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80005c6:	e043      	b.n	8000650 <theta+0xb4>
    C[x] = state[x] ^ state[5 + x] ^ state[10 + x] ^ state[15 + x] ^ state[20 + x];
 80005c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ca:	00da      	lsls	r2, r3, #3
 80005cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ce:	4413      	add	r3, r2
 80005d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80005d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005d6:	3305      	adds	r3, #5
 80005d8:	00da      	lsls	r2, r3, #3
 80005da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005dc:	4413      	add	r3, r2
 80005de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e2:	ea80 0402 	eor.w	r4, r0, r2
 80005e6:	ea81 0503 	eor.w	r5, r1, r3
 80005ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ec:	330a      	adds	r3, #10
 80005ee:	00da      	lsls	r2, r3, #3
 80005f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f2:	4413      	add	r3, r2
 80005f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f8:	ea84 0a02 	eor.w	sl, r4, r2
 80005fc:	ea85 0b03 	eor.w	fp, r5, r3
 8000600:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000602:	330f      	adds	r3, #15
 8000604:	00da      	lsls	r2, r3, #3
 8000606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000608:	4413      	add	r3, r2
 800060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800060e:	ea8a 0102 	eor.w	r1, sl, r2
 8000612:	61b9      	str	r1, [r7, #24]
 8000614:	ea8b 0303 	eor.w	r3, fp, r3
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800061c:	3314      	adds	r3, #20
 800061e:	00da      	lsls	r2, r3, #3
 8000620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000622:	4413      	add	r3, r2
 8000624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000628:	69b9      	ldr	r1, [r7, #24]
 800062a:	4051      	eors	r1, r2
 800062c:	6139      	str	r1, [r7, #16]
 800062e:	69f9      	ldr	r1, [r7, #28]
 8000630:	404b      	eors	r3, r1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	3360      	adds	r3, #96	@ 0x60
 800063a:	f107 0220 	add.w	r2, r7, #32
 800063e:	4413      	add	r3, r2
 8000640:	3b30      	subs	r3, #48	@ 0x30
 8000642:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000646:	e9c3 1200 	strd	r1, r2, [r3]
  for (x = 0; x < 5; ++x) {
 800064a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800064c:	3301      	adds	r3, #1
 800064e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000652:	2b04      	cmp	r3, #4
 8000654:	ddb8      	ble.n	80005c8 <theta+0x2c>
  }

  for (x = 0; x < 5; ++x) {
 8000656:	2300      	movs	r3, #0
 8000658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800065a:	e072      	b.n	8000742 <theta+0x1a6>
    /* in order to avoid negative mod values,
      we've replaced "(x - 1) % 5" with "(x + 4) % 5" */
    D[x] = C[(x + 4) % 5] ^ ROTL64(C[(x + 1) % 5], 1);
 800065c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800065e:	1d19      	adds	r1, r3, #4
 8000660:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <theta+0x1b8>)
 8000662:	fb83 2301 	smull	r2, r3, r3, r1
 8000666:	105a      	asrs	r2, r3, #1
 8000668:	17cb      	asrs	r3, r1, #31
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	00d3      	lsls	r3, r2, #3
 8000676:	3360      	adds	r3, #96	@ 0x60
 8000678:	f107 0220 	add.w	r2, r7, #32
 800067c:	4413      	add	r3, r2
 800067e:	3b30      	subs	r3, #48	@ 0x30
 8000680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000686:	1c5c      	adds	r4, r3, #1
 8000688:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <theta+0x1b8>)
 800068a:	fb83 2304 	smull	r2, r3, r3, r4
 800068e:	105a      	asrs	r2, r3, #1
 8000690:	17e3      	asrs	r3, r4, #31
 8000692:	1ad2      	subs	r2, r2, r3
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	1ae2      	subs	r2, r4, r3
 800069c:	00d3      	lsls	r3, r2, #3
 800069e:	3360      	adds	r3, #96	@ 0x60
 80006a0:	f107 0220 	add.w	r2, r7, #32
 80006a4:	4413      	add	r3, r2
 80006a6:	3b30      	subs	r3, #48	@ 0x30
 80006a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ac:	0fd5      	lsrs	r5, r2, #31
 80006ae:	005c      	lsls	r4, r3, #1
 80006b0:	ea45 0904 	orr.w	r9, r5, r4
 80006b4:	0fdc      	lsrs	r4, r3, #31
 80006b6:	0053      	lsls	r3, r2, #1
 80006b8:	ea44 0803 	orr.w	r8, r4, r3
 80006bc:	ea80 0308 	eor.w	r3, r0, r8
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	ea81 0309 	eor.w	r3, r1, r9
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	3360      	adds	r3, #96	@ 0x60
 80006ce:	f107 0220 	add.w	r2, r7, #32
 80006d2:	4413      	add	r3, r2
 80006d4:	3b58      	subs	r3, #88	@ 0x58
 80006d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80006da:	e9c3 1200 	strd	r1, r2, [r3]

    for (y = 0; y < 5; ++y) {
 80006de:	2300      	movs	r3, #0
 80006e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80006e2:	e028      	b.n	8000736 <theta+0x19a>
      state[y * 5 + x] = state[y * 5 + x] ^ D[x];
 80006e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	441a      	add	r2, r3
 80006ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ee:	4413      	add	r3, r2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f4:	4413      	add	r3, r2
 80006f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	3360      	adds	r3, #96	@ 0x60
 8000700:	f107 0220 	add.w	r2, r7, #32
 8000704:	4413      	add	r3, r2
 8000706:	3b58      	subs	r3, #88	@ 0x58
 8000708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070c:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 800070e:	462c      	mov	r4, r5
 8000710:	00a4      	lsls	r4, r4, #2
 8000712:	4425      	add	r5, r4
 8000714:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8000716:	442c      	add	r4, r5
 8000718:	00e4      	lsls	r4, r4, #3
 800071a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 800071c:	442c      	add	r4, r5
 800071e:	ea80 0502 	eor.w	r5, r0, r2
 8000722:	603d      	str	r5, [r7, #0]
 8000724:	404b      	eors	r3, r1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800072c:	e9c4 2300 	strd	r2, r3, [r4]
    for (y = 0; y < 5; ++y) {
 8000730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000732:	3301      	adds	r3, #1
 8000734:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000738:	2b04      	cmp	r3, #4
 800073a:	ddd3      	ble.n	80006e4 <theta+0x148>
  for (x = 0; x < 5; ++x) {
 800073c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800073e:	3301      	adds	r3, #1
 8000740:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000744:	2b04      	cmp	r3, #4
 8000746:	dd89      	ble.n	800065c <theta+0xc0>
    }
  }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3780      	adds	r7, #128	@ 0x80
 800074e:	46bd      	mov	sp, r7
 8000750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000754:	66666667 	.word	0x66666667

08000758 <pad101>:
    }
  }
}

int pad101(int r, int blocks, int l, uint8_t* M, uint8_t* P)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	60f8      	str	r0, [r7, #12]
 8000760:	60b9      	str	r1, [r7, #8]
 8000762:	607a      	str	r2, [r7, #4]
 8000764:	603b      	str	r3, [r7, #0]
    int block_size = r / 8;
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2b00      	cmp	r3, #0
 800076a:	da00      	bge.n	800076e <pad101+0x16>
 800076c:	3307      	adds	r3, #7
 800076e:	10db      	asrs	r3, r3, #3
 8000770:	61bb      	str	r3, [r7, #24]

    /* length of the padded block */
    size_t block_len = (blocks + 1) * block_size;
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	3301      	adds	r3, #1
 8000776:	69ba      	ldr	r2, [r7, #24]
 8000778:	fb02 f303 	mul.w	r3, r2, r3
 800077c:	617b      	str	r3, [r7, #20]

    /* zero out data and copy M into P */
    memset(P, 0, block_len * sizeof(uint8_t));
 800077e:	697a      	ldr	r2, [r7, #20]
 8000780:	2100      	movs	r1, #0
 8000782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000784:	f00b f8ea 	bl	800b95c <memset>
    for (int i = 0; i < l; ++i) {
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	e00a      	b.n	80007a4 <pad101+0x4c>
        P[i] = M[i];
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	441a      	add	r2, r3
 8000794:	69fb      	ldr	r3, [r7, #28]
 8000796:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000798:	440b      	add	r3, r1
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < l; ++i) {
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3301      	adds	r3, #1
 80007a2:	61fb      	str	r3, [r7, #28]
 80007a4:	69fa      	ldr	r2, [r7, #28]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	dbf0      	blt.n	800078e <pad101+0x36>
    }

    /* CRYSTALS-style padding */
    P[l] ^= 0x06;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007b0:	4413      	add	r3, r2
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007b8:	440b      	add	r3, r1
 80007ba:	f082 0206 	eor.w	r2, r2, #6
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	701a      	strb	r2, [r3, #0]
    P[block_len - 1] ^= 0x80;
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80007c8:	4413      	add	r3, r2
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	697a      	ldr	r2, [r7, #20]
 80007ce:	3a01      	subs	r2, #1
 80007d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007d2:	440a      	add	r2, r1
 80007d4:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80007d8:	43db      	mvns	r3, r3
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	7013      	strb	r3, [r2, #0]

    return block_len;
 80007de:	697b      	ldr	r3, [r7, #20]
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3720      	adds	r7, #32
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	f04f 33ff 	mov.w	r3, #4294967295
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <_write+0x28>)
 8000800:	f006 fc65 	bl	80070ce <HAL_UART_Transmit>
    return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200001a8 	.word	0x200001a8

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000818:	b0fb      	sub	sp, #492	@ 0x1ec
 800081a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f002 faae 	bl	8002d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 fa2a 	bl	8000c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f000 fb64 	bl	8000ef0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000828:	f000 fa90 	bl	8000d4c <MX_I2C1_Init>
  MX_I2S3_Init();
 800082c:	f000 fabc 	bl	8000da8 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000830:	f000 fafe 	bl	8000e30 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000834:	f00a f9f4 	bl	800ac20 <MX_USB_HOST_Init>
  MX_RNG_Init();
 8000838:	f000 fae6 	bl	8000e08 <MX_RNG_Init>
  MX_USART2_UART_Init();
 800083c:	f000 fb2e 	bl	8000e9c <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8000840:	2300      	movs	r3, #0
 8000842:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8000846:	4bd1      	ldr	r3, [pc, #836]	@ (8000b8c <main+0x378>)
 8000848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800084a:	4ad0      	ldr	r2, [pc, #832]	@ (8000b8c <main+0x378>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	6353      	str	r3, [r2, #52]	@ 0x34
 8000852:	4bce      	ldr	r3, [pc, #824]	@ (8000b8c <main+0x378>)
 8000854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800085e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
  HAL_RNG_Init(&hrng);
 8000862:	48cb      	ldr	r0, [pc, #812]	@ (8000b90 <main+0x37c>)
 8000864:	f006 fada 	bl	8006e1c <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8000868:	4bca      	ldr	r3, [pc, #808]	@ (8000b94 <main+0x380>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6898      	ldr	r0, [r3, #8]
 800086e:	2300      	movs	r3, #0
 8000870:	2202      	movs	r2, #2
 8000872:	2100      	movs	r1, #0
 8000874:	f00a fed6 	bl	800b624 <setvbuf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 8000878:	466b      	mov	r3, sp
 800087a:	461e      	mov	r6, r3

	      const uint8_t input[] = {
 800087c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000880:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8000884:	4ac4      	ldr	r2, [pc, #784]	@ (8000b98 <main+0x384>)
 8000886:	461d      	mov	r5, r3
 8000888:	4614      	mov	r4, r2
 800088a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800088c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800088e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000892:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	          0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	          0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	          0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	          0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
	      };
	      size_t input_len = sizeof(input);
 8000896:	2320      	movs	r3, #32
 8000898:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

	      // SHA3-512 has: r = 576, c = 1024
	      int r = 576;
 800089c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80008a0:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
	      int c = 1024;
 80008a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008a8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
	      int b = r + c;
 80008ac:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80008b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80008b4:	4413      	add	r3, r2
 80008b6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	      int block_size = r / 8;
 80008ba:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80008be:	2b00      	cmp	r3, #0
 80008c0:	da00      	bge.n	80008c4 <main+0xb0>
 80008c2:	3307      	adds	r3, #7
 80008c4:	10db      	asrs	r3, r3, #3
 80008c6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac

	      // padded input buffer
	      int blocks = input_len / block_size;
 80008ca:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80008ce:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80008d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80008d6:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
	      uint8_t padded[block_size * (blocks + 1)];
 80008da:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80008de:	1c5a      	adds	r2, r3, #1
 80008e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80008e4:	fb03 f102 	mul.w	r1, r3, r2
 80008e8:	1e4b      	subs	r3, r1, #1
 80008ea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80008ee:	460a      	mov	r2, r1
 80008f0:	2300      	movs	r3, #0
 80008f2:	4692      	mov	sl, r2
 80008f4:	469b      	mov	fp, r3
 80008f6:	f04f 0200 	mov.w	r2, #0
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000902:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000906:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800090a:	460a      	mov	r2, r1
 800090c:	2300      	movs	r3, #0
 800090e:	613a      	str	r2, [r7, #16]
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800091e:	4628      	mov	r0, r5
 8000920:	00c3      	lsls	r3, r0, #3
 8000922:	4620      	mov	r0, r4
 8000924:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000928:	4620      	mov	r0, r4
 800092a:	00c2      	lsls	r2, r0, #3
 800092c:	460b      	mov	r3, r1
 800092e:	3307      	adds	r3, #7
 8000930:	08db      	lsrs	r3, r3, #3
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	ebad 0d03 	sub.w	sp, sp, r3
 8000938:	ab02      	add	r3, sp, #8
 800093a:	3300      	adds	r3, #0
 800093c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	      int padded_len = pad101(r, blocks, input_len, (uint8_t *)input, padded);
 8000940:	f107 0220 	add.w	r2, r7, #32
 8000944:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	4613      	mov	r3, r2
 800094c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000950:	f8d7 11a8 	ldr.w	r1, [r7, #424]	@ 0x1a8
 8000954:	f8d7 01b8 	ldr.w	r0, [r7, #440]	@ 0x1b8
 8000958:	f7ff fefe 	bl	8000758 <pad101>
 800095c:	f8c7 019c 	str.w	r0, [r7, #412]	@ 0x19c

	      // 25-lane state
	      uint64_t state[25] = {0};
 8000960:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000964:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000968:	4618      	mov	r0, r3
 800096a:	23c8      	movs	r3, #200	@ 0xc8
 800096c:	461a      	mov	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f00a fff4 	bl	800b95c <memset>

	      // absorb one block manually
	      for (int i = 0; i < r / 64; i++) {
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800097a:	e071      	b.n	8000a60 <main+0x24c>
	          uint32_t lo = 0, hi = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	          for (int j = 0; j < 4; j++) {
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800098e:	e02b      	b.n	80009e8 <main+0x1d4>
	              lo |= ((uint32_t)padded[i * 8 + j]) << (8 * j);
 8000990:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000994:	00da      	lsls	r2, r3, #3
 8000996:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800099a:	441a      	add	r2, r3
 800099c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80009a0:	5c9b      	ldrb	r3, [r3, r2]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	409a      	lsls	r2, r3
 80009ac:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80009b0:	4313      	orrs	r3, r2
 80009b2:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
	              hi |= ((uint32_t)padded[i * 8 + 4 + j]) << (8 * j);
 80009b6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80009ba:	00db      	lsls	r3, r3, #3
 80009bc:	1d1a      	adds	r2, r3, #4
 80009be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009c2:	441a      	add	r2, r3
 80009c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80009c8:	5c9b      	ldrb	r3, [r3, r2]
 80009ca:	461a      	mov	r2, r3
 80009cc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	409a      	lsls	r2, r3
 80009d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80009d8:	4313      	orrs	r3, r2
 80009da:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
	          for (int j = 0; j < 4; j++) {
 80009de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009e2:	3301      	adds	r3, #1
 80009e4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80009e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80009ec:	2b03      	cmp	r3, #3
 80009ee:	ddcf      	ble.n	8000990 <main+0x17c>
	          }
	          state[i] ^= ((uint64_t)hi << 32) | lo;
 80009f0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80009f4:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 80009f8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	4413      	add	r3, r2
 8000a00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000a04:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8000a08:	2200      	movs	r2, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	60fa      	str	r2, [r7, #12]
 8000a0e:	f04f 0200 	mov.w	r2, #0
 8000a12:	f04f 0300 	mov.w	r3, #0
 8000a16:	68b9      	ldr	r1, [r7, #8]
 8000a18:	000b      	movs	r3, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f8d7 11d8 	ldr.w	r1, [r7, #472]	@ 0x1d8
 8000a20:	2000      	movs	r0, #0
 8000a22:	61b9      	str	r1, [r7, #24]
 8000a24:	61f8      	str	r0, [r7, #28]
 8000a26:	69b9      	ldr	r1, [r7, #24]
 8000a28:	ea42 0801 	orr.w	r8, r2, r1
 8000a2c:	69f9      	ldr	r1, [r7, #28]
 8000a2e:	ea43 0901 	orr.w	r9, r3, r1
 8000a32:	ea84 0308 	eor.w	r3, r4, r8
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	ea85 0309 	eor.w	r3, r5, r9
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000a42:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000a46:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000a4a:	00db      	lsls	r3, r3, #3
 8000a4c:	4413      	add	r3, r2
 8000a4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000a52:	e9c3 1200 	strd	r1, r2, [r3]
	      for (int i = 0; i < r / 64; i++) {
 8000a56:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000a60:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	da00      	bge.n	8000a6a <main+0x256>
 8000a68:	333f      	adds	r3, #63	@ 0x3f
 8000a6a:	119b      	asrs	r3, r3, #6
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8000a72:	4293      	cmp	r3, r2
 8000a74:	db82      	blt.n	800097c <main+0x168>
	      }

	      // Print state before theta
	      printf("== Before Theta ==\n");
 8000a76:	4849      	ldr	r0, [pc, #292]	@ (8000b9c <main+0x388>)
 8000a78:	f00a fdcc 	bl	800b614 <puts>
	      for (int i = 0; i < 25; i++) {
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8000a82:	e02d      	b.n	8000ae0 <main+0x2cc>
	          uint32_t lo = (uint32_t)(state[i] & 0xFFFFFFFF);
 8000a84:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000a88:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000a8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
 8000a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
	          uint32_t hi = (uint32_t)(state[i] >> 32);
 8000a9e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000aa2:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000aa6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000aaa:	00db      	lsls	r3, r3, #3
 8000aac:	4413      	add	r3, r2
 8000aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab2:	f04f 0000 	mov.w	r0, #0
 8000ab6:	f04f 0100 	mov.w	r1, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	          printf("State[%02d]: %08lX%08lX\n", i, hi, lo);
 8000ac4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000ac8:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8000acc:	f8d7 11cc 	ldr.w	r1, [r7, #460]	@ 0x1cc
 8000ad0:	4833      	ldr	r0, [pc, #204]	@ (8000ba0 <main+0x38c>)
 8000ad2:	f00a fd2f 	bl	800b534 <iprintf>
	      for (int i = 0; i < 25; i++) {
 8000ad6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ada:	3301      	adds	r3, #1
 8000adc:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8000ae0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8000ae4:	2b18      	cmp	r3, #24
 8000ae6:	ddcd      	ble.n	8000a84 <main+0x270>
	      }

	      // Run just theta
	      theta(state);
 8000ae8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff fd55 	bl	800059c <theta>

	      // Print state after theta
	      printf("== After Theta ==\n");
 8000af2:	482c      	ldr	r0, [pc, #176]	@ (8000ba4 <main+0x390>)
 8000af4:	f00a fd8e 	bl	800b614 <puts>
	      for (int i = 0; i < 25; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000afe:	e02d      	b.n	8000b5c <main+0x348>
	          uint32_t lo = (uint32_t)(state[i] & 0xFFFFFFFF);
 8000b00:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000b04:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000b08:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4413      	add	r3, r2
 8000b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b14:	4613      	mov	r3, r2
 8000b16:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
	          uint32_t hi = (uint32_t)(state[i] >> 32);
 8000b1a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000b1e:	f5a3 7290 	sub.w	r2, r3, #288	@ 0x120
 8000b22:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	4413      	add	r3, r2
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f04f 0000 	mov.w	r0, #0
 8000b32:	f04f 0100 	mov.w	r1, #0
 8000b36:	0018      	movs	r0, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
	          printf("State[%02d]: %08lX%08lX\n", i, hi, lo);
 8000b40:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8000b44:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000b48:	f8d7 11c8 	ldr.w	r1, [r7, #456]	@ 0x1c8
 8000b4c:	4814      	ldr	r0, [pc, #80]	@ (8000ba0 <main+0x38c>)
 8000b4e:	f00a fcf1 	bl	800b534 <iprintf>
	      for (int i = 0; i < 25; i++) {
 8000b52:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000b56:	3301      	adds	r3, #1
 8000b58:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8000b5c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000b60:	2b18      	cmp	r3, #24
 8000b62:	ddcd      	ble.n	8000b00 <main+0x2ec>

	     // Run reference SHA3-512
	     //sha3_512(ref_output, input, input_len);

	     // Run masked SHA3-512;
	     printf("BEFORE MASKED INPUT");
 8000b64:	4810      	ldr	r0, [pc, #64]	@ (8000ba8 <main+0x394>)
 8000b66:	f00a fce5 	bl	800b534 <iprintf>
	     masked_sha3_512(masked_output, input, input_len);
 8000b6a:	f107 0120 	add.w	r1, r7, #32
 8000b6e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000b72:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8000b76:	4618      	mov	r0, r3
 8000b78:	f001 fd5a 	bl	8002630 <masked_sha3_512>

	     // Print both
	     printf("== Reference SHA3-512 ==\n");
 8000b7c:	480b      	ldr	r0, [pc, #44]	@ (8000bac <main+0x398>)
 8000b7e:	f00a fd49 	bl	800b614 <puts>
	     for (int i = 0; i < 64; i++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000b88:	e02d      	b.n	8000be6 <main+0x3d2>
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	20000140 	.word	0x20000140
 8000b94:	20000038 	.word	0x20000038
 8000b98:	0800c474 	.word	0x0800c474
 8000b9c:	0800c3b0 	.word	0x0800c3b0
 8000ba0:	0800c3c4 	.word	0x0800c3c4
 8000ba4:	0800c3e0 	.word	0x0800c3e0
 8000ba8:	0800c3f4 	.word	0x0800c3f4
 8000bac:	0800c408 	.word	0x0800c408
	         printf("%02X", ref_output[i]);
 8000bb0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000bb4:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 8000bb8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4829      	ldr	r0, [pc, #164]	@ (8000c68 <main+0x454>)
 8000bc4:	f00a fcb6 	bl	800b534 <iprintf>
	         if ((i + 1) % 16 == 0) printf("\n");
 8000bc8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000bcc:	3301      	adds	r3, #1
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d102      	bne.n	8000bdc <main+0x3c8>
 8000bd6:	200a      	movs	r0, #10
 8000bd8:	f00a fcbe 	bl	800b558 <putchar>
	     for (int i = 0; i < 64; i++) {
 8000bdc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000be0:	3301      	adds	r3, #1
 8000be2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000be6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8000bea:	2b3f      	cmp	r3, #63	@ 0x3f
 8000bec:	dde0      	ble.n	8000bb0 <main+0x39c>
	     }

	     printf("== Masked SHA3-512 ==\n");
 8000bee:	481f      	ldr	r0, [pc, #124]	@ (8000c6c <main+0x458>)
 8000bf0:	f00a fd10 	bl	800b614 <puts>
	     for (int i = 0; i < 64; i++) {
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000bfa:	e01a      	b.n	8000c32 <main+0x41e>
	         printf("%02X", masked_output[i]);
 8000bfc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8000c00:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8000c04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c08:	4413      	add	r3, r2
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4816      	ldr	r0, [pc, #88]	@ (8000c68 <main+0x454>)
 8000c10:	f00a fc90 	bl	800b534 <iprintf>
	         if ((i + 1) % 16 == 0) printf("\n");
 8000c14:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c18:	3301      	adds	r3, #1
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d102      	bne.n	8000c28 <main+0x414>
 8000c22:	200a      	movs	r0, #10
 8000c24:	f00a fc98 	bl	800b558 <putchar>
	     for (int i = 0; i < 64; i++) {
 8000c28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000c32:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000c36:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c38:	dde0      	ble.n	8000bfc <main+0x3e8>
	     }

	     // Compare
	     if (memcmp(ref_output, masked_output, 64) == 0) {
 8000c3a:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8000c3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c42:	2240      	movs	r2, #64	@ 0x40
 8000c44:	4618      	mov	r0, r3
 8000c46:	f00a fe79 	bl	800b93c <memcmp>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d103      	bne.n	8000c58 <main+0x444>
	         printf("✅ masked_sha3_512: PASS\n");
 8000c50:	4807      	ldr	r0, [pc, #28]	@ (8000c70 <main+0x45c>)
 8000c52:	f00a fcdf 	bl	800b614 <puts>
 8000c56:	e002      	b.n	8000c5e <main+0x44a>
	     } else {
	         printf("❌ masked_sha3_512: FAIL\n");
 8000c58:	4806      	ldr	r0, [pc, #24]	@ (8000c74 <main+0x460>)
 8000c5a:	f00a fcdb 	bl	800b614 <puts>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c5e:	f00a f805 	bl	800ac6c <MX_USB_HOST_Process>
 8000c62:	46b5      	mov	sp, r6
  {
 8000c64:	e608      	b.n	8000878 <main+0x64>
 8000c66:	bf00      	nop
 8000c68:	0800c3a8 	.word	0x0800c3a8
 8000c6c:	0800c424 	.word	0x0800c424
 8000c70:	0800c43c 	.word	0x0800c43c
 8000c74:	0800c458 	.word	0x0800c458

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b094      	sub	sp, #80	@ 0x50
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0320 	add.w	r3, r7, #32
 8000c82:	2230      	movs	r2, #48	@ 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00a fe68 	bl	800b95c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	4b28      	ldr	r3, [pc, #160]	@ (8000d44 <SystemClock_Config+0xcc>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	4a27      	ldr	r2, [pc, #156]	@ (8000d44 <SystemClock_Config+0xcc>)
 8000ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cac:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <SystemClock_Config+0xcc>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <SystemClock_Config+0xd0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a21      	ldr	r2, [pc, #132]	@ (8000d48 <SystemClock_Config+0xd0>)
 8000cc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <SystemClock_Config+0xd0>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ce8:	2308      	movs	r3, #8
 8000cea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000cf0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cf6:	2307      	movs	r3, #7
 8000cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cfa:	f107 0320 	add.w	r3, r7, #32
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f005 fab2 	bl	8006268 <HAL_RCC_OscConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d0a:	f000 f9ef 	bl	80010ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0e:	230f      	movs	r3, #15
 8000d10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d12:	2302      	movs	r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2105      	movs	r1, #5
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f005 fd13 	bl	8006758 <HAL_RCC_ClockConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d38:	f000 f9d8 	bl	80010ec <Error_Handler>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	3750      	adds	r7, #80	@ 0x50
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40007000 	.word	0x40007000

08000d4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d52:	4a13      	ldr	r2, [pc, #76]	@ (8000da0 <MX_I2C1_Init+0x54>)
 8000d54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d58:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <MX_I2C1_Init+0x58>)
 8000d5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d82:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <MX_I2C1_Init+0x50>)
 8000d8a:	f004 fc89 	bl	80056a0 <HAL_I2C_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d94:	f000 f9aa 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000a4 	.word	0x200000a4
 8000da0:	40005400 	.word	0x40005400
 8000da4:	000186a0 	.word	0x000186a0

08000da8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dae:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <MX_I2S3_Init+0x58>)
 8000db0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000db2:	4b12      	ldr	r3, [pc, #72]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dcc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dd0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <MX_I2S3_Init+0x5c>)
 8000dd2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <MX_I2S3_Init+0x54>)
 8000de8:	f004 fd9e 	bl	8005928 <HAL_I2S_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000df2:	f000 f97b 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000f8 	.word	0x200000f8
 8000e00:	40003c00 	.word	0x40003c00
 8000e04:	00017700 	.word	0x00017700

08000e08 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_RNG_Init+0x20>)
 8000e0e:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <MX_RNG_Init+0x24>)
 8000e10:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_RNG_Init+0x20>)
 8000e14:	f006 f802 	bl	8006e1c <HAL_RNG_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e1e:	f000 f965 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000140 	.word	0x20000140
 8000e2c:	50060800 	.word	0x50060800

08000e30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e36:	4a18      	ldr	r2, [pc, #96]	@ (8000e98 <MX_SPI1_Init+0x68>)
 8000e38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e42:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e60:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e68:	4b0a      	ldr	r3, [pc, #40]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e6e:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e74:	4b07      	ldr	r3, [pc, #28]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e7c:	220a      	movs	r2, #10
 8000e7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e80:	4804      	ldr	r0, [pc, #16]	@ (8000e94 <MX_SPI1_Init+0x64>)
 8000e82:	f006 f84b 	bl	8006f1c <HAL_SPI_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e8c:	f000 f92e 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000150 	.word	0x20000150
 8000e98:	40013000 	.word	0x40013000

08000e9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea0:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	4a12      	ldr	r2, [pc, #72]	@ (8000eec <MX_USART2_UART_Init+0x50>)
 8000ea4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000eac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_USART2_UART_Init+0x4c>)
 8000ed4:	f006 f8ab 	bl	800702e <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ede:	f000 f905 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200001a8 	.word	0x200001a8
 8000eec:	40004400 	.word	0x40004400

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	4b72      	ldr	r3, [pc, #456]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a71      	ldr	r2, [pc, #452]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f10:	f043 0310 	orr.w	r3, r3, #16
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b6f      	ldr	r3, [pc, #444]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0310 	and.w	r3, r3, #16
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
 8000f26:	4b6b      	ldr	r3, [pc, #428]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a6a      	ldr	r2, [pc, #424]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b68      	ldr	r3, [pc, #416]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0304 	and.w	r3, r3, #4
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b64      	ldr	r3, [pc, #400]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a63      	ldr	r2, [pc, #396]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b61      	ldr	r3, [pc, #388]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a5c      	ldr	r2, [pc, #368]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b56      	ldr	r3, [pc, #344]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a55      	ldr	r2, [pc, #340]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b53      	ldr	r3, [pc, #332]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b4f      	ldr	r3, [pc, #316]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a4e      	ldr	r2, [pc, #312]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b4c      	ldr	r3, [pc, #304]	@ (80010d4 <MX_GPIO_Init+0x1e4>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	4849      	ldr	r0, [pc, #292]	@ (80010d8 <MX_GPIO_Init+0x1e8>)
 8000fb4:	f002 fa26 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4847      	ldr	r0, [pc, #284]	@ (80010dc <MX_GPIO_Init+0x1ec>)
 8000fbe:	f002 fa21 	bl	8003404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000fc8:	4845      	ldr	r0, [pc, #276]	@ (80010e0 <MX_GPIO_Init+0x1f0>)
 8000fca:	f002 fa1b 	bl	8003404 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	483c      	ldr	r0, [pc, #240]	@ (80010d8 <MX_GPIO_Init+0x1e8>)
 8000fe6:	f002 f871 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4836      	ldr	r0, [pc, #216]	@ (80010dc <MX_GPIO_Init+0x1ec>)
 8001002:	f002 f863 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001006:	2308      	movs	r3, #8
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001016:	2305      	movs	r3, #5
 8001018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	482e      	ldr	r0, [pc, #184]	@ (80010dc <MX_GPIO_Init+0x1ec>)
 8001022:	f002 f853 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001026:	2301      	movs	r3, #1
 8001028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800102a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	482a      	ldr	r0, [pc, #168]	@ (80010e4 <MX_GPIO_Init+0x1f4>)
 800103c:	f002 f846 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001040:	2304      	movs	r3, #4
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	4619      	mov	r1, r3
 8001052:	4825      	ldr	r0, [pc, #148]	@ (80010e8 <MX_GPIO_Init+0x1f8>)
 8001054:	f002 f83a 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800106a:	2305      	movs	r3, #5
 800106c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	481c      	ldr	r0, [pc, #112]	@ (80010e8 <MX_GPIO_Init+0x1f8>)
 8001076:	f002 f829 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800107a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800107e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4813      	ldr	r0, [pc, #76]	@ (80010e0 <MX_GPIO_Init+0x1f0>)
 8001094:	f002 f81a 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001098:	2320      	movs	r3, #32
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <MX_GPIO_Init+0x1f0>)
 80010ac:	f002 f80e 	bl	80030cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010b4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_GPIO_Init+0x1e8>)
 80010c6:	f002 f801 	bl	80030cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010ca:	bf00      	nop
 80010cc:	3730      	adds	r7, #48	@ 0x30
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40021000 	.word	0x40021000
 80010dc:	40020800 	.word	0x40020800
 80010e0:	40020c00 	.word	0x40020c00
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020400 	.word	0x40020400

080010ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f0:	b672      	cpsid	i
}
 80010f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <Error_Handler+0x8>

080010f8 <get_random64>:
#include "debug_log.h"// for HAL_RNG
  // or your specific STM32 HAL header

extern RNG_HandleTypeDef hrng;

uint64_t get_random64(void) {
 80010f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    HAL_RNG_GenerateRandomNumber(&hrng, &r1);
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4810      	ldr	r0, [pc, #64]	@ (8001148 <get_random64+0x50>)
 8001106:	f005 feb3 	bl	8006e70 <HAL_RNG_GenerateRandomNumber>
    HAL_RNG_GenerateRandomNumber(&hrng, &r2);
 800110a:	463b      	mov	r3, r7
 800110c:	4619      	mov	r1, r3
 800110e:	480e      	ldr	r0, [pc, #56]	@ (8001148 <get_random64+0x50>)
 8001110:	f005 feae 	bl	8006e70 <HAL_RNG_GenerateRandomNumber>
    return ((uint64_t)r1 << 32) | r2;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2200      	movs	r2, #0
 8001118:	469a      	mov	sl, r3
 800111a:	4693      	mov	fp, r2
 800111c:	f04f 0200 	mov.w	r2, #0
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	4653      	mov	r3, sl
 8001126:	2200      	movs	r2, #0
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	2000      	movs	r0, #0
 800112c:	460c      	mov	r4, r1
 800112e:	4605      	mov	r5, r0
 8001130:	ea42 0804 	orr.w	r8, r2, r4
 8001134:	ea43 0905 	orr.w	r9, r3, r5
 8001138:	4642      	mov	r2, r8
 800113a:	464b      	mov	r3, r9
}
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001148:	20000140 	.word	0x20000140

0800114c <masked_theta>:

// === THETA ===
void masked_theta(masked_uint64_t state[5][5]) {
 800114c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001150:	f5ad 6da0 	sub.w	sp, sp, #1280	@ 0x500
 8001154:	af02      	add	r7, sp, #8
 8001156:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800115a:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800115e:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};
 8001160:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001164:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001168:	4618      	mov	r0, r3
 800116a:	23a0      	movs	r3, #160	@ 0xa0
 800116c:	461a      	mov	r2, r3
 800116e:	2100      	movs	r1, #0
 8001170:	f00a fbf4 	bl	800b95c <memset>
    masked_uint64_t D[5] = {0};
 8001174:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001178:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800117c:	4618      	mov	r0, r3
 800117e:	23a0      	movs	r3, #160	@ 0xa0
 8001180:	461a      	mov	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f00a fbea 	bl	800b95c <memset>
    masked_uint64_t debug_state[5][5] = {0};
 8001188:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800118c:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8001190:	4618      	mov	r0, r3
 8001192:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001196:	461a      	mov	r2, r3
 8001198:	2100      	movs	r1, #0
 800119a:	f00a fbdf 	bl	800b95c <memset>

    // Compute C[x] = A[x,0] ^ A[x,1] ^ ... ^ A[x,4]
    printf("== C[x] ==\n");
 800119e:	48cd      	ldr	r0, [pc, #820]	@ (80014d4 <masked_theta+0x388>)
 80011a0:	f00a fa38 	bl	800b614 <puts>
    for (int x = 0; x < 5; x++) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 80011aa:	e09a      	b.n	80012e2 <masked_theta+0x196>
        C[x] = state[x][0];
 80011ac:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	@ 0x4f4
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	461a      	mov	r2, r3
 80011ba:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80011be:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	1899      	adds	r1, r3, r2
 80011c6:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80011ca:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 80011ce:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	4413      	add	r3, r2
 80011d6:	461c      	mov	r4, r3
 80011d8:	460d      	mov	r5, r1
 80011da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 80011e6:	2301      	movs	r3, #1
 80011e8:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 80011ec:	e024      	b.n	8001238 <masked_theta+0xec>
            masked_xor(&C[x], &C[x], &state[x][y]);
 80011ee:	f507 727e 	add.w	r2, r7, #1016	@ 0x3f8
 80011f2:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 80011f6:	015b      	lsls	r3, r3, #5
 80011f8:	18d0      	adds	r0, r2, r3
 80011fa:	f507 727e 	add.w	r2, r7, #1016	@ 0x3f8
 80011fe:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8001202:	015b      	lsls	r3, r3, #5
 8001204:	18d1      	adds	r1, r2, r3
 8001206:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	@ 0x4f4
 800120a:	4613      	mov	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	015b      	lsls	r3, r3, #5
 8001212:	461a      	mov	r2, r3
 8001214:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001218:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	441a      	add	r2, r3
 8001220:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001224:	015b      	lsls	r3, r3, #5
 8001226:	4413      	add	r3, r2
 8001228:	461a      	mov	r2, r3
 800122a:	f000 ffa6 	bl	800217a <masked_xor>
        for (int y = 1; y < 5; y++) {
 800122e:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 8001232:	3301      	adds	r3, #1
 8001234:	f8c7 34f0 	str.w	r3, [r7, #1264]	@ 0x4f0
 8001238:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	@ 0x4f0
 800123c:	2b04      	cmp	r3, #4
 800123e:	ddd6      	ble.n	80011ee <masked_theta+0xa2>
        }

        uint64_t recombined = 0;
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 800124c:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < MASKING_N; i++) recombined ^= C[x].share[i];
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 8001256:	e021      	b.n	800129c <masked_theta+0x150>
 8001258:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 800125c:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8001260:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8001264:	0099      	lsls	r1, r3, #2
 8001266:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 800126a:	440b      	add	r3, r1
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4413      	add	r3, r2
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 8001278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800127c:	ea80 0402 	eor.w	r4, r0, r2
 8001280:	60bc      	str	r4, [r7, #8]
 8001282:	404b      	eors	r3, r1
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 800128a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800128e:	e9c2 3400 	strd	r3, r4, [r2]
 8001292:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 8001296:	3301      	adds	r3, #1
 8001298:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 800129c:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	ddd9      	ble.n	8001258 <masked_theta+0x10c>
        uint32_t hi = (uint32_t)(recombined >> 32);
 80012a4:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80012a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	000a      	movs	r2, r1
 80012b6:	2300      	movs	r3, #0
 80012b8:	4613      	mov	r3, r2
 80012ba:	f8c7 34a0 	str.w	r3, [r7, #1184]	@ 0x4a0
        uint32_t lo = (uint32_t)(recombined & 0xFFFFFFFF);
 80012be:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 80012c2:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
        printf("C[%d] = %08lX%08lX\n", x, hi, lo);
 80012c6:	f8d7 349c 	ldr.w	r3, [r7, #1180]	@ 0x49c
 80012ca:	f8d7 24a0 	ldr.w	r2, [r7, #1184]	@ 0x4a0
 80012ce:	f8d7 14f4 	ldr.w	r1, [r7, #1268]	@ 0x4f4
 80012d2:	4881      	ldr	r0, [pc, #516]	@ (80014d8 <masked_theta+0x38c>)
 80012d4:	f00a f92e 	bl	800b534 <iprintf>
    for (int x = 0; x < 5; x++) {
 80012d8:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 80012e2:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	f77f af60 	ble.w	80011ac <masked_theta+0x60>

    }

    // Compute D[x] = C[x-1] ^ ROTL(C[x+1], 1)
    printf("\n== D[x] ==\n");
 80012ec:	487b      	ldr	r0, [pc, #492]	@ (80014dc <masked_theta+0x390>)
 80012ee:	f00a f991 	bl	800b614 <puts>
    for (int x = 0; x < 5; x++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 80012f8:	e0a4      	b.n	8001444 <masked_theta+0x2f8>
        masked_uint64_t rotated;
        for (int i = 0; i < MASKING_N; i++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8001300:	e02f      	b.n	8001362 <masked_theta+0x216>
            rotated.share[i] = (C[(x + 1) % 5].share[i] << 1) |
 8001302:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001306:	1c59      	adds	r1, r3, #1
 8001308:	4b75      	ldr	r3, [pc, #468]	@ (80014e0 <masked_theta+0x394>)
 800130a:	fb83 2301 	smull	r2, r3, r3, r1
 800130e:	105a      	asrs	r2, r3, #1
 8001310:	17cb      	asrs	r3, r1, #31
 8001312:	1ad2      	subs	r2, r2, r3
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	1aca      	subs	r2, r1, r3
 800131c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001320:	f5a3 7180 	sub.w	r1, r3, #256	@ 0x100
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800132a:	4413      	add	r3, r2
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	440b      	add	r3, r1
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	0fd0      	lsrs	r0, r2, #31
 8001336:	0059      	lsls	r1, r3, #1
 8001338:	ea40 0b01 	orr.w	fp, r0, r1
 800133c:	0fd9      	lsrs	r1, r3, #31
 800133e:	0053      	lsls	r3, r2, #1
 8001340:	ea41 0a03 	orr.w	sl, r1, r3
 8001344:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001348:	f5a3 629c 	sub.w	r2, r3, #1248	@ 0x4e0
 800134c:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	4413      	add	r3, r2
 8001354:	e9c3 ab00 	strd	sl, fp, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 8001358:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 800135c:	3301      	adds	r3, #1
 800135e:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8001362:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	@ 0x4dc
 8001366:	2b03      	cmp	r3, #3
 8001368:	ddcb      	ble.n	8001302 <masked_theta+0x1b6>
                               (C[(x + 1) % 5].share[i] >> (64 - 1));
        }

        masked_xor(&D[x], &C[(x + 4) % 5], &rotated);
 800136a:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 800136e:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001372:	015b      	lsls	r3, r3, #5
 8001374:	18d0      	adds	r0, r2, r3
 8001376:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800137a:	1d19      	adds	r1, r3, #4
 800137c:	4b58      	ldr	r3, [pc, #352]	@ (80014e0 <masked_theta+0x394>)
 800137e:	fb83 2301 	smull	r2, r3, r3, r1
 8001382:	105a      	asrs	r2, r3, #1
 8001384:	17cb      	asrs	r3, r1, #31
 8001386:	1ad2      	subs	r2, r2, r3
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	1aca      	subs	r2, r1, r3
 8001390:	f507 717e 	add.w	r1, r7, #1016	@ 0x3f8
 8001394:	0153      	lsls	r3, r2, #5
 8001396:	440b      	add	r3, r1
 8001398:	f107 0218 	add.w	r2, r7, #24
 800139c:	4619      	mov	r1, r3
 800139e:	f000 feec 	bl	800217a <masked_xor>

        uint64_t recombined = 0;
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 80013ae:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < MASKING_N; i++) recombined ^= D[x].share[i];
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 80013b8:	e021      	b.n	80013fe <masked_theta+0x2b2>
 80013ba:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80013be:	f5a3 72d0 	sub.w	r2, r3, #416	@ 0x1a0
 80013c2:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 80013c6:	0099      	lsls	r1, r3, #2
 80013c8:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80013cc:	440b      	add	r3, r1
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4413      	add	r3, r2
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 80013da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013de:	ea80 0402 	eor.w	r4, r0, r2
 80013e2:	603c      	str	r4, [r7, #0]
 80013e4:	404b      	eors	r3, r1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 80013ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80013f0:	e9c2 3400 	strd	r3, r4, [r2]
 80013f4:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80013f8:	3301      	adds	r3, #1
 80013fa:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 80013fe:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 8001402:	2b03      	cmp	r3, #3
 8001404:	ddd9      	ble.n	80013ba <masked_theta+0x26e>
        uint32_t hi = (uint32_t)(recombined >> 32);
 8001406:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 800140a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	000a      	movs	r2, r1
 8001418:	2300      	movs	r3, #0
 800141a:	4613      	mov	r3, r2
 800141c:	f8c7 34a8 	str.w	r3, [r7, #1192]	@ 0x4a8
        uint32_t lo = (uint32_t)(recombined & 0xFFFFFFFF);
 8001420:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	@ 0x4d0
 8001424:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
        printf("D[%d] = %08lX%08lX\n", x, hi, lo);
 8001428:	f8d7 34a4 	ldr.w	r3, [r7, #1188]	@ 0x4a4
 800142c:	f8d7 24a8 	ldr.w	r2, [r7, #1192]	@ 0x4a8
 8001430:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	@ 0x4e0
 8001434:	482b      	ldr	r0, [pc, #172]	@ (80014e4 <masked_theta+0x398>)
 8001436:	f00a f87d 	bl	800b534 <iprintf>
    for (int x = 0; x < 5; x++) {
 800143a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800143e:	3301      	adds	r3, #1
 8001440:	f8c7 34e0 	str.w	r3, [r7, #1248]	@ 0x4e0
 8001444:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 8001448:	2b04      	cmp	r3, #4
 800144a:	f77f af56 	ble.w	80012fa <masked_theta+0x1ae>

    }

    // Apply D[x] to state[x][y]
    printf("\n== Updated state[x][y] ==\n");
 800144e:	4826      	ldr	r0, [pc, #152]	@ (80014e8 <masked_theta+0x39c>)
 8001450:	f00a f8e0 	bl	800b614 <puts>
    for (int x = 0; x < 5; x++) {
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 800145a:	e09f      	b.n	800159c <masked_theta+0x450>
        for (int y = 0; y < 5; y++) {
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001462:	e091      	b.n	8001588 <masked_theta+0x43c>
            masked_xor(&state[x][y], &state[x][y], &D[x]);
 8001464:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	@ 0x4c8
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	015b      	lsls	r3, r3, #5
 8001470:	461a      	mov	r2, r3
 8001472:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001476:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	441a      	add	r2, r3
 800147e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001482:	015b      	lsls	r3, r3, #5
 8001484:	18d0      	adds	r0, r2, r3
 8001486:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	@ 0x4c8
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	015b      	lsls	r3, r3, #5
 8001492:	461a      	mov	r2, r3
 8001494:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8001498:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	441a      	add	r2, r3
 80014a0:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 80014a4:	015b      	lsls	r3, r3, #5
 80014a6:	18d1      	adds	r1, r2, r3
 80014a8:	f507 7256 	add.w	r2, r7, #856	@ 0x358
 80014ac:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	f000 fe60 	bl	800217a <masked_xor>

            // Debug print after D[x] applied
            uint64_t recombined = 0;
 80014ba:	f04f 0200 	mov.w	r2, #0
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 80014c6:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) recombined ^= state[x][y].share[i];
 80014ca:	2300      	movs	r3, #0
 80014cc:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 80014d0:	e034      	b.n	800153c <masked_theta+0x3f0>
 80014d2:	bf00      	nop
 80014d4:	0800c494 	.word	0x0800c494
 80014d8:	0800c4a0 	.word	0x0800c4a0
 80014dc:	0800c4b4 	.word	0x0800c4b4
 80014e0:	66666667 	.word	0x66666667
 80014e4:	0800c4c0 	.word	0x0800c4c0
 80014e8:	0800c4d4 	.word	0x0800c4d4
 80014ec:	f8d7 24c8 	ldr.w	r2, [r7, #1224]	@ 0x4c8
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	015b      	lsls	r3, r3, #5
 80014f8:	461a      	mov	r2, r3
 80014fa:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 80014fe:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	441a      	add	r2, r3
 8001506:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800150a:	0099      	lsls	r1, r3, #2
 800150c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8001510:	440b      	add	r3, r1
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 800151e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001522:	ea80 0802 	eor.w	r8, r0, r2
 8001526:	ea81 0903 	eor.w	r9, r1, r3
 800152a:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 800152e:	e9c3 8900 	strd	r8, r9, [r3]
 8001532:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8001536:	3301      	adds	r3, #1
 8001538:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 800153c:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	@ 0x4b4
 8001540:	2b03      	cmp	r3, #3
 8001542:	ddd3      	ble.n	80014ec <masked_theta+0x3a0>
            uint32_t hi = (uint32_t)(recombined >> 32);
 8001544:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8001548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	000a      	movs	r2, r1
 8001556:	2300      	movs	r3, #0
 8001558:	4613      	mov	r3, r2
 800155a:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
            uint32_t lo = (uint32_t)(recombined & 0xFFFFFFFF);
 800155e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 8001562:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
            printf("state[%d][%d] = %08lX%08lX\n", x, y, hi, lo);
 8001566:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	@ 0x4b0
 8001570:	f8d7 24c4 	ldr.w	r2, [r7, #1220]	@ 0x4c4
 8001574:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 8001578:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <masked_theta+0x468>)
 800157a:	f009 ffdb 	bl	800b534 <iprintf>
        for (int y = 0; y < 5; y++) {
 800157e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001582:	3301      	adds	r3, #1
 8001584:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8001588:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800158c:	2b04      	cmp	r3, #4
 800158e:	f77f af69 	ble.w	8001464 <masked_theta+0x318>
    for (int x = 0; x < 5; x++) {
 8001592:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 8001596:	3301      	adds	r3, #1
 8001598:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 800159c:	f8d7 34c8 	ldr.w	r3, [r7, #1224]	@ 0x4c8
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	f77f af5b 	ble.w	800145c <masked_theta+0x310>
        }
    }

}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	f507 679f 	add.w	r7, r7, #1272	@ 0x4f8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b4:	0800c4f0 	.word	0x0800c4f0

080015b8 <masked_rho>:
    {190,   6, 153,  15, 253 },
    { 28,  55, 276,  91, 136 },
    { 91, 276, 231, 120,  78 }
};

void masked_rho(masked_uint64_t state[5][5]) {
 80015b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80015bc:	b088      	sub	sp, #32
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
    for (int x = 0; x < 5; x++) {
 80015c2:	2100      	movs	r1, #0
 80015c4:	61f9      	str	r1, [r7, #28]
 80015c6:	e06d      	b.n	80016a4 <masked_rho+0xec>
        for (int y = 0; y < 5; y++) {
 80015c8:	2100      	movs	r1, #0
 80015ca:	61b9      	str	r1, [r7, #24]
 80015cc:	e064      	b.n	8001698 <masked_rho+0xe0>
            uint8_t r = keccak_rho_offsets[x][y];
 80015ce:	4e3a      	ldr	r6, [pc, #232]	@ (80016b8 <masked_rho+0x100>)
 80015d0:	69f8      	ldr	r0, [r7, #28]
 80015d2:	4601      	mov	r1, r0
 80015d4:	0089      	lsls	r1, r1, #2
 80015d6:	4401      	add	r1, r0
 80015d8:	1870      	adds	r0, r6, r1
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	4401      	add	r1, r0
 80015de:	7809      	ldrb	r1, [r1, #0]
 80015e0:	74f9      	strb	r1, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 80015e2:	2100      	movs	r1, #0
 80015e4:	6179      	str	r1, [r7, #20]
 80015e6:	e051      	b.n	800168c <masked_rho+0xd4>
                uint64_t value = state[x][y].share[i];
 80015e8:	69f8      	ldr	r0, [r7, #28]
 80015ea:	4601      	mov	r1, r0
 80015ec:	0089      	lsls	r1, r1, #2
 80015ee:	4401      	add	r1, r0
 80015f0:	0149      	lsls	r1, r1, #5
 80015f2:	4608      	mov	r0, r1
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4408      	add	r0, r1
 80015f8:	69b9      	ldr	r1, [r7, #24]
 80015fa:	008e      	lsls	r6, r1, #2
 80015fc:	6979      	ldr	r1, [r7, #20]
 80015fe:	4431      	add	r1, r6
 8001600:	00c9      	lsls	r1, r1, #3
 8001602:	4401      	add	r1, r0
 8001604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001608:	e9c7 0102 	strd	r0, r1, [r7, #8]
                state[x][y].share[i] = (value << r) | (value >> (64 - r));
 800160c:	7cfe      	ldrb	r6, [r7, #19]
 800160e:	69f8      	ldr	r0, [r7, #28]
 8001610:	4601      	mov	r1, r0
 8001612:	0089      	lsls	r1, r1, #2
 8001614:	4401      	add	r1, r0
 8001616:	0149      	lsls	r1, r1, #5
 8001618:	4608      	mov	r0, r1
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	eb01 0a00 	add.w	sl, r1, r0
 8001620:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001624:	f1a6 0e20 	sub.w	lr, r6, #32
 8001628:	f1c6 0c20 	rsb	ip, r6, #32
 800162c:	fa01 f506 	lsl.w	r5, r1, r6
 8001630:	fa00 fe0e 	lsl.w	lr, r0, lr
 8001634:	ea45 050e 	orr.w	r5, r5, lr
 8001638:	fa20 fc0c 	lsr.w	ip, r0, ip
 800163c:	ea45 050c 	orr.w	r5, r5, ip
 8001640:	fa00 f406 	lsl.w	r4, r0, r6
 8001644:	4276      	negs	r6, r6
 8001646:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 800164a:	f1c6 0e20 	rsb	lr, r6, #32
 800164e:	f1a6 0c20 	sub.w	ip, r6, #32
 8001652:	fa20 f206 	lsr.w	r2, r0, r6
 8001656:	fa01 fe0e 	lsl.w	lr, r1, lr
 800165a:	ea42 020e 	orr.w	r2, r2, lr
 800165e:	fa21 fc0c 	lsr.w	ip, r1, ip
 8001662:	ea42 020c 	orr.w	r2, r2, ip
 8001666:	fa21 f306 	lsr.w	r3, r1, r6
 800166a:	ea44 0802 	orr.w	r8, r4, r2
 800166e:	ea45 0903 	orr.w	r9, r5, r3
 8001672:	4642      	mov	r2, r8
 8001674:	464b      	mov	r3, r9
 8001676:	69b9      	ldr	r1, [r7, #24]
 8001678:	0088      	lsls	r0, r1, #2
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	4401      	add	r1, r0
 800167e:	00c9      	lsls	r1, r1, #3
 8001680:	4451      	add	r1, sl
 8001682:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8001686:	6979      	ldr	r1, [r7, #20]
 8001688:	3101      	adds	r1, #1
 800168a:	6179      	str	r1, [r7, #20]
 800168c:	6979      	ldr	r1, [r7, #20]
 800168e:	2903      	cmp	r1, #3
 8001690:	ddaa      	ble.n	80015e8 <masked_rho+0x30>
        for (int y = 0; y < 5; y++) {
 8001692:	69b9      	ldr	r1, [r7, #24]
 8001694:	3101      	adds	r1, #1
 8001696:	61b9      	str	r1, [r7, #24]
 8001698:	69b9      	ldr	r1, [r7, #24]
 800169a:	2904      	cmp	r1, #4
 800169c:	dd97      	ble.n	80015ce <masked_rho+0x16>
    for (int x = 0; x < 5; x++) {
 800169e:	69f9      	ldr	r1, [r7, #28]
 80016a0:	3101      	adds	r1, #1
 80016a2:	61f9      	str	r1, [r7, #28]
 80016a4:	69f9      	ldr	r1, [r7, #28]
 80016a6:	2904      	cmp	r1, #4
 80016a8:	dd8e      	ble.n	80015c8 <masked_rho+0x10>
            }
        }
    }
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	3720      	adds	r7, #32
 80016b0:	46bd      	mov	sp, r7
 80016b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016b6:	bf00      	nop
 80016b8:	0800c69c 	.word	0x0800c69c

080016bc <masked_pi>:

// === PI ===
void masked_pi(masked_uint64_t state[5][5]) {
 80016bc:	b4b0      	push	{r4, r5, r7}
 80016be:	f5ad 7d4f 	sub.w	sp, sp, #828	@ 0x33c
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80016c8:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80016cc:	6018      	str	r0, [r3, #0]
    masked_uint64_t temp[5][5];

    for (int x = 0; x < 5; x++) {
 80016ce:	2300      	movs	r3, #0
 80016d0:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80016d4:	e038      	b.n	8001748 <masked_pi+0x8c>
        for (int y = 0; y < 5; y++) {
 80016d6:	2300      	movs	r3, #0
 80016d8:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80016dc:	e02b      	b.n	8001736 <masked_pi+0x7a>
            temp[x][y] = state[x][y];
 80016de:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 80016e2:	4613      	mov	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	015b      	lsls	r3, r3, #5
 80016ea:	461a      	mov	r2, r3
 80016ec:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80016f0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	1899      	adds	r1, r3, r2
 80016f8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80016fc:	f5a3 704c 	sub.w	r0, r3, #816	@ 0x330
 8001700:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 800170e:	4413      	add	r3, r2
 8001710:	015b      	lsls	r3, r3, #5
 8001712:	18c2      	adds	r2, r0, r3
 8001714:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	440b      	add	r3, r1
 800171c:	4614      	mov	r4, r2
 800171e:	461d      	mov	r5, r3
 8001720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001724:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; y++) {
 800172c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001730:	3301      	adds	r3, #1
 8001732:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001736:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 800173a:	2b04      	cmp	r3, #4
 800173c:	ddcf      	ble.n	80016de <masked_pi+0x22>
    for (int x = 0; x < 5; x++) {
 800173e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001742:	3301      	adds	r3, #1
 8001744:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001748:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800174c:	2b04      	cmp	r3, #4
 800174e:	ddc2      	ble.n	80016d6 <masked_pi+0x1a>
        }
    }

    for (int x = 0; x < 5; x++) {
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8001756:	e049      	b.n	80017ec <masked_pi+0x130>
        for (int y = 0; y < 5; y++) {
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 800175e:	e03c      	b.n	80017da <masked_pi+0x11e>
            state[y][(2 * x + 3 * y) % 5] = temp[x][y];
 8001760:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	015b      	lsls	r3, r3, #5
 800176c:	461a      	mov	r2, r3
 800176e:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8001772:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	1898      	adds	r0, r3, r2
 800177a:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 800177e:	0059      	lsls	r1, r3, #1
 8001780:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	4419      	add	r1, r3
 800178c:	4b1d      	ldr	r3, [pc, #116]	@ (8001804 <masked_pi+0x148>)
 800178e:	fb83 2301 	smull	r2, r3, r3, r1
 8001792:	105a      	asrs	r2, r3, #1
 8001794:	17cb      	asrs	r3, r1, #31
 8001796:	1ad2      	subs	r2, r2, r3
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	1aca      	subs	r2, r1, r3
 80017a0:	0153      	lsls	r3, r2, #5
 80017a2:	4418      	add	r0, r3
 80017a4:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80017a8:	f5a3 714c 	sub.w	r1, r3, #816	@ 0x330
 80017ac:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 80017b0:	4613      	mov	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	4413      	add	r3, r2
 80017b6:	f8d7 2328 	ldr.w	r2, [r7, #808]	@ 0x328
 80017ba:	4413      	add	r3, r2
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	440b      	add	r3, r1
 80017c0:	4604      	mov	r4, r0
 80017c2:	461d      	mov	r5, r3
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; y++) {
 80017d0:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80017d4:	3301      	adds	r3, #1
 80017d6:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
 80017da:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 80017de:	2b04      	cmp	r3, #4
 80017e0:	ddbe      	ble.n	8001760 <masked_pi+0xa4>
    for (int x = 0; x < 5; x++) {
 80017e2:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80017e6:	3301      	adds	r3, #1
 80017e8:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 80017ec:	f8d7 332c 	ldr.w	r3, [r7, #812]	@ 0x32c
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	ddb1      	ble.n	8001758 <masked_pi+0x9c>
        }
    }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	f507 774f 	add.w	r7, r7, #828	@ 0x33c
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bcb0      	pop	{r4, r5, r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	66666667 	.word	0x66666667

08001808 <masked_chi>:

// === CHI ===
void masked_chi(masked_uint64_t state[5][5],
                uint64_t r[5][5][MASKING_N][MASKING_N]) {
 8001808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800180c:	b0be      	sub	sp, #248	@ 0xf8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
    masked_uint64_t temp[5];

    for (int y = 0; y < 5; y++) {
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800181a:	e0a7      	b.n	800196c <masked_chi+0x164>
        for (int x = 0; x < 5; x++) {
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001822:	e020      	b.n	8001866 <masked_chi+0x5e>
            temp[x] = state[x][y];
 8001824:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	015b      	lsls	r3, r3, #5
 8001830:	461a      	mov	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	441a      	add	r2, r3
 8001836:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800183a:	015b      	lsls	r3, r3, #5
 800183c:	33f8      	adds	r3, #248	@ 0xf8
 800183e:	443b      	add	r3, r7
 8001840:	f1a3 01b0 	sub.w	r1, r3, #176	@ 0xb0
 8001844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001848:	015b      	lsls	r3, r3, #5
 800184a:	4413      	add	r3, r2
 800184c:	460c      	mov	r4, r1
 800184e:	461d      	mov	r5, r3
 8001850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001854:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001858:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int x = 0; x < 5; x++) {
 800185c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001860:	3301      	adds	r3, #1
 8001862:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8001866:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800186a:	2b04      	cmp	r3, #4
 800186c:	ddda      	ble.n	8001824 <masked_chi+0x1c>
        }

        for (int x = 0; x < 5; x++) {
 800186e:	2300      	movs	r3, #0
 8001870:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001874:	e071      	b.n	800195a <masked_chi+0x152>
            masked_uint64_t notA1;
            for (int i = 0; i < MASKING_N; i++) {
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800187c:	e027      	b.n	80018ce <masked_chi+0xc6>
                notA1.share[i] = ~temp[(x + 1) % 5].share[i];
 800187e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001882:	1c59      	adds	r1, r3, #1
 8001884:	4b3f      	ldr	r3, [pc, #252]	@ (8001984 <masked_chi+0x17c>)
 8001886:	fb83 2301 	smull	r2, r3, r3, r1
 800188a:	105a      	asrs	r2, r3, #1
 800188c:	17cb      	asrs	r3, r1, #31
 800188e:	1ad2      	subs	r2, r2, r3
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	1aca      	subs	r2, r1, r3
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800189e:	4413      	add	r3, r2
 80018a0:	00db      	lsls	r3, r3, #3
 80018a2:	33f8      	adds	r3, #248	@ 0xf8
 80018a4:	443b      	add	r3, r7
 80018a6:	3bb0      	subs	r3, #176	@ 0xb0
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	ea6f 0802 	mvn.w	r8, r2
 80018b0:	ea6f 0903 	mvn.w	r9, r3
 80018b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	33f8      	adds	r3, #248	@ 0xf8
 80018bc:	443b      	add	r3, r7
 80018be:	3bf0      	subs	r3, #240	@ 0xf0
 80018c0:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 80018c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80018c8:	3301      	adds	r3, #1
 80018ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80018ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	ddd3      	ble.n	800187e <masked_chi+0x76>
            }

            masked_uint64_t and_result;
            masked_and(&and_result,
                       &notA1,
                       &temp[(x + 2) % 5],
 80018d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80018da:	1c99      	adds	r1, r3, #2
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <masked_chi+0x17c>)
 80018de:	fb83 2301 	smull	r2, r3, r3, r1
 80018e2:	105a      	asrs	r2, r3, #1
 80018e4:	17cb      	asrs	r3, r1, #31
 80018e6:	1ad2      	subs	r2, r2, r3
 80018e8:	4613      	mov	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4413      	add	r3, r2
 80018ee:	1aca      	subs	r2, r1, r3
 80018f0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80018f4:	0153      	lsls	r3, r2, #5
 80018f6:	18cc      	adds	r4, r1, r3
                       r[x][y]);
 80018f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80018fc:	4613      	mov	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	01db      	lsls	r3, r3, #7
 8001904:	461a      	mov	r2, r3
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	441a      	add	r2, r3
 800190a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800190e:	01db      	lsls	r3, r3, #7
 8001910:	4413      	add	r3, r2
            masked_and(&and_result,
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800191a:	4622      	mov	r2, r4
 800191c:	f000 fc58 	bl	80021d0 <masked_and>

            masked_xor(&state[x][y], &temp[x], &and_result);
 8001920:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	015b      	lsls	r3, r3, #5
 800192c:	461a      	mov	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	441a      	add	r2, r3
 8001932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001936:	015b      	lsls	r3, r3, #5
 8001938:	18d0      	adds	r0, r2, r3
 800193a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800193e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001942:	015b      	lsls	r3, r3, #5
 8001944:	4413      	add	r3, r2
 8001946:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800194a:	4619      	mov	r1, r3
 800194c:	f000 fc15 	bl	800217a <masked_xor>
        for (int x = 0; x < 5; x++) {
 8001950:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001954:	3301      	adds	r3, #1
 8001956:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800195a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800195e:	2b04      	cmp	r3, #4
 8001960:	dd89      	ble.n	8001876 <masked_chi+0x6e>
    for (int y = 0; y < 5; y++) {
 8001962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001966:	3301      	adds	r3, #1
 8001968:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800196c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001970:	2b04      	cmp	r3, #4
 8001972:	f77f af53 	ble.w	800181c <masked_chi+0x14>
        }
    }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	37f8      	adds	r7, #248	@ 0xf8
 800197c:	46bd      	mov	sp, r7
 800197e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001982:	bf00      	nop
 8001984:	66666667 	.word	0x66666667

08001988 <masked_iota>:

void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 8001988:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800198c:	b08e      	sub	sp, #56	@ 0x38
 800198e:	af00      	add	r7, sp, #0
 8001990:	60f8      	str	r0, [r7, #12]
 8001992:	e9c7 2300 	strd	r2, r3, [r7]
    // Split rc into shares that XOR to rc
    uint64_t r[MASKING_N];
    r[0] = rc;
 8001996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800199a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 1; i < MASKING_N; i++) {
 800199e:	2301      	movs	r3, #1
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019a2:	e01c      	b.n	80019de <masked_iota+0x56>
        r[i] = get_random64();       // Get a fresh random share
 80019a4:	f7ff fba8 	bl	80010f8 <get_random64>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80019ae:	00c9      	lsls	r1, r1, #3
 80019b0:	3138      	adds	r1, #56	@ 0x38
 80019b2:	4439      	add	r1, r7
 80019b4:	3928      	subs	r1, #40	@ 0x28
 80019b6:	e9c1 2300 	strd	r2, r3, [r1]
        r[0] ^= r[i];                // Ensure all shares XOR to original rc
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	3338      	adds	r3, #56	@ 0x38
 80019c4:	443b      	add	r3, r7
 80019c6:	3b28      	subs	r3, #40	@ 0x28
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	ea80 0802 	eor.w	r8, r0, r2
 80019d0:	ea81 0903 	eor.w	r9, r1, r3
 80019d4:	e9c7 8904 	strd	r8, r9, [r7, #16]
    for (int i = 1; i < MASKING_N; i++) {
 80019d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019da:	3301      	adds	r3, #1
 80019dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80019de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	dddf      	ble.n	80019a4 <masked_iota+0x1c>
    }

    for (int i = 0; i < MASKING_N; i++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e8:	e019      	b.n	8001a1e <masked_iota+0x96>
        state[0][0].share[i] ^= r[i];
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4413      	add	r3, r2
 80019f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	3338      	adds	r3, #56	@ 0x38
 80019fc:	443b      	add	r3, r7
 80019fe:	3b28      	subs	r3, #40	@ 0x28
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	ea80 0402 	eor.w	r4, r0, r2
 8001a08:	ea81 0503 	eor.w	r5, r1, r3
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	4413      	add	r3, r2
 8001a14:	e9c3 4500 	strd	r4, r5, [r3]
    for (int i = 0; i < MASKING_N; i++) {
 8001a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	dde2      	ble.n	80019ea <masked_iota+0x62>
    }
}
 8001a24:	bf00      	nop
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	@ 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08001a30 <print_recombined_state>:
// Helper function (add this)
void print_recombined_state(masked_uint64_t state[5][5], const char *label) {
 8001a30:	b5b0      	push	{r4, r5, r7, lr}
 8001a32:	b08c      	sub	sp, #48	@ 0x30
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
    printf("== %s (Recombined) ==\n", label);
 8001a3a:	6839      	ldr	r1, [r7, #0]
 8001a3c:	482a      	ldr	r0, [pc, #168]	@ (8001ae8 <print_recombined_state+0xb8>)
 8001a3e:	f009 fd79 	bl	800b534 <iprintf>
    for (int x = 0; x < 5; x++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a46:	e046      	b.n	8001ad6 <print_recombined_state+0xa6>
        for (int y = 0; y < 5; y++) {
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
 8001a4c:	e03d      	b.n	8001aca <print_recombined_state+0x9a>
            uint64_t val = 0;
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (int i = 0; i < MASKING_N; i++) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e01a      	b.n	8001a96 <print_recombined_state+0x66>
                val ^= state[x][y].share[i];
 8001a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	015b      	lsls	r3, r3, #5
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	441a      	add	r2, r3
 8001a70:	6a3b      	ldr	r3, [r7, #32]
 8001a72:	0099      	lsls	r1, r3, #2
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	440b      	add	r3, r1
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a84:	ea80 0402 	eor.w	r4, r0, r2
 8001a88:	ea81 0503 	eor.w	r5, r1, r3
 8001a8c:	e9c7 4506 	strd	r4, r5, [r7, #24]
            for (int i = 0; i < MASKING_N; i++) {
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	dde1      	ble.n	8001a60 <print_recombined_state+0x30>
            }
            uint32_t hi = (uint32_t)(val >> 32);
 8001a9c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	2300      	movs	r3, #0
 8001aac:	4613      	mov	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
            uint32_t lo = (uint32_t)(val & 0xFFFFFFFF);
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	60fb      	str	r3, [r7, #12]
            printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	6a3a      	ldr	r2, [r7, #32]
 8001abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001abe:	480b      	ldr	r0, [pc, #44]	@ (8001aec <print_recombined_state+0xbc>)
 8001ac0:	f009 fd38 	bl	800b534 <iprintf>
        for (int y = 0; y < 5; y++) {
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	ddbe      	ble.n	8001a4e <print_recombined_state+0x1e>
    for (int x = 0; x < 5; x++) {
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	ddb5      	ble.n	8001a48 <print_recombined_state+0x18>
        }
    }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3728      	adds	r7, #40	@ 0x28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	0800c50c 	.word	0x0800c50c
 8001aec:	0800c524 	.word	0x0800c524

08001af0 <masked_keccak_round>:


void masked_keccak_round(masked_uint64_t state[5][5], uint64_t rc) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	f6ad 4d98 	subw	sp, sp, #3224	@ 0xc98
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	f607 4198 	addw	r1, r7, #3224	@ 0xc98
 8001afc:	f6a1 418c 	subw	r1, r1, #3212	@ 0xc8c
 8001b00:	6008      	str	r0, [r1, #0]
 8001b02:	f107 0108 	add.w	r1, r7, #8
 8001b06:	e941 2302 	strd	r2, r3, [r1, #-8]
    // Allocate fresh randomness for Chi step
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];

    // Fill randomness for each (x, y) lane
    for (int x = 0; x < 5; x++) {
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f8c7 3c94 	str.w	r3, [r7, #3220]	@ 0xc94
 8001b10:	e020      	b.n	8001b54 <masked_keccak_round+0x64>
        for (int y = 0; y < 5; y++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 3c90 	str.w	r3, [r7, #3216]	@ 0xc90
 8001b18:	e013      	b.n	8001b42 <masked_keccak_round+0x52>
            fill_random_matrix(r_chi[x][y]);
 8001b1a:	f107 0110 	add.w	r1, r7, #16
 8001b1e:	f8d7 2c94 	ldr.w	r2, [r7, #3220]	@ 0xc94
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	f8d7 2c90 	ldr.w	r2, [r7, #3216]	@ 0xc90
 8001b2c:	4413      	add	r3, r2
 8001b2e:	01db      	lsls	r3, r3, #7
 8001b30:	440b      	add	r3, r1
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 fada 	bl	80020ec <fill_random_matrix>
        for (int y = 0; y < 5; y++) {
 8001b38:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	@ 0xc90
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	f8c7 3c90 	str.w	r3, [r7, #3216]	@ 0xc90
 8001b42:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	@ 0xc90
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	dde7      	ble.n	8001b1a <masked_keccak_round+0x2a>
    for (int x = 0; x < 5; x++) {
 8001b4a:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	@ 0xc94
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f8c7 3c94 	str.w	r3, [r7, #3220]	@ 0xc94
 8001b54:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	@ 0xc94
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	ddda      	ble.n	8001b12 <masked_keccak_round+0x22>
        }
    }

    // Apply the five Keccak round steps
    print_recombined_state(state, "Before Theta");
 8001b5c:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001b60:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001b64:	492d      	ldr	r1, [pc, #180]	@ (8001c1c <masked_keccak_round+0x12c>)
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	f7ff ff62 	bl	8001a30 <print_recombined_state>
    masked_theta(state);
 8001b6c:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001b70:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	f7ff fae9 	bl	800114c <masked_theta>

    print_recombined_state(state, "After Theta");
 8001b7a:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001b7e:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001b82:	4927      	ldr	r1, [pc, #156]	@ (8001c20 <masked_keccak_round+0x130>)
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	f7ff ff53 	bl	8001a30 <print_recombined_state>
    masked_rho(state);
 8001b8a:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001b8e:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f7ff fd10 	bl	80015b8 <masked_rho>

    print_recombined_state(state, "After Rho");
 8001b98:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001b9c:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001ba0:	4920      	ldr	r1, [pc, #128]	@ (8001c24 <masked_keccak_round+0x134>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	f7ff ff44 	bl	8001a30 <print_recombined_state>
    masked_pi(state);
 8001ba8:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001bac:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	f7ff fd83 	bl	80016bc <masked_pi>

    print_recombined_state(state, "After Pi");
 8001bb6:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001bba:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001bbe:	491a      	ldr	r1, [pc, #104]	@ (8001c28 <masked_keccak_round+0x138>)
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	f7ff ff35 	bl	8001a30 <print_recombined_state>
    masked_chi(state, r_chi);
 8001bc6:	f107 0210 	add.w	r2, r7, #16
 8001bca:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001bce:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	6818      	ldr	r0, [r3, #0]
 8001bd6:	f7ff fe17 	bl	8001808 <masked_chi>

    print_recombined_state(state, "After Chi");
 8001bda:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001bde:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001be2:	4912      	ldr	r1, [pc, #72]	@ (8001c2c <masked_keccak_round+0x13c>)
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	f7ff ff23 	bl	8001a30 <print_recombined_state>
    masked_iota(state, rc);
 8001bea:	f107 0308 	add.w	r3, r7, #8
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001bf4:	f6a3 418c 	subw	r1, r3, #3212	@ 0xc8c
 8001bf8:	e952 2302 	ldrd	r2, r3, [r2, #-8]
 8001bfc:	6808      	ldr	r0, [r1, #0]
 8001bfe:	f7ff fec3 	bl	8001988 <masked_iota>

    print_recombined_state(state, "After Iota");
 8001c02:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8001c06:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8001c0a:	4909      	ldr	r1, [pc, #36]	@ (8001c30 <masked_keccak_round+0x140>)
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	f7ff ff0f 	bl	8001a30 <print_recombined_state>

}
 8001c12:	bf00      	nop
 8001c14:	f607 4798 	addw	r7, r7, #3224	@ 0xc98
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	0800c540 	.word	0x0800c540
 8001c20:	0800c550 	.word	0x0800c550
 8001c24:	0800c55c 	.word	0x0800c55c
 8001c28:	0800c568 	.word	0x0800c568
 8001c2c:	0800c574 	.word	0x0800c574
 8001c30:	0800c580 	.word	0x0800c580

08001c34 <masked_value_set>:



extern RNG_HandleTypeDef hrng;

void masked_value_set(masked_uint64_t *out, uint64_t value) {
 8001c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c38:	b08c      	sub	sp, #48	@ 0x30
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6178      	str	r0, [r7, #20]
 8001c3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint64_t acc = value;
 8001c42:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c46:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28


    for (int i = 0; i < MASKING_N - 1; i++) {
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4e:	e03f      	b.n	8001cd0 <masked_value_set+0x9c>
        uint32_t lo = 0, hi = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
        	HAL_StatusTypeDef status1 = HAL_RNG_GenerateRandomNumber(&hrng, &lo);
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4823      	ldr	r0, [pc, #140]	@ (8001cec <masked_value_set+0xb8>)
 8001c60:	f005 f906 	bl	8006e70 <HAL_RNG_GenerateRandomNumber>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
           HAL_StatusTypeDef status2 = HAL_RNG_GenerateRandomNumber(&hrng, &hi);
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	4619      	mov	r1, r3
 8001c70:	481e      	ldr	r0, [pc, #120]	@ (8001cec <masked_value_set+0xb8>)
 8001c72:	f005 f8fd 	bl	8006e70 <HAL_RNG_GenerateRandomNumber>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        out->share[i] = ((uint64_t)hi << 32) | lo;
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	607a      	str	r2, [r7, #4]
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	6839      	ldr	r1, [r7, #0]
 8001c8e:	000b      	movs	r3, r1
 8001c90:	2200      	movs	r2, #0
 8001c92:	69f9      	ldr	r1, [r7, #28]
 8001c94:	2000      	movs	r0, #0
 8001c96:	460c      	mov	r4, r1
 8001c98:	4605      	mov	r5, r0
 8001c9a:	ea42 0804 	orr.w	r8, r2, r4
 8001c9e:	ea43 0905 	orr.w	r9, r3, r5
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	e9c3 8900 	strd	r8, r9, [r3]
        acc ^= out->share[i];
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cbe:	ea80 0a02 	eor.w	sl, r0, r2
 8001cc2:	ea81 0b03 	eor.w	fp, r1, r3
 8001cc6:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N - 1; i++) {
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	3301      	adds	r3, #1
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	ddbc      	ble.n	8001c50 <masked_value_set+0x1c>
    }

    out->share[MASKING_N - 1] = acc;
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cdc:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001ce0:	bf00      	nop
 8001ce2:	3730      	adds	r7, #48	@ 0x30
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cea:	bf00      	nop
 8001cec:	20000140 	.word	0x20000140

08001cf0 <masked_absorb>:
void masked_absorb(masked_uint64_t state[5][5], const uint8_t *input, size_t input_len) {
 8001cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf4:	b0ce      	sub	sp, #312	@ 0x138
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001cfc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d00:	6018      	str	r0, [r3, #0]
 8001d02:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001d0a:	6019      	str	r1, [r3, #0]
 8001d0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d10:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d14:	601a      	str	r2, [r3, #0]
    // Zero the state
    for (int x = 0; x < 5; x++) {
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001d1c:	e039      	b.n	8001d92 <masked_absorb+0xa2>
        for (int y = 0; y < 5; y++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d24:	e02c      	b.n	8001d80 <masked_absorb+0x90>
            for (int i = 0; i < MASKING_N; i++) {
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001d2c:	e01f      	b.n	8001d6e <masked_absorb+0x7e>
                state[x][y].share[i] = 0;
 8001d2e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	015b      	lsls	r3, r3, #5
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d40:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	1899      	adds	r1, r3, r2
 8001d48:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d4c:	009a      	lsls	r2, r3, #2
 8001d4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4419      	add	r1, r3
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8001d64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	dddb      	ble.n	8001d2e <masked_absorb+0x3e>
        for (int y = 0; y < 5; y++) {
 8001d76:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001d80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	ddce      	ble.n	8001d26 <masked_absorb+0x36>
    for (int x = 0; x < 5; x++) {
 8001d88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	ddc1      	ble.n	8001d1e <masked_absorb+0x2e>
            }
        }
    }

    size_t offset = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    // Process complete blocks
    while (input_len >= KECCAK_RATE) {
 8001da0:	e0b8      	b.n	8001f14 <masked_absorb+0x224>
        for (int i = 0; i < KECCAK_RATE; i += 8) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001da8:	e098      	b.n	8001edc <masked_absorb+0x1ec>
            uint64_t lane = 0;
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            // Correctly load 8 bytes as a 64-bit value (little-endian)
            for (int j = 0; j < 8; j++) {
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001dbc:	e03a      	b.n	8001e34 <masked_absorb+0x144>
                lane |= ((uint64_t)input[offset + i + j]) << (8 * j);
 8001dbe:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001dc6:	441a      	add	r2, r3
 8001dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001dcc:	441a      	add	r2, r3
 8001dce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001dd2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4413      	add	r3, r2
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2200      	movs	r2, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	617a      	str	r2, [r7, #20]
 8001de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	f1a3 0120 	sub.w	r1, r3, #32
 8001dee:	f1c3 0220 	rsb	r2, r3, #32
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	fa00 f903 	lsl.w	r9, r0, r3
 8001df8:	6938      	ldr	r0, [r7, #16]
 8001dfa:	fa00 f101 	lsl.w	r1, r0, r1
 8001dfe:	ea49 0901 	orr.w	r9, r9, r1
 8001e02:	6939      	ldr	r1, [r7, #16]
 8001e04:	fa21 f202 	lsr.w	r2, r1, r2
 8001e08:	ea49 0902 	orr.w	r9, r9, r2
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	fa02 f803 	lsl.w	r8, r2, r3
 8001e12:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e16:	ea42 0108 	orr.w	r1, r2, r8
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	ea43 0309 	orr.w	r3, r3, r9
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e26:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            for (int j = 0; j < 8; j++) {
 8001e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8001e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e38:	2b07      	cmp	r3, #7
 8001e3a:	ddc0      	ble.n	8001dbe <masked_absorb+0xce>
            }

            size_t x = (i / 8) % 5;
 8001e3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da00      	bge.n	8001e46 <masked_absorb+0x156>
 8001e44:	3307      	adds	r3, #7
 8001e46:	10db      	asrs	r3, r3, #3
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4ba7      	ldr	r3, [pc, #668]	@ (80020e8 <masked_absorb+0x3f8>)
 8001e4c:	fb83 2301 	smull	r2, r3, r3, r1
 8001e50:	105a      	asrs	r2, r3, #1
 8001e52:	17cb      	asrs	r3, r1, #31
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	441a      	add	r2, r3
 8001e5c:	1a8b      	subs	r3, r1, r2
 8001e5e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
            size_t y = (i / 8) / 5;
 8001e62:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8001e66:	4ba0      	ldr	r3, [pc, #640]	@ (80020e8 <masked_absorb+0x3f8>)
 8001e68:	fb83 2301 	smull	r2, r3, r3, r1
 8001e6c:	111a      	asrs	r2, r3, #4
 8001e6e:	17cb      	asrs	r3, r1, #31
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

            // Securely mask the input value
            masked_uint64_t masked_lane;
            masked_value_set(&masked_lane, lane);
 8001e76:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001e7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7e:	4608      	mov	r0, r1
 8001e80:	f7ff fed8 	bl	8001c34 <masked_value_set>

            // XOR into the state
            masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8001e84:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	015b      	lsls	r3, r3, #5
 8001e90:	461a      	mov	r2, r3
 8001e92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e96:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ea2:	015b      	lsls	r3, r3, #5
 8001ea4:	18d0      	adds	r0, r2, r3
 8001ea6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	015b      	lsls	r3, r3, #5
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001eb8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	441a      	add	r2, r3
 8001ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec4:	015b      	lsls	r3, r3, #5
 8001ec6:	18d1      	adds	r1, r2, r3
 8001ec8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f000 f954 	bl	800217a <masked_xor>
        for (int i = 0; i < KECCAK_RATE; i += 8) {
 8001ed2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001edc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001ee0:	2ba7      	cmp	r3, #167	@ 0xa7
 8001ee2:	f77f af62 	ble.w	8001daa <masked_absorb+0xba>
        }

        // Apply the permutation
        masked_keccak_f1600(state);
 8001ee6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001eea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	f000 fae2 	bl	80024b8 <masked_keccak_f1600>

        offset += KECCAK_RATE;
 8001ef4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ef8:	33a8      	adds	r3, #168	@ 0xa8
 8001efa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        input_len -= KECCAK_RATE;
 8001efe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f02:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 8001f06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f0a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	3ba8      	subs	r3, #168	@ 0xa8
 8001f12:	6013      	str	r3, [r2, #0]
    while (input_len >= KECCAK_RATE) {
 8001f14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f18:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2ba7      	cmp	r3, #167	@ 0xa7
 8001f20:	f63f af3f 	bhi.w	8001da2 <masked_absorb+0xb2>
    }

    // Final block with padding
    uint8_t block[KECCAK_RATE] = {0};
 8001f24:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f28:	22a8      	movs	r2, #168	@ 0xa8
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f009 fd15 	bl	800b95c <memset>
    memcpy(block, input + offset, input_len);
 8001f32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f36:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001f40:	18d1      	adds	r1, r2, r3
 8001f42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f46:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f4a:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	f009 fd8f 	bl	800ba72 <memcpy>
    block[input_len] ^= 0x06;  // Apply domain separation
 8001f54:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001f58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f5c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4413      	add	r3, r2
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	f083 0306 	eor.w	r3, r3, #6
 8001f6a:	b2d9      	uxtb	r1, r3
 8001f6c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001f70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001f74:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	460a      	mov	r2, r1
 8001f7e:	701a      	strb	r2, [r3, #0]
    block[KECCAK_RATE - 1] ^= 0x80;  // Apply padding
 8001f80:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8001f84:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3

    // Process the final block
    for (int i = 0; i < KECCAK_RATE; i += 8) {
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8001f96:	e095      	b.n	80020c4 <masked_absorb+0x3d4>
        uint64_t lane = 0;
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < 8 && (i + j) < KECCAK_RATE; j++) {  // Added bounds check
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001faa:	e030      	b.n	800200e <masked_absorb+0x31e>
            lane |= ((uint64_t)block[i + j]) << (8 * j);
 8001fac:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8001fba:	f107 0218 	add.w	r2, r7, #24
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f813 3cec 	ldrb.w	r3, [r3, #-236]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	469a      	mov	sl, r3
 8001fca:	4693      	mov	fp, r2
 8001fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	f1a3 0120 	sub.w	r1, r3, #32
 8001fd6:	f1c3 0220 	rsb	r2, r3, #32
 8001fda:	fa0b f503 	lsl.w	r5, fp, r3
 8001fde:	fa0a f101 	lsl.w	r1, sl, r1
 8001fe2:	430d      	orrs	r5, r1
 8001fe4:	fa2a f202 	lsr.w	r2, sl, r2
 8001fe8:	4315      	orrs	r5, r2
 8001fea:	fa0a f403 	lsl.w	r4, sl, r3
 8001fee:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8001ff2:	ea42 0104 	orr.w	r1, r2, r4
 8001ff6:	6039      	str	r1, [r7, #0]
 8001ff8:	432b      	orrs	r3, r5
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002000:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < 8 && (i + j) < KECCAK_RATE; j++) {  // Added bounds check
 8002004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002008:	3301      	adds	r3, #1
 800200a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800200e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002012:	2b07      	cmp	r3, #7
 8002014:	dc06      	bgt.n	8002024 <masked_absorb+0x334>
 8002016:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800201a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800201e:	4413      	add	r3, r2
 8002020:	2ba7      	cmp	r3, #167	@ 0xa7
 8002022:	ddc3      	ble.n	8001fac <masked_absorb+0x2bc>
        }

        size_t x = (i / 8) % 5;
 8002024:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002028:	2b00      	cmp	r3, #0
 800202a:	da00      	bge.n	800202e <masked_absorb+0x33e>
 800202c:	3307      	adds	r3, #7
 800202e:	10db      	asrs	r3, r3, #3
 8002030:	4619      	mov	r1, r3
 8002032:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <masked_absorb+0x3f8>)
 8002034:	fb83 2301 	smull	r2, r3, r3, r1
 8002038:	105a      	asrs	r2, r3, #1
 800203a:	17cb      	asrs	r3, r1, #31
 800203c:	1ad2      	subs	r2, r2, r3
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	1aca      	subs	r2, r1, r3
 8002046:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
        size_t y = (i / 8) / 5;
 800204a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800204e:	4a26      	ldr	r2, [pc, #152]	@ (80020e8 <masked_absorb+0x3f8>)
 8002050:	fb82 1203 	smull	r1, r2, r2, r3
 8002054:	1112      	asrs	r2, r2, #4
 8002056:	17db      	asrs	r3, r3, #31
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

        masked_uint64_t masked_lane;
        masked_value_set(&masked_lane, lane);
 800205e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002062:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8002066:	4608      	mov	r0, r1
 8002068:	f7ff fde4 	bl	8001c34 <masked_value_set>
        masked_xor(&state[x][y], &state[x][y], &masked_lane);
 800206c:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	015b      	lsls	r3, r3, #5
 8002078:	461a      	mov	r2, r3
 800207a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800207e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	441a      	add	r2, r3
 8002086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800208a:	015b      	lsls	r3, r3, #5
 800208c:	18d0      	adds	r0, r2, r3
 800208e:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	015b      	lsls	r3, r3, #5
 800209a:	461a      	mov	r2, r3
 800209c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	441a      	add	r2, r3
 80020a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ac:	015b      	lsls	r3, r3, #5
 80020ae:	4413      	add	r3, r2
 80020b0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80020b4:	4619      	mov	r1, r3
 80020b6:	f000 f860 	bl	800217a <masked_xor>
    for (int i = 0; i < KECCAK_RATE; i += 8) {
 80020ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020be:	3308      	adds	r3, #8
 80020c0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80020c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020c8:	2ba7      	cmp	r3, #167	@ 0xa7
 80020ca:	f77f af65 	ble.w	8001f98 <masked_absorb+0x2a8>
    }

    // Final permutation
    masked_keccak_f1600(state);
 80020ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80020d2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020d6:	6818      	ldr	r0, [r3, #0]
 80020d8:	f000 f9ee 	bl	80024b8 <masked_keccak_f1600>
}
 80020dc:	bf00      	nop
 80020de:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80020e2:	46bd      	mov	sp, r7
 80020e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020e8:	66666667 	.word	0x66666667

080020ec <fill_random_matrix>:
#include "masked_types.h"
#include "global_rng.h"  // ensure this includes `extern RNG_HandleTypeDef hrng`
#include "stm32f4xx_hal_rng.h"  // required for HAL RNG
#include <stddef.h>  // for size_t

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 80020ec:	b5b0      	push	{r4, r5, r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	e037      	b.n	800216a <fill_random_matrix+0x7e>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	e020      	b.n	8002144 <fill_random_matrix+0x58>
            uint64_t val = get_random64();
 8002102:	f7fe fff9 	bl	80010f8 <get_random64>
 8002106:	4603      	mov	r3, r0
 8002108:	17da      	asrs	r2, r3, #31
 800210a:	461c      	mov	r4, r3
 800210c:	4615      	mov	r5, r2
 800210e:	e9c7 4502 	strd	r4, r5, [r7, #8]
            r[i][j] = val;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	015b      	lsls	r3, r3, #5
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	441a      	add	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	18d1      	adds	r1, r2, r3
 8002120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002124:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry!
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	441a      	add	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	18d1      	adds	r1, r2, r3
 8002136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800213a:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	3301      	adds	r3, #1
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d9db      	bls.n	8002102 <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	015b      	lsls	r3, r3, #5
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	441a      	add	r2, r3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	18d1      	adds	r1, r2, r3
 8002158:	f04f 0200 	mov.w	r2, #0
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3301      	adds	r3, #1
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	2b03      	cmp	r3, #3
 800216e:	d9c4      	bls.n	80020fa <fill_random_matrix+0xe>
    }
}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3718      	adds	r7, #24
 8002176:	46bd      	mov	sp, r7
 8002178:	bdb0      	pop	{r4, r5, r7, pc}

0800217a <masked_xor>:



void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 800217a:	b4b0      	push	{r4, r5, r7}
 800217c:	b087      	sub	sp, #28
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	e018      	b.n	80021be <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4413      	add	r3, r2
 8002194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4413      	add	r3, r2
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	ea80 0402 	eor.w	r4, r0, r2
 80021a8:	ea81 0503 	eor.w	r5, r1, r3
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d9e3      	bls.n	800218c <masked_xor+0x12>
    }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	371c      	adds	r7, #28
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bcb0      	pop	{r4, r5, r7}
 80021ce:	4770      	bx	lr

080021d0 <masked_and>:

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 80021d0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80021d4:	b092      	sub	sp, #72	@ 0x48
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80021da:	62b9      	str	r1, [r7, #40]	@ 0x28
 80021dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80021de:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 80021e0:	2300      	movs	r3, #0
 80021e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e4:	e018      	b.n	8002218 <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 80021e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	4413      	add	r3, r2
 80021ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	ea00 0402 	and.w	r4, r0, r2
 8002202:	ea01 0503 	and.w	r5, r1, r3
 8002206:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002212:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002214:	3301      	adds	r3, #1
 8002216:	647b      	str	r3, [r7, #68]	@ 0x44
 8002218:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800221a:	2b03      	cmp	r3, #3
 800221c:	d9e3      	bls.n	80021e6 <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 800221e:	2300      	movs	r3, #0
 8002220:	643b      	str	r3, [r7, #64]	@ 0x40
 8002222:	e078      	b.n	8002316 <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002224:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002226:	3301      	adds	r3, #1
 8002228:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800222a:	e06e      	b.n	800230a <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 800222c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800222e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	4413      	add	r3, r2
 8002234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002244:	ea00 0802 	and.w	r8, r0, r2
 8002248:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 800224c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800224e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800225a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	ea00 0a02 	and.w	sl, r0, r2
 8002268:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 800226c:	ea88 030a 	eor.w	r3, r8, sl
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	ea89 030b 	eor.w	r3, r9, fp
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	e9d7 3400 	ldrd	r3, r4, [r7]
 800227c:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 8002280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800228c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	441a      	add	r2, r3
 8002294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229e:	ea80 0402 	eor.w	r4, r0, r2
 80022a2:	61bc      	str	r4, [r7, #24]
 80022a4:	404b      	eors	r3, r1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80022b4:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 80022b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80022c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	441a      	add	r2, r3
 80022cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022da:	ea80 0602 	eor.w	r6, r0, r2
 80022de:	613e      	str	r6, [r7, #16]
 80022e0:	404b      	eors	r3, r1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022e8:	460b      	mov	r3, r1
 80022ea:	4063      	eors	r3, r4
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4613      	mov	r3, r2
 80022f0:	406b      	eors	r3, r5
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002300:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002306:	3301      	adds	r3, #1
 8002308:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800230a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800230c:	2b03      	cmp	r3, #3
 800230e:	d98d      	bls.n	800222c <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 8002310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002312:	3301      	adds	r3, #1
 8002314:	643b      	str	r3, [r7, #64]	@ 0x40
 8002316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002318:	2b03      	cmp	r3, #3
 800231a:	d983      	bls.n	8002224 <masked_and+0x54>
        }
    }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3748      	adds	r7, #72	@ 0x48
 8002322:	46bd      	mov	sp, r7
 8002324:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002328:	4770      	bx	lr

0800232a <masked_recombine>:
#include "masked_types.h"
#include "masked_gadgets.h"
#include "stm32f4xx_hal.h"
#include <stdio.h>

uint64_t masked_recombine(const masked_uint64_t *m) {
 800232a:	b4b0      	push	{r4, r5, r7}
 800232c:	b087      	sub	sp, #28
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
    uint64_t result = 0;
 8002332:	f04f 0000 	mov.w	r0, #0
 8002336:	f04f 0100 	mov.w	r1, #0
 800233a:	e9c7 0104 	strd	r0, r1, [r7, #16]
    for (int i = 0; i < MASKING_N; i++) {
 800233e:	2100      	movs	r1, #0
 8002340:	60f9      	str	r1, [r7, #12]
 8002342:	e010      	b.n	8002366 <masked_recombine+0x3c>
        result ^= m->share[i];
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	68f9      	ldr	r1, [r7, #12]
 8002348:	00c9      	lsls	r1, r1, #3
 800234a:	4401      	add	r1, r0
 800234c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002350:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002354:	ea84 0200 	eor.w	r2, r4, r0
 8002358:	ea85 0301 	eor.w	r3, r5, r1
 800235c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < MASKING_N; i++) {
 8002360:	68f9      	ldr	r1, [r7, #12]
 8002362:	3101      	adds	r1, #1
 8002364:	60f9      	str	r1, [r7, #12]
 8002366:	68f9      	ldr	r1, [r7, #12]
 8002368:	2903      	cmp	r1, #3
 800236a:	ddeb      	ble.n	8002344 <masked_recombine+0x1a>
    }
    return result;
 800236c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	bcb0      	pop	{r4, r5, r7}
 800237a:	4770      	bx	lr

0800237c <debug_print_masked_state>:
void debug_print_masked_state(masked_uint64_t state[5][5]) {
 800237c:	b5b0      	push	{r4, r5, r7, lr}
 800237e:	b08e      	sub	sp, #56	@ 0x38
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
    printf("=== Full Masked State (Shares + Recombined) ===\n");
 8002384:	4848      	ldr	r0, [pc, #288]	@ (80024a8 <debug_print_masked_state+0x12c>)
 8002386:	f009 f945 	bl	800b614 <puts>
    for (int y = 0; y < 5; y++) {
 800238a:	2300      	movs	r3, #0
 800238c:	637b      	str	r3, [r7, #52]	@ 0x34
 800238e:	e081      	b.n	8002494 <debug_print_masked_state+0x118>
        for (int x = 0; x < 5; x++) {
 8002390:	2300      	movs	r3, #0
 8002392:	633b      	str	r3, [r7, #48]	@ 0x30
 8002394:	e078      	b.n	8002488 <debug_print_masked_state+0x10c>
            printf("State[%d][%d]: ", x, y);
 8002396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002398:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800239a:	4844      	ldr	r0, [pc, #272]	@ (80024ac <debug_print_masked_state+0x130>)
 800239c:	f009 f8ca 	bl	800b534 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a4:	e032      	b.n	800240c <debug_print_masked_state+0x90>
                uint32_t hi = (uint32_t)(state[x][y].share[i] >> 32);
 80023a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023a8:	4613      	mov	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	015b      	lsls	r3, r3, #5
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	441a      	add	r2, r3
 80023b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023b8:	0099      	lsls	r1, r3, #2
 80023ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023bc:	440b      	add	r3, r1
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	4413      	add	r3, r2
 80023c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	000a      	movs	r2, r1
 80023d0:	2300      	movs	r3, #0
 80023d2:	4613      	mov	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
                uint32_t lo = (uint32_t)(state[x][y].share[i] & 0xFFFFFFFF);
 80023d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	015b      	lsls	r3, r3, #5
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	441a      	add	r2, r3
 80023e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023e8:	0099      	lsls	r1, r3, #2
 80023ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ec:	440b      	add	r3, r1
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	4613      	mov	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
                printf("S[%d]=0x%08X%08X ", i, hi, lo);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002400:	482b      	ldr	r0, [pc, #172]	@ (80024b0 <debug_print_masked_state+0x134>)
 8002402:	f009 f897 	bl	800b534 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 8002406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002408:	3301      	adds	r3, #1
 800240a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800240c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240e:	2b03      	cmp	r3, #3
 8002410:	ddc9      	ble.n	80023a6 <debug_print_masked_state+0x2a>
            }
            // Recombined value
            uint64_t val = 0;
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int i = 0; i < MASKING_N; i++) {
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e01a      	b.n	800245a <debug_print_masked_state+0xde>
                val ^= state[x][y].share[i];
 8002424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	015b      	lsls	r3, r3, #5
 800242e:	461a      	mov	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	441a      	add	r2, r3
 8002434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002436:	0099      	lsls	r1, r3, #2
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	440b      	add	r3, r1
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002448:	ea80 0402 	eor.w	r4, r0, r2
 800244c:	ea81 0503 	eor.w	r5, r1, r3
 8002450:	e9c7 4508 	strd	r4, r5, [r7, #32]
            for (int i = 0; i < MASKING_N; i++) {
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	3301      	adds	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b03      	cmp	r3, #3
 800245e:	dde1      	ble.n	8002424 <debug_print_masked_state+0xa8>
            }
            uint32_t r_hi = (uint32_t)(val >> 32);
 8002460:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	000a      	movs	r2, r1
 800246e:	2300      	movs	r3, #0
 8002470:	4613      	mov	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
            uint32_t r_lo = (uint32_t)(val & 0xFFFFFFFF);
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	617b      	str	r3, [r7, #20]
            printf(" | R=0x%08X%08X\n", r_hi, r_lo);
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	69b9      	ldr	r1, [r7, #24]
 800247c:	480d      	ldr	r0, [pc, #52]	@ (80024b4 <debug_print_masked_state+0x138>)
 800247e:	f009 f859 	bl	800b534 <iprintf>
        for (int x = 0; x < 5; x++) {
 8002482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002484:	3301      	adds	r3, #1
 8002486:	633b      	str	r3, [r7, #48]	@ 0x30
 8002488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248a:	2b04      	cmp	r3, #4
 800248c:	dd83      	ble.n	8002396 <debug_print_masked_state+0x1a>
    for (int y = 0; y < 5; y++) {
 800248e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002490:	3301      	adds	r3, #1
 8002492:	637b      	str	r3, [r7, #52]	@ 0x34
 8002494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002496:	2b04      	cmp	r3, #4
 8002498:	f77f af7a 	ble.w	8002390 <debug_print_masked_state+0x14>
        }
    }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3738      	adds	r7, #56	@ 0x38
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bdb0      	pop	{r4, r5, r7, pc}
 80024a6:	bf00      	nop
 80024a8:	0800c58c 	.word	0x0800c58c
 80024ac:	0800c5bc 	.word	0x0800c5bc
 80024b0:	0800c5cc 	.word	0x0800c5cc
 80024b4:	0800c5e0 	.word	0x0800c5e0

080024b8 <masked_keccak_f1600>:
    0x000000000000800aULL, 0x800000008000000aULL,
    0x8000000080008081ULL, 0x8000000000008080ULL,
    0x0000000080000001ULL, 0x8000000080008008ULL
};

void masked_keccak_f1600(masked_uint64_t state[5][5]) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b090      	sub	sp, #64	@ 0x40
 80024bc:	af02      	add	r7, sp, #8
 80024be:	6078      	str	r0, [r7, #4]
	debug_print_masked_state(state);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff5b 	bl	800237c <debug_print_masked_state>
	printf("== Before masked_keccak_f1600 ==\n");
 80024c6:	4854      	ldr	r0, [pc, #336]	@ (8002618 <masked_keccak_f1600+0x160>)
 80024c8:	f009 f8a4 	bl	800b614 <puts>
	for (int x = 0; x < 5; x++) {
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80024d0:	e02f      	b.n	8002532 <masked_keccak_f1600+0x7a>
	    for (int y = 0; y < 5; y++) {
 80024d2:	2300      	movs	r3, #0
 80024d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80024d6:	e026      	b.n	8002526 <masked_keccak_f1600+0x6e>
	        uint64_t recombined = masked_recombine(&state[x][y]);
 80024d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	015b      	lsls	r3, r3, #5
 80024e2:	461a      	mov	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	441a      	add	r2, r3
 80024e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ea:	015b      	lsls	r3, r3, #5
 80024ec:	4413      	add	r3, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff ff1b 	bl	800232a <masked_recombine>
 80024f4:	e9c7 0104 	strd	r0, r1, [r7, #16]
	        uint32_t hi = (uint32_t)(recombined >> 32);
 80024f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	000a      	movs	r2, r1
 8002506:	2300      	movs	r3, #0
 8002508:	4613      	mov	r3, r2
 800250a:	60fb      	str	r3, [r7, #12]
	        uint32_t lo = (uint32_t)(recombined & 0xFFFFFFFF);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	60bb      	str	r3, [r7, #8]
	        printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002518:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800251a:	4840      	ldr	r0, [pc, #256]	@ (800261c <masked_keccak_f1600+0x164>)
 800251c:	f009 f80a 	bl	800b534 <iprintf>
	    for (int y = 0; y < 5; y++) {
 8002520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002522:	3301      	adds	r3, #1
 8002524:	633b      	str	r3, [r7, #48]	@ 0x30
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	2b04      	cmp	r3, #4
 800252a:	ddd5      	ble.n	80024d8 <masked_keccak_f1600+0x20>
	for (int x = 0; x < 5; x++) {
 800252c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800252e:	3301      	adds	r3, #1
 8002530:	637b      	str	r3, [r7, #52]	@ 0x34
 8002532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002534:	2b04      	cmp	r3, #4
 8002536:	ddcc      	ble.n	80024d2 <masked_keccak_f1600+0x1a>

	    }
	}


    for (int i = 0; i < 24; i++) {
 8002538:	2300      	movs	r3, #0
 800253a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800253c:	e00b      	b.n	8002556 <masked_keccak_f1600+0x9e>
        masked_keccak_round(state, keccak_round_constants[i]);
 800253e:	4a38      	ldr	r2, [pc, #224]	@ (8002620 <masked_keccak_f1600+0x168>)
 8002540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff fad0 	bl	8001af0 <masked_keccak_round>
    for (int i = 0; i < 24; i++) {
 8002550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002552:	3301      	adds	r3, #1
 8002554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002558:	2b17      	cmp	r3, #23
 800255a:	ddf0      	ble.n	800253e <masked_keccak_f1600+0x86>
    }
    debug_print_masked_state(state);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff0d 	bl	800237c <debug_print_masked_state>
    printf("== After masked_keccak_f1600 ==\n");
 8002562:	4830      	ldr	r0, [pc, #192]	@ (8002624 <masked_keccak_f1600+0x16c>)
 8002564:	f009 f856 	bl	800b614 <puts>
    for (int x = 0; x < 5; x++) {
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800256c:	e04b      	b.n	8002606 <masked_keccak_f1600+0x14e>
        for (int y = 0; y < 5; y++) {
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
 8002572:	e042      	b.n	80025fa <masked_keccak_f1600+0x142>
            printf("State[%d][%d]:", x, y);
 8002574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002578:	482b      	ldr	r0, [pc, #172]	@ (8002628 <masked_keccak_f1600+0x170>)
 800257a:	f008 ffdb 	bl	800b534 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 800257e:	2300      	movs	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
 8002582:	e031      	b.n	80025e8 <masked_keccak_f1600+0x130>
                uint32_t hi = (uint32_t)(state[x][y].share[i] >> 32);
 8002584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	015b      	lsls	r3, r3, #5
 800258e:	461a      	mov	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	441a      	add	r2, r3
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	0099      	lsls	r1, r3, #2
 8002598:	6a3b      	ldr	r3, [r7, #32]
 800259a:	440b      	add	r3, r1
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4413      	add	r3, r2
 80025a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	000a      	movs	r2, r1
 80025ae:	2300      	movs	r3, #0
 80025b0:	4613      	mov	r3, r2
 80025b2:	61fb      	str	r3, [r7, #28]
                uint32_t lo = (uint32_t)(state[x][y].share[i] & 0xFFFFFFFF);
 80025b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	015b      	lsls	r3, r3, #5
 80025be:	461a      	mov	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	441a      	add	r2, r3
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	0099      	lsls	r1, r3, #2
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	440b      	add	r3, r1
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	4613      	mov	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
                printf(" %08lX%08lX", hi, lo);
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	69f9      	ldr	r1, [r7, #28]
 80025dc:	4813      	ldr	r0, [pc, #76]	@ (800262c <masked_keccak_f1600+0x174>)
 80025de:	f008 ffa9 	bl	800b534 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	3301      	adds	r3, #1
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	ddca      	ble.n	8002584 <masked_keccak_f1600+0xcc>
            }
            printf("\n");
 80025ee:	200a      	movs	r0, #10
 80025f0:	f008 ffb2 	bl	800b558 <putchar>
        for (int y = 0; y < 5; y++) {
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	3301      	adds	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	ddb9      	ble.n	8002574 <masked_keccak_f1600+0xbc>
    for (int x = 0; x < 5; x++) {
 8002600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002602:	3301      	adds	r3, #1
 8002604:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002608:	2b04      	cmp	r3, #4
 800260a:	ddb0      	ble.n	800256e <masked_keccak_f1600+0xb6>
        }
    }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3738      	adds	r7, #56	@ 0x38
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	0800c5f4 	.word	0x0800c5f4
 800261c:	0800c618 	.word	0x0800c618
 8002620:	0800c6b8 	.word	0x0800c6b8
 8002624:	0800c634 	.word	0x0800c634
 8002628:	0800c654 	.word	0x0800c654
 800262c:	0800c664 	.word	0x0800c664

08002630 <masked_sha3_512>:
#include "masked_squeeze.h"

#define SHA3_512_RATE 72             // SHA3-512 rate in bytes
#define SHA3_512_OUTPUT_SIZE 64      // SHA3-512 output in bytes

void masked_sha3_512(uint8_t *output, const uint8_t *input, size_t input_len) {
 8002630:	b580      	push	{r7, lr}
 8002632:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8002636:	af00      	add	r7, sp, #0
 8002638:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800263c:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002640:	6018      	str	r0, [r3, #0]
 8002642:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002646:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 800264a:	6019      	str	r1, [r3, #0]
 800264c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002650:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002654:	601a      	str	r2, [r3, #0]
    masked_uint64_t state[5][5];

    // === Zero the state ===
    for (int x = 0; x < 5; x++) {
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800265c:	e036      	b.n	80026cc <masked_sha3_512+0x9c>
        for (int y = 0; y < 5; y++) {
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8002664:	e029      	b.n	80026ba <masked_sha3_512+0x8a>
            for (int i = 0; i < MASKING_N; i++) {
 8002666:	2300      	movs	r3, #0
 8002668:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800266c:	e01c      	b.n	80026a8 <masked_sha3_512+0x78>
                state[x][y].share[i] = 0;
 800266e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002672:	f5a3 714c 	sub.w	r1, r3, #816	@ 0x330
 8002676:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8002684:	4413      	add	r3, r2
 8002686:	009a      	lsls	r2, r3, #2
 8002688:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4419      	add	r1, r3
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	f04f 0300 	mov.w	r3, #0
 800269a:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 800269e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80026a2:	3301      	adds	r3, #1
 80026a4:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80026a8:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	ddde      	ble.n	800266e <masked_sha3_512+0x3e>
        for (int y = 0; y < 5; y++) {
 80026b0:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80026b4:	3301      	adds	r3, #1
 80026b6:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80026ba:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80026be:	2b04      	cmp	r3, #4
 80026c0:	ddd1      	ble.n	8002666 <masked_sha3_512+0x36>
    for (int x = 0; x < 5; x++) {
 80026c2:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80026c6:	3301      	adds	r3, #1
 80026c8:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80026cc:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80026d0:	2b04      	cmp	r3, #4
 80026d2:	ddc4      	ble.n	800265e <masked_sha3_512+0x2e>
            }
        }
    }

    // === Absorb input using masked absorb ===
    printf("Starting masked_absorb\n");
 80026d4:	4811      	ldr	r0, [pc, #68]	@ (800271c <masked_sha3_512+0xec>)
 80026d6:	f008 ff9d 	bl	800b614 <puts>
    masked_absorb(state, input, input_len);
 80026da:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80026de:	f5a3 724f 	sub.w	r2, r3, #828	@ 0x33c
 80026e2:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80026e6:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 80026ea:	f107 0010 	add.w	r0, r7, #16
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	f7ff fafd 	bl	8001cf0 <masked_absorb>
    printf("Finished absorb\n");
 80026f6:	480a      	ldr	r0, [pc, #40]	@ (8002720 <masked_sha3_512+0xf0>)
 80026f8:	f008 ff8c 	bl	800b614 <puts>

    // === Squeeze output using masked squeeze ===
    masked_squeeze(output, SHA3_512_OUTPUT_SIZE, state);
 80026fc:	f107 0210 	add.w	r2, r7, #16
 8002700:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002704:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002708:	2140      	movs	r1, #64	@ 0x40
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	f000 f80a 	bl	8002724 <masked_squeeze>
}
 8002710:	bf00      	nop
 8002712:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	0800c670 	.word	0x0800c670
 8002720:	0800c688 	.word	0x0800c688

08002724 <masked_squeeze>:

#include <stddef.h>

#define KECCAK_RATE 168  // SHAKE128 rate in bytes

void masked_squeeze(uint8_t *output, size_t output_len, masked_uint64_t state[5][5]) {
 8002724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002728:	b08d      	sub	sp, #52	@ 0x34
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
    size_t offset = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (offset < output_len) {
 8002736:	e075      	b.n	8002824 <masked_squeeze+0x100>
        // Squeeze up to KECCAK_RATE bytes per iteration
        for (int i = 0; i < KECCAK_RATE && offset < output_len; i++) {
 8002738:	2300      	movs	r3, #0
 800273a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800273c:	e064      	b.n	8002808 <masked_squeeze+0xe4>
            size_t x = (i / 8) % 5;
 800273e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002740:	2b00      	cmp	r3, #0
 8002742:	da00      	bge.n	8002746 <masked_squeeze+0x22>
 8002744:	3307      	adds	r3, #7
 8002746:	10db      	asrs	r3, r3, #3
 8002748:	4619      	mov	r1, r3
 800274a:	4b3b      	ldr	r3, [pc, #236]	@ (8002838 <masked_squeeze+0x114>)
 800274c:	fb83 2301 	smull	r2, r3, r3, r1
 8002750:	105a      	asrs	r2, r3, #1
 8002752:	17cb      	asrs	r3, r1, #31
 8002754:	1ad2      	subs	r2, r2, r3
 8002756:	4613      	mov	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	4413      	add	r3, r2
 800275c:	1aca      	subs	r2, r1, r3
 800275e:	61ba      	str	r2, [r7, #24]
            size_t y = (i / 8) / 5;
 8002760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002762:	4a35      	ldr	r2, [pc, #212]	@ (8002838 <masked_squeeze+0x114>)
 8002764:	fb82 1203 	smull	r1, r2, r2, r3
 8002768:	1112      	asrs	r2, r2, #4
 800276a:	17db      	asrs	r3, r3, #31
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	617b      	str	r3, [r7, #20]
            size_t byte_pos = i % 8;
 8002770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002772:	425a      	negs	r2, r3
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	f002 0207 	and.w	r2, r2, #7
 800277c:	bf58      	it	pl
 800277e:	4253      	negpl	r3, r2
 8002780:	613b      	str	r3, [r7, #16]

            // Recombine shares to get the true output byte
            uint64_t lane = 0;
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 800278e:	2300      	movs	r3, #0
 8002790:	61fb      	str	r3, [r7, #28]
 8002792:	e01a      	b.n	80027ca <masked_squeeze+0xa6>
                lane ^= state[x][y].share[j];
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	015b      	lsls	r3, r3, #5
 800279e:	461a      	mov	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	441a      	add	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	0099      	lsls	r1, r3, #2
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	440b      	add	r3, r1
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	4413      	add	r3, r2
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80027b8:	ea80 0802 	eor.w	r8, r0, r2
 80027bc:	ea81 0903 	eor.w	r9, r1, r3
 80027c0:	e9c7 8908 	strd	r8, r9, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	3301      	adds	r3, #1
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	dde1      	ble.n	8002794 <masked_squeeze+0x70>
            }

            output[offset++] = (lane >> (8 * byte_pos)) & 0xFF;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	00d9      	lsls	r1, r3, #3
 80027d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027d8:	f1c1 0620 	rsb	r6, r1, #32
 80027dc:	f1a1 0020 	sub.w	r0, r1, #32
 80027e0:	fa22 f401 	lsr.w	r4, r2, r1
 80027e4:	fa03 f606 	lsl.w	r6, r3, r6
 80027e8:	4334      	orrs	r4, r6
 80027ea:	fa23 f000 	lsr.w	r0, r3, r0
 80027ee:	4304      	orrs	r4, r0
 80027f0:	fa23 f501 	lsr.w	r5, r3, r1
 80027f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f6:	1c5a      	adds	r2, r3, #1
 80027f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4413      	add	r3, r2
 80027fe:	b2e2      	uxtb	r2, r4
 8002800:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < KECCAK_RATE && offset < output_len; i++) {
 8002802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002804:	3301      	adds	r3, #1
 8002806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280a:	2ba7      	cmp	r3, #167	@ 0xa7
 800280c:	dc03      	bgt.n	8002816 <masked_squeeze+0xf2>
 800280e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	429a      	cmp	r2, r3
 8002814:	d393      	bcc.n	800273e <masked_squeeze+0x1a>
        }

        // If we haven’t yet squeezed enough, permute again
        if (offset < output_len) {
 8002816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	d202      	bcs.n	8002824 <masked_squeeze+0x100>
            masked_keccak_f1600(state);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7ff fe4a 	bl	80024b8 <masked_keccak_f1600>
    while (offset < output_len) {
 8002824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	429a      	cmp	r2, r3
 800282a:	d385      	bcc.n	8002738 <masked_squeeze+0x14>
        }
    }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3734      	adds	r7, #52	@ 0x34
 8002832:	46bd      	mov	sp, r7
 8002834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002838:	66666667 	.word	0x66666667

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	607b      	str	r3, [r7, #4]
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HAL_MspInit+0x4c>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	4a0f      	ldr	r2, [pc, #60]	@ (8002888 <HAL_MspInit+0x4c>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002850:	6453      	str	r3, [r2, #68]	@ 0x44
 8002852:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <HAL_MspInit+0x4c>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800285a:	607b      	str	r3, [r7, #4]
 800285c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	603b      	str	r3, [r7, #0]
 8002862:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_MspInit+0x4c>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	4a08      	ldr	r2, [pc, #32]	@ (8002888 <HAL_MspInit+0x4c>)
 8002868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	@ 0x40
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_MspInit+0x4c>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002876:	603b      	str	r3, [r7, #0]
 8002878:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800287a:	2007      	movs	r0, #7
 800287c:	f000 fbe4 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800

0800288c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08a      	sub	sp, #40	@ 0x28
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 0314 	add.w	r3, r7, #20
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a19      	ldr	r2, [pc, #100]	@ (8002910 <HAL_I2C_MspInit+0x84>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d12c      	bne.n	8002908 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	4b18      	ldr	r3, [pc, #96]	@ (8002914 <HAL_I2C_MspInit+0x88>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	4a17      	ldr	r2, [pc, #92]	@ (8002914 <HAL_I2C_MspInit+0x88>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <HAL_I2C_MspInit+0x88>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80028ca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80028ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028d0:	2312      	movs	r3, #18
 80028d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028dc:	2304      	movs	r3, #4
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4619      	mov	r1, r3
 80028e6:	480c      	ldr	r0, [pc, #48]	@ (8002918 <HAL_I2C_MspInit+0x8c>)
 80028e8:	f000 fbf0 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_I2C_MspInit+0x88>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	4a07      	ldr	r2, [pc, #28]	@ (8002914 <HAL_I2C_MspInit+0x88>)
 80028f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fc:	4b05      	ldr	r3, [pc, #20]	@ (8002914 <HAL_I2C_MspInit+0x88>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002904:	60fb      	str	r3, [r7, #12]
 8002906:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002908:	bf00      	nop
 800290a:	3728      	adds	r7, #40	@ 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40005400 	.word	0x40005400
 8002914:	40023800 	.word	0x40023800
 8002918:	40020400 	.word	0x40020400

0800291c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08e      	sub	sp, #56	@ 0x38
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002934:	f107 0314 	add.w	r3, r7, #20
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a31      	ldr	r2, [pc, #196]	@ (8002a0c <HAL_I2S_MspInit+0xf0>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d15a      	bne.n	8002a02 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800294c:	2301      	movs	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002950:	23c0      	movs	r3, #192	@ 0xc0
 8002952:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002954:	2302      	movs	r3, #2
 8002956:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4618      	mov	r0, r3
 800295e:	f004 f91b 	bl	8006b98 <HAL_RCCEx_PeriphCLKConfig>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002968:	f7fe fbc0 	bl	80010ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	4b27      	ldr	r3, [pc, #156]	@ (8002a10 <HAL_I2S_MspInit+0xf4>)
 8002972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002974:	4a26      	ldr	r2, [pc, #152]	@ (8002a10 <HAL_I2S_MspInit+0xf4>)
 8002976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800297a:	6413      	str	r3, [r2, #64]	@ 0x40
 800297c:	4b24      	ldr	r3, [pc, #144]	@ (8002a10 <HAL_I2S_MspInit+0xf4>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	4b20      	ldr	r3, [pc, #128]	@ (8002a10 <HAL_I2S_MspInit+0xf4>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	4a1f      	ldr	r2, [pc, #124]	@ (8002a10 <HAL_I2S_MspInit+0xf4>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	6313      	str	r3, [r2, #48]	@ 0x30
 8002998:	4b1d      	ldr	r3, [pc, #116]	@ (8002a10 <HAL_I2S_MspInit+0xf4>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	4b19      	ldr	r3, [pc, #100]	@ (8002a10 <HAL_I2S_MspInit+0xf4>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <HAL_I2S_MspInit+0xf4>)
 80029ae:	f043 0304 	orr.w	r3, r3, #4
 80029b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b4:	4b16      	ldr	r3, [pc, #88]	@ (8002a10 <HAL_I2S_MspInit+0xf4>)
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80029c0:	2310      	movs	r3, #16
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c4:	2302      	movs	r3, #2
 80029c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029cc:	2300      	movs	r3, #0
 80029ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029d0:	2306      	movs	r3, #6
 80029d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80029d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029d8:	4619      	mov	r1, r3
 80029da:	480e      	ldr	r0, [pc, #56]	@ (8002a14 <HAL_I2S_MspInit+0xf8>)
 80029dc:	f000 fb76 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80029e0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80029e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029f2:	2306      	movs	r3, #6
 80029f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029fa:	4619      	mov	r1, r3
 80029fc:	4806      	ldr	r0, [pc, #24]	@ (8002a18 <HAL_I2S_MspInit+0xfc>)
 80029fe:	f000 fb65 	bl	80030cc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8002a02:	bf00      	nop
 8002a04:	3738      	adds	r7, #56	@ 0x38
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40003c00 	.word	0x40003c00
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40020800 	.word	0x40020800

08002a1c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0b      	ldr	r2, [pc, #44]	@ (8002a58 <HAL_RNG_MspInit+0x3c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10d      	bne.n	8002a4a <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b0a      	ldr	r3, [pc, #40]	@ (8002a5c <HAL_RNG_MspInit+0x40>)
 8002a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a36:	4a09      	ldr	r2, [pc, #36]	@ (8002a5c <HAL_RNG_MspInit+0x40>)
 8002a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a3c:	6353      	str	r3, [r2, #52]	@ 0x34
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <HAL_RNG_MspInit+0x40>)
 8002a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002a4a:	bf00      	nop
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	50060800 	.word	0x50060800
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	@ 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a19      	ldr	r2, [pc, #100]	@ (8002ae4 <HAL_SPI_MspInit+0x84>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d12b      	bne.n	8002ada <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	4b18      	ldr	r3, [pc, #96]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002a8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a92:	4b15      	ldr	r3, [pc, #84]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b11      	ldr	r3, [pc, #68]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a10      	ldr	r2, [pc, #64]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <HAL_SPI_MspInit+0x88>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002aba:	23e0      	movs	r3, #224	@ 0xe0
 8002abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abe:	2302      	movs	r3, #2
 8002ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aca:	2305      	movs	r3, #5
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ace:	f107 0314 	add.w	r3, r7, #20
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4805      	ldr	r0, [pc, #20]	@ (8002aec <HAL_SPI_MspInit+0x8c>)
 8002ad6:	f000 faf9 	bl	80030cc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002ada:	bf00      	nop
 8002adc:	3728      	adds	r7, #40	@ 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40013000 	.word	0x40013000
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020000 	.word	0x40020000

08002af0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	@ 0x28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a19      	ldr	r2, [pc, #100]	@ (8002b74 <HAL_UART_MspInit+0x84>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d12b      	bne.n	8002b6a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	4b18      	ldr	r3, [pc, #96]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	4a17      	ldr	r2, [pc, #92]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b11      	ldr	r3, [pc, #68]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b36:	4a10      	ldr	r2, [pc, #64]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <HAL_UART_MspInit+0x88>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b4a:	230c      	movs	r3, #12
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b56:	2303      	movs	r3, #3
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	4805      	ldr	r0, [pc, #20]	@ (8002b7c <HAL_UART_MspInit+0x8c>)
 8002b66:	f000 fab1 	bl	80030cc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002b6a:	bf00      	nop
 8002b6c:	3728      	adds	r7, #40	@ 0x28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40004400 	.word	0x40004400
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40020000 	.word	0x40020000

08002b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <NMI_Handler+0x4>

08002b88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b8c:	bf00      	nop
 8002b8e:	e7fd      	b.n	8002b8c <HardFault_Handler+0x4>

08002b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b94:	bf00      	nop
 8002b96:	e7fd      	b.n	8002b94 <MemManage_Handler+0x4>

08002b98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9c:	bf00      	nop
 8002b9e:	e7fd      	b.n	8002b9c <BusFault_Handler+0x4>

08002ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba4:	bf00      	nop
 8002ba6:	e7fd      	b.n	8002ba4 <UsageFault_Handler+0x4>

08002ba8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd6:	f000 f923 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002be4:	4802      	ldr	r0, [pc, #8]	@ (8002bf0 <OTG_FS_IRQHandler+0x10>)
 8002be6:	f000 ff07 	bl	80039f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	200005d4 	.word	0x200005d4

08002bf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e00a      	b.n	8002c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c06:	f3af 8000 	nop.w
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	60ba      	str	r2, [r7, #8]
 8002c12:	b2ca      	uxtb	r2, r1
 8002c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	dbf0      	blt.n	8002c06 <_read+0x12>
  }

  return len;
 8002c24:	687b      	ldr	r3, [r7, #4]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
 8002c4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c56:	605a      	str	r2, [r3, #4]
  return 0;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <_isatty>:

int _isatty(int file)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ca0:	4a14      	ldr	r2, [pc, #80]	@ (8002cf4 <_sbrk+0x5c>)
 8002ca2:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <_sbrk+0x60>)
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cac:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <_sbrk+0x64>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <_sbrk+0x64>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <_sbrk+0x68>)
 8002cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <_sbrk+0x64>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d207      	bcs.n	8002cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cc8:	f008 fea6 	bl	800ba18 <__errno>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	220c      	movs	r2, #12
 8002cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd6:	e009      	b.n	8002cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cd8:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <_sbrk+0x64>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cde:	4b07      	ldr	r3, [pc, #28]	@ (8002cfc <_sbrk+0x64>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a05      	ldr	r2, [pc, #20]	@ (8002cfc <_sbrk+0x64>)
 8002ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cea:	68fb      	ldr	r3, [r7, #12]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	20020000 	.word	0x20020000
 8002cf8:	00000400 	.word	0x00000400
 8002cfc:	200001f0 	.word	0x200001f0
 8002d00:	20000b00 	.word	0x20000b00

08002d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d08:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <SystemInit+0x20>)
 8002d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d0e:	4a05      	ldr	r2, [pc, #20]	@ (8002d24 <SystemInit+0x20>)
 8002d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d18:	bf00      	nop
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d2c:	f7ff ffea 	bl	8002d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d30:	480c      	ldr	r0, [pc, #48]	@ (8002d64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d32:	490d      	ldr	r1, [pc, #52]	@ (8002d68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d34:	4a0d      	ldr	r2, [pc, #52]	@ (8002d6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d38:	e002      	b.n	8002d40 <LoopCopyDataInit>

08002d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d3e:	3304      	adds	r3, #4

08002d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d44:	d3f9      	bcc.n	8002d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d46:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d48:	4c0a      	ldr	r4, [pc, #40]	@ (8002d74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d4c:	e001      	b.n	8002d52 <LoopFillZerobss>

08002d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d50:	3204      	adds	r2, #4

08002d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d54:	d3fb      	bcc.n	8002d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d56:	f008 fe65 	bl	800ba24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d5a:	f7fd fd5b 	bl	8000814 <main>
  bx  lr    
 8002d5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d68:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002d6c:	0800c7d4 	.word	0x0800c7d4
  ldr r2, =_sbss
 8002d70:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002d74:	20000b00 	.word	0x20000b00

08002d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d78:	e7fe      	b.n	8002d78 <ADC_IRQHandler>
	...

08002d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d80:	4b0e      	ldr	r3, [pc, #56]	@ (8002dbc <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0d      	ldr	r2, [pc, #52]	@ (8002dbc <HAL_Init+0x40>)
 8002d86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <HAL_Init+0x40>)
 8002d92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d98:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <HAL_Init+0x40>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a07      	ldr	r2, [pc, #28]	@ (8002dbc <HAL_Init+0x40>)
 8002d9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da4:	2003      	movs	r0, #3
 8002da6:	f000 f94f 	bl	8003048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f000 f808 	bl	8002dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db0:	f7ff fd44 	bl	800283c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40023c00 	.word	0x40023c00

08002dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dc8:	4b12      	ldr	r3, [pc, #72]	@ (8002e14 <HAL_InitTick+0x54>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <HAL_InitTick+0x58>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 f967 	bl	80030b2 <HAL_SYSTICK_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00e      	b.n	8002e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0f      	cmp	r3, #15
 8002df2:	d80a      	bhi.n	8002e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df4:	2200      	movs	r2, #0
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f000 f92f 	bl	800305e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e00:	4a06      	ldr	r2, [pc, #24]	@ (8002e1c <HAL_InitTick+0x5c>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000008 	.word	0x20000008
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	@ (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000008 	.word	0x20000008
 8002e44:	200001f4 	.word	0x200001f4

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	@ (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	200001f4 	.word	0x200001f4

08002e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e68:	f7ff ffee 	bl	8002e48 <HAL_GetTick>
 8002e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d005      	beq.n	8002e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <HAL_Delay+0x44>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e86:	bf00      	nop
 8002e88:	f7ff ffde 	bl	8002e48 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d8f7      	bhi.n	8002e88 <HAL_Delay+0x28>
  {
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000008 	.word	0x20000008

08002ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eda:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <__NVIC_SetPriorityGrouping+0x44>)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	60d3      	str	r3, [r2, #12]
}
 8002ee0:	bf00      	nop
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ef4:	4b04      	ldr	r3, [pc, #16]	@ (8002f08 <__NVIC_GetPriorityGrouping+0x18>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	0a1b      	lsrs	r3, r3, #8
 8002efa:	f003 0307 	and.w	r3, r3, #7
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db0b      	blt.n	8002f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4907      	ldr	r1, [pc, #28]	@ (8002f44 <__NVIC_EnableIRQ+0x38>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	2001      	movs	r0, #1
 8002f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000e100 	.word	0xe000e100

08002f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	6039      	str	r1, [r7, #0]
 8002f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	db0a      	blt.n	8002f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	490c      	ldr	r1, [pc, #48]	@ (8002f94 <__NVIC_SetPriority+0x4c>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	0112      	lsls	r2, r2, #4
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f70:	e00a      	b.n	8002f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4908      	ldr	r1, [pc, #32]	@ (8002f98 <__NVIC_SetPriority+0x50>)
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	3b04      	subs	r3, #4
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	440b      	add	r3, r1
 8002f86:	761a      	strb	r2, [r3, #24]
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000e100 	.word	0xe000e100
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	@ 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	f1c3 0307 	rsb	r3, r3, #7
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	bf28      	it	cs
 8002fba:	2304      	movcs	r3, #4
 8002fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d902      	bls.n	8002fcc <NVIC_EncodePriority+0x30>
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	3b03      	subs	r3, #3
 8002fca:	e000      	b.n	8002fce <NVIC_EncodePriority+0x32>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43da      	mvns	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	401a      	ands	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	43d9      	mvns	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff4:	4313      	orrs	r3, r2
         );
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3724      	adds	r7, #36	@ 0x24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
	...

08003004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003014:	d301      	bcc.n	800301a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003016:	2301      	movs	r3, #1
 8003018:	e00f      	b.n	800303a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301a:	4a0a      	ldr	r2, [pc, #40]	@ (8003044 <SysTick_Config+0x40>)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3b01      	subs	r3, #1
 8003020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003022:	210f      	movs	r1, #15
 8003024:	f04f 30ff 	mov.w	r0, #4294967295
 8003028:	f7ff ff8e 	bl	8002f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302c:	4b05      	ldr	r3, [pc, #20]	@ (8003044 <SysTick_Config+0x40>)
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003032:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <SysTick_Config+0x40>)
 8003034:	2207      	movs	r2, #7
 8003036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	e000e010 	.word	0xe000e010

08003048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f7ff ff29 	bl	8002ea8 <__NVIC_SetPriorityGrouping>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800305e:	b580      	push	{r7, lr}
 8003060:	b086      	sub	sp, #24
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	60b9      	str	r1, [r7, #8]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003070:	f7ff ff3e 	bl	8002ef0 <__NVIC_GetPriorityGrouping>
 8003074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	6978      	ldr	r0, [r7, #20]
 800307c:	f7ff ff8e 	bl	8002f9c <NVIC_EncodePriority>
 8003080:	4602      	mov	r2, r0
 8003082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff5d 	bl	8002f48 <__NVIC_SetPriority>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff31 	bl	8002f0c <__NVIC_EnableIRQ>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff ffa2 	bl	8003004 <SysTick_Config>
 80030c0:	4603      	mov	r3, r0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	@ 0x24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030da:	2300      	movs	r3, #0
 80030dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e16b      	b.n	80033c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	429a      	cmp	r2, r3
 8003102:	f040 815a 	bne.w	80033ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f003 0303 	and.w	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d005      	beq.n	800311e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311a:	2b02      	cmp	r3, #2
 800311c:	d130      	bne.n	8003180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	2203      	movs	r2, #3
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4313      	orrs	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003154:	2201      	movs	r2, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 0201 	and.w	r2, r3, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0303 	and.w	r3, r3, #3
 8003188:	2b03      	cmp	r3, #3
 800318a:	d017      	beq.n	80031bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	2203      	movs	r2, #3
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	4013      	ands	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d123      	bne.n	8003210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	08da      	lsrs	r2, r3, #3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	220f      	movs	r2, #15
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4313      	orrs	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	08da      	lsrs	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3208      	adds	r2, #8
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	2203      	movs	r2, #3
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43db      	mvns	r3, r3
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	4013      	ands	r3, r2
 8003226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80b4 	beq.w	80033ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b60      	ldr	r3, [pc, #384]	@ (80033d8 <HAL_GPIO_Init+0x30c>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	4a5f      	ldr	r2, [pc, #380]	@ (80033d8 <HAL_GPIO_Init+0x30c>)
 800325c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003260:	6453      	str	r3, [r2, #68]	@ 0x44
 8003262:	4b5d      	ldr	r3, [pc, #372]	@ (80033d8 <HAL_GPIO_Init+0x30c>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800326e:	4a5b      	ldr	r2, [pc, #364]	@ (80033dc <HAL_GPIO_Init+0x310>)
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	089b      	lsrs	r3, r3, #2
 8003274:	3302      	adds	r3, #2
 8003276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4013      	ands	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_GPIO_Init+0x314>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d02b      	beq.n	80032f2 <HAL_GPIO_Init+0x226>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a51      	ldr	r2, [pc, #324]	@ (80033e4 <HAL_GPIO_Init+0x318>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d025      	beq.n	80032ee <HAL_GPIO_Init+0x222>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a50      	ldr	r2, [pc, #320]	@ (80033e8 <HAL_GPIO_Init+0x31c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01f      	beq.n	80032ea <HAL_GPIO_Init+0x21e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4f      	ldr	r2, [pc, #316]	@ (80033ec <HAL_GPIO_Init+0x320>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d019      	beq.n	80032e6 <HAL_GPIO_Init+0x21a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4e      	ldr	r2, [pc, #312]	@ (80033f0 <HAL_GPIO_Init+0x324>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d013      	beq.n	80032e2 <HAL_GPIO_Init+0x216>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a4d      	ldr	r2, [pc, #308]	@ (80033f4 <HAL_GPIO_Init+0x328>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d00d      	beq.n	80032de <HAL_GPIO_Init+0x212>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4c      	ldr	r2, [pc, #304]	@ (80033f8 <HAL_GPIO_Init+0x32c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <HAL_GPIO_Init+0x20e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4b      	ldr	r2, [pc, #300]	@ (80033fc <HAL_GPIO_Init+0x330>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_GPIO_Init+0x20a>
 80032d2:	2307      	movs	r3, #7
 80032d4:	e00e      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032d6:	2308      	movs	r3, #8
 80032d8:	e00c      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032da:	2306      	movs	r3, #6
 80032dc:	e00a      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032de:	2305      	movs	r3, #5
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032e2:	2304      	movs	r3, #4
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x228>
 80032f2:	2300      	movs	r3, #0
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f002 0203 	and.w	r2, r2, #3
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003304:	4935      	ldr	r1, [pc, #212]	@ (80033dc <HAL_GPIO_Init+0x310>)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003312:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003336:	4a32      	ldr	r2, [pc, #200]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800333c:	4b30      	ldr	r3, [pc, #192]	@ (8003400 <HAL_GPIO_Init+0x334>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003360:	4a27      	ldr	r2, [pc, #156]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003366:	4b26      	ldr	r3, [pc, #152]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800338a:	4a1d      	ldr	r2, [pc, #116]	@ (8003400 <HAL_GPIO_Init+0x334>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003390:	4b1b      	ldr	r3, [pc, #108]	@ (8003400 <HAL_GPIO_Init+0x334>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b4:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <HAL_GPIO_Init+0x334>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	f67f ae90 	bls.w	80030e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3724      	adds	r7, #36	@ 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40020400 	.word	0x40020400
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40021400 	.word	0x40021400
 80033f8:	40021800 	.word	0x40021800
 80033fc:	40021c00 	.word	0x40021c00
 8003400:	40013c00 	.word	0x40013c00

08003404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	807b      	strh	r3, [r7, #2]
 8003410:	4613      	mov	r3, r2
 8003412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003414:	787b      	ldrb	r3, [r7, #1]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341a:	887a      	ldrh	r2, [r7, #2]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003420:	e003      	b.n	800342a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003422:	887b      	ldrh	r3, [r7, #2]
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	619a      	str	r2, [r3, #24]
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b086      	sub	sp, #24
 800343a:	af02      	add	r7, sp, #8
 800343c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e059      	b.n	80034fc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f007 fc3a 	bl	800acdc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2203      	movs	r2, #3
 800346c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003476:	d102      	bne.n	800347e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 fa53 	bl	800792e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7c1a      	ldrb	r2, [r3, #16]
 8003490:	f88d 2000 	strb.w	r2, [sp]
 8003494:	3304      	adds	r3, #4
 8003496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003498:	f004 f9d4 	bl	8007844 <USB_CoreInit>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2202      	movs	r2, #2
 80034a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e026      	b.n	80034fc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2101      	movs	r1, #1
 80034b4:	4618      	mov	r0, r3
 80034b6:	f004 fa4b 	bl	8007950 <USB_SetCurrentMode>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e017      	b.n	80034fc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6818      	ldr	r0, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7c1a      	ldrb	r2, [r3, #16]
 80034d4:	f88d 2000 	strb.w	r2, [sp]
 80034d8:	3304      	adds	r3, #4
 80034da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034dc:	f004 fbee 	bl	8007cbc <USB_HostInit>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2202      	movs	r2, #2
 80034ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e004      	b.n	80034fc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003504:	b590      	push	{r4, r7, lr}
 8003506:	b08b      	sub	sp, #44	@ 0x2c
 8003508:	af04      	add	r7, sp, #16
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	4608      	mov	r0, r1
 800350e:	4611      	mov	r1, r2
 8003510:	461a      	mov	r2, r3
 8003512:	4603      	mov	r3, r0
 8003514:	70fb      	strb	r3, [r7, #3]
 8003516:	460b      	mov	r3, r1
 8003518:	70bb      	strb	r3, [r7, #2]
 800351a:	4613      	mov	r3, r2
 800351c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800351e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003520:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_HCD_HC_Init+0x2c>
 800352c:	2302      	movs	r3, #2
 800352e:	e09d      	b.n	800366c <HAL_HCD_HC_Init+0x168>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3319      	adds	r3, #25
 8003548:	2200      	movs	r2, #0
 800354a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3314      	adds	r3, #20
 800355c:	787a      	ldrb	r2, [r7, #1]
 800355e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	3315      	adds	r3, #21
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	3326      	adds	r3, #38	@ 0x26
 8003584:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003588:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	78bb      	ldrb	r3, [r7, #2]
 800358e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003592:	b2d8      	uxtb	r0, r3
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	1a9b      	subs	r3, r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3316      	adds	r3, #22
 80035a2:	4602      	mov	r2, r0
 80035a4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80035a6:	78fb      	ldrb	r3, [r7, #3]
 80035a8:	4619      	mov	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fbc8 	bl	8003d40 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80035b0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da0a      	bge.n	80035ce <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3317      	adds	r3, #23
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e009      	b.n	80035e2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3317      	adds	r3, #23
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f004 fccc 	bl	8007f84 <USB_GetHostSpeed>
 80035ec:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80035ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d10b      	bne.n	800360e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80035f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d107      	bne.n	800360e <HAL_HCD_HC_Init+0x10a>
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d104      	bne.n	800360e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2bbc      	cmp	r3, #188	@ 0xbc
 8003608:	d901      	bls.n	800360e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800360a:	23bc      	movs	r3, #188	@ 0xbc
 800360c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	3318      	adds	r3, #24
 800361e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003622:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003624:	78fa      	ldrb	r2, [r7, #3]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	b298      	uxth	r0, r3
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3328      	adds	r3, #40	@ 0x28
 8003638:	4602      	mov	r2, r0
 800363a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6818      	ldr	r0, [r3, #0]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	b29b      	uxth	r3, r3
 8003644:	787c      	ldrb	r4, [r7, #1]
 8003646:	78ba      	ldrb	r2, [r7, #2]
 8003648:	78f9      	ldrb	r1, [r7, #3]
 800364a:	9302      	str	r3, [sp, #8]
 800364c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003650:	9301      	str	r3, [sp, #4]
 8003652:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	4623      	mov	r3, r4
 800365a:	f004 fcbb 	bl	8007fd4 <USB_HC_Init>
 800365e:	4603      	mov	r3, r0
 8003660:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	371c      	adds	r7, #28
 8003670:	46bd      	mov	sp, r7
 8003672:	bd90      	pop	{r4, r7, pc}

08003674 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_HCD_HC_Halt+0x1e>
 800368e:	2302      	movs	r3, #2
 8003690:	e00f      	b.n	80036b2 <HAL_HCD_HC_Halt+0x3e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f005 f84d 	bl	8008742 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	70fb      	strb	r3, [r7, #3]
 80036ce:	460b      	mov	r3, r1
 80036d0:	70bb      	strb	r3, [r7, #2]
 80036d2:	4613      	mov	r3, r2
 80036d4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3317      	adds	r3, #23
 80036e6:	78ba      	ldrb	r2, [r7, #2]
 80036e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	1a9b      	subs	r3, r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	3326      	adds	r3, #38	@ 0x26
 80036fa:	787a      	ldrb	r2, [r7, #1]
 80036fc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80036fe:	7c3b      	ldrb	r3, [r7, #16]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d114      	bne.n	800372e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	332a      	adds	r3, #42	@ 0x2a
 8003714:	2203      	movs	r2, #3
 8003716:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	1a9b      	subs	r3, r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3319      	adds	r3, #25
 8003728:	7f3a      	ldrb	r2, [r7, #28]
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e009      	b.n	8003742 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800372e:	78fa      	ldrb	r2, [r7, #3]
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	332a      	adds	r3, #42	@ 0x2a
 800373e:	2202      	movs	r2, #2
 8003740:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003742:	787b      	ldrb	r3, [r7, #1]
 8003744:	2b03      	cmp	r3, #3
 8003746:	f200 8102 	bhi.w	800394e <HAL_HCD_HC_SubmitRequest+0x292>
 800374a:	a201      	add	r2, pc, #4	@ (adr r2, 8003750 <HAL_HCD_HC_SubmitRequest+0x94>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003761 	.word	0x08003761
 8003754:	08003939 	.word	0x08003939
 8003758:	08003825 	.word	0x08003825
 800375c:	080038af 	.word	0x080038af
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8003760:	7c3b      	ldrb	r3, [r7, #16]
 8003762:	2b01      	cmp	r3, #1
 8003764:	f040 80f5 	bne.w	8003952 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8003768:	78bb      	ldrb	r3, [r7, #2]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d12d      	bne.n	80037ca <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800376e:	8b3b      	ldrh	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	011b      	lsls	r3, r3, #4
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	333d      	adds	r3, #61	@ 0x3d
 8003784:	2201      	movs	r2, #1
 8003786:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	333d      	adds	r3, #61	@ 0x3d
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10a      	bne.n	80037b4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	1a9b      	subs	r3, r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	440b      	add	r3, r1
 80037ac:	332a      	adds	r3, #42	@ 0x2a
 80037ae:	2200      	movs	r2, #0
 80037b0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80037b2:	e0ce      	b.n	8003952 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	332a      	adds	r3, #42	@ 0x2a
 80037c4:	2202      	movs	r2, #2
 80037c6:	701a      	strb	r2, [r3, #0]
      break;
 80037c8:	e0c3      	b.n	8003952 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	331a      	adds	r3, #26
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f040 80b8 	bne.w	8003952 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	333c      	adds	r3, #60	@ 0x3c
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10a      	bne.n	800380e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	332a      	adds	r3, #42	@ 0x2a
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
      break;
 800380c:	e0a1      	b.n	8003952 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	332a      	adds	r3, #42	@ 0x2a
 800381e:	2202      	movs	r2, #2
 8003820:	701a      	strb	r2, [r3, #0]
      break;
 8003822:	e096      	b.n	8003952 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003824:	78bb      	ldrb	r3, [r7, #2]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d120      	bne.n	800386c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	333d      	adds	r3, #61	@ 0x3d
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	332a      	adds	r3, #42	@ 0x2a
 8003850:	2200      	movs	r2, #0
 8003852:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003854:	e07e      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003856:	78fa      	ldrb	r2, [r7, #3]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	332a      	adds	r3, #42	@ 0x2a
 8003866:	2202      	movs	r2, #2
 8003868:	701a      	strb	r2, [r3, #0]
      break;
 800386a:	e073      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800386c:	78fa      	ldrb	r2, [r7, #3]
 800386e:	6879      	ldr	r1, [r7, #4]
 8003870:	4613      	mov	r3, r2
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	1a9b      	subs	r3, r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	440b      	add	r3, r1
 800387a:	333c      	adds	r3, #60	@ 0x3c
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10a      	bne.n	8003898 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	332a      	adds	r3, #42	@ 0x2a
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
      break;
 8003896:	e05d      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003898:	78fa      	ldrb	r2, [r7, #3]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	332a      	adds	r3, #42	@ 0x2a
 80038a8:	2202      	movs	r2, #2
 80038aa:	701a      	strb	r2, [r3, #0]
      break;
 80038ac:	e052      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80038ae:	78bb      	ldrb	r3, [r7, #2]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d120      	bne.n	80038f6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038b4:	78fa      	ldrb	r2, [r7, #3]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	1a9b      	subs	r3, r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	333d      	adds	r3, #61	@ 0x3d
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	332a      	adds	r3, #42	@ 0x2a
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038de:	e039      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	332a      	adds	r3, #42	@ 0x2a
 80038f0:	2202      	movs	r2, #2
 80038f2:	701a      	strb	r2, [r3, #0]
      break;
 80038f4:	e02e      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	6879      	ldr	r1, [r7, #4]
 80038fa:	4613      	mov	r3, r2
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	1a9b      	subs	r3, r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	440b      	add	r3, r1
 8003904:	333c      	adds	r3, #60	@ 0x3c
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800390c:	78fa      	ldrb	r2, [r7, #3]
 800390e:	6879      	ldr	r1, [r7, #4]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	332a      	adds	r3, #42	@ 0x2a
 800391c:	2200      	movs	r2, #0
 800391e:	701a      	strb	r2, [r3, #0]
      break;
 8003920:	e018      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	332a      	adds	r3, #42	@ 0x2a
 8003932:	2202      	movs	r2, #2
 8003934:	701a      	strb	r2, [r3, #0]
      break;
 8003936:	e00d      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	332a      	adds	r3, #42	@ 0x2a
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
      break;
 800394c:	e002      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003952:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003954:	78fa      	ldrb	r2, [r7, #3]
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	4613      	mov	r3, r2
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	1a9b      	subs	r3, r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	332c      	adds	r3, #44	@ 0x2c
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	8b39      	ldrh	r1, [r7, #24]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4403      	add	r3, r0
 8003978:	3334      	adds	r3, #52	@ 0x34
 800397a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	334c      	adds	r3, #76	@ 0x4c
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	3338      	adds	r3, #56	@ 0x38
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	3315      	adds	r3, #21
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	334d      	adds	r3, #77	@ 0x4d
 80039c8:	2200      	movs	r2, #0
 80039ca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	3310      	adds	r3, #16
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	1d19      	adds	r1, r3, #4
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	799b      	ldrb	r3, [r3, #6]
 80039e6:	461a      	mov	r2, r3
 80039e8:	f004 fc20 	bl	800822c <USB_HC_StartXfer>
 80039ec:	4603      	mov	r3, r0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop

080039f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b086      	sub	sp, #24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 f914 	bl	8007c3c <USB_GetMode>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	f040 80fb 	bne.w	8003c12 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f004 f8d7 	bl	8007bd4 <USB_ReadInterrupts>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80f1 	beq.w	8003c10 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 f8ce 	bl	8007bd4 <USB_ReadInterrupts>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a42:	d104      	bne.n	8003a4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003a4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f004 f8be 	bl	8007bd4 <USB_ReadInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a62:	d104      	bne.n	8003a6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003a6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 f8ae 	bl	8007bd4 <USB_ReadInterrupts>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a82:	d104      	bne.n	8003a8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f004 f89e 	bl	8007bd4 <USB_ReadInterrupts>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d103      	bne.n	8003aaa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 f890 	bl	8007bd4 <USB_ReadInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003abe:	d120      	bne.n	8003b02 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003ac8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d113      	bne.n	8003b02 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003ada:	2110      	movs	r1, #16
 8003adc:	6938      	ldr	r0, [r7, #16]
 8003ade:	f003 ff83 	bl	80079e8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003ae2:	6938      	ldr	r0, [r7, #16]
 8003ae4:	f003 ffb2 	bl	8007a4c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	7a5b      	ldrb	r3, [r3, #9]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d105      	bne.n	8003afc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2101      	movs	r1, #1
 8003af6:	4618      	mov	r0, r3
 8003af8:	f004 f9a4 	bl	8007e44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f007 f96b 	bl	800add8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f004 f864 	bl	8007bd4 <USB_ReadInterrupts>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b16:	d102      	bne.n	8003b1e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f001 fd4d 	bl	80055b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 f856 	bl	8007bd4 <USB_ReadInterrupts>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d106      	bne.n	8003b40 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f007 f934 	bl	800ada0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f004 f845 	bl	8007bd4 <USB_ReadInterrupts>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003b54:	d139      	bne.n	8003bca <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f004 fde0 	bl	8008720 <USB_HC_ReadInterrupt>
 8003b60:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
 8003b66:	e025      	b.n	8003bb4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d018      	beq.n	8003bae <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b92:	d106      	bne.n	8003ba2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	4619      	mov	r1, r3
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f905 	bl	8003daa <HCD_HC_IN_IRQHandler>
 8003ba0:	e005      	b.n	8003bae <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 ff67 	bl	8004a7c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	795b      	ldrb	r3, [r3, #5]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d3d3      	bcc.n	8003b68 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f004 f800 	bl	8007bd4 <USB_ReadInterrupts>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f003 0310 	and.w	r3, r3, #16
 8003bda:	2b10      	cmp	r3, #16
 8003bdc:	d101      	bne.n	8003be2 <HAL_HCD_IRQHandler+0x1ea>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <HAL_HCD_IRQHandler+0x1ec>
 8003be2:	2300      	movs	r3, #0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d014      	beq.n	8003c12 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0210 	bic.w	r2, r2, #16
 8003bf6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f001 fbfe 	bl	80053fa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0210 	orr.w	r2, r2, #16
 8003c0c:	619a      	str	r2, [r3, #24]
 8003c0e:	e000      	b.n	8003c12 <HAL_HCD_IRQHandler+0x21a>
      return;
 8003c10:	bf00      	nop
    }
  }
}
 8003c12:	3718      	adds	r7, #24
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_HCD_Start+0x16>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e013      	b.n	8003c56 <HAL_HCD_Start+0x3e>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f004 f968 	bl	8007f12 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f003 fe60 	bl	800790c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_HCD_Stop+0x16>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e00d      	b.n	8003c90 <HAL_HCD_Stop+0x32>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 febb 	bl	80089fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f004 f90a 	bl	8007ebe <USB_ResetPort>
 8003caa:	4603      	mov	r3, r0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	334c      	adds	r3, #76	@ 0x4c
 8003cd0:	781b      	ldrb	r3, [r3, #0]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	011b      	lsls	r3, r3, #4
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3338      	adds	r3, #56	@ 0x38
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f004 f94c 	bl	8007fb2 <USB_GetCurrentFrame>
 8003d1a:	4603      	mov	r3, r0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f004 f927 	bl	8007f84 <USB_GetHostSpeed>
 8003d36:	4603      	mov	r3, r0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	331a      	adds	r3, #26
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003d60:	78fa      	ldrb	r2, [r7, #3]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	331b      	adds	r3, #27
 8003d70:	2200      	movs	r2, #0
 8003d72:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	3325      	adds	r3, #37	@ 0x25
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003d88:	78fa      	ldrb	r2, [r7, #3]
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	1a9b      	subs	r3, r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	3324      	adds	r3, #36	@ 0x24
 8003d98:	2200      	movs	r2, #0
 8003d9a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	460b      	mov	r3, r1
 8003db4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	78fa      	ldrb	r2, [r7, #3]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f003 ff16 	bl	8007bfa <USB_ReadChInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d11a      	bne.n	8003e0e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003de4:	461a      	mov	r2, r3
 8003de6:	2304      	movs	r3, #4
 8003de8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	334d      	adds	r3, #77	@ 0x4d
 8003dfa:	2207      	movs	r2, #7
 8003dfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f004 fc9b 	bl	8008742 <USB_HC_Halt>
 8003e0c:	e09e      	b.n	8003f4c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	78fa      	ldrb	r2, [r7, #3]
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 feef 	bl	8007bfa <USB_ReadChInterrupts>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e26:	d11b      	bne.n	8003e60 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e34:	461a      	mov	r2, r3
 8003e36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	334d      	adds	r3, #77	@ 0x4d
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f004 fc72 	bl	8008742 <USB_HC_Halt>
 8003e5e:	e075      	b.n	8003f4c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f003 fec6 	bl	8007bfa <USB_ReadChInterrupts>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d11a      	bne.n	8003eae <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2308      	movs	r3, #8
 8003e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	334d      	adds	r3, #77	@ 0x4d
 8003e9a:	2206      	movs	r2, #6
 8003e9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f004 fc4b 	bl	8008742 <USB_HC_Halt>
 8003eac:	e04e      	b.n	8003f4c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	78fa      	ldrb	r2, [r7, #3]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 fe9f 	bl	8007bfa <USB_ReadChInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec6:	d11b      	bne.n	8003f00 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003eda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	334d      	adds	r3, #77	@ 0x4d
 8003eec:	2209      	movs	r2, #9
 8003eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f004 fc22 	bl	8008742 <USB_HC_Halt>
 8003efe:	e025      	b.n	8003f4c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	4611      	mov	r1, r2
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f003 fe76 	bl	8007bfa <USB_ReadChInterrupts>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f14:	2b80      	cmp	r3, #128	@ 0x80
 8003f16:	d119      	bne.n	8003f4c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f24:	461a      	mov	r2, r3
 8003f26:	2380      	movs	r3, #128	@ 0x80
 8003f28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	334d      	adds	r3, #77	@ 0x4d
 8003f3a:	2207      	movs	r2, #7
 8003f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f004 fbfb 	bl	8008742 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f003 fe50 	bl	8007bfa <USB_ReadChInterrupts>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f64:	d112      	bne.n	8003f8c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f004 fbe7 	bl	8008742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003f74:	78fb      	ldrb	r3, [r7, #3]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f80:	461a      	mov	r2, r3
 8003f82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f86:	6093      	str	r3, [r2, #8]
 8003f88:	f000 bd75 	b.w	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	78fa      	ldrb	r2, [r7, #3]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f003 fe30 	bl	8007bfa <USB_ReadChInterrupts>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	f040 8128 	bne.w	80041f6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	331b      	adds	r3, #27
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d119      	bne.n	8004002 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	331b      	adds	r3, #27
 8003fde:	2200      	movs	r2, #0
 8003fe0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004000:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	799b      	ldrb	r3, [r3, #6]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d01b      	beq.n	8004042 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	1a9b      	subs	r3, r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	440b      	add	r3, r1
 8004018:	3330      	adds	r3, #48	@ 0x30
 800401a:	6819      	ldr	r1, [r3, #0]
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	1ac9      	subs	r1, r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	1a9b      	subs	r3, r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4403      	add	r3, r0
 800403e:	3338      	adds	r3, #56	@ 0x38
 8004040:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	334d      	adds	r3, #77	@ 0x4d
 8004052:	2201      	movs	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	4613      	mov	r3, r2
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	1a9b      	subs	r3, r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	440b      	add	r3, r1
 8004064:	3344      	adds	r3, #68	@ 0x44
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4413      	add	r3, r2
 8004072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004076:	461a      	mov	r2, r3
 8004078:	2301      	movs	r3, #1
 800407a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	011b      	lsls	r3, r3, #4
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	3326      	adds	r3, #38	@ 0x26
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004092:	78fa      	ldrb	r2, [r7, #3]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	3326      	adds	r3, #38	@ 0x26
 80040a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d110      	bne.n	80040ca <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f004 fb46 	bl	8008742 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c2:	461a      	mov	r2, r3
 80040c4:	2310      	movs	r3, #16
 80040c6:	6093      	str	r3, [r2, #8]
 80040c8:	e03d      	b.n	8004146 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80040ca:	78fa      	ldrb	r2, [r7, #3]
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	3326      	adds	r3, #38	@ 0x26
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d00a      	beq.n	80040f6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	4613      	mov	r3, r2
 80040e6:	011b      	lsls	r3, r3, #4
 80040e8:	1a9b      	subs	r3, r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	3326      	adds	r3, #38	@ 0x26
 80040f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d127      	bne.n	8004146 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80040f6:	78fb      	ldrb	r3, [r7, #3]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	78fa      	ldrb	r2, [r7, #3]
 8004106:	0151      	lsls	r1, r2, #5
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	440a      	add	r2, r1
 800410c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004110:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004114:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	4613      	mov	r3, r2
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	440b      	add	r3, r1
 8004124:	334c      	adds	r3, #76	@ 0x4c
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	334c      	adds	r3, #76	@ 0x4c
 800413a:	781a      	ldrb	r2, [r3, #0]
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f006 fe57 	bl	800adf4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	799b      	ldrb	r3, [r3, #6]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d13b      	bne.n	80041c6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	3338      	adds	r3, #56	@ 0x38
 800415e:	6819      	ldr	r1, [r3, #0]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4403      	add	r3, r0
 800416e:	3328      	adds	r3, #40	@ 0x28
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	440b      	add	r3, r1
 8004174:	1e59      	subs	r1, r3, #1
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4403      	add	r3, r0
 8004184:	3328      	adds	r3, #40	@ 0x28
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	fbb1 f3f3 	udiv	r3, r1, r3
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 8470 	beq.w	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	333c      	adds	r3, #60	@ 0x3c
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	f083 0301 	eor.w	r3, r3, #1
 80041ae:	b2d8      	uxtb	r0, r3
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	333c      	adds	r3, #60	@ 0x3c
 80041be:	4602      	mov	r2, r0
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	f000 bc58 	b.w	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	011b      	lsls	r3, r3, #4
 80041ce:	1a9b      	subs	r3, r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	333c      	adds	r3, #60	@ 0x3c
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	f083 0301 	eor.w	r3, r3, #1
 80041de:	b2d8      	uxtb	r0, r3
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	011b      	lsls	r3, r3, #4
 80041e6:	1a9b      	subs	r3, r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	333c      	adds	r3, #60	@ 0x3c
 80041ee:	4602      	mov	r2, r0
 80041f0:	701a      	strb	r2, [r3, #0]
 80041f2:	f000 bc40 	b.w	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f003 fcfb 	bl	8007bfa <USB_ReadChInterrupts>
 8004204:	4603      	mov	r3, r0
 8004206:	f003 0320 	and.w	r3, r3, #32
 800420a:	2b20      	cmp	r3, #32
 800420c:	d131      	bne.n	8004272 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800420e:	78fb      	ldrb	r3, [r7, #3]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800421a:	461a      	mov	r2, r3
 800421c:	2320      	movs	r3, #32
 800421e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	440b      	add	r3, r1
 800422e:	331a      	adds	r3, #26
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	f040 841f 	bne.w	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004238:	78fa      	ldrb	r2, [r7, #3]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	1a9b      	subs	r3, r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	440b      	add	r3, r1
 8004246:	331b      	adds	r3, #27
 8004248:	2201      	movs	r2, #1
 800424a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800424c:	78fa      	ldrb	r2, [r7, #3]
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	4613      	mov	r3, r2
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	440b      	add	r3, r1
 800425a:	334d      	adds	r3, #77	@ 0x4d
 800425c:	2203      	movs	r2, #3
 800425e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	78fa      	ldrb	r2, [r7, #3]
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f004 fa6a 	bl	8008742 <USB_HC_Halt>
 800426e:	f000 bc02 	b.w	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f003 fcbd 	bl	8007bfa <USB_ReadChInterrupts>
 8004280:	4603      	mov	r3, r0
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b02      	cmp	r3, #2
 8004288:	f040 8305 	bne.w	8004896 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800428c:	78fb      	ldrb	r3, [r7, #3]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004298:	461a      	mov	r2, r3
 800429a:	2302      	movs	r3, #2
 800429c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	334d      	adds	r3, #77	@ 0x4d
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d114      	bne.n	80042de <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042b4:	78fa      	ldrb	r2, [r7, #3]
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	4613      	mov	r3, r2
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	1a9b      	subs	r3, r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	334d      	adds	r3, #77	@ 0x4d
 80042c4:	2202      	movs	r2, #2
 80042c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80042c8:	78fa      	ldrb	r2, [r7, #3]
 80042ca:	6879      	ldr	r1, [r7, #4]
 80042cc:	4613      	mov	r3, r2
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	334c      	adds	r3, #76	@ 0x4c
 80042d8:	2201      	movs	r2, #1
 80042da:	701a      	strb	r2, [r3, #0]
 80042dc:	e2cc      	b.n	8004878 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80042de:	78fa      	ldrb	r2, [r7, #3]
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	4613      	mov	r3, r2
 80042e4:	011b      	lsls	r3, r3, #4
 80042e6:	1a9b      	subs	r3, r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	334d      	adds	r3, #77	@ 0x4d
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b06      	cmp	r3, #6
 80042f2:	d114      	bne.n	800431e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	6879      	ldr	r1, [r7, #4]
 80042f8:	4613      	mov	r3, r2
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	334d      	adds	r3, #77	@ 0x4d
 8004304:	2202      	movs	r2, #2
 8004306:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004308:	78fa      	ldrb	r2, [r7, #3]
 800430a:	6879      	ldr	r1, [r7, #4]
 800430c:	4613      	mov	r3, r2
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	334c      	adds	r3, #76	@ 0x4c
 8004318:	2205      	movs	r2, #5
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e2ac      	b.n	8004878 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	334d      	adds	r3, #77	@ 0x4d
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b07      	cmp	r3, #7
 8004332:	d00b      	beq.n	800434c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004334:	78fa      	ldrb	r2, [r7, #3]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	4613      	mov	r3, r2
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	334d      	adds	r3, #77	@ 0x4d
 8004344:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004346:	2b09      	cmp	r3, #9
 8004348:	f040 80a6 	bne.w	8004498 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	334d      	adds	r3, #77	@ 0x4d
 800435c:	2202      	movs	r2, #2
 800435e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004360:	78fa      	ldrb	r2, [r7, #3]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	3344      	adds	r3, #68	@ 0x44
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	1c59      	adds	r1, r3, #1
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4613      	mov	r3, r2
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	1a9b      	subs	r3, r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4403      	add	r3, r0
 8004380:	3344      	adds	r3, #68	@ 0x44
 8004382:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	3344      	adds	r3, #68	@ 0x44
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b02      	cmp	r3, #2
 8004398:	d943      	bls.n	8004422 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	3344      	adds	r3, #68	@ 0x44
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80043ae:	78fa      	ldrb	r2, [r7, #3]
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	4613      	mov	r3, r2
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	331a      	adds	r3, #26
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d123      	bne.n	800440c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	331b      	adds	r3, #27
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	1a9b      	subs	r3, r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	331c      	adds	r3, #28
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	0151      	lsls	r1, r2, #5
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	440a      	add	r2, r1
 8004402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800440a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	334c      	adds	r3, #76	@ 0x4c
 800441c:	2204      	movs	r2, #4
 800441e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004420:	e229      	b.n	8004876 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	334c      	adds	r3, #76	@ 0x4c
 8004432:	2202      	movs	r2, #2
 8004434:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3326      	adds	r3, #38	@ 0x26
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00b      	beq.n	8004464 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800444c:	78fa      	ldrb	r2, [r7, #3]
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	4613      	mov	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	1a9b      	subs	r3, r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	3326      	adds	r3, #38	@ 0x26
 800445c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800445e:	2b02      	cmp	r3, #2
 8004460:	f040 8209 	bne.w	8004876 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800447a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004482:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004484:	78fb      	ldrb	r3, [r7, #3]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004490:	461a      	mov	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004496:	e1ee      	b.n	8004876 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004498:	78fa      	ldrb	r2, [r7, #3]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	4613      	mov	r3, r2
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	1a9b      	subs	r3, r3, r2
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	334d      	adds	r3, #77	@ 0x4d
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	f040 80c8 	bne.w	8004640 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	334d      	adds	r3, #77	@ 0x4d
 80044c0:	2202      	movs	r2, #2
 80044c2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	331b      	adds	r3, #27
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	f040 81ce 	bne.w	8004878 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	1a9b      	subs	r3, r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	3326      	adds	r3, #38	@ 0x26
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d16b      	bne.n	80045ca <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80044f2:	78fa      	ldrb	r2, [r7, #3]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	011b      	lsls	r3, r3, #4
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3348      	adds	r3, #72	@ 0x48
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	1c59      	adds	r1, r3, #1
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4403      	add	r3, r0
 8004512:	3348      	adds	r3, #72	@ 0x48
 8004514:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	3348      	adds	r3, #72	@ 0x48
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b02      	cmp	r3, #2
 800452a:	d943      	bls.n	80045b4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	3348      	adds	r3, #72	@ 0x48
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	1a9b      	subs	r3, r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	331b      	adds	r3, #27
 8004550:	2200      	movs	r2, #0
 8004552:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	3344      	adds	r3, #68	@ 0x44
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b02      	cmp	r3, #2
 8004568:	d809      	bhi.n	800457e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	440b      	add	r3, r1
 8004578:	331c      	adds	r3, #28
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800457e:	78fb      	ldrb	r3, [r7, #3]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	78fa      	ldrb	r2, [r7, #3]
 800458e:	0151      	lsls	r1, r2, #5
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	440a      	add	r2, r1
 8004594:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800459c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	334c      	adds	r3, #76	@ 0x4c
 80045ae:	2204      	movs	r2, #4
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	e014      	b.n	80045de <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	334c      	adds	r3, #76	@ 0x4c
 80045c4:	2202      	movs	r2, #2
 80045c6:	701a      	strb	r2, [r3, #0]
 80045c8:	e009      	b.n	80045de <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045ca:	78fa      	ldrb	r2, [r7, #3]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	334c      	adds	r3, #76	@ 0x4c
 80045da:	2202      	movs	r2, #2
 80045dc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3326      	adds	r3, #38	@ 0x26
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00b      	beq.n	800460c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	3326      	adds	r3, #38	@ 0x26
 8004604:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004606:	2b02      	cmp	r3, #2
 8004608:	f040 8136 	bne.w	8004878 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800460c:	78fb      	ldrb	r3, [r7, #3]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4413      	add	r3, r2
 8004614:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004622:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800462a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004638:	461a      	mov	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6013      	str	r3, [r2, #0]
 800463e:	e11b      	b.n	8004878 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004640:	78fa      	ldrb	r2, [r7, #3]
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	334d      	adds	r3, #77	@ 0x4d
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b03      	cmp	r3, #3
 8004654:	f040 8081 	bne.w	800475a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004658:	78fa      	ldrb	r2, [r7, #3]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	011b      	lsls	r3, r3, #4
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	334d      	adds	r3, #77	@ 0x4d
 8004668:	2202      	movs	r2, #2
 800466a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	1a9b      	subs	r3, r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	331b      	adds	r3, #27
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	2b01      	cmp	r3, #1
 8004680:	f040 80fa 	bne.w	8004878 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	334c      	adds	r3, #76	@ 0x4c
 8004694:	2202      	movs	r2, #2
 8004696:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	0151      	lsls	r1, r2, #5
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	440a      	add	r2, r1
 80046ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	0151      	lsls	r1, r2, #5
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	440a      	add	r2, r1
 80046ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046d6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	78fa      	ldrb	r2, [r7, #3]
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80046f2:	f023 0320 	bic.w	r3, r3, #32
 80046f6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	3326      	adds	r3, #38	@ 0x26
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00b      	beq.n	8004726 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	3326      	adds	r3, #38	@ 0x26
 800471e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004720:	2b02      	cmp	r3, #2
 8004722:	f040 80a9 	bne.w	8004878 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004726:	78fb      	ldrb	r3, [r7, #3]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800473c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004744:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4413      	add	r3, r2
 800474e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004752:	461a      	mov	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6013      	str	r3, [r2, #0]
 8004758:	e08e      	b.n	8004878 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800475a:	78fa      	ldrb	r2, [r7, #3]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	1a9b      	subs	r3, r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	334d      	adds	r3, #77	@ 0x4d
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d143      	bne.n	80047f8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004770:	78fa      	ldrb	r2, [r7, #3]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	334d      	adds	r3, #77	@ 0x4d
 8004780:	2202      	movs	r2, #2
 8004782:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004784:	78fa      	ldrb	r2, [r7, #3]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	334c      	adds	r3, #76	@ 0x4c
 8004794:	2202      	movs	r2, #2
 8004796:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004798:	78fa      	ldrb	r2, [r7, #3]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	3326      	adds	r3, #38	@ 0x26
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3326      	adds	r3, #38	@ 0x26
 80047be:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d159      	bne.n	8004878 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80047da:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80047e2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	e03f      	b.n	8004878 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	334d      	adds	r3, #77	@ 0x4d
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b08      	cmp	r3, #8
 800480c:	d126      	bne.n	800485c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800480e:	78fa      	ldrb	r2, [r7, #3]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	334d      	adds	r3, #77	@ 0x4d
 800481e:	2202      	movs	r2, #2
 8004820:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	3344      	adds	r3, #68	@ 0x44
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	1c59      	adds	r1, r3, #1
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	011b      	lsls	r3, r3, #4
 800483c:	1a9b      	subs	r3, r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4403      	add	r3, r0
 8004842:	3344      	adds	r3, #68	@ 0x44
 8004844:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	1a9b      	subs	r3, r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	334c      	adds	r3, #76	@ 0x4c
 8004856:	2204      	movs	r2, #4
 8004858:	701a      	strb	r2, [r3, #0]
 800485a:	e00d      	b.n	8004878 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800485c:	78fa      	ldrb	r2, [r7, #3]
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	334d      	adds	r3, #77	@ 0x4d
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b02      	cmp	r3, #2
 8004870:	f000 8100 	beq.w	8004a74 <HCD_HC_IN_IRQHandler+0xcca>
 8004874:	e000      	b.n	8004878 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004876:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	334c      	adds	r3, #76	@ 0x4c
 8004888:	781a      	ldrb	r2, [r3, #0]
 800488a:	78fb      	ldrb	r3, [r7, #3]
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f006 fab0 	bl	800adf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004894:	e0ef      	b.n	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	4611      	mov	r1, r2
 800489e:	4618      	mov	r0, r3
 80048a0:	f003 f9ab 	bl	8007bfa <USB_ReadChInterrupts>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048aa:	2b40      	cmp	r3, #64	@ 0x40
 80048ac:	d12f      	bne.n	800490e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ba:	461a      	mov	r2, r3
 80048bc:	2340      	movs	r3, #64	@ 0x40
 80048be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80048c0:	78fa      	ldrb	r2, [r7, #3]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	1a9b      	subs	r3, r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	334d      	adds	r3, #77	@ 0x4d
 80048d0:	2205      	movs	r2, #5
 80048d2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	4613      	mov	r3, r2
 80048da:	011b      	lsls	r3, r3, #4
 80048dc:	1a9b      	subs	r3, r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	440b      	add	r3, r1
 80048e2:	331a      	adds	r3, #26
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d109      	bne.n	80048fe <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80048ea:	78fa      	ldrb	r2, [r7, #3]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	3344      	adds	r3, #68	@ 0x44
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	4611      	mov	r1, r2
 8004906:	4618      	mov	r0, r3
 8004908:	f003 ff1b 	bl	8008742 <USB_HC_Halt>
 800490c:	e0b3      	b.n	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f003 f96f 	bl	8007bfa <USB_ReadChInterrupts>
 800491c:	4603      	mov	r3, r0
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b10      	cmp	r3, #16
 8004924:	f040 80a7 	bne.w	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004928:	78fa      	ldrb	r2, [r7, #3]
 800492a:	6879      	ldr	r1, [r7, #4]
 800492c:	4613      	mov	r3, r2
 800492e:	011b      	lsls	r3, r3, #4
 8004930:	1a9b      	subs	r3, r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	440b      	add	r3, r1
 8004936:	3326      	adds	r3, #38	@ 0x26
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	2b03      	cmp	r3, #3
 800493c:	d11b      	bne.n	8004976 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	3344      	adds	r3, #68	@ 0x44
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004952:	78fa      	ldrb	r2, [r7, #3]
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	4613      	mov	r3, r2
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	440b      	add	r3, r1
 8004960:	334d      	adds	r3, #77	@ 0x4d
 8004962:	2204      	movs	r2, #4
 8004964:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	78fa      	ldrb	r2, [r7, #3]
 800496c:	4611      	mov	r1, r2
 800496e:	4618      	mov	r0, r3
 8004970:	f003 fee7 	bl	8008742 <USB_HC_Halt>
 8004974:	e03f      	b.n	80049f6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3326      	adds	r3, #38	@ 0x26
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	3326      	adds	r3, #38	@ 0x26
 800499c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d129      	bne.n	80049f6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	3344      	adds	r3, #68	@ 0x44
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	799b      	ldrb	r3, [r3, #6]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <HCD_HC_IN_IRQHandler+0xc2a>
 80049be:	78fa      	ldrb	r2, [r7, #3]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	011b      	lsls	r3, r3, #4
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	331b      	adds	r3, #27
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d110      	bne.n	80049f6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	011b      	lsls	r3, r3, #4
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	440b      	add	r3, r1
 80049e2:	334d      	adds	r3, #77	@ 0x4d
 80049e4:	2204      	movs	r2, #4
 80049e6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	4611      	mov	r1, r2
 80049f0:	4618      	mov	r0, r3
 80049f2:	f003 fea6 	bl	8008742 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80049f6:	78fa      	ldrb	r2, [r7, #3]
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	331b      	adds	r3, #27
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d129      	bne.n	8004a60 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004a0c:	78fa      	ldrb	r2, [r7, #3]
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	4613      	mov	r3, r2
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	331b      	adds	r3, #27
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a5a:	f043 0320 	orr.w	r3, r3, #32
 8004a5e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004a60:	78fb      	ldrb	r3, [r7, #3]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	2310      	movs	r3, #16
 8004a70:	6093      	str	r3, [r2, #8]
 8004a72:	e000      	b.n	8004a76 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004a74:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	78fa      	ldrb	r2, [r7, #3]
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f003 f8ad 	bl	8007bfa <USB_ReadChInterrupts>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b04      	cmp	r3, #4
 8004aa8:	d11b      	bne.n	8004ae2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2304      	movs	r3, #4
 8004aba:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004abc:	78fa      	ldrb	r2, [r7, #3]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	334d      	adds	r3, #77	@ 0x4d
 8004acc:	2207      	movs	r2, #7
 8004ace:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f003 fe32 	bl	8008742 <USB_HC_Halt>
 8004ade:	f000 bc89 	b.w	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	78fa      	ldrb	r2, [r7, #3]
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f003 f885 	bl	8007bfa <USB_ReadChInterrupts>
 8004af0:	4603      	mov	r3, r0
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b20      	cmp	r3, #32
 8004af8:	f040 8082 	bne.w	8004c00 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2320      	movs	r3, #32
 8004b0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004b0e:	78fa      	ldrb	r2, [r7, #3]
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	4613      	mov	r3, r2
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	1a9b      	subs	r3, r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	3319      	adds	r3, #25
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d124      	bne.n	8004b6e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004b24:	78fa      	ldrb	r2, [r7, #3]
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	011b      	lsls	r3, r3, #4
 8004b2c:	1a9b      	subs	r3, r3, r2
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	3319      	adds	r3, #25
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b38:	78fa      	ldrb	r2, [r7, #3]
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	334c      	adds	r3, #76	@ 0x4c
 8004b48:	2202      	movs	r2, #2
 8004b4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004b4c:	78fa      	ldrb	r2, [r7, #3]
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	011b      	lsls	r3, r3, #4
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	334d      	adds	r3, #77	@ 0x4d
 8004b5c:	2203      	movs	r2, #3
 8004b5e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	78fa      	ldrb	r2, [r7, #3]
 8004b66:	4611      	mov	r1, r2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f003 fdea 	bl	8008742 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004b6e:	78fa      	ldrb	r2, [r7, #3]
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	011b      	lsls	r3, r3, #4
 8004b76:	1a9b      	subs	r3, r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	440b      	add	r3, r1
 8004b7c:	331a      	adds	r3, #26
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	f040 8437 	bne.w	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
 8004b86:	78fa      	ldrb	r2, [r7, #3]
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	1a9b      	subs	r3, r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	331b      	adds	r3, #27
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f040 842b 	bne.w	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3326      	adds	r3, #38	@ 0x26
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d009      	beq.n	8004bc8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	331b      	adds	r3, #27
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	334d      	adds	r3, #77	@ 0x4d
 8004bd8:	2203      	movs	r2, #3
 8004bda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	78fa      	ldrb	r2, [r7, #3]
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 fdac 	bl	8008742 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	1a9b      	subs	r3, r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	440b      	add	r3, r1
 8004bf8:	3344      	adds	r3, #68	@ 0x44
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	e3f9      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	78fa      	ldrb	r2, [r7, #3]
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f002 fff6 	bl	8007bfa <USB_ReadChInterrupts>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c18:	d111      	bne.n	8004c3e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004c1a:	78fb      	ldrb	r3, [r7, #3]
 8004c1c:	015a      	lsls	r2, r3, #5
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	4413      	add	r3, r2
 8004c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c26:	461a      	mov	r2, r3
 8004c28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c2c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	78fa      	ldrb	r2, [r7, #3]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f003 fd83 	bl	8008742 <USB_HC_Halt>
 8004c3c:	e3da      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	78fa      	ldrb	r2, [r7, #3]
 8004c44:	4611      	mov	r1, r2
 8004c46:	4618      	mov	r0, r3
 8004c48:	f002 ffd7 	bl	8007bfa <USB_ReadChInterrupts>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d168      	bne.n	8004d28 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004c56:	78fa      	ldrb	r2, [r7, #3]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	3344      	adds	r3, #68	@ 0x44
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	78fa      	ldrb	r2, [r7, #3]
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f002 ffc1 	bl	8007bfa <USB_ReadChInterrupts>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7e:	2b40      	cmp	r3, #64	@ 0x40
 8004c80:	d112      	bne.n	8004ca8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004c82:	78fa      	ldrb	r2, [r7, #3]
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	4613      	mov	r3, r2
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	1a9b      	subs	r3, r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	440b      	add	r3, r1
 8004c90:	3319      	adds	r3, #25
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	2340      	movs	r3, #64	@ 0x40
 8004ca6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	4613      	mov	r3, r2
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	331b      	adds	r3, #27
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d019      	beq.n	8004cf2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	331b      	adds	r3, #27
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004cd2:	78fb      	ldrb	r3, [r7, #3]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	0151      	lsls	r1, r2, #5
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	440a      	add	r2, r1
 8004ce8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cf0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	015a      	lsls	r2, r3, #5
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cfe:	461a      	mov	r2, r3
 8004d00:	2301      	movs	r3, #1
 8004d02:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	440b      	add	r3, r1
 8004d12:	334d      	adds	r3, #77	@ 0x4d
 8004d14:	2201      	movs	r2, #1
 8004d16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4618      	mov	r0, r3
 8004d22:	f003 fd0e 	bl	8008742 <USB_HC_Halt>
 8004d26:	e365      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	78fa      	ldrb	r2, [r7, #3]
 8004d2e:	4611      	mov	r1, r2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f002 ff62 	bl	8007bfa <USB_ReadChInterrupts>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b40      	cmp	r3, #64	@ 0x40
 8004d3e:	d139      	bne.n	8004db4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004d40:	78fa      	ldrb	r2, [r7, #3]
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	4613      	mov	r3, r2
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	1a9b      	subs	r3, r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	334d      	adds	r3, #77	@ 0x4d
 8004d50:	2205      	movs	r2, #5
 8004d52:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004d54:	78fa      	ldrb	r2, [r7, #3]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	011b      	lsls	r3, r3, #4
 8004d5c:	1a9b      	subs	r3, r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	331a      	adds	r3, #26
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	011b      	lsls	r3, r3, #4
 8004d72:	1a9b      	subs	r3, r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	440b      	add	r3, r1
 8004d78:	3319      	adds	r3, #25
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004d7e:	78fa      	ldrb	r2, [r7, #3]
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	1a9b      	subs	r3, r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	440b      	add	r3, r1
 8004d8c:	3344      	adds	r3, #68	@ 0x44
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	78fa      	ldrb	r2, [r7, #3]
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f003 fcd1 	bl	8008742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dac:	461a      	mov	r2, r3
 8004dae:	2340      	movs	r3, #64	@ 0x40
 8004db0:	6093      	str	r3, [r2, #8]
 8004db2:	e31f      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	4611      	mov	r1, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f002 ff1c 	bl	8007bfa <USB_ReadChInterrupts>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d11a      	bne.n	8004e02 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004dcc:	78fb      	ldrb	r3, [r7, #3]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd8:	461a      	mov	r2, r3
 8004dda:	2308      	movs	r3, #8
 8004ddc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004dde:	78fa      	ldrb	r2, [r7, #3]
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	334d      	adds	r3, #77	@ 0x4d
 8004dee:	2206      	movs	r2, #6
 8004df0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	78fa      	ldrb	r2, [r7, #3]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f003 fca1 	bl	8008742 <USB_HC_Halt>
 8004e00:	e2f8      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	78fa      	ldrb	r2, [r7, #3]
 8004e08:	4611      	mov	r1, r2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f002 fef5 	bl	8007bfa <USB_ReadChInterrupts>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d144      	bne.n	8004ea4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004e1a:	78fa      	ldrb	r2, [r7, #3]
 8004e1c:	6879      	ldr	r1, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	3344      	adds	r3, #68	@ 0x44
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	334d      	adds	r3, #77	@ 0x4d
 8004e3e:	2204      	movs	r2, #4
 8004e40:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004e42:	78fa      	ldrb	r2, [r7, #3]
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	1a9b      	subs	r3, r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	3319      	adds	r3, #25
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d114      	bne.n	8004e82 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004e58:	78fa      	ldrb	r2, [r7, #3]
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	011b      	lsls	r3, r3, #4
 8004e60:	1a9b      	subs	r3, r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	3318      	adds	r3, #24
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004e6e:	78fa      	ldrb	r2, [r7, #3]
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	1a9b      	subs	r3, r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3319      	adds	r3, #25
 8004e7e:	2201      	movs	r2, #1
 8004e80:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f003 fc59 	bl	8008742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2310      	movs	r3, #16
 8004ea0:	6093      	str	r3, [r2, #8]
 8004ea2:	e2a7      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f002 fea4 	bl	8007bfa <USB_ReadChInterrupts>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb8:	2b80      	cmp	r3, #128	@ 0x80
 8004eba:	f040 8083 	bne.w	8004fc4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	799b      	ldrb	r3, [r3, #6]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d111      	bne.n	8004eea <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004ec6:	78fa      	ldrb	r2, [r7, #3]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	011b      	lsls	r3, r3, #4
 8004ece:	1a9b      	subs	r3, r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	334d      	adds	r3, #77	@ 0x4d
 8004ed6:	2207      	movs	r2, #7
 8004ed8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f003 fc2d 	bl	8008742 <USB_HC_Halt>
 8004ee8:	e062      	b.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004eea:	78fa      	ldrb	r2, [r7, #3]
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	011b      	lsls	r3, r3, #4
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	440b      	add	r3, r1
 8004ef8:	3344      	adds	r3, #68	@ 0x44
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	1c59      	adds	r1, r3, #1
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4613      	mov	r3, r2
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	1a9b      	subs	r3, r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4403      	add	r3, r0
 8004f0a:	3344      	adds	r3, #68	@ 0x44
 8004f0c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	3344      	adds	r3, #68	@ 0x44
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d922      	bls.n	8004f6a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3344      	adds	r3, #68	@ 0x44
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	334c      	adds	r3, #76	@ 0x4c
 8004f48:	2204      	movs	r2, #4
 8004f4a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004f4c:	78fa      	ldrb	r2, [r7, #3]
 8004f4e:	6879      	ldr	r1, [r7, #4]
 8004f50:	4613      	mov	r3, r2
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	1a9b      	subs	r3, r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	440b      	add	r3, r1
 8004f5a:	334c      	adds	r3, #76	@ 0x4c
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	4619      	mov	r1, r3
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f005 ff46 	bl	800adf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f68:	e022      	b.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	011b      	lsls	r3, r3, #4
 8004f72:	1a9b      	subs	r3, r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	334c      	adds	r3, #76	@ 0x4c
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004f94:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004f9c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004f9e:	78fb      	ldrb	r3, [r7, #3]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	2380      	movs	r3, #128	@ 0x80
 8004fc0:	6093      	str	r3, [r2, #8]
 8004fc2:	e217      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f002 fe14 	bl	8007bfa <USB_ReadChInterrupts>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fdc:	d11b      	bne.n	8005016 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	6879      	ldr	r1, [r7, #4]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	011b      	lsls	r3, r3, #4
 8004fe6:	1a9b      	subs	r3, r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	440b      	add	r3, r1
 8004fec:	334d      	adds	r3, #77	@ 0x4d
 8004fee:	2209      	movs	r2, #9
 8004ff0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	78fa      	ldrb	r2, [r7, #3]
 8004ff8:	4611      	mov	r1, r2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f003 fba1 	bl	8008742 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	4413      	add	r3, r2
 8005008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800500c:	461a      	mov	r2, r3
 800500e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005012:	6093      	str	r3, [r2, #8]
 8005014:	e1ee      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f002 fdeb 	bl	8007bfa <USB_ReadChInterrupts>
 8005024:	4603      	mov	r3, r0
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	f040 81df 	bne.w	80053ee <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4413      	add	r3, r2
 8005038:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800503c:	461a      	mov	r2, r3
 800503e:	2302      	movs	r3, #2
 8005040:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	334d      	adds	r3, #77	@ 0x4d
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b01      	cmp	r3, #1
 8005056:	f040 8093 	bne.w	8005180 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	4613      	mov	r3, r2
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	1a9b      	subs	r3, r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	334d      	adds	r3, #77	@ 0x4d
 800506a:	2202      	movs	r2, #2
 800506c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800506e:	78fa      	ldrb	r2, [r7, #3]
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	334c      	adds	r3, #76	@ 0x4c
 800507e:	2201      	movs	r2, #1
 8005080:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005082:	78fa      	ldrb	r2, [r7, #3]
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	3326      	adds	r3, #38	@ 0x26
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d00b      	beq.n	80050b0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	1a9b      	subs	r3, r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3326      	adds	r3, #38	@ 0x26
 80050a8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80050aa:	2b03      	cmp	r3, #3
 80050ac:	f040 8190 	bne.w	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	799b      	ldrb	r3, [r3, #6]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d115      	bne.n	80050e4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80050b8:	78fa      	ldrb	r2, [r7, #3]
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	4613      	mov	r3, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	1a9b      	subs	r3, r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	440b      	add	r3, r1
 80050c6:	333d      	adds	r3, #61	@ 0x3d
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	78fa      	ldrb	r2, [r7, #3]
 80050cc:	f083 0301 	eor.w	r3, r3, #1
 80050d0:	b2d8      	uxtb	r0, r3
 80050d2:	6879      	ldr	r1, [r7, #4]
 80050d4:	4613      	mov	r3, r2
 80050d6:	011b      	lsls	r3, r3, #4
 80050d8:	1a9b      	subs	r3, r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	333d      	adds	r3, #61	@ 0x3d
 80050e0:	4602      	mov	r2, r0
 80050e2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	799b      	ldrb	r3, [r3, #6]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	f040 8171 	bne.w	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
 80050ee:	78fa      	ldrb	r2, [r7, #3]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3334      	adds	r3, #52	@ 0x34
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8165 	beq.w	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005106:	78fa      	ldrb	r2, [r7, #3]
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	1a9b      	subs	r3, r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	3334      	adds	r3, #52	@ 0x34
 8005116:	6819      	ldr	r1, [r3, #0]
 8005118:	78fa      	ldrb	r2, [r7, #3]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4403      	add	r3, r0
 8005126:	3328      	adds	r3, #40	@ 0x28
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	440b      	add	r3, r1
 800512c:	1e59      	subs	r1, r3, #1
 800512e:	78fa      	ldrb	r2, [r7, #3]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4403      	add	r3, r0
 800513c:	3328      	adds	r3, #40	@ 0x28
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	fbb1 f3f3 	udiv	r3, r1, r3
 8005144:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 813f 	beq.w	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	333d      	adds	r3, #61	@ 0x3d
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	f083 0301 	eor.w	r3, r3, #1
 800516a:	b2d8      	uxtb	r0, r3
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	1a9b      	subs	r3, r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	333d      	adds	r3, #61	@ 0x3d
 800517a:	4602      	mov	r2, r0
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	e127      	b.n	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005180:	78fa      	ldrb	r2, [r7, #3]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	011b      	lsls	r3, r3, #4
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	334d      	adds	r3, #77	@ 0x4d
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b03      	cmp	r3, #3
 8005194:	d120      	bne.n	80051d8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	334d      	adds	r3, #77	@ 0x4d
 80051a6:	2202      	movs	r2, #2
 80051a8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	331b      	adds	r3, #27
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f040 8107 	bne.w	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	334c      	adds	r3, #76	@ 0x4c
 80051d2:	2202      	movs	r2, #2
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e0fb      	b.n	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	334d      	adds	r3, #77	@ 0x4d
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d13a      	bne.n	8005264 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	1a9b      	subs	r3, r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	334d      	adds	r3, #77	@ 0x4d
 80051fe:	2202      	movs	r2, #2
 8005200:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	6879      	ldr	r1, [r7, #4]
 8005206:	4613      	mov	r3, r2
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	1a9b      	subs	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	440b      	add	r3, r1
 8005210:	334c      	adds	r3, #76	@ 0x4c
 8005212:	2202      	movs	r2, #2
 8005214:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005216:	78fa      	ldrb	r2, [r7, #3]
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	4613      	mov	r3, r2
 800521c:	011b      	lsls	r3, r3, #4
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	440b      	add	r3, r1
 8005224:	331b      	adds	r3, #27
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	f040 80d1 	bne.w	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	011b      	lsls	r3, r3, #4
 8005236:	1a9b      	subs	r3, r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	331b      	adds	r3, #27
 800523e:	2200      	movs	r2, #0
 8005240:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	440a      	add	r2, r1
 8005258:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800525c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005260:	6053      	str	r3, [r2, #4]
 8005262:	e0b5      	b.n	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	334d      	adds	r3, #77	@ 0x4d
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	2b05      	cmp	r3, #5
 8005278:	d114      	bne.n	80052a4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800527a:	78fa      	ldrb	r2, [r7, #3]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	1a9b      	subs	r3, r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	334d      	adds	r3, #77	@ 0x4d
 800528a:	2202      	movs	r2, #2
 800528c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800528e:	78fa      	ldrb	r2, [r7, #3]
 8005290:	6879      	ldr	r1, [r7, #4]
 8005292:	4613      	mov	r3, r2
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	440b      	add	r3, r1
 800529c:	334c      	adds	r3, #76	@ 0x4c
 800529e:	2202      	movs	r2, #2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e095      	b.n	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80052a4:	78fa      	ldrb	r2, [r7, #3]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	334d      	adds	r3, #77	@ 0x4d
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b06      	cmp	r3, #6
 80052b8:	d114      	bne.n	80052e4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052ba:	78fa      	ldrb	r2, [r7, #3]
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	440b      	add	r3, r1
 80052c8:	334d      	adds	r3, #77	@ 0x4d
 80052ca:	2202      	movs	r2, #2
 80052cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80052ce:	78fa      	ldrb	r2, [r7, #3]
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	011b      	lsls	r3, r3, #4
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	334c      	adds	r3, #76	@ 0x4c
 80052de:	2205      	movs	r2, #5
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e075      	b.n	80053d0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80052e4:	78fa      	ldrb	r2, [r7, #3]
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	4613      	mov	r3, r2
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	334d      	adds	r3, #77	@ 0x4d
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	2b07      	cmp	r3, #7
 80052f8:	d00a      	beq.n	8005310 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80052fa:	78fa      	ldrb	r2, [r7, #3]
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	011b      	lsls	r3, r3, #4
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	334d      	adds	r3, #77	@ 0x4d
 800530a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800530c:	2b09      	cmp	r3, #9
 800530e:	d170      	bne.n	80053f2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	334d      	adds	r3, #77	@ 0x4d
 8005320:	2202      	movs	r2, #2
 8005322:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005324:	78fa      	ldrb	r2, [r7, #3]
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	4613      	mov	r3, r2
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	1a9b      	subs	r3, r3, r2
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	3344      	adds	r3, #68	@ 0x44
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	1c59      	adds	r1, r3, #1
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	1a9b      	subs	r3, r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4403      	add	r3, r0
 8005344:	3344      	adds	r3, #68	@ 0x44
 8005346:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005348:	78fa      	ldrb	r2, [r7, #3]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	1a9b      	subs	r3, r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	3344      	adds	r3, #68	@ 0x44
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d914      	bls.n	8005388 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800535e:	78fa      	ldrb	r2, [r7, #3]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3344      	adds	r3, #68	@ 0x44
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005372:	78fa      	ldrb	r2, [r7, #3]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	334c      	adds	r3, #76	@ 0x4c
 8005382:	2204      	movs	r2, #4
 8005384:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005386:	e022      	b.n	80053ce <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	334c      	adds	r3, #76	@ 0x4c
 8005398:	2202      	movs	r2, #2
 800539a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053b2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053ba:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053c8:	461a      	mov	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053ce:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	334c      	adds	r3, #76	@ 0x4c
 80053e0:	781a      	ldrb	r2, [r3, #0]
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f005 fd04 	bl	800adf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80053ec:	e002      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80053ee:	bf00      	nop
 80053f0:	e000      	b.n	80053f4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80053f2:	bf00      	nop
  }
}
 80053f4:	3718      	adds	r7, #24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b08a      	sub	sp, #40	@ 0x28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	0c5b      	lsrs	r3, r3, #17
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	091b      	lsrs	r3, r3, #4
 800542a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800542e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d004      	beq.n	8005440 <HCD_RXQLVL_IRQHandler+0x46>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	2b05      	cmp	r3, #5
 800543a:	f000 80b6 	beq.w	80055aa <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800543e:	e0b7      	b.n	80055b0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80b3 	beq.w	80055ae <HCD_RXQLVL_IRQHandler+0x1b4>
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4613      	mov	r3, r2
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	332c      	adds	r3, #44	@ 0x2c
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 80a7 	beq.w	80055ae <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4613      	mov	r3, r2
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	1a9b      	subs	r3, r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	440b      	add	r3, r1
 800546e:	3338      	adds	r3, #56	@ 0x38
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	18d1      	adds	r1, r2, r3
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	4613      	mov	r3, r2
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4403      	add	r3, r0
 8005484:	3334      	adds	r3, #52	@ 0x34
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4299      	cmp	r1, r3
 800548a:	f200 8083 	bhi.w	8005594 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	69ba      	ldr	r2, [r7, #24]
 8005496:	4613      	mov	r3, r2
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	1a9b      	subs	r3, r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	332c      	adds	r3, #44	@ 0x2c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	b292      	uxth	r2, r2
 80054a8:	4619      	mov	r1, r3
 80054aa:	f002 fb3b 	bl	8007b24 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	4613      	mov	r3, r2
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	332c      	adds	r3, #44	@ 0x2c
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	18d1      	adds	r1, r2, r3
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4613      	mov	r3, r2
 80054ca:	011b      	lsls	r3, r3, #4
 80054cc:	1a9b      	subs	r3, r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4403      	add	r3, r0
 80054d2:	332c      	adds	r3, #44	@ 0x2c
 80054d4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4613      	mov	r3, r2
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	440b      	add	r3, r1
 80054e4:	3338      	adds	r3, #56	@ 0x38
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	18d1      	adds	r1, r2, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4613      	mov	r3, r2
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	1a9b      	subs	r3, r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4403      	add	r3, r0
 80054fa:	3338      	adds	r3, #56	@ 0x38
 80054fc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	4413      	add	r3, r2
 8005506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	0cdb      	lsrs	r3, r3, #19
 800550e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005512:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4613      	mov	r3, r2
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	3328      	adds	r3, #40	@ 0x28
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	461a      	mov	r2, r3
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4293      	cmp	r3, r2
 800552c:	d13f      	bne.n	80055ae <HCD_RXQLVL_IRQHandler+0x1b4>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d03c      	beq.n	80055ae <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	4413      	add	r3, r2
 800553c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800554a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005552:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	4413      	add	r3, r2
 800555c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	4613      	mov	r3, r2
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	333c      	adds	r3, #60	@ 0x3c
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f083 0301 	eor.w	r3, r3, #1
 800557c:	b2d8      	uxtb	r0, r3
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4613      	mov	r3, r2
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	333c      	adds	r3, #60	@ 0x3c
 800558e:	4602      	mov	r2, r0
 8005590:	701a      	strb	r2, [r3, #0]
      break;
 8005592:	e00c      	b.n	80055ae <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005594:	6879      	ldr	r1, [r7, #4]
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	334c      	adds	r3, #76	@ 0x4c
 80055a4:	2204      	movs	r2, #4
 80055a6:	701a      	strb	r2, [r3, #0]
      break;
 80055a8:	e001      	b.n	80055ae <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80055aa:	bf00      	nop
 80055ac:	e000      	b.n	80055b0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80055ae:	bf00      	nop
  }
}
 80055b0:	bf00      	nop
 80055b2:	3728      	adds	r7, #40	@ 0x28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d10b      	bne.n	8005608 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d102      	bne.n	8005600 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f005 fbde 	bl	800adbc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f043 0302 	orr.w	r3, r3, #2
 8005606:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b08      	cmp	r3, #8
 8005610:	d132      	bne.n	8005678 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f043 0308 	orr.w	r3, r3, #8
 8005618:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d126      	bne.n	8005672 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	7a5b      	ldrb	r3, [r3, #9]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d113      	bne.n	8005654 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005636:	d106      	bne.n	8005646 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2102      	movs	r1, #2
 800563e:	4618      	mov	r0, r3
 8005640:	f002 fc00 	bl	8007e44 <USB_InitFSLSPClkSel>
 8005644:	e011      	b.n	800566a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2101      	movs	r1, #1
 800564c:	4618      	mov	r0, r3
 800564e:	f002 fbf9 	bl	8007e44 <USB_InitFSLSPClkSel>
 8005652:	e00a      	b.n	800566a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	79db      	ldrb	r3, [r3, #7]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005662:	461a      	mov	r2, r3
 8005664:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005668:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f005 fbd0 	bl	800ae10 <HAL_HCD_PortEnabled_Callback>
 8005670:	e002      	b.n	8005678 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f005 fbda 	bl	800ae2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b20      	cmp	r3, #32
 8005680:	d103      	bne.n	800568a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f043 0320 	orr.w	r3, r3, #32
 8005688:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005690:	461a      	mov	r2, r3
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	6013      	str	r3, [r2, #0]
}
 8005696:	bf00      	nop
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
	...

080056a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e12b      	b.n	800590a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fd f8e0 	bl	800288c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	@ 0x24
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005704:	f001 fa20 	bl	8006b48 <HAL_RCC_GetPCLK1Freq>
 8005708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4a81      	ldr	r2, [pc, #516]	@ (8005914 <HAL_I2C_Init+0x274>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d807      	bhi.n	8005724 <HAL_I2C_Init+0x84>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4a80      	ldr	r2, [pc, #512]	@ (8005918 <HAL_I2C_Init+0x278>)
 8005718:	4293      	cmp	r3, r2
 800571a:	bf94      	ite	ls
 800571c:	2301      	movls	r3, #1
 800571e:	2300      	movhi	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	e006      	b.n	8005732 <HAL_I2C_Init+0x92>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a7d      	ldr	r2, [pc, #500]	@ (800591c <HAL_I2C_Init+0x27c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	bf94      	ite	ls
 800572c:	2301      	movls	r3, #1
 800572e:	2300      	movhi	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e0e7      	b.n	800590a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a78      	ldr	r2, [pc, #480]	@ (8005920 <HAL_I2C_Init+0x280>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0c9b      	lsrs	r3, r3, #18
 8005744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a6a      	ldr	r2, [pc, #424]	@ (8005914 <HAL_I2C_Init+0x274>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d802      	bhi.n	8005774 <HAL_I2C_Init+0xd4>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	3301      	adds	r3, #1
 8005772:	e009      	b.n	8005788 <HAL_I2C_Init+0xe8>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	4a69      	ldr	r2, [pc, #420]	@ (8005924 <HAL_I2C_Init+0x284>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	099b      	lsrs	r3, r3, #6
 8005786:	3301      	adds	r3, #1
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	430b      	orrs	r3, r1
 800578e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800579a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	495c      	ldr	r1, [pc, #368]	@ (8005914 <HAL_I2C_Init+0x274>)
 80057a4:	428b      	cmp	r3, r1
 80057a6:	d819      	bhi.n	80057dc <HAL_I2C_Init+0x13c>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1e59      	subs	r1, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057b6:	1c59      	adds	r1, r3, #1
 80057b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80057bc:	400b      	ands	r3, r1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_I2C_Init+0x138>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	1e59      	subs	r1, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80057d0:	3301      	adds	r3, #1
 80057d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d6:	e051      	b.n	800587c <HAL_I2C_Init+0x1dc>
 80057d8:	2304      	movs	r3, #4
 80057da:	e04f      	b.n	800587c <HAL_I2C_Init+0x1dc>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d111      	bne.n	8005808 <HAL_I2C_Init+0x168>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1e58      	subs	r0, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6859      	ldr	r1, [r3, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	440b      	add	r3, r1
 80057f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f6:	3301      	adds	r3, #1
 80057f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	e012      	b.n	800582e <HAL_I2C_Init+0x18e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1e58      	subs	r0, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6859      	ldr	r1, [r3, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	0099      	lsls	r1, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	fbb0 f3f3 	udiv	r3, r0, r3
 800581e:	3301      	adds	r3, #1
 8005820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_I2C_Init+0x196>
 8005832:	2301      	movs	r3, #1
 8005834:	e022      	b.n	800587c <HAL_I2C_Init+0x1dc>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10e      	bne.n	800585c <HAL_I2C_Init+0x1bc>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1e58      	subs	r0, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6859      	ldr	r1, [r3, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	440b      	add	r3, r1
 800584c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005850:	3301      	adds	r3, #1
 8005852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800585a:	e00f      	b.n	800587c <HAL_I2C_Init+0x1dc>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1e58      	subs	r0, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6859      	ldr	r1, [r3, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	0099      	lsls	r1, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005872:	3301      	adds	r3, #1
 8005874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005878:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	6809      	ldr	r1, [r1, #0]
 8005880:	4313      	orrs	r3, r2
 8005882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69da      	ldr	r2, [r3, #28]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80058aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6911      	ldr	r1, [r2, #16]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68d2      	ldr	r2, [r2, #12]
 80058b6:	4311      	orrs	r1, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	430b      	orrs	r3, r1
 80058be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	000186a0 	.word	0x000186a0
 8005918:	001e847f 	.word	0x001e847f
 800591c:	003d08ff 	.word	0x003d08ff
 8005920:	431bde83 	.word	0x431bde83
 8005924:	10624dd3 	.word	0x10624dd3

08005928 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e128      	b.n	8005b8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a90      	ldr	r2, [pc, #576]	@ (8005b94 <HAL_I2S_Init+0x26c>)
 8005952:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fc ffe1 	bl	800291c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6812      	ldr	r2, [r2, #0]
 800596c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005970:	f023 030f 	bic.w	r3, r3, #15
 8005974:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2202      	movs	r2, #2
 800597c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d060      	beq.n	8005a48 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800598e:	2310      	movs	r3, #16
 8005990:	617b      	str	r3, [r7, #20]
 8005992:	e001      	b.n	8005998 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005994:	2320      	movs	r3, #32
 8005996:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b20      	cmp	r3, #32
 800599e:	d802      	bhi.n	80059a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80059a6:	2001      	movs	r0, #1
 80059a8:	f001 f9d8 	bl	8006d5c <HAL_RCCEx_GetPeriphCLKFreq>
 80059ac:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059b6:	d125      	bne.n	8005a04 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d010      	beq.n	80059e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ca:	4613      	mov	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	461a      	mov	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059dc:	3305      	adds	r3, #5
 80059de:	613b      	str	r3, [r7, #16]
 80059e0:	e01f      	b.n	8005a22 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	461a      	mov	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fe:	3305      	adds	r3, #5
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	e00e      	b.n	8005a22 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	461a      	mov	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	3305      	adds	r3, #5
 8005a20:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4a5c      	ldr	r2, [pc, #368]	@ (8005b98 <HAL_I2S_Init+0x270>)
 8005a26:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2a:	08db      	lsrs	r3, r3, #3
 8005a2c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	e003      	b.n	8005a50 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d902      	bls.n	8005a5c <HAL_I2S_Init+0x134>
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	2bff      	cmp	r3, #255	@ 0xff
 8005a5a:	d907      	bls.n	8005a6c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a60:	f043 0210 	orr.w	r2, r3, #16
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e08f      	b.n	8005b8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	ea42 0103 	orr.w	r1, r2, r3
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005a8a:	f023 030f 	bic.w	r3, r3, #15
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6851      	ldr	r1, [r2, #4]
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6892      	ldr	r2, [r2, #8]
 8005a96:	4311      	orrs	r1, r2
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	68d2      	ldr	r2, [r2, #12]
 8005a9c:	4311      	orrs	r1, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6992      	ldr	r2, [r2, #24]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005aae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d161      	bne.n	8005b7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a38      	ldr	r2, [pc, #224]	@ (8005b9c <HAL_I2S_Init+0x274>)
 8005abc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a37      	ldr	r2, [pc, #220]	@ (8005ba0 <HAL_I2S_Init+0x278>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d101      	bne.n	8005acc <HAL_I2S_Init+0x1a4>
 8005ac8:	4b36      	ldr	r3, [pc, #216]	@ (8005ba4 <HAL_I2S_Init+0x27c>)
 8005aca:	e001      	b.n	8005ad0 <HAL_I2S_Init+0x1a8>
 8005acc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	4932      	ldr	r1, [pc, #200]	@ (8005ba0 <HAL_I2S_Init+0x278>)
 8005ad8:	428a      	cmp	r2, r1
 8005ada:	d101      	bne.n	8005ae0 <HAL_I2S_Init+0x1b8>
 8005adc:	4a31      	ldr	r2, [pc, #196]	@ (8005ba4 <HAL_I2S_Init+0x27c>)
 8005ade:	e001      	b.n	8005ae4 <HAL_I2S_Init+0x1bc>
 8005ae0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005ae4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005ae8:	f023 030f 	bic.w	r3, r3, #15
 8005aec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a2b      	ldr	r2, [pc, #172]	@ (8005ba0 <HAL_I2S_Init+0x278>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d101      	bne.n	8005afc <HAL_I2S_Init+0x1d4>
 8005af8:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba4 <HAL_I2S_Init+0x27c>)
 8005afa:	e001      	b.n	8005b00 <HAL_I2S_Init+0x1d8>
 8005afc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b00:	2202      	movs	r2, #2
 8005b02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a25      	ldr	r2, [pc, #148]	@ (8005ba0 <HAL_I2S_Init+0x278>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d101      	bne.n	8005b12 <HAL_I2S_Init+0x1ea>
 8005b0e:	4b25      	ldr	r3, [pc, #148]	@ (8005ba4 <HAL_I2S_Init+0x27c>)
 8005b10:	e001      	b.n	8005b16 <HAL_I2S_Init+0x1ee>
 8005b12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b22:	d003      	beq.n	8005b2c <HAL_I2S_Init+0x204>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005b2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	e001      	b.n	8005b38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	897b      	ldrh	r3, [r7, #10]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005b64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba0 <HAL_I2S_Init+0x278>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d101      	bne.n	8005b74 <HAL_I2S_Init+0x24c>
 8005b70:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba4 <HAL_I2S_Init+0x27c>)
 8005b72:	e001      	b.n	8005b78 <HAL_I2S_Init+0x250>
 8005b74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b78:	897a      	ldrh	r2, [r7, #10]
 8005b7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3720      	adds	r7, #32
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	08005c9f 	.word	0x08005c9f
 8005b98:	cccccccd 	.word	0xcccccccd
 8005b9c:	08005db5 	.word	0x08005db5
 8005ba0:	40003800 	.word	0x40003800
 8005ba4:	40003400 	.word	0x40003400

08005ba8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	881a      	ldrh	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	1c9a      	adds	r2, r3, #2
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10e      	bne.n	8005c38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff ffb8 	bl	8005ba8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c52:	b292      	uxth	r2, r2
 8005c54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5a:	1c9a      	adds	r2, r3, #2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10e      	bne.n	8005c96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f7ff ff93 	bl	8005bbc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c96:	bf00      	nop
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	d13a      	bne.n	8005d30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d109      	bne.n	8005cd8 <I2S_IRQHandler+0x3a>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cce:	2b40      	cmp	r3, #64	@ 0x40
 8005cd0:	d102      	bne.n	8005cd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f7ff ffb4 	bl	8005c40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cde:	2b40      	cmp	r3, #64	@ 0x40
 8005ce0:	d126      	bne.n	8005d30 <I2S_IRQHandler+0x92>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f003 0320 	and.w	r3, r3, #32
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d11f      	bne.n	8005d30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005cfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d00:	2300      	movs	r3, #0
 8005d02:	613b      	str	r3, [r7, #16]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	613b      	str	r3, [r7, #16]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	613b      	str	r3, [r7, #16]
 8005d14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d22:	f043 0202 	orr.w	r2, r3, #2
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7ff ff50 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	d136      	bne.n	8005daa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d109      	bne.n	8005d5a <I2S_IRQHandler+0xbc>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d50:	2b80      	cmp	r3, #128	@ 0x80
 8005d52:	d102      	bne.n	8005d5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ff45 	bl	8005be4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d122      	bne.n	8005daa <I2S_IRQHandler+0x10c>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d11b      	bne.n	8005daa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9c:	f043 0204 	orr.w	r2, r3, #4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f7ff ff13 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005daa:	bf00      	nop
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a92      	ldr	r2, [pc, #584]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005dce:	4b92      	ldr	r3, [pc, #584]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dd0:	e001      	b.n	8005dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005dd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a8b      	ldr	r2, [pc, #556]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005dec:	4b8a      	ldr	r3, [pc, #552]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005dee:	e001      	b.n	8005df4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005df0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e00:	d004      	beq.n	8005e0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f040 8099 	bne.w	8005f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d107      	bne.n	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f925 	bl	8006070 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d107      	bne.n	8005e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9c8 	bl	80061d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e46:	2b40      	cmp	r3, #64	@ 0x40
 8005e48:	d13a      	bne.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f003 0320 	and.w	r3, r3, #32
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d035      	beq.n	8005ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a6e      	ldr	r2, [pc, #440]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e60:	e001      	b.n	8005e66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005e62:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4969      	ldr	r1, [pc, #420]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005e6e:	428b      	cmp	r3, r1
 8005e70:	d101      	bne.n	8005e76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005e72:	4b69      	ldr	r3, [pc, #420]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005e74:	e001      	b.n	8005e7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e7a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005e7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e90:	2300      	movs	r3, #0
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	f043 0202 	orr.w	r2, r3, #2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f7ff fe88 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	f040 80c3 	bne.w	8006052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80bd 	beq.w	8006052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005ee6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a49      	ldr	r2, [pc, #292]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d101      	bne.n	8005ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005ef2:	4b49      	ldr	r3, [pc, #292]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ef4:	e001      	b.n	8005efa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005ef6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4944      	ldr	r1, [pc, #272]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f02:	428b      	cmp	r3, r1
 8005f04:	d101      	bne.n	8005f0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005f06:	4b44      	ldr	r3, [pc, #272]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005f08:	e001      	b.n	8005f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005f0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f0e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005f14:	2300      	movs	r3, #0
 8005f16:	60bb      	str	r3, [r7, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2e:	f043 0204 	orr.w	r2, r3, #4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f7ff fe4a 	bl	8005bd0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f3c:	e089      	b.n	8006052 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d107      	bne.n	8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d002      	beq.n	8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f8be 	bl	80060d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d107      	bne.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8fd 	bl	800616c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f78:	2b40      	cmp	r3, #64	@ 0x40
 8005f7a:	d12f      	bne.n	8005fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d02a      	beq.n	8005fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a1e      	ldr	r2, [pc, #120]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fa2:	e001      	b.n	8005fa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005fa4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4919      	ldr	r1, [pc, #100]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005fb0:	428b      	cmp	r3, r1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005fb4:	4b18      	ldr	r3, [pc, #96]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005fb6:	e001      	b.n	8005fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005fb8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005fbc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005fc0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fce:	f043 0202 	orr.w	r2, r3, #2
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff fdfa 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d136      	bne.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d031      	beq.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a07      	ldr	r2, [pc, #28]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d101      	bne.n	8005ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005ffa:	4b07      	ldr	r3, [pc, #28]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005ffc:	e001      	b.n	8006002 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005ffe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4902      	ldr	r1, [pc, #8]	@ (8006014 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800600a:	428b      	cmp	r3, r1
 800600c:	d106      	bne.n	800601c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800600e:	4b02      	ldr	r3, [pc, #8]	@ (8006018 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006010:	e006      	b.n	8006020 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006012:	bf00      	nop
 8006014:	40003800 	.word	0x40003800
 8006018:	40003400 	.word	0x40003400
 800601c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006020:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006024:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006034:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006042:	f043 0204 	orr.w	r2, r3, #4
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7ff fdc0 	bl	8005bd0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006050:	e000      	b.n	8006054 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006052:	bf00      	nop
}
 8006054:	bf00      	nop
 8006056:	3720      	adds	r7, #32
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607c:	1c99      	adds	r1, r3, #2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6251      	str	r1, [r2, #36]	@ 0x24
 8006082:	881a      	ldrh	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800609c:	b29b      	uxth	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d113      	bne.n	80060ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80060b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d106      	bne.n	80060ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff ffc9 	bl	800605c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
	...

080060d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	1c99      	adds	r1, r3, #2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6251      	str	r1, [r2, #36]	@ 0x24
 80060e6:	8819      	ldrh	r1, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006164 <I2SEx_TxISR_I2SExt+0x90>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d101      	bne.n	80060f6 <I2SEx_TxISR_I2SExt+0x22>
 80060f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006168 <I2SEx_TxISR_I2SExt+0x94>)
 80060f4:	e001      	b.n	80060fa <I2SEx_TxISR_I2SExt+0x26>
 80060f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80060fa:	460a      	mov	r2, r1
 80060fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d121      	bne.n	800615a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a12      	ldr	r2, [pc, #72]	@ (8006164 <I2SEx_TxISR_I2SExt+0x90>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d101      	bne.n	8006124 <I2SEx_TxISR_I2SExt+0x50>
 8006120:	4b11      	ldr	r3, [pc, #68]	@ (8006168 <I2SEx_TxISR_I2SExt+0x94>)
 8006122:	e001      	b.n	8006128 <I2SEx_TxISR_I2SExt+0x54>
 8006124:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	490d      	ldr	r1, [pc, #52]	@ (8006164 <I2SEx_TxISR_I2SExt+0x90>)
 8006130:	428b      	cmp	r3, r1
 8006132:	d101      	bne.n	8006138 <I2SEx_TxISR_I2SExt+0x64>
 8006134:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <I2SEx_TxISR_I2SExt+0x94>)
 8006136:	e001      	b.n	800613c <I2SEx_TxISR_I2SExt+0x68>
 8006138:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800613c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006140:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f7ff ff81 	bl	800605c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800615a:	bf00      	nop
 800615c:	3708      	adds	r7, #8
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40003800 	.word	0x40003800
 8006168:	40003400 	.word	0x40003400

0800616c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68d8      	ldr	r0, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617e:	1c99      	adds	r1, r3, #2
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006184:	b282      	uxth	r2, r0
 8006186:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800618c:	b29b      	uxth	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d113      	bne.n	80061c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80061ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7ff ff4a 	bl	800605c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061c8:	bf00      	nop
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a20      	ldr	r2, [pc, #128]	@ (8006260 <I2SEx_RxISR_I2SExt+0x90>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d101      	bne.n	80061e6 <I2SEx_RxISR_I2SExt+0x16>
 80061e2:	4b20      	ldr	r3, [pc, #128]	@ (8006264 <I2SEx_RxISR_I2SExt+0x94>)
 80061e4:	e001      	b.n	80061ea <I2SEx_RxISR_I2SExt+0x1a>
 80061e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80061ea:	68d8      	ldr	r0, [r3, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f0:	1c99      	adds	r1, r3, #2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80061f6:	b282      	uxth	r2, r0
 80061f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d121      	bne.n	8006256 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a12      	ldr	r2, [pc, #72]	@ (8006260 <I2SEx_RxISR_I2SExt+0x90>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d101      	bne.n	8006220 <I2SEx_RxISR_I2SExt+0x50>
 800621c:	4b11      	ldr	r3, [pc, #68]	@ (8006264 <I2SEx_RxISR_I2SExt+0x94>)
 800621e:	e001      	b.n	8006224 <I2SEx_RxISR_I2SExt+0x54>
 8006220:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	490d      	ldr	r1, [pc, #52]	@ (8006260 <I2SEx_RxISR_I2SExt+0x90>)
 800622c:	428b      	cmp	r3, r1
 800622e:	d101      	bne.n	8006234 <I2SEx_RxISR_I2SExt+0x64>
 8006230:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <I2SEx_RxISR_I2SExt+0x94>)
 8006232:	e001      	b.n	8006238 <I2SEx_RxISR_I2SExt+0x68>
 8006234:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006238:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800623c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006242:	b29b      	uxth	r3, r3
 8006244:	2b00      	cmp	r3, #0
 8006246:	d106      	bne.n	8006256 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff ff03 	bl	800605c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40003800 	.word	0x40003800
 8006264:	40003400 	.word	0x40003400

08006268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b086      	sub	sp, #24
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e267      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d075      	beq.n	8006372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006286:	4b88      	ldr	r3, [pc, #544]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
 800628e:	2b04      	cmp	r3, #4
 8006290:	d00c      	beq.n	80062ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006292:	4b85      	ldr	r3, [pc, #532]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800629a:	2b08      	cmp	r3, #8
 800629c:	d112      	bne.n	80062c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800629e:	4b82      	ldr	r3, [pc, #520]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062aa:	d10b      	bne.n	80062c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ac:	4b7e      	ldr	r3, [pc, #504]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d05b      	beq.n	8006370 <HAL_RCC_OscConfig+0x108>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d157      	bne.n	8006370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e242      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062cc:	d106      	bne.n	80062dc <HAL_RCC_OscConfig+0x74>
 80062ce:	4b76      	ldr	r3, [pc, #472]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a75      	ldr	r2, [pc, #468]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	e01d      	b.n	8006318 <HAL_RCC_OscConfig+0xb0>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x98>
 80062e6:	4b70      	ldr	r3, [pc, #448]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a6f      	ldr	r2, [pc, #444]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	4b6d      	ldr	r3, [pc, #436]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a6c      	ldr	r2, [pc, #432]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	e00b      	b.n	8006318 <HAL_RCC_OscConfig+0xb0>
 8006300:	4b69      	ldr	r3, [pc, #420]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a68      	ldr	r2, [pc, #416]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	4b66      	ldr	r3, [pc, #408]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a65      	ldr	r2, [pc, #404]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d013      	beq.n	8006348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006320:	f7fc fd92 	bl	8002e48 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006328:	f7fc fd8e 	bl	8002e48 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b64      	cmp	r3, #100	@ 0x64
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e207      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633a:	4b5b      	ldr	r3, [pc, #364]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d0f0      	beq.n	8006328 <HAL_RCC_OscConfig+0xc0>
 8006346:	e014      	b.n	8006372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006348:	f7fc fd7e 	bl	8002e48 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006350:	f7fc fd7a 	bl	8002e48 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b64      	cmp	r3, #100	@ 0x64
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e1f3      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006362:	4b51      	ldr	r3, [pc, #324]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1f0      	bne.n	8006350 <HAL_RCC_OscConfig+0xe8>
 800636e:	e000      	b.n	8006372 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d063      	beq.n	8006446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800637e:	4b4a      	ldr	r3, [pc, #296]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f003 030c 	and.w	r3, r3, #12
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800638a:	4b47      	ldr	r3, [pc, #284]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006392:	2b08      	cmp	r3, #8
 8006394:	d11c      	bne.n	80063d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006396:	4b44      	ldr	r3, [pc, #272]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d116      	bne.n	80063d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a2:	4b41      	ldr	r3, [pc, #260]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <HAL_RCC_OscConfig+0x152>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d001      	beq.n	80063ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e1c7      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063ba:	4b3b      	ldr	r3, [pc, #236]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	00db      	lsls	r3, r3, #3
 80063c8:	4937      	ldr	r1, [pc, #220]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063ce:	e03a      	b.n	8006446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d020      	beq.n	800641a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063d8:	4b34      	ldr	r3, [pc, #208]	@ (80064ac <HAL_RCC_OscConfig+0x244>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063de:	f7fc fd33 	bl	8002e48 <HAL_GetTick>
 80063e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063e6:	f7fc fd2f 	bl	8002e48 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e1a8      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063f8:	4b2b      	ldr	r3, [pc, #172]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006404:	4b28      	ldr	r3, [pc, #160]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	00db      	lsls	r3, r3, #3
 8006412:	4925      	ldr	r1, [pc, #148]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 8006414:	4313      	orrs	r3, r2
 8006416:	600b      	str	r3, [r1, #0]
 8006418:	e015      	b.n	8006446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800641a:	4b24      	ldr	r3, [pc, #144]	@ (80064ac <HAL_RCC_OscConfig+0x244>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006420:	f7fc fd12 	bl	8002e48 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006428:	f7fc fd0e 	bl	8002e48 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e187      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643a:	4b1b      	ldr	r3, [pc, #108]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0302 	and.w	r3, r3, #2
 8006442:	2b00      	cmp	r3, #0
 8006444:	d1f0      	bne.n	8006428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 0308 	and.w	r3, r3, #8
 800644e:	2b00      	cmp	r3, #0
 8006450:	d036      	beq.n	80064c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d016      	beq.n	8006488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800645a:	4b15      	ldr	r3, [pc, #84]	@ (80064b0 <HAL_RCC_OscConfig+0x248>)
 800645c:	2201      	movs	r2, #1
 800645e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006460:	f7fc fcf2 	bl	8002e48 <HAL_GetTick>
 8006464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006466:	e008      	b.n	800647a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006468:	f7fc fcee 	bl	8002e48 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b02      	cmp	r3, #2
 8006474:	d901      	bls.n	800647a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e167      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647a:	4b0b      	ldr	r3, [pc, #44]	@ (80064a8 <HAL_RCC_OscConfig+0x240>)
 800647c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800647e:	f003 0302 	and.w	r3, r3, #2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d0f0      	beq.n	8006468 <HAL_RCC_OscConfig+0x200>
 8006486:	e01b      	b.n	80064c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006488:	4b09      	ldr	r3, [pc, #36]	@ (80064b0 <HAL_RCC_OscConfig+0x248>)
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800648e:	f7fc fcdb 	bl	8002e48 <HAL_GetTick>
 8006492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006494:	e00e      	b.n	80064b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006496:	f7fc fcd7 	bl	8002e48 <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	d907      	bls.n	80064b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e150      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
 80064a8:	40023800 	.word	0x40023800
 80064ac:	42470000 	.word	0x42470000
 80064b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b4:	4b88      	ldr	r3, [pc, #544]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1ea      	bne.n	8006496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 8097 	beq.w	80065fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064d2:	4b81      	ldr	r3, [pc, #516]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10f      	bne.n	80064fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]
 80064e2:	4b7d      	ldr	r3, [pc, #500]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e6:	4a7c      	ldr	r2, [pc, #496]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80064ee:	4b7a      	ldr	r3, [pc, #488]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80064f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064f6:	60bb      	str	r3, [r7, #8]
 80064f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064fa:	2301      	movs	r3, #1
 80064fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064fe:	4b77      	ldr	r3, [pc, #476]	@ (80066dc <HAL_RCC_OscConfig+0x474>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006506:	2b00      	cmp	r3, #0
 8006508:	d118      	bne.n	800653c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800650a:	4b74      	ldr	r3, [pc, #464]	@ (80066dc <HAL_RCC_OscConfig+0x474>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a73      	ldr	r2, [pc, #460]	@ (80066dc <HAL_RCC_OscConfig+0x474>)
 8006510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006516:	f7fc fc97 	bl	8002e48 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800651e:	f7fc fc93 	bl	8002e48 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e10c      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006530:	4b6a      	ldr	r3, [pc, #424]	@ (80066dc <HAL_RCC_OscConfig+0x474>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d0f0      	beq.n	800651e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d106      	bne.n	8006552 <HAL_RCC_OscConfig+0x2ea>
 8006544:	4b64      	ldr	r3, [pc, #400]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006548:	4a63      	ldr	r2, [pc, #396]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006550:	e01c      	b.n	800658c <HAL_RCC_OscConfig+0x324>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	2b05      	cmp	r3, #5
 8006558:	d10c      	bne.n	8006574 <HAL_RCC_OscConfig+0x30c>
 800655a:	4b5f      	ldr	r3, [pc, #380]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 800655c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800655e:	4a5e      	ldr	r2, [pc, #376]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006560:	f043 0304 	orr.w	r3, r3, #4
 8006564:	6713      	str	r3, [r2, #112]	@ 0x70
 8006566:	4b5c      	ldr	r3, [pc, #368]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656a:	4a5b      	ldr	r2, [pc, #364]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	6713      	str	r3, [r2, #112]	@ 0x70
 8006572:	e00b      	b.n	800658c <HAL_RCC_OscConfig+0x324>
 8006574:	4b58      	ldr	r3, [pc, #352]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006578:	4a57      	ldr	r2, [pc, #348]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 800657a:	f023 0301 	bic.w	r3, r3, #1
 800657e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006580:	4b55      	ldr	r3, [pc, #340]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006584:	4a54      	ldr	r2, [pc, #336]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006586:	f023 0304 	bic.w	r3, r3, #4
 800658a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d015      	beq.n	80065c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006594:	f7fc fc58 	bl	8002e48 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659a:	e00a      	b.n	80065b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800659c:	f7fc fc54 	bl	8002e48 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e0cb      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b2:	4b49      	ldr	r3, [pc, #292]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80065b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d0ee      	beq.n	800659c <HAL_RCC_OscConfig+0x334>
 80065be:	e014      	b.n	80065ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c0:	f7fc fc42 	bl	8002e48 <HAL_GetTick>
 80065c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065c6:	e00a      	b.n	80065de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065c8:	f7fc fc3e 	bl	8002e48 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e0b5      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065de:	4b3e      	ldr	r3, [pc, #248]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80065e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1ee      	bne.n	80065c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d105      	bne.n	80065fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065f0:	4b39      	ldr	r3, [pc, #228]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	4a38      	ldr	r2, [pc, #224]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80065f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 80a1 	beq.w	8006748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006606:	4b34      	ldr	r3, [pc, #208]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 030c 	and.w	r3, r3, #12
 800660e:	2b08      	cmp	r3, #8
 8006610:	d05c      	beq.n	80066cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d141      	bne.n	800669e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661a:	4b31      	ldr	r3, [pc, #196]	@ (80066e0 <HAL_RCC_OscConfig+0x478>)
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006620:	f7fc fc12 	bl	8002e48 <HAL_GetTick>
 8006624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006626:	e008      	b.n	800663a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006628:	f7fc fc0e 	bl	8002e48 <HAL_GetTick>
 800662c:	4602      	mov	r2, r0
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	2b02      	cmp	r3, #2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e087      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663a:	4b27      	ldr	r3, [pc, #156]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1f0      	bne.n	8006628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69da      	ldr	r2, [r3, #28]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	019b      	lsls	r3, r3, #6
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665c:	085b      	lsrs	r3, r3, #1
 800665e:	3b01      	subs	r3, #1
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	431a      	orrs	r2, r3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006668:	061b      	lsls	r3, r3, #24
 800666a:	491b      	ldr	r1, [pc, #108]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 800666c:	4313      	orrs	r3, r2
 800666e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006670:	4b1b      	ldr	r3, [pc, #108]	@ (80066e0 <HAL_RCC_OscConfig+0x478>)
 8006672:	2201      	movs	r2, #1
 8006674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006676:	f7fc fbe7 	bl	8002e48 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800667e:	f7fc fbe3 	bl	8002e48 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e05c      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006690:	4b11      	ldr	r3, [pc, #68]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0f0      	beq.n	800667e <HAL_RCC_OscConfig+0x416>
 800669c:	e054      	b.n	8006748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800669e:	4b10      	ldr	r3, [pc, #64]	@ (80066e0 <HAL_RCC_OscConfig+0x478>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a4:	f7fc fbd0 	bl	8002e48 <HAL_GetTick>
 80066a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ac:	f7fc fbcc 	bl	8002e48 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e045      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066be:	4b06      	ldr	r3, [pc, #24]	@ (80066d8 <HAL_RCC_OscConfig+0x470>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d1f0      	bne.n	80066ac <HAL_RCC_OscConfig+0x444>
 80066ca:	e03d      	b.n	8006748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d107      	bne.n	80066e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e038      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
 80066d8:	40023800 	.word	0x40023800
 80066dc:	40007000 	.word	0x40007000
 80066e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006754 <HAL_RCC_OscConfig+0x4ec>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d028      	beq.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d121      	bne.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670a:	429a      	cmp	r2, r3
 800670c:	d11a      	bne.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800671a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800671c:	4293      	cmp	r3, r2
 800671e:	d111      	bne.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	3b01      	subs	r3, #1
 800672e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006730:	429a      	cmp	r2, r3
 8006732:	d107      	bne.n	8006744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006740:	429a      	cmp	r2, r3
 8006742:	d001      	beq.n	8006748 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e000      	b.n	800674a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40023800 	.word	0x40023800

08006758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e0cc      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800676c:	4b68      	ldr	r3, [pc, #416]	@ (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	683a      	ldr	r2, [r7, #0]
 8006776:	429a      	cmp	r2, r3
 8006778:	d90c      	bls.n	8006794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677a:	4b65      	ldr	r3, [pc, #404]	@ (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006782:	4b63      	ldr	r3, [pc, #396]	@ (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	429a      	cmp	r2, r3
 800678e:	d001      	beq.n	8006794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e0b8      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d020      	beq.n	80067e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067ac:	4b59      	ldr	r3, [pc, #356]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	4a58      	ldr	r2, [pc, #352]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80067b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067c4:	4b53      	ldr	r3, [pc, #332]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	4a52      	ldr	r2, [pc, #328]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d0:	4b50      	ldr	r3, [pc, #320]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	494d      	ldr	r1, [pc, #308]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d044      	beq.n	8006878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d107      	bne.n	8006806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067f6:	4b47      	ldr	r3, [pc, #284]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d119      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e07f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d003      	beq.n	8006816 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006812:	2b03      	cmp	r3, #3
 8006814:	d107      	bne.n	8006826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006816:	4b3f      	ldr	r3, [pc, #252]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e06f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006826:	4b3b      	ldr	r3, [pc, #236]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e067      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006836:	4b37      	ldr	r3, [pc, #220]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f023 0203 	bic.w	r2, r3, #3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4934      	ldr	r1, [pc, #208]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006844:	4313      	orrs	r3, r2
 8006846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006848:	f7fc fafe 	bl	8002e48 <HAL_GetTick>
 800684c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684e:	e00a      	b.n	8006866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006850:	f7fc fafa 	bl	8002e48 <HAL_GetTick>
 8006854:	4602      	mov	r2, r0
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800685e:	4293      	cmp	r3, r2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e04f      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006866:	4b2b      	ldr	r3, [pc, #172]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f003 020c 	and.w	r2, r3, #12
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	429a      	cmp	r2, r3
 8006876:	d1eb      	bne.n	8006850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006878:	4b25      	ldr	r3, [pc, #148]	@ (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	683a      	ldr	r2, [r7, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d20c      	bcs.n	80068a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006886:	4b22      	ldr	r3, [pc, #136]	@ (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800688e:	4b20      	ldr	r3, [pc, #128]	@ (8006910 <HAL_RCC_ClockConfig+0x1b8>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d001      	beq.n	80068a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e032      	b.n	8006906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d008      	beq.n	80068be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068ac:	4b19      	ldr	r3, [pc, #100]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4916      	ldr	r1, [pc, #88]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0308 	and.w	r3, r3, #8
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ca:	4b12      	ldr	r3, [pc, #72]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	490e      	ldr	r1, [pc, #56]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80068de:	f000 f821 	bl	8006924 <HAL_RCC_GetSysClockFreq>
 80068e2:	4602      	mov	r2, r0
 80068e4:	4b0b      	ldr	r3, [pc, #44]	@ (8006914 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	f003 030f 	and.w	r3, r3, #15
 80068ee:	490a      	ldr	r1, [pc, #40]	@ (8006918 <HAL_RCC_ClockConfig+0x1c0>)
 80068f0:	5ccb      	ldrb	r3, [r1, r3]
 80068f2:	fa22 f303 	lsr.w	r3, r2, r3
 80068f6:	4a09      	ldr	r2, [pc, #36]	@ (800691c <HAL_RCC_ClockConfig+0x1c4>)
 80068f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80068fa:	4b09      	ldr	r3, [pc, #36]	@ (8006920 <HAL_RCC_ClockConfig+0x1c8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7fc fa5e 	bl	8002dc0 <HAL_InitTick>

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40023c00 	.word	0x40023c00
 8006914:	40023800 	.word	0x40023800
 8006918:	0800c778 	.word	0x0800c778
 800691c:	20000000 	.word	0x20000000
 8006920:	20000004 	.word	0x20000004

08006924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006928:	b094      	sub	sp, #80	@ 0x50
 800692a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006934:	2300      	movs	r3, #0
 8006936:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800693c:	4b79      	ldr	r3, [pc, #484]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	f003 030c 	and.w	r3, r3, #12
 8006944:	2b08      	cmp	r3, #8
 8006946:	d00d      	beq.n	8006964 <HAL_RCC_GetSysClockFreq+0x40>
 8006948:	2b08      	cmp	r3, #8
 800694a:	f200 80e1 	bhi.w	8006b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_RCC_GetSysClockFreq+0x34>
 8006952:	2b04      	cmp	r3, #4
 8006954:	d003      	beq.n	800695e <HAL_RCC_GetSysClockFreq+0x3a>
 8006956:	e0db      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006958:	4b73      	ldr	r3, [pc, #460]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800695a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800695c:	e0db      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800695e:	4b73      	ldr	r3, [pc, #460]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8006960:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006962:	e0d8      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006964:	4b6f      	ldr	r3, [pc, #444]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800696c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800696e:	4b6d      	ldr	r3, [pc, #436]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d063      	beq.n	8006a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800697a:	4b6a      	ldr	r3, [pc, #424]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	099b      	lsrs	r3, r3, #6
 8006980:	2200      	movs	r2, #0
 8006982:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006984:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698c:	633b      	str	r3, [r7, #48]	@ 0x30
 800698e:	2300      	movs	r3, #0
 8006990:	637b      	str	r3, [r7, #52]	@ 0x34
 8006992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006996:	4622      	mov	r2, r4
 8006998:	462b      	mov	r3, r5
 800699a:	f04f 0000 	mov.w	r0, #0
 800699e:	f04f 0100 	mov.w	r1, #0
 80069a2:	0159      	lsls	r1, r3, #5
 80069a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069a8:	0150      	lsls	r0, r2, #5
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4621      	mov	r1, r4
 80069b0:	1a51      	subs	r1, r2, r1
 80069b2:	6139      	str	r1, [r7, #16]
 80069b4:	4629      	mov	r1, r5
 80069b6:	eb63 0301 	sbc.w	r3, r3, r1
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069c8:	4659      	mov	r1, fp
 80069ca:	018b      	lsls	r3, r1, #6
 80069cc:	4651      	mov	r1, sl
 80069ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80069d2:	4651      	mov	r1, sl
 80069d4:	018a      	lsls	r2, r1, #6
 80069d6:	4651      	mov	r1, sl
 80069d8:	ebb2 0801 	subs.w	r8, r2, r1
 80069dc:	4659      	mov	r1, fp
 80069de:	eb63 0901 	sbc.w	r9, r3, r1
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	f04f 0300 	mov.w	r3, #0
 80069ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069f6:	4690      	mov	r8, r2
 80069f8:	4699      	mov	r9, r3
 80069fa:	4623      	mov	r3, r4
 80069fc:	eb18 0303 	adds.w	r3, r8, r3
 8006a00:	60bb      	str	r3, [r7, #8]
 8006a02:	462b      	mov	r3, r5
 8006a04:	eb49 0303 	adc.w	r3, r9, r3
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	f04f 0200 	mov.w	r2, #0
 8006a0e:	f04f 0300 	mov.w	r3, #0
 8006a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a16:	4629      	mov	r1, r5
 8006a18:	024b      	lsls	r3, r1, #9
 8006a1a:	4621      	mov	r1, r4
 8006a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a20:	4621      	mov	r1, r4
 8006a22:	024a      	lsls	r2, r1, #9
 8006a24:	4610      	mov	r0, r2
 8006a26:	4619      	mov	r1, r3
 8006a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a34:	f7f9 fc1c 	bl	8000270 <__aeabi_uldivmod>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a40:	e058      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a42:	4b38      	ldr	r3, [pc, #224]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	099b      	lsrs	r3, r3, #6
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006a52:	623b      	str	r3, [r7, #32]
 8006a54:	2300      	movs	r3, #0
 8006a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006a5c:	4642      	mov	r2, r8
 8006a5e:	464b      	mov	r3, r9
 8006a60:	f04f 0000 	mov.w	r0, #0
 8006a64:	f04f 0100 	mov.w	r1, #0
 8006a68:	0159      	lsls	r1, r3, #5
 8006a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a6e:	0150      	lsls	r0, r2, #5
 8006a70:	4602      	mov	r2, r0
 8006a72:	460b      	mov	r3, r1
 8006a74:	4641      	mov	r1, r8
 8006a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a80:	f04f 0200 	mov.w	r2, #0
 8006a84:	f04f 0300 	mov.w	r3, #0
 8006a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a94:	ebb2 040a 	subs.w	r4, r2, sl
 8006a98:	eb63 050b 	sbc.w	r5, r3, fp
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	00eb      	lsls	r3, r5, #3
 8006aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aaa:	00e2      	lsls	r2, r4, #3
 8006aac:	4614      	mov	r4, r2
 8006aae:	461d      	mov	r5, r3
 8006ab0:	4643      	mov	r3, r8
 8006ab2:	18e3      	adds	r3, r4, r3
 8006ab4:	603b      	str	r3, [r7, #0]
 8006ab6:	464b      	mov	r3, r9
 8006ab8:	eb45 0303 	adc.w	r3, r5, r3
 8006abc:	607b      	str	r3, [r7, #4]
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aca:	4629      	mov	r1, r5
 8006acc:	028b      	lsls	r3, r1, #10
 8006ace:	4621      	mov	r1, r4
 8006ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	028a      	lsls	r2, r1, #10
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4619      	mov	r1, r3
 8006adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ade:	2200      	movs	r2, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	61fa      	str	r2, [r7, #28]
 8006ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ae8:	f7f9 fbc2 	bl	8000270 <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4613      	mov	r3, r2
 8006af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006af4:	4b0b      	ldr	r3, [pc, #44]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	3301      	adds	r3, #1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b10:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3750      	adds	r7, #80	@ 0x50
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b22:	bf00      	nop
 8006b24:	40023800 	.word	0x40023800
 8006b28:	00f42400 	.word	0x00f42400
 8006b2c:	007a1200 	.word	0x007a1200

08006b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b34:	4b03      	ldr	r3, [pc, #12]	@ (8006b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b36:	681b      	ldr	r3, [r3, #0]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000000 	.word	0x20000000

08006b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b4c:	f7ff fff0 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b50:	4602      	mov	r2, r0
 8006b52:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	0a9b      	lsrs	r3, r3, #10
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	4903      	ldr	r1, [pc, #12]	@ (8006b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b5e:	5ccb      	ldrb	r3, [r1, r3]
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	0800c788 	.word	0x0800c788

08006b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b74:	f7ff ffdc 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	0b5b      	lsrs	r3, r3, #13
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	4903      	ldr	r1, [pc, #12]	@ (8006b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b86:	5ccb      	ldrb	r3, [r1, r3]
 8006b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40023800 	.word	0x40023800
 8006b94:	0800c788 	.word	0x0800c788

08006b98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d035      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006bc0:	4b62      	ldr	r3, [pc, #392]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006bc6:	f7fc f93f 	bl	8002e48 <HAL_GetTick>
 8006bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006bce:	f7fc f93b 	bl	8002e48 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e0b0      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006be0:	4b5b      	ldr	r3, [pc, #364]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f0      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	019a      	lsls	r2, r3, #6
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	071b      	lsls	r3, r3, #28
 8006bf8:	4955      	ldr	r1, [pc, #340]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006c00:	4b52      	ldr	r3, [pc, #328]	@ (8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006c02:	2201      	movs	r2, #1
 8006c04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c06:	f7fc f91f 	bl	8002e48 <HAL_GetTick>
 8006c0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c0c:	e008      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006c0e:	f7fc f91b 	bl	8002e48 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d901      	bls.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e090      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006c20:	4b4b      	ldr	r3, [pc, #300]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0f0      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8083 	beq.w	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]
 8006c3e:	4b44      	ldr	r3, [pc, #272]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c42:	4a43      	ldr	r2, [pc, #268]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8006c4a:	4b41      	ldr	r3, [pc, #260]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c56:	4b3f      	ldr	r3, [pc, #252]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c62:	f7fc f8f1 	bl	8002e48 <HAL_GetTick>
 8006c66:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c68:	e008      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c6a:	f7fc f8ed 	bl	8002e48 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d901      	bls.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e062      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006c7c:	4b35      	ldr	r3, [pc, #212]	@ (8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d0f0      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c88:	4b31      	ldr	r3, [pc, #196]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c90:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d02f      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d028      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006caa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006cb0:	4b29      	ldr	r3, [pc, #164]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cb6:	4b28      	ldr	r3, [pc, #160]	@ (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cbc:	4a24      	ldr	r2, [pc, #144]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cc2:	4b23      	ldr	r3, [pc, #140]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d114      	bne.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cce:	f7fc f8bb 	bl	8002e48 <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd4:	e00a      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cd6:	f7fc f8b7 	bl	8002e48 <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d901      	bls.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e02a      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	4b18      	ldr	r3, [pc, #96]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d0ee      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d04:	d10d      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006d06:	4b12      	ldr	r3, [pc, #72]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d1a:	490d      	ldr	r1, [pc, #52]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	608b      	str	r3, [r1, #8]
 8006d20:	e005      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d22:	4b0b      	ldr	r3, [pc, #44]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4a0a      	ldr	r2, [pc, #40]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d28:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006d2c:	6093      	str	r3, [r2, #8]
 8006d2e:	4b08      	ldr	r3, [pc, #32]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d30:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d3a:	4905      	ldr	r1, [pc, #20]	@ (8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	42470068 	.word	0x42470068
 8006d50:	40023800 	.word	0x40023800
 8006d54:	40007000 	.word	0x40007000
 8006d58:	42470e40 	.word	0x42470e40

08006d5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d13f      	bne.n	8006dfa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d7a:	4b24      	ldr	r3, [pc, #144]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d82:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d006      	beq.n	8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d90:	d12f      	bne.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d92:	4b1f      	ldr	r3, [pc, #124]	@ (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d94:	617b      	str	r3, [r7, #20]
          break;
 8006d96:	e02f      	b.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d98:	4b1c      	ldr	r3, [pc, #112]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006da0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006da4:	d108      	bne.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006da6:	4b19      	ldr	r3, [pc, #100]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dae:	4a19      	ldr	r2, [pc, #100]	@ (8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	613b      	str	r3, [r7, #16]
 8006db6:	e007      	b.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006db8:	4b14      	ldr	r3, [pc, #80]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dc0:	4a15      	ldr	r2, [pc, #84]	@ (8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006dc8:	4b10      	ldr	r3, [pc, #64]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006dce:	099b      	lsrs	r3, r3, #6
 8006dd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006dde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006de2:	0f1b      	lsrs	r3, r3, #28
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dee:	617b      	str	r3, [r7, #20]
          break;
 8006df0:	e002      	b.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	617b      	str	r3, [r7, #20]
          break;
 8006df6:	bf00      	nop
        }
      }
      break;
 8006df8:	e000      	b.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006dfa:	bf00      	nop
    }
  }
  return frequency;
 8006dfc:	697b      	ldr	r3, [r7, #20]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	40023800 	.word	0x40023800
 8006e10:	00bb8000 	.word	0x00bb8000
 8006e14:	007a1200 	.word	0x007a1200
 8006e18:	00f42400 	.word	0x00f42400

08006e1c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e01c      	b.n	8006e68 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	795b      	ldrb	r3, [r3, #5]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7fb fdec 	bl	8002a1c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0204 	orr.w	r2, r2, #4
 8006e58:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	791b      	ldrb	r3, [r3, #4]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <HAL_RNG_GenerateRandomNumber+0x1a>
 8006e86:	2302      	movs	r3, #2
 8006e88:	e044      	b.n	8006f14 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	795b      	ldrb	r3, [r3, #5]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d133      	bne.n	8006f02 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ea0:	f7fb ffd2 	bl	8002e48 <HAL_GetTick>
 8006ea4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006ea6:	e018      	b.n	8006eda <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006ea8:	f7fb ffce 	bl	8002e48 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d911      	bls.n	8006eda <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	f003 0301 	and.w	r3, r3, #1
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d00a      	beq.n	8006eda <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e01c      	b.n	8006f14 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d1df      	bne.n	8006ea8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689a      	ldr	r2, [r3, #8]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	715a      	strb	r2, [r3, #5]
 8006f00:	e004      	b.n	8006f0c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2204      	movs	r2, #4
 8006f06:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	711a      	strb	r2, [r3, #4]

  return status;
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e07b      	b.n	8007026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d108      	bne.n	8006f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f3e:	d009      	beq.n	8006f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	61da      	str	r2, [r3, #28]
 8006f46:	e005      	b.n	8006f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d106      	bne.n	8006f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7fb fd76 	bl	8002a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2202      	movs	r2, #2
 8006f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	f003 0302 	and.w	r3, r3, #2
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	695b      	ldr	r3, [r3, #20]
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	69db      	ldr	r3, [r3, #28]
 8006fca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd8:	ea42 0103 	orr.w	r1, r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	f003 0104 	and.w	r1, r3, #4
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffa:	f003 0210 	and.w	r2, r3, #16
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69da      	ldr	r2, [r3, #28]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e042      	b.n	80070c6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d106      	bne.n	800705a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fb fd4b 	bl	8002af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2224      	movs	r2, #36	@ 0x24
 800705e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	68da      	ldr	r2, [r3, #12]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007070:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f972 	bl	800735c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691a      	ldr	r2, [r3, #16]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007086:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695a      	ldr	r2, [r3, #20]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007096:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2220      	movs	r2, #32
 80070b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b08a      	sub	sp, #40	@ 0x28
 80070d2:	af02      	add	r7, sp, #8
 80070d4:	60f8      	str	r0, [r7, #12]
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	603b      	str	r3, [r7, #0]
 80070da:	4613      	mov	r3, r2
 80070dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	2b20      	cmp	r3, #32
 80070ec:	d175      	bne.n	80071da <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <HAL_UART_Transmit+0x2c>
 80070f4:	88fb      	ldrh	r3, [r7, #6]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e06e      	b.n	80071dc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2221      	movs	r2, #33	@ 0x21
 8007108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800710c:	f7fb fe9c 	bl	8002e48 <HAL_GetTick>
 8007110:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	88fa      	ldrh	r2, [r7, #6]
 8007116:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007126:	d108      	bne.n	800713a <HAL_UART_Transmit+0x6c>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007130:	2300      	movs	r3, #0
 8007132:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	61bb      	str	r3, [r7, #24]
 8007138:	e003      	b.n	8007142 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800713e:	2300      	movs	r3, #0
 8007140:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007142:	e02e      	b.n	80071a2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	2200      	movs	r2, #0
 800714c:	2180      	movs	r1, #128	@ 0x80
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f000 f848 	bl	80071e4 <UART_WaitOnFlagUntilTimeout>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d005      	beq.n	8007166 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2220      	movs	r2, #32
 800715e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e03a      	b.n	80071dc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10b      	bne.n	8007184 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	461a      	mov	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800717a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	3302      	adds	r3, #2
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	e007      	b.n	8007194 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	781a      	ldrb	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	3301      	adds	r3, #1
 8007192:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29a      	uxth	r2, r3
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1cb      	bne.n	8007144 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	2200      	movs	r2, #0
 80071b4:	2140      	movs	r1, #64	@ 0x40
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f000 f814 	bl	80071e4 <UART_WaitOnFlagUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d005      	beq.n	80071ce <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2220      	movs	r2, #32
 80071c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e006      	b.n	80071dc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e000      	b.n	80071dc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80071da:	2302      	movs	r3, #2
  }
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	4613      	mov	r3, r2
 80071f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071f4:	e03b      	b.n	800726e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fc:	d037      	beq.n	800726e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fe:	f7fb fe23 	bl	8002e48 <HAL_GetTick>
 8007202:	4602      	mov	r2, r0
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	6a3a      	ldr	r2, [r7, #32]
 800720a:	429a      	cmp	r2, r3
 800720c:	d302      	bcc.n	8007214 <UART_WaitOnFlagUntilTimeout+0x30>
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d101      	bne.n	8007218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e03a      	b.n	800728e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	f003 0304 	and.w	r3, r3, #4
 8007222:	2b00      	cmp	r3, #0
 8007224:	d023      	beq.n	800726e <UART_WaitOnFlagUntilTimeout+0x8a>
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b80      	cmp	r3, #128	@ 0x80
 800722a:	d020      	beq.n	800726e <UART_WaitOnFlagUntilTimeout+0x8a>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b40      	cmp	r3, #64	@ 0x40
 8007230:	d01d      	beq.n	800726e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b08      	cmp	r3, #8
 800723e:	d116      	bne.n	800726e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007240:	2300      	movs	r3, #0
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	617b      	str	r3, [r7, #20]
 8007254:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 f81d 	bl	8007296 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2208      	movs	r2, #8
 8007260:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e00f      	b.n	800728e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	4013      	ands	r3, r2
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	429a      	cmp	r2, r3
 800727c:	bf0c      	ite	eq
 800727e:	2301      	moveq	r3, #1
 8007280:	2300      	movne	r3, #0
 8007282:	b2db      	uxtb	r3, r3
 8007284:	461a      	mov	r2, r3
 8007286:	79fb      	ldrb	r3, [r7, #7]
 8007288:	429a      	cmp	r2, r3
 800728a:	d0b4      	beq.n	80071f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007296:	b480      	push	{r7}
 8007298:	b095      	sub	sp, #84	@ 0x54
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072be:	643a      	str	r2, [r7, #64]	@ 0x40
 80072c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e5      	bne.n	800729e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3314      	adds	r3, #20
 80072d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072da:	6a3b      	ldr	r3, [r7, #32]
 80072dc:	e853 3f00 	ldrex	r3, [r3]
 80072e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	f023 0301 	bic.w	r3, r3, #1
 80072e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	3314      	adds	r3, #20
 80072f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072fa:	e841 2300 	strex	r3, r2, [r1]
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1e5      	bne.n	80072d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800730a:	2b01      	cmp	r3, #1
 800730c:	d119      	bne.n	8007342 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	e853 3f00 	ldrex	r3, [r3]
 800731c:	60bb      	str	r3, [r7, #8]
   return(result);
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f023 0310 	bic.w	r3, r3, #16
 8007324:	647b      	str	r3, [r7, #68]	@ 0x44
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800732e:	61ba      	str	r2, [r7, #24]
 8007330:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007332:	6979      	ldr	r1, [r7, #20]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	e841 2300 	strex	r3, r2, [r1]
 800733a:	613b      	str	r3, [r7, #16]
   return(result);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1e5      	bne.n	800730e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2220      	movs	r2, #32
 8007346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007350:	bf00      	nop
 8007352:	3754      	adds	r7, #84	@ 0x54
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800735c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007360:	b0c0      	sub	sp, #256	@ 0x100
 8007362:	af00      	add	r7, sp, #0
 8007364:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007378:	68d9      	ldr	r1, [r3, #12]
 800737a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	ea40 0301 	orr.w	r3, r0, r1
 8007384:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	431a      	orrs	r2, r3
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	431a      	orrs	r2, r3
 800739c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80073a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073b4:	f021 010c 	bic.w	r1, r1, #12
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073c2:	430b      	orrs	r3, r1
 80073c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	695b      	ldr	r3, [r3, #20]
 80073ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d6:	6999      	ldr	r1, [r3, #24]
 80073d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	ea40 0301 	orr.w	r3, r0, r1
 80073e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4b8f      	ldr	r3, [pc, #572]	@ (8007628 <UART_SetConfig+0x2cc>)
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d005      	beq.n	80073fc <UART_SetConfig+0xa0>
 80073f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	4b8d      	ldr	r3, [pc, #564]	@ (800762c <UART_SetConfig+0x2d0>)
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d104      	bne.n	8007406 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073fc:	f7ff fbb8 	bl	8006b70 <HAL_RCC_GetPCLK2Freq>
 8007400:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007404:	e003      	b.n	800740e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007406:	f7ff fb9f 	bl	8006b48 <HAL_RCC_GetPCLK1Freq>
 800740a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800740e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007418:	f040 810c 	bne.w	8007634 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800741c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007420:	2200      	movs	r2, #0
 8007422:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007426:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800742a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800742e:	4622      	mov	r2, r4
 8007430:	462b      	mov	r3, r5
 8007432:	1891      	adds	r1, r2, r2
 8007434:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007436:	415b      	adcs	r3, r3
 8007438:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800743a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800743e:	4621      	mov	r1, r4
 8007440:	eb12 0801 	adds.w	r8, r2, r1
 8007444:	4629      	mov	r1, r5
 8007446:	eb43 0901 	adc.w	r9, r3, r1
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	f04f 0300 	mov.w	r3, #0
 8007452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800745a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800745e:	4690      	mov	r8, r2
 8007460:	4699      	mov	r9, r3
 8007462:	4623      	mov	r3, r4
 8007464:	eb18 0303 	adds.w	r3, r8, r3
 8007468:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800746c:	462b      	mov	r3, r5
 800746e:	eb49 0303 	adc.w	r3, r9, r3
 8007472:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007482:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007486:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800748a:	460b      	mov	r3, r1
 800748c:	18db      	adds	r3, r3, r3
 800748e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007490:	4613      	mov	r3, r2
 8007492:	eb42 0303 	adc.w	r3, r2, r3
 8007496:	657b      	str	r3, [r7, #84]	@ 0x54
 8007498:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800749c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80074a0:	f7f8 fee6 	bl	8000270 <__aeabi_uldivmod>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4b61      	ldr	r3, [pc, #388]	@ (8007630 <UART_SetConfig+0x2d4>)
 80074aa:	fba3 2302 	umull	r2, r3, r3, r2
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	011c      	lsls	r4, r3, #4
 80074b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	1891      	adds	r1, r2, r2
 80074ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074cc:	415b      	adcs	r3, r3
 80074ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80074d4:	4641      	mov	r1, r8
 80074d6:	eb12 0a01 	adds.w	sl, r2, r1
 80074da:	4649      	mov	r1, r9
 80074dc:	eb43 0b01 	adc.w	fp, r3, r1
 80074e0:	f04f 0200 	mov.w	r2, #0
 80074e4:	f04f 0300 	mov.w	r3, #0
 80074e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074f4:	4692      	mov	sl, r2
 80074f6:	469b      	mov	fp, r3
 80074f8:	4643      	mov	r3, r8
 80074fa:	eb1a 0303 	adds.w	r3, sl, r3
 80074fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007502:	464b      	mov	r3, r9
 8007504:	eb4b 0303 	adc.w	r3, fp, r3
 8007508:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007518:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800751c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007520:	460b      	mov	r3, r1
 8007522:	18db      	adds	r3, r3, r3
 8007524:	643b      	str	r3, [r7, #64]	@ 0x40
 8007526:	4613      	mov	r3, r2
 8007528:	eb42 0303 	adc.w	r3, r2, r3
 800752c:	647b      	str	r3, [r7, #68]	@ 0x44
 800752e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007532:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007536:	f7f8 fe9b 	bl	8000270 <__aeabi_uldivmod>
 800753a:	4602      	mov	r2, r0
 800753c:	460b      	mov	r3, r1
 800753e:	4611      	mov	r1, r2
 8007540:	4b3b      	ldr	r3, [pc, #236]	@ (8007630 <UART_SetConfig+0x2d4>)
 8007542:	fba3 2301 	umull	r2, r3, r3, r1
 8007546:	095b      	lsrs	r3, r3, #5
 8007548:	2264      	movs	r2, #100	@ 0x64
 800754a:	fb02 f303 	mul.w	r3, r2, r3
 800754e:	1acb      	subs	r3, r1, r3
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007556:	4b36      	ldr	r3, [pc, #216]	@ (8007630 <UART_SetConfig+0x2d4>)
 8007558:	fba3 2302 	umull	r2, r3, r3, r2
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007564:	441c      	add	r4, r3
 8007566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800756a:	2200      	movs	r2, #0
 800756c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007570:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007574:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007578:	4642      	mov	r2, r8
 800757a:	464b      	mov	r3, r9
 800757c:	1891      	adds	r1, r2, r2
 800757e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007580:	415b      	adcs	r3, r3
 8007582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007588:	4641      	mov	r1, r8
 800758a:	1851      	adds	r1, r2, r1
 800758c:	6339      	str	r1, [r7, #48]	@ 0x30
 800758e:	4649      	mov	r1, r9
 8007590:	414b      	adcs	r3, r1
 8007592:	637b      	str	r3, [r7, #52]	@ 0x34
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80075a0:	4659      	mov	r1, fp
 80075a2:	00cb      	lsls	r3, r1, #3
 80075a4:	4651      	mov	r1, sl
 80075a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075aa:	4651      	mov	r1, sl
 80075ac:	00ca      	lsls	r2, r1, #3
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	4642      	mov	r2, r8
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075bc:	464b      	mov	r3, r9
 80075be:	460a      	mov	r2, r1
 80075c0:	eb42 0303 	adc.w	r3, r2, r3
 80075c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075dc:	460b      	mov	r3, r1
 80075de:	18db      	adds	r3, r3, r3
 80075e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075e2:	4613      	mov	r3, r2
 80075e4:	eb42 0303 	adc.w	r3, r2, r3
 80075e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80075f2:	f7f8 fe3d 	bl	8000270 <__aeabi_uldivmod>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007630 <UART_SetConfig+0x2d4>)
 80075fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	2164      	movs	r1, #100	@ 0x64
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	3332      	adds	r3, #50	@ 0x32
 800760e:	4a08      	ldr	r2, [pc, #32]	@ (8007630 <UART_SetConfig+0x2d4>)
 8007610:	fba2 2303 	umull	r2, r3, r2, r3
 8007614:	095b      	lsrs	r3, r3, #5
 8007616:	f003 0207 	and.w	r2, r3, #7
 800761a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4422      	add	r2, r4
 8007622:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007624:	e106      	b.n	8007834 <UART_SetConfig+0x4d8>
 8007626:	bf00      	nop
 8007628:	40011000 	.word	0x40011000
 800762c:	40011400 	.word	0x40011400
 8007630:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007638:	2200      	movs	r2, #0
 800763a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800763e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007642:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007646:	4642      	mov	r2, r8
 8007648:	464b      	mov	r3, r9
 800764a:	1891      	adds	r1, r2, r2
 800764c:	6239      	str	r1, [r7, #32]
 800764e:	415b      	adcs	r3, r3
 8007650:	627b      	str	r3, [r7, #36]	@ 0x24
 8007652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007656:	4641      	mov	r1, r8
 8007658:	1854      	adds	r4, r2, r1
 800765a:	4649      	mov	r1, r9
 800765c:	eb43 0501 	adc.w	r5, r3, r1
 8007660:	f04f 0200 	mov.w	r2, #0
 8007664:	f04f 0300 	mov.w	r3, #0
 8007668:	00eb      	lsls	r3, r5, #3
 800766a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800766e:	00e2      	lsls	r2, r4, #3
 8007670:	4614      	mov	r4, r2
 8007672:	461d      	mov	r5, r3
 8007674:	4643      	mov	r3, r8
 8007676:	18e3      	adds	r3, r4, r3
 8007678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800767c:	464b      	mov	r3, r9
 800767e:	eb45 0303 	adc.w	r3, r5, r3
 8007682:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007692:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007696:	f04f 0200 	mov.w	r2, #0
 800769a:	f04f 0300 	mov.w	r3, #0
 800769e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80076a2:	4629      	mov	r1, r5
 80076a4:	008b      	lsls	r3, r1, #2
 80076a6:	4621      	mov	r1, r4
 80076a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076ac:	4621      	mov	r1, r4
 80076ae:	008a      	lsls	r2, r1, #2
 80076b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076b4:	f7f8 fddc 	bl	8000270 <__aeabi_uldivmod>
 80076b8:	4602      	mov	r2, r0
 80076ba:	460b      	mov	r3, r1
 80076bc:	4b60      	ldr	r3, [pc, #384]	@ (8007840 <UART_SetConfig+0x4e4>)
 80076be:	fba3 2302 	umull	r2, r3, r3, r2
 80076c2:	095b      	lsrs	r3, r3, #5
 80076c4:	011c      	lsls	r4, r3, #4
 80076c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80076d8:	4642      	mov	r2, r8
 80076da:	464b      	mov	r3, r9
 80076dc:	1891      	adds	r1, r2, r2
 80076de:	61b9      	str	r1, [r7, #24]
 80076e0:	415b      	adcs	r3, r3
 80076e2:	61fb      	str	r3, [r7, #28]
 80076e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076e8:	4641      	mov	r1, r8
 80076ea:	1851      	adds	r1, r2, r1
 80076ec:	6139      	str	r1, [r7, #16]
 80076ee:	4649      	mov	r1, r9
 80076f0:	414b      	adcs	r3, r1
 80076f2:	617b      	str	r3, [r7, #20]
 80076f4:	f04f 0200 	mov.w	r2, #0
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007700:	4659      	mov	r1, fp
 8007702:	00cb      	lsls	r3, r1, #3
 8007704:	4651      	mov	r1, sl
 8007706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800770a:	4651      	mov	r1, sl
 800770c:	00ca      	lsls	r2, r1, #3
 800770e:	4610      	mov	r0, r2
 8007710:	4619      	mov	r1, r3
 8007712:	4603      	mov	r3, r0
 8007714:	4642      	mov	r2, r8
 8007716:	189b      	adds	r3, r3, r2
 8007718:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800771c:	464b      	mov	r3, r9
 800771e:	460a      	mov	r2, r1
 8007720:	eb42 0303 	adc.w	r3, r2, r3
 8007724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007732:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	f04f 0300 	mov.w	r3, #0
 800773c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007740:	4649      	mov	r1, r9
 8007742:	008b      	lsls	r3, r1, #2
 8007744:	4641      	mov	r1, r8
 8007746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800774a:	4641      	mov	r1, r8
 800774c:	008a      	lsls	r2, r1, #2
 800774e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007752:	f7f8 fd8d 	bl	8000270 <__aeabi_uldivmod>
 8007756:	4602      	mov	r2, r0
 8007758:	460b      	mov	r3, r1
 800775a:	4611      	mov	r1, r2
 800775c:	4b38      	ldr	r3, [pc, #224]	@ (8007840 <UART_SetConfig+0x4e4>)
 800775e:	fba3 2301 	umull	r2, r3, r3, r1
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	2264      	movs	r2, #100	@ 0x64
 8007766:	fb02 f303 	mul.w	r3, r2, r3
 800776a:	1acb      	subs	r3, r1, r3
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	3332      	adds	r3, #50	@ 0x32
 8007770:	4a33      	ldr	r2, [pc, #204]	@ (8007840 <UART_SetConfig+0x4e4>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800777c:	441c      	add	r4, r3
 800777e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007782:	2200      	movs	r2, #0
 8007784:	673b      	str	r3, [r7, #112]	@ 0x70
 8007786:	677a      	str	r2, [r7, #116]	@ 0x74
 8007788:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800778c:	4642      	mov	r2, r8
 800778e:	464b      	mov	r3, r9
 8007790:	1891      	adds	r1, r2, r2
 8007792:	60b9      	str	r1, [r7, #8]
 8007794:	415b      	adcs	r3, r3
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800779c:	4641      	mov	r1, r8
 800779e:	1851      	adds	r1, r2, r1
 80077a0:	6039      	str	r1, [r7, #0]
 80077a2:	4649      	mov	r1, r9
 80077a4:	414b      	adcs	r3, r1
 80077a6:	607b      	str	r3, [r7, #4]
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077b4:	4659      	mov	r1, fp
 80077b6:	00cb      	lsls	r3, r1, #3
 80077b8:	4651      	mov	r1, sl
 80077ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077be:	4651      	mov	r1, sl
 80077c0:	00ca      	lsls	r2, r1, #3
 80077c2:	4610      	mov	r0, r2
 80077c4:	4619      	mov	r1, r3
 80077c6:	4603      	mov	r3, r0
 80077c8:	4642      	mov	r2, r8
 80077ca:	189b      	adds	r3, r3, r2
 80077cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ce:	464b      	mov	r3, r9
 80077d0:	460a      	mov	r2, r1
 80077d2:	eb42 0303 	adc.w	r3, r2, r3
 80077d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80077e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80077e4:	f04f 0200 	mov.w	r2, #0
 80077e8:	f04f 0300 	mov.w	r3, #0
 80077ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80077f0:	4649      	mov	r1, r9
 80077f2:	008b      	lsls	r3, r1, #2
 80077f4:	4641      	mov	r1, r8
 80077f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077fa:	4641      	mov	r1, r8
 80077fc:	008a      	lsls	r2, r1, #2
 80077fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007802:	f7f8 fd35 	bl	8000270 <__aeabi_uldivmod>
 8007806:	4602      	mov	r2, r0
 8007808:	460b      	mov	r3, r1
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <UART_SetConfig+0x4e4>)
 800780c:	fba3 1302 	umull	r1, r3, r3, r2
 8007810:	095b      	lsrs	r3, r3, #5
 8007812:	2164      	movs	r1, #100	@ 0x64
 8007814:	fb01 f303 	mul.w	r3, r1, r3
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	011b      	lsls	r3, r3, #4
 800781c:	3332      	adds	r3, #50	@ 0x32
 800781e:	4a08      	ldr	r2, [pc, #32]	@ (8007840 <UART_SetConfig+0x4e4>)
 8007820:	fba2 2303 	umull	r2, r3, r2, r3
 8007824:	095b      	lsrs	r3, r3, #5
 8007826:	f003 020f 	and.w	r2, r3, #15
 800782a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4422      	add	r2, r4
 8007832:	609a      	str	r2, [r3, #8]
}
 8007834:	bf00      	nop
 8007836:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800783a:	46bd      	mov	sp, r7
 800783c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007840:	51eb851f 	.word	0x51eb851f

08007844 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007844:	b084      	sub	sp, #16
 8007846:	b580      	push	{r7, lr}
 8007848:	b084      	sub	sp, #16
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
 800784e:	f107 001c 	add.w	r0, r7, #28
 8007852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007856:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800785a:	2b01      	cmp	r3, #1
 800785c:	d123      	bne.n	80078a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007862:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007886:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800788a:	2b01      	cmp	r3, #1
 800788c:	d105      	bne.n	800789a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f9dc 	bl	8007c58 <USB_CoreReset>
 80078a0:	4603      	mov	r3, r0
 80078a2:	73fb      	strb	r3, [r7, #15]
 80078a4:	e01b      	b.n	80078de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9d0 	bl	8007c58 <USB_CoreReset>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d106      	bne.n	80078d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80078d0:	e005      	b.n	80078de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078de:	7fbb      	ldrb	r3, [r7, #30]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d10b      	bne.n	80078fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f043 0206 	orr.w	r2, r3, #6
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f043 0220 	orr.w	r2, r3, #32
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007908:	b004      	add	sp, #16
 800790a:	4770      	bx	lr

0800790c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f043 0201 	orr.w	r2, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f023 0201 	bic.w	r2, r3, #1
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68db      	ldr	r3, [r3, #12]
 8007964:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d115      	bne.n	800799e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800797e:	200a      	movs	r0, #10
 8007980:	f7fb fa6e 	bl	8002e60 <HAL_Delay>
      ms += 10U;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	330a      	adds	r3, #10
 8007988:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 f956 	bl	8007c3c <USB_GetMode>
 8007990:	4603      	mov	r3, r0
 8007992:	2b01      	cmp	r3, #1
 8007994:	d01e      	beq.n	80079d4 <USB_SetCurrentMode+0x84>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2bc7      	cmp	r3, #199	@ 0xc7
 800799a:	d9f0      	bls.n	800797e <USB_SetCurrentMode+0x2e>
 800799c:	e01a      	b.n	80079d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800799e:	78fb      	ldrb	r3, [r7, #3]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d115      	bne.n	80079d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80079b0:	200a      	movs	r0, #10
 80079b2:	f7fb fa55 	bl	8002e60 <HAL_Delay>
      ms += 10U;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	330a      	adds	r3, #10
 80079ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f93d 	bl	8007c3c <USB_GetMode>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <USB_SetCurrentMode+0x84>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80079cc:	d9f0      	bls.n	80079b0 <USB_SetCurrentMode+0x60>
 80079ce:	e001      	b.n	80079d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e005      	b.n	80079e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80079d8:	d101      	bne.n	80079de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079f2:	2300      	movs	r3, #0
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3301      	adds	r3, #1
 80079fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a02:	d901      	bls.n	8007a08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	e01b      	b.n	8007a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	daf2      	bge.n	80079f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	019b      	lsls	r3, r3, #6
 8007a18:	f043 0220 	orr.w	r2, r3, #32
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a2c:	d901      	bls.n	8007a32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e006      	b.n	8007a40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d0f0      	beq.n	8007a20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a64:	d901      	bls.n	8007a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e018      	b.n	8007a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	daf2      	bge.n	8007a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2210      	movs	r2, #16
 8007a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a88:	d901      	bls.n	8007a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e006      	b.n	8007a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0310 	and.w	r3, r3, #16
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d0f0      	beq.n	8007a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b089      	sub	sp, #36	@ 0x24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	71fb      	strb	r3, [r7, #7]
 8007aba:	4613      	mov	r3, r2
 8007abc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ac6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d123      	bne.n	8007b16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ace:	88bb      	ldrh	r3, [r7, #4]
 8007ad0:	3303      	adds	r3, #3
 8007ad2:	089b      	lsrs	r3, r3, #2
 8007ad4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61bb      	str	r3, [r7, #24]
 8007ada:	e018      	b.n	8007b0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007adc:	79fb      	ldrb	r3, [r7, #7]
 8007ade:	031a      	lsls	r2, r3, #12
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ae8:	461a      	mov	r2, r3
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	3301      	adds	r3, #1
 8007af4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	3301      	adds	r3, #1
 8007afa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	3301      	adds	r3, #1
 8007b00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	3301      	adds	r3, #1
 8007b06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d3e2      	bcc.n	8007adc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3724      	adds	r7, #36	@ 0x24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b08b      	sub	sp, #44	@ 0x2c
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	4613      	mov	r3, r2
 8007b30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b3a:	88fb      	ldrh	r3, [r7, #6]
 8007b3c:	089b      	lsrs	r3, r3, #2
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	f003 0303 	and.w	r3, r3, #3
 8007b48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	623b      	str	r3, [r7, #32]
 8007b4e:	e014      	b.n	8007b7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5e:	3301      	adds	r3, #1
 8007b60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b64:	3301      	adds	r3, #1
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b70:	3301      	adds	r3, #1
 8007b72:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b74:	6a3b      	ldr	r3, [r7, #32]
 8007b76:	3301      	adds	r3, #1
 8007b78:	623b      	str	r3, [r7, #32]
 8007b7a:	6a3a      	ldr	r2, [r7, #32]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d3e6      	bcc.n	8007b50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b82:	8bfb      	ldrh	r3, [r7, #30]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d01e      	beq.n	8007bc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b92:	461a      	mov	r2, r3
 8007b94:	f107 0310 	add.w	r3, r7, #16
 8007b98:	6812      	ldr	r2, [r2, #0]
 8007b9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b9c:	693a      	ldr	r2, [r7, #16]
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	701a      	strb	r2, [r3, #0]
      i++;
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007bba:	8bfb      	ldrh	r3, [r7, #30]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bc0:	8bfb      	ldrh	r3, [r7, #30]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1ea      	bne.n	8007b9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	372c      	adds	r7, #44	@ 0x2c
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	4013      	ands	r3, r2
 8007bea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bec:	68fb      	ldr	r3, [r7, #12]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	015a      	lsls	r2, r3, #5
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f003 0301 	and.w	r3, r3, #1
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	3301      	adds	r3, #1
 8007c68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c70:	d901      	bls.n	8007c76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c72:	2303      	movs	r3, #3
 8007c74:	e01b      	b.n	8007cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	daf2      	bge.n	8007c64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f043 0201 	orr.w	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3301      	adds	r3, #1
 8007c92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c9a:	d901      	bls.n	8007ca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e006      	b.n	8007cae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d0f0      	beq.n	8007c8e <USB_CoreReset+0x36>

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
	...

08007cbc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cbc:	b084      	sub	sp, #16
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b086      	sub	sp, #24
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cdc:	461a      	mov	r2, r3
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cfe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d119      	bne.n	8007d46 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007d12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d10a      	bne.n	8007d30 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d28:	f043 0304 	orr.w	r3, r3, #4
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	e014      	b.n	8007d5a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d3e:	f023 0304 	bic.w	r3, r3, #4
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	e009      	b.n	8007d5a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007d54:	f023 0304 	bic.w	r3, r3, #4
 8007d58:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d5a:	2110      	movs	r1, #16
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f7ff fe43 	bl	80079e8 <USB_FlushTxFifo>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d001      	beq.n	8007d6c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff fe6d 	bl	8007a4c <USB_FlushRxFifo>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	613b      	str	r3, [r7, #16]
 8007d80:	e015      	b.n	8007dae <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f04f 33ff 	mov.w	r3, #4294967295
 8007d94:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da2:	461a      	mov	r2, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	3301      	adds	r3, #1
 8007dac:	613b      	str	r3, [r7, #16]
 8007dae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007db2:	461a      	mov	r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d3e3      	bcc.n	8007d82 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8007dc6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a18      	ldr	r2, [pc, #96]	@ (8007e2c <USB_HostInit+0x170>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d10b      	bne.n	8007de8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a15      	ldr	r2, [pc, #84]	@ (8007e30 <USB_HostInit+0x174>)
 8007ddc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a14      	ldr	r2, [pc, #80]	@ (8007e34 <USB_HostInit+0x178>)
 8007de2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007de6:	e009      	b.n	8007dfc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2280      	movs	r2, #128	@ 0x80
 8007dec:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a11      	ldr	r2, [pc, #68]	@ (8007e38 <USB_HostInit+0x17c>)
 8007df2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a11      	ldr	r2, [pc, #68]	@ (8007e3c <USB_HostInit+0x180>)
 8007df8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007dfc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d105      	bne.n	8007e10 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	f043 0210 	orr.w	r2, r3, #16
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	699a      	ldr	r2, [r3, #24]
 8007e14:	4b0a      	ldr	r3, [pc, #40]	@ (8007e40 <USB_HostInit+0x184>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e28:	b004      	add	sp, #16
 8007e2a:	4770      	bx	lr
 8007e2c:	40040000 	.word	0x40040000
 8007e30:	01000200 	.word	0x01000200
 8007e34:	00e00300 	.word	0x00e00300
 8007e38:	00600080 	.word	0x00600080
 8007e3c:	004000e0 	.word	0x004000e0
 8007e40:	a3200008 	.word	0xa3200008

08007e44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007e62:	f023 0303 	bic.w	r3, r3, #3
 8007e66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	78fb      	ldrb	r3, [r7, #3]
 8007e72:	f003 0303 	and.w	r3, r3, #3
 8007e76:	68f9      	ldr	r1, [r7, #12]
 8007e78:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d107      	bne.n	8007e96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007e92:	6053      	str	r3, [r2, #4]
 8007e94:	e00c      	b.n	8007eb0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007e96:	78fb      	ldrb	r3, [r7, #3]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d107      	bne.n	8007eac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007ea8:	6053      	str	r3, [r2, #4]
 8007eaa:	e001      	b.n	8007eb0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007ede:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007eec:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007eee:	2064      	movs	r0, #100	@ 0x64
 8007ef0:	f7fa ffb6 	bl	8002e60 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f00:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007f02:	200a      	movs	r0, #10
 8007f04:	f7fa ffac 	bl	8002e60 <HAL_Delay>

  return HAL_OK;
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3710      	adds	r7, #16
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b085      	sub	sp, #20
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f36:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <USB_DriveVbus+0x44>
 8007f42:	78fb      	ldrb	r3, [r7, #3]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d106      	bne.n	8007f56 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f54:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f60:	d109      	bne.n	8007f76 <USB_DriveVbus+0x64>
 8007f62:	78fb      	ldrb	r3, [r7, #3]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007f70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f74:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007f90:	2300      	movs	r3, #0
 8007f92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	0c5b      	lsrs	r3, r3, #17
 8007fa2:	f003 0303 	and.w	r3, r3, #3
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3714      	adds	r7, #20
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007fb2:	b480      	push	{r7}
 8007fb4:	b085      	sub	sp, #20
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	b29b      	uxth	r3, r3
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b088      	sub	sp, #32
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	4608      	mov	r0, r1
 8007fde:	4611      	mov	r1, r2
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	70fb      	strb	r3, [r7, #3]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70bb      	strb	r3, [r7, #2]
 8007fea:	4613      	mov	r3, r2
 8007fec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007ff6:	78fb      	ldrb	r3, [r7, #3]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008002:	461a      	mov	r2, r3
 8008004:	f04f 33ff 	mov.w	r3, #4294967295
 8008008:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800800a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800800e:	2b03      	cmp	r3, #3
 8008010:	d87c      	bhi.n	800810c <USB_HC_Init+0x138>
 8008012:	a201      	add	r2, pc, #4	@ (adr r2, 8008018 <USB_HC_Init+0x44>)
 8008014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008018:	08008029 	.word	0x08008029
 800801c:	080080cf 	.word	0x080080cf
 8008020:	08008029 	.word	0x08008029
 8008024:	08008091 	.word	0x08008091
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008028:	78fb      	ldrb	r3, [r7, #3]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	4413      	add	r3, r2
 8008030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008034:	461a      	mov	r2, r3
 8008036:	f240 439d 	movw	r3, #1181	@ 0x49d
 800803a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800803c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008040:	2b00      	cmp	r3, #0
 8008042:	da10      	bge.n	8008066 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	4413      	add	r3, r2
 800804c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	78fa      	ldrb	r2, [r7, #3]
 8008054:	0151      	lsls	r1, r2, #5
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	440a      	add	r2, r1
 800805a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800805e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008062:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008064:	e055      	b.n	8008112 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a6f      	ldr	r2, [pc, #444]	@ (8008228 <USB_HC_Init+0x254>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d151      	bne.n	8008112 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800806e:	78fb      	ldrb	r3, [r7, #3]
 8008070:	015a      	lsls	r2, r3, #5
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	4413      	add	r3, r2
 8008076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	78fa      	ldrb	r2, [r7, #3]
 800807e:	0151      	lsls	r1, r2, #5
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	440a      	add	r2, r1
 8008084:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008088:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800808c:	60d3      	str	r3, [r2, #12]
      break;
 800808e:	e040      	b.n	8008112 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	4413      	add	r3, r2
 8008098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800809c:	461a      	mov	r2, r3
 800809e:	f240 639d 	movw	r3, #1693	@ 0x69d
 80080a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	da34      	bge.n	8008116 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080ac:	78fb      	ldrb	r3, [r7, #3]
 80080ae:	015a      	lsls	r2, r3, #5
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	4413      	add	r3, r2
 80080b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	78fa      	ldrb	r2, [r7, #3]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80080cc:	e023      	b.n	8008116 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080ce:	78fb      	ldrb	r3, [r7, #3]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080da:	461a      	mov	r2, r3
 80080dc:	f240 2325 	movw	r3, #549	@ 0x225
 80080e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80080e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	da17      	bge.n	800811a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80080ea:	78fb      	ldrb	r3, [r7, #3]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	78fa      	ldrb	r2, [r7, #3]
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008104:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008108:	60d3      	str	r3, [r2, #12]
      }
      break;
 800810a:	e006      	b.n	800811a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	77fb      	strb	r3, [r7, #31]
      break;
 8008110:	e004      	b.n	800811c <USB_HC_Init+0x148>
      break;
 8008112:	bf00      	nop
 8008114:	e002      	b.n	800811c <USB_HC_Init+0x148>
      break;
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <USB_HC_Init+0x148>
      break;
 800811a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008128:	461a      	mov	r2, r3
 800812a:	2300      	movs	r3, #0
 800812c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800812e:	78fb      	ldrb	r3, [r7, #3]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	440a      	add	r2, r1
 8008144:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008148:	f043 0302 	orr.w	r3, r3, #2
 800814c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008154:	699a      	ldr	r2, [r3, #24]
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	f003 030f 	and.w	r3, r3, #15
 800815c:	2101      	movs	r1, #1
 800815e:	fa01 f303 	lsl.w	r3, r1, r3
 8008162:	6939      	ldr	r1, [r7, #16]
 8008164:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008168:	4313      	orrs	r3, r2
 800816a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008178:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800817c:	2b00      	cmp	r3, #0
 800817e:	da03      	bge.n	8008188 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008180:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008184:	61bb      	str	r3, [r7, #24]
 8008186:	e001      	b.n	800818c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f7ff fef9 	bl	8007f84 <USB_GetHostSpeed>
 8008192:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008194:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008198:	2b02      	cmp	r3, #2
 800819a:	d106      	bne.n	80081aa <USB_HC_Init+0x1d6>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d003      	beq.n	80081aa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80081a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e001      	b.n	80081ae <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081ae:	787b      	ldrb	r3, [r7, #1]
 80081b0:	059b      	lsls	r3, r3, #22
 80081b2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081b6:	78bb      	ldrb	r3, [r7, #2]
 80081b8:	02db      	lsls	r3, r3, #11
 80081ba:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081be:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081c4:	049b      	lsls	r3, r3, #18
 80081c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80081ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80081cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80081ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80081d2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	431a      	orrs	r2, r3
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081dc:	78fa      	ldrb	r2, [r7, #3]
 80081de:	0151      	lsls	r1, r2, #5
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	440a      	add	r2, r1
 80081e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80081e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80081ec:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80081ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d003      	beq.n	80081fe <USB_HC_Init+0x22a>
 80081f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d10f      	bne.n	800821e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	4413      	add	r3, r2
 8008206:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	78fa      	ldrb	r2, [r7, #3]
 800820e:	0151      	lsls	r1, r2, #5
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	440a      	add	r2, r1
 8008214:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008218:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800821c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800821e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3720      	adds	r7, #32
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40040000 	.word	0x40040000

0800822c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08c      	sub	sp, #48	@ 0x30
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	4613      	mov	r3, r2
 8008238:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008248:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	4a5d      	ldr	r2, [pc, #372]	@ (80083c4 <USB_HC_StartXfer+0x198>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d12f      	bne.n	80082b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008252:	79fb      	ldrb	r3, [r7, #7]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d11c      	bne.n	8008292 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	7c9b      	ldrb	r3, [r3, #18]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <USB_HC_StartXfer+0x3c>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	7c9b      	ldrb	r3, [r3, #18]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d124      	bne.n	80082b2 <USB_HC_StartXfer+0x86>
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	799b      	ldrb	r3, [r3, #6]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d120      	bne.n	80082b2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	4413      	add	r3, r2
 8008278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	69fa      	ldr	r2, [r7, #28]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	6a3a      	ldr	r2, [r7, #32]
 8008284:	440a      	add	r2, r1
 8008286:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800828a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800828e:	60d3      	str	r3, [r2, #12]
 8008290:	e00f      	b.n	80082b2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	791b      	ldrb	r3, [r3, #4]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <USB_HC_StartXfer+0x86>
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	795b      	ldrb	r3, [r3, #5]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d107      	bne.n	80082b2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	785b      	ldrb	r3, [r3, #1]
 80082a6:	4619      	mov	r1, r3
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fb6b 	bl	8008984 <USB_DoPing>
        return HAL_OK;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e232      	b.n	8008718 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	799b      	ldrb	r3, [r3, #6]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d158      	bne.n	800836c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80082ba:	2301      	movs	r3, #1
 80082bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	78db      	ldrb	r3, [r3, #3]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80082c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	8a92      	ldrh	r2, [r2, #20]
 80082cc:	fb03 f202 	mul.w	r2, r3, r2
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	61da      	str	r2, [r3, #28]
 80082d4:	e07c      	b.n	80083d0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	7c9b      	ldrb	r3, [r3, #18]
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d130      	bne.n	8008340 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80082e4:	d918      	bls.n	8008318 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	8a9b      	ldrh	r3, [r3, #20]
 80082ea:	461a      	mov	r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d003      	beq.n	8008308 <USB_HC_StartXfer+0xdc>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d103      	bne.n	8008310 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2202      	movs	r2, #2
 800830c:	60da      	str	r2, [r3, #12]
 800830e:	e05f      	b.n	80083d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2201      	movs	r2, #1
 8008314:	60da      	str	r2, [r3, #12]
 8008316:	e05b      	b.n	80083d0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	6a1a      	ldr	r2, [r3, #32]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d007      	beq.n	8008338 <USB_HC_StartXfer+0x10c>
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	2b02      	cmp	r3, #2
 800832e:	d003      	beq.n	8008338 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2204      	movs	r2, #4
 8008334:	60da      	str	r2, [r3, #12]
 8008336:	e04b      	b.n	80083d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2203      	movs	r2, #3
 800833c:	60da      	str	r2, [r3, #12]
 800833e:	e047      	b.n	80083d0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008340:	79fb      	ldrb	r3, [r7, #7]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d10d      	bne.n	8008362 <USB_HC_StartXfer+0x136>
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	8a92      	ldrh	r2, [r2, #20]
 800834e:	4293      	cmp	r3, r2
 8008350:	d907      	bls.n	8008362 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008352:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	8a92      	ldrh	r2, [r2, #20]
 8008358:	fb03 f202 	mul.w	r2, r3, r2
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	61da      	str	r2, [r3, #28]
 8008360:	e036      	b.n	80083d0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	6a1a      	ldr	r2, [r3, #32]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	61da      	str	r2, [r3, #28]
 800836a:	e031      	b.n	80083d0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d018      	beq.n	80083a6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6a1b      	ldr	r3, [r3, #32]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	8a92      	ldrh	r2, [r2, #20]
 800837c:	4413      	add	r3, r2
 800837e:	3b01      	subs	r3, #1
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	8a92      	ldrh	r2, [r2, #20]
 8008384:	fbb3 f3f2 	udiv	r3, r3, r2
 8008388:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800838a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800838c:	8b7b      	ldrh	r3, [r7, #26]
 800838e:	429a      	cmp	r2, r3
 8008390:	d90b      	bls.n	80083aa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008392:	8b7b      	ldrh	r3, [r7, #26]
 8008394:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008396:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	8a92      	ldrh	r2, [r2, #20]
 800839c:	fb03 f202 	mul.w	r2, r3, r2
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	61da      	str	r2, [r3, #28]
 80083a4:	e001      	b.n	80083aa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80083a6:	2301      	movs	r3, #1
 80083a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	78db      	ldrb	r3, [r3, #3]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00a      	beq.n	80083c8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80083b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	8a92      	ldrh	r2, [r2, #20]
 80083b8:	fb03 f202 	mul.w	r2, r3, r2
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	61da      	str	r2, [r3, #28]
 80083c0:	e006      	b.n	80083d0 <USB_HC_StartXfer+0x1a4>
 80083c2:	bf00      	nop
 80083c4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6a1a      	ldr	r2, [r3, #32]
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	69db      	ldr	r3, [r3, #28]
 80083d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083da:	04d9      	lsls	r1, r3, #19
 80083dc:	4ba3      	ldr	r3, [pc, #652]	@ (800866c <USB_HC_StartXfer+0x440>)
 80083de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	7d9b      	ldrb	r3, [r3, #22]
 80083e6:	075b      	lsls	r3, r3, #29
 80083e8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083ec:	69f9      	ldr	r1, [r7, #28]
 80083ee:	0148      	lsls	r0, r1, #5
 80083f0:	6a39      	ldr	r1, [r7, #32]
 80083f2:	4401      	add	r1, r0
 80083f4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80083f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80083fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d009      	beq.n	8008416 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	6999      	ldr	r1, [r3, #24]
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	015a      	lsls	r2, r3, #5
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	4413      	add	r3, r2
 800840e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008412:	460a      	mov	r2, r1
 8008414:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	2b00      	cmp	r3, #0
 8008424:	bf0c      	ite	eq
 8008426:	2301      	moveq	r3, #1
 8008428:	2300      	movne	r3, #0
 800842a:	b2db      	uxtb	r3, r3
 800842c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	4413      	add	r3, r2
 8008436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	69fa      	ldr	r2, [r7, #28]
 800843e:	0151      	lsls	r1, r2, #5
 8008440:	6a3a      	ldr	r2, [r7, #32]
 8008442:	440a      	add	r2, r1
 8008444:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008448:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800844c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	015a      	lsls	r2, r3, #5
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	4413      	add	r3, r2
 8008456:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	7e7b      	ldrb	r3, [r7, #25]
 800845e:	075b      	lsls	r3, r3, #29
 8008460:	69f9      	ldr	r1, [r7, #28]
 8008462:	0148      	lsls	r0, r1, #5
 8008464:	6a39      	ldr	r1, [r7, #32]
 8008466:	4401      	add	r1, r0
 8008468:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800846c:	4313      	orrs	r3, r2
 800846e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	799b      	ldrb	r3, [r3, #6]
 8008474:	2b01      	cmp	r3, #1
 8008476:	f040 80c3 	bne.w	8008600 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	7c5b      	ldrb	r3, [r3, #17]
 800847e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008484:	4313      	orrs	r3, r2
 8008486:	69fa      	ldr	r2, [r7, #28]
 8008488:	0151      	lsls	r1, r2, #5
 800848a:	6a3a      	ldr	r2, [r7, #32]
 800848c:	440a      	add	r2, r1
 800848e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008492:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008496:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008498:	69fb      	ldr	r3, [r7, #28]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	69fa      	ldr	r2, [r7, #28]
 80084a8:	0151      	lsls	r1, r2, #5
 80084aa:	6a3a      	ldr	r2, [r7, #32]
 80084ac:	440a      	add	r2, r1
 80084ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80084b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	79db      	ldrb	r3, [r3, #7]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d123      	bne.n	8008508 <USB_HC_StartXfer+0x2dc>
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	78db      	ldrb	r3, [r3, #3]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d11f      	bne.n	8008508 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	6a3a      	ldr	r2, [r7, #32]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084e6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	69fa      	ldr	r2, [r7, #28]
 80084f8:	0151      	lsls	r1, r2, #5
 80084fa:	6a3a      	ldr	r2, [r7, #32]
 80084fc:	440a      	add	r2, r1
 80084fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008506:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	7c9b      	ldrb	r3, [r3, #18]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d003      	beq.n	8008518 <USB_HC_StartXfer+0x2ec>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	7c9b      	ldrb	r3, [r3, #18]
 8008514:	2b03      	cmp	r3, #3
 8008516:	d117      	bne.n	8008548 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800851c:	2b01      	cmp	r3, #1
 800851e:	d113      	bne.n	8008548 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	78db      	ldrb	r3, [r3, #3]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d10f      	bne.n	8008548 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	015a      	lsls	r2, r3, #5
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	4413      	add	r3, r2
 8008530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	0151      	lsls	r1, r2, #5
 800853a:	6a3a      	ldr	r2, [r7, #32]
 800853c:	440a      	add	r2, r1
 800853e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008546:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	7c9b      	ldrb	r3, [r3, #18]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d162      	bne.n	8008616 <USB_HC_StartXfer+0x3ea>
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	78db      	ldrb	r3, [r3, #3]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d15e      	bne.n	8008616 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	3b01      	subs	r3, #1
 800855e:	2b03      	cmp	r3, #3
 8008560:	d858      	bhi.n	8008614 <USB_HC_StartXfer+0x3e8>
 8008562:	a201      	add	r2, pc, #4	@ (adr r2, 8008568 <USB_HC_StartXfer+0x33c>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	08008579 	.word	0x08008579
 800856c:	0800859b 	.word	0x0800859b
 8008570:	080085bd 	.word	0x080085bd
 8008574:	080085df 	.word	0x080085df
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	4413      	add	r3, r2
 8008580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	69fa      	ldr	r2, [r7, #28]
 8008588:	0151      	lsls	r1, r2, #5
 800858a:	6a3a      	ldr	r2, [r7, #32]
 800858c:	440a      	add	r2, r1
 800858e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008592:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008596:	6053      	str	r3, [r2, #4]
          break;
 8008598:	e03d      	b.n	8008616 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	69fa      	ldr	r2, [r7, #28]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	6a3a      	ldr	r2, [r7, #32]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085b4:	f043 030e 	orr.w	r3, r3, #14
 80085b8:	6053      	str	r3, [r2, #4]
          break;
 80085ba:	e02c      	b.n	8008616 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	69fa      	ldr	r2, [r7, #28]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	6a3a      	ldr	r2, [r7, #32]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085da:	6053      	str	r3, [r2, #4]
          break;
 80085dc:	e01b      	b.n	8008616 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	69fa      	ldr	r2, [r7, #28]
 80085ee:	0151      	lsls	r1, r2, #5
 80085f0:	6a3a      	ldr	r2, [r7, #32]
 80085f2:	440a      	add	r2, r1
 80085f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80085fc:	6053      	str	r3, [r2, #4]
          break;
 80085fe:	e00a      	b.n	8008616 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	4413      	add	r3, r2
 8008608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800860c:	461a      	mov	r2, r3
 800860e:	2300      	movs	r3, #0
 8008610:	6053      	str	r3, [r2, #4]
 8008612:	e000      	b.n	8008616 <USB_HC_StartXfer+0x3ea>
          break;
 8008614:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800862c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	78db      	ldrb	r3, [r3, #3]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800863c:	613b      	str	r3, [r7, #16]
 800863e:	e003      	b.n	8008648 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008646:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800864e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	4413      	add	r3, r2
 8008658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800865c:	461a      	mov	r2, r3
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008662:	79fb      	ldrb	r3, [r7, #7]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d003      	beq.n	8008670 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	e055      	b.n	8008718 <USB_HC_StartXfer+0x4ec>
 800866c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	78db      	ldrb	r3, [r3, #3]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d14e      	bne.n	8008716 <USB_HC_StartXfer+0x4ea>
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d04a      	beq.n	8008716 <USB_HC_StartXfer+0x4ea>
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	79db      	ldrb	r3, [r3, #7]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d146      	bne.n	8008716 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	7c9b      	ldrb	r3, [r3, #18]
 800868c:	2b03      	cmp	r3, #3
 800868e:	d831      	bhi.n	80086f4 <USB_HC_StartXfer+0x4c8>
 8008690:	a201      	add	r2, pc, #4	@ (adr r2, 8008698 <USB_HC_StartXfer+0x46c>)
 8008692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008696:	bf00      	nop
 8008698:	080086a9 	.word	0x080086a9
 800869c:	080086cd 	.word	0x080086cd
 80086a0:	080086a9 	.word	0x080086a9
 80086a4:	080086cd 	.word	0x080086cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	6a1b      	ldr	r3, [r3, #32]
 80086ac:	3303      	adds	r3, #3
 80086ae:	089b      	lsrs	r3, r3, #2
 80086b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80086b2:	8afa      	ldrh	r2, [r7, #22]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d91c      	bls.n	80086f8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	f043 0220 	orr.w	r2, r3, #32
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80086ca:	e015      	b.n	80086f8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	3303      	adds	r3, #3
 80086d2:	089b      	lsrs	r3, r3, #2
 80086d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80086d6:	8afa      	ldrh	r2, [r7, #22]
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d90a      	bls.n	80086fc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	699b      	ldr	r3, [r3, #24]
 80086ea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80086f2:	e003      	b.n	80086fc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80086f4:	bf00      	nop
 80086f6:	e002      	b.n	80086fe <USB_HC_StartXfer+0x4d2>
        break;
 80086f8:	bf00      	nop
 80086fa:	e000      	b.n	80086fe <USB_HC_StartXfer+0x4d2>
        break;
 80086fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	6999      	ldr	r1, [r3, #24]
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	785a      	ldrb	r2, [r3, #1]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	b29b      	uxth	r3, r3
 800870c:	2000      	movs	r0, #0
 800870e:	9000      	str	r0, [sp, #0]
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7ff f9c9 	bl	8007aa8 <USB_WritePacket>
  }

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3728      	adds	r7, #40	@ 0x28
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	b29b      	uxth	r3, r3
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008742:	b480      	push	{r7}
 8008744:	b089      	sub	sp, #36	@ 0x24
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	460b      	mov	r3, r1
 800874c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008752:	78fb      	ldrb	r3, [r7, #3]
 8008754:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	0c9b      	lsrs	r3, r3, #18
 800876a:	f003 0303 	and.w	r3, r3, #3
 800876e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008770:	69bb      	ldr	r3, [r7, #24]
 8008772:	015a      	lsls	r2, r3, #5
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	0fdb      	lsrs	r3, r3, #31
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	4413      	add	r3, r2
 800878e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	0fdb      	lsrs	r3, r3, #31
 8008796:	f003 0301 	and.w	r3, r3, #1
 800879a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f003 0320 	and.w	r3, r3, #32
 80087a4:	2b20      	cmp	r3, #32
 80087a6:	d10d      	bne.n	80087c4 <USB_HC_Halt+0x82>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <USB_HC_Halt+0x82>
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d005      	beq.n	80087c0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d002      	beq.n	80087c0 <USB_HC_Halt+0x7e>
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d101      	bne.n	80087c4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	e0d8      	b.n	8008976 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <USB_HC_Halt+0x8e>
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b02      	cmp	r3, #2
 80087ce:	d173      	bne.n	80088b8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	015a      	lsls	r2, r3, #5
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	4413      	add	r3, r2
 80087d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	0151      	lsls	r1, r2, #5
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	440a      	add	r2, r1
 80087e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f003 0320 	and.w	r3, r3, #32
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d14a      	bne.n	8008892 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008800:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d133      	bne.n	8008870 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	015a      	lsls	r2, r3, #5
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	4413      	add	r3, r2
 8008810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	0151      	lsls	r1, r2, #5
 800881a:	69fa      	ldr	r2, [r7, #28]
 800881c:	440a      	add	r2, r1
 800881e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008826:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	4413      	add	r3, r2
 8008830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	69fa      	ldr	r2, [r7, #28]
 800883c:	440a      	add	r2, r1
 800883e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008842:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008846:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	3301      	adds	r3, #1
 800884c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008854:	d82e      	bhi.n	80088b4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	4413      	add	r3, r2
 800885e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008868:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800886c:	d0ec      	beq.n	8008848 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800886e:	e081      	b.n	8008974 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	4413      	add	r3, r2
 8008878:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	440a      	add	r2, r1
 8008886:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800888a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800888e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008890:	e070      	b.n	8008974 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	4413      	add	r3, r2
 800889a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	69ba      	ldr	r2, [r7, #24]
 80088a2:	0151      	lsls	r1, r2, #5
 80088a4:	69fa      	ldr	r2, [r7, #28]
 80088a6:	440a      	add	r2, r1
 80088a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80088b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088b2:	e05f      	b.n	8008974 <USB_HC_Halt+0x232>
            break;
 80088b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80088b6:	e05d      	b.n	8008974 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80088d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d133      	bne.n	8008950 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80088e8:	69bb      	ldr	r3, [r7, #24]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	69fa      	ldr	r2, [r7, #28]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008902:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008906:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	0151      	lsls	r1, r2, #5
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	440a      	add	r2, r1
 800891e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008922:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008926:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	3301      	adds	r3, #1
 800892c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008934:	d81d      	bhi.n	8008972 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	4413      	add	r3, r2
 800893e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008948:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800894c:	d0ec      	beq.n	8008928 <USB_HC_Halt+0x1e6>
 800894e:	e011      	b.n	8008974 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	4413      	add	r3, r2
 8008958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	0151      	lsls	r1, r2, #5
 8008962:	69fa      	ldr	r2, [r7, #28]
 8008964:	440a      	add	r2, r1
 8008966:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800896a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800896e:	6013      	str	r3, [r2, #0]
 8008970:	e000      	b.n	8008974 <USB_HC_Halt+0x232>
          break;
 8008972:	bf00      	nop
    }
  }

  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3724      	adds	r7, #36	@ 0x24
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
	...

08008984 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008984:	b480      	push	{r7}
 8008986:	b087      	sub	sp, #28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008994:	78fb      	ldrb	r3, [r7, #3]
 8008996:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008998:	2301      	movs	r3, #1
 800899a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	04da      	lsls	r2, r3, #19
 80089a0:	4b15      	ldr	r3, [pc, #84]	@ (80089f8 <USB_DoPing+0x74>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	0151      	lsls	r1, r2, #5
 80089a8:	697a      	ldr	r2, [r7, #20]
 80089aa:	440a      	add	r2, r1
 80089ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e2:	461a      	mov	r2, r3
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	371c      	adds	r7, #28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	1ff80000 	.word	0x1ff80000

080089fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a04:	2300      	movs	r3, #0
 8008a06:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7fe ff8c 	bl	800792e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a16:	2110      	movs	r1, #16
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7fe ffe5 	bl	80079e8 <USB_FlushTxFifo>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff f80f 	bl	8007a4c <USB_FlushRxFifo>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008a34:	2301      	movs	r3, #1
 8008a36:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	61bb      	str	r3, [r7, #24]
 8008a3c:	e01f      	b.n	8008a7e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a3e:	69bb      	ldr	r3, [r7, #24]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008a64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a72:	461a      	mov	r2, r3
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	61bb      	str	r3, [r7, #24]
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2b0f      	cmp	r3, #15
 8008a82:	d9dc      	bls.n	8008a3e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008a84:	2300      	movs	r3, #0
 8008a86:	61bb      	str	r3, [r7, #24]
 8008a88:	e034      	b.n	8008af4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008aa0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008aa8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ab0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008ab2:	69bb      	ldr	r3, [r7, #24]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008abe:	461a      	mov	r2, r3
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ad0:	d80c      	bhi.n	8008aec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ae8:	d0ec      	beq.n	8008ac4 <USB_StopHost+0xc8>
 8008aea:	e000      	b.n	8008aee <USB_StopHost+0xf2>
        break;
 8008aec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	3301      	adds	r3, #1
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	2b0f      	cmp	r3, #15
 8008af8:	d9c7      	bls.n	8008a8a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b00:	461a      	mov	r2, r3
 8008b02:	f04f 33ff 	mov.w	r3, #4294967295
 8008b06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7fe fefb 	bl	800790c <USB_EnableGlobalInt>

  return ret;
 8008b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3720      	adds	r7, #32
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008b20:	b590      	push	{r4, r7, lr}
 8008b22:	b089      	sub	sp, #36	@ 0x24
 8008b24:	af04      	add	r7, sp, #16
 8008b26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008b28:	2301      	movs	r3, #1
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	2102      	movs	r1, #2
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fc85 	bl	800943e <USBH_FindInterface>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	2bff      	cmp	r3, #255	@ 0xff
 8008b3c:	d002      	beq.n	8008b44 <USBH_CDC_InterfaceInit+0x24>
 8008b3e:	7bfb      	ldrb	r3, [r7, #15]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d901      	bls.n	8008b48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b44:	2302      	movs	r3, #2
 8008b46:	e13d      	b.n	8008dc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fc5a 	bl	8009406 <USBH_SelectInterface>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b56:	7bbb      	ldrb	r3, [r7, #14]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	e131      	b.n	8008dc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008b66:	2050      	movs	r0, #80	@ 0x50
 8008b68:	f002 fb64 	bl	800b234 <malloc>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008b80:	2302      	movs	r3, #2
 8008b82:	e11f      	b.n	8008dc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008b84:	2250      	movs	r2, #80	@ 0x50
 8008b86:	2100      	movs	r1, #0
 8008b88:	68b8      	ldr	r0, [r7, #8]
 8008b8a:	f002 fee7 	bl	800b95c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008b8e:	7bfb      	ldrb	r3, [r7, #15]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	211a      	movs	r1, #26
 8008b94:	fb01 f303 	mul.w	r3, r1, r3
 8008b98:	4413      	add	r3, r2
 8008b9a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	b25b      	sxtb	r3, r3
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	da15      	bge.n	8008bd2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	211a      	movs	r1, #26
 8008bac:	fb01 f303 	mul.w	r3, r1, r3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008bb6:	781a      	ldrb	r2, [r3, #0]
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	211a      	movs	r1, #26
 8008bc2:	fb01 f303 	mul.w	r3, r1, r3
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008bcc:	881a      	ldrh	r2, [r3, #0]
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	785b      	ldrb	r3, [r3, #1]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f001 ffbe 	bl	800ab5a <USBH_AllocPipe>
 8008bde:	4603      	mov	r3, r0
 8008be0:	461a      	mov	r2, r3
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	7819      	ldrb	r1, [r3, #0]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	7858      	ldrb	r0, [r3, #1]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	8952      	ldrh	r2, [r2, #10]
 8008bfe:	9202      	str	r2, [sp, #8]
 8008c00:	2203      	movs	r2, #3
 8008c02:	9201      	str	r2, [sp, #4]
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	4623      	mov	r3, r4
 8008c08:	4602      	mov	r2, r0
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 ff76 	bl	800aafc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2200      	movs	r2, #0
 8008c16:	4619      	mov	r1, r3
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f002 fa85 	bl	800b128 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008c1e:	2300      	movs	r3, #0
 8008c20:	2200      	movs	r2, #0
 8008c22:	210a      	movs	r1, #10
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fc0a 	bl	800943e <USBH_FindInterface>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c2e:	7bfb      	ldrb	r3, [r7, #15]
 8008c30:	2bff      	cmp	r3, #255	@ 0xff
 8008c32:	d002      	beq.n	8008c3a <USBH_CDC_InterfaceInit+0x11a>
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d901      	bls.n	8008c3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	e0c2      	b.n	8008dc4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008c3e:	7bfb      	ldrb	r3, [r7, #15]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	211a      	movs	r1, #26
 8008c44:	fb01 f303 	mul.w	r3, r1, r3
 8008c48:	4413      	add	r3, r2
 8008c4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	b25b      	sxtb	r3, r3
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	da16      	bge.n	8008c84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	211a      	movs	r1, #26
 8008c5c:	fb01 f303 	mul.w	r3, r1, r3
 8008c60:	4413      	add	r3, r2
 8008c62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c66:	781a      	ldrb	r2, [r3, #0]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	211a      	movs	r1, #26
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008c7c:	881a      	ldrh	r2, [r3, #0]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	835a      	strh	r2, [r3, #26]
 8008c82:	e015      	b.n	8008cb0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	211a      	movs	r1, #26
 8008c8a:	fb01 f303 	mul.w	r3, r1, r3
 8008c8e:	4413      	add	r3, r2
 8008c90:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	211a      	movs	r1, #26
 8008ca0:	fb01 f303 	mul.w	r3, r1, r3
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008caa:	881a      	ldrh	r2, [r3, #0]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	211a      	movs	r1, #26
 8008cb6:	fb01 f303 	mul.w	r3, r1, r3
 8008cba:	4413      	add	r3, r2
 8008cbc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	b25b      	sxtb	r3, r3
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	da16      	bge.n	8008cf6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	211a      	movs	r1, #26
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008cd8:	781a      	ldrb	r2, [r3, #0]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	211a      	movs	r1, #26
 8008ce4:	fb01 f303 	mul.w	r3, r1, r3
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008cee:	881a      	ldrh	r2, [r3, #0]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	835a      	strh	r2, [r3, #26]
 8008cf4:	e015      	b.n	8008d22 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008cf6:	7bfb      	ldrb	r3, [r7, #15]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	211a      	movs	r1, #26
 8008cfc:	fb01 f303 	mul.w	r3, r1, r3
 8008d00:	4413      	add	r3, r2
 8008d02:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008d06:	781a      	ldrb	r2, [r3, #0]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	211a      	movs	r1, #26
 8008d12:	fb01 f303 	mul.w	r3, r1, r3
 8008d16:	4413      	add	r3, r2
 8008d18:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008d1c:	881a      	ldrh	r2, [r3, #0]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	7b9b      	ldrb	r3, [r3, #14]
 8008d26:	4619      	mov	r1, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 ff16 	bl	800ab5a <USBH_AllocPipe>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	461a      	mov	r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	7bdb      	ldrb	r3, [r3, #15]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 ff0c 	bl	800ab5a <USBH_AllocPipe>
 8008d42:	4603      	mov	r3, r0
 8008d44:	461a      	mov	r2, r3
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	7b59      	ldrb	r1, [r3, #13]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	7b98      	ldrb	r0, [r3, #14]
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	8b12      	ldrh	r2, [r2, #24]
 8008d62:	9202      	str	r2, [sp, #8]
 8008d64:	2202      	movs	r2, #2
 8008d66:	9201      	str	r2, [sp, #4]
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	4623      	mov	r3, r4
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f001 fec4 	bl	800aafc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	7b19      	ldrb	r1, [r3, #12]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	7bd8      	ldrb	r0, [r3, #15]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d88:	68ba      	ldr	r2, [r7, #8]
 8008d8a:	8b52      	ldrh	r2, [r2, #26]
 8008d8c:	9202      	str	r2, [sp, #8]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	9201      	str	r2, [sp, #4]
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	4623      	mov	r3, r4
 8008d96:	4602      	mov	r2, r0
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f001 feaf 	bl	800aafc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	7b5b      	ldrb	r3, [r3, #13]
 8008daa:	2200      	movs	r2, #0
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f002 f9ba 	bl	800b128 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	7b1b      	ldrb	r3, [r3, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	4619      	mov	r1, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f002 f9b3 	bl	800b128 <USBH_LL_SetToggle>

  return USBH_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3714      	adds	r7, #20
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd90      	pop	{r4, r7, pc}

08008dcc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00e      	beq.n	8008e04 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 fea4 	bl	800ab3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	4619      	mov	r1, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 fecf 	bl	800ab9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	7b1b      	ldrb	r3, [r3, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00e      	beq.n	8008e2a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	7b1b      	ldrb	r3, [r3, #12]
 8008e10:	4619      	mov	r1, r3
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 fe91 	bl	800ab3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	7b1b      	ldrb	r3, [r3, #12]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 febc 	bl	800ab9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	7b5b      	ldrb	r3, [r3, #13]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00e      	beq.n	8008e50 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	7b5b      	ldrb	r3, [r3, #13]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 fe7e 	bl	800ab3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	7b5b      	ldrb	r3, [r3, #13]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 fea9 	bl	800ab9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e56:	69db      	ldr	r3, [r3, #28]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e62:	69db      	ldr	r3, [r3, #28]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f002 f9ed 	bl	800b244 <free>
    phost->pActiveClass->pData = 0U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e70:	2200      	movs	r2, #0
 8008e72:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3340      	adds	r3, #64	@ 0x40
 8008e94:	4619      	mov	r1, r3
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f8b1 	bl	8008ffe <GetLineCoding>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008ea0:	7afb      	ldrb	r3, [r7, #11]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d105      	bne.n	8008eb2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008eac:	2102      	movs	r1, #2
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008edc:	2b04      	cmp	r3, #4
 8008ede:	d877      	bhi.n	8008fd0 <USBH_CDC_Process+0x114>
 8008ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee8 <USBH_CDC_Process+0x2c>)
 8008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee6:	bf00      	nop
 8008ee8:	08008efd 	.word	0x08008efd
 8008eec:	08008f03 	.word	0x08008f03
 8008ef0:	08008f33 	.word	0x08008f33
 8008ef4:	08008fa7 	.word	0x08008fa7
 8008ef8:	08008fb5 	.word	0x08008fb5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008efc:	2300      	movs	r3, #0
 8008efe:	73fb      	strb	r3, [r7, #15]
      break;
 8008f00:	e06d      	b.n	8008fde <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 f897 	bl	800903c <SetLineCoding>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f12:	7bbb      	ldrb	r3, [r7, #14]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d104      	bne.n	8008f22 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f20:	e058      	b.n	8008fd4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d055      	beq.n	8008fd4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2204      	movs	r2, #4
 8008f2c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008f30:	e050      	b.n	8008fd4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	3340      	adds	r3, #64	@ 0x40
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f860 	bl	8008ffe <GetLineCoding>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d126      	bne.n	8008f96 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f5a:	791b      	ldrb	r3, [r3, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d13b      	bne.n	8008fd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f6a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d133      	bne.n	8008fd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f7a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d12b      	bne.n	8008fd8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f88:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d124      	bne.n	8008fd8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 f958 	bl	8009244 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008f94:	e020      	b.n	8008fd8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008f96:	7bbb      	ldrb	r3, [r7, #14]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d01d      	beq.n	8008fd8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	2204      	movs	r2, #4
 8008fa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008fa4:	e018      	b.n	8008fd8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 f867 	bl	800907a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f8da 	bl	8009166 <CDC_ProcessReception>
      break;
 8008fb2:	e014      	b.n	8008fde <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f001 f81a 	bl	8009ff0 <USBH_ClrFeature>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10a      	bne.n	8008fdc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008fce:	e005      	b.n	8008fdc <USBH_CDC_Process+0x120>

    default:
      break;
 8008fd0:	bf00      	nop
 8008fd2:	e004      	b.n	8008fde <USBH_CDC_Process+0x122>
      break;
 8008fd4:	bf00      	nop
 8008fd6:	e002      	b.n	8008fde <USBH_CDC_Process+0x122>
      break;
 8008fd8:	bf00      	nop
 8008fda:	e000      	b.n	8008fde <USBH_CDC_Process+0x122>
      break;
 8008fdc:	bf00      	nop

  }

  return status;
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	370c      	adds	r7, #12
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b082      	sub	sp, #8
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	22a1      	movs	r2, #161	@ 0xa1
 800900c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2221      	movs	r2, #33	@ 0x21
 8009012:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2207      	movs	r2, #7
 8009024:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2207      	movs	r2, #7
 800902a:	4619      	mov	r1, r3
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 fb14 	bl	800a65a <USBH_CtlReq>
 8009032:	4603      	mov	r3, r0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2221      	movs	r2, #33	@ 0x21
 800904a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2220      	movs	r2, #32
 8009050:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2200      	movs	r2, #0
 8009056:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2207      	movs	r2, #7
 8009062:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2207      	movs	r2, #7
 8009068:	4619      	mov	r1, r3
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f001 faf5 	bl	800a65a <USBH_CtlReq>
 8009070:	4603      	mov	r3, r0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b086      	sub	sp, #24
 800907e:	af02      	add	r7, sp, #8
 8009080:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800908c:	2300      	movs	r3, #0
 800908e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009096:	2b01      	cmp	r3, #1
 8009098:	d002      	beq.n	80090a0 <CDC_ProcessTransmission+0x26>
 800909a:	2b02      	cmp	r3, #2
 800909c:	d023      	beq.n	80090e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800909e:	e05e      	b.n	800915e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	8b12      	ldrh	r2, [r2, #24]
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d90b      	bls.n	80090c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	69d9      	ldr	r1, [r3, #28]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8b1a      	ldrh	r2, [r3, #24]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	7b5b      	ldrb	r3, [r3, #13]
 80090b8:	2001      	movs	r0, #1
 80090ba:	9000      	str	r0, [sp, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 fcda 	bl	800aa76 <USBH_BulkSendData>
 80090c2:	e00b      	b.n	80090dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	7b5b      	ldrb	r3, [r3, #13]
 80090d2:	2001      	movs	r0, #1
 80090d4:	9000      	str	r0, [sp, #0]
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f001 fccd 	bl	800aa76 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80090e4:	e03b      	b.n	800915e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	7b5b      	ldrb	r3, [r3, #13]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 fff1 	bl	800b0d4 <USBH_LL_GetURBState>
 80090f2:	4603      	mov	r3, r0
 80090f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80090f6:	7afb      	ldrb	r3, [r7, #11]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d128      	bne.n	800914e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	8b12      	ldrh	r2, [r2, #24]
 8009104:	4293      	cmp	r3, r2
 8009106:	d90e      	bls.n	8009126 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	8b12      	ldrh	r2, [r2, #24]
 8009110:	1a9a      	subs	r2, r3, r2
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	8b12      	ldrh	r2, [r2, #24]
 800911e:	441a      	add	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	61da      	str	r2, [r3, #28]
 8009124:	e002      	b.n	800912c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2200      	movs	r2, #0
 800912a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009130:	2b00      	cmp	r3, #0
 8009132:	d004      	beq.n	800913e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800913c:	e00e      	b.n	800915c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f868 	bl	800921c <USBH_CDC_TransmitCallback>
      break;
 800914c:	e006      	b.n	800915c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800914e:	7afb      	ldrb	r3, [r7, #11]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d103      	bne.n	800915c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800915c:	bf00      	nop
  }
}
 800915e:	bf00      	nop
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009166:	b580      	push	{r7, lr}
 8009168:	b086      	sub	sp, #24
 800916a:	af00      	add	r7, sp, #0
 800916c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009174:	69db      	ldr	r3, [r3, #28]
 8009176:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009178:	2300      	movs	r3, #0
 800917a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009182:	2b03      	cmp	r3, #3
 8009184:	d002      	beq.n	800918c <CDC_ProcessReception+0x26>
 8009186:	2b04      	cmp	r3, #4
 8009188:	d00e      	beq.n	80091a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800918a:	e043      	b.n	8009214 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	6a19      	ldr	r1, [r3, #32]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	8b5a      	ldrh	r2, [r3, #26]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	7b1b      	ldrb	r3, [r3, #12]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f001 fc91 	bl	800aac0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	2204      	movs	r2, #4
 80091a2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80091a6:	e035      	b.n	8009214 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	7b1b      	ldrb	r3, [r3, #12]
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 ff90 	bl	800b0d4 <USBH_LL_GetURBState>
 80091b4:	4603      	mov	r3, r0
 80091b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80091b8:	7cfb      	ldrb	r3, [r7, #19]
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d129      	bne.n	8009212 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	7b1b      	ldrb	r3, [r3, #12]
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 fef3 	bl	800afb0 <USBH_LL_GetLastXferSize>
 80091ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d016      	beq.n	8009204 <CDC_ProcessReception+0x9e>
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	8b5b      	ldrh	r3, [r3, #26]
 80091da:	461a      	mov	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4293      	cmp	r3, r2
 80091e0:	d110      	bne.n	8009204 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	1ad2      	subs	r2, r2, r3
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	6a1a      	ldr	r2, [r3, #32]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	441a      	add	r2, r3
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	2203      	movs	r2, #3
 80091fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009202:	e006      	b.n	8009212 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 f80f 	bl	8009230 <USBH_CDC_ReceiveCallback>
      break;
 8009212:	bf00      	nop
  }
}
 8009214:	bf00      	nop
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	4613      	mov	r3, r2
 8009264:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800926c:	2302      	movs	r3, #2
 800926e:	e029      	b.n	80092c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	79fa      	ldrb	r2, [r7, #7]
 8009274:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 f81f 	bl	80092cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2200      	movs	r2, #0
 80092aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f001 fdc3 	bl	800ae48 <USBH_LL_Init>

  return USBH_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80092d8:	2300      	movs	r3, #0
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	e009      	b.n	80092f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	33e0      	adds	r3, #224	@ 0xe0
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	2200      	movs	r2, #0
 80092ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b0f      	cmp	r3, #15
 80092f6:	d9f2      	bls.n	80092de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80092f8:	2300      	movs	r3, #0
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	e009      	b.n	8009312 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	4413      	add	r3, r2
 8009304:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009308:	2200      	movs	r2, #0
 800930a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3301      	adds	r3, #1
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009318:	d3f1      	bcc.n	80092fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2201      	movs	r2, #1
 800932a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2240      	movs	r2, #64	@ 0x40
 800933e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2201      	movs	r2, #1
 8009352:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	331c      	adds	r3, #28
 800936a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800936e:	2100      	movs	r1, #0
 8009370:	4618      	mov	r0, r3
 8009372:	f002 faf3 	bl	800b95c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800937c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009380:	2100      	movs	r1, #0
 8009382:	4618      	mov	r0, r3
 8009384:	f002 faea 	bl	800b95c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800938e:	2212      	movs	r2, #18
 8009390:	2100      	movs	r1, #0
 8009392:	4618      	mov	r0, r3
 8009394:	f002 fae2 	bl	800b95c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800939e:	223e      	movs	r2, #62	@ 0x3e
 80093a0:	2100      	movs	r1, #0
 80093a2:	4618      	mov	r0, r3
 80093a4:	f002 fada 	bl	800b95c <memset>

  return USBH_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3710      	adds	r7, #16
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b085      	sub	sp, #20
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80093bc:	2300      	movs	r3, #0
 80093be:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d016      	beq.n	80093f4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10e      	bne.n	80093ee <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80093d6:	1c59      	adds	r1, r3, #1
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	33de      	adds	r3, #222	@ 0xde
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]
 80093ec:	e004      	b.n	80093f8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80093ee:	2302      	movs	r3, #2
 80093f0:	73fb      	strb	r3, [r7, #15]
 80093f2:	e001      	b.n	80093f8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80093f4:	2302      	movs	r3, #2
 80093f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr

08009406 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009406:	b480      	push	{r7}
 8009408:	b085      	sub	sp, #20
 800940a:	af00      	add	r7, sp, #0
 800940c:	6078      	str	r0, [r7, #4]
 800940e:	460b      	mov	r3, r1
 8009410:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800941c:	78fa      	ldrb	r2, [r7, #3]
 800941e:	429a      	cmp	r2, r3
 8009420:	d204      	bcs.n	800942c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	78fa      	ldrb	r2, [r7, #3]
 8009426:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800942a:	e001      	b.n	8009430 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800942c:	2302      	movs	r3, #2
 800942e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3714      	adds	r7, #20
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800943e:	b480      	push	{r7}
 8009440:	b087      	sub	sp, #28
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	4608      	mov	r0, r1
 8009448:	4611      	mov	r1, r2
 800944a:	461a      	mov	r2, r3
 800944c:	4603      	mov	r3, r0
 800944e:	70fb      	strb	r3, [r7, #3]
 8009450:	460b      	mov	r3, r1
 8009452:	70bb      	strb	r3, [r7, #2]
 8009454:	4613      	mov	r3, r2
 8009456:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800945c:	2300      	movs	r3, #0
 800945e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009466:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009468:	e025      	b.n	80094b6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800946a:	7dfb      	ldrb	r3, [r7, #23]
 800946c:	221a      	movs	r2, #26
 800946e:	fb02 f303 	mul.w	r3, r2, r3
 8009472:	3308      	adds	r3, #8
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	4413      	add	r3, r2
 8009478:	3302      	adds	r3, #2
 800947a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	795b      	ldrb	r3, [r3, #5]
 8009480:	78fa      	ldrb	r2, [r7, #3]
 8009482:	429a      	cmp	r2, r3
 8009484:	d002      	beq.n	800948c <USBH_FindInterface+0x4e>
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	2bff      	cmp	r3, #255	@ 0xff
 800948a:	d111      	bne.n	80094b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009490:	78ba      	ldrb	r2, [r7, #2]
 8009492:	429a      	cmp	r2, r3
 8009494:	d002      	beq.n	800949c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009496:	78bb      	ldrb	r3, [r7, #2]
 8009498:	2bff      	cmp	r3, #255	@ 0xff
 800949a:	d109      	bne.n	80094b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094a0:	787a      	ldrb	r2, [r7, #1]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d002      	beq.n	80094ac <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094a6:	787b      	ldrb	r3, [r7, #1]
 80094a8:	2bff      	cmp	r3, #255	@ 0xff
 80094aa:	d101      	bne.n	80094b0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	e006      	b.n	80094be <USBH_FindInterface+0x80>
    }
    if_ix++;
 80094b0:	7dfb      	ldrb	r3, [r7, #23]
 80094b2:	3301      	adds	r3, #1
 80094b4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80094b6:	7dfb      	ldrb	r3, [r7, #23]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d9d6      	bls.n	800946a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80094bc:	23ff      	movs	r3, #255	@ 0xff
}
 80094be:	4618      	mov	r0, r3
 80094c0:	371c      	adds	r7, #28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b082      	sub	sp, #8
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f001 fcf4 	bl	800aec0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80094d8:	2101      	movs	r1, #1
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 fe0d 	bl	800b0fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af04      	add	r7, sp, #16
 80094f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80094f4:	2302      	movs	r3, #2
 80094f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b01      	cmp	r3, #1
 8009506:	d102      	bne.n	800950e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2203      	movs	r2, #3
 800950c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	b2db      	uxtb	r3, r3
 8009514:	2b0b      	cmp	r3, #11
 8009516:	f200 81bb 	bhi.w	8009890 <USBH_Process+0x3a4>
 800951a:	a201      	add	r2, pc, #4	@ (adr r2, 8009520 <USBH_Process+0x34>)
 800951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009520:	08009551 	.word	0x08009551
 8009524:	08009583 	.word	0x08009583
 8009528:	080095eb 	.word	0x080095eb
 800952c:	0800982b 	.word	0x0800982b
 8009530:	08009891 	.word	0x08009891
 8009534:	0800968b 	.word	0x0800968b
 8009538:	080097d1 	.word	0x080097d1
 800953c:	080096c1 	.word	0x080096c1
 8009540:	080096e1 	.word	0x080096e1
 8009544:	080096ff 	.word	0x080096ff
 8009548:	08009743 	.word	0x08009743
 800954c:	08009813 	.word	0x08009813
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	f000 819b 	beq.w	8009894 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009564:	20c8      	movs	r0, #200	@ 0xc8
 8009566:	f001 fe12 	bl	800b18e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f001 fd05 	bl	800af7a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009580:	e188      	b.n	8009894 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009588:	2b01      	cmp	r3, #1
 800958a:	d107      	bne.n	800959c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2202      	movs	r2, #2
 8009598:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800959a:	e18a      	b.n	80098b2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80095a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80095a6:	d914      	bls.n	80095d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80095ae:	3301      	adds	r3, #1
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80095be:	2b03      	cmp	r3, #3
 80095c0:	d903      	bls.n	80095ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	220d      	movs	r2, #13
 80095c6:	701a      	strb	r2, [r3, #0]
      break;
 80095c8:	e173      	b.n	80098b2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	701a      	strb	r2, [r3, #0]
      break;
 80095d0:	e16f      	b.n	80098b2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80095d8:	f103 020a 	add.w	r2, r3, #10
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80095e2:	200a      	movs	r0, #10
 80095e4:	f001 fdd3 	bl	800b18e <USBH_Delay>
      break;
 80095e8:	e163      	b.n	80098b2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d005      	beq.n	8009600 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095fa:	2104      	movs	r1, #4
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009600:	2064      	movs	r0, #100	@ 0x64
 8009602:	f001 fdc4 	bl	800b18e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 fc90 	bl	800af2c <USBH_LL_GetSpeed>
 800960c:	4603      	mov	r3, r0
 800960e:	461a      	mov	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2205      	movs	r2, #5
 800961a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800961c:	2100      	movs	r1, #0
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f001 fa9b 	bl	800ab5a <USBH_AllocPipe>
 8009624:	4603      	mov	r3, r0
 8009626:	461a      	mov	r2, r3
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800962c:	2180      	movs	r1, #128	@ 0x80
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 fa93 	bl	800ab5a <USBH_AllocPipe>
 8009634:	4603      	mov	r3, r0
 8009636:	461a      	mov	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	7919      	ldrb	r1, [r3, #4]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009650:	9202      	str	r2, [sp, #8]
 8009652:	2200      	movs	r2, #0
 8009654:	9201      	str	r2, [sp, #4]
 8009656:	9300      	str	r3, [sp, #0]
 8009658:	4603      	mov	r3, r0
 800965a:	2280      	movs	r2, #128	@ 0x80
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 fa4d 	bl	800aafc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	7959      	ldrb	r1, [r3, #5]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009676:	9202      	str	r2, [sp, #8]
 8009678:	2200      	movs	r2, #0
 800967a:	9201      	str	r2, [sp, #4]
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	4603      	mov	r3, r0
 8009680:	2200      	movs	r2, #0
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f001 fa3a 	bl	800aafc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009688:	e113      	b.n	80098b2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 f916 	bl	80098bc <USBH_HandleEnum>
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	f040 80fd 	bne.w	8009898 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d103      	bne.n	80096b8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2208      	movs	r2, #8
 80096b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096b6:	e0ef      	b.n	8009898 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2207      	movs	r2, #7
 80096bc:	701a      	strb	r2, [r3, #0]
      break;
 80096be:	e0eb      	b.n	8009898 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 80e8 	beq.w	800989c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80096d2:	2101      	movs	r1, #1
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2208      	movs	r2, #8
 80096dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80096de:	e0dd      	b.n	800989c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fc3a 	bl	8009f62 <USBH_SetCfg>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f040 80d5 	bne.w	80098a0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2209      	movs	r2, #9
 80096fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096fc:	e0d0      	b.n	80098a0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009704:	f003 0320 	and.w	r3, r3, #32
 8009708:	2b00      	cmp	r3, #0
 800970a:	d016      	beq.n	800973a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800970c:	2101      	movs	r1, #1
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fc4a 	bl	8009fa8 <USBH_SetFeature>
 8009714:	4603      	mov	r3, r0
 8009716:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	2b00      	cmp	r3, #0
 800971e:	d103      	bne.n	8009728 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	220a      	movs	r2, #10
 8009724:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009726:	e0bd      	b.n	80098a4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009728:	7bbb      	ldrb	r3, [r7, #14]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b03      	cmp	r3, #3
 800972e:	f040 80b9 	bne.w	80098a4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	220a      	movs	r2, #10
 8009736:	701a      	strb	r2, [r3, #0]
      break;
 8009738:	e0b4      	b.n	80098a4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	220a      	movs	r2, #10
 800973e:	701a      	strb	r2, [r3, #0]
      break;
 8009740:	e0b0      	b.n	80098a4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 80ad 	beq.w	80098a8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2200      	movs	r2, #0
 8009752:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]
 800975a:	e016      	b.n	800978a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800975c:	7bfa      	ldrb	r2, [r7, #15]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	32de      	adds	r2, #222	@ 0xde
 8009762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009766:	791a      	ldrb	r2, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800976e:	429a      	cmp	r2, r3
 8009770:	d108      	bne.n	8009784 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009772:	7bfa      	ldrb	r2, [r7, #15]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	32de      	adds	r2, #222	@ 0xde
 8009778:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009782:	e005      	b.n	8009790 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	3301      	adds	r3, #1
 8009788:	73fb      	strb	r3, [r7, #15]
 800978a:	7bfb      	ldrb	r3, [r7, #15]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d0e5      	beq.n	800975c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d016      	beq.n	80097c8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	4798      	blx	r3
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d109      	bne.n	80097c0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2206      	movs	r2, #6
 80097b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80097b8:	2103      	movs	r1, #3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097be:	e073      	b.n	80098a8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	220d      	movs	r2, #13
 80097c4:	701a      	strb	r2, [r3, #0]
      break;
 80097c6:	e06f      	b.n	80098a8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	220d      	movs	r2, #13
 80097cc:	701a      	strb	r2, [r3, #0]
      break;
 80097ce:	e06b      	b.n	80098a8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d017      	beq.n	800980a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
 80097e6:	4603      	mov	r3, r0
 80097e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80097ea:	7bbb      	ldrb	r3, [r7, #14]
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d103      	bne.n	80097fa <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	220b      	movs	r2, #11
 80097f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097f8:	e058      	b.n	80098ac <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d154      	bne.n	80098ac <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	220d      	movs	r2, #13
 8009806:	701a      	strb	r2, [r3, #0]
      break;
 8009808:	e050      	b.n	80098ac <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	220d      	movs	r2, #13
 800980e:	701a      	strb	r2, [r3, #0]
      break;
 8009810:	e04c      	b.n	80098ac <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009818:	2b00      	cmp	r3, #0
 800981a:	d049      	beq.n	80098b0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009822:	695b      	ldr	r3, [r3, #20]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	4798      	blx	r3
      }
      break;
 8009828:	e042      	b.n	80098b0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff fd4a 	bl	80092cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800983e:	2b00      	cmp	r3, #0
 8009840:	d009      	beq.n	8009856 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d005      	beq.n	800986c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009866:	2105      	movs	r1, #5
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b01      	cmp	r3, #1
 8009876:	d107      	bne.n	8009888 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff fe22 	bl	80094ca <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009886:	e014      	b.n	80098b2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f001 fb19 	bl	800aec0 <USBH_LL_Start>
      break;
 800988e:	e010      	b.n	80098b2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009890:	bf00      	nop
 8009892:	e00e      	b.n	80098b2 <USBH_Process+0x3c6>
      break;
 8009894:	bf00      	nop
 8009896:	e00c      	b.n	80098b2 <USBH_Process+0x3c6>
      break;
 8009898:	bf00      	nop
 800989a:	e00a      	b.n	80098b2 <USBH_Process+0x3c6>
    break;
 800989c:	bf00      	nop
 800989e:	e008      	b.n	80098b2 <USBH_Process+0x3c6>
      break;
 80098a0:	bf00      	nop
 80098a2:	e006      	b.n	80098b2 <USBH_Process+0x3c6>
      break;
 80098a4:	bf00      	nop
 80098a6:	e004      	b.n	80098b2 <USBH_Process+0x3c6>
      break;
 80098a8:	bf00      	nop
 80098aa:	e002      	b.n	80098b2 <USBH_Process+0x3c6>
      break;
 80098ac:	bf00      	nop
 80098ae:	e000      	b.n	80098b2 <USBH_Process+0x3c6>
      break;
 80098b0:	bf00      	nop
  }
  return USBH_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af04      	add	r7, sp, #16
 80098c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80098c4:	2301      	movs	r3, #1
 80098c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80098c8:	2301      	movs	r3, #1
 80098ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	2b07      	cmp	r3, #7
 80098d2:	f200 81bd 	bhi.w	8009c50 <USBH_HandleEnum+0x394>
 80098d6:	a201      	add	r2, pc, #4	@ (adr r2, 80098dc <USBH_HandleEnum+0x20>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	080098fd 	.word	0x080098fd
 80098e0:	080099b7 	.word	0x080099b7
 80098e4:	08009a21 	.word	0x08009a21
 80098e8:	08009aab 	.word	0x08009aab
 80098ec:	08009b15 	.word	0x08009b15
 80098f0:	08009b85 	.word	0x08009b85
 80098f4:	08009bcb 	.word	0x08009bcb
 80098f8:	08009c11 	.word	0x08009c11
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80098fc:	2108      	movs	r1, #8
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fa4c 	bl	8009d9c <USBH_Get_DevDesc>
 8009904:	4603      	mov	r3, r0
 8009906:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d12e      	bne.n	800996c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	7919      	ldrb	r1, [r3, #4]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009932:	9202      	str	r2, [sp, #8]
 8009934:	2200      	movs	r2, #0
 8009936:	9201      	str	r2, [sp, #4]
 8009938:	9300      	str	r3, [sp, #0]
 800993a:	4603      	mov	r3, r0
 800993c:	2280      	movs	r2, #128	@ 0x80
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 f8dc 	bl	800aafc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	7959      	ldrb	r1, [r3, #5]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009958:	9202      	str	r2, [sp, #8]
 800995a:	2200      	movs	r2, #0
 800995c:	9201      	str	r2, [sp, #4]
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	4603      	mov	r3, r0
 8009962:	2200      	movs	r2, #0
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f001 f8c9 	bl	800aafc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800996a:	e173      	b.n	8009c54 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	2b03      	cmp	r3, #3
 8009970:	f040 8170 	bne.w	8009c54 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800997a:	3301      	adds	r3, #1
 800997c:	b2da      	uxtb	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800998a:	2b03      	cmp	r3, #3
 800998c:	d903      	bls.n	8009996 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	220d      	movs	r2, #13
 8009992:	701a      	strb	r2, [r3, #0]
      break;
 8009994:	e15e      	b.n	8009c54 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	795b      	ldrb	r3, [r3, #5]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 f8fd 	bl	800ab9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	791b      	ldrb	r3, [r3, #4]
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 f8f7 	bl	800ab9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
      break;
 80099b4:	e14e      	b.n	8009c54 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80099b6:	2112      	movs	r1, #18
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f9ef 	bl	8009d9c <USBH_Get_DevDesc>
 80099be:	4603      	mov	r3, r0
 80099c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099c2:	7bbb      	ldrb	r3, [r7, #14]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d103      	bne.n	80099d0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099ce:	e143      	b.n	8009c58 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	f040 8140 	bne.w	8009c58 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099de:	3301      	adds	r3, #1
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80099ee:	2b03      	cmp	r3, #3
 80099f0:	d903      	bls.n	80099fa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	220d      	movs	r2, #13
 80099f6:	701a      	strb	r2, [r3, #0]
      break;
 80099f8:	e12e      	b.n	8009c58 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	795b      	ldrb	r3, [r3, #5]
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f001 f8cb 	bl	800ab9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f001 f8c5 	bl	800ab9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	701a      	strb	r2, [r3, #0]
      break;
 8009a1e:	e11b      	b.n	8009c58 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009a20:	2101      	movs	r1, #1
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	f000 fa79 	bl	8009f1a <USBH_SetAddress>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d130      	bne.n	8009a94 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009a32:	2002      	movs	r0, #2
 8009a34:	f001 fbab 	bl	800b18e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2203      	movs	r2, #3
 8009a44:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	7919      	ldrb	r1, [r3, #4]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a5a:	9202      	str	r2, [sp, #8]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	9201      	str	r2, [sp, #4]
 8009a60:	9300      	str	r3, [sp, #0]
 8009a62:	4603      	mov	r3, r0
 8009a64:	2280      	movs	r2, #128	@ 0x80
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 f848 	bl	800aafc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	7959      	ldrb	r1, [r3, #5]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a7c:	687a      	ldr	r2, [r7, #4]
 8009a7e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a80:	9202      	str	r2, [sp, #8]
 8009a82:	2200      	movs	r2, #0
 8009a84:	9201      	str	r2, [sp, #4]
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 f835 	bl	800aafc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009a92:	e0e3      	b.n	8009c5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	2b03      	cmp	r3, #3
 8009a98:	f040 80e0 	bne.w	8009c5c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	220d      	movs	r2, #13
 8009aa0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	705a      	strb	r2, [r3, #1]
      break;
 8009aa8:	e0d8      	b.n	8009c5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009aaa:	2109      	movs	r1, #9
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 f9a1 	bl	8009df4 <USBH_Get_CfgDesc>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d103      	bne.n	8009ac4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2204      	movs	r2, #4
 8009ac0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009ac2:	e0cd      	b.n	8009c60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	2b03      	cmp	r3, #3
 8009ac8:	f040 80ca 	bne.w	8009c60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	b2da      	uxtb	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	d903      	bls.n	8009aee <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	220d      	movs	r2, #13
 8009aea:	701a      	strb	r2, [r3, #0]
      break;
 8009aec:	e0b8      	b.n	8009c60 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	795b      	ldrb	r3, [r3, #5]
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f001 f851 	bl	800ab9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	791b      	ldrb	r3, [r3, #4]
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 f84b 	bl	800ab9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	701a      	strb	r2, [r3, #0]
      break;
 8009b12:	e0a5      	b.n	8009c60 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f969 	bl	8009df4 <USBH_Get_CfgDesc>
 8009b22:	4603      	mov	r3, r0
 8009b24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d103      	bne.n	8009b34 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2205      	movs	r2, #5
 8009b30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b32:	e097      	b.n	8009c64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b03      	cmp	r3, #3
 8009b38:	f040 8094 	bne.w	8009c64 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b42:	3301      	adds	r3, #1
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d903      	bls.n	8009b5e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	220d      	movs	r2, #13
 8009b5a:	701a      	strb	r2, [r3, #0]
      break;
 8009b5c:	e082      	b.n	8009c64 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	795b      	ldrb	r3, [r3, #5]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f001 f819 	bl	800ab9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	791b      	ldrb	r3, [r3, #4]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f001 f813 	bl	800ab9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	701a      	strb	r2, [r3, #0]
      break;
 8009b82:	e06f      	b.n	8009c64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d019      	beq.n	8009bc2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009b9a:	23ff      	movs	r3, #255	@ 0xff
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f953 	bl	8009e48 <USBH_Get_StringDesc>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ba6:	7bbb      	ldrb	r3, [r7, #14]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d103      	bne.n	8009bb4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2206      	movs	r2, #6
 8009bb0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bb2:	e059      	b.n	8009c68 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
 8009bb6:	2b03      	cmp	r3, #3
 8009bb8:	d156      	bne.n	8009c68 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2206      	movs	r2, #6
 8009bbe:	705a      	strb	r2, [r3, #1]
      break;
 8009bc0:	e052      	b.n	8009c68 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2206      	movs	r2, #6
 8009bc6:	705a      	strb	r2, [r3, #1]
      break;
 8009bc8:	e04e      	b.n	8009c68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d019      	beq.n	8009c08 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009be0:	23ff      	movs	r3, #255	@ 0xff
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f930 	bl	8009e48 <USBH_Get_StringDesc>
 8009be8:	4603      	mov	r3, r0
 8009bea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d103      	bne.n	8009bfa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2207      	movs	r2, #7
 8009bf6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009bf8:	e038      	b.n	8009c6c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d135      	bne.n	8009c6c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2207      	movs	r2, #7
 8009c04:	705a      	strb	r2, [r3, #1]
      break;
 8009c06:	e031      	b.n	8009c6c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2207      	movs	r2, #7
 8009c0c:	705a      	strb	r2, [r3, #1]
      break;
 8009c0e:	e02d      	b.n	8009c6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d017      	beq.n	8009c4a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c26:	23ff      	movs	r3, #255	@ 0xff
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f90d 	bl	8009e48 <USBH_Get_StringDesc>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c32:	7bbb      	ldrb	r3, [r7, #14]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d102      	bne.n	8009c3e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c3c:	e018      	b.n	8009c70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c3e:	7bbb      	ldrb	r3, [r7, #14]
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d115      	bne.n	8009c70 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	73fb      	strb	r3, [r7, #15]
      break;
 8009c48:	e012      	b.n	8009c70 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009c4e:	e00f      	b.n	8009c70 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009c50:	bf00      	nop
 8009c52:	e00e      	b.n	8009c72 <USBH_HandleEnum+0x3b6>
      break;
 8009c54:	bf00      	nop
 8009c56:	e00c      	b.n	8009c72 <USBH_HandleEnum+0x3b6>
      break;
 8009c58:	bf00      	nop
 8009c5a:	e00a      	b.n	8009c72 <USBH_HandleEnum+0x3b6>
      break;
 8009c5c:	bf00      	nop
 8009c5e:	e008      	b.n	8009c72 <USBH_HandleEnum+0x3b6>
      break;
 8009c60:	bf00      	nop
 8009c62:	e006      	b.n	8009c72 <USBH_HandleEnum+0x3b6>
      break;
 8009c64:	bf00      	nop
 8009c66:	e004      	b.n	8009c72 <USBH_HandleEnum+0x3b6>
      break;
 8009c68:	bf00      	nop
 8009c6a:	e002      	b.n	8009c72 <USBH_HandleEnum+0x3b6>
      break;
 8009c6c:	bf00      	nop
 8009c6e:	e000      	b.n	8009c72 <USBH_HandleEnum+0x3b6>
      break;
 8009c70:	bf00      	nop
  }
  return Status;
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c74:	4618      	mov	r0, r3
 8009c76:	3710      	adds	r7, #16
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009c8e:	bf00      	nop
 8009c90:	370c      	adds	r7, #12
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b082      	sub	sp, #8
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f804 	bl	8009cbe <USBH_HandleSof>
}
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b082      	sub	sp, #8
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b0b      	cmp	r3, #11
 8009cce:	d10a      	bne.n	8009ce6 <USBH_HandleSof+0x28>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d005      	beq.n	8009ce6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ce0:	699b      	ldr	r3, [r3, #24]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	4798      	blx	r3
  }
}
 8009ce6:	bf00      	nop
 8009ce8:	3708      	adds	r7, #8
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009cfe:	bf00      	nop
}
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009d1a:	bf00      	nop
}
 8009d1c:	370c      	adds	r7, #12
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d26:	b480      	push	{r7}
 8009d28:	b083      	sub	sp, #12
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 f8be 	bl	800aef6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	791b      	ldrb	r3, [r3, #4]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 ff0b 	bl	800ab9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	795b      	ldrb	r3, [r3, #5]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 ff05 	bl	800ab9c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009da8:	887b      	ldrh	r3, [r7, #2]
 8009daa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dae:	d901      	bls.n	8009db4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e01b      	b.n	8009dec <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009dba:	887b      	ldrh	r3, [r7, #2]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f872 	bl	8009eb0 <USBH_GetDescriptor>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d109      	bne.n	8009dea <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009ddc:	887a      	ldrh	r2, [r7, #2]
 8009dde:	4619      	mov	r1, r3
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f929 	bl	800a038 <USBH_ParseDevDesc>
 8009de6:	4603      	mov	r3, r0
 8009de8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}

08009df4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af02      	add	r7, sp, #8
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	331c      	adds	r3, #28
 8009e04:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009e06:	887b      	ldrh	r3, [r7, #2]
 8009e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e0c:	d901      	bls.n	8009e12 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e016      	b.n	8009e40 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009e12:	887b      	ldrh	r3, [r7, #2]
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f846 	bl	8009eb0 <USBH_GetDescriptor>
 8009e24:	4603      	mov	r3, r0
 8009e26:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d107      	bne.n	8009e3e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009e2e:	887b      	ldrh	r3, [r7, #2]
 8009e30:	461a      	mov	r2, r3
 8009e32:	68b9      	ldr	r1, [r7, #8]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f9af 	bl	800a198 <USBH_ParseCfgDesc>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af02      	add	r7, sp, #8
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	607a      	str	r2, [r7, #4]
 8009e52:	461a      	mov	r2, r3
 8009e54:	460b      	mov	r3, r1
 8009e56:	72fb      	strb	r3, [r7, #11]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009e5c:	893b      	ldrh	r3, [r7, #8]
 8009e5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e62:	d802      	bhi.n	8009e6a <USBH_Get_StringDesc+0x22>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009e6a:	2303      	movs	r3, #3
 8009e6c:	e01c      	b.n	8009ea8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009e6e:	7afb      	ldrb	r3, [r7, #11]
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009e76:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009e7e:	893b      	ldrh	r3, [r7, #8]
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	460b      	mov	r3, r1
 8009e84:	2100      	movs	r1, #0
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f000 f812 	bl	8009eb0 <USBH_GetDescriptor>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d107      	bne.n	8009ea6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009e9c:	893a      	ldrh	r2, [r7, #8]
 8009e9e:	6879      	ldr	r1, [r7, #4]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fb8d 	bl	800a5c0 <USBH_ParseStringDesc>
  }

  return status;
 8009ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b084      	sub	sp, #16
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	607b      	str	r3, [r7, #4]
 8009eba:	460b      	mov	r3, r1
 8009ebc:	72fb      	strb	r3, [r7, #11]
 8009ebe:	4613      	mov	r3, r2
 8009ec0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	789b      	ldrb	r3, [r3, #2]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d11c      	bne.n	8009f04 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009eca:	7afb      	ldrb	r3, [r7, #11]
 8009ecc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2206      	movs	r2, #6
 8009eda:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	893a      	ldrh	r2, [r7, #8]
 8009ee0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009ee2:	893b      	ldrh	r3, [r7, #8]
 8009ee4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ee8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009eec:	d104      	bne.n	8009ef8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f240 4209 	movw	r2, #1033	@ 0x409
 8009ef4:	829a      	strh	r2, [r3, #20]
 8009ef6:	e002      	b.n	8009efe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2200      	movs	r2, #0
 8009efc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8b3a      	ldrh	r2, [r7, #24]
 8009f02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009f04:	8b3b      	ldrh	r3, [r7, #24]
 8009f06:	461a      	mov	r2, r3
 8009f08:	6879      	ldr	r1, [r7, #4]
 8009f0a:	68f8      	ldr	r0, [r7, #12]
 8009f0c:	f000 fba5 	bl	800a65a <USBH_CtlReq>
 8009f10:	4603      	mov	r3, r0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	460b      	mov	r3, r1
 8009f24:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	789b      	ldrb	r3, [r3, #2]
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d10f      	bne.n	8009f4e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2205      	movs	r2, #5
 8009f38:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f3a:	78fb      	ldrb	r3, [r7, #3]
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2100      	movs	r1, #0
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fb81 	bl	800a65a <USBH_CtlReq>
 8009f58:	4603      	mov	r3, r0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	789b      	ldrb	r3, [r3, #2]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d10e      	bne.n	8009f94 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2209      	movs	r2, #9
 8009f80:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	887a      	ldrh	r2, [r7, #2]
 8009f86:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009f94:	2200      	movs	r2, #0
 8009f96:	2100      	movs	r1, #0
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fb5e 	bl	800a65a <USBH_CtlReq>
 8009f9e:	4603      	mov	r3, r0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	789b      	ldrb	r3, [r3, #2]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d10f      	bne.n	8009fdc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2203      	movs	r2, #3
 8009fc6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2100      	movs	r1, #0
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fb3a 	bl	800a65a <USBH_CtlReq>
 8009fe6:	4603      	mov	r3, r0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	789b      	ldrb	r3, [r3, #2]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d10f      	bne.n	800a024 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a016:	78fb      	ldrb	r3, [r7, #3]
 800a018:	b29a      	uxth	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a024:	2200      	movs	r2, #0
 800a026:	2100      	movs	r1, #0
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fb16 	bl	800a65a <USBH_CtlReq>
 800a02e:	4603      	mov	r3, r0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a038:	b480      	push	{r7}
 800a03a:	b087      	sub	sp, #28
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	4613      	mov	r3, r2
 800a044:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a04c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a04e:	2300      	movs	r3, #0
 800a050:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d101      	bne.n	800a05c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a058:	2302      	movs	r3, #2
 800a05a:	e094      	b.n	800a186 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	785a      	ldrb	r2, [r3, #1]
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3302      	adds	r3, #2
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	461a      	mov	r2, r3
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	3303      	adds	r3, #3
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	021b      	lsls	r3, r3, #8
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	4313      	orrs	r3, r2
 800a080:	b29a      	uxth	r2, r3
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	791a      	ldrb	r2, [r3, #4]
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	795a      	ldrb	r2, [r3, #5]
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	799a      	ldrb	r2, [r3, #6]
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	79da      	ldrb	r2, [r3, #7]
 800a0a2:	693b      	ldr	r3, [r7, #16]
 800a0a4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d004      	beq.n	800a0ba <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d11b      	bne.n	800a0f2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	79db      	ldrb	r3, [r3, #7]
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	dc0f      	bgt.n	800a0e2 <USBH_ParseDevDesc+0xaa>
 800a0c2:	2b08      	cmp	r3, #8
 800a0c4:	db0f      	blt.n	800a0e6 <USBH_ParseDevDesc+0xae>
 800a0c6:	3b08      	subs	r3, #8
 800a0c8:	4a32      	ldr	r2, [pc, #200]	@ (800a194 <USBH_ParseDevDesc+0x15c>)
 800a0ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bf14      	ite	ne
 800a0d6:	2301      	movne	r3, #1
 800a0d8:	2300      	moveq	r3, #0
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <USBH_ParseDevDesc+0xb6>
 800a0e0:	e001      	b.n	800a0e6 <USBH_ParseDevDesc+0xae>
 800a0e2:	2b40      	cmp	r3, #64	@ 0x40
 800a0e4:	d003      	beq.n	800a0ee <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	2208      	movs	r2, #8
 800a0ea:	71da      	strb	r2, [r3, #7]
        break;
 800a0ec:	e000      	b.n	800a0f0 <USBH_ParseDevDesc+0xb8>
        break;
 800a0ee:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a0f0:	e00e      	b.n	800a110 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d107      	bne.n	800a10c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	79db      	ldrb	r3, [r3, #7]
 800a100:	2b08      	cmp	r3, #8
 800a102:	d005      	beq.n	800a110 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2208      	movs	r2, #8
 800a108:	71da      	strb	r2, [r3, #7]
 800a10a:	e001      	b.n	800a110 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a10c:	2303      	movs	r3, #3
 800a10e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a110:	88fb      	ldrh	r3, [r7, #6]
 800a112:	2b08      	cmp	r3, #8
 800a114:	d936      	bls.n	800a184 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	3308      	adds	r3, #8
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	461a      	mov	r2, r3
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	3309      	adds	r3, #9
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	021b      	lsls	r3, r3, #8
 800a126:	b29b      	uxth	r3, r3
 800a128:	4313      	orrs	r3, r2
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	330a      	adds	r3, #10
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	330b      	adds	r3, #11
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	021b      	lsls	r3, r3, #8
 800a140:	b29b      	uxth	r3, r3
 800a142:	4313      	orrs	r3, r2
 800a144:	b29a      	uxth	r2, r3
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	330c      	adds	r3, #12
 800a14e:	781b      	ldrb	r3, [r3, #0]
 800a150:	461a      	mov	r2, r3
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	330d      	adds	r3, #13
 800a156:	781b      	ldrb	r3, [r3, #0]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	4313      	orrs	r3, r2
 800a15e:	b29a      	uxth	r2, r3
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	7b9a      	ldrb	r2, [r3, #14]
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	7bda      	ldrb	r2, [r3, #15]
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	7c1a      	ldrb	r2, [r3, #16]
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	7c5a      	ldrb	r2, [r3, #17]
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a184:	7dfb      	ldrb	r3, [r7, #23]
}
 800a186:	4618      	mov	r0, r3
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	01000101 	.word	0x01000101

0800a198 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08c      	sub	sp, #48	@ 0x30
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a1ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a1c6:	2302      	movs	r3, #2
 800a1c8:	e0da      	b.n	800a380 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	2b09      	cmp	r3, #9
 800a1d4:	d002      	beq.n	800a1dc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d8:	2209      	movs	r2, #9
 800a1da:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	781a      	ldrb	r2, [r3, #0]
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	785a      	ldrb	r2, [r3, #1]
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	3303      	adds	r3, #3
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	021b      	lsls	r3, r3, #8
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	4313      	orrs	r3, r2
 800a200:	b29b      	uxth	r3, r3
 800a202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a206:	bf28      	it	cs
 800a208:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	791a      	ldrb	r2, [r3, #4]
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	795a      	ldrb	r2, [r3, #5]
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	799a      	ldrb	r2, [r3, #6]
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	79da      	ldrb	r2, [r3, #7]
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	7a1a      	ldrb	r2, [r3, #8]
 800a236:	6a3b      	ldr	r3, [r7, #32]
 800a238:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	2b09      	cmp	r3, #9
 800a23e:	f240 809d 	bls.w	800a37c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a242:	2309      	movs	r3, #9
 800a244:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a24a:	e081      	b.n	800a350 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a24c:	f107 0316 	add.w	r3, r7, #22
 800a250:	4619      	mov	r1, r3
 800a252:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a254:	f000 f9e7 	bl	800a626 <USBH_GetNextDesc>
 800a258:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25c:	785b      	ldrb	r3, [r3, #1]
 800a25e:	2b04      	cmp	r3, #4
 800a260:	d176      	bne.n	800a350 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b09      	cmp	r3, #9
 800a268:	d002      	beq.n	800a270 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26c:	2209      	movs	r2, #9
 800a26e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a274:	221a      	movs	r2, #26
 800a276:	fb02 f303 	mul.w	r3, r2, r3
 800a27a:	3308      	adds	r3, #8
 800a27c:	6a3a      	ldr	r2, [r7, #32]
 800a27e:	4413      	add	r3, r2
 800a280:	3302      	adds	r3, #2
 800a282:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a286:	69f8      	ldr	r0, [r7, #28]
 800a288:	f000 f87e 	bl	800a388 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a28c:	2300      	movs	r3, #0
 800a28e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a292:	2300      	movs	r3, #0
 800a294:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a296:	e043      	b.n	800a320 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a298:	f107 0316 	add.w	r3, r7, #22
 800a29c:	4619      	mov	r1, r3
 800a29e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2a0:	f000 f9c1 	bl	800a626 <USBH_GetNextDesc>
 800a2a4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	785b      	ldrb	r3, [r3, #1]
 800a2aa:	2b05      	cmp	r3, #5
 800a2ac:	d138      	bne.n	800a320 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	795b      	ldrb	r3, [r3, #5]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d113      	bne.n	800a2de <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d003      	beq.n	800a2c6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	799b      	ldrb	r3, [r3, #6]
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d10b      	bne.n	800a2de <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	79db      	ldrb	r3, [r3, #7]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10b      	bne.n	800a2e6 <USBH_ParseCfgDesc+0x14e>
 800a2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	2b09      	cmp	r3, #9
 800a2d4:	d007      	beq.n	800a2e6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d8:	2209      	movs	r2, #9
 800a2da:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2dc:	e003      	b.n	800a2e6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e0:	2207      	movs	r2, #7
 800a2e2:	701a      	strb	r2, [r3, #0]
 800a2e4:	e000      	b.n	800a2e8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a2e6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a2f0:	3201      	adds	r2, #1
 800a2f2:	00d2      	lsls	r2, r2, #3
 800a2f4:	211a      	movs	r1, #26
 800a2f6:	fb01 f303 	mul.w	r3, r1, r3
 800a2fa:	4413      	add	r3, r2
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	6a3a      	ldr	r2, [r7, #32]
 800a300:	4413      	add	r3, r2
 800a302:	3304      	adds	r3, #4
 800a304:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a308:	69b9      	ldr	r1, [r7, #24]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 f870 	bl	800a3f0 <USBH_ParseEPDesc>
 800a310:	4603      	mov	r3, r0
 800a312:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a316:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a31a:	3301      	adds	r3, #1
 800a31c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	791b      	ldrb	r3, [r3, #4]
 800a324:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a328:	429a      	cmp	r2, r3
 800a32a:	d204      	bcs.n	800a336 <USBH_ParseCfgDesc+0x19e>
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	885a      	ldrh	r2, [r3, #2]
 800a330:	8afb      	ldrh	r3, [r7, #22]
 800a332:	429a      	cmp	r2, r3
 800a334:	d8b0      	bhi.n	800a298 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	791b      	ldrb	r3, [r3, #4]
 800a33a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a33e:	429a      	cmp	r2, r3
 800a340:	d201      	bcs.n	800a346 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a342:	2303      	movs	r3, #3
 800a344:	e01c      	b.n	800a380 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a346:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a34a:	3301      	adds	r3, #1
 800a34c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a354:	2b01      	cmp	r3, #1
 800a356:	d805      	bhi.n	800a364 <USBH_ParseCfgDesc+0x1cc>
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	885a      	ldrh	r2, [r3, #2]
 800a35c:	8afb      	ldrh	r3, [r7, #22]
 800a35e:	429a      	cmp	r2, r3
 800a360:	f63f af74 	bhi.w	800a24c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a364:	6a3b      	ldr	r3, [r7, #32]
 800a366:	791b      	ldrb	r3, [r3, #4]
 800a368:	2b02      	cmp	r3, #2
 800a36a:	bf28      	it	cs
 800a36c:	2302      	movcs	r3, #2
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a374:	429a      	cmp	r2, r3
 800a376:	d201      	bcs.n	800a37c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a378:	2303      	movs	r3, #3
 800a37a:	e001      	b.n	800a380 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a37c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a380:	4618      	mov	r0, r3
 800a382:	3730      	adds	r7, #48	@ 0x30
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	781a      	ldrb	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	785a      	ldrb	r2, [r3, #1]
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	789a      	ldrb	r2, [r3, #2]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	78da      	ldrb	r2, [r3, #3]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	3304      	adds	r3, #4
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	2b02      	cmp	r3, #2
 800a3ba:	bf28      	it	cs
 800a3bc:	2302      	movcs	r3, #2
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	795a      	ldrb	r2, [r3, #5]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	799a      	ldrb	r2, [r3, #6]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	79da      	ldrb	r2, [r3, #7]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	7a1a      	ldrb	r2, [r3, #8]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	721a      	strb	r2, [r3, #8]
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	781a      	ldrb	r2, [r3, #0]
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	785a      	ldrb	r2, [r3, #1]
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	789a      	ldrb	r2, [r3, #2]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	78da      	ldrb	r2, [r3, #3]
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	3304      	adds	r3, #4
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	461a      	mov	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3305      	adds	r3, #5
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	021b      	lsls	r3, r3, #8
 800a430:	b29b      	uxth	r3, r3
 800a432:	4313      	orrs	r3, r2
 800a434:	b29a      	uxth	r2, r3
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	799a      	ldrb	r2, [r3, #6]
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	889b      	ldrh	r3, [r3, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d009      	beq.n	800a45e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a44e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a452:	d804      	bhi.n	800a45e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a45c:	d901      	bls.n	800a462 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a45e:	2303      	movs	r3, #3
 800a460:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d136      	bne.n	800a4da <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	78db      	ldrb	r3, [r3, #3]
 800a470:	f003 0303 	and.w	r3, r3, #3
 800a474:	2b02      	cmp	r3, #2
 800a476:	d108      	bne.n	800a48a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	889b      	ldrh	r3, [r3, #4]
 800a47c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a480:	f240 8097 	bls.w	800a5b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a484:	2303      	movs	r3, #3
 800a486:	75fb      	strb	r3, [r7, #23]
 800a488:	e093      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	78db      	ldrb	r3, [r3, #3]
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	2b00      	cmp	r3, #0
 800a494:	d107      	bne.n	800a4a6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	889b      	ldrh	r3, [r3, #4]
 800a49a:	2b40      	cmp	r3, #64	@ 0x40
 800a49c:	f240 8089 	bls.w	800a5b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	75fb      	strb	r3, [r7, #23]
 800a4a4:	e085      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	78db      	ldrb	r3, [r3, #3]
 800a4aa:	f003 0303 	and.w	r3, r3, #3
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d005      	beq.n	800a4be <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	78db      	ldrb	r3, [r3, #3]
 800a4b6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d10a      	bne.n	800a4d4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	799b      	ldrb	r3, [r3, #6]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d003      	beq.n	800a4ce <USBH_ParseEPDesc+0xde>
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	799b      	ldrb	r3, [r3, #6]
 800a4ca:	2b10      	cmp	r3, #16
 800a4cc:	d970      	bls.n	800a5b0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a4d2:	e06d      	b.n	800a5b0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	75fb      	strb	r3, [r7, #23]
 800a4d8:	e06b      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d13c      	bne.n	800a55e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	78db      	ldrb	r3, [r3, #3]
 800a4e8:	f003 0303 	and.w	r3, r3, #3
 800a4ec:	2b02      	cmp	r3, #2
 800a4ee:	d005      	beq.n	800a4fc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	78db      	ldrb	r3, [r3, #3]
 800a4f4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d106      	bne.n	800a50a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	889b      	ldrh	r3, [r3, #4]
 800a500:	2b40      	cmp	r3, #64	@ 0x40
 800a502:	d956      	bls.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a504:	2303      	movs	r3, #3
 800a506:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a508:	e053      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	78db      	ldrb	r3, [r3, #3]
 800a50e:	f003 0303 	and.w	r3, r3, #3
 800a512:	2b01      	cmp	r3, #1
 800a514:	d10e      	bne.n	800a534 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	799b      	ldrb	r3, [r3, #6]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d007      	beq.n	800a52e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a522:	2b10      	cmp	r3, #16
 800a524:	d803      	bhi.n	800a52e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a52a:	2b40      	cmp	r3, #64	@ 0x40
 800a52c:	d941      	bls.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a52e:	2303      	movs	r3, #3
 800a530:	75fb      	strb	r3, [r7, #23]
 800a532:	e03e      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	78db      	ldrb	r3, [r3, #3]
 800a538:	f003 0303 	and.w	r3, r3, #3
 800a53c:	2b03      	cmp	r3, #3
 800a53e:	d10b      	bne.n	800a558 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	799b      	ldrb	r3, [r3, #6]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d004      	beq.n	800a552 <USBH_ParseEPDesc+0x162>
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	889b      	ldrh	r3, [r3, #4]
 800a54c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a550:	d32f      	bcc.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a552:	2303      	movs	r3, #3
 800a554:	75fb      	strb	r3, [r7, #23]
 800a556:	e02c      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a558:	2303      	movs	r3, #3
 800a55a:	75fb      	strb	r3, [r7, #23]
 800a55c:	e029      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a564:	2b02      	cmp	r3, #2
 800a566:	d120      	bne.n	800a5aa <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	78db      	ldrb	r3, [r3, #3]
 800a56c:	f003 0303 	and.w	r3, r3, #3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d106      	bne.n	800a582 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	889b      	ldrh	r3, [r3, #4]
 800a578:	2b08      	cmp	r3, #8
 800a57a:	d01a      	beq.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a57c:	2303      	movs	r3, #3
 800a57e:	75fb      	strb	r3, [r7, #23]
 800a580:	e017      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	78db      	ldrb	r3, [r3, #3]
 800a586:	f003 0303 	and.w	r3, r3, #3
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d10a      	bne.n	800a5a4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	799b      	ldrb	r3, [r3, #6]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <USBH_ParseEPDesc+0x1ae>
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	889b      	ldrh	r3, [r3, #4]
 800a59a:	2b08      	cmp	r3, #8
 800a59c:	d909      	bls.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	75fb      	strb	r3, [r7, #23]
 800a5a2:	e006      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	75fb      	strb	r3, [r7, #23]
 800a5a8:	e003      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a5aa:	2303      	movs	r3, #3
 800a5ac:	75fb      	strb	r3, [r7, #23]
 800a5ae:	e000      	b.n	800a5b2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a5b0:	bf00      	nop
  }

  return status;
 800a5b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	371c      	adds	r7, #28
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b087      	sub	sp, #28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d120      	bne.n	800a61a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	1e9a      	subs	r2, r3, #2
 800a5de:	88fb      	ldrh	r3, [r7, #6]
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	bf28      	it	cs
 800a5e4:	4613      	movcs	r3, r2
 800a5e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3302      	adds	r3, #2
 800a5ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	82fb      	strh	r3, [r7, #22]
 800a5f2:	e00b      	b.n	800a60c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a5f4:	8afb      	ldrh	r3, [r7, #22]
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	781a      	ldrb	r2, [r3, #0]
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	3301      	adds	r3, #1
 800a604:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a606:	8afb      	ldrh	r3, [r7, #22]
 800a608:	3302      	adds	r3, #2
 800a60a:	82fb      	strh	r3, [r7, #22]
 800a60c:	8afa      	ldrh	r2, [r7, #22]
 800a60e:	8abb      	ldrh	r3, [r7, #20]
 800a610:	429a      	cmp	r2, r3
 800a612:	d3ef      	bcc.n	800a5f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2200      	movs	r2, #0
 800a618:	701a      	strb	r2, [r3, #0]
  }
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a626:	b480      	push	{r7}
 800a628:	b085      	sub	sp, #20
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
 800a62e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	7812      	ldrb	r2, [r2, #0]
 800a638:	4413      	add	r3, r2
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4413      	add	r3, r2
 800a64a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a64c:	68fb      	ldr	r3, [r7, #12]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b086      	sub	sp, #24
 800a65e:	af00      	add	r7, sp, #0
 800a660:	60f8      	str	r0, [r7, #12]
 800a662:	60b9      	str	r1, [r7, #8]
 800a664:	4613      	mov	r3, r2
 800a666:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a668:	2301      	movs	r3, #1
 800a66a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	789b      	ldrb	r3, [r3, #2]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d002      	beq.n	800a67a <USBH_CtlReq+0x20>
 800a674:	2b02      	cmp	r3, #2
 800a676:	d00f      	beq.n	800a698 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a678:	e027      	b.n	800a6ca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	88fa      	ldrh	r2, [r7, #6]
 800a684:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2201      	movs	r2, #1
 800a68a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2202      	movs	r2, #2
 800a690:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a692:	2301      	movs	r3, #1
 800a694:	75fb      	strb	r3, [r7, #23]
      break;
 800a696:	e018      	b.n	800a6ca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f000 f81b 	bl	800a6d4 <USBH_HandleControl>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d002      	beq.n	800a6ae <USBH_CtlReq+0x54>
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d106      	bne.n	800a6bc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	761a      	strb	r2, [r3, #24]
      break;
 800a6ba:	e005      	b.n	800a6c8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a6bc:	7dfb      	ldrb	r3, [r7, #23]
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d102      	bne.n	800a6c8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	709a      	strb	r2, [r3, #2]
      break;
 800a6c8:	bf00      	nop
  }
  return status;
 800a6ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b086      	sub	sp, #24
 800a6d8:	af02      	add	r7, sp, #8
 800a6da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	7e1b      	ldrb	r3, [r3, #24]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	2b0a      	cmp	r3, #10
 800a6ec:	f200 8156 	bhi.w	800a99c <USBH_HandleControl+0x2c8>
 800a6f0:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f8 <USBH_HandleControl+0x24>)
 800a6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f6:	bf00      	nop
 800a6f8:	0800a725 	.word	0x0800a725
 800a6fc:	0800a73f 	.word	0x0800a73f
 800a700:	0800a7a9 	.word	0x0800a7a9
 800a704:	0800a7cf 	.word	0x0800a7cf
 800a708:	0800a807 	.word	0x0800a807
 800a70c:	0800a831 	.word	0x0800a831
 800a710:	0800a883 	.word	0x0800a883
 800a714:	0800a8a5 	.word	0x0800a8a5
 800a718:	0800a8e1 	.word	0x0800a8e1
 800a71c:	0800a907 	.word	0x0800a907
 800a720:	0800a945 	.word	0x0800a945
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f103 0110 	add.w	r1, r3, #16
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	795b      	ldrb	r3, [r3, #5]
 800a72e:	461a      	mov	r2, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f943 	bl	800a9bc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2202      	movs	r2, #2
 800a73a:	761a      	strb	r2, [r3, #24]
      break;
 800a73c:	e139      	b.n	800a9b2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	795b      	ldrb	r3, [r3, #5]
 800a742:	4619      	mov	r1, r3
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fcc5 	bl	800b0d4 <USBH_LL_GetURBState>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d11e      	bne.n	800a792 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	7c1b      	ldrb	r3, [r3, #16]
 800a758:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a75c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	8adb      	ldrh	r3, [r3, #22]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00a      	beq.n	800a77c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a766:	7b7b      	ldrb	r3, [r7, #13]
 800a768:	2b80      	cmp	r3, #128	@ 0x80
 800a76a:	d103      	bne.n	800a774 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2203      	movs	r2, #3
 800a770:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a772:	e115      	b.n	800a9a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2205      	movs	r2, #5
 800a778:	761a      	strb	r2, [r3, #24]
      break;
 800a77a:	e111      	b.n	800a9a0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a77c:	7b7b      	ldrb	r3, [r7, #13]
 800a77e:	2b80      	cmp	r3, #128	@ 0x80
 800a780:	d103      	bne.n	800a78a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2209      	movs	r2, #9
 800a786:	761a      	strb	r2, [r3, #24]
      break;
 800a788:	e10a      	b.n	800a9a0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2207      	movs	r2, #7
 800a78e:	761a      	strb	r2, [r3, #24]
      break;
 800a790:	e106      	b.n	800a9a0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a792:	7bbb      	ldrb	r3, [r7, #14]
 800a794:	2b04      	cmp	r3, #4
 800a796:	d003      	beq.n	800a7a0 <USBH_HandleControl+0xcc>
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	2b02      	cmp	r3, #2
 800a79c:	f040 8100 	bne.w	800a9a0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	220b      	movs	r2, #11
 800a7a4:	761a      	strb	r2, [r3, #24]
      break;
 800a7a6:	e0fb      	b.n	800a9a0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6899      	ldr	r1, [r3, #8]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	899a      	ldrh	r2, [r3, #12]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	791b      	ldrb	r3, [r3, #4]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f93a 	bl	800aa3a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2204      	movs	r2, #4
 800a7ca:	761a      	strb	r2, [r3, #24]
      break;
 800a7cc:	e0f1      	b.n	800a9b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	791b      	ldrb	r3, [r3, #4]
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fc7d 	bl	800b0d4 <USBH_LL_GetURBState>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d102      	bne.n	800a7ea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2209      	movs	r2, #9
 800a7e8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a7ea:	7bbb      	ldrb	r3, [r7, #14]
 800a7ec:	2b05      	cmp	r3, #5
 800a7ee:	d102      	bne.n	800a7f6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7f4:	e0d6      	b.n	800a9a4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a7f6:	7bbb      	ldrb	r3, [r7, #14]
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	f040 80d3 	bne.w	800a9a4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	220b      	movs	r2, #11
 800a802:	761a      	strb	r2, [r3, #24]
      break;
 800a804:	e0ce      	b.n	800a9a4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6899      	ldr	r1, [r3, #8]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	899a      	ldrh	r2, [r3, #12]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	795b      	ldrb	r3, [r3, #5]
 800a812:	2001      	movs	r0, #1
 800a814:	9000      	str	r0, [sp, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f8ea 	bl	800a9f0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a822:	b29a      	uxth	r2, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2206      	movs	r2, #6
 800a82c:	761a      	strb	r2, [r3, #24]
      break;
 800a82e:	e0c0      	b.n	800a9b2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	795b      	ldrb	r3, [r3, #5]
 800a834:	4619      	mov	r1, r3
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fc4c 	bl	800b0d4 <USBH_LL_GetURBState>
 800a83c:	4603      	mov	r3, r0
 800a83e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a840:	7bbb      	ldrb	r3, [r7, #14]
 800a842:	2b01      	cmp	r3, #1
 800a844:	d103      	bne.n	800a84e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2207      	movs	r2, #7
 800a84a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a84c:	e0ac      	b.n	800a9a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	2b05      	cmp	r3, #5
 800a852:	d105      	bne.n	800a860 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	220c      	movs	r2, #12
 800a858:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a85a:	2303      	movs	r3, #3
 800a85c:	73fb      	strb	r3, [r7, #15]
      break;
 800a85e:	e0a3      	b.n	800a9a8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a860:	7bbb      	ldrb	r3, [r7, #14]
 800a862:	2b02      	cmp	r3, #2
 800a864:	d103      	bne.n	800a86e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2205      	movs	r2, #5
 800a86a:	761a      	strb	r2, [r3, #24]
      break;
 800a86c:	e09c      	b.n	800a9a8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a86e:	7bbb      	ldrb	r3, [r7, #14]
 800a870:	2b04      	cmp	r3, #4
 800a872:	f040 8099 	bne.w	800a9a8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	220b      	movs	r2, #11
 800a87a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a87c:	2302      	movs	r3, #2
 800a87e:	73fb      	strb	r3, [r7, #15]
      break;
 800a880:	e092      	b.n	800a9a8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	791b      	ldrb	r3, [r3, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	2100      	movs	r1, #0
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 f8d5 	bl	800aa3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a896:	b29a      	uxth	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2208      	movs	r2, #8
 800a8a0:	761a      	strb	r2, [r3, #24]

      break;
 800a8a2:	e086      	b.n	800a9b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	791b      	ldrb	r3, [r3, #4]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fc12 	bl	800b0d4 <USBH_LL_GetURBState>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a8b4:	7bbb      	ldrb	r3, [r7, #14]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d105      	bne.n	800a8c6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	220d      	movs	r2, #13
 800a8be:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8c4:	e072      	b.n	800a9ac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a8c6:	7bbb      	ldrb	r3, [r7, #14]
 800a8c8:	2b04      	cmp	r3, #4
 800a8ca:	d103      	bne.n	800a8d4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	220b      	movs	r2, #11
 800a8d0:	761a      	strb	r2, [r3, #24]
      break;
 800a8d2:	e06b      	b.n	800a9ac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	2b05      	cmp	r3, #5
 800a8d8:	d168      	bne.n	800a9ac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8de:	e065      	b.n	800a9ac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	795b      	ldrb	r3, [r3, #5]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	9200      	str	r2, [sp, #0]
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f87f 	bl	800a9f0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	220a      	movs	r2, #10
 800a902:	761a      	strb	r2, [r3, #24]
      break;
 800a904:	e055      	b.n	800a9b2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	795b      	ldrb	r3, [r3, #5]
 800a90a:	4619      	mov	r1, r3
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f000 fbe1 	bl	800b0d4 <USBH_LL_GetURBState>
 800a912:	4603      	mov	r3, r0
 800a914:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a916:	7bbb      	ldrb	r3, [r7, #14]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d105      	bne.n	800a928 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a91c:	2300      	movs	r3, #0
 800a91e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	220d      	movs	r2, #13
 800a924:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a926:	e043      	b.n	800a9b0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a928:	7bbb      	ldrb	r3, [r7, #14]
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d103      	bne.n	800a936 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2209      	movs	r2, #9
 800a932:	761a      	strb	r2, [r3, #24]
      break;
 800a934:	e03c      	b.n	800a9b0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	2b04      	cmp	r3, #4
 800a93a:	d139      	bne.n	800a9b0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	220b      	movs	r2, #11
 800a940:	761a      	strb	r2, [r3, #24]
      break;
 800a942:	e035      	b.n	800a9b0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	7e5b      	ldrb	r3, [r3, #25]
 800a948:	3301      	adds	r3, #1
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	765a      	strb	r2, [r3, #25]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	7e5b      	ldrb	r3, [r3, #25]
 800a954:	2b02      	cmp	r3, #2
 800a956:	d806      	bhi.n	800a966 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2201      	movs	r2, #1
 800a962:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a964:	e025      	b.n	800a9b2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a96c:	2106      	movs	r1, #6
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2200      	movs	r2, #0
 800a976:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	795b      	ldrb	r3, [r3, #5]
 800a97c:	4619      	mov	r1, r3
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f90c 	bl	800ab9c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	791b      	ldrb	r3, [r3, #4]
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 f906 	bl	800ab9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a996:	2302      	movs	r3, #2
 800a998:	73fb      	strb	r3, [r7, #15]
      break;
 800a99a:	e00a      	b.n	800a9b2 <USBH_HandleControl+0x2de>

    default:
      break;
 800a99c:	bf00      	nop
 800a99e:	e008      	b.n	800a9b2 <USBH_HandleControl+0x2de>
      break;
 800a9a0:	bf00      	nop
 800a9a2:	e006      	b.n	800a9b2 <USBH_HandleControl+0x2de>
      break;
 800a9a4:	bf00      	nop
 800a9a6:	e004      	b.n	800a9b2 <USBH_HandleControl+0x2de>
      break;
 800a9a8:	bf00      	nop
 800a9aa:	e002      	b.n	800a9b2 <USBH_HandleControl+0x2de>
      break;
 800a9ac:	bf00      	nop
 800a9ae:	e000      	b.n	800a9b2 <USBH_HandleControl+0x2de>
      break;
 800a9b0:	bf00      	nop
  }

  return status;
 800a9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	3710      	adds	r7, #16
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}

0800a9bc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b088      	sub	sp, #32
 800a9c0:	af04      	add	r7, sp, #16
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a9ca:	79f9      	ldrb	r1, [r7, #7]
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	2308      	movs	r3, #8
 800a9d2:	9302      	str	r3, [sp, #8]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	2300      	movs	r3, #0
 800a9da:	9300      	str	r3, [sp, #0]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	2200      	movs	r2, #0
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 fb46 	bl	800b072 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b088      	sub	sp, #32
 800a9f4:	af04      	add	r7, sp, #16
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	460b      	mov	r3, r1
 800aa00:	80fb      	strh	r3, [r7, #6]
 800aa02:	4613      	mov	r3, r2
 800aa04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa10:	2300      	movs	r3, #0
 800aa12:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa14:	7979      	ldrb	r1, [r7, #5]
 800aa16:	7e3b      	ldrb	r3, [r7, #24]
 800aa18:	9303      	str	r3, [sp, #12]
 800aa1a:	88fb      	ldrh	r3, [r7, #6]
 800aa1c:	9302      	str	r3, [sp, #8]
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	9301      	str	r3, [sp, #4]
 800aa22:	2301      	movs	r3, #1
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	2300      	movs	r3, #0
 800aa28:	2200      	movs	r2, #0
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 fb21 	bl	800b072 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b088      	sub	sp, #32
 800aa3e:	af04      	add	r7, sp, #16
 800aa40:	60f8      	str	r0, [r7, #12]
 800aa42:	60b9      	str	r1, [r7, #8]
 800aa44:	4611      	mov	r1, r2
 800aa46:	461a      	mov	r2, r3
 800aa48:	460b      	mov	r3, r1
 800aa4a:	80fb      	strh	r3, [r7, #6]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa50:	7979      	ldrb	r1, [r7, #5]
 800aa52:	2300      	movs	r3, #0
 800aa54:	9303      	str	r3, [sp, #12]
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	9302      	str	r3, [sp, #8]
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	9301      	str	r3, [sp, #4]
 800aa5e:	2301      	movs	r3, #1
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	2300      	movs	r3, #0
 800aa64:	2201      	movs	r2, #1
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 fb03 	bl	800b072 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aa6c:	2300      	movs	r3, #0

}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3710      	adds	r7, #16
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b088      	sub	sp, #32
 800aa7a:	af04      	add	r7, sp, #16
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	4611      	mov	r1, r2
 800aa82:	461a      	mov	r2, r3
 800aa84:	460b      	mov	r3, r1
 800aa86:	80fb      	strh	r3, [r7, #6]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aa96:	2300      	movs	r3, #0
 800aa98:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa9a:	7979      	ldrb	r1, [r7, #5]
 800aa9c:	7e3b      	ldrb	r3, [r7, #24]
 800aa9e:	9303      	str	r3, [sp, #12]
 800aaa0:	88fb      	ldrh	r3, [r7, #6]
 800aaa2:	9302      	str	r3, [sp, #8]
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	2302      	movs	r3, #2
 800aaae:	2200      	movs	r2, #0
 800aab0:	68f8      	ldr	r0, [r7, #12]
 800aab2:	f000 fade 	bl	800b072 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af04      	add	r7, sp, #16
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	4611      	mov	r1, r2
 800aacc:	461a      	mov	r2, r3
 800aace:	460b      	mov	r3, r1
 800aad0:	80fb      	strh	r3, [r7, #6]
 800aad2:	4613      	mov	r3, r2
 800aad4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aad6:	7979      	ldrb	r1, [r7, #5]
 800aad8:	2300      	movs	r3, #0
 800aada:	9303      	str	r3, [sp, #12]
 800aadc:	88fb      	ldrh	r3, [r7, #6]
 800aade:	9302      	str	r3, [sp, #8]
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	2301      	movs	r3, #1
 800aae6:	9300      	str	r3, [sp, #0]
 800aae8:	2302      	movs	r3, #2
 800aaea:	2201      	movs	r2, #1
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 fac0 	bl	800b072 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af04      	add	r7, sp, #16
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	4608      	mov	r0, r1
 800ab06:	4611      	mov	r1, r2
 800ab08:	461a      	mov	r2, r3
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	70fb      	strb	r3, [r7, #3]
 800ab0e:	460b      	mov	r3, r1
 800ab10:	70bb      	strb	r3, [r7, #2]
 800ab12:	4613      	mov	r3, r2
 800ab14:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab16:	7878      	ldrb	r0, [r7, #1]
 800ab18:	78ba      	ldrb	r2, [r7, #2]
 800ab1a:	78f9      	ldrb	r1, [r7, #3]
 800ab1c:	8b3b      	ldrh	r3, [r7, #24]
 800ab1e:	9302      	str	r3, [sp, #8]
 800ab20:	7d3b      	ldrb	r3, [r7, #20]
 800ab22:	9301      	str	r3, [sp, #4]
 800ab24:	7c3b      	ldrb	r3, [r7, #16]
 800ab26:	9300      	str	r3, [sp, #0]
 800ab28:	4603      	mov	r3, r0
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 fa53 	bl	800afd6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3708      	adds	r7, #8
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b082      	sub	sp, #8
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	460b      	mov	r3, r1
 800ab44:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ab46:	78fb      	ldrb	r3, [r7, #3]
 800ab48:	4619      	mov	r1, r3
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fa72 	bl	800b034 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
 800ab62:	460b      	mov	r3, r1
 800ab64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f836 	bl	800abd8 <USBH_GetFreePipe>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ab70:	89fb      	ldrh	r3, [r7, #14]
 800ab72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d00a      	beq.n	800ab90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ab7a:	78fa      	ldrb	r2, [r7, #3]
 800ab7c:	89fb      	ldrh	r3, [r7, #14]
 800ab7e:	f003 030f 	and.w	r3, r3, #15
 800ab82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab86:	6879      	ldr	r1, [r7, #4]
 800ab88:	33e0      	adds	r3, #224	@ 0xe0
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	440b      	add	r3, r1
 800ab8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ab90:	89fb      	ldrh	r3, [r7, #14]
 800ab92:	b2db      	uxtb	r3, r3
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3710      	adds	r7, #16
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}

0800ab9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	460b      	mov	r3, r1
 800aba6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800aba8:	78fb      	ldrb	r3, [r7, #3]
 800abaa:	2b0f      	cmp	r3, #15
 800abac:	d80d      	bhi.n	800abca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800abae:	78fb      	ldrb	r3, [r7, #3]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	33e0      	adds	r3, #224	@ 0xe0
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4413      	add	r3, r2
 800abb8:	685a      	ldr	r2, [r3, #4]
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	33e0      	adds	r3, #224	@ 0xe0
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	440b      	add	r3, r1
 800abc8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800abe4:	2300      	movs	r3, #0
 800abe6:	73fb      	strb	r3, [r7, #15]
 800abe8:	e00f      	b.n	800ac0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800abea:	7bfb      	ldrb	r3, [r7, #15]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	33e0      	adds	r3, #224	@ 0xe0
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	4413      	add	r3, r2
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d102      	bne.n	800ac04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	e007      	b.n	800ac14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
 800ac06:	3301      	adds	r3, #1
 800ac08:	73fb      	strb	r3, [r7, #15]
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	2b0f      	cmp	r3, #15
 800ac0e:	d9ec      	bls.n	800abea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ac24:	2201      	movs	r2, #1
 800ac26:	490e      	ldr	r1, [pc, #56]	@ (800ac60 <MX_USB_HOST_Init+0x40>)
 800ac28:	480e      	ldr	r0, [pc, #56]	@ (800ac64 <MX_USB_HOST_Init+0x44>)
 800ac2a:	f7fe fb15 	bl	8009258 <USBH_Init>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d001      	beq.n	800ac38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ac34:	f7f6 fa5a 	bl	80010ec <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ac38:	490b      	ldr	r1, [pc, #44]	@ (800ac68 <MX_USB_HOST_Init+0x48>)
 800ac3a:	480a      	ldr	r0, [pc, #40]	@ (800ac64 <MX_USB_HOST_Init+0x44>)
 800ac3c:	f7fe fbb9 	bl	80093b2 <USBH_RegisterClass>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ac46:	f7f6 fa51 	bl	80010ec <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ac4a:	4806      	ldr	r0, [pc, #24]	@ (800ac64 <MX_USB_HOST_Init+0x44>)
 800ac4c:	f7fe fc3d 	bl	80094ca <USBH_Start>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ac56:	f7f6 fa49 	bl	80010ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ac5a:	bf00      	nop
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	0800ac81 	.word	0x0800ac81
 800ac64:	200001f8 	.word	0x200001f8
 800ac68:	2000000c 	.word	0x2000000c

0800ac6c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ac70:	4802      	ldr	r0, [pc, #8]	@ (800ac7c <MX_USB_HOST_Process+0x10>)
 800ac72:	f7fe fc3b 	bl	80094ec <USBH_Process>
}
 800ac76:	bf00      	nop
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200001f8 	.word	0x200001f8

0800ac80 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ac8c:	78fb      	ldrb	r3, [r7, #3]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	2b04      	cmp	r3, #4
 800ac92:	d819      	bhi.n	800acc8 <USBH_UserProcess+0x48>
 800ac94:	a201      	add	r2, pc, #4	@ (adr r2, 800ac9c <USBH_UserProcess+0x1c>)
 800ac96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9a:	bf00      	nop
 800ac9c:	0800acc9 	.word	0x0800acc9
 800aca0:	0800acb9 	.word	0x0800acb9
 800aca4:	0800acc9 	.word	0x0800acc9
 800aca8:	0800acc1 	.word	0x0800acc1
 800acac:	0800acb1 	.word	0x0800acb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800acb0:	4b09      	ldr	r3, [pc, #36]	@ (800acd8 <USBH_UserProcess+0x58>)
 800acb2:	2203      	movs	r2, #3
 800acb4:	701a      	strb	r2, [r3, #0]
  break;
 800acb6:	e008      	b.n	800acca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800acb8:	4b07      	ldr	r3, [pc, #28]	@ (800acd8 <USBH_UserProcess+0x58>)
 800acba:	2202      	movs	r2, #2
 800acbc:	701a      	strb	r2, [r3, #0]
  break;
 800acbe:	e004      	b.n	800acca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800acc0:	4b05      	ldr	r3, [pc, #20]	@ (800acd8 <USBH_UserProcess+0x58>)
 800acc2:	2201      	movs	r2, #1
 800acc4:	701a      	strb	r2, [r3, #0]
  break;
 800acc6:	e000      	b.n	800acca <USBH_UserProcess+0x4a>

  default:
  break;
 800acc8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800acca:	bf00      	nop
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	200005d0 	.word	0x200005d0

0800acdc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b08a      	sub	sp, #40	@ 0x28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace4:	f107 0314 	add.w	r3, r7, #20
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	609a      	str	r2, [r3, #8]
 800acf0:	60da      	str	r2, [r3, #12]
 800acf2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acfc:	d147      	bne.n	800ad8e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acfe:	2300      	movs	r3, #0
 800ad00:	613b      	str	r3, [r7, #16]
 800ad02:	4b25      	ldr	r3, [pc, #148]	@ (800ad98 <HAL_HCD_MspInit+0xbc>)
 800ad04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad06:	4a24      	ldr	r2, [pc, #144]	@ (800ad98 <HAL_HCD_MspInit+0xbc>)
 800ad08:	f043 0301 	orr.w	r3, r3, #1
 800ad0c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ad0e:	4b22      	ldr	r3, [pc, #136]	@ (800ad98 <HAL_HCD_MspInit+0xbc>)
 800ad10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	613b      	str	r3, [r7, #16]
 800ad18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ad1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad20:	2300      	movs	r3, #0
 800ad22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad24:	2300      	movs	r3, #0
 800ad26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ad28:	f107 0314 	add.w	r3, r7, #20
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	481b      	ldr	r0, [pc, #108]	@ (800ad9c <HAL_HCD_MspInit+0xc0>)
 800ad30:	f7f8 f9cc 	bl	80030cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ad34:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ad38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad42:	2300      	movs	r3, #0
 800ad44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad46:	230a      	movs	r3, #10
 800ad48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad4a:	f107 0314 	add.w	r3, r7, #20
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4812      	ldr	r0, [pc, #72]	@ (800ad9c <HAL_HCD_MspInit+0xc0>)
 800ad52:	f7f8 f9bb 	bl	80030cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad56:	4b10      	ldr	r3, [pc, #64]	@ (800ad98 <HAL_HCD_MspInit+0xbc>)
 800ad58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad5a:	4a0f      	ldr	r2, [pc, #60]	@ (800ad98 <HAL_HCD_MspInit+0xbc>)
 800ad5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad60:	6353      	str	r3, [r2, #52]	@ 0x34
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	4b0c      	ldr	r3, [pc, #48]	@ (800ad98 <HAL_HCD_MspInit+0xbc>)
 800ad68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad6a:	4a0b      	ldr	r2, [pc, #44]	@ (800ad98 <HAL_HCD_MspInit+0xbc>)
 800ad6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ad70:	6453      	str	r3, [r2, #68]	@ 0x44
 800ad72:	4b09      	ldr	r3, [pc, #36]	@ (800ad98 <HAL_HCD_MspInit+0xbc>)
 800ad74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad7a:	60fb      	str	r3, [r7, #12]
 800ad7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2100      	movs	r1, #0
 800ad82:	2043      	movs	r0, #67	@ 0x43
 800ad84:	f7f8 f96b 	bl	800305e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad88:	2043      	movs	r0, #67	@ 0x43
 800ad8a:	f7f8 f984 	bl	8003096 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad8e:	bf00      	nop
 800ad90:	3728      	adds	r7, #40	@ 0x28
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	40023800 	.word	0x40023800
 800ad9c:	40020000 	.word	0x40020000

0800ada0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe ff73 	bl	8009c9a <USBH_LL_IncTimer>
}
 800adb4:	bf00      	nop
 800adb6:	3708      	adds	r7, #8
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800adca:	4618      	mov	r0, r3
 800adcc:	f7fe ffab 	bl	8009d26 <USBH_LL_Connect>
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe ffb4 	bl	8009d54 <USBH_LL_Disconnect>
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70fb      	strb	r3, [r7, #3]
 800ae00:	4613      	mov	r3, r2
 800ae02:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fe ff65 	bl	8009cee <USBH_LL_PortEnabled>
}
 800ae24:	bf00      	nop
 800ae26:	3708      	adds	r7, #8
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b082      	sub	sp, #8
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe ff65 	bl	8009d0a <USBH_LL_PortDisabled>
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d12a      	bne.n	800aeb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ae5a:	4a18      	ldr	r2, [pc, #96]	@ (800aebc <USBH_LL_Init+0x74>)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4a15      	ldr	r2, [pc, #84]	@ (800aebc <USBH_LL_Init+0x74>)
 800ae66:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae6a:	4b14      	ldr	r3, [pc, #80]	@ (800aebc <USBH_LL_Init+0x74>)
 800ae6c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ae70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ae72:	4b12      	ldr	r3, [pc, #72]	@ (800aebc <USBH_LL_Init+0x74>)
 800ae74:	2208      	movs	r2, #8
 800ae76:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ae78:	4b10      	ldr	r3, [pc, #64]	@ (800aebc <USBH_LL_Init+0x74>)
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae7e:	4b0f      	ldr	r3, [pc, #60]	@ (800aebc <USBH_LL_Init+0x74>)
 800ae80:	2200      	movs	r2, #0
 800ae82:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ae84:	4b0d      	ldr	r3, [pc, #52]	@ (800aebc <USBH_LL_Init+0x74>)
 800ae86:	2202      	movs	r2, #2
 800ae88:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae8a:	4b0c      	ldr	r3, [pc, #48]	@ (800aebc <USBH_LL_Init+0x74>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ae90:	480a      	ldr	r0, [pc, #40]	@ (800aebc <USBH_LL_Init+0x74>)
 800ae92:	f7f8 fad0 	bl	8003436 <HAL_HCD_Init>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d001      	beq.n	800aea0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ae9c:	f7f6 f926 	bl	80010ec <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aea0:	4806      	ldr	r0, [pc, #24]	@ (800aebc <USBH_LL_Init+0x74>)
 800aea2:	f7f8 ff31 	bl	8003d08 <HAL_HCD_GetCurrentFrame>
 800aea6:	4603      	mov	r3, r0
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7fe fee6 	bl	8009c7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	200005d4 	.word	0x200005d4

0800aec0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b084      	sub	sp, #16
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7f8 fe9e 	bl	8003c18 <HAL_HCD_Start>
 800aedc:	4603      	mov	r3, r0
 800aede:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aee0:	7bfb      	ldrb	r3, [r7, #15]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 f95e 	bl	800b1a4 <USBH_Get_USB_Status>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeec:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aefe:	2300      	movs	r3, #0
 800af00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7f8 fea6 	bl	8003c5e <HAL_HCD_Stop>
 800af12:	4603      	mov	r3, r0
 800af14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af16:	7bfb      	ldrb	r3, [r7, #15]
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 f943 	bl	800b1a4 <USBH_Get_USB_Status>
 800af1e:	4603      	mov	r3, r0
 800af20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af22:	7bbb      	ldrb	r3, [r7, #14]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800af34:	2301      	movs	r3, #1
 800af36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af3e:	4618      	mov	r0, r3
 800af40:	f7f8 fef0 	bl	8003d24 <HAL_HCD_GetCurrentSpeed>
 800af44:	4603      	mov	r3, r0
 800af46:	2b02      	cmp	r3, #2
 800af48:	d00c      	beq.n	800af64 <USBH_LL_GetSpeed+0x38>
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d80d      	bhi.n	800af6a <USBH_LL_GetSpeed+0x3e>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d002      	beq.n	800af58 <USBH_LL_GetSpeed+0x2c>
 800af52:	2b01      	cmp	r3, #1
 800af54:	d003      	beq.n	800af5e <USBH_LL_GetSpeed+0x32>
 800af56:	e008      	b.n	800af6a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800af58:	2300      	movs	r3, #0
 800af5a:	73fb      	strb	r3, [r7, #15]
    break;
 800af5c:	e008      	b.n	800af70 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800af5e:	2301      	movs	r3, #1
 800af60:	73fb      	strb	r3, [r7, #15]
    break;
 800af62:	e005      	b.n	800af70 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800af64:	2302      	movs	r3, #2
 800af66:	73fb      	strb	r3, [r7, #15]
    break;
 800af68:	e002      	b.n	800af70 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800af6a:	2301      	movs	r3, #1
 800af6c:	73fb      	strb	r3, [r7, #15]
    break;
 800af6e:	bf00      	nop
  }
  return  speed;
 800af70:	7bfb      	ldrb	r3, [r7, #15]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b084      	sub	sp, #16
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800af90:	4618      	mov	r0, r3
 800af92:	f7f8 fe81 	bl	8003c98 <HAL_HCD_ResetPort>
 800af96:	4603      	mov	r3, r0
 800af98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 f901 	bl	800b1a4 <USBH_Get_USB_Status>
 800afa2:	4603      	mov	r3, r0
 800afa4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800afc2:	78fa      	ldrb	r2, [r7, #3]
 800afc4:	4611      	mov	r1, r2
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7f8 fe89 	bl	8003cde <HAL_HCD_HC_GetXferCount>
 800afcc:	4603      	mov	r3, r0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800afd6:	b590      	push	{r4, r7, lr}
 800afd8:	b089      	sub	sp, #36	@ 0x24
 800afda:	af04      	add	r7, sp, #16
 800afdc:	6078      	str	r0, [r7, #4]
 800afde:	4608      	mov	r0, r1
 800afe0:	4611      	mov	r1, r2
 800afe2:	461a      	mov	r2, r3
 800afe4:	4603      	mov	r3, r0
 800afe6:	70fb      	strb	r3, [r7, #3]
 800afe8:	460b      	mov	r3, r1
 800afea:	70bb      	strb	r3, [r7, #2]
 800afec:	4613      	mov	r3, r2
 800afee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800affe:	787c      	ldrb	r4, [r7, #1]
 800b000:	78ba      	ldrb	r2, [r7, #2]
 800b002:	78f9      	ldrb	r1, [r7, #3]
 800b004:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b006:	9302      	str	r3, [sp, #8]
 800b008:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b012:	9300      	str	r3, [sp, #0]
 800b014:	4623      	mov	r3, r4
 800b016:	f7f8 fa75 	bl	8003504 <HAL_HCD_HC_Init>
 800b01a:	4603      	mov	r3, r0
 800b01c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b01e:	7bfb      	ldrb	r3, [r7, #15]
 800b020:	4618      	mov	r0, r3
 800b022:	f000 f8bf 	bl	800b1a4 <USBH_Get_USB_Status>
 800b026:	4603      	mov	r3, r0
 800b028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3714      	adds	r7, #20
 800b030:	46bd      	mov	sp, r7
 800b032:	bd90      	pop	{r4, r7, pc}

0800b034 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b044:	2300      	movs	r3, #0
 800b046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b04e:	78fa      	ldrb	r2, [r7, #3]
 800b050:	4611      	mov	r1, r2
 800b052:	4618      	mov	r0, r3
 800b054:	f7f8 fb0e 	bl	8003674 <HAL_HCD_HC_Halt>
 800b058:	4603      	mov	r3, r0
 800b05a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b05c:	7bfb      	ldrb	r3, [r7, #15]
 800b05e:	4618      	mov	r0, r3
 800b060:	f000 f8a0 	bl	800b1a4 <USBH_Get_USB_Status>
 800b064:	4603      	mov	r3, r0
 800b066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b068:	7bbb      	ldrb	r3, [r7, #14]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b072:	b590      	push	{r4, r7, lr}
 800b074:	b089      	sub	sp, #36	@ 0x24
 800b076:	af04      	add	r7, sp, #16
 800b078:	6078      	str	r0, [r7, #4]
 800b07a:	4608      	mov	r0, r1
 800b07c:	4611      	mov	r1, r2
 800b07e:	461a      	mov	r2, r3
 800b080:	4603      	mov	r3, r0
 800b082:	70fb      	strb	r3, [r7, #3]
 800b084:	460b      	mov	r3, r1
 800b086:	70bb      	strb	r3, [r7, #2]
 800b088:	4613      	mov	r3, r2
 800b08a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b08c:	2300      	movs	r3, #0
 800b08e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b090:	2300      	movs	r3, #0
 800b092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b09a:	787c      	ldrb	r4, [r7, #1]
 800b09c:	78ba      	ldrb	r2, [r7, #2]
 800b09e:	78f9      	ldrb	r1, [r7, #3]
 800b0a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b0a4:	9303      	str	r3, [sp, #12]
 800b0a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b0a8:	9302      	str	r3, [sp, #8]
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ac:	9301      	str	r3, [sp, #4]
 800b0ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	4623      	mov	r3, r4
 800b0b6:	f7f8 fb01 	bl	80036bc <HAL_HCD_HC_SubmitRequest>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b0be:	7bfb      	ldrb	r3, [r7, #15]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f000 f86f 	bl	800b1a4 <USBH_Get_USB_Status>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3714      	adds	r7, #20
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd90      	pop	{r4, r7, pc}

0800b0d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b0e6:	78fa      	ldrb	r2, [r7, #3]
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7f8 fde2 	bl	8003cb4 <HAL_HCD_HC_GetURBState>
 800b0f0:	4603      	mov	r3, r0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3708      	adds	r7, #8
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b082      	sub	sp, #8
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	460b      	mov	r3, r1
 800b104:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d103      	bne.n	800b118 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	4618      	mov	r0, r3
 800b114:	f000 f872 	bl	800b1fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b118:	20c8      	movs	r0, #200	@ 0xc8
 800b11a:	f7f7 fea1 	bl	8002e60 <HAL_Delay>
  return USBH_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
 800b134:	4613      	mov	r3, r2
 800b136:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b13e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b140:	78fa      	ldrb	r2, [r7, #3]
 800b142:	68f9      	ldr	r1, [r7, #12]
 800b144:	4613      	mov	r3, r2
 800b146:	011b      	lsls	r3, r3, #4
 800b148:	1a9b      	subs	r3, r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	3317      	adds	r3, #23
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00a      	beq.n	800b16c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b156:	78fa      	ldrb	r2, [r7, #3]
 800b158:	68f9      	ldr	r1, [r7, #12]
 800b15a:	4613      	mov	r3, r2
 800b15c:	011b      	lsls	r3, r3, #4
 800b15e:	1a9b      	subs	r3, r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	440b      	add	r3, r1
 800b164:	333c      	adds	r3, #60	@ 0x3c
 800b166:	78ba      	ldrb	r2, [r7, #2]
 800b168:	701a      	strb	r2, [r3, #0]
 800b16a:	e009      	b.n	800b180 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b16c:	78fa      	ldrb	r2, [r7, #3]
 800b16e:	68f9      	ldr	r1, [r7, #12]
 800b170:	4613      	mov	r3, r2
 800b172:	011b      	lsls	r3, r3, #4
 800b174:	1a9b      	subs	r3, r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	440b      	add	r3, r1
 800b17a:	333d      	adds	r3, #61	@ 0x3d
 800b17c:	78ba      	ldrb	r2, [r7, #2]
 800b17e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3714      	adds	r7, #20
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b18e:	b580      	push	{r7, lr}
 800b190:	b082      	sub	sp, #8
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f7f7 fe62 	bl	8002e60 <HAL_Delay>
}
 800b19c:	bf00      	nop
 800b19e:	3708      	adds	r7, #8
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d817      	bhi.n	800b1e8 <USBH_Get_USB_Status+0x44>
 800b1b8:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c0 <USBH_Get_USB_Status+0x1c>)
 800b1ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1be:	bf00      	nop
 800b1c0:	0800b1d1 	.word	0x0800b1d1
 800b1c4:	0800b1d7 	.word	0x0800b1d7
 800b1c8:	0800b1dd 	.word	0x0800b1dd
 800b1cc:	0800b1e3 	.word	0x0800b1e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1d4:	e00b      	b.n	800b1ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1da:	e008      	b.n	800b1ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e0:	e005      	b.n	800b1ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b1e2:	2302      	movs	r3, #2
 800b1e4:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e6:	e002      	b.n	800b1ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b1e8:	2302      	movs	r3, #2
 800b1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ec:	bf00      	nop
  }
  return usb_status;
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	4603      	mov	r3, r0
 800b204:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b206:	79fb      	ldrb	r3, [r7, #7]
 800b208:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b20a:	79fb      	ldrb	r3, [r7, #7]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d102      	bne.n	800b216 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b210:	2300      	movs	r3, #0
 800b212:	73fb      	strb	r3, [r7, #15]
 800b214:	e001      	b.n	800b21a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b216:	2301      	movs	r3, #1
 800b218:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b21a:	7bfb      	ldrb	r3, [r7, #15]
 800b21c:	461a      	mov	r2, r3
 800b21e:	2101      	movs	r1, #1
 800b220:	4803      	ldr	r0, [pc, #12]	@ (800b230 <MX_DriverVbusFS+0x34>)
 800b222:	f7f8 f8ef 	bl	8003404 <HAL_GPIO_WritePin>
}
 800b226:	bf00      	nop
 800b228:	3710      	adds	r7, #16
 800b22a:	46bd      	mov	sp, r7
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	bf00      	nop
 800b230:	40020800 	.word	0x40020800

0800b234 <malloc>:
 800b234:	4b02      	ldr	r3, [pc, #8]	@ (800b240 <malloc+0xc>)
 800b236:	4601      	mov	r1, r0
 800b238:	6818      	ldr	r0, [r3, #0]
 800b23a:	f000 b82d 	b.w	800b298 <_malloc_r>
 800b23e:	bf00      	nop
 800b240:	20000038 	.word	0x20000038

0800b244 <free>:
 800b244:	4b02      	ldr	r3, [pc, #8]	@ (800b250 <free+0xc>)
 800b246:	4601      	mov	r1, r0
 800b248:	6818      	ldr	r0, [r3, #0]
 800b24a:	f000 bc21 	b.w	800ba90 <_free_r>
 800b24e:	bf00      	nop
 800b250:	20000038 	.word	0x20000038

0800b254 <sbrk_aligned>:
 800b254:	b570      	push	{r4, r5, r6, lr}
 800b256:	4e0f      	ldr	r6, [pc, #60]	@ (800b294 <sbrk_aligned+0x40>)
 800b258:	460c      	mov	r4, r1
 800b25a:	6831      	ldr	r1, [r6, #0]
 800b25c:	4605      	mov	r5, r0
 800b25e:	b911      	cbnz	r1, 800b266 <sbrk_aligned+0x12>
 800b260:	f000 fbb8 	bl	800b9d4 <_sbrk_r>
 800b264:	6030      	str	r0, [r6, #0]
 800b266:	4621      	mov	r1, r4
 800b268:	4628      	mov	r0, r5
 800b26a:	f000 fbb3 	bl	800b9d4 <_sbrk_r>
 800b26e:	1c43      	adds	r3, r0, #1
 800b270:	d103      	bne.n	800b27a <sbrk_aligned+0x26>
 800b272:	f04f 34ff 	mov.w	r4, #4294967295
 800b276:	4620      	mov	r0, r4
 800b278:	bd70      	pop	{r4, r5, r6, pc}
 800b27a:	1cc4      	adds	r4, r0, #3
 800b27c:	f024 0403 	bic.w	r4, r4, #3
 800b280:	42a0      	cmp	r0, r4
 800b282:	d0f8      	beq.n	800b276 <sbrk_aligned+0x22>
 800b284:	1a21      	subs	r1, r4, r0
 800b286:	4628      	mov	r0, r5
 800b288:	f000 fba4 	bl	800b9d4 <_sbrk_r>
 800b28c:	3001      	adds	r0, #1
 800b28e:	d1f2      	bne.n	800b276 <sbrk_aligned+0x22>
 800b290:	e7ef      	b.n	800b272 <sbrk_aligned+0x1e>
 800b292:	bf00      	nop
 800b294:	200009b4 	.word	0x200009b4

0800b298 <_malloc_r>:
 800b298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b29c:	1ccd      	adds	r5, r1, #3
 800b29e:	f025 0503 	bic.w	r5, r5, #3
 800b2a2:	3508      	adds	r5, #8
 800b2a4:	2d0c      	cmp	r5, #12
 800b2a6:	bf38      	it	cc
 800b2a8:	250c      	movcc	r5, #12
 800b2aa:	2d00      	cmp	r5, #0
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	db01      	blt.n	800b2b4 <_malloc_r+0x1c>
 800b2b0:	42a9      	cmp	r1, r5
 800b2b2:	d904      	bls.n	800b2be <_malloc_r+0x26>
 800b2b4:	230c      	movs	r3, #12
 800b2b6:	6033      	str	r3, [r6, #0]
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b394 <_malloc_r+0xfc>
 800b2c2:	f000 f869 	bl	800b398 <__malloc_lock>
 800b2c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2ca:	461c      	mov	r4, r3
 800b2cc:	bb44      	cbnz	r4, 800b320 <_malloc_r+0x88>
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f7ff ffbf 	bl	800b254 <sbrk_aligned>
 800b2d6:	1c43      	adds	r3, r0, #1
 800b2d8:	4604      	mov	r4, r0
 800b2da:	d158      	bne.n	800b38e <_malloc_r+0xf6>
 800b2dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b2e0:	4627      	mov	r7, r4
 800b2e2:	2f00      	cmp	r7, #0
 800b2e4:	d143      	bne.n	800b36e <_malloc_r+0xd6>
 800b2e6:	2c00      	cmp	r4, #0
 800b2e8:	d04b      	beq.n	800b382 <_malloc_r+0xea>
 800b2ea:	6823      	ldr	r3, [r4, #0]
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	eb04 0903 	add.w	r9, r4, r3
 800b2f4:	f000 fb6e 	bl	800b9d4 <_sbrk_r>
 800b2f8:	4581      	cmp	r9, r0
 800b2fa:	d142      	bne.n	800b382 <_malloc_r+0xea>
 800b2fc:	6821      	ldr	r1, [r4, #0]
 800b2fe:	1a6d      	subs	r5, r5, r1
 800b300:	4629      	mov	r1, r5
 800b302:	4630      	mov	r0, r6
 800b304:	f7ff ffa6 	bl	800b254 <sbrk_aligned>
 800b308:	3001      	adds	r0, #1
 800b30a:	d03a      	beq.n	800b382 <_malloc_r+0xea>
 800b30c:	6823      	ldr	r3, [r4, #0]
 800b30e:	442b      	add	r3, r5
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	f8d8 3000 	ldr.w	r3, [r8]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	bb62      	cbnz	r2, 800b374 <_malloc_r+0xdc>
 800b31a:	f8c8 7000 	str.w	r7, [r8]
 800b31e:	e00f      	b.n	800b340 <_malloc_r+0xa8>
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	1b52      	subs	r2, r2, r5
 800b324:	d420      	bmi.n	800b368 <_malloc_r+0xd0>
 800b326:	2a0b      	cmp	r2, #11
 800b328:	d917      	bls.n	800b35a <_malloc_r+0xc2>
 800b32a:	1961      	adds	r1, r4, r5
 800b32c:	42a3      	cmp	r3, r4
 800b32e:	6025      	str	r5, [r4, #0]
 800b330:	bf18      	it	ne
 800b332:	6059      	strne	r1, [r3, #4]
 800b334:	6863      	ldr	r3, [r4, #4]
 800b336:	bf08      	it	eq
 800b338:	f8c8 1000 	streq.w	r1, [r8]
 800b33c:	5162      	str	r2, [r4, r5]
 800b33e:	604b      	str	r3, [r1, #4]
 800b340:	4630      	mov	r0, r6
 800b342:	f000 f82f 	bl	800b3a4 <__malloc_unlock>
 800b346:	f104 000b 	add.w	r0, r4, #11
 800b34a:	1d23      	adds	r3, r4, #4
 800b34c:	f020 0007 	bic.w	r0, r0, #7
 800b350:	1ac2      	subs	r2, r0, r3
 800b352:	bf1c      	itt	ne
 800b354:	1a1b      	subne	r3, r3, r0
 800b356:	50a3      	strne	r3, [r4, r2]
 800b358:	e7af      	b.n	800b2ba <_malloc_r+0x22>
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	bf0c      	ite	eq
 800b360:	f8c8 2000 	streq.w	r2, [r8]
 800b364:	605a      	strne	r2, [r3, #4]
 800b366:	e7eb      	b.n	800b340 <_malloc_r+0xa8>
 800b368:	4623      	mov	r3, r4
 800b36a:	6864      	ldr	r4, [r4, #4]
 800b36c:	e7ae      	b.n	800b2cc <_malloc_r+0x34>
 800b36e:	463c      	mov	r4, r7
 800b370:	687f      	ldr	r7, [r7, #4]
 800b372:	e7b6      	b.n	800b2e2 <_malloc_r+0x4a>
 800b374:	461a      	mov	r2, r3
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	42a3      	cmp	r3, r4
 800b37a:	d1fb      	bne.n	800b374 <_malloc_r+0xdc>
 800b37c:	2300      	movs	r3, #0
 800b37e:	6053      	str	r3, [r2, #4]
 800b380:	e7de      	b.n	800b340 <_malloc_r+0xa8>
 800b382:	230c      	movs	r3, #12
 800b384:	6033      	str	r3, [r6, #0]
 800b386:	4630      	mov	r0, r6
 800b388:	f000 f80c 	bl	800b3a4 <__malloc_unlock>
 800b38c:	e794      	b.n	800b2b8 <_malloc_r+0x20>
 800b38e:	6005      	str	r5, [r0, #0]
 800b390:	e7d6      	b.n	800b340 <_malloc_r+0xa8>
 800b392:	bf00      	nop
 800b394:	200009b8 	.word	0x200009b8

0800b398 <__malloc_lock>:
 800b398:	4801      	ldr	r0, [pc, #4]	@ (800b3a0 <__malloc_lock+0x8>)
 800b39a:	f000 bb68 	b.w	800ba6e <__retarget_lock_acquire_recursive>
 800b39e:	bf00      	nop
 800b3a0:	20000afc 	.word	0x20000afc

0800b3a4 <__malloc_unlock>:
 800b3a4:	4801      	ldr	r0, [pc, #4]	@ (800b3ac <__malloc_unlock+0x8>)
 800b3a6:	f000 bb63 	b.w	800ba70 <__retarget_lock_release_recursive>
 800b3aa:	bf00      	nop
 800b3ac:	20000afc 	.word	0x20000afc

0800b3b0 <std>:
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	b510      	push	{r4, lr}
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3be:	6083      	str	r3, [r0, #8]
 800b3c0:	8181      	strh	r1, [r0, #12]
 800b3c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3c4:	81c2      	strh	r2, [r0, #14]
 800b3c6:	6183      	str	r3, [r0, #24]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	2208      	movs	r2, #8
 800b3cc:	305c      	adds	r0, #92	@ 0x5c
 800b3ce:	f000 fac5 	bl	800b95c <memset>
 800b3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b408 <std+0x58>)
 800b3d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b40c <std+0x5c>)
 800b3d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3da:	4b0d      	ldr	r3, [pc, #52]	@ (800b410 <std+0x60>)
 800b3dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3de:	4b0d      	ldr	r3, [pc, #52]	@ (800b414 <std+0x64>)
 800b3e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b418 <std+0x68>)
 800b3e4:	6224      	str	r4, [r4, #32]
 800b3e6:	429c      	cmp	r4, r3
 800b3e8:	d006      	beq.n	800b3f8 <std+0x48>
 800b3ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3ee:	4294      	cmp	r4, r2
 800b3f0:	d002      	beq.n	800b3f8 <std+0x48>
 800b3f2:	33d0      	adds	r3, #208	@ 0xd0
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	d105      	bne.n	800b404 <std+0x54>
 800b3f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b400:	f000 bb34 	b.w	800ba6c <__retarget_lock_init_recursive>
 800b404:	bd10      	pop	{r4, pc}
 800b406:	bf00      	nop
 800b408:	0800b78d 	.word	0x0800b78d
 800b40c:	0800b7af 	.word	0x0800b7af
 800b410:	0800b7e7 	.word	0x0800b7e7
 800b414:	0800b80b 	.word	0x0800b80b
 800b418:	200009bc 	.word	0x200009bc

0800b41c <stdio_exit_handler>:
 800b41c:	4a02      	ldr	r2, [pc, #8]	@ (800b428 <stdio_exit_handler+0xc>)
 800b41e:	4903      	ldr	r1, [pc, #12]	@ (800b42c <stdio_exit_handler+0x10>)
 800b420:	4803      	ldr	r0, [pc, #12]	@ (800b430 <stdio_exit_handler+0x14>)
 800b422:	f000 b869 	b.w	800b4f8 <_fwalk_sglue>
 800b426:	bf00      	nop
 800b428:	2000002c 	.word	0x2000002c
 800b42c:	0800c1c9 	.word	0x0800c1c9
 800b430:	2000003c 	.word	0x2000003c

0800b434 <cleanup_stdio>:
 800b434:	6841      	ldr	r1, [r0, #4]
 800b436:	4b0c      	ldr	r3, [pc, #48]	@ (800b468 <cleanup_stdio+0x34>)
 800b438:	4299      	cmp	r1, r3
 800b43a:	b510      	push	{r4, lr}
 800b43c:	4604      	mov	r4, r0
 800b43e:	d001      	beq.n	800b444 <cleanup_stdio+0x10>
 800b440:	f000 fec2 	bl	800c1c8 <_fflush_r>
 800b444:	68a1      	ldr	r1, [r4, #8]
 800b446:	4b09      	ldr	r3, [pc, #36]	@ (800b46c <cleanup_stdio+0x38>)
 800b448:	4299      	cmp	r1, r3
 800b44a:	d002      	beq.n	800b452 <cleanup_stdio+0x1e>
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 febb 	bl	800c1c8 <_fflush_r>
 800b452:	68e1      	ldr	r1, [r4, #12]
 800b454:	4b06      	ldr	r3, [pc, #24]	@ (800b470 <cleanup_stdio+0x3c>)
 800b456:	4299      	cmp	r1, r3
 800b458:	d004      	beq.n	800b464 <cleanup_stdio+0x30>
 800b45a:	4620      	mov	r0, r4
 800b45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b460:	f000 beb2 	b.w	800c1c8 <_fflush_r>
 800b464:	bd10      	pop	{r4, pc}
 800b466:	bf00      	nop
 800b468:	200009bc 	.word	0x200009bc
 800b46c:	20000a24 	.word	0x20000a24
 800b470:	20000a8c 	.word	0x20000a8c

0800b474 <global_stdio_init.part.0>:
 800b474:	b510      	push	{r4, lr}
 800b476:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a4 <global_stdio_init.part.0+0x30>)
 800b478:	4c0b      	ldr	r4, [pc, #44]	@ (800b4a8 <global_stdio_init.part.0+0x34>)
 800b47a:	4a0c      	ldr	r2, [pc, #48]	@ (800b4ac <global_stdio_init.part.0+0x38>)
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	4620      	mov	r0, r4
 800b480:	2200      	movs	r2, #0
 800b482:	2104      	movs	r1, #4
 800b484:	f7ff ff94 	bl	800b3b0 <std>
 800b488:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b48c:	2201      	movs	r2, #1
 800b48e:	2109      	movs	r1, #9
 800b490:	f7ff ff8e 	bl	800b3b0 <std>
 800b494:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b498:	2202      	movs	r2, #2
 800b49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b49e:	2112      	movs	r1, #18
 800b4a0:	f7ff bf86 	b.w	800b3b0 <std>
 800b4a4:	20000af4 	.word	0x20000af4
 800b4a8:	200009bc 	.word	0x200009bc
 800b4ac:	0800b41d 	.word	0x0800b41d

0800b4b0 <__sfp_lock_acquire>:
 800b4b0:	4801      	ldr	r0, [pc, #4]	@ (800b4b8 <__sfp_lock_acquire+0x8>)
 800b4b2:	f000 badc 	b.w	800ba6e <__retarget_lock_acquire_recursive>
 800b4b6:	bf00      	nop
 800b4b8:	20000afd 	.word	0x20000afd

0800b4bc <__sfp_lock_release>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	@ (800b4c4 <__sfp_lock_release+0x8>)
 800b4be:	f000 bad7 	b.w	800ba70 <__retarget_lock_release_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	20000afd 	.word	0x20000afd

0800b4c8 <__sinit>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	f7ff fff0 	bl	800b4b0 <__sfp_lock_acquire>
 800b4d0:	6a23      	ldr	r3, [r4, #32]
 800b4d2:	b11b      	cbz	r3, 800b4dc <__sinit+0x14>
 800b4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d8:	f7ff bff0 	b.w	800b4bc <__sfp_lock_release>
 800b4dc:	4b04      	ldr	r3, [pc, #16]	@ (800b4f0 <__sinit+0x28>)
 800b4de:	6223      	str	r3, [r4, #32]
 800b4e0:	4b04      	ldr	r3, [pc, #16]	@ (800b4f4 <__sinit+0x2c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1f5      	bne.n	800b4d4 <__sinit+0xc>
 800b4e8:	f7ff ffc4 	bl	800b474 <global_stdio_init.part.0>
 800b4ec:	e7f2      	b.n	800b4d4 <__sinit+0xc>
 800b4ee:	bf00      	nop
 800b4f0:	0800b435 	.word	0x0800b435
 800b4f4:	20000af4 	.word	0x20000af4

0800b4f8 <_fwalk_sglue>:
 800b4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	4688      	mov	r8, r1
 800b500:	4614      	mov	r4, r2
 800b502:	2600      	movs	r6, #0
 800b504:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b508:	f1b9 0901 	subs.w	r9, r9, #1
 800b50c:	d505      	bpl.n	800b51a <_fwalk_sglue+0x22>
 800b50e:	6824      	ldr	r4, [r4, #0]
 800b510:	2c00      	cmp	r4, #0
 800b512:	d1f7      	bne.n	800b504 <_fwalk_sglue+0xc>
 800b514:	4630      	mov	r0, r6
 800b516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b51a:	89ab      	ldrh	r3, [r5, #12]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d907      	bls.n	800b530 <_fwalk_sglue+0x38>
 800b520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b524:	3301      	adds	r3, #1
 800b526:	d003      	beq.n	800b530 <_fwalk_sglue+0x38>
 800b528:	4629      	mov	r1, r5
 800b52a:	4638      	mov	r0, r7
 800b52c:	47c0      	blx	r8
 800b52e:	4306      	orrs	r6, r0
 800b530:	3568      	adds	r5, #104	@ 0x68
 800b532:	e7e9      	b.n	800b508 <_fwalk_sglue+0x10>

0800b534 <iprintf>:
 800b534:	b40f      	push	{r0, r1, r2, r3}
 800b536:	b507      	push	{r0, r1, r2, lr}
 800b538:	4906      	ldr	r1, [pc, #24]	@ (800b554 <iprintf+0x20>)
 800b53a:	ab04      	add	r3, sp, #16
 800b53c:	6808      	ldr	r0, [r1, #0]
 800b53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b542:	6881      	ldr	r1, [r0, #8]
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	f000 fb17 	bl	800bb78 <_vfiprintf_r>
 800b54a:	b003      	add	sp, #12
 800b54c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b550:	b004      	add	sp, #16
 800b552:	4770      	bx	lr
 800b554:	20000038 	.word	0x20000038

0800b558 <putchar>:
 800b558:	4b02      	ldr	r3, [pc, #8]	@ (800b564 <putchar+0xc>)
 800b55a:	4601      	mov	r1, r0
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	6882      	ldr	r2, [r0, #8]
 800b560:	f000 bebc 	b.w	800c2dc <_putc_r>
 800b564:	20000038 	.word	0x20000038

0800b568 <_puts_r>:
 800b568:	6a03      	ldr	r3, [r0, #32]
 800b56a:	b570      	push	{r4, r5, r6, lr}
 800b56c:	6884      	ldr	r4, [r0, #8]
 800b56e:	4605      	mov	r5, r0
 800b570:	460e      	mov	r6, r1
 800b572:	b90b      	cbnz	r3, 800b578 <_puts_r+0x10>
 800b574:	f7ff ffa8 	bl	800b4c8 <__sinit>
 800b578:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b57a:	07db      	lsls	r3, r3, #31
 800b57c:	d405      	bmi.n	800b58a <_puts_r+0x22>
 800b57e:	89a3      	ldrh	r3, [r4, #12]
 800b580:	0598      	lsls	r0, r3, #22
 800b582:	d402      	bmi.n	800b58a <_puts_r+0x22>
 800b584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b586:	f000 fa72 	bl	800ba6e <__retarget_lock_acquire_recursive>
 800b58a:	89a3      	ldrh	r3, [r4, #12]
 800b58c:	0719      	lsls	r1, r3, #28
 800b58e:	d502      	bpl.n	800b596 <_puts_r+0x2e>
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d135      	bne.n	800b602 <_puts_r+0x9a>
 800b596:	4621      	mov	r1, r4
 800b598:	4628      	mov	r0, r5
 800b59a:	f000 f979 	bl	800b890 <__swsetup_r>
 800b59e:	b380      	cbz	r0, 800b602 <_puts_r+0x9a>
 800b5a0:	f04f 35ff 	mov.w	r5, #4294967295
 800b5a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5a6:	07da      	lsls	r2, r3, #31
 800b5a8:	d405      	bmi.n	800b5b6 <_puts_r+0x4e>
 800b5aa:	89a3      	ldrh	r3, [r4, #12]
 800b5ac:	059b      	lsls	r3, r3, #22
 800b5ae:	d402      	bmi.n	800b5b6 <_puts_r+0x4e>
 800b5b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5b2:	f000 fa5d 	bl	800ba70 <__retarget_lock_release_recursive>
 800b5b6:	4628      	mov	r0, r5
 800b5b8:	bd70      	pop	{r4, r5, r6, pc}
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	da04      	bge.n	800b5c8 <_puts_r+0x60>
 800b5be:	69a2      	ldr	r2, [r4, #24]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	dc17      	bgt.n	800b5f4 <_puts_r+0x8c>
 800b5c4:	290a      	cmp	r1, #10
 800b5c6:	d015      	beq.n	800b5f4 <_puts_r+0x8c>
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	6022      	str	r2, [r4, #0]
 800b5ce:	7019      	strb	r1, [r3, #0]
 800b5d0:	68a3      	ldr	r3, [r4, #8]
 800b5d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b5d6:	3b01      	subs	r3, #1
 800b5d8:	60a3      	str	r3, [r4, #8]
 800b5da:	2900      	cmp	r1, #0
 800b5dc:	d1ed      	bne.n	800b5ba <_puts_r+0x52>
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	da11      	bge.n	800b606 <_puts_r+0x9e>
 800b5e2:	4622      	mov	r2, r4
 800b5e4:	210a      	movs	r1, #10
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	f000 f913 	bl	800b812 <__swbuf_r>
 800b5ec:	3001      	adds	r0, #1
 800b5ee:	d0d7      	beq.n	800b5a0 <_puts_r+0x38>
 800b5f0:	250a      	movs	r5, #10
 800b5f2:	e7d7      	b.n	800b5a4 <_puts_r+0x3c>
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	f000 f90b 	bl	800b812 <__swbuf_r>
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	d1e7      	bne.n	800b5d0 <_puts_r+0x68>
 800b600:	e7ce      	b.n	800b5a0 <_puts_r+0x38>
 800b602:	3e01      	subs	r6, #1
 800b604:	e7e4      	b.n	800b5d0 <_puts_r+0x68>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	1c5a      	adds	r2, r3, #1
 800b60a:	6022      	str	r2, [r4, #0]
 800b60c:	220a      	movs	r2, #10
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	e7ee      	b.n	800b5f0 <_puts_r+0x88>
	...

0800b614 <puts>:
 800b614:	4b02      	ldr	r3, [pc, #8]	@ (800b620 <puts+0xc>)
 800b616:	4601      	mov	r1, r0
 800b618:	6818      	ldr	r0, [r3, #0]
 800b61a:	f7ff bfa5 	b.w	800b568 <_puts_r>
 800b61e:	bf00      	nop
 800b620:	20000038 	.word	0x20000038

0800b624 <setvbuf>:
 800b624:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b628:	461d      	mov	r5, r3
 800b62a:	4b57      	ldr	r3, [pc, #348]	@ (800b788 <setvbuf+0x164>)
 800b62c:	681f      	ldr	r7, [r3, #0]
 800b62e:	4604      	mov	r4, r0
 800b630:	460e      	mov	r6, r1
 800b632:	4690      	mov	r8, r2
 800b634:	b127      	cbz	r7, 800b640 <setvbuf+0x1c>
 800b636:	6a3b      	ldr	r3, [r7, #32]
 800b638:	b913      	cbnz	r3, 800b640 <setvbuf+0x1c>
 800b63a:	4638      	mov	r0, r7
 800b63c:	f7ff ff44 	bl	800b4c8 <__sinit>
 800b640:	f1b8 0f02 	cmp.w	r8, #2
 800b644:	d006      	beq.n	800b654 <setvbuf+0x30>
 800b646:	f1b8 0f01 	cmp.w	r8, #1
 800b64a:	f200 809a 	bhi.w	800b782 <setvbuf+0x15e>
 800b64e:	2d00      	cmp	r5, #0
 800b650:	f2c0 8097 	blt.w	800b782 <setvbuf+0x15e>
 800b654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b656:	07d9      	lsls	r1, r3, #31
 800b658:	d405      	bmi.n	800b666 <setvbuf+0x42>
 800b65a:	89a3      	ldrh	r3, [r4, #12]
 800b65c:	059a      	lsls	r2, r3, #22
 800b65e:	d402      	bmi.n	800b666 <setvbuf+0x42>
 800b660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b662:	f000 fa04 	bl	800ba6e <__retarget_lock_acquire_recursive>
 800b666:	4621      	mov	r1, r4
 800b668:	4638      	mov	r0, r7
 800b66a:	f000 fdad 	bl	800c1c8 <_fflush_r>
 800b66e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b670:	b141      	cbz	r1, 800b684 <setvbuf+0x60>
 800b672:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b676:	4299      	cmp	r1, r3
 800b678:	d002      	beq.n	800b680 <setvbuf+0x5c>
 800b67a:	4638      	mov	r0, r7
 800b67c:	f000 fa08 	bl	800ba90 <_free_r>
 800b680:	2300      	movs	r3, #0
 800b682:	6363      	str	r3, [r4, #52]	@ 0x34
 800b684:	2300      	movs	r3, #0
 800b686:	61a3      	str	r3, [r4, #24]
 800b688:	6063      	str	r3, [r4, #4]
 800b68a:	89a3      	ldrh	r3, [r4, #12]
 800b68c:	061b      	lsls	r3, r3, #24
 800b68e:	d503      	bpl.n	800b698 <setvbuf+0x74>
 800b690:	6921      	ldr	r1, [r4, #16]
 800b692:	4638      	mov	r0, r7
 800b694:	f000 f9fc 	bl	800ba90 <_free_r>
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b69e:	f023 0303 	bic.w	r3, r3, #3
 800b6a2:	f1b8 0f02 	cmp.w	r8, #2
 800b6a6:	81a3      	strh	r3, [r4, #12]
 800b6a8:	d061      	beq.n	800b76e <setvbuf+0x14a>
 800b6aa:	ab01      	add	r3, sp, #4
 800b6ac:	466a      	mov	r2, sp
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	f000 fdb1 	bl	800c218 <__swhatbuf_r>
 800b6b6:	89a3      	ldrh	r3, [r4, #12]
 800b6b8:	4318      	orrs	r0, r3
 800b6ba:	81a0      	strh	r0, [r4, #12]
 800b6bc:	bb2d      	cbnz	r5, 800b70a <setvbuf+0xe6>
 800b6be:	9d00      	ldr	r5, [sp, #0]
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	f7ff fdb7 	bl	800b234 <malloc>
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d152      	bne.n	800b772 <setvbuf+0x14e>
 800b6cc:	f8dd 9000 	ldr.w	r9, [sp]
 800b6d0:	45a9      	cmp	r9, r5
 800b6d2:	d140      	bne.n	800b756 <setvbuf+0x132>
 800b6d4:	f04f 35ff 	mov.w	r5, #4294967295
 800b6d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6dc:	f043 0202 	orr.w	r2, r3, #2
 800b6e0:	81a2      	strh	r2, [r4, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	60a2      	str	r2, [r4, #8]
 800b6e6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b6ea:	6022      	str	r2, [r4, #0]
 800b6ec:	6122      	str	r2, [r4, #16]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	6162      	str	r2, [r4, #20]
 800b6f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b6f4:	07d6      	lsls	r6, r2, #31
 800b6f6:	d404      	bmi.n	800b702 <setvbuf+0xde>
 800b6f8:	0598      	lsls	r0, r3, #22
 800b6fa:	d402      	bmi.n	800b702 <setvbuf+0xde>
 800b6fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b6fe:	f000 f9b7 	bl	800ba70 <__retarget_lock_release_recursive>
 800b702:	4628      	mov	r0, r5
 800b704:	b003      	add	sp, #12
 800b706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b70a:	2e00      	cmp	r6, #0
 800b70c:	d0d8      	beq.n	800b6c0 <setvbuf+0x9c>
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	b913      	cbnz	r3, 800b718 <setvbuf+0xf4>
 800b712:	4638      	mov	r0, r7
 800b714:	f7ff fed8 	bl	800b4c8 <__sinit>
 800b718:	f1b8 0f01 	cmp.w	r8, #1
 800b71c:	bf08      	it	eq
 800b71e:	89a3      	ldrheq	r3, [r4, #12]
 800b720:	6026      	str	r6, [r4, #0]
 800b722:	bf04      	itt	eq
 800b724:	f043 0301 	orreq.w	r3, r3, #1
 800b728:	81a3      	strheq	r3, [r4, #12]
 800b72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72e:	f013 0208 	ands.w	r2, r3, #8
 800b732:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b736:	d01e      	beq.n	800b776 <setvbuf+0x152>
 800b738:	07d9      	lsls	r1, r3, #31
 800b73a:	bf41      	itttt	mi
 800b73c:	2200      	movmi	r2, #0
 800b73e:	426d      	negmi	r5, r5
 800b740:	60a2      	strmi	r2, [r4, #8]
 800b742:	61a5      	strmi	r5, [r4, #24]
 800b744:	bf58      	it	pl
 800b746:	60a5      	strpl	r5, [r4, #8]
 800b748:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b74a:	07d2      	lsls	r2, r2, #31
 800b74c:	d401      	bmi.n	800b752 <setvbuf+0x12e>
 800b74e:	059b      	lsls	r3, r3, #22
 800b750:	d513      	bpl.n	800b77a <setvbuf+0x156>
 800b752:	2500      	movs	r5, #0
 800b754:	e7d5      	b.n	800b702 <setvbuf+0xde>
 800b756:	4648      	mov	r0, r9
 800b758:	f7ff fd6c 	bl	800b234 <malloc>
 800b75c:	4606      	mov	r6, r0
 800b75e:	2800      	cmp	r0, #0
 800b760:	d0b8      	beq.n	800b6d4 <setvbuf+0xb0>
 800b762:	89a3      	ldrh	r3, [r4, #12]
 800b764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b768:	81a3      	strh	r3, [r4, #12]
 800b76a:	464d      	mov	r5, r9
 800b76c:	e7cf      	b.n	800b70e <setvbuf+0xea>
 800b76e:	2500      	movs	r5, #0
 800b770:	e7b2      	b.n	800b6d8 <setvbuf+0xb4>
 800b772:	46a9      	mov	r9, r5
 800b774:	e7f5      	b.n	800b762 <setvbuf+0x13e>
 800b776:	60a2      	str	r2, [r4, #8]
 800b778:	e7e6      	b.n	800b748 <setvbuf+0x124>
 800b77a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b77c:	f000 f978 	bl	800ba70 <__retarget_lock_release_recursive>
 800b780:	e7e7      	b.n	800b752 <setvbuf+0x12e>
 800b782:	f04f 35ff 	mov.w	r5, #4294967295
 800b786:	e7bc      	b.n	800b702 <setvbuf+0xde>
 800b788:	20000038 	.word	0x20000038

0800b78c <__sread>:
 800b78c:	b510      	push	{r4, lr}
 800b78e:	460c      	mov	r4, r1
 800b790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b794:	f000 f90c 	bl	800b9b0 <_read_r>
 800b798:	2800      	cmp	r0, #0
 800b79a:	bfab      	itete	ge
 800b79c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b79e:	89a3      	ldrhlt	r3, [r4, #12]
 800b7a0:	181b      	addge	r3, r3, r0
 800b7a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b7a6:	bfac      	ite	ge
 800b7a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b7aa:	81a3      	strhlt	r3, [r4, #12]
 800b7ac:	bd10      	pop	{r4, pc}

0800b7ae <__swrite>:
 800b7ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b2:	461f      	mov	r7, r3
 800b7b4:	898b      	ldrh	r3, [r1, #12]
 800b7b6:	05db      	lsls	r3, r3, #23
 800b7b8:	4605      	mov	r5, r0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	4616      	mov	r6, r2
 800b7be:	d505      	bpl.n	800b7cc <__swrite+0x1e>
 800b7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7c4:	2302      	movs	r3, #2
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f000 f8e0 	bl	800b98c <_lseek_r>
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7d6:	81a3      	strh	r3, [r4, #12]
 800b7d8:	4632      	mov	r2, r6
 800b7da:	463b      	mov	r3, r7
 800b7dc:	4628      	mov	r0, r5
 800b7de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e2:	f000 b907 	b.w	800b9f4 <_write_r>

0800b7e6 <__sseek>:
 800b7e6:	b510      	push	{r4, lr}
 800b7e8:	460c      	mov	r4, r1
 800b7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ee:	f000 f8cd 	bl	800b98c <_lseek_r>
 800b7f2:	1c43      	adds	r3, r0, #1
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	bf15      	itete	ne
 800b7f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b802:	81a3      	strheq	r3, [r4, #12]
 800b804:	bf18      	it	ne
 800b806:	81a3      	strhne	r3, [r4, #12]
 800b808:	bd10      	pop	{r4, pc}

0800b80a <__sclose>:
 800b80a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b80e:	f000 b8ad 	b.w	800b96c <_close_r>

0800b812 <__swbuf_r>:
 800b812:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b814:	460e      	mov	r6, r1
 800b816:	4614      	mov	r4, r2
 800b818:	4605      	mov	r5, r0
 800b81a:	b118      	cbz	r0, 800b824 <__swbuf_r+0x12>
 800b81c:	6a03      	ldr	r3, [r0, #32]
 800b81e:	b90b      	cbnz	r3, 800b824 <__swbuf_r+0x12>
 800b820:	f7ff fe52 	bl	800b4c8 <__sinit>
 800b824:	69a3      	ldr	r3, [r4, #24]
 800b826:	60a3      	str	r3, [r4, #8]
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	071a      	lsls	r2, r3, #28
 800b82c:	d501      	bpl.n	800b832 <__swbuf_r+0x20>
 800b82e:	6923      	ldr	r3, [r4, #16]
 800b830:	b943      	cbnz	r3, 800b844 <__swbuf_r+0x32>
 800b832:	4621      	mov	r1, r4
 800b834:	4628      	mov	r0, r5
 800b836:	f000 f82b 	bl	800b890 <__swsetup_r>
 800b83a:	b118      	cbz	r0, 800b844 <__swbuf_r+0x32>
 800b83c:	f04f 37ff 	mov.w	r7, #4294967295
 800b840:	4638      	mov	r0, r7
 800b842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b844:	6823      	ldr	r3, [r4, #0]
 800b846:	6922      	ldr	r2, [r4, #16]
 800b848:	1a98      	subs	r0, r3, r2
 800b84a:	6963      	ldr	r3, [r4, #20]
 800b84c:	b2f6      	uxtb	r6, r6
 800b84e:	4283      	cmp	r3, r0
 800b850:	4637      	mov	r7, r6
 800b852:	dc05      	bgt.n	800b860 <__swbuf_r+0x4e>
 800b854:	4621      	mov	r1, r4
 800b856:	4628      	mov	r0, r5
 800b858:	f000 fcb6 	bl	800c1c8 <_fflush_r>
 800b85c:	2800      	cmp	r0, #0
 800b85e:	d1ed      	bne.n	800b83c <__swbuf_r+0x2a>
 800b860:	68a3      	ldr	r3, [r4, #8]
 800b862:	3b01      	subs	r3, #1
 800b864:	60a3      	str	r3, [r4, #8]
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	6022      	str	r2, [r4, #0]
 800b86c:	701e      	strb	r6, [r3, #0]
 800b86e:	6962      	ldr	r2, [r4, #20]
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	429a      	cmp	r2, r3
 800b874:	d004      	beq.n	800b880 <__swbuf_r+0x6e>
 800b876:	89a3      	ldrh	r3, [r4, #12]
 800b878:	07db      	lsls	r3, r3, #31
 800b87a:	d5e1      	bpl.n	800b840 <__swbuf_r+0x2e>
 800b87c:	2e0a      	cmp	r6, #10
 800b87e:	d1df      	bne.n	800b840 <__swbuf_r+0x2e>
 800b880:	4621      	mov	r1, r4
 800b882:	4628      	mov	r0, r5
 800b884:	f000 fca0 	bl	800c1c8 <_fflush_r>
 800b888:	2800      	cmp	r0, #0
 800b88a:	d0d9      	beq.n	800b840 <__swbuf_r+0x2e>
 800b88c:	e7d6      	b.n	800b83c <__swbuf_r+0x2a>
	...

0800b890 <__swsetup_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4b29      	ldr	r3, [pc, #164]	@ (800b938 <__swsetup_r+0xa8>)
 800b894:	4605      	mov	r5, r0
 800b896:	6818      	ldr	r0, [r3, #0]
 800b898:	460c      	mov	r4, r1
 800b89a:	b118      	cbz	r0, 800b8a4 <__swsetup_r+0x14>
 800b89c:	6a03      	ldr	r3, [r0, #32]
 800b89e:	b90b      	cbnz	r3, 800b8a4 <__swsetup_r+0x14>
 800b8a0:	f7ff fe12 	bl	800b4c8 <__sinit>
 800b8a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a8:	0719      	lsls	r1, r3, #28
 800b8aa:	d422      	bmi.n	800b8f2 <__swsetup_r+0x62>
 800b8ac:	06da      	lsls	r2, r3, #27
 800b8ae:	d407      	bmi.n	800b8c0 <__swsetup_r+0x30>
 800b8b0:	2209      	movs	r2, #9
 800b8b2:	602a      	str	r2, [r5, #0]
 800b8b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b8be:	e033      	b.n	800b928 <__swsetup_r+0x98>
 800b8c0:	0758      	lsls	r0, r3, #29
 800b8c2:	d512      	bpl.n	800b8ea <__swsetup_r+0x5a>
 800b8c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8c6:	b141      	cbz	r1, 800b8da <__swsetup_r+0x4a>
 800b8c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8cc:	4299      	cmp	r1, r3
 800b8ce:	d002      	beq.n	800b8d6 <__swsetup_r+0x46>
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f000 f8dd 	bl	800ba90 <_free_r>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	6063      	str	r3, [r4, #4]
 800b8e6:	6923      	ldr	r3, [r4, #16]
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f043 0308 	orr.w	r3, r3, #8
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	6923      	ldr	r3, [r4, #16]
 800b8f4:	b94b      	cbnz	r3, 800b90a <__swsetup_r+0x7a>
 800b8f6:	89a3      	ldrh	r3, [r4, #12]
 800b8f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b900:	d003      	beq.n	800b90a <__swsetup_r+0x7a>
 800b902:	4621      	mov	r1, r4
 800b904:	4628      	mov	r0, r5
 800b906:	f000 fcad 	bl	800c264 <__smakebuf_r>
 800b90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b90e:	f013 0201 	ands.w	r2, r3, #1
 800b912:	d00a      	beq.n	800b92a <__swsetup_r+0x9a>
 800b914:	2200      	movs	r2, #0
 800b916:	60a2      	str	r2, [r4, #8]
 800b918:	6962      	ldr	r2, [r4, #20]
 800b91a:	4252      	negs	r2, r2
 800b91c:	61a2      	str	r2, [r4, #24]
 800b91e:	6922      	ldr	r2, [r4, #16]
 800b920:	b942      	cbnz	r2, 800b934 <__swsetup_r+0xa4>
 800b922:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b926:	d1c5      	bne.n	800b8b4 <__swsetup_r+0x24>
 800b928:	bd38      	pop	{r3, r4, r5, pc}
 800b92a:	0799      	lsls	r1, r3, #30
 800b92c:	bf58      	it	pl
 800b92e:	6962      	ldrpl	r2, [r4, #20]
 800b930:	60a2      	str	r2, [r4, #8]
 800b932:	e7f4      	b.n	800b91e <__swsetup_r+0x8e>
 800b934:	2000      	movs	r0, #0
 800b936:	e7f7      	b.n	800b928 <__swsetup_r+0x98>
 800b938:	20000038 	.word	0x20000038

0800b93c <memcmp>:
 800b93c:	b510      	push	{r4, lr}
 800b93e:	3901      	subs	r1, #1
 800b940:	4402      	add	r2, r0
 800b942:	4290      	cmp	r0, r2
 800b944:	d101      	bne.n	800b94a <memcmp+0xe>
 800b946:	2000      	movs	r0, #0
 800b948:	e005      	b.n	800b956 <memcmp+0x1a>
 800b94a:	7803      	ldrb	r3, [r0, #0]
 800b94c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b950:	42a3      	cmp	r3, r4
 800b952:	d001      	beq.n	800b958 <memcmp+0x1c>
 800b954:	1b18      	subs	r0, r3, r4
 800b956:	bd10      	pop	{r4, pc}
 800b958:	3001      	adds	r0, #1
 800b95a:	e7f2      	b.n	800b942 <memcmp+0x6>

0800b95c <memset>:
 800b95c:	4402      	add	r2, r0
 800b95e:	4603      	mov	r3, r0
 800b960:	4293      	cmp	r3, r2
 800b962:	d100      	bne.n	800b966 <memset+0xa>
 800b964:	4770      	bx	lr
 800b966:	f803 1b01 	strb.w	r1, [r3], #1
 800b96a:	e7f9      	b.n	800b960 <memset+0x4>

0800b96c <_close_r>:
 800b96c:	b538      	push	{r3, r4, r5, lr}
 800b96e:	4d06      	ldr	r5, [pc, #24]	@ (800b988 <_close_r+0x1c>)
 800b970:	2300      	movs	r3, #0
 800b972:	4604      	mov	r4, r0
 800b974:	4608      	mov	r0, r1
 800b976:	602b      	str	r3, [r5, #0]
 800b978:	f7f7 f959 	bl	8002c2e <_close>
 800b97c:	1c43      	adds	r3, r0, #1
 800b97e:	d102      	bne.n	800b986 <_close_r+0x1a>
 800b980:	682b      	ldr	r3, [r5, #0]
 800b982:	b103      	cbz	r3, 800b986 <_close_r+0x1a>
 800b984:	6023      	str	r3, [r4, #0]
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	20000af8 	.word	0x20000af8

0800b98c <_lseek_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	@ (800b9ac <_lseek_r+0x20>)
 800b990:	4604      	mov	r4, r0
 800b992:	4608      	mov	r0, r1
 800b994:	4611      	mov	r1, r2
 800b996:	2200      	movs	r2, #0
 800b998:	602a      	str	r2, [r5, #0]
 800b99a:	461a      	mov	r2, r3
 800b99c:	f7f7 f96e 	bl	8002c7c <_lseek>
 800b9a0:	1c43      	adds	r3, r0, #1
 800b9a2:	d102      	bne.n	800b9aa <_lseek_r+0x1e>
 800b9a4:	682b      	ldr	r3, [r5, #0]
 800b9a6:	b103      	cbz	r3, 800b9aa <_lseek_r+0x1e>
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	20000af8 	.word	0x20000af8

0800b9b0 <_read_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d07      	ldr	r5, [pc, #28]	@ (800b9d0 <_read_r+0x20>)
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	4608      	mov	r0, r1
 800b9b8:	4611      	mov	r1, r2
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	602a      	str	r2, [r5, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	f7f7 f918 	bl	8002bf4 <_read>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_read_r+0x1e>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_read_r+0x1e>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	20000af8 	.word	0x20000af8

0800b9d4 <_sbrk_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d06      	ldr	r5, [pc, #24]	@ (800b9f0 <_sbrk_r+0x1c>)
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	f7f7 f95a 	bl	8002c98 <_sbrk>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d102      	bne.n	800b9ee <_sbrk_r+0x1a>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	b103      	cbz	r3, 800b9ee <_sbrk_r+0x1a>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	20000af8 	.word	0x20000af8

0800b9f4 <_write_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4d07      	ldr	r5, [pc, #28]	@ (800ba14 <_write_r+0x20>)
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	4608      	mov	r0, r1
 800b9fc:	4611      	mov	r1, r2
 800b9fe:	2200      	movs	r2, #0
 800ba00:	602a      	str	r2, [r5, #0]
 800ba02:	461a      	mov	r2, r3
 800ba04:	f7f4 fef0 	bl	80007e8 <_write>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d102      	bne.n	800ba12 <_write_r+0x1e>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <_write_r+0x1e>
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
 800ba14:	20000af8 	.word	0x20000af8

0800ba18 <__errno>:
 800ba18:	4b01      	ldr	r3, [pc, #4]	@ (800ba20 <__errno+0x8>)
 800ba1a:	6818      	ldr	r0, [r3, #0]
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	20000038 	.word	0x20000038

0800ba24 <__libc_init_array>:
 800ba24:	b570      	push	{r4, r5, r6, lr}
 800ba26:	4d0d      	ldr	r5, [pc, #52]	@ (800ba5c <__libc_init_array+0x38>)
 800ba28:	4c0d      	ldr	r4, [pc, #52]	@ (800ba60 <__libc_init_array+0x3c>)
 800ba2a:	1b64      	subs	r4, r4, r5
 800ba2c:	10a4      	asrs	r4, r4, #2
 800ba2e:	2600      	movs	r6, #0
 800ba30:	42a6      	cmp	r6, r4
 800ba32:	d109      	bne.n	800ba48 <__libc_init_array+0x24>
 800ba34:	4d0b      	ldr	r5, [pc, #44]	@ (800ba64 <__libc_init_array+0x40>)
 800ba36:	4c0c      	ldr	r4, [pc, #48]	@ (800ba68 <__libc_init_array+0x44>)
 800ba38:	f000 fca6 	bl	800c388 <_init>
 800ba3c:	1b64      	subs	r4, r4, r5
 800ba3e:	10a4      	asrs	r4, r4, #2
 800ba40:	2600      	movs	r6, #0
 800ba42:	42a6      	cmp	r6, r4
 800ba44:	d105      	bne.n	800ba52 <__libc_init_array+0x2e>
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba4c:	4798      	blx	r3
 800ba4e:	3601      	adds	r6, #1
 800ba50:	e7ee      	b.n	800ba30 <__libc_init_array+0xc>
 800ba52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba56:	4798      	blx	r3
 800ba58:	3601      	adds	r6, #1
 800ba5a:	e7f2      	b.n	800ba42 <__libc_init_array+0x1e>
 800ba5c:	0800c7cc 	.word	0x0800c7cc
 800ba60:	0800c7cc 	.word	0x0800c7cc
 800ba64:	0800c7cc 	.word	0x0800c7cc
 800ba68:	0800c7d0 	.word	0x0800c7d0

0800ba6c <__retarget_lock_init_recursive>:
 800ba6c:	4770      	bx	lr

0800ba6e <__retarget_lock_acquire_recursive>:
 800ba6e:	4770      	bx	lr

0800ba70 <__retarget_lock_release_recursive>:
 800ba70:	4770      	bx	lr

0800ba72 <memcpy>:
 800ba72:	440a      	add	r2, r1
 800ba74:	4291      	cmp	r1, r2
 800ba76:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba7a:	d100      	bne.n	800ba7e <memcpy+0xc>
 800ba7c:	4770      	bx	lr
 800ba7e:	b510      	push	{r4, lr}
 800ba80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba88:	4291      	cmp	r1, r2
 800ba8a:	d1f9      	bne.n	800ba80 <memcpy+0xe>
 800ba8c:	bd10      	pop	{r4, pc}
	...

0800ba90 <_free_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4605      	mov	r5, r0
 800ba94:	2900      	cmp	r1, #0
 800ba96:	d041      	beq.n	800bb1c <_free_r+0x8c>
 800ba98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba9c:	1f0c      	subs	r4, r1, #4
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	bfb8      	it	lt
 800baa2:	18e4      	addlt	r4, r4, r3
 800baa4:	f7ff fc78 	bl	800b398 <__malloc_lock>
 800baa8:	4a1d      	ldr	r2, [pc, #116]	@ (800bb20 <_free_r+0x90>)
 800baaa:	6813      	ldr	r3, [r2, #0]
 800baac:	b933      	cbnz	r3, 800babc <_free_r+0x2c>
 800baae:	6063      	str	r3, [r4, #4]
 800bab0:	6014      	str	r4, [r2, #0]
 800bab2:	4628      	mov	r0, r5
 800bab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bab8:	f7ff bc74 	b.w	800b3a4 <__malloc_unlock>
 800babc:	42a3      	cmp	r3, r4
 800babe:	d908      	bls.n	800bad2 <_free_r+0x42>
 800bac0:	6820      	ldr	r0, [r4, #0]
 800bac2:	1821      	adds	r1, r4, r0
 800bac4:	428b      	cmp	r3, r1
 800bac6:	bf01      	itttt	eq
 800bac8:	6819      	ldreq	r1, [r3, #0]
 800baca:	685b      	ldreq	r3, [r3, #4]
 800bacc:	1809      	addeq	r1, r1, r0
 800bace:	6021      	streq	r1, [r4, #0]
 800bad0:	e7ed      	b.n	800baae <_free_r+0x1e>
 800bad2:	461a      	mov	r2, r3
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	b10b      	cbz	r3, 800badc <_free_r+0x4c>
 800bad8:	42a3      	cmp	r3, r4
 800bada:	d9fa      	bls.n	800bad2 <_free_r+0x42>
 800badc:	6811      	ldr	r1, [r2, #0]
 800bade:	1850      	adds	r0, r2, r1
 800bae0:	42a0      	cmp	r0, r4
 800bae2:	d10b      	bne.n	800bafc <_free_r+0x6c>
 800bae4:	6820      	ldr	r0, [r4, #0]
 800bae6:	4401      	add	r1, r0
 800bae8:	1850      	adds	r0, r2, r1
 800baea:	4283      	cmp	r3, r0
 800baec:	6011      	str	r1, [r2, #0]
 800baee:	d1e0      	bne.n	800bab2 <_free_r+0x22>
 800baf0:	6818      	ldr	r0, [r3, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	6053      	str	r3, [r2, #4]
 800baf6:	4408      	add	r0, r1
 800baf8:	6010      	str	r0, [r2, #0]
 800bafa:	e7da      	b.n	800bab2 <_free_r+0x22>
 800bafc:	d902      	bls.n	800bb04 <_free_r+0x74>
 800bafe:	230c      	movs	r3, #12
 800bb00:	602b      	str	r3, [r5, #0]
 800bb02:	e7d6      	b.n	800bab2 <_free_r+0x22>
 800bb04:	6820      	ldr	r0, [r4, #0]
 800bb06:	1821      	adds	r1, r4, r0
 800bb08:	428b      	cmp	r3, r1
 800bb0a:	bf04      	itt	eq
 800bb0c:	6819      	ldreq	r1, [r3, #0]
 800bb0e:	685b      	ldreq	r3, [r3, #4]
 800bb10:	6063      	str	r3, [r4, #4]
 800bb12:	bf04      	itt	eq
 800bb14:	1809      	addeq	r1, r1, r0
 800bb16:	6021      	streq	r1, [r4, #0]
 800bb18:	6054      	str	r4, [r2, #4]
 800bb1a:	e7ca      	b.n	800bab2 <_free_r+0x22>
 800bb1c:	bd38      	pop	{r3, r4, r5, pc}
 800bb1e:	bf00      	nop
 800bb20:	200009b8 	.word	0x200009b8

0800bb24 <__sfputc_r>:
 800bb24:	6893      	ldr	r3, [r2, #8]
 800bb26:	3b01      	subs	r3, #1
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	b410      	push	{r4}
 800bb2c:	6093      	str	r3, [r2, #8]
 800bb2e:	da08      	bge.n	800bb42 <__sfputc_r+0x1e>
 800bb30:	6994      	ldr	r4, [r2, #24]
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	db01      	blt.n	800bb3a <__sfputc_r+0x16>
 800bb36:	290a      	cmp	r1, #10
 800bb38:	d103      	bne.n	800bb42 <__sfputc_r+0x1e>
 800bb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3e:	f7ff be68 	b.w	800b812 <__swbuf_r>
 800bb42:	6813      	ldr	r3, [r2, #0]
 800bb44:	1c58      	adds	r0, r3, #1
 800bb46:	6010      	str	r0, [r2, #0]
 800bb48:	7019      	strb	r1, [r3, #0]
 800bb4a:	4608      	mov	r0, r1
 800bb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <__sfputs_r>:
 800bb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb54:	4606      	mov	r6, r0
 800bb56:	460f      	mov	r7, r1
 800bb58:	4614      	mov	r4, r2
 800bb5a:	18d5      	adds	r5, r2, r3
 800bb5c:	42ac      	cmp	r4, r5
 800bb5e:	d101      	bne.n	800bb64 <__sfputs_r+0x12>
 800bb60:	2000      	movs	r0, #0
 800bb62:	e007      	b.n	800bb74 <__sfputs_r+0x22>
 800bb64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb68:	463a      	mov	r2, r7
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	f7ff ffda 	bl	800bb24 <__sfputc_r>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d1f3      	bne.n	800bb5c <__sfputs_r+0xa>
 800bb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb78 <_vfiprintf_r>:
 800bb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb7c:	460d      	mov	r5, r1
 800bb7e:	b09d      	sub	sp, #116	@ 0x74
 800bb80:	4614      	mov	r4, r2
 800bb82:	4698      	mov	r8, r3
 800bb84:	4606      	mov	r6, r0
 800bb86:	b118      	cbz	r0, 800bb90 <_vfiprintf_r+0x18>
 800bb88:	6a03      	ldr	r3, [r0, #32]
 800bb8a:	b90b      	cbnz	r3, 800bb90 <_vfiprintf_r+0x18>
 800bb8c:	f7ff fc9c 	bl	800b4c8 <__sinit>
 800bb90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb92:	07d9      	lsls	r1, r3, #31
 800bb94:	d405      	bmi.n	800bba2 <_vfiprintf_r+0x2a>
 800bb96:	89ab      	ldrh	r3, [r5, #12]
 800bb98:	059a      	lsls	r2, r3, #22
 800bb9a:	d402      	bmi.n	800bba2 <_vfiprintf_r+0x2a>
 800bb9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb9e:	f7ff ff66 	bl	800ba6e <__retarget_lock_acquire_recursive>
 800bba2:	89ab      	ldrh	r3, [r5, #12]
 800bba4:	071b      	lsls	r3, r3, #28
 800bba6:	d501      	bpl.n	800bbac <_vfiprintf_r+0x34>
 800bba8:	692b      	ldr	r3, [r5, #16]
 800bbaa:	b99b      	cbnz	r3, 800bbd4 <_vfiprintf_r+0x5c>
 800bbac:	4629      	mov	r1, r5
 800bbae:	4630      	mov	r0, r6
 800bbb0:	f7ff fe6e 	bl	800b890 <__swsetup_r>
 800bbb4:	b170      	cbz	r0, 800bbd4 <_vfiprintf_r+0x5c>
 800bbb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbb8:	07dc      	lsls	r4, r3, #31
 800bbba:	d504      	bpl.n	800bbc6 <_vfiprintf_r+0x4e>
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	b01d      	add	sp, #116	@ 0x74
 800bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbc6:	89ab      	ldrh	r3, [r5, #12]
 800bbc8:	0598      	lsls	r0, r3, #22
 800bbca:	d4f7      	bmi.n	800bbbc <_vfiprintf_r+0x44>
 800bbcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbce:	f7ff ff4f 	bl	800ba70 <__retarget_lock_release_recursive>
 800bbd2:	e7f3      	b.n	800bbbc <_vfiprintf_r+0x44>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbd8:	2320      	movs	r3, #32
 800bbda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbde:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbe2:	2330      	movs	r3, #48	@ 0x30
 800bbe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bd94 <_vfiprintf_r+0x21c>
 800bbe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbec:	f04f 0901 	mov.w	r9, #1
 800bbf0:	4623      	mov	r3, r4
 800bbf2:	469a      	mov	sl, r3
 800bbf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbf8:	b10a      	cbz	r2, 800bbfe <_vfiprintf_r+0x86>
 800bbfa:	2a25      	cmp	r2, #37	@ 0x25
 800bbfc:	d1f9      	bne.n	800bbf2 <_vfiprintf_r+0x7a>
 800bbfe:	ebba 0b04 	subs.w	fp, sl, r4
 800bc02:	d00b      	beq.n	800bc1c <_vfiprintf_r+0xa4>
 800bc04:	465b      	mov	r3, fp
 800bc06:	4622      	mov	r2, r4
 800bc08:	4629      	mov	r1, r5
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f7ff ffa1 	bl	800bb52 <__sfputs_r>
 800bc10:	3001      	adds	r0, #1
 800bc12:	f000 80a7 	beq.w	800bd64 <_vfiprintf_r+0x1ec>
 800bc16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc18:	445a      	add	r2, fp
 800bc1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f000 809f 	beq.w	800bd64 <_vfiprintf_r+0x1ec>
 800bc26:	2300      	movs	r3, #0
 800bc28:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc30:	f10a 0a01 	add.w	sl, sl, #1
 800bc34:	9304      	str	r3, [sp, #16]
 800bc36:	9307      	str	r3, [sp, #28]
 800bc38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc3e:	4654      	mov	r4, sl
 800bc40:	2205      	movs	r2, #5
 800bc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc46:	4853      	ldr	r0, [pc, #332]	@ (800bd94 <_vfiprintf_r+0x21c>)
 800bc48:	f7f4 fac2 	bl	80001d0 <memchr>
 800bc4c:	9a04      	ldr	r2, [sp, #16]
 800bc4e:	b9d8      	cbnz	r0, 800bc88 <_vfiprintf_r+0x110>
 800bc50:	06d1      	lsls	r1, r2, #27
 800bc52:	bf44      	itt	mi
 800bc54:	2320      	movmi	r3, #32
 800bc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc5a:	0713      	lsls	r3, r2, #28
 800bc5c:	bf44      	itt	mi
 800bc5e:	232b      	movmi	r3, #43	@ 0x2b
 800bc60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc64:	f89a 3000 	ldrb.w	r3, [sl]
 800bc68:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc6a:	d015      	beq.n	800bc98 <_vfiprintf_r+0x120>
 800bc6c:	9a07      	ldr	r2, [sp, #28]
 800bc6e:	4654      	mov	r4, sl
 800bc70:	2000      	movs	r0, #0
 800bc72:	f04f 0c0a 	mov.w	ip, #10
 800bc76:	4621      	mov	r1, r4
 800bc78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc7c:	3b30      	subs	r3, #48	@ 0x30
 800bc7e:	2b09      	cmp	r3, #9
 800bc80:	d94b      	bls.n	800bd1a <_vfiprintf_r+0x1a2>
 800bc82:	b1b0      	cbz	r0, 800bcb2 <_vfiprintf_r+0x13a>
 800bc84:	9207      	str	r2, [sp, #28]
 800bc86:	e014      	b.n	800bcb2 <_vfiprintf_r+0x13a>
 800bc88:	eba0 0308 	sub.w	r3, r0, r8
 800bc8c:	fa09 f303 	lsl.w	r3, r9, r3
 800bc90:	4313      	orrs	r3, r2
 800bc92:	9304      	str	r3, [sp, #16]
 800bc94:	46a2      	mov	sl, r4
 800bc96:	e7d2      	b.n	800bc3e <_vfiprintf_r+0xc6>
 800bc98:	9b03      	ldr	r3, [sp, #12]
 800bc9a:	1d19      	adds	r1, r3, #4
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	9103      	str	r1, [sp, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	bfbb      	ittet	lt
 800bca4:	425b      	neglt	r3, r3
 800bca6:	f042 0202 	orrlt.w	r2, r2, #2
 800bcaa:	9307      	strge	r3, [sp, #28]
 800bcac:	9307      	strlt	r3, [sp, #28]
 800bcae:	bfb8      	it	lt
 800bcb0:	9204      	strlt	r2, [sp, #16]
 800bcb2:	7823      	ldrb	r3, [r4, #0]
 800bcb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcb6:	d10a      	bne.n	800bcce <_vfiprintf_r+0x156>
 800bcb8:	7863      	ldrb	r3, [r4, #1]
 800bcba:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcbc:	d132      	bne.n	800bd24 <_vfiprintf_r+0x1ac>
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	1d1a      	adds	r2, r3, #4
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	9203      	str	r2, [sp, #12]
 800bcc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcca:	3402      	adds	r4, #2
 800bccc:	9305      	str	r3, [sp, #20]
 800bcce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bda4 <_vfiprintf_r+0x22c>
 800bcd2:	7821      	ldrb	r1, [r4, #0]
 800bcd4:	2203      	movs	r2, #3
 800bcd6:	4650      	mov	r0, sl
 800bcd8:	f7f4 fa7a 	bl	80001d0 <memchr>
 800bcdc:	b138      	cbz	r0, 800bcee <_vfiprintf_r+0x176>
 800bcde:	9b04      	ldr	r3, [sp, #16]
 800bce0:	eba0 000a 	sub.w	r0, r0, sl
 800bce4:	2240      	movs	r2, #64	@ 0x40
 800bce6:	4082      	lsls	r2, r0
 800bce8:	4313      	orrs	r3, r2
 800bcea:	3401      	adds	r4, #1
 800bcec:	9304      	str	r3, [sp, #16]
 800bcee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf2:	4829      	ldr	r0, [pc, #164]	@ (800bd98 <_vfiprintf_r+0x220>)
 800bcf4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcf8:	2206      	movs	r2, #6
 800bcfa:	f7f4 fa69 	bl	80001d0 <memchr>
 800bcfe:	2800      	cmp	r0, #0
 800bd00:	d03f      	beq.n	800bd82 <_vfiprintf_r+0x20a>
 800bd02:	4b26      	ldr	r3, [pc, #152]	@ (800bd9c <_vfiprintf_r+0x224>)
 800bd04:	bb1b      	cbnz	r3, 800bd4e <_vfiprintf_r+0x1d6>
 800bd06:	9b03      	ldr	r3, [sp, #12]
 800bd08:	3307      	adds	r3, #7
 800bd0a:	f023 0307 	bic.w	r3, r3, #7
 800bd0e:	3308      	adds	r3, #8
 800bd10:	9303      	str	r3, [sp, #12]
 800bd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd14:	443b      	add	r3, r7
 800bd16:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd18:	e76a      	b.n	800bbf0 <_vfiprintf_r+0x78>
 800bd1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd1e:	460c      	mov	r4, r1
 800bd20:	2001      	movs	r0, #1
 800bd22:	e7a8      	b.n	800bc76 <_vfiprintf_r+0xfe>
 800bd24:	2300      	movs	r3, #0
 800bd26:	3401      	adds	r4, #1
 800bd28:	9305      	str	r3, [sp, #20]
 800bd2a:	4619      	mov	r1, r3
 800bd2c:	f04f 0c0a 	mov.w	ip, #10
 800bd30:	4620      	mov	r0, r4
 800bd32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd36:	3a30      	subs	r2, #48	@ 0x30
 800bd38:	2a09      	cmp	r2, #9
 800bd3a:	d903      	bls.n	800bd44 <_vfiprintf_r+0x1cc>
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d0c6      	beq.n	800bcce <_vfiprintf_r+0x156>
 800bd40:	9105      	str	r1, [sp, #20]
 800bd42:	e7c4      	b.n	800bcce <_vfiprintf_r+0x156>
 800bd44:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd48:	4604      	mov	r4, r0
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e7f0      	b.n	800bd30 <_vfiprintf_r+0x1b8>
 800bd4e:	ab03      	add	r3, sp, #12
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	462a      	mov	r2, r5
 800bd54:	4b12      	ldr	r3, [pc, #72]	@ (800bda0 <_vfiprintf_r+0x228>)
 800bd56:	a904      	add	r1, sp, #16
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f3af 8000 	nop.w
 800bd5e:	4607      	mov	r7, r0
 800bd60:	1c78      	adds	r0, r7, #1
 800bd62:	d1d6      	bne.n	800bd12 <_vfiprintf_r+0x19a>
 800bd64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd66:	07d9      	lsls	r1, r3, #31
 800bd68:	d405      	bmi.n	800bd76 <_vfiprintf_r+0x1fe>
 800bd6a:	89ab      	ldrh	r3, [r5, #12]
 800bd6c:	059a      	lsls	r2, r3, #22
 800bd6e:	d402      	bmi.n	800bd76 <_vfiprintf_r+0x1fe>
 800bd70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd72:	f7ff fe7d 	bl	800ba70 <__retarget_lock_release_recursive>
 800bd76:	89ab      	ldrh	r3, [r5, #12]
 800bd78:	065b      	lsls	r3, r3, #25
 800bd7a:	f53f af1f 	bmi.w	800bbbc <_vfiprintf_r+0x44>
 800bd7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd80:	e71e      	b.n	800bbc0 <_vfiprintf_r+0x48>
 800bd82:	ab03      	add	r3, sp, #12
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	462a      	mov	r2, r5
 800bd88:	4b05      	ldr	r3, [pc, #20]	@ (800bda0 <_vfiprintf_r+0x228>)
 800bd8a:	a904      	add	r1, sp, #16
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f000 f879 	bl	800be84 <_printf_i>
 800bd92:	e7e4      	b.n	800bd5e <_vfiprintf_r+0x1e6>
 800bd94:	0800c790 	.word	0x0800c790
 800bd98:	0800c79a 	.word	0x0800c79a
 800bd9c:	00000000 	.word	0x00000000
 800bda0:	0800bb53 	.word	0x0800bb53
 800bda4:	0800c796 	.word	0x0800c796

0800bda8 <_printf_common>:
 800bda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdac:	4616      	mov	r6, r2
 800bdae:	4698      	mov	r8, r3
 800bdb0:	688a      	ldr	r2, [r1, #8]
 800bdb2:	690b      	ldr	r3, [r1, #16]
 800bdb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	bfb8      	it	lt
 800bdbc:	4613      	movlt	r3, r2
 800bdbe:	6033      	str	r3, [r6, #0]
 800bdc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bdc4:	4607      	mov	r7, r0
 800bdc6:	460c      	mov	r4, r1
 800bdc8:	b10a      	cbz	r2, 800bdce <_printf_common+0x26>
 800bdca:	3301      	adds	r3, #1
 800bdcc:	6033      	str	r3, [r6, #0]
 800bdce:	6823      	ldr	r3, [r4, #0]
 800bdd0:	0699      	lsls	r1, r3, #26
 800bdd2:	bf42      	ittt	mi
 800bdd4:	6833      	ldrmi	r3, [r6, #0]
 800bdd6:	3302      	addmi	r3, #2
 800bdd8:	6033      	strmi	r3, [r6, #0]
 800bdda:	6825      	ldr	r5, [r4, #0]
 800bddc:	f015 0506 	ands.w	r5, r5, #6
 800bde0:	d106      	bne.n	800bdf0 <_printf_common+0x48>
 800bde2:	f104 0a19 	add.w	sl, r4, #25
 800bde6:	68e3      	ldr	r3, [r4, #12]
 800bde8:	6832      	ldr	r2, [r6, #0]
 800bdea:	1a9b      	subs	r3, r3, r2
 800bdec:	42ab      	cmp	r3, r5
 800bdee:	dc26      	bgt.n	800be3e <_printf_common+0x96>
 800bdf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bdf4:	6822      	ldr	r2, [r4, #0]
 800bdf6:	3b00      	subs	r3, #0
 800bdf8:	bf18      	it	ne
 800bdfa:	2301      	movne	r3, #1
 800bdfc:	0692      	lsls	r2, r2, #26
 800bdfe:	d42b      	bmi.n	800be58 <_printf_common+0xb0>
 800be00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be04:	4641      	mov	r1, r8
 800be06:	4638      	mov	r0, r7
 800be08:	47c8      	blx	r9
 800be0a:	3001      	adds	r0, #1
 800be0c:	d01e      	beq.n	800be4c <_printf_common+0xa4>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	6922      	ldr	r2, [r4, #16]
 800be12:	f003 0306 	and.w	r3, r3, #6
 800be16:	2b04      	cmp	r3, #4
 800be18:	bf02      	ittt	eq
 800be1a:	68e5      	ldreq	r5, [r4, #12]
 800be1c:	6833      	ldreq	r3, [r6, #0]
 800be1e:	1aed      	subeq	r5, r5, r3
 800be20:	68a3      	ldr	r3, [r4, #8]
 800be22:	bf0c      	ite	eq
 800be24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be28:	2500      	movne	r5, #0
 800be2a:	4293      	cmp	r3, r2
 800be2c:	bfc4      	itt	gt
 800be2e:	1a9b      	subgt	r3, r3, r2
 800be30:	18ed      	addgt	r5, r5, r3
 800be32:	2600      	movs	r6, #0
 800be34:	341a      	adds	r4, #26
 800be36:	42b5      	cmp	r5, r6
 800be38:	d11a      	bne.n	800be70 <_printf_common+0xc8>
 800be3a:	2000      	movs	r0, #0
 800be3c:	e008      	b.n	800be50 <_printf_common+0xa8>
 800be3e:	2301      	movs	r3, #1
 800be40:	4652      	mov	r2, sl
 800be42:	4641      	mov	r1, r8
 800be44:	4638      	mov	r0, r7
 800be46:	47c8      	blx	r9
 800be48:	3001      	adds	r0, #1
 800be4a:	d103      	bne.n	800be54 <_printf_common+0xac>
 800be4c:	f04f 30ff 	mov.w	r0, #4294967295
 800be50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be54:	3501      	adds	r5, #1
 800be56:	e7c6      	b.n	800bde6 <_printf_common+0x3e>
 800be58:	18e1      	adds	r1, r4, r3
 800be5a:	1c5a      	adds	r2, r3, #1
 800be5c:	2030      	movs	r0, #48	@ 0x30
 800be5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be62:	4422      	add	r2, r4
 800be64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be6c:	3302      	adds	r3, #2
 800be6e:	e7c7      	b.n	800be00 <_printf_common+0x58>
 800be70:	2301      	movs	r3, #1
 800be72:	4622      	mov	r2, r4
 800be74:	4641      	mov	r1, r8
 800be76:	4638      	mov	r0, r7
 800be78:	47c8      	blx	r9
 800be7a:	3001      	adds	r0, #1
 800be7c:	d0e6      	beq.n	800be4c <_printf_common+0xa4>
 800be7e:	3601      	adds	r6, #1
 800be80:	e7d9      	b.n	800be36 <_printf_common+0x8e>
	...

0800be84 <_printf_i>:
 800be84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be88:	7e0f      	ldrb	r7, [r1, #24]
 800be8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be8c:	2f78      	cmp	r7, #120	@ 0x78
 800be8e:	4691      	mov	r9, r2
 800be90:	4680      	mov	r8, r0
 800be92:	460c      	mov	r4, r1
 800be94:	469a      	mov	sl, r3
 800be96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be9a:	d807      	bhi.n	800beac <_printf_i+0x28>
 800be9c:	2f62      	cmp	r7, #98	@ 0x62
 800be9e:	d80a      	bhi.n	800beb6 <_printf_i+0x32>
 800bea0:	2f00      	cmp	r7, #0
 800bea2:	f000 80d1 	beq.w	800c048 <_printf_i+0x1c4>
 800bea6:	2f58      	cmp	r7, #88	@ 0x58
 800bea8:	f000 80b8 	beq.w	800c01c <_printf_i+0x198>
 800beac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800beb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800beb4:	e03a      	b.n	800bf2c <_printf_i+0xa8>
 800beb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800beba:	2b15      	cmp	r3, #21
 800bebc:	d8f6      	bhi.n	800beac <_printf_i+0x28>
 800bebe:	a101      	add	r1, pc, #4	@ (adr r1, 800bec4 <_printf_i+0x40>)
 800bec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bec4:	0800bf1d 	.word	0x0800bf1d
 800bec8:	0800bf31 	.word	0x0800bf31
 800becc:	0800bead 	.word	0x0800bead
 800bed0:	0800bead 	.word	0x0800bead
 800bed4:	0800bead 	.word	0x0800bead
 800bed8:	0800bead 	.word	0x0800bead
 800bedc:	0800bf31 	.word	0x0800bf31
 800bee0:	0800bead 	.word	0x0800bead
 800bee4:	0800bead 	.word	0x0800bead
 800bee8:	0800bead 	.word	0x0800bead
 800beec:	0800bead 	.word	0x0800bead
 800bef0:	0800c02f 	.word	0x0800c02f
 800bef4:	0800bf5b 	.word	0x0800bf5b
 800bef8:	0800bfe9 	.word	0x0800bfe9
 800befc:	0800bead 	.word	0x0800bead
 800bf00:	0800bead 	.word	0x0800bead
 800bf04:	0800c051 	.word	0x0800c051
 800bf08:	0800bead 	.word	0x0800bead
 800bf0c:	0800bf5b 	.word	0x0800bf5b
 800bf10:	0800bead 	.word	0x0800bead
 800bf14:	0800bead 	.word	0x0800bead
 800bf18:	0800bff1 	.word	0x0800bff1
 800bf1c:	6833      	ldr	r3, [r6, #0]
 800bf1e:	1d1a      	adds	r2, r3, #4
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	6032      	str	r2, [r6, #0]
 800bf24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	e09c      	b.n	800c06a <_printf_i+0x1e6>
 800bf30:	6833      	ldr	r3, [r6, #0]
 800bf32:	6820      	ldr	r0, [r4, #0]
 800bf34:	1d19      	adds	r1, r3, #4
 800bf36:	6031      	str	r1, [r6, #0]
 800bf38:	0606      	lsls	r6, r0, #24
 800bf3a:	d501      	bpl.n	800bf40 <_printf_i+0xbc>
 800bf3c:	681d      	ldr	r5, [r3, #0]
 800bf3e:	e003      	b.n	800bf48 <_printf_i+0xc4>
 800bf40:	0645      	lsls	r5, r0, #25
 800bf42:	d5fb      	bpl.n	800bf3c <_printf_i+0xb8>
 800bf44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf48:	2d00      	cmp	r5, #0
 800bf4a:	da03      	bge.n	800bf54 <_printf_i+0xd0>
 800bf4c:	232d      	movs	r3, #45	@ 0x2d
 800bf4e:	426d      	negs	r5, r5
 800bf50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf54:	4858      	ldr	r0, [pc, #352]	@ (800c0b8 <_printf_i+0x234>)
 800bf56:	230a      	movs	r3, #10
 800bf58:	e011      	b.n	800bf7e <_printf_i+0xfa>
 800bf5a:	6821      	ldr	r1, [r4, #0]
 800bf5c:	6833      	ldr	r3, [r6, #0]
 800bf5e:	0608      	lsls	r0, r1, #24
 800bf60:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf64:	d402      	bmi.n	800bf6c <_printf_i+0xe8>
 800bf66:	0649      	lsls	r1, r1, #25
 800bf68:	bf48      	it	mi
 800bf6a:	b2ad      	uxthmi	r5, r5
 800bf6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf6e:	4852      	ldr	r0, [pc, #328]	@ (800c0b8 <_printf_i+0x234>)
 800bf70:	6033      	str	r3, [r6, #0]
 800bf72:	bf14      	ite	ne
 800bf74:	230a      	movne	r3, #10
 800bf76:	2308      	moveq	r3, #8
 800bf78:	2100      	movs	r1, #0
 800bf7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf7e:	6866      	ldr	r6, [r4, #4]
 800bf80:	60a6      	str	r6, [r4, #8]
 800bf82:	2e00      	cmp	r6, #0
 800bf84:	db05      	blt.n	800bf92 <_printf_i+0x10e>
 800bf86:	6821      	ldr	r1, [r4, #0]
 800bf88:	432e      	orrs	r6, r5
 800bf8a:	f021 0104 	bic.w	r1, r1, #4
 800bf8e:	6021      	str	r1, [r4, #0]
 800bf90:	d04b      	beq.n	800c02a <_printf_i+0x1a6>
 800bf92:	4616      	mov	r6, r2
 800bf94:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf98:	fb03 5711 	mls	r7, r3, r1, r5
 800bf9c:	5dc7      	ldrb	r7, [r0, r7]
 800bf9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfa2:	462f      	mov	r7, r5
 800bfa4:	42bb      	cmp	r3, r7
 800bfa6:	460d      	mov	r5, r1
 800bfa8:	d9f4      	bls.n	800bf94 <_printf_i+0x110>
 800bfaa:	2b08      	cmp	r3, #8
 800bfac:	d10b      	bne.n	800bfc6 <_printf_i+0x142>
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	07df      	lsls	r7, r3, #31
 800bfb2:	d508      	bpl.n	800bfc6 <_printf_i+0x142>
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	6861      	ldr	r1, [r4, #4]
 800bfb8:	4299      	cmp	r1, r3
 800bfba:	bfde      	ittt	le
 800bfbc:	2330      	movle	r3, #48	@ 0x30
 800bfbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfc2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bfc6:	1b92      	subs	r2, r2, r6
 800bfc8:	6122      	str	r2, [r4, #16]
 800bfca:	f8cd a000 	str.w	sl, [sp]
 800bfce:	464b      	mov	r3, r9
 800bfd0:	aa03      	add	r2, sp, #12
 800bfd2:	4621      	mov	r1, r4
 800bfd4:	4640      	mov	r0, r8
 800bfd6:	f7ff fee7 	bl	800bda8 <_printf_common>
 800bfda:	3001      	adds	r0, #1
 800bfdc:	d14a      	bne.n	800c074 <_printf_i+0x1f0>
 800bfde:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe2:	b004      	add	sp, #16
 800bfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	f043 0320 	orr.w	r3, r3, #32
 800bfee:	6023      	str	r3, [r4, #0]
 800bff0:	4832      	ldr	r0, [pc, #200]	@ (800c0bc <_printf_i+0x238>)
 800bff2:	2778      	movs	r7, #120	@ 0x78
 800bff4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	6831      	ldr	r1, [r6, #0]
 800bffc:	061f      	lsls	r7, r3, #24
 800bffe:	f851 5b04 	ldr.w	r5, [r1], #4
 800c002:	d402      	bmi.n	800c00a <_printf_i+0x186>
 800c004:	065f      	lsls	r7, r3, #25
 800c006:	bf48      	it	mi
 800c008:	b2ad      	uxthmi	r5, r5
 800c00a:	6031      	str	r1, [r6, #0]
 800c00c:	07d9      	lsls	r1, r3, #31
 800c00e:	bf44      	itt	mi
 800c010:	f043 0320 	orrmi.w	r3, r3, #32
 800c014:	6023      	strmi	r3, [r4, #0]
 800c016:	b11d      	cbz	r5, 800c020 <_printf_i+0x19c>
 800c018:	2310      	movs	r3, #16
 800c01a:	e7ad      	b.n	800bf78 <_printf_i+0xf4>
 800c01c:	4826      	ldr	r0, [pc, #152]	@ (800c0b8 <_printf_i+0x234>)
 800c01e:	e7e9      	b.n	800bff4 <_printf_i+0x170>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	f023 0320 	bic.w	r3, r3, #32
 800c026:	6023      	str	r3, [r4, #0]
 800c028:	e7f6      	b.n	800c018 <_printf_i+0x194>
 800c02a:	4616      	mov	r6, r2
 800c02c:	e7bd      	b.n	800bfaa <_printf_i+0x126>
 800c02e:	6833      	ldr	r3, [r6, #0]
 800c030:	6825      	ldr	r5, [r4, #0]
 800c032:	6961      	ldr	r1, [r4, #20]
 800c034:	1d18      	adds	r0, r3, #4
 800c036:	6030      	str	r0, [r6, #0]
 800c038:	062e      	lsls	r6, r5, #24
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	d501      	bpl.n	800c042 <_printf_i+0x1be>
 800c03e:	6019      	str	r1, [r3, #0]
 800c040:	e002      	b.n	800c048 <_printf_i+0x1c4>
 800c042:	0668      	lsls	r0, r5, #25
 800c044:	d5fb      	bpl.n	800c03e <_printf_i+0x1ba>
 800c046:	8019      	strh	r1, [r3, #0]
 800c048:	2300      	movs	r3, #0
 800c04a:	6123      	str	r3, [r4, #16]
 800c04c:	4616      	mov	r6, r2
 800c04e:	e7bc      	b.n	800bfca <_printf_i+0x146>
 800c050:	6833      	ldr	r3, [r6, #0]
 800c052:	1d1a      	adds	r2, r3, #4
 800c054:	6032      	str	r2, [r6, #0]
 800c056:	681e      	ldr	r6, [r3, #0]
 800c058:	6862      	ldr	r2, [r4, #4]
 800c05a:	2100      	movs	r1, #0
 800c05c:	4630      	mov	r0, r6
 800c05e:	f7f4 f8b7 	bl	80001d0 <memchr>
 800c062:	b108      	cbz	r0, 800c068 <_printf_i+0x1e4>
 800c064:	1b80      	subs	r0, r0, r6
 800c066:	6060      	str	r0, [r4, #4]
 800c068:	6863      	ldr	r3, [r4, #4]
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	2300      	movs	r3, #0
 800c06e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c072:	e7aa      	b.n	800bfca <_printf_i+0x146>
 800c074:	6923      	ldr	r3, [r4, #16]
 800c076:	4632      	mov	r2, r6
 800c078:	4649      	mov	r1, r9
 800c07a:	4640      	mov	r0, r8
 800c07c:	47d0      	blx	sl
 800c07e:	3001      	adds	r0, #1
 800c080:	d0ad      	beq.n	800bfde <_printf_i+0x15a>
 800c082:	6823      	ldr	r3, [r4, #0]
 800c084:	079b      	lsls	r3, r3, #30
 800c086:	d413      	bmi.n	800c0b0 <_printf_i+0x22c>
 800c088:	68e0      	ldr	r0, [r4, #12]
 800c08a:	9b03      	ldr	r3, [sp, #12]
 800c08c:	4298      	cmp	r0, r3
 800c08e:	bfb8      	it	lt
 800c090:	4618      	movlt	r0, r3
 800c092:	e7a6      	b.n	800bfe2 <_printf_i+0x15e>
 800c094:	2301      	movs	r3, #1
 800c096:	4632      	mov	r2, r6
 800c098:	4649      	mov	r1, r9
 800c09a:	4640      	mov	r0, r8
 800c09c:	47d0      	blx	sl
 800c09e:	3001      	adds	r0, #1
 800c0a0:	d09d      	beq.n	800bfde <_printf_i+0x15a>
 800c0a2:	3501      	adds	r5, #1
 800c0a4:	68e3      	ldr	r3, [r4, #12]
 800c0a6:	9903      	ldr	r1, [sp, #12]
 800c0a8:	1a5b      	subs	r3, r3, r1
 800c0aa:	42ab      	cmp	r3, r5
 800c0ac:	dcf2      	bgt.n	800c094 <_printf_i+0x210>
 800c0ae:	e7eb      	b.n	800c088 <_printf_i+0x204>
 800c0b0:	2500      	movs	r5, #0
 800c0b2:	f104 0619 	add.w	r6, r4, #25
 800c0b6:	e7f5      	b.n	800c0a4 <_printf_i+0x220>
 800c0b8:	0800c7a1 	.word	0x0800c7a1
 800c0bc:	0800c7b2 	.word	0x0800c7b2

0800c0c0 <__sflush_r>:
 800c0c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0c8:	0716      	lsls	r6, r2, #28
 800c0ca:	4605      	mov	r5, r0
 800c0cc:	460c      	mov	r4, r1
 800c0ce:	d454      	bmi.n	800c17a <__sflush_r+0xba>
 800c0d0:	684b      	ldr	r3, [r1, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	dc02      	bgt.n	800c0dc <__sflush_r+0x1c>
 800c0d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	dd48      	ble.n	800c16e <__sflush_r+0xae>
 800c0dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0de:	2e00      	cmp	r6, #0
 800c0e0:	d045      	beq.n	800c16e <__sflush_r+0xae>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0e8:	682f      	ldr	r7, [r5, #0]
 800c0ea:	6a21      	ldr	r1, [r4, #32]
 800c0ec:	602b      	str	r3, [r5, #0]
 800c0ee:	d030      	beq.n	800c152 <__sflush_r+0x92>
 800c0f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0f2:	89a3      	ldrh	r3, [r4, #12]
 800c0f4:	0759      	lsls	r1, r3, #29
 800c0f6:	d505      	bpl.n	800c104 <__sflush_r+0x44>
 800c0f8:	6863      	ldr	r3, [r4, #4]
 800c0fa:	1ad2      	subs	r2, r2, r3
 800c0fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0fe:	b10b      	cbz	r3, 800c104 <__sflush_r+0x44>
 800c100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c102:	1ad2      	subs	r2, r2, r3
 800c104:	2300      	movs	r3, #0
 800c106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c108:	6a21      	ldr	r1, [r4, #32]
 800c10a:	4628      	mov	r0, r5
 800c10c:	47b0      	blx	r6
 800c10e:	1c43      	adds	r3, r0, #1
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	d106      	bne.n	800c122 <__sflush_r+0x62>
 800c114:	6829      	ldr	r1, [r5, #0]
 800c116:	291d      	cmp	r1, #29
 800c118:	d82b      	bhi.n	800c172 <__sflush_r+0xb2>
 800c11a:	4a2a      	ldr	r2, [pc, #168]	@ (800c1c4 <__sflush_r+0x104>)
 800c11c:	40ca      	lsrs	r2, r1
 800c11e:	07d6      	lsls	r6, r2, #31
 800c120:	d527      	bpl.n	800c172 <__sflush_r+0xb2>
 800c122:	2200      	movs	r2, #0
 800c124:	6062      	str	r2, [r4, #4]
 800c126:	04d9      	lsls	r1, r3, #19
 800c128:	6922      	ldr	r2, [r4, #16]
 800c12a:	6022      	str	r2, [r4, #0]
 800c12c:	d504      	bpl.n	800c138 <__sflush_r+0x78>
 800c12e:	1c42      	adds	r2, r0, #1
 800c130:	d101      	bne.n	800c136 <__sflush_r+0x76>
 800c132:	682b      	ldr	r3, [r5, #0]
 800c134:	b903      	cbnz	r3, 800c138 <__sflush_r+0x78>
 800c136:	6560      	str	r0, [r4, #84]	@ 0x54
 800c138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c13a:	602f      	str	r7, [r5, #0]
 800c13c:	b1b9      	cbz	r1, 800c16e <__sflush_r+0xae>
 800c13e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c142:	4299      	cmp	r1, r3
 800c144:	d002      	beq.n	800c14c <__sflush_r+0x8c>
 800c146:	4628      	mov	r0, r5
 800c148:	f7ff fca2 	bl	800ba90 <_free_r>
 800c14c:	2300      	movs	r3, #0
 800c14e:	6363      	str	r3, [r4, #52]	@ 0x34
 800c150:	e00d      	b.n	800c16e <__sflush_r+0xae>
 800c152:	2301      	movs	r3, #1
 800c154:	4628      	mov	r0, r5
 800c156:	47b0      	blx	r6
 800c158:	4602      	mov	r2, r0
 800c15a:	1c50      	adds	r0, r2, #1
 800c15c:	d1c9      	bne.n	800c0f2 <__sflush_r+0x32>
 800c15e:	682b      	ldr	r3, [r5, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d0c6      	beq.n	800c0f2 <__sflush_r+0x32>
 800c164:	2b1d      	cmp	r3, #29
 800c166:	d001      	beq.n	800c16c <__sflush_r+0xac>
 800c168:	2b16      	cmp	r3, #22
 800c16a:	d11e      	bne.n	800c1aa <__sflush_r+0xea>
 800c16c:	602f      	str	r7, [r5, #0]
 800c16e:	2000      	movs	r0, #0
 800c170:	e022      	b.n	800c1b8 <__sflush_r+0xf8>
 800c172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c176:	b21b      	sxth	r3, r3
 800c178:	e01b      	b.n	800c1b2 <__sflush_r+0xf2>
 800c17a:	690f      	ldr	r7, [r1, #16]
 800c17c:	2f00      	cmp	r7, #0
 800c17e:	d0f6      	beq.n	800c16e <__sflush_r+0xae>
 800c180:	0793      	lsls	r3, r2, #30
 800c182:	680e      	ldr	r6, [r1, #0]
 800c184:	bf08      	it	eq
 800c186:	694b      	ldreq	r3, [r1, #20]
 800c188:	600f      	str	r7, [r1, #0]
 800c18a:	bf18      	it	ne
 800c18c:	2300      	movne	r3, #0
 800c18e:	eba6 0807 	sub.w	r8, r6, r7
 800c192:	608b      	str	r3, [r1, #8]
 800c194:	f1b8 0f00 	cmp.w	r8, #0
 800c198:	dde9      	ble.n	800c16e <__sflush_r+0xae>
 800c19a:	6a21      	ldr	r1, [r4, #32]
 800c19c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c19e:	4643      	mov	r3, r8
 800c1a0:	463a      	mov	r2, r7
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	47b0      	blx	r6
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	dc08      	bgt.n	800c1bc <__sflush_r+0xfc>
 800c1aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1b2:	81a3      	strh	r3, [r4, #12]
 800c1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1bc:	4407      	add	r7, r0
 800c1be:	eba8 0800 	sub.w	r8, r8, r0
 800c1c2:	e7e7      	b.n	800c194 <__sflush_r+0xd4>
 800c1c4:	20400001 	.word	0x20400001

0800c1c8 <_fflush_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	690b      	ldr	r3, [r1, #16]
 800c1cc:	4605      	mov	r5, r0
 800c1ce:	460c      	mov	r4, r1
 800c1d0:	b913      	cbnz	r3, 800c1d8 <_fflush_r+0x10>
 800c1d2:	2500      	movs	r5, #0
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	b118      	cbz	r0, 800c1e2 <_fflush_r+0x1a>
 800c1da:	6a03      	ldr	r3, [r0, #32]
 800c1dc:	b90b      	cbnz	r3, 800c1e2 <_fflush_r+0x1a>
 800c1de:	f7ff f973 	bl	800b4c8 <__sinit>
 800c1e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d0f3      	beq.n	800c1d2 <_fflush_r+0xa>
 800c1ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1ec:	07d0      	lsls	r0, r2, #31
 800c1ee:	d404      	bmi.n	800c1fa <_fflush_r+0x32>
 800c1f0:	0599      	lsls	r1, r3, #22
 800c1f2:	d402      	bmi.n	800c1fa <_fflush_r+0x32>
 800c1f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1f6:	f7ff fc3a 	bl	800ba6e <__retarget_lock_acquire_recursive>
 800c1fa:	4628      	mov	r0, r5
 800c1fc:	4621      	mov	r1, r4
 800c1fe:	f7ff ff5f 	bl	800c0c0 <__sflush_r>
 800c202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c204:	07da      	lsls	r2, r3, #31
 800c206:	4605      	mov	r5, r0
 800c208:	d4e4      	bmi.n	800c1d4 <_fflush_r+0xc>
 800c20a:	89a3      	ldrh	r3, [r4, #12]
 800c20c:	059b      	lsls	r3, r3, #22
 800c20e:	d4e1      	bmi.n	800c1d4 <_fflush_r+0xc>
 800c210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c212:	f7ff fc2d 	bl	800ba70 <__retarget_lock_release_recursive>
 800c216:	e7dd      	b.n	800c1d4 <_fflush_r+0xc>

0800c218 <__swhatbuf_r>:
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	460c      	mov	r4, r1
 800c21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c220:	2900      	cmp	r1, #0
 800c222:	b096      	sub	sp, #88	@ 0x58
 800c224:	4615      	mov	r5, r2
 800c226:	461e      	mov	r6, r3
 800c228:	da0d      	bge.n	800c246 <__swhatbuf_r+0x2e>
 800c22a:	89a3      	ldrh	r3, [r4, #12]
 800c22c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c230:	f04f 0100 	mov.w	r1, #0
 800c234:	bf14      	ite	ne
 800c236:	2340      	movne	r3, #64	@ 0x40
 800c238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c23c:	2000      	movs	r0, #0
 800c23e:	6031      	str	r1, [r6, #0]
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	b016      	add	sp, #88	@ 0x58
 800c244:	bd70      	pop	{r4, r5, r6, pc}
 800c246:	466a      	mov	r2, sp
 800c248:	f000 f87c 	bl	800c344 <_fstat_r>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	dbec      	blt.n	800c22a <__swhatbuf_r+0x12>
 800c250:	9901      	ldr	r1, [sp, #4]
 800c252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c25a:	4259      	negs	r1, r3
 800c25c:	4159      	adcs	r1, r3
 800c25e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c262:	e7eb      	b.n	800c23c <__swhatbuf_r+0x24>

0800c264 <__smakebuf_r>:
 800c264:	898b      	ldrh	r3, [r1, #12]
 800c266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c268:	079d      	lsls	r5, r3, #30
 800c26a:	4606      	mov	r6, r0
 800c26c:	460c      	mov	r4, r1
 800c26e:	d507      	bpl.n	800c280 <__smakebuf_r+0x1c>
 800c270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	6123      	str	r3, [r4, #16]
 800c278:	2301      	movs	r3, #1
 800c27a:	6163      	str	r3, [r4, #20]
 800c27c:	b003      	add	sp, #12
 800c27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c280:	ab01      	add	r3, sp, #4
 800c282:	466a      	mov	r2, sp
 800c284:	f7ff ffc8 	bl	800c218 <__swhatbuf_r>
 800c288:	9f00      	ldr	r7, [sp, #0]
 800c28a:	4605      	mov	r5, r0
 800c28c:	4639      	mov	r1, r7
 800c28e:	4630      	mov	r0, r6
 800c290:	f7ff f802 	bl	800b298 <_malloc_r>
 800c294:	b948      	cbnz	r0, 800c2aa <__smakebuf_r+0x46>
 800c296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c29a:	059a      	lsls	r2, r3, #22
 800c29c:	d4ee      	bmi.n	800c27c <__smakebuf_r+0x18>
 800c29e:	f023 0303 	bic.w	r3, r3, #3
 800c2a2:	f043 0302 	orr.w	r3, r3, #2
 800c2a6:	81a3      	strh	r3, [r4, #12]
 800c2a8:	e7e2      	b.n	800c270 <__smakebuf_r+0xc>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	6020      	str	r0, [r4, #0]
 800c2ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	9b01      	ldr	r3, [sp, #4]
 800c2b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c2ba:	b15b      	cbz	r3, 800c2d4 <__smakebuf_r+0x70>
 800c2bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f000 f851 	bl	800c368 <_isatty_r>
 800c2c6:	b128      	cbz	r0, 800c2d4 <__smakebuf_r+0x70>
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f023 0303 	bic.w	r3, r3, #3
 800c2ce:	f043 0301 	orr.w	r3, r3, #1
 800c2d2:	81a3      	strh	r3, [r4, #12]
 800c2d4:	89a3      	ldrh	r3, [r4, #12]
 800c2d6:	431d      	orrs	r5, r3
 800c2d8:	81a5      	strh	r5, [r4, #12]
 800c2da:	e7cf      	b.n	800c27c <__smakebuf_r+0x18>

0800c2dc <_putc_r>:
 800c2dc:	b570      	push	{r4, r5, r6, lr}
 800c2de:	460d      	mov	r5, r1
 800c2e0:	4614      	mov	r4, r2
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	b118      	cbz	r0, 800c2ee <_putc_r+0x12>
 800c2e6:	6a03      	ldr	r3, [r0, #32]
 800c2e8:	b90b      	cbnz	r3, 800c2ee <_putc_r+0x12>
 800c2ea:	f7ff f8ed 	bl	800b4c8 <__sinit>
 800c2ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c2f0:	07d8      	lsls	r0, r3, #31
 800c2f2:	d405      	bmi.n	800c300 <_putc_r+0x24>
 800c2f4:	89a3      	ldrh	r3, [r4, #12]
 800c2f6:	0599      	lsls	r1, r3, #22
 800c2f8:	d402      	bmi.n	800c300 <_putc_r+0x24>
 800c2fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2fc:	f7ff fbb7 	bl	800ba6e <__retarget_lock_acquire_recursive>
 800c300:	68a3      	ldr	r3, [r4, #8]
 800c302:	3b01      	subs	r3, #1
 800c304:	2b00      	cmp	r3, #0
 800c306:	60a3      	str	r3, [r4, #8]
 800c308:	da05      	bge.n	800c316 <_putc_r+0x3a>
 800c30a:	69a2      	ldr	r2, [r4, #24]
 800c30c:	4293      	cmp	r3, r2
 800c30e:	db12      	blt.n	800c336 <_putc_r+0x5a>
 800c310:	b2eb      	uxtb	r3, r5
 800c312:	2b0a      	cmp	r3, #10
 800c314:	d00f      	beq.n	800c336 <_putc_r+0x5a>
 800c316:	6823      	ldr	r3, [r4, #0]
 800c318:	1c5a      	adds	r2, r3, #1
 800c31a:	6022      	str	r2, [r4, #0]
 800c31c:	701d      	strb	r5, [r3, #0]
 800c31e:	b2ed      	uxtb	r5, r5
 800c320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c322:	07da      	lsls	r2, r3, #31
 800c324:	d405      	bmi.n	800c332 <_putc_r+0x56>
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	059b      	lsls	r3, r3, #22
 800c32a:	d402      	bmi.n	800c332 <_putc_r+0x56>
 800c32c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c32e:	f7ff fb9f 	bl	800ba70 <__retarget_lock_release_recursive>
 800c332:	4628      	mov	r0, r5
 800c334:	bd70      	pop	{r4, r5, r6, pc}
 800c336:	4629      	mov	r1, r5
 800c338:	4622      	mov	r2, r4
 800c33a:	4630      	mov	r0, r6
 800c33c:	f7ff fa69 	bl	800b812 <__swbuf_r>
 800c340:	4605      	mov	r5, r0
 800c342:	e7ed      	b.n	800c320 <_putc_r+0x44>

0800c344 <_fstat_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4d07      	ldr	r5, [pc, #28]	@ (800c364 <_fstat_r+0x20>)
 800c348:	2300      	movs	r3, #0
 800c34a:	4604      	mov	r4, r0
 800c34c:	4608      	mov	r0, r1
 800c34e:	4611      	mov	r1, r2
 800c350:	602b      	str	r3, [r5, #0]
 800c352:	f7f6 fc78 	bl	8002c46 <_fstat>
 800c356:	1c43      	adds	r3, r0, #1
 800c358:	d102      	bne.n	800c360 <_fstat_r+0x1c>
 800c35a:	682b      	ldr	r3, [r5, #0]
 800c35c:	b103      	cbz	r3, 800c360 <_fstat_r+0x1c>
 800c35e:	6023      	str	r3, [r4, #0]
 800c360:	bd38      	pop	{r3, r4, r5, pc}
 800c362:	bf00      	nop
 800c364:	20000af8 	.word	0x20000af8

0800c368 <_isatty_r>:
 800c368:	b538      	push	{r3, r4, r5, lr}
 800c36a:	4d06      	ldr	r5, [pc, #24]	@ (800c384 <_isatty_r+0x1c>)
 800c36c:	2300      	movs	r3, #0
 800c36e:	4604      	mov	r4, r0
 800c370:	4608      	mov	r0, r1
 800c372:	602b      	str	r3, [r5, #0]
 800c374:	f7f6 fc77 	bl	8002c66 <_isatty>
 800c378:	1c43      	adds	r3, r0, #1
 800c37a:	d102      	bne.n	800c382 <_isatty_r+0x1a>
 800c37c:	682b      	ldr	r3, [r5, #0]
 800c37e:	b103      	cbz	r3, 800c382 <_isatty_r+0x1a>
 800c380:	6023      	str	r3, [r4, #0]
 800c382:	bd38      	pop	{r3, r4, r5, pc}
 800c384:	20000af8 	.word	0x20000af8

0800c388 <_init>:
 800c388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c38a:	bf00      	nop
 800c38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c38e:	bc08      	pop	{r3}
 800c390:	469e      	mov	lr, r3
 800c392:	4770      	bx	lr

0800c394 <_fini>:
 800c394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c396:	bf00      	nop
 800c398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c39a:	bc08      	pop	{r3}
 800c39c:	469e      	mov	lr, r3
 800c39e:	4770      	bx	lr
