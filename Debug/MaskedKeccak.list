
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cddc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  0800cf70  0800cf70  0000df70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3dc  0800d3dc  0000f0f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d3dc  0800d3dc  0000e3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3e4  0800d3e4  0000f0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3e4  0800d3e4  0000e3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3e8  0800d3e8  0000e3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  0800d3ec  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f0f8  2**0
                  CONTENTS
 10 .bss          00000a78  200000f8  200000f8  0000f0f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b70  20000b70  0000f0f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f0f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb91  00000000  00000000  0000f128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000481c  00000000  00000000  0002acb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b0  00000000  00000000  0002f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000116f  00000000  00000000  00030b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006b84  00000000  00000000  00031cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f12c  00000000  00000000  0003887b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1bca  00000000  00000000  000579a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129571  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069c0  00000000  00000000  001295b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012ff74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf54 	.word	0x0800cf54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	0800cf54 	.word	0x0800cf54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <theta>:
    x = z;
  }
}

void theta(uint64_t* state)
{
 80005ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005b0:	b0a0      	sub	sp, #128	@ 0x80
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Theta */

  uint64_t C[5] = {0, 0, 0, 0, 0};
 80005b6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80005ba:	2328      	movs	r3, #40	@ 0x28
 80005bc:	461a      	mov	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	f00b ff9c 	bl	800c4fc <memset>
  uint64_t D[5] = {0, 0, 0, 0, 0};
 80005c4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80005c8:	2328      	movs	r3, #40	@ 0x28
 80005ca:	461a      	mov	r2, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	f00b ff95 	bl	800c4fc <memset>

  int x, y;
  for (x = 0; x < 5; ++x) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80005d6:	e043      	b.n	8000660 <theta+0xb4>
    C[x] = state[x] ^ state[5 + x] ^ state[10 + x] ^ state[15 + x] ^ state[20 + x];
 80005d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005da:	00da      	lsls	r2, r3, #3
 80005dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005de:	4413      	add	r3, r2
 80005e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80005e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005e6:	3305      	adds	r3, #5
 80005e8:	00da      	lsls	r2, r3, #3
 80005ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ec:	4413      	add	r3, r2
 80005ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f2:	ea80 0402 	eor.w	r4, r0, r2
 80005f6:	ea81 0503 	eor.w	r5, r1, r3
 80005fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005fc:	330a      	adds	r3, #10
 80005fe:	00da      	lsls	r2, r3, #3
 8000600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000602:	4413      	add	r3, r2
 8000604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000608:	ea84 0a02 	eor.w	sl, r4, r2
 800060c:	ea85 0b03 	eor.w	fp, r5, r3
 8000610:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000612:	330f      	adds	r3, #15
 8000614:	00da      	lsls	r2, r3, #3
 8000616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000618:	4413      	add	r3, r2
 800061a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800061e:	ea8a 0102 	eor.w	r1, sl, r2
 8000622:	61b9      	str	r1, [r7, #24]
 8000624:	ea8b 0303 	eor.w	r3, fp, r3
 8000628:	61fb      	str	r3, [r7, #28]
 800062a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800062c:	3314      	adds	r3, #20
 800062e:	00da      	lsls	r2, r3, #3
 8000630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000632:	4413      	add	r3, r2
 8000634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000638:	69b9      	ldr	r1, [r7, #24]
 800063a:	4051      	eors	r1, r2
 800063c:	6139      	str	r1, [r7, #16]
 800063e:	69f9      	ldr	r1, [r7, #28]
 8000640:	404b      	eors	r3, r1
 8000642:	617b      	str	r3, [r7, #20]
 8000644:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	3360      	adds	r3, #96	@ 0x60
 800064a:	f107 0220 	add.w	r2, r7, #32
 800064e:	4413      	add	r3, r2
 8000650:	3b30      	subs	r3, #48	@ 0x30
 8000652:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000656:	e9c3 1200 	strd	r1, r2, [r3]
  for (x = 0; x < 5; ++x) {
 800065a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800065c:	3301      	adds	r3, #1
 800065e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000660:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000662:	2b04      	cmp	r3, #4
 8000664:	ddb8      	ble.n	80005d8 <theta+0x2c>
  }

  for (x = 0; x < 5; ++x) {
 8000666:	2300      	movs	r3, #0
 8000668:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800066a:	e072      	b.n	8000752 <theta+0x1a6>
    /* in order to avoid negative mod values,
      we've replaced "(x - 1) % 5" with "(x + 4) % 5" */
    D[x] = C[(x + 4) % 5] ^ ROTL64(C[(x + 1) % 5], 1);
 800066c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800066e:	1d19      	adds	r1, r3, #4
 8000670:	4b3c      	ldr	r3, [pc, #240]	@ (8000764 <theta+0x1b8>)
 8000672:	fb83 2301 	smull	r2, r3, r3, r1
 8000676:	105a      	asrs	r2, r3, #1
 8000678:	17cb      	asrs	r3, r1, #31
 800067a:	1ad2      	subs	r2, r2, r3
 800067c:	4613      	mov	r3, r2
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	1aca      	subs	r2, r1, r3
 8000684:	00d3      	lsls	r3, r2, #3
 8000686:	3360      	adds	r3, #96	@ 0x60
 8000688:	f107 0220 	add.w	r2, r7, #32
 800068c:	4413      	add	r3, r2
 800068e:	3b30      	subs	r3, #48	@ 0x30
 8000690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000694:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000696:	1c5c      	adds	r4, r3, #1
 8000698:	4b32      	ldr	r3, [pc, #200]	@ (8000764 <theta+0x1b8>)
 800069a:	fb83 2304 	smull	r2, r3, r3, r4
 800069e:	105a      	asrs	r2, r3, #1
 80006a0:	17e3      	asrs	r3, r4, #31
 80006a2:	1ad2      	subs	r2, r2, r3
 80006a4:	4613      	mov	r3, r2
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	4413      	add	r3, r2
 80006aa:	1ae2      	subs	r2, r4, r3
 80006ac:	00d3      	lsls	r3, r2, #3
 80006ae:	3360      	adds	r3, #96	@ 0x60
 80006b0:	f107 0220 	add.w	r2, r7, #32
 80006b4:	4413      	add	r3, r2
 80006b6:	3b30      	subs	r3, #48	@ 0x30
 80006b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006bc:	0fd5      	lsrs	r5, r2, #31
 80006be:	005c      	lsls	r4, r3, #1
 80006c0:	ea45 0904 	orr.w	r9, r5, r4
 80006c4:	0fdc      	lsrs	r4, r3, #31
 80006c6:	0053      	lsls	r3, r2, #1
 80006c8:	ea44 0803 	orr.w	r8, r4, r3
 80006cc:	ea80 0308 	eor.w	r3, r0, r8
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	ea81 0309 	eor.w	r3, r1, r9
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	3360      	adds	r3, #96	@ 0x60
 80006de:	f107 0220 	add.w	r2, r7, #32
 80006e2:	4413      	add	r3, r2
 80006e4:	3b58      	subs	r3, #88	@ 0x58
 80006e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80006ea:	e9c3 1200 	strd	r1, r2, [r3]

    for (y = 0; y < 5; ++y) {
 80006ee:	2300      	movs	r3, #0
 80006f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80006f2:	e028      	b.n	8000746 <theta+0x19a>
      state[y * 5 + x] = state[y * 5 + x] ^ D[x];
 80006f4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80006f6:	4613      	mov	r3, r2
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	441a      	add	r2, r3
 80006fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006fe:	4413      	add	r3, r2
 8000700:	00db      	lsls	r3, r3, #3
 8000702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000704:	4413      	add	r3, r2
 8000706:	e9d3 0100 	ldrd	r0, r1, [r3]
 800070a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	3360      	adds	r3, #96	@ 0x60
 8000710:	f107 0220 	add.w	r2, r7, #32
 8000714:	4413      	add	r3, r2
 8000716:	3b58      	subs	r3, #88	@ 0x58
 8000718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800071c:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 800071e:	462c      	mov	r4, r5
 8000720:	00a4      	lsls	r4, r4, #2
 8000722:	4425      	add	r5, r4
 8000724:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8000726:	442c      	add	r4, r5
 8000728:	00e4      	lsls	r4, r4, #3
 800072a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 800072c:	442c      	add	r4, r5
 800072e:	ea80 0502 	eor.w	r5, r0, r2
 8000732:	603d      	str	r5, [r7, #0]
 8000734:	404b      	eors	r3, r1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800073c:	e9c4 2300 	strd	r2, r3, [r4]
    for (y = 0; y < 5; ++y) {
 8000740:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000742:	3301      	adds	r3, #1
 8000744:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000746:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000748:	2b04      	cmp	r3, #4
 800074a:	ddd3      	ble.n	80006f4 <theta+0x148>
  for (x = 0; x < 5; ++x) {
 800074c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800074e:	3301      	adds	r3, #1
 8000750:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000752:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000754:	2b04      	cmp	r3, #4
 8000756:	dd89      	ble.n	800066c <theta+0xc0>
    }
  }
}
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	3780      	adds	r7, #128	@ 0x80
 800075e:	46bd      	mov	sp, r7
 8000760:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000764:	66666667 	.word	0x66666667

08000768 <rho>:

void rho(uint64_t* state)
{
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
  /* Rho */
  int x, y;
  for (y = 0; y < 5; ++y) {
 8000772:	2100      	movs	r1, #0
 8000774:	6139      	str	r1, [r7, #16]
 8000776:	e062      	b.n	800083e <rho+0xd6>
    for (x = 0; x < 5; ++x) {
 8000778:	2100      	movs	r1, #0
 800077a:	6179      	str	r1, [r7, #20]
 800077c:	e059      	b.n	8000832 <rho+0xca>
      state[y * 5 + x] = ROTL64(state[y * 5 + x], rx[y * 5 + x]);
 800077e:	6938      	ldr	r0, [r7, #16]
 8000780:	4601      	mov	r1, r0
 8000782:	0089      	lsls	r1, r1, #2
 8000784:	4408      	add	r0, r1
 8000786:	6979      	ldr	r1, [r7, #20]
 8000788:	4401      	add	r1, r0
 800078a:	00c9      	lsls	r1, r1, #3
 800078c:	68f8      	ldr	r0, [r7, #12]
 800078e:	4401      	add	r1, r0
 8000790:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000794:	693e      	ldr	r6, [r7, #16]
 8000796:	4634      	mov	r4, r6
 8000798:	4626      	mov	r6, r4
 800079a:	00b6      	lsls	r6, r6, #2
 800079c:	eb06 0c04 	add.w	ip, r6, r4
 80007a0:	697e      	ldr	r6, [r7, #20]
 80007a2:	4466      	add	r6, ip
 80007a4:	4c2a      	ldr	r4, [pc, #168]	@ (8000850 <rho+0xe8>)
 80007a6:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 80007aa:	693c      	ldr	r4, [r7, #16]
 80007ac:	46a4      	mov	ip, r4
 80007ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007b2:	44a4      	add	ip, r4
 80007b4:	697c      	ldr	r4, [r7, #20]
 80007b6:	44a4      	add	ip, r4
 80007b8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80007bc:	68fc      	ldr	r4, [r7, #12]
 80007be:	eb04 0a0c 	add.w	sl, r4, ip
 80007c2:	f1a6 0e20 	sub.w	lr, r6, #32
 80007c6:	f1c6 0c20 	rsb	ip, r6, #32
 80007ca:	fa01 f406 	lsl.w	r4, r1, r6
 80007ce:	607c      	str	r4, [r7, #4]
 80007d0:	fa00 fe0e 	lsl.w	lr, r0, lr
 80007d4:	687c      	ldr	r4, [r7, #4]
 80007d6:	ea44 040e 	orr.w	r4, r4, lr
 80007da:	607c      	str	r4, [r7, #4]
 80007dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007e0:	687c      	ldr	r4, [r7, #4]
 80007e2:	ea44 040c 	orr.w	r4, r4, ip
 80007e6:	607c      	str	r4, [r7, #4]
 80007e8:	fa00 f406 	lsl.w	r4, r0, r6
 80007ec:	603c      	str	r4, [r7, #0]
 80007ee:	4276      	negs	r6, r6
 80007f0:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 80007f4:	f1c6 0e20 	rsb	lr, r6, #32
 80007f8:	f1a6 0c20 	sub.w	ip, r6, #32
 80007fc:	fa20 f206 	lsr.w	r2, r0, r6
 8000800:	fa01 fe0e 	lsl.w	lr, r1, lr
 8000804:	ea42 020e 	orr.w	r2, r2, lr
 8000808:	fa21 fc0c 	lsr.w	ip, r1, ip
 800080c:	ea42 020c 	orr.w	r2, r2, ip
 8000810:	fa21 f306 	lsr.w	r3, r1, r6
 8000814:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000818:	4621      	mov	r1, r4
 800081a:	ea41 0802 	orr.w	r8, r1, r2
 800081e:	4629      	mov	r1, r5
 8000820:	ea41 0903 	orr.w	r9, r1, r3
 8000824:	4642      	mov	r2, r8
 8000826:	464b      	mov	r3, r9
 8000828:	e9ca 2300 	strd	r2, r3, [sl]
    for (x = 0; x < 5; ++x) {
 800082c:	6979      	ldr	r1, [r7, #20]
 800082e:	3101      	adds	r1, #1
 8000830:	6179      	str	r1, [r7, #20]
 8000832:	6979      	ldr	r1, [r7, #20]
 8000834:	2904      	cmp	r1, #4
 8000836:	dda2      	ble.n	800077e <rho+0x16>
  for (y = 0; y < 5; ++y) {
 8000838:	6939      	ldr	r1, [r7, #16]
 800083a:	3101      	adds	r1, #1
 800083c:	6139      	str	r1, [r7, #16]
 800083e:	6939      	ldr	r1, [r7, #16]
 8000840:	2904      	cmp	r1, #4
 8000842:	dd99      	ble.n	8000778 <rho+0x10>
    }
  }
}
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	3718      	adds	r7, #24
 800084a:	46bd      	mov	sp, r7
 800084c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000850:	0800d1cc 	.word	0x0800d1cc

08000854 <pi>:

void pi(uint64_t* state)
{
 8000854:	b480      	push	{r7}
 8000856:	b0b9      	sub	sp, #228	@ 0xe4
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Pi */
  uint64_t B[25];

  int x, y;
  for (y = 0; y < 5; ++y) {
 800085c:	2300      	movs	r3, #0
 800085e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000862:	e02c      	b.n	80008be <pi+0x6a>
    for (x = 0; x < 5; ++x) {
 8000864:	2300      	movs	r3, #0
 8000866:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800086a:	e01f      	b.n	80008ac <pi+0x58>
      B[y * 5 + x] = state[5 * y + x];
 800086c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000870:	4613      	mov	r3, r2
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	441a      	add	r2, r3
 8000876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800087a:	4413      	add	r3, r2
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	687a      	ldr	r2, [r7, #4]
 8000880:	18d0      	adds	r0, r2, r3
 8000882:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000886:	4613      	mov	r3, r2
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	441a      	add	r2, r3
 800088c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000890:	18d1      	adds	r1, r2, r3
 8000892:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000896:	00c9      	lsls	r1, r1, #3
 8000898:	31e0      	adds	r1, #224	@ 0xe0
 800089a:	4439      	add	r1, r7
 800089c:	39d8      	subs	r1, #216	@ 0xd8
 800089e:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 80008a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008a6:	3301      	adds	r3, #1
 80008a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80008ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008b0:	2b04      	cmp	r3, #4
 80008b2:	dddb      	ble.n	800086c <pi+0x18>
  for (y = 0; y < 5; ++y) {
 80008b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80008b8:	3301      	adds	r3, #1
 80008ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80008c2:	2b04      	cmp	r3, #4
 80008c4:	ddce      	ble.n	8000864 <pi+0x10>
    }
  }
  int u, v;
  for (y = 0; y < 5; ++y) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008cc:	e04f      	b.n	800096e <pi+0x11a>
    for (x = 0; x < 5; ++x) {
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80008d4:	e042      	b.n	800095c <pi+0x108>
      u = (0 * x + 1 * y) % 5;
 80008d6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008da:	4b2a      	ldr	r3, [pc, #168]	@ (8000984 <pi+0x130>)
 80008dc:	fb83 1302 	smull	r1, r3, r3, r2
 80008e0:	1059      	asrs	r1, r3, #1
 80008e2:	17d3      	asrs	r3, r2, #31
 80008e4:	1ac9      	subs	r1, r1, r3
 80008e6:	460b      	mov	r3, r1
 80008e8:	009b      	lsls	r3, r3, #2
 80008ea:	440b      	add	r3, r1
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      v = (2 * x + 3 * y) % 5;
 80008f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008f6:	0059      	lsls	r1, r3, #1
 80008f8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	18ca      	adds	r2, r1, r3
 8000904:	4b1f      	ldr	r3, [pc, #124]	@ (8000984 <pi+0x130>)
 8000906:	fb83 1302 	smull	r1, r3, r3, r2
 800090a:	1059      	asrs	r1, r3, #1
 800090c:	17d3      	asrs	r3, r2, #31
 800090e:	1ac9      	subs	r1, r1, r3
 8000910:	460b      	mov	r3, r1
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	440b      	add	r3, r1
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

      state[v * 5 + u] = B[5 * y + x];
 800091c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000920:	4613      	mov	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	441a      	add	r2, r3
 8000926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800092a:	18d0      	adds	r0, r2, r3
 800092c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	441a      	add	r2, r3
 8000936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800093a:	4413      	add	r3, r2
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	18d1      	adds	r1, r2, r3
 8000942:	00c3      	lsls	r3, r0, #3
 8000944:	33e0      	adds	r3, #224	@ 0xe0
 8000946:	443b      	add	r3, r7
 8000948:	3bd8      	subs	r3, #216	@ 0xd8
 800094a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800094e:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 8000952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000956:	3301      	adds	r3, #1
 8000958:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800095c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000960:	2b04      	cmp	r3, #4
 8000962:	ddb8      	ble.n	80008d6 <pi+0x82>
  for (y = 0; y < 5; ++y) {
 8000964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000968:	3301      	adds	r3, #1
 800096a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800096e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000972:	2b04      	cmp	r3, #4
 8000974:	ddab      	ble.n	80008ce <pi+0x7a>
    }
  }
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	37e4      	adds	r7, #228	@ 0xe4
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	66666667 	.word	0x66666667

08000988 <chi>:

void chi(uint64_t* state)
{
 8000988:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800098c:	b08e      	sub	sp, #56	@ 0x38
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
  /* Chi */
  uint64_t C[5];

  int x, y;
  for (y = 0; y < 5; ++y) {
 8000992:	2100      	movs	r1, #0
 8000994:	6339      	str	r1, [r7, #48]	@ 0x30
 8000996:	e072      	b.n	8000a7e <chi+0xf6>
    for (x = 0; x < 5; ++x) {
 8000998:	2100      	movs	r1, #0
 800099a:	6379      	str	r1, [r7, #52]	@ 0x34
 800099c:	e04e      	b.n	8000a3c <chi+0xb4>
      C[x] = state[y * 5 + x] ^ ((~state[y * 5 + ((x + 1) % 5)]) & state[y * 5 + ((x + 2) % 5)]);
 800099e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009a0:	4601      	mov	r1, r0
 80009a2:	0089      	lsls	r1, r1, #2
 80009a4:	4408      	add	r0, r1
 80009a6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009a8:	4401      	add	r1, r0
 80009aa:	00c9      	lsls	r1, r1, #3
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	4401      	add	r1, r0
 80009b0:	e9d1 ab00 	ldrd	sl, fp, [r1]
 80009b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009b6:	4601      	mov	r1, r0
 80009b8:	0089      	lsls	r1, r1, #2
 80009ba:	eb01 0c00 	add.w	ip, r1, r0
 80009be:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009c0:	1c4e      	adds	r6, r1, #1
 80009c2:	4934      	ldr	r1, [pc, #208]	@ (8000a94 <chi+0x10c>)
 80009c4:	fb81 0106 	smull	r0, r1, r1, r6
 80009c8:	1048      	asrs	r0, r1, #1
 80009ca:	17f1      	asrs	r1, r6, #31
 80009cc:	1a40      	subs	r0, r0, r1
 80009ce:	4601      	mov	r1, r0
 80009d0:	0089      	lsls	r1, r1, #2
 80009d2:	4401      	add	r1, r0
 80009d4:	1a70      	subs	r0, r6, r1
 80009d6:	eb0c 0100 	add.w	r1, ip, r0
 80009da:	00c9      	lsls	r1, r1, #3
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	4401      	add	r1, r0
 80009e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80009e4:	43c2      	mvns	r2, r0
 80009e6:	43cb      	mvns	r3, r1
 80009e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009ea:	4601      	mov	r1, r0
 80009ec:	0089      	lsls	r1, r1, #2
 80009ee:	eb01 0c00 	add.w	ip, r1, r0
 80009f2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009f4:	1c8e      	adds	r6, r1, #2
 80009f6:	4927      	ldr	r1, [pc, #156]	@ (8000a94 <chi+0x10c>)
 80009f8:	fb81 0106 	smull	r0, r1, r1, r6
 80009fc:	1048      	asrs	r0, r1, #1
 80009fe:	17f1      	asrs	r1, r6, #31
 8000a00:	1a40      	subs	r0, r0, r1
 8000a02:	4601      	mov	r1, r0
 8000a04:	0089      	lsls	r1, r1, #2
 8000a06:	4401      	add	r1, r0
 8000a08:	1a70      	subs	r0, r6, r1
 8000a0a:	eb0c 0100 	add.w	r1, ip, r0
 8000a0e:	00c9      	lsls	r1, r1, #3
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	4401      	add	r1, r0
 8000a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a18:	ea02 0400 	and.w	r4, r2, r0
 8000a1c:	ea03 0501 	and.w	r5, r3, r1
 8000a20:	ea8a 0804 	eor.w	r8, sl, r4
 8000a24:	ea8b 0905 	eor.w	r9, fp, r5
 8000a28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a2a:	00c9      	lsls	r1, r1, #3
 8000a2c:	3138      	adds	r1, #56	@ 0x38
 8000a2e:	4439      	add	r1, r7
 8000a30:	3930      	subs	r1, #48	@ 0x30
 8000a32:	e9c1 8900 	strd	r8, r9, [r1]
    for (x = 0; x < 5; ++x) {
 8000a36:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a38:	3101      	adds	r1, #1
 8000a3a:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a3e:	2904      	cmp	r1, #4
 8000a40:	ddad      	ble.n	800099e <chi+0x16>
    }

    for (x = 0; x < 5; ++x) {
 8000a42:	2100      	movs	r1, #0
 8000a44:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a46:	e014      	b.n	8000a72 <chi+0xea>
      state[y * 5 + x] = C[x];
 8000a48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a4a:	4601      	mov	r1, r0
 8000a4c:	0089      	lsls	r1, r1, #2
 8000a4e:	4408      	add	r0, r1
 8000a50:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a52:	4401      	add	r1, r0
 8000a54:	00c9      	lsls	r1, r1, #3
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	1846      	adds	r6, r0, r1
 8000a5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a5c:	00c9      	lsls	r1, r1, #3
 8000a5e:	3138      	adds	r1, #56	@ 0x38
 8000a60:	4439      	add	r1, r7
 8000a62:	3930      	subs	r1, #48	@ 0x30
 8000a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a68:	e9c6 0100 	strd	r0, r1, [r6]
    for (x = 0; x < 5; ++x) {
 8000a6c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a6e:	3101      	adds	r1, #1
 8000a70:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a72:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a74:	2904      	cmp	r1, #4
 8000a76:	dde7      	ble.n	8000a48 <chi+0xc0>
  for (y = 0; y < 5; ++y) {
 8000a78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000a7a:	3101      	adds	r1, #1
 8000a7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8000a7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000a80:	2904      	cmp	r1, #4
 8000a82:	dd89      	ble.n	8000998 <chi+0x10>
    }
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3738      	adds	r7, #56	@ 0x38
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	66666667 	.word	0x66666667

08000a98 <iota>:

void iota(uint64_t* state, int i)
{
 8000a98:	b4b0      	push	{r4, r5, r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	6039      	str	r1, [r7, #0]
  /* Iota */
  /* XXX: truncate RC[i] if w < 64 */
  state[0] = state[0] ^ RC[i];
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	e9d1 4500 	ldrd	r4, r5, [r1]
 8000aa8:	4808      	ldr	r0, [pc, #32]	@ (8000acc <iota+0x34>)
 8000aaa:	6839      	ldr	r1, [r7, #0]
 8000aac:	00c9      	lsls	r1, r1, #3
 8000aae:	4401      	add	r1, r0
 8000ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ab4:	ea84 0200 	eor.w	r2, r4, r0
 8000ab8:	ea85 0301 	eor.w	r3, r5, r1
 8000abc:	6879      	ldr	r1, [r7, #4]
 8000abe:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bcb0      	pop	{r4, r5, r7}
 8000aca:	4770      	bx	lr
 8000acc:	0800d278 	.word	0x0800d278

08000ad0 <keccakf>:

/* Keccak-F[b] function */
int keccakf(int rounds, uint64_t* state)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < rounds; ++i) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e012      	b.n	8000b06 <keccakf+0x36>
    theta(state);
 8000ae0:	6838      	ldr	r0, [r7, #0]
 8000ae2:	f7ff fd63 	bl	80005ac <theta>
    rho(state);
 8000ae6:	6838      	ldr	r0, [r7, #0]
 8000ae8:	f7ff fe3e 	bl	8000768 <rho>
    pi(state);
 8000aec:	6838      	ldr	r0, [r7, #0]
 8000aee:	f7ff feb1 	bl	8000854 <pi>
    chi(state);
 8000af2:	6838      	ldr	r0, [r7, #0]
 8000af4:	f7ff ff48 	bl	8000988 <chi>
    iota(state, i);
 8000af8:	68f9      	ldr	r1, [r7, #12]
 8000afa:	6838      	ldr	r0, [r7, #0]
 8000afc:	f7ff ffcc 	bl	8000a98 <iota>
  for (i = 0; i < rounds; ++i) {
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	3301      	adds	r3, #1
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fa      	ldr	r2, [r7, #12]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	dbe8      	blt.n	8000ae0 <keccakf+0x10>
  }

  return 0;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <sponge_absorb>:

void sponge_absorb(int nr, int r, int w, int l, uint64_t* A, uint8_t* P)
{
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	b089      	sub	sp, #36	@ 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
 8000b24:	603b      	str	r3, [r7, #0]
  /* absorbing phase */
  int x, y;
  int blocks = l / (r / 8);
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	da00      	bge.n	8000b2e <sponge_absorb+0x16>
 8000b2c:	3307      	adds	r3, #7
 8000b2e:	10db      	asrs	r3, r3, #3
 8000b30:	461a      	mov	r2, r3
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	fb93 f3f2 	sdiv	r3, r3, r2
 8000b38:	617b      	str	r3, [r7, #20]

  /* for every block Pi in P */
  for (y = 0; y < blocks; ++y) {
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	e035      	b.n	8000bac <sponge_absorb+0x94>
    uint64_t* block = (uint64_t*)P + y * r/w;
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	fb03 f202 	mul.w	r2, r3, r2
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000b52:	4413      	add	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]

    /* S[x, y] = S[x, y] ⊕ Pi[x + 5y],   ∀(x, y) such that x + 5y < r/w */
    for (x = 0; x < (r/w); ++x) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
 8000b5a:	e019      	b.n	8000b90 <sponge_absorb+0x78>
      A[x] = A[x] ^ block[x];
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	00db      	lsls	r3, r3, #3
 8000b60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000b62:	4413      	add	r3, r2
 8000b64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	00db      	lsls	r3, r3, #3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4413      	add	r3, r2
 8000b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b74:	69fe      	ldr	r6, [r7, #28]
 8000b76:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8000b7a:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8000b7c:	4466      	add	r6, ip
 8000b7e:	ea80 0402 	eor.w	r4, r0, r2
 8000b82:	ea81 0503 	eor.w	r5, r1, r3
 8000b86:	e9c6 4500 	strd	r4, r5, [r6]
    for (x = 0; x < (r/w); ++x) {
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	61fb      	str	r3, [r7, #28]
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b98:	69fa      	ldr	r2, [r7, #28]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dbde      	blt.n	8000b5c <sponge_absorb+0x44>
    }

    /* S = Keccak-f[r + c](S) */
    keccakf(nr, A);
 8000b9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000ba0:	68f8      	ldr	r0, [r7, #12]
 8000ba2:	f7ff ff95 	bl	8000ad0 <keccakf>
  for (y = 0; y < blocks; ++y) {
 8000ba6:	69bb      	ldr	r3, [r7, #24]
 8000ba8:	3301      	adds	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbc5      	blt.n	8000b40 <sponge_absorb+0x28>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	bf00      	nop
 8000bb8:	3724      	adds	r7, #36	@ 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bbe <sponge_squeeze>:

void sponge_squeeze(int nr, int r, int n, uint64_t* A, uint8_t* O)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	60f8      	str	r0, [r7, #12]
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	603b      	str	r3, [r7, #0]
  /*
    For SHA-3 we have r > n in any case, i.e., the squeezing phase
      consists of one round.
   */
  int i = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  while (n) {
 8000bd0:	e020      	b.n	8000c14 <sponge_squeeze+0x56>
    size_t size = r;
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	613b      	str	r3, [r7, #16]

    if (r > n) {
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	dd01      	ble.n	8000be2 <sponge_squeeze+0x24>
        size = n;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	613b      	str	r3, [r7, #16]
    }

    /* Copies A[0:size/8] to O[i:i + size/8 - 1] */
    memcpy(&O[i], A, size/8);
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	6a3a      	ldr	r2, [r7, #32]
 8000be6:	18d0      	adds	r0, r2, r3
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	08db      	lsrs	r3, r3, #3
 8000bec:	461a      	mov	r2, r3
 8000bee:	6839      	ldr	r1, [r7, #0]
 8000bf0:	f00b fd0f 	bl	800c612 <memcpy>
    i = i + size/8;
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	08da      	lsrs	r2, r3, #3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	617b      	str	r3, [r7, #20]

    n = n - size;
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	607b      	str	r3, [r7, #4]

    if (n > 0) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	dd03      	ble.n	8000c14 <sponge_squeeze+0x56>
      keccakf(nr, A);
 8000c0c:	6839      	ldr	r1, [r7, #0]
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f7ff ff5e 	bl	8000ad0 <keccakf>
  while (n) {
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1db      	bne.n	8000bd2 <sponge_squeeze+0x14>
    }
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <pad101>:

int pad101(int r, int blocks, int l, uint8_t* M, uint8_t* P)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
 8000c30:	603b      	str	r3, [r7, #0]
    int block_size = r / 8;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	da00      	bge.n	8000c3a <pad101+0x16>
 8000c38:	3307      	adds	r3, #7
 8000c3a:	10db      	asrs	r3, r3, #3
 8000c3c:	61bb      	str	r3, [r7, #24]

    /* length of the padded block */
    size_t block_len = (blocks + 1) * block_size;
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3301      	adds	r3, #1
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	617b      	str	r3, [r7, #20]

    /* zero out data and copy M into P */
    memset(P, 0, block_len * sizeof(uint8_t));
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000c50:	f00b fc54 	bl	800c4fc <memset>
    for (int i = 0; i < l; ++i) {
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	e00a      	b.n	8000c70 <pad101+0x4c>
        P[i] = M[i];
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	683a      	ldr	r2, [r7, #0]
 8000c5e:	441a      	add	r2, r3
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000c64:	440b      	add	r3, r1
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < l; ++i) {
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	61fb      	str	r3, [r7, #28]
 8000c70:	69fa      	ldr	r2, [r7, #28]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbf0      	blt.n	8000c5a <pad101+0x36>
    }

    /* CRYSTALS-style padding */
    P[l] ^= 0x06;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000c84:	440b      	add	r3, r1
 8000c86:	f082 0206 	eor.w	r2, r2, #6
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	701a      	strb	r2, [r3, #0]
    P[block_len - 1] ^= 0x80;
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3b01      	subs	r3, #1
 8000c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c94:	4413      	add	r3, r2
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000c9e:	440a      	add	r2, r1
 8000ca0:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	7013      	strb	r3, [r2, #0]

    return block_len;
 8000caa:	697b      	ldr	r3, [r7, #20]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <keccak>:
l = message length
M = message of bytes
O = output
*/
int keccak(int r, int c, int n, int l, uint8_t* M, uint8_t* O)
{
 8000cb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cb8:	b0c3      	sub	sp, #268	@ 0x10c
 8000cba:	af02      	add	r7, sp, #8
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8000cc6:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000cca:	6013      	str	r3, [r2, #0]
 8000ccc:	466b      	mov	r3, sp
 8000cce:	461e      	mov	r6, r3
  /* check parameters */

  /* bit rate must be a multiple of the lane size */
  if (r < 0 || (r % 8 != 0)) {
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db04      	blt.n	8000ce0 <keccak+0x2c>
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <keccak+0x32>
    return -1;
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	e0c0      	b.n	8000e68 <keccak+0x1b4>
  }

  if (n % 8 != 0) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <keccak+0x42>
    return -2;
 8000cf0:	f06f 0301 	mvn.w	r3, #1
 8000cf4:	e0b8      	b.n	8000e68 <keccak+0x1b4>
  }

  /* check permutation width */
  int b = r + c;
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  int i, j = -1;
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  for (i = 0; i < 7; ++i) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000d0e:	e013      	b.n	8000d38 <keccak+0x84>
    if (b == perms[i].b) {
 8000d10:	4a59      	ldr	r2, [pc, #356]	@ (8000e78 <keccak+0x1c4>)
 8000d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d16:	011b      	lsls	r3, r3, #4
 8000d18:	4413      	add	r3, r2
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d104      	bne.n	8000d2e <keccak+0x7a>
      j = i;
 8000d24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
      break;
 8000d2c:	e008      	b.n	8000d40 <keccak+0x8c>
  for (i = 0; i < 7; ++i) {
 8000d2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d32:	3301      	adds	r3, #1
 8000d34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	dde7      	ble.n	8000d10 <keccak+0x5c>
    }
  }

  if (j == -1) {
 8000d40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d102      	bne.n	8000d50 <keccak+0x9c>
    return -3;
 8000d4a:	f06f 0302 	mvn.w	r3, #2
 8000d4e:	e08b      	b.n	8000e68 <keccak+0x1b4>
  }

  /* state of 5x5 lanes, each of length 64 (for Keccak-f[1600]) */
  uint64_t A[25];
  /* zero out the state */
  memset(A, 0, 25 * sizeof(uint64_t));
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	22c8      	movs	r2, #200	@ 0xc8
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f00b fbcf 	bl	800c4fc <memset>

  /* lane width */
  int w = perms[j].w;
 8000d5e:	4a46      	ldr	r2, [pc, #280]	@ (8000e78 <keccak+0x1c4>)
 8000d60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000d64:	011b      	lsls	r3, r3, #4
 8000d66:	4413      	add	r3, r2
 8000d68:	3308      	adds	r3, #8
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  /* number of rounds */
  int nr = perms[j].nr;
 8000d70:	4a41      	ldr	r2, [pc, #260]	@ (8000e78 <keccak+0x1c4>)
 8000d72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	4413      	add	r3, r2
 8000d7a:	330c      	adds	r3, #12
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  /* block size in bytes */
  int block_size = r/8;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	da00      	bge.n	8000d8a <keccak+0xd6>
 8000d88:	3307      	adds	r3, #7
 8000d8a:	10db      	asrs	r3, r3, #3
 8000d8c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

  /* calculate how many blocks M consist of */
  int blocks = l / block_size;
 8000d90:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d94:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000da2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  /* make room for padding, if necessary */
  uint8_t P[block_size * (blocks + 1)];
 8000da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000daa:	3301      	adds	r3, #1
 8000dac:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000db0:	fb02 f103 	mul.w	r1, r2, r3
 8000db4:	1e4b      	subs	r3, r1, #1
 8000db6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000dba:	460a      	mov	r2, r1
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4690      	mov	r8, r2
 8000dc0:	4699      	mov	r9, r3
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	f04f 0300 	mov.w	r3, #0
 8000dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000dd6:	460a      	mov	r2, r1
 8000dd8:	2300      	movs	r3, #0
 8000dda:	4614      	mov	r4, r2
 8000ddc:	461d      	mov	r5, r3
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	00eb      	lsls	r3, r5, #3
 8000de8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dec:	00e2      	lsls	r2, r4, #3
 8000dee:	460b      	mov	r3, r1
 8000df0:	3307      	adds	r3, #7
 8000df2:	08db      	lsrs	r3, r3, #3
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	ebad 0d03 	sub.w	sp, sp, r3
 8000dfa:	ab02      	add	r3, sp, #8
 8000dfc:	3300      	adds	r3, #0
 8000dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  /* padding */
  l = pad101(r, blocks, l, M, P);
 8000e02:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e06:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8000e0a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e0e:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8000e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f7ff fefe 	bl	8000c24 <pad101>
 8000e28:	6020      	str	r0, [r4, #0]

  sponge_absorb(nr, r, w, l, A, P);
 8000e2a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e2e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000e36:	9201      	str	r2, [sp, #4]
 8000e38:	f107 0210 	add.w	r2, r7, #16
 8000e3c:	9200      	str	r2, [sp, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8000e44:	68f9      	ldr	r1, [r7, #12]
 8000e46:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8000e4a:	f7ff fe65 	bl	8000b18 <sponge_absorb>
  sponge_squeeze(nr, r, n, A, O);
 8000e4e:	f107 0210 	add.w	r2, r7, #16
 8000e52:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68f9      	ldr	r1, [r7, #12]
 8000e5e:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8000e62:	f7ff feac 	bl	8000bbe <sponge_squeeze>

  return 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	46b5      	mov	sp, r6
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8000e70:	46bd      	mov	sp, r7
 8000e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e76:	bf00      	nop
 8000e78:	20000000 	.word	0x20000000

08000e7c <FIVEONETWO>:

int FIVEONETWO(uint8_t* M, int l, uint8_t* O)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  return keccak(576, 1024, 512, l, M, O);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e9a:	f44f 7010 	mov.w	r0, #576	@ 0x240
 8000e9e:	f7ff ff09 	bl	8000cb4 <keccak>
 8000ea2:	4603      	mov	r3, r0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3710      	adds	r7, #16
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <TWOFIVESIX>:
{
  return keccak(832, 768, 384, l, M, O);
}

int TWOFIVESIX(uint8_t* M, int l, uint8_t* O)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  return keccak(1088, 512, 256, l, M, O);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ec6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eca:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8000ece:	f7ff fef1 	bl	8000cb4 <keccak>
 8000ed2:	4603      	mov	r3, r0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	4804      	ldr	r0, [pc, #16]	@ (8000f04 <_write+0x28>)
 8000ef4:	f006 fea3 	bl	8007c3e <HAL_UART_Transmit>
    return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000218 	.word	0x20000218

08000f08 <fill_masked_state>:
    }
    char newline = '\n';
    HAL_UART_Transmit(&huart2, (uint8_t*)&newline, 1, HAL_MAX_DELAY);
}

void fill_masked_state(masked_uint64_t dst[5][5], const uint64_t ref[25]) {
 8000f08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f0c:	b08a      	sub	sp, #40	@ 0x28
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f18:	e062      	b.n	8000fe0 <fill_masked_state+0xd8>
        for (int x = 0; x < 5; ++x) {
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
 8000f1e:	e059      	b.n	8000fd4 <fill_masked_state+0xcc>
            uint64_t val = ref[y * 5 + x];
 8000f20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f22:	4613      	mov	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	441a      	add	r2, r3
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	4413      	add	r3, r2
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
            uint64_t t = val;
 8000f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f3e:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (int i = 1; i < MASKING_N; ++i) {
 8000f42:	2301      	movs	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e030      	b.n	8000faa <fill_masked_state+0xa2>
                dst[x][y].share[i] = get_random64();
 8000f48:	f001 fa4a 	bl	80023e0 <get_random64>
 8000f4c:	4601      	mov	r1, r0
 8000f4e:	6a3a      	ldr	r2, [r7, #32]
 8000f50:	4613      	mov	r3, r2
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	4413      	add	r3, r2
 8000f56:	015b      	lsls	r3, r3, #5
 8000f58:	461a      	mov	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	441a      	add	r2, r3
 8000f5e:	17cb      	asrs	r3, r1, #31
 8000f60:	4688      	mov	r8, r1
 8000f62:	4699      	mov	r9, r3
 8000f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f66:	0099      	lsls	r1, r3, #2
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	440b      	add	r3, r1
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	4413      	add	r3, r2
 8000f70:	e9c3 8900 	strd	r8, r9, [r3]
                t ^= dst[x][y].share[i];
 8000f74:	6a3a      	ldr	r2, [r7, #32]
 8000f76:	4613      	mov	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	015b      	lsls	r3, r3, #5
 8000f7e:	461a      	mov	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	441a      	add	r2, r3
 8000f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f86:	0099      	lsls	r1, r3, #2
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	440b      	add	r3, r1
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	4413      	add	r3, r2
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f98:	ea80 0402 	eor.w	r4, r0, r2
 8000f9c:	ea81 0503 	eor.w	r5, r1, r3
 8000fa0:	e9c7 4506 	strd	r4, r5, [r7, #24]
            for (int i = 1; i < MASKING_N; ++i) {
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	ddcb      	ble.n	8000f48 <fill_masked_state+0x40>
            }
            dst[x][y].share[0] = t;
 8000fb0:	6a3a      	ldr	r2, [r7, #32]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	015b      	lsls	r3, r3, #5
 8000fba:	461a      	mov	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	441a      	add	r2, r3
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc2:	015b      	lsls	r3, r3, #5
 8000fc4:	18d1      	adds	r1, r2, r3
 8000fc6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fca:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8000fce:	6a3b      	ldr	r3, [r7, #32]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	623b      	str	r3, [r7, #32]
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	dda2      	ble.n	8000f20 <fill_masked_state+0x18>
    for (int y = 0; y < 5; ++y) {
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	3301      	adds	r3, #1
 8000fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	dd99      	ble.n	8000f1a <fill_masked_state+0x12>
        }
    }
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	3728      	adds	r7, #40	@ 0x28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000ff2 <recombine_masked_state>:

void recombine_masked_state(uint64_t dst[25], const masked_uint64_t src[5][5]) {
 8000ff2:	b4b0      	push	{r4, r5, r7}
 8000ff4:	b089      	sub	sp, #36	@ 0x24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	e03f      	b.n	8001082 <recombine_masked_state+0x90>
        for (int x = 0; x < 5; ++x) {
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
 8001006:	e036      	b.n	8001076 <recombine_masked_state+0x84>
            uint64_t val = 0;
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	e9c7 2304 	strd	r2, r3, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e01a      	b.n	8001050 <recombine_masked_state+0x5e>
                val ^= src[x][y].share[i];
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4613      	mov	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	4413      	add	r3, r2
 8001022:	015b      	lsls	r3, r3, #5
 8001024:	461a      	mov	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	441a      	add	r2, r3
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	0099      	lsls	r1, r3, #2
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	440b      	add	r3, r1
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	4413      	add	r3, r2
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800103e:	ea80 0402 	eor.w	r4, r0, r2
 8001042:	ea81 0503 	eor.w	r5, r1, r3
 8001046:	e9c7 4504 	strd	r4, r5, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3301      	adds	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b03      	cmp	r3, #3
 8001054:	dde1      	ble.n	800101a <recombine_masked_state+0x28>
            dst[y * 5 + x] = val;
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	441a      	add	r2, r3
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	687a      	ldr	r2, [r7, #4]
 8001066:	18d1      	adds	r1, r2, r3
 8001068:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800106c:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	3301      	adds	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b04      	cmp	r3, #4
 800107a:	ddc5      	ble.n	8001008 <recombine_masked_state+0x16>
    for (int y = 0; y < 5; ++y)
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	3301      	adds	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	2b04      	cmp	r3, #4
 8001086:	ddbc      	ble.n	8001002 <recombine_masked_state+0x10>
        }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	bcb0      	pop	{r4, r5, r7}
 8001092:	4770      	bx	lr

08001094 <print_diff>:

void print_diff(const char *label, const uint64_t *ref, const uint64_t *masked) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	@ 0x38
 8001098:	af04      	add	r7, sp, #16
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
    int fail = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
 80010a8:	e04d      	b.n	8001146 <print_diff+0xb2>
        if (ref[i] != masked[i]) {
 80010aa:	6a3b      	ldr	r3, [r7, #32]
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010b6:	6a3b      	ldr	r3, [r7, #32]
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	4299      	cmp	r1, r3
 80010c4:	bf08      	it	eq
 80010c6:	4290      	cmpeq	r0, r2
 80010c8:	d03a      	beq.n	8001140 <print_diff+0xac>
            uint32_t rh = ref[i] >> 32, rl = ref[i] & 0xFFFFFFFF;
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	4413      	add	r3, r2
 80010d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	000a      	movs	r2, r1
 80010e0:	2300      	movs	r3, #0
 80010e2:	4613      	mov	r3, r2
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	4413      	add	r3, r2
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	4613      	mov	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
            uint32_t mh = masked[i] >> 32, ml = masked[i] & 0xFFFFFFFF;
 80010f6:	6a3b      	ldr	r3, [r7, #32]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	000a      	movs	r2, r1
 800110c:	2300      	movs	r3, #0
 800110e:	4613      	mov	r3, r2
 8001110:	617b      	str	r3, [r7, #20]
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	4613      	mov	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
            printf("Mismatch %s[%d]: ref = %08lX%08lX, masked = %08lX%08lX\n",
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	6a3a      	ldr	r2, [r7, #32]
 8001132:	68f9      	ldr	r1, [r7, #12]
 8001134:	480b      	ldr	r0, [pc, #44]	@ (8001164 <print_diff+0xd0>)
 8001136:	f00a ffe5 	bl	800c104 <iprintf>
                   label, i,
                   (unsigned long)rh, (unsigned long)rl,
                   (unsigned long)mh, (unsigned long)ml);
            fail++;
 800113a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113c:	3301      	adds	r3, #1
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8001140:	6a3b      	ldr	r3, [r7, #32]
 8001142:	3301      	adds	r3, #1
 8001144:	623b      	str	r3, [r7, #32]
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	2b18      	cmp	r3, #24
 800114a:	ddae      	ble.n	80010aa <print_diff+0x16>
        }
    }
    if (fail == 0) {
 800114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114e:	2b00      	cmp	r3, #0
 8001150:	d103      	bne.n	800115a <print_diff+0xc6>
        printf("SUCCESS: %s output matched reference.\n", label);
 8001152:	68f9      	ldr	r1, [r7, #12]
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <print_diff+0xd4>)
 8001156:	f00a ffd5 	bl	800c104 <iprintf>
    }
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	0800cf80 	.word	0x0800cf80
 8001168:	0800cfb8 	.word	0x0800cfb8

0800116c <test_masked_vs_reference_step_by_step>:

void test_masked_vs_reference_step_by_step(void) {
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	f5ad 5da9 	sub.w	sp, sp, #5408	@ 0x1520
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
    // === 1. Initial state setup ===
    uint64_t ref_state[25];
    for (int i = 0; i < 25; i++)
 8001176:	2400      	movs	r4, #0
 8001178:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 800117c:	f105 0504 	add.w	r5, r5, #4
 8001180:	602c      	str	r4, [r5, #0]
 8001182:	e02f      	b.n	80011e4 <test_masked_vs_reference_step_by_step+0x78>
        ref_state[i] = i * 0x0F0F0F0F0F0F0F0FULL;
 8001184:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8001188:	f104 0404 	add.w	r4, r4, #4
 800118c:	6824      	ldr	r4, [r4, #0]
 800118e:	17e5      	asrs	r5, r4, #31
 8001190:	4620      	mov	r0, r4
 8001192:	4629      	mov	r1, r5
 8001194:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 8001198:	fb04 f501 	mul.w	r5, r4, r1
 800119c:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 80011a0:	fb00 f404 	mul.w	r4, r0, r4
 80011a4:	442c      	add	r4, r5
 80011a6:	f04f 350f 	mov.w	r5, #252645135	@ 0xf0f0f0f
 80011aa:	fba0 2305 	umull	r2, r3, r0, r5
 80011ae:	441c      	add	r4, r3
 80011b0:	4623      	mov	r3, r4
 80011b2:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 80011b6:	f104 0404 	add.w	r4, r4, #4
 80011ba:	6824      	ldr	r4, [r4, #0]
 80011bc:	00e4      	lsls	r4, r4, #3
 80011be:	f504 54a9 	add.w	r4, r4, #5408	@ 0x1520
 80011c2:	f104 0408 	add.w	r4, r4, #8
 80011c6:	443c      	add	r4, r7
 80011c8:	3cd8      	subs	r4, #216	@ 0xd8
 80011ca:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < 25; i++)
 80011ce:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 80011d2:	f104 0404 	add.w	r4, r4, #4
 80011d6:	6824      	ldr	r4, [r4, #0]
 80011d8:	3401      	adds	r4, #1
 80011da:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 80011de:	f105 0504 	add.w	r5, r5, #4
 80011e2:	602c      	str	r4, [r5, #0]
 80011e4:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 80011e8:	f104 0404 	add.w	r4, r4, #4
 80011ec:	6824      	ldr	r4, [r4, #0]
 80011ee:	2c18      	cmp	r4, #24
 80011f0:	ddc8      	ble.n	8001184 <test_masked_vs_reference_step_by_step+0x18>

    masked_uint64_t masked_state[5][5];
    fill_masked_state(masked_state, ref_state);
 80011f2:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 80011f6:	f102 0210 	add.w	r2, r2, #16
 80011fa:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80011fe:	f103 0310 	add.w	r3, r3, #16
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fe7f 	bl	8000f08 <fill_masked_state>

    uint64_t tmp_ref[25], tmp_masked[25];

    // === 2. THETA ===
    memcpy(tmp_ref, ref_state, sizeof(ref_state));
 800120a:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 800120e:	f103 0308 	add.w	r3, r3, #8
 8001212:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8001216:	4618      	mov	r0, r3
 8001218:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800121c:	f103 0310 	add.w	r3, r3, #16
 8001220:	22c8      	movs	r2, #200	@ 0xc8
 8001222:	4619      	mov	r1, r3
 8001224:	f00b f9f5 	bl	800c612 <memcpy>
    theta(tmp_ref);
 8001228:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800122c:	f103 0308 	add.w	r3, r3, #8
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9bb 	bl	80005ac <theta>

    masked_theta(masked_state);
 8001236:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800123a:	f103 0310 	add.w	r3, r3, #16
 800123e:	4618      	mov	r0, r3
 8001240:	f001 fa24 	bl	800268c <masked_theta>
    recombine_masked_state(tmp_masked, masked_state);
 8001244:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001248:	f102 0210 	add.w	r2, r2, #16
 800124c:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8001250:	4611      	mov	r1, r2
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fecd 	bl	8000ff2 <recombine_masked_state>
    print_diff("THETA", tmp_ref, tmp_masked);
 8001258:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 800125c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001260:	f103 0308 	add.w	r3, r3, #8
 8001264:	4619      	mov	r1, r3
 8001266:	4885      	ldr	r0, [pc, #532]	@ (800147c <test_masked_vs_reference_step_by_step+0x310>)
 8001268:	f7ff ff14 	bl	8001094 <print_diff>

    // === 3. RHO ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked)); // set ref = masked out
 800126c:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8001270:	f103 0308 	add.w	r3, r3, #8
 8001274:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8001278:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 800127c:	f103 0308 	add.w	r3, r3, #8
 8001280:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	23c8      	movs	r3, #200	@ 0xc8
 800128a:	461a      	mov	r2, r3
 800128c:	f00b f9c1 	bl	800c612 <memcpy>
    rho(tmp_ref);
 8001290:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001294:	f103 0308 	add.w	r3, r3, #8
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fa65 	bl	8000768 <rho>

    masked_rho(masked_state);
 800129e:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80012a2:	f103 0310 	add.w	r3, r3, #16
 80012a6:	4618      	mov	r0, r3
 80012a8:	f001 fb4a 	bl	8002940 <masked_rho>
    recombine_masked_state(tmp_masked, masked_state);
 80012ac:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80012b0:	f102 0210 	add.w	r2, r2, #16
 80012b4:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe99 	bl	8000ff2 <recombine_masked_state>
    print_diff("RHO", tmp_ref, tmp_masked);
 80012c0:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 80012c4:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80012c8:	f103 0308 	add.w	r3, r3, #8
 80012cc:	4619      	mov	r1, r3
 80012ce:	486c      	ldr	r0, [pc, #432]	@ (8001480 <test_masked_vs_reference_step_by_step+0x314>)
 80012d0:	f7ff fee0 	bl	8001094 <print_diff>

    // === 4. PI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 80012d4:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 80012d8:	f103 0308 	add.w	r3, r3, #8
 80012dc:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 80012e0:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 80012e4:	f103 0308 	add.w	r3, r3, #8
 80012e8:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	23c8      	movs	r3, #200	@ 0xc8
 80012f2:	461a      	mov	r2, r3
 80012f4:	f00b f98d 	bl	800c612 <memcpy>
    pi(tmp_ref);
 80012f8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80012fc:	f103 0308 	add.w	r3, r3, #8
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff faa7 	bl	8000854 <pi>

    masked_pi(masked_state);
 8001306:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800130a:	f103 0310 	add.w	r3, r3, #16
 800130e:	4618      	mov	r0, r3
 8001310:	f001 fb70 	bl	80029f4 <masked_pi>
    recombine_masked_state(tmp_masked, masked_state);
 8001314:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001318:	f102 0210 	add.w	r2, r2, #16
 800131c:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fe65 	bl	8000ff2 <recombine_masked_state>
    print_diff("PI", tmp_ref, tmp_masked);
 8001328:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 800132c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001330:	f103 0308 	add.w	r3, r3, #8
 8001334:	4619      	mov	r1, r3
 8001336:	4853      	ldr	r0, [pc, #332]	@ (8001484 <test_masked_vs_reference_step_by_step+0x318>)
 8001338:	f7ff feac 	bl	8001094 <print_diff>

    int round_idx = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8001342:	f102 0218 	add.w	r2, r2, #24
 8001346:	6013      	str	r3, [r2, #0]
    // === 5. CHI ===
    // === 5. CHI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8001348:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 800134c:	f103 0308 	add.w	r3, r3, #8
 8001350:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8001354:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8001358:	f103 0308 	add.w	r3, r3, #8
 800135c:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8001360:	4610      	mov	r0, r2
 8001362:	4619      	mov	r1, r3
 8001364:	23c8      	movs	r3, #200	@ 0xc8
 8001366:	461a      	mov	r2, r3
 8001368:	f00b f953 	bl	800c612 <memcpy>
    chi(tmp_ref);
 800136c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001370:	f103 0308 	add.w	r3, r3, #8
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fb07 	bl	8000988 <chi>

    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 800137a:	2300      	movs	r3, #0
 800137c:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e033      	b.n	80013ec <test_masked_vs_reference_step_by_step+0x280>
        for (int x = 0; x < 5; ++x)
 8001384:	2300      	movs	r3, #0
 8001386:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 800138a:	f102 021c 	add.w	r2, r2, #28
 800138e:	6013      	str	r3, [r2, #0]
 8001390:	e01e      	b.n	80013d0 <test_masked_vs_reference_step_by_step+0x264>
            fill_random_matrix(r_chi[x][y]);
 8001392:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 8001396:	3a08      	subs	r2, #8
 8001398:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 800139c:	f103 031c 	add.w	r3, r3, #28
 80013a0:	6819      	ldr	r1, [r3, #0]
 80013a2:	460b      	mov	r3, r1
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	f507 51a9 	add.w	r1, r7, #5408	@ 0x1520
 80013ac:	6809      	ldr	r1, [r1, #0]
 80013ae:	440b      	add	r3, r1
 80013b0:	01db      	lsls	r3, r3, #7
 80013b2:	4413      	add	r3, r2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fe7b 	bl	80020b0 <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 80013ba:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 80013be:	f103 031c 	add.w	r3, r3, #28
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 80013ca:	f102 021c 	add.w	r2, r2, #28
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 80013d4:	f103 031c 	add.w	r3, r3, #28
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b04      	cmp	r3, #4
 80013dc:	ddd9      	ble.n	8001392 <test_masked_vs_reference_step_by_step+0x226>
    for (int y = 0; y < 5; ++y)
 80013de:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	3301      	adds	r3, #1
 80013e6:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	ddc6      	ble.n	8001384 <test_masked_vs_reference_step_by_step+0x218>

    masked_uint64_t chi_out[5][5];
    masked_chi(chi_out, masked_state, r_chi);
 80013f6:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 80013fa:	3a08      	subs	r2, #8
 80013fc:	f507 5189 	add.w	r1, r7, #4384	@ 0x1120
 8001400:	f101 0110 	add.w	r1, r1, #16
 8001404:	f107 0308 	add.w	r3, r7, #8
 8001408:	3b08      	subs	r3, #8
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fba0 	bl	8002b50 <masked_chi>

    // === 6. IOTA ===
    // Apply IOTA to both the reference and the masked CHI result
    iota(tmp_ref, round_idx);
 8001410:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001414:	f103 0308 	add.w	r3, r3, #8
 8001418:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 800141c:	f102 0218 	add.w	r2, r2, #24
 8001420:	6811      	ldr	r1, [r2, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fb38 	bl	8000a98 <iota>
    masked_iota(chi_out, RC[round_idx]);
 8001428:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <test_masked_vs_reference_step_by_step+0x31c>)
 800142a:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 800142e:	f103 0318 	add.w	r3, r3, #24
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4413      	add	r3, r2
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f107 0108 	add.w	r1, r7, #8
 8001440:	3908      	subs	r1, #8
 8001442:	4608      	mov	r0, r1
 8001444:	f001 fc08 	bl	8002c58 <masked_iota>

    // Recombine the masked state AFTER both steps
    recombine_masked_state(tmp_masked, chi_out);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	3b08      	subs	r3, #8
 800144e:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8001452:	4619      	mov	r1, r3
 8001454:	4610      	mov	r0, r2
 8001456:	f7ff fdcc 	bl	8000ff2 <recombine_masked_state>

    // Compare both sides now that they're at the same stage
    print_diff("IOTA", tmp_ref, tmp_masked);
 800145a:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 800145e:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001462:	f103 0308 	add.w	r3, r3, #8
 8001466:	4619      	mov	r1, r3
 8001468:	4808      	ldr	r0, [pc, #32]	@ (800148c <test_masked_vs_reference_step_by_step+0x320>)
 800146a:	f7ff fe13 	bl	8001094 <print_diff>



}
 800146e:	bf00      	nop
 8001470:	f507 57a9 	add.w	r7, r7, #5408	@ 0x1520
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bdb0      	pop	{r4, r5, r7, pc}
 800147a:	bf00      	nop
 800147c:	0800cfe0 	.word	0x0800cfe0
 8001480:	0800cfe8 	.word	0x0800cfe8
 8001484:	0800cfec 	.word	0x0800cfec
 8001488:	0800d278 	.word	0x0800d278
 800148c:	0800cff0 	.word	0x0800cff0

08001490 <masked_round>:
static void masked_round(masked_uint64_t S[5][5],
                         int r,
                         uint64_t Rchi[5][5][MASKING_N][MASKING_N])
{
 8001490:	b5b0      	push	{r4, r5, r7, lr}
 8001492:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 8001496:	af00      	add	r7, sp, #0
 8001498:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800149c:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80014a0:	6018      	str	r0, [r3, #0]
 80014a2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80014a6:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 80014aa:	6019      	str	r1, [r3, #0]
 80014ac:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80014b0:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 80014b4:	601a      	str	r2, [r3, #0]
    masked_theta(S);
 80014b6:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80014ba:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	f001 f8e4 	bl	800268c <masked_theta>
    masked_rho  (S);
 80014c4:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80014c8:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	f001 fa37 	bl	8002940 <masked_rho>
    masked_pi   (S);
 80014d2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80014d6:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	f001 fa8a 	bl	80029f4 <masked_pi>
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
      for (int y = 0; y < 5; ++y)
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 80014e6:	e020      	b.n	800152a <masked_round+0x9a>
          for (int x = 0; x < 5; ++x)
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 80014ee:	e013      	b.n	8001518 <masked_round+0x88>
              fill_random_matrix(r_chi[x][y]);
 80014f0:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 80014f4:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	@ 0xfb8
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	f8d7 2fbc 	ldr.w	r2, [r7, #4028]	@ 0xfbc
 8001502:	4413      	add	r3, r2
 8001504:	01db      	lsls	r3, r3, #7
 8001506:	440b      	add	r3, r1
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fdd1 	bl	80020b0 <fill_random_matrix>
          for (int x = 0; x < 5; ++x)
 800150e:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 8001512:	3301      	adds	r3, #1
 8001514:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 8001518:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 800151c:	2b04      	cmp	r3, #4
 800151e:	dde7      	ble.n	80014f0 <masked_round+0x60>
      for (int y = 0; y < 5; ++y)
 8001520:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8001524:	3301      	adds	r3, #1
 8001526:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 800152a:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 800152e:	2b04      	cmp	r3, #4
 8001530:	ddda      	ble.n	80014e8 <masked_round+0x58>

      masked_uint64_t chi_out[5][5];
      masked_chi(chi_out, S, r_chi);
 8001532:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8001536:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800153a:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 800153e:	f107 0010 	add.w	r0, r7, #16
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	f001 fb04 	bl	8002b50 <masked_chi>
      masked_iota (chi_out, RC[r]);
 8001548:	4a2a      	ldr	r2, [pc, #168]	@ (80015f4 <masked_round+0x164>)
 800154a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800154e:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	f107 0110 	add.w	r1, r7, #16
 8001560:	4608      	mov	r0, r1
 8001562:	f001 fb79 	bl	8002c58 <masked_iota>

      for (int y = 0; y < 5; ++y)
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 800156c:	e038      	b.n	80015e0 <masked_round+0x150>
          for (int x = 0; x < 5; ++x)
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 8001574:	e02b      	b.n	80015ce <masked_round+0x13e>
              S[x][y] = chi_out[x][y];
 8001576:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	015b      	lsls	r3, r3, #5
 8001582:	461a      	mov	r2, r3
 8001584:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001588:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	441a      	add	r2, r3
 8001590:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	18d0      	adds	r0, r2, r3
 8001598:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800159c:	f5a3 617b 	sub.w	r1, r3, #4016	@ 0xfb0
 80015a0:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	@ 0xfb4
 80015ae:	4413      	add	r3, r2
 80015b0:	015b      	lsls	r3, r3, #5
 80015b2:	440b      	add	r3, r1
 80015b4:	4604      	mov	r4, r0
 80015b6:	461d      	mov	r5, r3
 80015b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          for (int x = 0; x < 5; ++x)
 80015c4:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 80015c8:	3301      	adds	r3, #1
 80015ca:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 80015ce:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	ddcf      	ble.n	8001576 <masked_round+0xe6>
      for (int y = 0; y < 5; ++y)
 80015d6:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 80015da:	3301      	adds	r3, #1
 80015dc:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 80015e0:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	ddc2      	ble.n	800156e <masked_round+0xde>
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bdb0      	pop	{r4, r5, r7, pc}
 80015f4:	0800d278 	.word	0x0800d278

080015f8 <reference_round>:

static void reference_round(uint64_t *A, int r)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
    theta(A);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7fe ffd2 	bl	80005ac <theta>
    rho  (A);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff f8ad 	bl	8000768 <rho>
    pi   (A);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff f920 	bl	8000854 <pi>
    chi  (A);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff f9b7 	bl	8000988 <chi>
    iota (A, r);
 800161a:	6839      	ldr	r1, [r7, #0]
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fa3b 	bl	8000a98 <iota>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <test_full_keccak_rounds>:


void test_full_keccak_rounds(void)
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	f5ad 5d8a 	sub.w	sp, sp, #4416	@ 0x1140
 8001632:	b086      	sub	sp, #24
 8001634:	af04      	add	r7, sp, #16
    /* --- 1. fresh deterministic state -------------------------------- */
    uint64_t ref[25];
    for (int i=0;i<25;i++)
 8001636:	2400      	movs	r4, #0
 8001638:	f507 558a 	add.w	r5, r7, #4416	@ 0x1140
 800163c:	f105 0504 	add.w	r5, r5, #4
 8001640:	602c      	str	r4, [r5, #0]
 8001642:	e030      	b.n	80016a6 <test_full_keccak_rounds+0x7a>
        ref[i] = 0x1111111111111111ULL * (i+1);   /* any pattern is fine */
 8001644:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 8001648:	f104 0404 	add.w	r4, r4, #4
 800164c:	6824      	ldr	r4, [r4, #0]
 800164e:	3401      	adds	r4, #1
 8001650:	17e5      	asrs	r5, r4, #31
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f04f 3411 	mov.w	r4, #286331153	@ 0x11111111
 800165a:	fb04 f501 	mul.w	r5, r4, r1
 800165e:	f04f 3411 	mov.w	r4, #286331153	@ 0x11111111
 8001662:	fb00 f404 	mul.w	r4, r0, r4
 8001666:	442c      	add	r4, r5
 8001668:	f04f 3511 	mov.w	r5, #286331153	@ 0x11111111
 800166c:	fba0 2305 	umull	r2, r3, r0, r5
 8001670:	441c      	add	r4, r3
 8001672:	4623      	mov	r3, r4
 8001674:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 8001678:	f104 0404 	add.w	r4, r4, #4
 800167c:	6824      	ldr	r4, [r4, #0]
 800167e:	00e4      	lsls	r4, r4, #3
 8001680:	f504 548a 	add.w	r4, r4, #4416	@ 0x1140
 8001684:	f104 0408 	add.w	r4, r4, #8
 8001688:	443c      	add	r4, r7
 800168a:	3ce0      	subs	r4, #224	@ 0xe0
 800168c:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i=0;i<25;i++)
 8001690:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 8001694:	f104 0404 	add.w	r4, r4, #4
 8001698:	6824      	ldr	r4, [r4, #0]
 800169a:	3401      	adds	r4, #1
 800169c:	f507 558a 	add.w	r5, r7, #4416	@ 0x1140
 80016a0:	f105 0504 	add.w	r5, r5, #4
 80016a4:	602c      	str	r4, [r5, #0]
 80016a6:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 80016aa:	f104 0404 	add.w	r4, r4, #4
 80016ae:	6824      	ldr	r4, [r4, #0]
 80016b0:	2c18      	cmp	r4, #24
 80016b2:	ddc7      	ble.n	8001644 <test_full_keccak_rounds+0x18>

    masked_uint64_t mstate[5][5];
    fill_masked_state(mstate, ref);
 80016b4:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 80016b8:	f102 0208 	add.w	r2, r2, #8
 80016bc:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc20 	bl	8000f08 <fill_masked_state>

    /* --- 2. run every round ------------------------------------------ */
    for (int r = 0; r < 24; ++r) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	e0e6      	b.n	80018a0 <test_full_keccak_rounds+0x274>

        /* randomness for χ – new every round, every lane --------------- */
        uint64_t Rchi[5][5][MASKING_N][MASKING_N];
        for (int y = 0; y < 5; ++y)
 80016d2:	2300      	movs	r3, #0
 80016d4:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80016d8:	f102 021c 	add.w	r2, r2, #28
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e038      	b.n	8001752 <test_full_keccak_rounds+0x126>
            for (int x = 0; x < 5; ++x)
 80016e0:	2300      	movs	r3, #0
 80016e2:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80016e6:	f102 0218 	add.w	r2, r2, #24
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e01f      	b.n	800172e <test_full_keccak_rounds+0x102>
                fill_random_matrix(Rchi[x][y]);
 80016ee:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80016f2:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80016f6:	f103 0318 	add.w	r3, r3, #24
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001706:	f102 021c 	add.w	r2, r2, #28
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	4413      	add	r3, r2
 800170e:	01db      	lsls	r3, r3, #7
 8001710:	440b      	add	r3, r1
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fccc 	bl	80020b0 <fill_random_matrix>
            for (int x = 0; x < 5; ++x)
 8001718:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800171c:	f103 0318 	add.w	r3, r3, #24
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001728:	f102 0218 	add.w	r2, r2, #24
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001732:	f103 0318 	add.w	r3, r3, #24
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b04      	cmp	r3, #4
 800173a:	ddd8      	ble.n	80016ee <test_full_keccak_rounds+0xc2>
        for (int y = 0; y < 5; ++y)
 800173c:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001740:	f103 031c 	add.w	r3, r3, #28
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 800174c:	f102 021c 	add.w	r2, r2, #28
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001756:	f103 031c 	add.w	r3, r3, #28
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b04      	cmp	r3, #4
 800175e:	ddbf      	ble.n	80016e0 <test_full_keccak_rounds+0xb4>

        reference_round(ref, r);
 8001760:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001764:	f103 0308 	add.w	r3, r3, #8
 8001768:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 800176c:	6811      	ldr	r1, [r2, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff42 	bl	80015f8 <reference_round>
        masked_round(mstate, r, Rchi);
 8001774:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001778:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 800177c:	f507 518a 	add.w	r1, r7, #4416	@ 0x1140
 8001780:	6809      	ldr	r1, [r1, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fe84 	bl	8001490 <masked_round>

        uint64_t recon[25];
        recombine_masked_state(recon, mstate);
 8001788:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	3b08      	subs	r3, #8
 8001792:	4611      	mov	r1, r2
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fc2c 	bl	8000ff2 <recombine_masked_state>

        /* --- 3. compare lane by lane --------------------------------- */
        int fail = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80017a0:	f102 0214 	add.w	r2, r2, #20
 80017a4:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < 25; ++i) {
 80017a6:	2300      	movs	r3, #0
 80017a8:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80017ac:	f102 0210 	add.w	r2, r2, #16
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e059      	b.n	8001868 <test_full_keccak_rounds+0x23c>
            if (recon[i] != ref[i]) {
 80017b4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80017b8:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 80017bc:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80017c0:	f103 0310 	add.w	r3, r3, #16
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4413      	add	r3, r2
 80017ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ce:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80017d2:	f103 0310 	add.w	r3, r3, #16
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 80017de:	f103 0308 	add.w	r3, r3, #8
 80017e2:	443b      	add	r3, r7
 80017e4:	3be0      	subs	r3, #224	@ 0xe0
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	4299      	cmp	r1, r3
 80017ec:	bf08      	it	eq
 80017ee:	4290      	cmpeq	r0, r2
 80017f0:	d02f      	beq.n	8001852 <test_full_keccak_rounds+0x226>
                printf("Round %2d lane %2d : ref=%016llX  mask=%016llX\n",
                       r, i,
                       (unsigned long long)ref[i],
 80017f2:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80017f6:	f103 0310 	add.w	r3, r3, #16
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 8001802:	f103 0308 	add.w	r3, r3, #8
 8001806:	443b      	add	r3, r7
 8001808:	3be0      	subs	r3, #224	@ 0xe0
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (unsigned long long)recon[i]);
 800180e:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001812:	f5a1 70a4 	sub.w	r0, r1, #328	@ 0x148
 8001816:	f507 5189 	add.w	r1, r7, #4384	@ 0x1120
 800181a:	f101 0110 	add.w	r1, r1, #16
 800181e:	6809      	ldr	r1, [r1, #0]
 8001820:	00c9      	lsls	r1, r1, #3
 8001822:	4401      	add	r1, r0
 8001824:	e9d1 0100 	ldrd	r0, r1, [r1]
                printf("Round %2d lane %2d : ref=%016llX  mask=%016llX\n",
 8001828:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800182c:	e9cd 2300 	strd	r2, r3, [sp]
 8001830:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001834:	f103 0310 	add.w	r3, r3, #16
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800183e:	6819      	ldr	r1, [r3, #0]
 8001840:	481e      	ldr	r0, [pc, #120]	@ (80018bc <test_full_keccak_rounds+0x290>)
 8001842:	f00a fc5f 	bl	800c104 <iprintf>
                fail = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 800184c:	f102 0214 	add.w	r2, r2, #20
 8001850:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < 25; ++i) {
 8001852:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001856:	f103 0310 	add.w	r3, r3, #16
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001862:	f102 0210 	add.w	r2, r2, #16
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800186c:	f103 0310 	add.w	r3, r3, #16
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b18      	cmp	r3, #24
 8001874:	dd9e      	ble.n	80017b4 <test_full_keccak_rounds+0x188>
            }
        }
        if (fail) {
 8001876:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800187a:	f103 0314 	add.w	r3, r3, #20
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d006      	beq.n	8001892 <test_full_keccak_rounds+0x266>
            printf("✗ round %d FAILED – stop early\n\n", r);
 8001884:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8001888:	6819      	ldr	r1, [r3, #0]
 800188a:	480d      	ldr	r0, [pc, #52]	@ (80018c0 <test_full_keccak_rounds+0x294>)
 800188c:	f00a fc3a 	bl	800c104 <iprintf>
 8001890:	e00f      	b.n	80018b2 <test_full_keccak_rounds+0x286>
    for (int r = 0; r < 24; ++r) {
 8001892:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b17      	cmp	r3, #23
 80018a8:	f77f af13 	ble.w	80016d2 <test_full_keccak_rounds+0xa6>
            return;
        }
    }

    printf("✓ all 24 masked rounds match reference Keccak-F[1600]\n");
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <test_full_keccak_rounds+0x298>)
 80018ae:	f00a fc91 	bl	800c1d4 <puts>
}
 80018b2:	f507 578a 	add.w	r7, r7, #4416	@ 0x1140
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bdb0      	pop	{r4, r5, r7, pc}
 80018bc:	0800cff8 	.word	0x0800cff8
 80018c0:	0800d028 	.word	0x0800d028
 80018c4:	0800d050 	.word	0x0800d050

080018c8 <test_masked_keccak_round_vs_reference>:

void test_masked_keccak_round_vs_reference(void) {
 80018c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018cc:	f2ad 5d94 	subw	sp, sp, #1428	@ 0x594
 80018d0:	af00      	add	r7, sp, #0
    // === 1. Setup known input ===
    uint64_t ref_state[25];
    for (int i = 0; i < 25; i++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 80018d8:	e05c      	b.n	8001994 <test_masked_keccak_round_vs_reference+0xcc>
        ref_state[i] = i * 0x0101010101010101ULL;
 80018da:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 80018de:	17da      	asrs	r2, r3, #31
 80018e0:	469a      	mov	sl, r3
 80018e2:	4693      	mov	fp, r2
 80018e4:	4652      	mov	r2, sl
 80018e6:	465b      	mov	r3, fp
 80018e8:	f04f 0800 	mov.w	r8, #0
 80018ec:	f04f 0900 	mov.w	r9, #0
 80018f0:	021e      	lsls	r6, r3, #8
 80018f2:	46b1      	mov	r9, r6
 80018f4:	464e      	mov	r6, r9
 80018f6:	ea46 6612 	orr.w	r6, r6, r2, lsr #24
 80018fa:	46b1      	mov	r9, r6
 80018fc:	0213      	lsls	r3, r2, #8
 80018fe:	4698      	mov	r8, r3
 8001900:	4642      	mov	r2, r8
 8001902:	464b      	mov	r3, r9
 8001904:	eb12 000a 	adds.w	r0, r2, sl
 8001908:	eb43 010b 	adc.w	r1, r3, fp
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	060b      	lsls	r3, r1, #24
 8001916:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 800191a:	0602      	lsls	r2, r0, #24
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	eb10 040a 	adds.w	r4, r0, sl
 8001924:	eb41 050b 	adc.w	r5, r1, fp
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	022b      	lsls	r3, r5, #8
 8001932:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001936:	0222      	lsls	r2, r4, #8
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	eb14 030a 	adds.w	r3, r4, sl
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	eb45 030b 	adc.w	r3, r5, fp
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	f04f 0200 	mov.w	r2, #0
 800194c:	f04f 0300 	mov.w	r3, #0
 8001950:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001954:	464e      	mov	r6, r9
 8001956:	0433      	lsls	r3, r6, #16
 8001958:	4646      	mov	r6, r8
 800195a:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 800195e:	4646      	mov	r6, r8
 8001960:	0432      	lsls	r2, r6, #16
 8001962:	4646      	mov	r6, r8
 8001964:	18b6      	adds	r6, r6, r2
 8001966:	60be      	str	r6, [r7, #8]
 8001968:	464e      	mov	r6, r9
 800196a:	eb46 0303 	adc.w	r3, r6, r3
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 800197a:	f107 0210 	add.w	r2, r7, #16
 800197e:	4413      	add	r3, r2
 8001980:	3bd0      	subs	r3, #208	@ 0xd0
 8001982:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001986:	e9c3 8900 	strd	r8, r9, [r3]
    for (int i = 0; i < 25; i++)
 800198a:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 800198e:	3301      	adds	r3, #1
 8001990:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 8001994:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 8001998:	2b18      	cmp	r3, #24
 800199a:	dd9e      	ble.n	80018da <test_masked_keccak_round_vs_reference+0x12>

    masked_uint64_t masked_state[5][5];
    fill_masked_state(masked_state, ref_state);
 800199c:	f507 6298 	add.w	r2, r7, #1216	@ 0x4c0
 80019a0:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80019a4:	4611      	mov	r1, r2
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff faae 	bl	8000f08 <fill_masked_state>

    uint64_t tmp_ref[25], tmp_masked[25];

    // === 2. Apply reference round ===
    memcpy(tmp_ref, ref_state, sizeof(ref_state));
 80019ac:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 80019b0:	f5a3 6397 	sub.w	r3, r3, #1208	@ 0x4b8
 80019b4:	4618      	mov	r0, r3
 80019b6:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 80019ba:	22c8      	movs	r2, #200	@ 0xc8
 80019bc:	4619      	mov	r1, r3
 80019be:	f00a fe28 	bl	800c612 <memcpy>
    theta(tmp_ref);
 80019c2:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdf0 	bl	80005ac <theta>
    rho(tmp_ref);
 80019cc:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fec9 	bl	8000768 <rho>
    pi(tmp_ref);
 80019d6:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe ff3a 	bl	8000854 <pi>
    chi(tmp_ref);
 80019e0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7fe ffcf 	bl	8000988 <chi>
    iota(tmp_ref, 0);
 80019ea:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f851 	bl	8000a98 <iota>

    // === 3. Apply masked round ===
    masked_keccak_round(masked_state, RC[0]);
 80019f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <test_masked_keccak_round_vs_reference+0x16c>)
 80019f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fc:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8001a00:	4608      	mov	r0, r1
 8001a02:	f001 f986 	bl	8002d12 <masked_keccak_round>
    recombine_masked_state(tmp_masked, masked_state);
 8001a06:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff faee 	bl	8000ff2 <recombine_masked_state>

    // === 4. Compare ===
    print_diff("Keccak-Round", tmp_ref, tmp_masked);
 8001a16:	f107 0210 	add.w	r2, r7, #16
 8001a1a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4805      	ldr	r0, [pc, #20]	@ (8001a38 <test_masked_keccak_round_vs_reference+0x170>)
 8001a22:	f7ff fb37 	bl	8001094 <print_diff>
}
 8001a26:	bf00      	nop
 8001a28:	f207 5794 	addw	r7, r7, #1428	@ 0x594
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a32:	bf00      	nop
 8001a34:	0800d278 	.word	0x0800d278
 8001a38:	0800d088 	.word	0x0800d088

08001a3c <test_masked_vs_reference_sha3_256>:
extern int TWOFIVESIX(uint8_t* M, int l, uint8_t* O);
extern int FIVEONETWO(uint8_t* M, int l, uint8_t* O);

void test_masked_vs_reference_sha3_256(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	@ 0x50
 8001a40:	af00      	add	r7, sp, #0
    const char *msg = "Masked Keccak Test Vector: SHA3-256";
 8001a42:	4b22      	ldr	r3, [pc, #136]	@ (8001acc <test_masked_vs_reference_sha3_256+0x90>)
 8001a44:	64bb      	str	r3, [r7, #72]	@ 0x48
    size_t len = strlen(msg);
 8001a46:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001a48:	f7fe fbc2 	bl	80001d0 <strlen>
 8001a4c:	6478      	str	r0, [r7, #68]	@ 0x44

    uint8_t ref_out[32];
    uint8_t masked_out[32];

    // Call reference implementation
    TWOFIVESIX((uint8_t *)msg, (int)len, ref_out);
 8001a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a50:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001a58:	f7ff fa28 	bl	8000eac <TWOFIVESIX>

    // Call masked implementation
    masked_sha3_256(masked_out, (const uint8_t *)msg, len);
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001a60:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 fc58 	bl	8003318 <masked_sha3_256>

    // Compare output
    for (int i = 0; i < 32; ++i) {
 8001a68:	2300      	movs	r3, #0
 8001a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a6c:	e023      	b.n	8001ab6 <test_masked_vs_reference_sha3_256+0x7a>
        if (ref_out[i] != masked_out[i]) {
 8001a6e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a74:	4413      	add	r3, r2
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	1d39      	adds	r1, r7, #4
 8001a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a7c:	440b      	add	r3, r1
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d015      	beq.n	8001ab0 <test_masked_vs_reference_sha3_256+0x74>
            printf("Mismatch SHA3-256 byte[%d]: ref=0x%02X, masked=0x%02X\n",
                   i, ref_out[i], masked_out[i]);
 8001a84:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a8a:	4413      	add	r3, r2
 8001a8c:	781b      	ldrb	r3, [r3, #0]
            printf("Mismatch SHA3-256 byte[%d]: ref=0x%02X, masked=0x%02X\n",
 8001a8e:	4619      	mov	r1, r3
                   i, ref_out[i], masked_out[i]);
 8001a90:	1d3a      	adds	r2, r7, #4
 8001a92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
            printf("Mismatch SHA3-256 byte[%d]: ref=0x%02X, masked=0x%02X\n",
 8001a98:	460a      	mov	r2, r1
 8001a9a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001a9c:	480c      	ldr	r0, [pc, #48]	@ (8001ad0 <test_masked_vs_reference_sha3_256+0x94>)
 8001a9e:	f00a fb31 	bl	800c104 <iprintf>
            assert(0);
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <test_masked_vs_reference_sha3_256+0x98>)
 8001aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad8 <test_masked_vs_reference_sha3_256+0x9c>)
 8001aa6:	f240 1155 	movw	r1, #341	@ 0x155
 8001aaa:	480c      	ldr	r0, [pc, #48]	@ (8001adc <test_masked_vs_reference_sha3_256+0xa0>)
 8001aac:	f00a f97a 	bl	800bda4 <__assert_func>
    for (int i = 0; i < 32; ++i) {
 8001ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ab6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ab8:	2b1f      	cmp	r3, #31
 8001aba:	ddd8      	ble.n	8001a6e <test_masked_vs_reference_sha3_256+0x32>
        }
    }
    printf("PASS: SHA3-256 masked output matches reference\n");
 8001abc:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <test_masked_vs_reference_sha3_256+0xa4>)
 8001abe:	f00a fb89 	bl	800c1d4 <puts>
}
 8001ac2:	bf00      	nop
 8001ac4:	3750      	adds	r7, #80	@ 0x50
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0800d098 	.word	0x0800d098
 8001ad0:	0800d0bc 	.word	0x0800d0bc
 8001ad4:	0800d0f4 	.word	0x0800d0f4
 8001ad8:	0800d230 	.word	0x0800d230
 8001adc:	0800d0f8 	.word	0x0800d0f8
 8001ae0:	0800d10c 	.word	0x0800d10c

08001ae4 <test_masked_vs_reference_sha3_512>:

void test_masked_vs_reference_sha3_512(void) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0a4      	sub	sp, #144	@ 0x90
 8001ae8:	af00      	add	r7, sp, #0
    const char *msg = "Masked Keccak Test Vector: SHA3-512";
 8001aea:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <test_masked_vs_reference_sha3_512+0xb0>)
 8001aec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    size_t len = strlen(msg);
 8001af0:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001af4:	f7fe fb6c 	bl	80001d0 <strlen>
 8001af8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    uint8_t ref_out[64];
    uint8_t masked_out[64];

    // Call reference implementation
    FIVEONETWO((uint8_t *)msg, (int)len, ref_out);
 8001afc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b00:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001b04:	4619      	mov	r1, r3
 8001b06:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001b0a:	f7ff f9b7 	bl	8000e7c <FIVEONETWO>

    // Call masked implementation
    masked_sha3_512(masked_out, (const uint8_t *)msg, len);
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001b14:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f001 fc11 	bl	8003340 <masked_sha3_512>

    for (int i = 0; i < 64; ++i) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001b24:	e02a      	b.n	8001b7c <test_masked_vs_reference_sha3_512+0x98>
        if (ref_out[i] != masked_out[i]) {
 8001b26:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001b2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b2e:	4413      	add	r3, r2
 8001b30:	781a      	ldrb	r2, [r3, #0]
 8001b32:	1d39      	adds	r1, r7, #4
 8001b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b38:	440b      	add	r3, r1
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d018      	beq.n	8001b72 <test_masked_vs_reference_sha3_512+0x8e>
            printf("Mismatch SHA3-512 byte[%d]: ref=0x%02X, masked=0x%02X\n",
                   i, ref_out[i], masked_out[i]);
 8001b40:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
            printf("Mismatch SHA3-512 byte[%d]: ref=0x%02X, masked=0x%02X\n",
 8001b4c:	4619      	mov	r1, r3
                   i, ref_out[i], masked_out[i]);
 8001b4e:	1d3a      	adds	r2, r7, #4
 8001b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b54:	4413      	add	r3, r2
 8001b56:	781b      	ldrb	r3, [r3, #0]
            printf("Mismatch SHA3-512 byte[%d]: ref=0x%02X, masked=0x%02X\n",
 8001b58:	460a      	mov	r2, r1
 8001b5a:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001b5e:	480e      	ldr	r0, [pc, #56]	@ (8001b98 <test_masked_vs_reference_sha3_512+0xb4>)
 8001b60:	f00a fad0 	bl	800c104 <iprintf>
            assert(0);
 8001b64:	4b0d      	ldr	r3, [pc, #52]	@ (8001b9c <test_masked_vs_reference_sha3_512+0xb8>)
 8001b66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba0 <test_masked_vs_reference_sha3_512+0xbc>)
 8001b68:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8001b6c:	480d      	ldr	r0, [pc, #52]	@ (8001ba4 <test_masked_vs_reference_sha3_512+0xc0>)
 8001b6e:	f00a f919 	bl	800bda4 <__assert_func>
    for (int i = 0; i < 64; ++i) {
 8001b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b76:	3301      	adds	r3, #1
 8001b78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b80:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b82:	ddd0      	ble.n	8001b26 <test_masked_vs_reference_sha3_512+0x42>
        }
    }
    printf("PASS: SHA3-512 masked output matches reference\n");
 8001b84:	4808      	ldr	r0, [pc, #32]	@ (8001ba8 <test_masked_vs_reference_sha3_512+0xc4>)
 8001b86:	f00a fb25 	bl	800c1d4 <puts>
}
 8001b8a:	bf00      	nop
 8001b8c:	3790      	adds	r7, #144	@ 0x90
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	0800d13c 	.word	0x0800d13c
 8001b98:	0800d160 	.word	0x0800d160
 8001b9c:	0800d0f4 	.word	0x0800d0f4
 8001ba0:	0800d254 	.word	0x0800d254
 8001ba4:	0800d0f8 	.word	0x0800d0f8
 8001ba8:	0800d198 	.word	0x0800d198

08001bac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb2:	f001 fe9b 	bl	80038ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb6:	f000 f83b 	bl	8001c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bba:	f000 f975 	bl	8001ea8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bbe:	f000 f8a1 	bl	8001d04 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001bc2:	f000 f8cd 	bl	8001d60 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001bc6:	f000 f90f 	bl	8001de8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001bca:	f009 fde1 	bl	800b790 <MX_USB_HOST_Init>
  MX_RNG_Init();
 8001bce:	f000 f8f7 	bl	8001dc0 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8001bd2:	f000 f93f 	bl	8001e54 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <main+0x78>)
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bde:	4a11      	ldr	r2, [pc, #68]	@ (8001c24 <main+0x78>)
 8001be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001be4:	6353      	str	r3, [r2, #52]	@ 0x34
 8001be6:	4b0f      	ldr	r3, [pc, #60]	@ (8001c24 <main+0x78>)
 8001be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 8001bf2:	480d      	ldr	r0, [pc, #52]	@ (8001c28 <main+0x7c>)
 8001bf4:	f005 feca 	bl	800798c <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c2c <main+0x80>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6898      	ldr	r0, [r3, #8]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2202      	movs	r2, #2
 8001c02:	2100      	movs	r1, #0
 8001c04:	f00a faee 	bl	800c1e4 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_masked_vs_reference_step_by_step();
 8001c08:	f7ff fab0 	bl	800116c <test_masked_vs_reference_step_by_step>
	  test_full_keccak_rounds();
 8001c0c:	f7ff fd0e 	bl	800162c <test_full_keccak_rounds>
	  test_masked_keccak_round_vs_reference();
 8001c10:	f7ff fe5a 	bl	80018c8 <test_masked_keccak_round_vs_reference>
	    test_masked_vs_reference_sha3_256();
 8001c14:	f7ff ff12 	bl	8001a3c <test_masked_vs_reference_sha3_256>
	    test_masked_vs_reference_sha3_512();
 8001c18:	f7ff ff64 	bl	8001ae4 <test_masked_vs_reference_sha3_512>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001c1c:	f009 fdde 	bl	800b7dc <MX_USB_HOST_Process>
	  test_masked_vs_reference_step_by_step();
 8001c20:	bf00      	nop
 8001c22:	e7f1      	b.n	8001c08 <main+0x5c>
 8001c24:	40023800 	.word	0x40023800
 8001c28:	200001b0 	.word	0x200001b0
 8001c2c:	200000a8 	.word	0x200000a8

08001c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b094      	sub	sp, #80	@ 0x50
 8001c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c36:	f107 0320 	add.w	r3, r7, #32
 8001c3a:	2230      	movs	r2, #48	@ 0x30
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f00a fc5c 	bl	800c4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	4b28      	ldr	r3, [pc, #160]	@ (8001cfc <SystemClock_Config+0xcc>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	4a27      	ldr	r2, [pc, #156]	@ (8001cfc <SystemClock_Config+0xcc>)
 8001c5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c62:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c64:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <SystemClock_Config+0xcc>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c70:	2300      	movs	r3, #0
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	4b22      	ldr	r3, [pc, #136]	@ (8001d00 <SystemClock_Config+0xd0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a21      	ldr	r2, [pc, #132]	@ (8001d00 <SystemClock_Config+0xd0>)
 8001c7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b1f      	ldr	r3, [pc, #124]	@ (8001d00 <SystemClock_Config+0xd0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c96:	2302      	movs	r3, #2
 8001c98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ca4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ca8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001caa:	2302      	movs	r3, #2
 8001cac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001cae:	2307      	movs	r3, #7
 8001cb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cb2:	f107 0320 	add.w	r3, r7, #32
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f005 f88e 	bl	8006dd8 <HAL_RCC_OscConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001cc2:	f000 f9ef 	bl	80020a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc6:	230f      	movs	r3, #15
 8001cc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cd2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cde:	f107 030c 	add.w	r3, r7, #12
 8001ce2:	2105      	movs	r1, #5
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f005 faef 	bl	80072c8 <HAL_RCC_ClockConfig>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001cf0:	f000 f9d8 	bl	80020a4 <Error_Handler>
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3750      	adds	r7, #80	@ 0x50
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40007000 	.word	0x40007000

08001d04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d0a:	4a13      	ldr	r2, [pc, #76]	@ (8001d58 <MX_I2C1_Init+0x54>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d10:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <MX_I2C1_Init+0x58>)
 8001d12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d2e:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d34:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d40:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <MX_I2C1_Init+0x50>)
 8001d42:	f004 fa65 	bl	8006210 <HAL_I2C_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d4c:	f000 f9aa 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000114 	.word	0x20000114
 8001d58:	40005400 	.word	0x40005400
 8001d5c:	000186a0 	.word	0x000186a0

08001d60 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001d64:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001d66:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <MX_I2S3_Init+0x58>)
 8001d68:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001d6a:	4b12      	ldr	r3, [pc, #72]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d70:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001d72:	4b10      	ldr	r3, [pc, #64]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001d78:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d84:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001d88:	4a0c      	ldr	r2, [pc, #48]	@ (8001dbc <MX_I2S3_Init+0x5c>)
 8001d8a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <MX_I2S3_Init+0x54>)
 8001da0:	f004 fb7a 	bl	8006498 <HAL_I2S_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001daa:	f000 f97b 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000168 	.word	0x20000168
 8001db8:	40003c00 	.word	0x40003c00
 8001dbc:	00017700 	.word	0x00017700

08001dc0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <MX_RNG_Init+0x20>)
 8001dc6:	4a07      	ldr	r2, [pc, #28]	@ (8001de4 <MX_RNG_Init+0x24>)
 8001dc8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <MX_RNG_Init+0x20>)
 8001dcc:	f005 fdde 	bl	800798c <HAL_RNG_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001dd6:	f000 f965 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200001b0 	.word	0x200001b0
 8001de4:	50060800 	.word	0x50060800

08001de8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001dec:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001dee:	4a18      	ldr	r2, [pc, #96]	@ (8001e50 <MX_SPI1_Init+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b16      	ldr	r3, [pc, #88]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001df4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001df8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e00:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e06:	4b11      	ldr	r3, [pc, #68]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e34:	220a      	movs	r2, #10
 8001e36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	@ (8001e4c <MX_SPI1_Init+0x64>)
 8001e3a:	f005 fe27 	bl	8007a8c <HAL_SPI_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e44:	f000 f92e 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200001c0 	.word	0x200001c0
 8001e50:	40013000 	.word	0x40013000

08001e54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e58:	4b11      	ldr	r3, [pc, #68]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ea4 <MX_USART2_UART_Init+0x50>)
 8001e5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e72:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e78:	4b09      	ldr	r3, [pc, #36]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e84:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e8a:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <MX_USART2_UART_Init+0x4c>)
 8001e8c:	f005 fe87 	bl	8007b9e <HAL_UART_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e96:	f000 f905 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000218 	.word	0x20000218
 8001ea4:	40004400 	.word	0x40004400

08001ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08c      	sub	sp, #48	@ 0x30
 8001eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]
 8001eba:	60da      	str	r2, [r3, #12]
 8001ebc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	4b72      	ldr	r3, [pc, #456]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a71      	ldr	r2, [pc, #452]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001ec8:	f043 0310 	orr.w	r3, r3, #16
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b6f      	ldr	r3, [pc, #444]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	4b6b      	ldr	r3, [pc, #428]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a6a      	ldr	r2, [pc, #424]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b68      	ldr	r3, [pc, #416]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	4b64      	ldr	r3, [pc, #400]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a63      	ldr	r2, [pc, #396]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b61      	ldr	r3, [pc, #388]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b5d      	ldr	r3, [pc, #372]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a5c      	ldr	r2, [pc, #368]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f22:	4b5a      	ldr	r3, [pc, #360]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	4b56      	ldr	r3, [pc, #344]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a55      	ldr	r2, [pc, #340]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b53      	ldr	r3, [pc, #332]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	4a4e      	ldr	r2, [pc, #312]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800208c <MX_GPIO_Init+0x1e4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2108      	movs	r1, #8
 8001f6a:	4849      	ldr	r0, [pc, #292]	@ (8002090 <MX_GPIO_Init+0x1e8>)
 8001f6c:	f002 f802 	bl	8003f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2101      	movs	r1, #1
 8001f74:	4847      	ldr	r0, [pc, #284]	@ (8002094 <MX_GPIO_Init+0x1ec>)
 8001f76:	f001 fffd 	bl	8003f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001f80:	4845      	ldr	r0, [pc, #276]	@ (8002098 <MX_GPIO_Init+0x1f0>)
 8001f82:	f001 fff7 	bl	8003f74 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001f86:	2308      	movs	r3, #8
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	483c      	ldr	r0, [pc, #240]	@ (8002090 <MX_GPIO_Init+0x1e8>)
 8001f9e:	f001 fe4d 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4836      	ldr	r0, [pc, #216]	@ (8002094 <MX_GPIO_Init+0x1ec>)
 8001fba:	f001 fe3f 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fce:	2305      	movs	r3, #5
 8001fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001fd2:	f107 031c 	add.w	r3, r7, #28
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	482e      	ldr	r0, [pc, #184]	@ (8002094 <MX_GPIO_Init+0x1ec>)
 8001fda:	f001 fe2f 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fe2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	482a      	ldr	r0, [pc, #168]	@ (800209c <MX_GPIO_Init+0x1f4>)
 8001ff4:	f001 fe22 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	4619      	mov	r1, r3
 800200a:	4825      	ldr	r0, [pc, #148]	@ (80020a0 <MX_GPIO_Init+0x1f8>)
 800200c:	f001 fe16 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002022:	2305      	movs	r3, #5
 8002024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	481c      	ldr	r0, [pc, #112]	@ (80020a0 <MX_GPIO_Init+0x1f8>)
 800202e:	f001 fe05 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002032:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002036:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002038:	2301      	movs	r3, #1
 800203a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002044:	f107 031c 	add.w	r3, r7, #28
 8002048:	4619      	mov	r1, r3
 800204a:	4813      	ldr	r0, [pc, #76]	@ (8002098 <MX_GPIO_Init+0x1f0>)
 800204c:	f001 fdf6 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002050:	2320      	movs	r3, #32
 8002052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	4619      	mov	r1, r3
 8002062:	480d      	ldr	r0, [pc, #52]	@ (8002098 <MX_GPIO_Init+0x1f0>)
 8002064:	f001 fdea 	bl	8003c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002068:	2302      	movs	r3, #2
 800206a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800206c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002076:	f107 031c 	add.w	r3, r7, #28
 800207a:	4619      	mov	r1, r3
 800207c:	4804      	ldr	r0, [pc, #16]	@ (8002090 <MX_GPIO_Init+0x1e8>)
 800207e:	f001 fddd 	bl	8003c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002082:	bf00      	nop
 8002084:	3730      	adds	r7, #48	@ 0x30
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40021000 	.word	0x40021000
 8002094:	40020800 	.word	0x40020800
 8002098:	40020c00 	.word	0x40020c00
 800209c:	40020000 	.word	0x40020000
 80020a0:	40020400 	.word	0x40020400

080020a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020a8:	b672      	cpsid	i
}
 80020aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <Error_Handler+0x8>

080020b0 <fill_random_matrix>:
#include <stdint.h>
#include <stdio.h>
#include "masked_gadgets.h"


void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 80020b0:	b5b0      	push	{r4, r5, r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	e037      	b.n	800212e <fill_random_matrix+0x7e>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3301      	adds	r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e020      	b.n	8002108 <fill_random_matrix+0x58>
            uint64_t val = get_random64();
 80020c6:	f000 f98b 	bl	80023e0 <get_random64>
 80020ca:	4603      	mov	r3, r0
 80020cc:	17da      	asrs	r2, r3, #31
 80020ce:	461c      	mov	r4, r3
 80020d0:	4615      	mov	r5, r2
 80020d2:	e9c7 4502 	strd	r4, r5, [r7, #8]
            r[i][j] = val;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	015b      	lsls	r3, r3, #5
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	441a      	add	r2, r3
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	18d1      	adds	r1, r2, r3
 80020e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020e8:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	015b      	lsls	r3, r3, #5
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	441a      	add	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	18d1      	adds	r1, r2, r3
 80020fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020fe:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	3301      	adds	r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d9db      	bls.n	80020c6 <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	441a      	add	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	18d1      	adds	r1, r2, r3
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d9c4      	bls.n	80020be <fill_random_matrix+0xe>
    }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bdb0      	pop	{r4, r5, r7, pc}

0800213e <masked_xor>:



void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 800213e:	b4b0      	push	{r4, r5, r7}
 8002140:	b087      	sub	sp, #28
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e018      	b.n	8002182 <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4413      	add	r3, r2
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	ea80 0402 	eor.w	r4, r0, r2
 800216c:	ea81 0503 	eor.w	r5, r1, r3
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3301      	adds	r3, #1
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d9e3      	bls.n	8002150 <masked_xor+0x12>
    }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	bcb0      	pop	{r4, r5, r7}
 8002192:	4770      	bx	lr

08002194 <masked_and>:

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 8002194:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002198:	b092      	sub	sp, #72	@ 0x48
 800219a:	af00      	add	r7, sp, #0
 800219c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800219e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80021a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80021a2:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 80021a4:	2300      	movs	r3, #0
 80021a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80021a8:	e018      	b.n	80021dc <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 80021aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	4413      	add	r3, r2
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	ea00 0402 	and.w	r4, r0, r2
 80021c6:	ea01 0503 	and.w	r5, r1, r3
 80021ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 80021d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021d8:	3301      	adds	r3, #1
 80021da:	647b      	str	r3, [r7, #68]	@ 0x44
 80021dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d9e3      	bls.n	80021aa <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 80021e2:	2300      	movs	r3, #0
 80021e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80021e6:	e078      	b.n	80022da <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80021e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ea:	3301      	adds	r3, #1
 80021ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021ee:	e06e      	b.n	80022ce <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 80021f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002200:	00db      	lsls	r3, r3, #3
 8002202:	4413      	add	r3, r2
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	ea00 0802 	and.w	r8, r0, r2
 800220c:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 8002210:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002212:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	e9d3 0100 	ldrd	r0, r1, [r3]
 800221c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800221e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	ea00 0a02 	and.w	sl, r0, r2
 800222c:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8002230:	ea88 030a 	eor.w	r3, r8, sl
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	ea89 030b 	eor.w	r3, r9, fp
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002240:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 8002244:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4413      	add	r3, r2
 800224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	441a      	add	r2, r3
 8002258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4413      	add	r3, r2
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	ea80 0402 	eor.w	r4, r0, r2
 8002266:	61bc      	str	r4, [r7, #24]
 8002268:	404b      	eors	r3, r1
 800226a:	61fb      	str	r3, [r7, #28]
 800226c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800226e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002278:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 800227c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800227e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	6a3b      	ldr	r3, [r7, #32]
 800228e:	441a      	add	r2, r3
 8002290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800229e:	ea80 0602 	eor.w	r6, r0, r2
 80022a2:	613e      	str	r6, [r7, #16]
 80022a4:	404b      	eors	r3, r1
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80022ac:	460b      	mov	r3, r1
 80022ae:	4063      	eors	r3, r4
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	4613      	mov	r3, r2
 80022b4:	406b      	eors	r3, r5
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80022c4:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80022c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ca:	3301      	adds	r3, #1
 80022cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d98d      	bls.n	80021f0 <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 80022d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022d6:	3301      	adds	r3, #1
 80022d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022dc:	2b03      	cmp	r3, #3
 80022de:	d983      	bls.n	80021e8 <masked_and+0x54>
        }
    }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3748      	adds	r7, #72	@ 0x48
 80022e6:	46bd      	mov	sp, r7
 80022e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80022ec:	4770      	bx	lr

080022ee <masked_not>:


void masked_not(masked_uint64_t *dst, const masked_uint64_t *src) {
 80022ee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80022f2:	b092      	sub	sp, #72	@ 0x48
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	61f8      	str	r0, [r7, #28]
 80022f8:	61b9      	str	r1, [r7, #24]
    // Bitwise NOT of each share — safe for Boolean masking.
    for (size_t i = 0; i < MASKING_N; ++i)
 80022fa:	2300      	movs	r3, #0
 80022fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80022fe:	e012      	b.n	8002326 <masked_not+0x38>
        dst->share[i] = ~src->share[i];
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	ea6f 0802 	mvn.w	r8, r2
 8002310:	ea6f 0903 	mvn.w	r9, r3
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	e9c3 8900 	strd	r8, r9, [r3]
    for (size_t i = 0; i < MASKING_N; ++i)
 8002320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002322:	3301      	adds	r3, #1
 8002324:	647b      	str	r3, [r7, #68]	@ 0x44
 8002326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002328:	2b03      	cmp	r3, #3
 800232a:	d9e9      	bls.n	8002300 <masked_not+0x12>

    // Adjust one share so that the recombined NOT is correct.
    uint64_t orig_parity = 0, inv_parity = 0;
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 8002344:	2300      	movs	r3, #0
 8002346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002348:	e024      	b.n	8002394 <masked_not+0xa6>
        orig_parity ^= src->share[i];
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800235a:	ea80 0602 	eor.w	r6, r0, r2
 800235e:	613e      	str	r6, [r7, #16]
 8002360:	404b      	eors	r3, r1
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002368:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        inv_parity  ^= dst->share[i];
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800237c:	ea80 0602 	eor.w	r6, r0, r2
 8002380:	60be      	str	r6, [r7, #8]
 8002382:	404b      	eors	r3, r1
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800238a:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 800238e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002390:	3301      	adds	r3, #1
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002396:	2b03      	cmp	r3, #3
 8002398:	d9d7      	bls.n	800234a <masked_not+0x5c>
    }
    uint64_t delta = inv_parity ^ ~orig_parity;
 800239a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800239e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023a2:	ea80 0402 	eor.w	r4, r0, r2
 80023a6:	ea81 0503 	eor.w	r5, r1, r3
 80023aa:	43e3      	mvns	r3, r4
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	43eb      	mvns	r3, r5
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80023b6:	e9c7 3408 	strd	r3, r4, [r7, #32]
    dst->share[0] ^= delta;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023c0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023c4:	ea80 0a02 	eor.w	sl, r0, r2
 80023c8:	ea81 0b03 	eor.w	fp, r1, r3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	e9c3 ab00 	strd	sl, fp, [r3]
}
 80023d2:	bf00      	nop
 80023d4:	3748      	adds	r7, #72	@ 0x48
 80023d6:	46bd      	mov	sp, r7
 80023d8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80023dc:	4770      	bx	lr
	...

080023e0 <get_random64>:
    0x000000000000800aULL, 0x800000008000000aULL,
    0x8000000080008081ULL, 0x8000000000008080ULL,
    0x0000000080000001ULL, 0x8000000080008008ULL
};

uint64_t get_random64(void) {
 80023e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    HAL_RNG_GenerateRandomNumber(&hrng, &r1);
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4810      	ldr	r0, [pc, #64]	@ (8002430 <get_random64+0x50>)
 80023ee:	f005 faf7 	bl	80079e0 <HAL_RNG_GenerateRandomNumber>
    HAL_RNG_GenerateRandomNumber(&hrng, &r2);
 80023f2:	463b      	mov	r3, r7
 80023f4:	4619      	mov	r1, r3
 80023f6:	480e      	ldr	r0, [pc, #56]	@ (8002430 <get_random64+0x50>)
 80023f8:	f005 faf2 	bl	80079e0 <HAL_RNG_GenerateRandomNumber>
    return ((uint64_t)r1 << 32) | r2;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	469a      	mov	sl, r3
 8002402:	4693      	mov	fp, r2
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	f04f 0300 	mov.w	r3, #0
 800240c:	4653      	mov	r3, sl
 800240e:	2200      	movs	r2, #0
 8002410:	6839      	ldr	r1, [r7, #0]
 8002412:	2000      	movs	r0, #0
 8002414:	460c      	mov	r4, r1
 8002416:	4605      	mov	r5, r0
 8002418:	ea42 0804 	orr.w	r8, r2, r4
 800241c:	ea43 0905 	orr.w	r9, r3, r5
 8002420:	4642      	mov	r2, r8
 8002422:	464b      	mov	r3, r9
}
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002430:	200001b0 	.word	0x200001b0

08002434 <rol64>:
    { 28, 55, 25, 21, 56 },
    { 27, 20, 39,  8, 14 }
};

//Performs a circular left shift (rotate-left) of a 64-bit word by n bits.
static inline uint64_t rol64(uint64_t x, unsigned int n) {
 8002434:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
    n %= 64;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002448:	607b      	str	r3, [r7, #4]
    return (x << n) | (x >> ((64 - n) % 64));
 800244a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	f1a1 0620 	sub.w	r6, r1, #32
 8002454:	f1c1 0020 	rsb	r0, r1, #32
 8002458:	fa03 f901 	lsl.w	r9, r3, r1
 800245c:	fa02 f606 	lsl.w	r6, r2, r6
 8002460:	ea49 0906 	orr.w	r9, r9, r6
 8002464:	fa22 f000 	lsr.w	r0, r2, r0
 8002468:	ea49 0900 	orr.w	r9, r9, r0
 800246c:	fa02 f801 	lsl.w	r8, r2, r1
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4249      	negs	r1, r1
 8002474:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8002478:	f1c1 0620 	rsb	r6, r1, #32
 800247c:	f1a1 0020 	sub.w	r0, r1, #32
 8002480:	fa22 f401 	lsr.w	r4, r2, r1
 8002484:	fa03 f606 	lsl.w	r6, r3, r6
 8002488:	4334      	orrs	r4, r6
 800248a:	fa23 f000 	lsr.w	r0, r3, r0
 800248e:	4304      	orrs	r4, r0
 8002490:	fa23 f501 	lsr.w	r5, r3, r1
 8002494:	ea48 0a04 	orr.w	sl, r8, r4
 8002498:	ea49 0b05 	orr.w	fp, r9, r5
 800249c:	4654      	mov	r4, sl
 800249e:	465d      	mov	r5, fp
 80024a0:	4622      	mov	r2, r4
 80024a2:	462b      	mov	r3, r5
}
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024b0:	4770      	bx	lr
	...

080024b4 <masked_value_set>:

void masked_value_set(masked_uint64_t *out, uint64_t value) {
 80024b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b8:	b08c      	sub	sp, #48	@ 0x30
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6178      	str	r0, [r7, #20]
 80024be:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint64_t acc = value;
 80024c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024c6:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28


    for (int i = 0; i < MASKING_N - 1; i++) {
 80024ca:	2300      	movs	r3, #0
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ce:	e03f      	b.n	8002550 <masked_value_set+0x9c>
        uint32_t lo = 0, hi = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	2300      	movs	r3, #0
 80024d6:	61bb      	str	r3, [r7, #24]
        	HAL_StatusTypeDef status1 = HAL_RNG_GenerateRandomNumber(&hrng, &lo);
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	4619      	mov	r1, r3
 80024de:	4823      	ldr	r0, [pc, #140]	@ (800256c <masked_value_set+0xb8>)
 80024e0:	f005 fa7e 	bl	80079e0 <HAL_RNG_GenerateRandomNumber>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
           HAL_StatusTypeDef status2 = HAL_RNG_GenerateRandomNumber(&hrng, &hi);
 80024ea:	f107 0318 	add.w	r3, r7, #24
 80024ee:	4619      	mov	r1, r3
 80024f0:	481e      	ldr	r0, [pc, #120]	@ (800256c <masked_value_set+0xb8>)
 80024f2:	f005 fa75 	bl	80079e0 <HAL_RNG_GenerateRandomNumber>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        out->share[i] = ((uint64_t)hi << 32) | lo;
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2200      	movs	r2, #0
 8002500:	603b      	str	r3, [r7, #0]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	6839      	ldr	r1, [r7, #0]
 800250e:	000b      	movs	r3, r1
 8002510:	2200      	movs	r2, #0
 8002512:	69f9      	ldr	r1, [r7, #28]
 8002514:	2000      	movs	r0, #0
 8002516:	460c      	mov	r4, r1
 8002518:	4605      	mov	r5, r0
 800251a:	ea42 0804 	orr.w	r8, r2, r4
 800251e:	ea43 0905 	orr.w	r9, r3, r5
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4413      	add	r3, r2
 800252a:	e9c3 8900 	strd	r8, r9, [r3]
        acc ^= out->share[i];
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800253e:	ea80 0a02 	eor.w	sl, r0, r2
 8002542:	ea81 0b03 	eor.w	fp, r1, r3
 8002546:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N - 1; i++) {
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	3301      	adds	r3, #1
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	2b02      	cmp	r3, #2
 8002554:	ddbc      	ble.n	80024d0 <masked_value_set+0x1c>
    }

    out->share[MASKING_N - 1] = acc;
 8002556:	6979      	ldr	r1, [r7, #20]
 8002558:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800255c:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002560:	bf00      	nop
 8002562:	3730      	adds	r7, #48	@ 0x30
 8002564:	46bd      	mov	sp, r7
 8002566:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800256a:	bf00      	nop
 800256c:	200001b0 	.word	0x200001b0

08002570 <masked_squeeze>:
}


// Squeezes output bytes from a masked Keccak state.
// This is the final phase in sponge-based hashing or XOF like SHAKE.
void masked_squeeze(uint8_t *output, size_t output_len, masked_uint64_t state[5][5], size_t rate) {
 8002570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002574:	b08d      	sub	sp, #52	@ 0x34
 8002576:	af00      	add	r7, sp, #0
 8002578:	60f8      	str	r0, [r7, #12]
 800257a:	60b9      	str	r1, [r7, #8]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
    size_t offset = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (offset < output_len) {
 8002584:	e076      	b.n	8002674 <masked_squeeze+0x104>
        // Pull up to ratebytes per round.
        // This maps each byte of the output to a specific lane+byte within the state.
        for (int i = 0; i < rate&& offset < output_len; i++) {
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800258a:	e064      	b.n	8002656 <masked_squeeze+0xe6>
            size_t x = (i / 8) % 5;       // X coordinate in the 5×5 grid
 800258c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258e:	2b00      	cmp	r3, #0
 8002590:	da00      	bge.n	8002594 <masked_squeeze+0x24>
 8002592:	3307      	adds	r3, #7
 8002594:	10db      	asrs	r3, r3, #3
 8002596:	4619      	mov	r1, r3
 8002598:	4b3b      	ldr	r3, [pc, #236]	@ (8002688 <masked_squeeze+0x118>)
 800259a:	fb83 2301 	smull	r2, r3, r3, r1
 800259e:	105a      	asrs	r2, r3, #1
 80025a0:	17cb      	asrs	r3, r1, #31
 80025a2:	1ad2      	subs	r2, r2, r3
 80025a4:	4613      	mov	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	1aca      	subs	r2, r1, r3
 80025ac:	61ba      	str	r2, [r7, #24]
            size_t y = (i / 8) / 5;       // Y coordinate in the 5×5 grid
 80025ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b0:	4a35      	ldr	r2, [pc, #212]	@ (8002688 <masked_squeeze+0x118>)
 80025b2:	fb82 1203 	smull	r1, r2, r2, r3
 80025b6:	1112      	asrs	r2, r2, #4
 80025b8:	17db      	asrs	r3, r3, #31
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	617b      	str	r3, [r7, #20]
            size_t byte_pos = i % 8;      // Byte index within the 64-bit lane
 80025be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c0:	425a      	negs	r2, r3
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	f002 0207 	and.w	r2, r2, #7
 80025ca:	bf58      	it	pl
 80025cc:	4253      	negpl	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]

            // === Recombine shares ===
            // Convert the masked lane back into a real value via XOR of all shares.
            uint64_t lane = 0;
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 80025dc:	2300      	movs	r3, #0
 80025de:	61fb      	str	r3, [r7, #28]
 80025e0:	e01a      	b.n	8002618 <masked_squeeze+0xa8>
                lane ^= state[x][y].share[j];
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	015b      	lsls	r3, r3, #5
 80025ec:	461a      	mov	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	441a      	add	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	0099      	lsls	r1, r3, #2
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	440b      	add	r3, r1
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002606:	ea80 0802 	eor.w	r8, r0, r2
 800260a:	ea81 0903 	eor.w	r9, r1, r3
 800260e:	e9c7 8908 	strd	r8, r9, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3301      	adds	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b03      	cmp	r3, #3
 800261c:	dde1      	ble.n	80025e2 <masked_squeeze+0x72>
            }

            // Extract the correct byte from the lane.
            output[offset++] = (lane >> (8 * byte_pos)) & 0xFF;
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	00d9      	lsls	r1, r3, #3
 8002622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002626:	f1c1 0620 	rsb	r6, r1, #32
 800262a:	f1a1 0020 	sub.w	r0, r1, #32
 800262e:	fa22 f401 	lsr.w	r4, r2, r1
 8002632:	fa03 f606 	lsl.w	r6, r3, r6
 8002636:	4334      	orrs	r4, r6
 8002638:	fa23 f000 	lsr.w	r0, r3, r0
 800263c:	4304      	orrs	r4, r0
 800263e:	fa23 f501 	lsr.w	r5, r3, r1
 8002642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	b2e2      	uxtb	r2, r4
 800264e:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < rate&& offset < output_len; i++) {
 8002650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002652:	3301      	adds	r3, #1
 8002654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d903      	bls.n	8002666 <masked_squeeze+0xf6>
 800265e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	d392      	bcc.n	800258c <masked_squeeze+0x1c>
        }

        // === If we need more output ===
        // Keccak is a sponge — we re-permute the state to squeeze more bytes out.
        if (offset < output_len) {
 8002666:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d202      	bcs.n	8002674 <masked_squeeze+0x104>
            masked_keccak_f1600(state);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 fbf4 	bl	8002e5c <masked_keccak_f1600>
    while (offset < output_len) {
 8002674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	d384      	bcc.n	8002586 <masked_squeeze+0x16>
        }
    }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3734      	adds	r7, #52	@ 0x34
 8002682:	46bd      	mov	sp, r7
 8002684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002688:	66666667 	.word	0x66666667

0800268c <masked_theta>:

//======Five Main Round Functions======

void masked_theta(masked_uint64_t state[5][5]) {
 800268c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002690:	b0e0      	sub	sp, #384	@ 0x180
 8002692:	af00      	add	r7, sp, #0
 8002694:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002698:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800269c:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};  // Column parity
 800269e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80026a2:	22a0      	movs	r2, #160	@ 0xa0
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f009 ff28 	bl	800c4fc <memset>
    masked_uint64_t D[5] = {0};  // Parity difference per column
 80026ac:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80026b0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80026b4:	4618      	mov	r0, r3
 80026b6:	23a0      	movs	r3, #160	@ 0xa0
 80026b8:	461a      	mov	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f009 ff1e 	bl	800c4fc <memset>

    // For each column, compute the parity across the 5 lanes.
    // We do this in masked space using XORs, which are safe.
    for (int x = 0; x < 5; x++) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80026c6:	e04f      	b.n	8002768 <masked_theta+0xdc>
        C[x] = state[x][0];
 80026c8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	015b      	lsls	r3, r3, #5
 80026d4:	461a      	mov	r2, r3
 80026d6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80026da:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	441a      	add	r2, r3
 80026e2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80026e6:	015b      	lsls	r3, r3, #5
 80026e8:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80026ec:	f107 0108 	add.w	r1, r7, #8
 80026f0:	440b      	add	r3, r1
 80026f2:	3bd0      	subs	r3, #208	@ 0xd0
 80026f4:	461c      	mov	r4, r3
 80026f6:	4615      	mov	r5, r2
 80026f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 8002704:	2301      	movs	r3, #1
 8002706:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800270a:	e024      	b.n	8002756 <masked_theta+0xca>
            masked_xor(&C[x], &C[x], &state[x][y]);
 800270c:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8002710:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	18d0      	adds	r0, r2, r3
 8002718:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800271c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002720:	015b      	lsls	r3, r3, #5
 8002722:	18d1      	adds	r1, r2, r3
 8002724:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	015b      	lsls	r3, r3, #5
 8002730:	461a      	mov	r2, r3
 8002732:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002736:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	441a      	add	r2, r3
 800273e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002742:	015b      	lsls	r3, r3, #5
 8002744:	4413      	add	r3, r2
 8002746:	461a      	mov	r2, r3
 8002748:	f7ff fcf9 	bl	800213e <masked_xor>
        for (int y = 1; y < 5; y++) {
 800274c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002750:	3301      	adds	r3, #1
 8002752:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002756:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800275a:	2b04      	cmp	r3, #4
 800275c:	ddd6      	ble.n	800270c <masked_theta+0x80>
    for (int x = 0; x < 5; x++) {
 800275e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002762:	3301      	adds	r3, #1
 8002764:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002768:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800276c:	2b04      	cmp	r3, #4
 800276e:	ddab      	ble.n	80026c8 <masked_theta+0x3c>
    }

    // Compute the D[x] value used to mix columns with each other.
    // Rotate C[x+1] by 1 bit before XORing with C[x-1].
    // This step spreads influence between adjacent columns.
    for (int x = 0; x < 5; x++) {
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8002776:	e06f      	b.n	8002858 <masked_theta+0x1cc>
        for (int i = 0; i < MASKING_N; i++) {
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800277e:	e062      	b.n	8002846 <masked_theta+0x1ba>
            uint64_t c_plus_1 = C[(x + 1) % 5].share[i];
 8002780:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	4b6d      	ldr	r3, [pc, #436]	@ (800293c <masked_theta+0x2b0>)
 8002788:	fb83 2301 	smull	r2, r3, r3, r1
 800278c:	105a      	asrs	r2, r3, #1
 800278e:	17cb      	asrs	r3, r1, #31
 8002790:	1ad2      	subs	r2, r2, r3
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	1aca      	subs	r2, r1, r3
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80027a0:	4413      	add	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80027a8:	f107 0208 	add.w	r2, r7, #8
 80027ac:	4413      	add	r3, r2
 80027ae:	3bd0      	subs	r3, #208	@ 0xd0
 80027b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b4:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
            uint64_t rot = (c_plus_1 << 1) | (c_plus_1 >> 63);
 80027b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80027bc:	0fda      	lsrs	r2, r3, #31
 80027be:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4313      	orrs	r3, r2
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80027cc:	0fda      	lsrs	r2, r3, #31
 80027ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4313      	orrs	r3, r2
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80027dc:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
            D[x].share[i] = C[(x + 4) % 5].share[i] ^ rot;
 80027e0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80027e4:	1d19      	adds	r1, r3, #4
 80027e6:	4b55      	ldr	r3, [pc, #340]	@ (800293c <masked_theta+0x2b0>)
 80027e8:	fb83 2301 	smull	r2, r3, r3, r1
 80027ec:	105a      	asrs	r2, r3, #1
 80027ee:	17cb      	asrs	r3, r1, #31
 80027f0:	1ad2      	subs	r2, r2, r3
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	1aca      	subs	r2, r1, r3
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002808:	f107 0208 	add.w	r2, r7, #8
 800280c:	4413      	add	r3, r2
 800280e:	3bd0      	subs	r3, #208	@ 0xd0
 8002810:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002814:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002818:	ea80 0a02 	eor.w	sl, r0, r2
 800281c:	ea81 0b03 	eor.w	fp, r1, r3
 8002820:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002824:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8002828:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800282c:	0099      	lsls	r1, r3, #2
 800282e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002832:	440b      	add	r3, r1
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4413      	add	r3, r2
 8002838:	e9c3 ab00 	strd	sl, fp, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 800283c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002840:	3301      	adds	r3, #1
 8002842:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8002846:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800284a:	2b03      	cmp	r3, #3
 800284c:	dd98      	ble.n	8002780 <masked_theta+0xf4>
    for (int x = 0; x < 5; x++) {
 800284e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8002852:	3301      	adds	r3, #1
 8002854:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8002858:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800285c:	2b04      	cmp	r3, #4
 800285e:	dd8b      	ble.n	8002778 <masked_theta+0xec>
        }
    }

    // Apply D[x] to every lane in each column to complete the mixing.
    for (int x = 0; x < 5; x++) {
 8002860:	2300      	movs	r3, #0
 8002862:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002866:	e05e      	b.n	8002926 <masked_theta+0x29a>
        for (int y = 0; y < 5; y++) {
 8002868:	2300      	movs	r3, #0
 800286a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800286e:	e051      	b.n	8002914 <masked_theta+0x288>
            for (int i = 0; i < MASKING_N; i++) {
 8002870:	2300      	movs	r3, #0
 8002872:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002876:	e044      	b.n	8002902 <masked_theta+0x276>
                state[x][y].share[i] ^= D[x].share[i];
 8002878:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	015b      	lsls	r3, r3, #5
 8002884:	461a      	mov	r2, r3
 8002886:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800288a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	441a      	add	r2, r3
 8002892:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002896:	0099      	lsls	r1, r3, #2
 8002898:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800289c:	440b      	add	r3, r1
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	4413      	add	r3, r2
 80028a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80028a6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80028aa:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 80028ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80028b2:	0099      	lsls	r1, r3, #2
 80028b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80028b8:	440b      	add	r3, r1
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028c2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	015b      	lsls	r3, r3, #5
 80028ce:	461a      	mov	r2, r3
 80028d0:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80028d4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	441a      	add	r2, r3
 80028dc:	ea84 0800 	eor.w	r8, r4, r0
 80028e0:	ea85 0901 	eor.w	r9, r5, r1
 80028e4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80028e8:	0099      	lsls	r1, r3, #2
 80028ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80028ee:	440b      	add	r3, r1
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 80028f8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80028fc:	3301      	adds	r3, #1
 80028fe:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002902:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002906:	2b03      	cmp	r3, #3
 8002908:	ddb6      	ble.n	8002878 <masked_theta+0x1ec>
        for (int y = 0; y < 5; y++) {
 800290a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800290e:	3301      	adds	r3, #1
 8002910:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8002914:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002918:	2b04      	cmp	r3, #4
 800291a:	dda9      	ble.n	8002870 <masked_theta+0x1e4>
    for (int x = 0; x < 5; x++) {
 800291c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002920:	3301      	adds	r3, #1
 8002922:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002926:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800292a:	2b04      	cmp	r3, #4
 800292c:	dd9c      	ble.n	8002868 <masked_theta+0x1dc>
            }
        }
    }
}
 800292e:	bf00      	nop
 8002930:	bf00      	nop
 8002932:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8002936:	46bd      	mov	sp, r7
 8002938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293c:	66666667 	.word	0x66666667

08002940 <masked_rho>:

void masked_rho(masked_uint64_t state[5][5]) {
 8002940:	b590      	push	{r4, r7, lr}
 8002942:	b089      	sub	sp, #36	@ 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
    // Rho rotates each lane by a constant offset to scatter bits.
    // It’s important the same rotation is applied to every share
    // so the XOR mask relationship stays valid.
    for (int x = 0; x < 5; x++) {
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	e048      	b.n	80029e0 <masked_rho+0xa0>
        for (int y = 0; y < 5; y++) {
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	e03f      	b.n	80029d4 <masked_rho+0x94>
            uint8_t r = keccak_rho_offsets[x][y];
 8002954:	4926      	ldr	r1, [pc, #152]	@ (80029f0 <masked_rho+0xb0>)
 8002956:	69fa      	ldr	r2, [r7, #28]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	18ca      	adds	r2, r1, r3
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	74fb      	strb	r3, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	e02c      	b.n	80029c8 <masked_rho+0x88>
                uint64_t value = state[x][y].share[i];
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	015b      	lsls	r3, r3, #5
 8002978:	461a      	mov	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	441a      	add	r2, r3
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	0099      	lsls	r1, r3, #2
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	440b      	add	r3, r1
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	4413      	add	r3, r2
 800298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298e:	e9c7 2302 	strd	r2, r3, [r7, #8]
                state[x][y].share[i] = rol64(value, r);
 8002992:	7cf9      	ldrb	r1, [r7, #19]
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	015b      	lsls	r3, r3, #5
 800299e:	461a      	mov	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	189c      	adds	r4, r3, r2
 80029a4:	460a      	mov	r2, r1
 80029a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029aa:	f7ff fd43 	bl	8002434 <rol64>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	0088      	lsls	r0, r1, #2
 80029b6:	6979      	ldr	r1, [r7, #20]
 80029b8:	4401      	add	r1, r0
 80029ba:	00c9      	lsls	r1, r1, #3
 80029bc:	4421      	add	r1, r4
 80029be:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	ddcf      	ble.n	800296e <masked_rho+0x2e>
        for (int y = 0; y < 5; y++) {
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3301      	adds	r3, #1
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	ddbc      	ble.n	8002954 <masked_rho+0x14>
    for (int x = 0; x < 5; x++) {
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3301      	adds	r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	ddb3      	ble.n	800294e <masked_rho+0xe>
            }
        }
    }
}
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
 80029ea:	3724      	adds	r7, #36	@ 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd90      	pop	{r4, r7, pc}
 80029f0:	0800d338 	.word	0x0800d338

080029f4 <masked_pi>:


void masked_pi(masked_uint64_t state[5][5]) {
 80029f4:	b4b0      	push	{r4, r5, r7}
 80029f6:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002a00:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002a04:	6018      	str	r0, [r3, #0]
    masked_uint64_t tmp[5][5];

    // Copy the full masked state first to keep original positions.
    for (int x = 0; x < 5; ++x)
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002a0c:	e038      	b.n	8002a80 <masked_pi+0x8c>
        for (int y = 0; y < 5; ++y)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8002a14:	e02b      	b.n	8002a6e <masked_pi+0x7a>
            tmp[x][y] = state[x][y];
 8002a16:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	015b      	lsls	r3, r3, #5
 8002a22:	461a      	mov	r2, r3
 8002a24:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002a28:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	1899      	adds	r1, r3, r2
 8002a30:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002a34:	f5a3 704e 	sub.w	r0, r3, #824	@ 0x338
 8002a38:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8002a46:	4413      	add	r3, r2
 8002a48:	015b      	lsls	r3, r3, #5
 8002a4a:	18c2      	adds	r2, r0, r3
 8002a4c:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002a50:	015b      	lsls	r3, r3, #5
 8002a52:	440b      	add	r3, r1
 8002a54:	4614      	mov	r4, r2
 8002a56:	461d      	mov	r5, r3
 8002a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y)
 8002a64:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002a68:	3301      	adds	r3, #1
 8002a6a:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8002a6e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	ddcf      	ble.n	8002a16 <masked_pi+0x22>
    for (int x = 0; x < 5; ++x)
 8002a76:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002a80:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	ddc2      	ble.n	8002a0e <masked_pi+0x1a>

    // Pi permutes the positions of lanes across the 5x5 grid.
    // All shares must move together with their corresponding lane
    // to keep the mask relationships correct.
    for (int x = 0; x < 5; ++x)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002a8e:	e051      	b.n	8002b34 <masked_pi+0x140>
        for (int y = 0; y < 5; ++y) {
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8002a96:	e044      	b.n	8002b22 <masked_pi+0x12e>
            int new_x = y;
 8002a98:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8002a9c:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
            int new_y = (2 * x + 3 * y) % 5;
 8002aa0:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002aa4:	0059      	lsls	r1, r3, #1
 8002aa6:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8002aaa:	4613      	mov	r3, r2
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4413      	add	r3, r2
 8002ab0:	18ca      	adds	r2, r1, r3
 8002ab2:	4b26      	ldr	r3, [pc, #152]	@ (8002b4c <masked_pi+0x158>)
 8002ab4:	fb83 1302 	smull	r1, r3, r3, r2
 8002ab8:	1059      	asrs	r1, r3, #1
 8002aba:	17d3      	asrs	r3, r2, #31
 8002abc:	1ac9      	subs	r1, r1, r3
 8002abe:	460b      	mov	r3, r1
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
            state[new_x][new_y] = tmp[x][y];
 8002aca:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	015b      	lsls	r3, r3, #5
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002adc:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	441a      	add	r2, r3
 8002ae4:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8002ae8:	015b      	lsls	r3, r3, #5
 8002aea:	18d0      	adds	r0, r2, r3
 8002aec:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002af0:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8002af4:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8002af8:	4613      	mov	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4413      	add	r3, r2
 8002afe:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8002b02:	4413      	add	r3, r2
 8002b04:	015b      	lsls	r3, r3, #5
 8002b06:	440b      	add	r3, r1
 8002b08:	4604      	mov	r4, r0
 8002b0a:	461d      	mov	r5, r3
 8002b0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y) {
 8002b18:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8002b22:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	ddb6      	ble.n	8002a98 <masked_pi+0xa4>
    for (int x = 0; x < 5; ++x)
 8002b2a:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002b34:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	dda9      	ble.n	8002a90 <masked_pi+0x9c>
        }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	f507 7751 	add.w	r7, r7, #836	@ 0x344
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bcb0      	pop	{r4, r5, r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	66666667 	.word	0x66666667

08002b50 <masked_chi>:


void masked_chi(masked_uint64_t out[5][5],
                const masked_uint64_t in[5][5],
                const uint64_t r[5][5][MASKING_N][MASKING_N]) {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b09a      	sub	sp, #104	@ 0x68
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
    // Chi mixes bits in each row using a non-linear expression.
    // Since AND is not linear, it’s where leakage can happen — hence the use of
    // fresh randomness and secure masked AND gadgets.

    for (int y = 0; y < 5; y++) {
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b60:	e070      	b.n	8002c44 <masked_chi+0xf4>
        for (int x = 0; x < 5; x++) {
 8002b62:	2300      	movs	r3, #0
 8002b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b66:	e067      	b.n	8002c38 <masked_chi+0xe8>
            const masked_uint64_t *a = &in[x][y];
 8002b68:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	015b      	lsls	r3, r3, #5
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	441a      	add	r2, r3
 8002b78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	4413      	add	r3, r2
 8002b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            const masked_uint64_t *b = &in[(x + 1) % 5][y];
 8002b80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b82:	1c5a      	adds	r2, r3, #1
 8002b84:	4b33      	ldr	r3, [pc, #204]	@ (8002c54 <masked_chi+0x104>)
 8002b86:	fb83 1302 	smull	r1, r3, r3, r2
 8002b8a:	1059      	asrs	r1, r3, #1
 8002b8c:	17d3      	asrs	r3, r2, #31
 8002b8e:	1ac9      	subs	r1, r1, r3
 8002b90:	460b      	mov	r3, r1
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	1ad1      	subs	r1, r2, r3
 8002b98:	460a      	mov	r2, r1
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	015b      	lsls	r3, r3, #5
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	441a      	add	r2, r3
 8002ba8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002baa:	015b      	lsls	r3, r3, #5
 8002bac:	4413      	add	r3, r2
 8002bae:	65bb      	str	r3, [r7, #88]	@ 0x58
            const masked_uint64_t *c = &in[(x + 2) % 5][y];
 8002bb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bb2:	1c9a      	adds	r2, r3, #2
 8002bb4:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <masked_chi+0x104>)
 8002bb6:	fb83 1302 	smull	r1, r3, r3, r2
 8002bba:	1059      	asrs	r1, r3, #1
 8002bbc:	17d3      	asrs	r3, r2, #31
 8002bbe:	1ac9      	subs	r1, r1, r3
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	1ad1      	subs	r1, r2, r3
 8002bc8:	460a      	mov	r2, r1
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	015b      	lsls	r3, r3, #5
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	441a      	add	r2, r3
 8002bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bda:	015b      	lsls	r3, r3, #5
 8002bdc:	4413      	add	r3, r2
 8002bde:	657b      	str	r3, [r7, #84]	@ 0x54
            masked_uint64_t t1, t2;

            masked_not(&t1, b);
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fb81 	bl	80022ee <masked_not>
            masked_and(&t2, &t1, c, r[x][y]);
 8002bec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	01db      	lsls	r3, r3, #7
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bfe:	01db      	lsls	r3, r3, #7
 8002c00:	4413      	add	r3, r2
 8002c02:	f107 0110 	add.w	r1, r7, #16
 8002c06:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002c0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c0c:	f7ff fac2 	bl	8002194 <masked_and>
            masked_xor(&out[x][y], a, &t2);
 8002c10:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	015b      	lsls	r3, r3, #5
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	441a      	add	r2, r3
 8002c20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c22:	015b      	lsls	r3, r3, #5
 8002c24:	4413      	add	r3, r2
 8002c26:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002c2a:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fa86 	bl	800213e <masked_xor>
        for (int x = 0; x < 5; x++) {
 8002c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c34:	3301      	adds	r3, #1
 8002c36:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	dd94      	ble.n	8002b68 <masked_chi+0x18>
    for (int y = 0; y < 5; y++) {
 8002c3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c40:	3301      	adds	r3, #1
 8002c42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	dd8b      	ble.n	8002b62 <masked_chi+0x12>
        }
    }
}
 8002c4a:	bf00      	nop
 8002c4c:	bf00      	nop
 8002c4e:	3768      	adds	r7, #104	@ 0x68
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	66666667 	.word	0x66666667

08002c58 <masked_iota>:



void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 8002c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c5c:	b08c      	sub	sp, #48	@ 0x30
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	e9c7 2300 	strd	r2, r3, [r7]
    // Iota introduces asymmetry by injecting a round constant into lane (0,0).
    // This breaks symmetry and helps distinguish rounds.
    // Because we’re masking, we must re-mask the lane after applying the constant.

    // Step 1: Recombine to get the true value of the lane.
    uint64_t value = 0;
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c76:	e010      	b.n	8002c9a <masked_iota+0x42>
        value ^= state[0][0].share[i];
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4413      	add	r3, r2
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c88:	ea80 0a02 	eor.w	sl, r0, r2
 8002c8c:	ea81 0b03 	eor.w	fp, r1, r3
 8002c90:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	3301      	adds	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	ddeb      	ble.n	8002c78 <masked_iota+0x20>

    // Step 2: XOR in the round constant.
    value ^= rc;
 8002ca0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002ca4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ca8:	ea80 0802 	eor.w	r8, r0, r2
 8002cac:	ea81 0903 	eor.w	r9, r1, r3
 8002cb0:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28

    // Step 3: Randomly re-mask it.
    uint64_t acc = value;
 8002cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cb8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	617b      	str	r3, [r7, #20]
 8002cc0:	e01a      	b.n	8002cf8 <masked_iota+0xa0>
        state[0][0].share[i] = get_random64();
 8002cc2:	f7ff fb8d 	bl	80023e0 <get_random64>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	6979      	ldr	r1, [r7, #20]
 8002cce:	00c9      	lsls	r1, r1, #3
 8002cd0:	4401      	add	r1, r0
 8002cd2:	e9c1 2300 	strd	r2, r3, [r1]
        acc ^= state[0][0].share[i];
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4413      	add	r3, r2
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ce6:	ea80 0402 	eor.w	r4, r0, r2
 8002cea:	ea81 0503 	eor.w	r5, r1, r3
 8002cee:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	617b      	str	r3, [r7, #20]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	dde1      	ble.n	8002cc2 <masked_iota+0x6a>
    }
    state[0][0].share[0] = acc;
 8002cfe:	68f9      	ldr	r1, [r7, #12]
 8002d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d04:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002d08:	bf00      	nop
 8002d0a:	3730      	adds	r7, #48	@ 0x30
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d12 <masked_keccak_round>:
            printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
        }
    }
}

void masked_keccak_round(masked_uint64_t S[5][5], uint64_t rc) {
 8002d12:	b5b0      	push	{r4, r5, r7, lr}
 8002d14:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	f507 617c 	add.w	r1, r7, #4032	@ 0xfc0
 8002d1e:	f6a1 71b4 	subw	r1, r1, #4020	@ 0xfb4
 8002d22:	6008      	str	r0, [r1, #0]
 8002d24:	4639      	mov	r1, r7
 8002d26:	e9c1 2300 	strd	r2, r3, [r1]

    // Theta mixes each column’s bits into its neighbors to spread information.
    // For masking, we need to preserve XOR relationships between shares here.
    masked_theta(S);
 8002d2a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002d2e:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	f7ff fcaa 	bl	800268c <masked_theta>

    // Rho rotates each lane by a fixed offset.
    // Since we’re masking, we have to apply the same rotation to every share.
    masked_rho(S);
 8002d38:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002d3c:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	f7ff fdfd 	bl	8002940 <masked_rho>

    // Pi moves lanes around — it's a shuffle of the 5×5 grid.
    // All shares for each lane must move together to keep masking valid.
    masked_pi(S);
 8002d46:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002d4a:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	f7ff fe50 	bl	80029f4 <masked_pi>

    // Chi is non-linear, and this is where leakage can happen — we need fresh randomness.
    // One matrix of random values per lane to feed into masked ANDs.
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 8002d5a:	e020      	b.n	8002d9e <masked_keccak_round+0x8c>
        for (int x = 0; x < 5; ++x)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 8002d62:	e013      	b.n	8002d8c <masked_keccak_round+0x7a>
            fill_random_matrix(r_chi[x][y]);
 8002d64:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 8002d68:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	@ 0xfb8
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	f8d7 2fbc 	ldr.w	r2, [r7, #4028]	@ 0xfbc
 8002d76:	4413      	add	r3, r2
 8002d78:	01db      	lsls	r3, r3, #7
 8002d7a:	440b      	add	r3, r1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff f997 	bl	80020b0 <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 8002d82:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 8002d86:	3301      	adds	r3, #1
 8002d88:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 8002d8c:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 8002d90:	2b04      	cmp	r3, #4
 8002d92:	dde7      	ble.n	8002d64 <masked_keccak_round+0x52>
    for (int y = 0; y < 5; ++y)
 8002d94:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8002d98:	3301      	adds	r3, #1
 8002d9a:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 8002d9e:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	ddda      	ble.n	8002d5c <masked_keccak_round+0x4a>
    // We build a new state instead of modifying in place — safer and avoids weird bugs.
    masked_uint64_t chi_out[5][5];

    // Chi mixes rows using NOT and AND.
    // Because we’re masking, this step is the trickiest and needs careful randomness.
    masked_chi(chi_out, S, r_chi);
 8002da6:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8002daa:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002dae:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002db2:	f107 0010 	add.w	r0, r7, #16
 8002db6:	6819      	ldr	r1, [r3, #0]
 8002db8:	f7ff feca 	bl	8002b50 <masked_chi>

    // Iota adds in the round constant — this breaks symmetry and keeps things unpredictable.
    // Only touch share[0] to avoid messing up the masking.
    masked_iota(chi_out, rc);
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	f107 0110 	add.w	r1, r7, #16
 8002dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc6:	4608      	mov	r0, r1
 8002dc8:	f7ff ff46 	bl	8002c58 <masked_iota>

    // Move the updated state back into S so it's ready for the next round.
    for (int y = 0; y < 5; ++y)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8002dd2:	e038      	b.n	8002e46 <masked_keccak_round+0x134>
        for (int x = 0; x < 5; ++x)
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 8002dda:	e02b      	b.n	8002e34 <masked_keccak_round+0x122>
            S[x][y] = chi_out[x][y];
 8002ddc:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	015b      	lsls	r3, r3, #5
 8002de8:	461a      	mov	r2, r3
 8002dea:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002dee:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	441a      	add	r2, r3
 8002df6:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8002dfa:	015b      	lsls	r3, r3, #5
 8002dfc:	18d0      	adds	r0, r2, r3
 8002dfe:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002e02:	f5a3 617b 	sub.w	r1, r3, #4016	@ 0xfb0
 8002e06:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	@ 0xfb4
 8002e14:	4413      	add	r3, r2
 8002e16:	015b      	lsls	r3, r3, #5
 8002e18:	440b      	add	r3, r1
 8002e1a:	4604      	mov	r4, r0
 8002e1c:	461d      	mov	r5, r3
 8002e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int x = 0; x < 5; ++x)
 8002e2a:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 8002e34:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	ddcf      	ble.n	8002ddc <masked_keccak_round+0xca>
    for (int y = 0; y < 5; ++y)
 8002e3c:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8002e40:	3301      	adds	r3, #1
 8002e42:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8002e46:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	ddc2      	ble.n	8002dd4 <masked_keccak_round+0xc2>
}
 8002e4e:	bf00      	nop
 8002e50:	bf00      	nop
 8002e52:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002e5c <masked_keccak_f1600>:
 * Applies all 24 rounds of the Keccak permutation to the given masked state.
 * Each round applies the full sequence: Theta, Rho, Pi, Chi, Iota.
 *
 * state is the 5×5 masked Keccak state.
 */
void masked_keccak_f1600(masked_uint64_t state[5][5]) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++) {
 8002e64:	2300      	movs	r3, #0
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e00b      	b.n	8002e82 <masked_keccak_f1600+0x26>
        masked_keccak_round(state, RC[i]);
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <masked_keccak_f1600+0x38>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7ff ff4b 	bl	8002d12 <masked_keccak_round>
    for (int i = 0; i < 24; i++) {
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b17      	cmp	r3, #23
 8002e86:	ddf0      	ble.n	8002e6a <masked_keccak_f1600+0xe>
    }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	0800d278 	.word	0x0800d278

08002e98 <masked_keccak_sponge>:
#include "params.h"

// === Public API Implementations ===
void masked_keccak_sponge(uint8_t *output, size_t output_len,
                          const uint8_t *input, size_t input_len,
                          size_t rate, uint8_t domain_sep) {
 8002e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9c:	f5ad 7d73 	sub.w	sp, sp, #972	@ 0x3cc
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	f507 7472 	add.w	r4, r7, #968	@ 0x3c8
 8002ea6:	f5a4 7465 	sub.w	r4, r4, #916	@ 0x394
 8002eaa:	6020      	str	r0, [r4, #0]
 8002eac:	f507 7072 	add.w	r0, r7, #968	@ 0x3c8
 8002eb0:	f5a0 7066 	sub.w	r0, r0, #920	@ 0x398
 8002eb4:	6001      	str	r1, [r0, #0]
 8002eb6:	f507 7172 	add.w	r1, r7, #968	@ 0x3c8
 8002eba:	f5a1 7167 	sub.w	r1, r1, #924	@ 0x39c
 8002ebe:	600a      	str	r2, [r1, #0]
 8002ec0:	f507 7272 	add.w	r2, r7, #968	@ 0x3c8
 8002ec4:	f5a2 7268 	sub.w	r2, r2, #928	@ 0x3a0
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	466b      	mov	r3, sp
 8002ecc:	461c      	mov	r4, r3
    masked_uint64_t state[5][5];

    //Step 1: Initialize state
    for (int x = 0; x < 5; x++) {
 8002ece:	2300      	movs	r3, #0
 8002ed0:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8002ed4:	e036      	b.n	8002f44 <masked_keccak_sponge+0xac>
        for (int y = 0; y < 5; y++) {
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8002edc:	e029      	b.n	8002f32 <masked_keccak_sponge+0x9a>
            for (int i = 0; i < MASKING_N; i++) {
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8002ee4:	e01c      	b.n	8002f20 <masked_keccak_sponge+0x88>
                state[x][y].share[i] = 0;
 8002ee6:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8002eea:	f5a3 715c 	sub.w	r1, r3, #880	@ 0x370
 8002eee:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	0092      	lsls	r2, r2, #2
 8002ef6:	441a      	add	r2, r3
 8002ef8:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8002efc:	4413      	add	r3, r2
 8002efe:	009a      	lsls	r2, r3, #2
 8002f00:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4419      	add	r1, r3
 8002f0a:	f04f 0200 	mov.w	r2, #0
 8002f0e:	f04f 0300 	mov.w	r3, #0
 8002f12:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8002f16:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8002f20:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	ddde      	ble.n	8002ee6 <masked_keccak_sponge+0x4e>
        for (int y = 0; y < 5; y++) {
 8002f28:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8002f32:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	ddd1      	ble.n	8002ede <masked_keccak_sponge+0x46>
    for (int x = 0; x < 5; x++) {
 8002f3a:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8002f44:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	ddc4      	ble.n	8002ed6 <masked_keccak_sponge+0x3e>
            }
        }
    }

    //Step 2: Absorb full input blocks
    size_t offset = 0;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
    while (input_len >= rate) {
 8002f52:	e0b2      	b.n	80030ba <masked_keccak_sponge+0x222>
        for (int i = 0; i < rate; i += 8) {
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8002f5a:	e08e      	b.n	800307a <masked_keccak_sponge+0x1e2>
            uint64_t lane = 0;
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9c7 23ea 	strd	r2, r3, [r7, #936]	@ 0x3a8
            for (int j = 0; j < 8; j++) {
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8002f6e:	e03a      	b.n	8002fe6 <masked_keccak_sponge+0x14e>
                lane |= ((uint64_t)input[offset + i + j]) << (8 * j);
 8002f70:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8002f74:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8002f78:	441a      	add	r2, r3
 8002f7a:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8002f7e:	441a      	add	r2, r3
 8002f80:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8002f84:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2200      	movs	r2, #0
 8002f92:	623b      	str	r3, [r7, #32]
 8002f94:	627a      	str	r2, [r7, #36]	@ 0x24
 8002f96:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8002f9a:	00d9      	lsls	r1, r3, #3
 8002f9c:	f1a1 0320 	sub.w	r3, r1, #32
 8002fa0:	f1c1 0220 	rsb	r2, r1, #32
 8002fa4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002fa6:	fa00 fb01 	lsl.w	fp, r0, r1
 8002faa:	6a38      	ldr	r0, [r7, #32]
 8002fac:	fa00 f303 	lsl.w	r3, r0, r3
 8002fb0:	ea4b 0b03 	orr.w	fp, fp, r3
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	fa23 f202 	lsr.w	r2, r3, r2
 8002fba:	ea4b 0b02 	orr.w	fp, fp, r2
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	fa03 fa01 	lsl.w	sl, r3, r1
 8002fc4:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8002fc8:	ea42 010a 	orr.w	r1, r2, sl
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	ea43 030b 	orr.w	r3, r3, fp
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fd8:	e9c7 23ea 	strd	r2, r3, [r7, #936]	@ 0x3a8
            for (int j = 0; j < 8; j++) {
 8002fdc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8002fe6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8002fea:	2b07      	cmp	r3, #7
 8002fec:	ddc0      	ble.n	8002f70 <masked_keccak_sponge+0xd8>
            }

            size_t x = (i / 8) % 5;
 8002fee:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	da00      	bge.n	8002ff8 <masked_keccak_sponge+0x160>
 8002ff6:	3307      	adds	r3, #7
 8002ff8:	10db      	asrs	r3, r3, #3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4bc5      	ldr	r3, [pc, #788]	@ (8003314 <masked_keccak_sponge+0x47c>)
 8002ffe:	fb83 2301 	smull	r2, r3, r3, r1
 8003002:	105a      	asrs	r2, r3, #1
 8003004:	17cb      	asrs	r3, r1, #31
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	461a      	mov	r2, r3
 800300a:	0092      	lsls	r2, r2, #2
 800300c:	441a      	add	r2, r3
 800300e:	1a8b      	subs	r3, r1, r2
 8003010:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
            size_t y = (i / 8) / 5;
 8003014:	f8d7 13b4 	ldr.w	r1, [r7, #948]	@ 0x3b4
 8003018:	4bbe      	ldr	r3, [pc, #760]	@ (8003314 <masked_keccak_sponge+0x47c>)
 800301a:	fb83 2301 	smull	r2, r3, r3, r1
 800301e:	111a      	asrs	r2, r3, #4
 8003020:	17cb      	asrs	r3, r1, #31
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c

            masked_uint64_t masked_lane;
            masked_value_set(&masked_lane, lane);
 8003028:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800302c:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8003030:	4608      	mov	r0, r1
 8003032:	f7ff fa3f 	bl	80024b4 <masked_value_set>
            masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8003036:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800303a:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 800303e:	461a      	mov	r2, r3
 8003040:	0092      	lsls	r2, r2, #2
 8003042:	441a      	add	r2, r3
 8003044:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8003048:	4413      	add	r3, r2
 800304a:	015b      	lsls	r3, r3, #5
 800304c:	18c8      	adds	r0, r1, r3
 800304e:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8003052:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8003056:	461a      	mov	r2, r3
 8003058:	0092      	lsls	r2, r2, #2
 800305a:	441a      	add	r2, r3
 800305c:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8003060:	4413      	add	r3, r2
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	4419      	add	r1, r3
 8003066:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800306a:	461a      	mov	r2, r3
 800306c:	f7ff f867 	bl	800213e <masked_xor>
        for (int i = 0; i < rate; i += 8) {
 8003070:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8003074:	3308      	adds	r3, #8
 8003076:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 800307a:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 800307e:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 8003082:	4293      	cmp	r3, r2
 8003084:	f63f af6a 	bhi.w	8002f5c <masked_keccak_sponge+0xc4>
        }

        masked_keccak_f1600(state);
 8003088:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800308c:	4618      	mov	r0, r3
 800308e:	f7ff fee5 	bl	8002e5c <masked_keccak_f1600>
        offset += rate;
 8003092:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8003096:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 800309a:	4413      	add	r3, r2
 800309c:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
        input_len -= rate;
 80030a0:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80030a4:	f5a3 7168 	sub.w	r1, r3, #928	@ 0x3a0
 80030a8:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80030ac:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	600b      	str	r3, [r1, #0]
    while (input_len >= rate) {
 80030ba:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80030be:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80030c8:	429a      	cmp	r2, r3
 80030ca:	f4bf af43 	bcs.w	8002f54 <masked_keccak_sponge+0xbc>
    }

    //Step 3: Final padded block with domain separation
    uint8_t block[rate];
 80030ce:	f8d7 13f0 	ldr.w	r1, [r7, #1008]	@ 0x3f0
 80030d2:	460b      	mov	r3, r1
 80030d4:	3b01      	subs	r3, #1
 80030d6:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 80030da:	2300      	movs	r3, #0
 80030dc:	61b9      	str	r1, [r7, #24]
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80030ec:	4658      	mov	r0, fp
 80030ee:	00c3      	lsls	r3, r0, #3
 80030f0:	4650      	mov	r0, sl
 80030f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030f6:	4650      	mov	r0, sl
 80030f8:	00c2      	lsls	r2, r0, #3
 80030fa:	2300      	movs	r3, #0
 80030fc:	6139      	str	r1, [r7, #16]
 80030fe:	617b      	str	r3, [r7, #20]
 8003100:	f04f 0200 	mov.w	r2, #0
 8003104:	f04f 0300 	mov.w	r3, #0
 8003108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800310c:	4658      	mov	r0, fp
 800310e:	00c3      	lsls	r3, r0, #3
 8003110:	4650      	mov	r0, sl
 8003112:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003116:	4650      	mov	r0, sl
 8003118:	00c2      	lsls	r2, r0, #3
 800311a:	1dcb      	adds	r3, r1, #7
 800311c:	08db      	lsrs	r3, r3, #3
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	ebad 0d03 	sub.w	sp, sp, r3
 8003124:	466b      	mov	r3, sp
 8003126:	3300      	adds	r3, #0
 8003128:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    memset(block, 0, rate);
 800312c:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	@ 0x3f0
 8003130:	2100      	movs	r1, #0
 8003132:	f8d7 038c 	ldr.w	r0, [r7, #908]	@ 0x38c
 8003136:	f009 f9e1 	bl	800c4fc <memset>
    memcpy(block, input + offset, input_len);
 800313a:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800313e:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8003148:	18d1      	adds	r1, r2, r3
 800314a:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800314e:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	f8d7 038c 	ldr.w	r0, [r7, #908]	@ 0x38c
 8003158:	f009 fa5b 	bl	800c612 <memcpy>
    block[input_len] ^= domain_sep;   // Domain separation marker (e.g., 0x06 or 0x1F)
 800315c:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8003160:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8003164:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	781a      	ldrb	r2, [r3, #0]
 800316e:	f897 33f4 	ldrb.w	r3, [r7, #1012]	@ 0x3f4
 8003172:	4053      	eors	r3, r2
 8003174:	b2d9      	uxtb	r1, r3
 8003176:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800317a:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 800317e:	f5a3 7368 	sub.w	r3, r3, #928	@ 0x3a0
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4413      	add	r3, r2
 8003186:	460a      	mov	r2, r1
 8003188:	701a      	strb	r2, [r3, #0]
    block[rate - 1] ^= 0x80;          // Padding rule per Keccak spec
 800318a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 800318e:	3b01      	subs	r3, #1
 8003190:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8003194:	5cd3      	ldrb	r3, [r2, r3]
 8003196:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	@ 0x3f0
 800319a:	3a01      	subs	r2, #1
 800319c:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80031a0:	43db      	mvns	r3, r3
 80031a2:	b2d9      	uxtb	r1, r3
 80031a4:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 80031a8:	5499      	strb	r1, [r3, r2]

    for (int i = 0; i < rate; i += 8) {
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 80031b0:	e08d      	b.n	80032ce <masked_keccak_sponge+0x436>
        uint64_t lane = 0;
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9c7 23e6 	strd	r2, r3, [r7, #920]	@ 0x398
        for (int j = 0; j < 8 && (i + j) < rate; j++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80031c4:	e02f      	b.n	8003226 <masked_keccak_sponge+0x38e>
            lane |= ((uint64_t)block[i + j]) << (8 * j);
 80031c6:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80031ca:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80031ce:	4413      	add	r3, r2
 80031d0:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80031d4:	5cd3      	ldrb	r3, [r2, r3]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	461d      	mov	r5, r3
 80031dc:	4616      	mov	r6, r2
 80031de:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	f1a3 0120 	sub.w	r1, r3, #32
 80031e8:	f1c3 0220 	rsb	r2, r3, #32
 80031ec:	fa06 f903 	lsl.w	r9, r6, r3
 80031f0:	fa05 f101 	lsl.w	r1, r5, r1
 80031f4:	ea49 0901 	orr.w	r9, r9, r1
 80031f8:	fa25 f202 	lsr.w	r2, r5, r2
 80031fc:	ea49 0902 	orr.w	r9, r9, r2
 8003200:	fa05 f803 	lsl.w	r8, r5, r3
 8003204:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 8003208:	ea42 0108 	orr.w	r1, r2, r8
 800320c:	6039      	str	r1, [r7, #0]
 800320e:	ea43 0309 	orr.w	r3, r3, r9
 8003212:	607b      	str	r3, [r7, #4]
 8003214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003218:	e9c7 23e6 	strd	r2, r3, [r7, #920]	@ 0x398
        for (int j = 0; j < 8 && (i + j) < rate; j++) {
 800321c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8003220:	3301      	adds	r3, #1
 8003222:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8003226:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800322a:	2b07      	cmp	r3, #7
 800322c:	dc09      	bgt.n	8003242 <masked_keccak_sponge+0x3aa>
 800322e:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8003232:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8003236:	4413      	add	r3, r2
 8003238:	461a      	mov	r2, r3
 800323a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 800323e:	4293      	cmp	r3, r2
 8003240:	d8c1      	bhi.n	80031c6 <masked_keccak_sponge+0x32e>
        }

        size_t x = (i / 8) % 5;
 8003242:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8003246:	2b00      	cmp	r3, #0
 8003248:	da00      	bge.n	800324c <masked_keccak_sponge+0x3b4>
 800324a:	3307      	adds	r3, #7
 800324c:	10db      	asrs	r3, r3, #3
 800324e:	4619      	mov	r1, r3
 8003250:	4b30      	ldr	r3, [pc, #192]	@ (8003314 <masked_keccak_sponge+0x47c>)
 8003252:	fb83 2301 	smull	r2, r3, r3, r1
 8003256:	105a      	asrs	r2, r3, #1
 8003258:	17cb      	asrs	r3, r1, #31
 800325a:	1ad2      	subs	r2, r2, r3
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	1aca      	subs	r2, r1, r3
 8003264:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
        size_t y = (i / 8) / 5;
 8003268:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800326c:	4a29      	ldr	r2, [pc, #164]	@ (8003314 <masked_keccak_sponge+0x47c>)
 800326e:	fb82 1203 	smull	r1, r2, r2, r3
 8003272:	1112      	asrs	r2, r2, #4
 8003274:	17db      	asrs	r3, r3, #31
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384

        masked_uint64_t masked_lane;
        masked_value_set(&masked_lane, lane);
 800327c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8003280:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 8003284:	4608      	mov	r0, r1
 8003286:	f7ff f915 	bl	80024b4 <masked_value_set>
        masked_xor(&state[x][y], &state[x][y], &masked_lane);
 800328a:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800328e:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 800329c:	4413      	add	r3, r2
 800329e:	015b      	lsls	r3, r3, #5
 80032a0:	18c8      	adds	r0, r1, r3
 80032a2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80032a6:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 80032b4:	4413      	add	r3, r2
 80032b6:	015b      	lsls	r3, r3, #5
 80032b8:	440b      	add	r3, r1
 80032ba:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80032be:	4619      	mov	r1, r3
 80032c0:	f7fe ff3d 	bl	800213e <masked_xor>
    for (int i = 0; i < rate; i += 8) {
 80032c4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80032c8:	3308      	adds	r3, #8
 80032ca:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 80032ce:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80032d2:	f8d7 23f0 	ldr.w	r2, [r7, #1008]	@ 0x3f0
 80032d6:	429a      	cmp	r2, r3
 80032d8:	f63f af6b 	bhi.w	80031b2 <masked_keccak_sponge+0x31a>
    }

    masked_keccak_f1600(state);
 80032dc:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fdbb 	bl	8002e5c <masked_keccak_f1600>

    //Step 4: Squeeze the requested output
    masked_squeeze(output, output_len, state, rate);
 80032e6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80032ea:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80032ee:	f5a3 7166 	sub.w	r1, r3, #920	@ 0x398
 80032f2:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 80032f6:	f5a3 7065 	sub.w	r0, r3, #916	@ 0x394
 80032fa:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	@ 0x3f0
 80032fe:	6809      	ldr	r1, [r1, #0]
 8003300:	6800      	ldr	r0, [r0, #0]
 8003302:	f7ff f935 	bl	8002570 <masked_squeeze>
 8003306:	46a5      	mov	sp, r4
}
 8003308:	bf00      	nop
 800330a:	f507 7773 	add.w	r7, r7, #972	@ 0x3cc
 800330e:	46bd      	mov	sp, r7
 8003310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003314:	66666667 	.word	0x66666667

08003318 <masked_sha3_256>:
void masked_sha3_224(uint8_t *output, const uint8_t *input, size_t input_len) {
    masked_keccak_sponge(output, 28, input, input_len, 1152 / 8, DOMAIN_SHA3);
}

// SHA3-256: Output = 32 bytes, Rate = 136 bytes (1088 bits)
void masked_sha3_256(uint8_t *output, const uint8_t *input, size_t input_len) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af02      	add	r7, sp, #8
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 32, input, input_len, 136, DOMAIN_SHA3);
 8003324:	2306      	movs	r3, #6
 8003326:	9301      	str	r3, [sp, #4]
 8003328:	2388      	movs	r3, #136	@ 0x88
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	2120      	movs	r1, #32
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff fdb0 	bl	8002e98 <masked_keccak_sponge>
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <masked_sha3_512>:
void masked_sha3_384(uint8_t *output, const uint8_t *input, size_t input_len) {
    masked_keccak_sponge(output, 48, input, input_len, 832 / 8, DOMAIN_SHA3);
}

// SHA3-512: Output = 64 bytes, Rate = 72 bytes (576 bits)
void masked_sha3_512(uint8_t *output, const uint8_t *input, size_t input_len) {
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 64, input, input_len, 72, DOMAIN_SHA3);
 800334c:	2306      	movs	r3, #6
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	2348      	movs	r3, #72	@ 0x48
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	2140      	movs	r1, #64	@ 0x40
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff fd9c 	bl	8002e98 <masked_keccak_sponge>
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <HAL_MspInit+0x4c>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	4a0f      	ldr	r2, [pc, #60]	@ (80033b4 <HAL_MspInit+0x4c>)
 8003378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800337c:	6453      	str	r3, [r2, #68]	@ 0x44
 800337e:	4b0d      	ldr	r3, [pc, #52]	@ (80033b4 <HAL_MspInit+0x4c>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <HAL_MspInit+0x4c>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003392:	4a08      	ldr	r2, [pc, #32]	@ (80033b4 <HAL_MspInit+0x4c>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	@ 0x40
 800339a:	4b06      	ldr	r3, [pc, #24]	@ (80033b4 <HAL_MspInit+0x4c>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033a6:	2007      	movs	r0, #7
 80033a8:	f000 fc06 	bl	8003bb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	@ 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a19      	ldr	r2, [pc, #100]	@ (800343c <HAL_I2C_MspInit+0x84>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d12c      	bne.n	8003434 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b18      	ldr	r3, [pc, #96]	@ (8003440 <HAL_I2C_MspInit+0x88>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e2:	4a17      	ldr	r2, [pc, #92]	@ (8003440 <HAL_I2C_MspInit+0x88>)
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ea:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <HAL_I2C_MspInit+0x88>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80033f6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80033fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033fc:	2312      	movs	r3, #18
 80033fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003400:	2301      	movs	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	2300      	movs	r3, #0
 8003406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003408:	2304      	movs	r3, #4
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4619      	mov	r1, r3
 8003412:	480c      	ldr	r0, [pc, #48]	@ (8003444 <HAL_I2C_MspInit+0x8c>)
 8003414:	f000 fc12 	bl	8003c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <HAL_I2C_MspInit+0x88>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	4a07      	ldr	r2, [pc, #28]	@ (8003440 <HAL_I2C_MspInit+0x88>)
 8003422:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003426:	6413      	str	r3, [r2, #64]	@ 0x40
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_I2C_MspInit+0x88>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003434:	bf00      	nop
 8003436:	3728      	adds	r7, #40	@ 0x28
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40005400 	.word	0x40005400
 8003440:	40023800 	.word	0x40023800
 8003444:	40020400 	.word	0x40020400

08003448 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08e      	sub	sp, #56	@ 0x38
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003460:	f107 0314 	add.w	r3, r7, #20
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	605a      	str	r2, [r3, #4]
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a31      	ldr	r2, [pc, #196]	@ (8003538 <HAL_I2S_MspInit+0xf0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d15a      	bne.n	800352e <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003478:	2301      	movs	r3, #1
 800347a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800347c:	23c0      	movs	r3, #192	@ 0xc0
 800347e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003480:	2302      	movs	r3, #2
 8003482:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003484:	f107 0314 	add.w	r3, r7, #20
 8003488:	4618      	mov	r0, r3
 800348a:	f004 f93d 	bl	8007708 <HAL_RCCEx_PeriphCLKConfig>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8003494:	f7fe fe06 	bl	80020a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	4b27      	ldr	r3, [pc, #156]	@ (800353c <HAL_I2S_MspInit+0xf4>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	4a26      	ldr	r2, [pc, #152]	@ (800353c <HAL_I2S_MspInit+0xf4>)
 80034a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80034a8:	4b24      	ldr	r3, [pc, #144]	@ (800353c <HAL_I2S_MspInit+0xf4>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	4b20      	ldr	r3, [pc, #128]	@ (800353c <HAL_I2S_MspInit+0xf4>)
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	4a1f      	ldr	r2, [pc, #124]	@ (800353c <HAL_I2S_MspInit+0xf4>)
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80034c4:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_I2S_MspInit+0xf4>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	4b19      	ldr	r3, [pc, #100]	@ (800353c <HAL_I2S_MspInit+0xf4>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	4a18      	ldr	r2, [pc, #96]	@ (800353c <HAL_I2S_MspInit+0xf4>)
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	6313      	str	r3, [r2, #48]	@ 0x30
 80034e0:	4b16      	ldr	r3, [pc, #88]	@ (800353c <HAL_I2S_MspInit+0xf4>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80034ec:	2310      	movs	r3, #16
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f0:	2302      	movs	r3, #2
 80034f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f8:	2300      	movs	r3, #0
 80034fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80034fc:	2306      	movs	r3, #6
 80034fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	480e      	ldr	r0, [pc, #56]	@ (8003540 <HAL_I2S_MspInit+0xf8>)
 8003508:	f000 fb98 	bl	8003c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800350c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	2302      	movs	r3, #2
 8003514:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800351e:	2306      	movs	r3, #6
 8003520:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003522:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003526:	4619      	mov	r1, r3
 8003528:	4806      	ldr	r0, [pc, #24]	@ (8003544 <HAL_I2S_MspInit+0xfc>)
 800352a:	f000 fb87 	bl	8003c3c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800352e:	bf00      	nop
 8003530:	3738      	adds	r7, #56	@ 0x38
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40003c00 	.word	0x40003c00
 800353c:	40023800 	.word	0x40023800
 8003540:	40020000 	.word	0x40020000
 8003544:	40020800 	.word	0x40020800

08003548 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <HAL_RNG_MspInit+0x3c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10d      	bne.n	8003576 <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <HAL_RNG_MspInit+0x40>)
 8003560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003562:	4a09      	ldr	r2, [pc, #36]	@ (8003588 <HAL_RNG_MspInit+0x40>)
 8003564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003568:	6353      	str	r3, [r2, #52]	@ 0x34
 800356a:	4b07      	ldr	r3, [pc, #28]	@ (8003588 <HAL_RNG_MspInit+0x40>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	50060800 	.word	0x50060800
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	@ 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a19      	ldr	r2, [pc, #100]	@ (8003610 <HAL_SPI_MspInit+0x84>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d12b      	bne.n	8003606 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035ae:	2300      	movs	r3, #0
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <HAL_SPI_MspInit+0x88>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	4a17      	ldr	r2, [pc, #92]	@ (8003614 <HAL_SPI_MspInit+0x88>)
 80035b8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <HAL_SPI_MspInit+0x88>)
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <HAL_SPI_MspInit+0x88>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d2:	4a10      	ldr	r2, [pc, #64]	@ (8003614 <HAL_SPI_MspInit+0x88>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035da:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <HAL_SPI_MspInit+0x88>)
 80035dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80035e6:	23e0      	movs	r3, #224	@ 0xe0
 80035e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80035f6:	2305      	movs	r3, #5
 80035f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	4619      	mov	r1, r3
 8003600:	4805      	ldr	r0, [pc, #20]	@ (8003618 <HAL_SPI_MspInit+0x8c>)
 8003602:	f000 fb1b 	bl	8003c3c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003606:	bf00      	nop
 8003608:	3728      	adds	r7, #40	@ 0x28
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40013000 	.word	0x40013000
 8003614:	40023800 	.word	0x40023800
 8003618:	40020000 	.word	0x40020000

0800361c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08a      	sub	sp, #40	@ 0x28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
 8003630:	60da      	str	r2, [r3, #12]
 8003632:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a19      	ldr	r2, [pc, #100]	@ (80036a0 <HAL_UART_MspInit+0x84>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d12b      	bne.n	8003696 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	4b18      	ldr	r3, [pc, #96]	@ (80036a4 <HAL_UART_MspInit+0x88>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	4a17      	ldr	r2, [pc, #92]	@ (80036a4 <HAL_UART_MspInit+0x88>)
 8003648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800364c:	6413      	str	r3, [r2, #64]	@ 0x40
 800364e:	4b15      	ldr	r3, [pc, #84]	@ (80036a4 <HAL_UART_MspInit+0x88>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <HAL_UART_MspInit+0x88>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003662:	4a10      	ldr	r2, [pc, #64]	@ (80036a4 <HAL_UART_MspInit+0x88>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	6313      	str	r3, [r2, #48]	@ 0x30
 800366a:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <HAL_UART_MspInit+0x88>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003676:	230c      	movs	r3, #12
 8003678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800367a:	2302      	movs	r3, #2
 800367c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003682:	2303      	movs	r3, #3
 8003684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003686:	2307      	movs	r3, #7
 8003688:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368a:	f107 0314 	add.w	r3, r7, #20
 800368e:	4619      	mov	r1, r3
 8003690:	4805      	ldr	r0, [pc, #20]	@ (80036a8 <HAL_UART_MspInit+0x8c>)
 8003692:	f000 fad3 	bl	8003c3c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003696:	bf00      	nop
 8003698:	3728      	adds	r7, #40	@ 0x28
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40004400 	.word	0x40004400
 80036a4:	40023800 	.word	0x40023800
 80036a8:	40020000 	.word	0x40020000

080036ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <NMI_Handler+0x4>

080036b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036b8:	bf00      	nop
 80036ba:	e7fd      	b.n	80036b8 <HardFault_Handler+0x4>

080036bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036c0:	bf00      	nop
 80036c2:	e7fd      	b.n	80036c0 <MemManage_Handler+0x4>

080036c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <BusFault_Handler+0x4>

080036cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036d0:	bf00      	nop
 80036d2:	e7fd      	b.n	80036d0 <UsageFault_Handler+0x4>

080036d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003702:	f000 f945 	bl	8003990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003710:	4802      	ldr	r0, [pc, #8]	@ (800371c <OTG_FS_IRQHandler+0x10>)
 8003712:	f000 ff29 	bl	8004568 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000644 	.word	0x20000644

08003720 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  return 1;
 8003724:	2301      	movs	r3, #1
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <_kill>:

int _kill(int pid, int sig)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800373a:	f008 ff3d 	bl	800c5b8 <__errno>
 800373e:	4603      	mov	r3, r0
 8003740:	2216      	movs	r2, #22
 8003742:	601a      	str	r2, [r3, #0]
  return -1;
 8003744:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_exit>:

void _exit (int status)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003758:	f04f 31ff 	mov.w	r1, #4294967295
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ffe7 	bl	8003730 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003762:	bf00      	nop
 8003764:	e7fd      	b.n	8003762 <_exit+0x12>

08003766 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	e00a      	b.n	800378e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003778:	f3af 8000 	nop.w
 800377c:	4601      	mov	r1, r0
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	60ba      	str	r2, [r7, #8]
 8003784:	b2ca      	uxtb	r2, r1
 8003786:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	3301      	adds	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	429a      	cmp	r2, r3
 8003794:	dbf0      	blt.n	8003778 <_read+0x12>
  }

  return len;
 8003796:	687b      	ldr	r3, [r7, #4]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037c8:	605a      	str	r2, [r3, #4]
  return 0;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_isatty>:

int _isatty(int file)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037e0:	2301      	movs	r3, #1
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3714      	adds	r7, #20
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b086      	sub	sp, #24
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003810:	4a14      	ldr	r2, [pc, #80]	@ (8003864 <_sbrk+0x5c>)
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <_sbrk+0x60>)
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800381c:	4b13      	ldr	r3, [pc, #76]	@ (800386c <_sbrk+0x64>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d102      	bne.n	800382a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003824:	4b11      	ldr	r3, [pc, #68]	@ (800386c <_sbrk+0x64>)
 8003826:	4a12      	ldr	r2, [pc, #72]	@ (8003870 <_sbrk+0x68>)
 8003828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <_sbrk+0x64>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	429a      	cmp	r2, r3
 8003836:	d207      	bcs.n	8003848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003838:	f008 febe 	bl	800c5b8 <__errno>
 800383c:	4603      	mov	r3, r0
 800383e:	220c      	movs	r2, #12
 8003840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295
 8003846:	e009      	b.n	800385c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003848:	4b08      	ldr	r3, [pc, #32]	@ (800386c <_sbrk+0x64>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800384e:	4b07      	ldr	r3, [pc, #28]	@ (800386c <_sbrk+0x64>)
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	4a05      	ldr	r2, [pc, #20]	@ (800386c <_sbrk+0x64>)
 8003858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800385a:	68fb      	ldr	r3, [r7, #12]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3718      	adds	r7, #24
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20020000 	.word	0x20020000
 8003868:	00000400 	.word	0x00000400
 800386c:	20000260 	.word	0x20000260
 8003870:	20000b70 	.word	0x20000b70

08003874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <SystemInit+0x20>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	4a05      	ldr	r2, [pc, #20]	@ (8003894 <SystemInit+0x20>)
 8003880:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003884:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003888:	bf00      	nop
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003898:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800389c:	f7ff ffea 	bl	8003874 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038a0:	480c      	ldr	r0, [pc, #48]	@ (80038d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038a2:	490d      	ldr	r1, [pc, #52]	@ (80038d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038a4:	4a0d      	ldr	r2, [pc, #52]	@ (80038dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038a8:	e002      	b.n	80038b0 <LoopCopyDataInit>

080038aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038ae:	3304      	adds	r3, #4

080038b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038b4:	d3f9      	bcc.n	80038aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038b6:	4a0a      	ldr	r2, [pc, #40]	@ (80038e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80038b8:	4c0a      	ldr	r4, [pc, #40]	@ (80038e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80038ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038bc:	e001      	b.n	80038c2 <LoopFillZerobss>

080038be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038c0:	3204      	adds	r2, #4

080038c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038c4:	d3fb      	bcc.n	80038be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038c6:	f008 fe7d 	bl	800c5c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038ca:	f7fe f96f 	bl	8001bac <main>
  bx  lr    
 80038ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80038d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038d8:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 80038dc:	0800d3ec 	.word	0x0800d3ec
  ldr r2, =_sbss
 80038e0:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 80038e4:	20000b70 	.word	0x20000b70

080038e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038e8:	e7fe      	b.n	80038e8 <ADC_IRQHandler>
	...

080038ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038f0:	4b0e      	ldr	r3, [pc, #56]	@ (800392c <HAL_Init+0x40>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0d      	ldr	r2, [pc, #52]	@ (800392c <HAL_Init+0x40>)
 80038f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <HAL_Init+0x40>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0a      	ldr	r2, [pc, #40]	@ (800392c <HAL_Init+0x40>)
 8003902:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003908:	4b08      	ldr	r3, [pc, #32]	@ (800392c <HAL_Init+0x40>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a07      	ldr	r2, [pc, #28]	@ (800392c <HAL_Init+0x40>)
 800390e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003914:	2003      	movs	r0, #3
 8003916:	f000 f94f 	bl	8003bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800391a:	2000      	movs	r0, #0
 800391c:	f000 f808 	bl	8003930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003920:	f7ff fd22 	bl	8003368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40023c00 	.word	0x40023c00

08003930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003938:	4b12      	ldr	r3, [pc, #72]	@ (8003984 <HAL_InitTick+0x54>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <HAL_InitTick+0x58>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4619      	mov	r1, r3
 8003942:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003946:	fbb3 f3f1 	udiv	r3, r3, r1
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f967 	bl	8003c22 <HAL_SYSTICK_Config>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e00e      	b.n	800397c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b0f      	cmp	r3, #15
 8003962:	d80a      	bhi.n	800397a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003964:	2200      	movs	r2, #0
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	f04f 30ff 	mov.w	r0, #4294967295
 800396c:	f000 f92f 	bl	8003bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003970:	4a06      	ldr	r2, [pc, #24]	@ (800398c <HAL_InitTick+0x5c>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000070 	.word	0x20000070
 8003988:	20000078 	.word	0x20000078
 800398c:	20000074 	.word	0x20000074

08003990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003994:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_IncTick+0x20>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_IncTick+0x24>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4413      	add	r3, r2
 80039a0:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <HAL_IncTick+0x24>)
 80039a2:	6013      	str	r3, [r2, #0]
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	20000078 	.word	0x20000078
 80039b4:	20000264 	.word	0x20000264

080039b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return uwTick;
 80039bc:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <HAL_GetTick+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000264 	.word	0x20000264

080039d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d8:	f7ff ffee 	bl	80039b8 <HAL_GetTick>
 80039dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e8:	d005      	beq.n	80039f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <HAL_Delay+0x44>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039f6:	bf00      	nop
 80039f8:	f7ff ffde 	bl	80039b8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d8f7      	bhi.n	80039f8 <HAL_Delay+0x28>
  {
  }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000078 	.word	0x20000078

08003a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a28:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a34:	4013      	ands	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a4a:	4a04      	ldr	r2, [pc, #16]	@ (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	60d3      	str	r3, [r2, #12]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a64:	4b04      	ldr	r3, [pc, #16]	@ (8003a78 <__NVIC_GetPriorityGrouping+0x18>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	f003 0307 	and.w	r3, r3, #7
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	db0b      	blt.n	8003aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	f003 021f 	and.w	r2, r3, #31
 8003a94:	4907      	ldr	r1, [pc, #28]	@ (8003ab4 <__NVIC_EnableIRQ+0x38>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db0a      	blt.n	8003ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	490c      	ldr	r1, [pc, #48]	@ (8003b04 <__NVIC_SetPriority+0x4c>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	440b      	add	r3, r1
 8003adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae0:	e00a      	b.n	8003af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4908      	ldr	r1, [pc, #32]	@ (8003b08 <__NVIC_SetPriority+0x50>)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	3b04      	subs	r3, #4
 8003af0:	0112      	lsls	r2, r2, #4
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	440b      	add	r3, r1
 8003af6:	761a      	strb	r2, [r3, #24]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000e100 	.word	0xe000e100
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	@ 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f1c3 0307 	rsb	r3, r3, #7
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	bf28      	it	cs
 8003b2a:	2304      	movcs	r3, #4
 8003b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d902      	bls.n	8003b3c <NVIC_EncodePriority+0x30>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3b03      	subs	r3, #3
 8003b3a:	e000      	b.n	8003b3e <NVIC_EncodePriority+0x32>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	401a      	ands	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b54:	f04f 31ff 	mov.w	r1, #4294967295
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	43d9      	mvns	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	4313      	orrs	r3, r2
         );
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b84:	d301      	bcc.n	8003b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00f      	b.n	8003baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <SysTick_Config+0x40>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b92:	210f      	movs	r1, #15
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295
 8003b98:	f7ff ff8e 	bl	8003ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <SysTick_Config+0x40>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba2:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <SysTick_Config+0x40>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff29 	bl	8003a18 <__NVIC_SetPriorityGrouping>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be0:	f7ff ff3e 	bl	8003a60 <__NVIC_GetPriorityGrouping>
 8003be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff8e 	bl	8003b0c <NVIC_EncodePriority>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff5d 	bl	8003ab8 <__NVIC_SetPriority>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff31 	bl	8003a7c <__NVIC_EnableIRQ>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ffa2 	bl	8003b74 <SysTick_Config>
 8003c30:	4603      	mov	r3, r0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	@ 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	e16b      	b.n	8003f30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c58:	2201      	movs	r2, #1
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	f040 815a 	bne.w	8003f2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d005      	beq.n	8003c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d130      	bne.n	8003cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	2203      	movs	r2, #3
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 0201 	and.w	r2, r3, #1
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d017      	beq.n	8003d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d123      	bne.n	8003d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	08da      	lsrs	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3208      	adds	r2, #8
 8003d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	220f      	movs	r2, #15
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	08da      	lsrs	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3208      	adds	r2, #8
 8003d7a:	69b9      	ldr	r1, [r7, #24]
 8003d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0203 	and.w	r2, r3, #3
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80b4 	beq.w	8003f2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	4b60      	ldr	r3, [pc, #384]	@ (8003f48 <HAL_GPIO_Init+0x30c>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	4a5f      	ldr	r2, [pc, #380]	@ (8003f48 <HAL_GPIO_Init+0x30c>)
 8003dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dd2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f48 <HAL_GPIO_Init+0x30c>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dde:	4a5b      	ldr	r2, [pc, #364]	@ (8003f4c <HAL_GPIO_Init+0x310>)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	089b      	lsrs	r3, r3, #2
 8003de4:	3302      	adds	r3, #2
 8003de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	220f      	movs	r2, #15
 8003df6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a52      	ldr	r2, [pc, #328]	@ (8003f50 <HAL_GPIO_Init+0x314>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d02b      	beq.n	8003e62 <HAL_GPIO_Init+0x226>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a51      	ldr	r2, [pc, #324]	@ (8003f54 <HAL_GPIO_Init+0x318>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d025      	beq.n	8003e5e <HAL_GPIO_Init+0x222>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a50      	ldr	r2, [pc, #320]	@ (8003f58 <HAL_GPIO_Init+0x31c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01f      	beq.n	8003e5a <HAL_GPIO_Init+0x21e>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8003f5c <HAL_GPIO_Init+0x320>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d019      	beq.n	8003e56 <HAL_GPIO_Init+0x21a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a4e      	ldr	r2, [pc, #312]	@ (8003f60 <HAL_GPIO_Init+0x324>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d013      	beq.n	8003e52 <HAL_GPIO_Init+0x216>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003f64 <HAL_GPIO_Init+0x328>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00d      	beq.n	8003e4e <HAL_GPIO_Init+0x212>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a4c      	ldr	r2, [pc, #304]	@ (8003f68 <HAL_GPIO_Init+0x32c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <HAL_GPIO_Init+0x20e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003f6c <HAL_GPIO_Init+0x330>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d101      	bne.n	8003e46 <HAL_GPIO_Init+0x20a>
 8003e42:	2307      	movs	r3, #7
 8003e44:	e00e      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e46:	2308      	movs	r3, #8
 8003e48:	e00c      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e4a:	2306      	movs	r3, #6
 8003e4c:	e00a      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e4e:	2305      	movs	r3, #5
 8003e50:	e008      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e52:	2304      	movs	r3, #4
 8003e54:	e006      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e56:	2303      	movs	r3, #3
 8003e58:	e004      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e002      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <HAL_GPIO_Init+0x228>
 8003e62:	2300      	movs	r3, #0
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	f002 0203 	and.w	r2, r2, #3
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	4093      	lsls	r3, r2
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e74:	4935      	ldr	r1, [pc, #212]	@ (8003f4c <HAL_GPIO_Init+0x310>)
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	089b      	lsrs	r3, r3, #2
 8003e7a:	3302      	adds	r3, #2
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e82:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <HAL_GPIO_Init+0x334>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea6:	4a32      	ldr	r2, [pc, #200]	@ (8003f70 <HAL_GPIO_Init+0x334>)
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003eac:	4b30      	ldr	r3, [pc, #192]	@ (8003f70 <HAL_GPIO_Init+0x334>)
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ed0:	4a27      	ldr	r2, [pc, #156]	@ (8003f70 <HAL_GPIO_Init+0x334>)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ed6:	4b26      	ldr	r3, [pc, #152]	@ (8003f70 <HAL_GPIO_Init+0x334>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	43db      	mvns	r3, r3
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003efa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <HAL_GPIO_Init+0x334>)
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	@ (8003f70 <HAL_GPIO_Init+0x334>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	43db      	mvns	r3, r3
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f24:	4a12      	ldr	r2, [pc, #72]	@ (8003f70 <HAL_GPIO_Init+0x334>)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	2b0f      	cmp	r3, #15
 8003f34:	f67f ae90 	bls.w	8003c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	3724      	adds	r7, #36	@ 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40020000 	.word	0x40020000
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	40020c00 	.word	0x40020c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40021400 	.word	0x40021400
 8003f68:	40021800 	.word	0x40021800
 8003f6c:	40021c00 	.word	0x40021c00
 8003f70:	40013c00 	.word	0x40013c00

08003f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
 8003f80:	4613      	mov	r3, r2
 8003f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f84:	787b      	ldrb	r3, [r7, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f90:	e003      	b.n	8003f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f92:	887b      	ldrh	r3, [r7, #2]
 8003f94:	041a      	lsls	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	619a      	str	r2, [r3, #24]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af02      	add	r7, sp, #8
 8003fac:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e059      	b.n	800406c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f007 fc3a 	bl	800b84c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2203      	movs	r2, #3
 8003fdc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003fe6:	d102      	bne.n	8003fee <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f004 fa53 	bl	800849e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	7c1a      	ldrb	r2, [r3, #16]
 8004000:	f88d 2000 	strb.w	r2, [sp]
 8004004:	3304      	adds	r3, #4
 8004006:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004008:	f004 f9d4 	bl	80083b4 <USB_CoreInit>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e026      	b.n	800406c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2101      	movs	r1, #1
 8004024:	4618      	mov	r0, r3
 8004026:	f004 fa4b 	bl	80084c0 <USB_SetCurrentMode>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e017      	b.n	800406c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	7c1a      	ldrb	r2, [r3, #16]
 8004044:	f88d 2000 	strb.w	r2, [sp]
 8004048:	3304      	adds	r3, #4
 800404a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800404c:	f004 fbee 	bl	800882c <USB_HostInit>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d005      	beq.n	8004062 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e004      	b.n	800406c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004074:	b590      	push	{r4, r7, lr}
 8004076:	b08b      	sub	sp, #44	@ 0x2c
 8004078:	af04      	add	r7, sp, #16
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	461a      	mov	r2, r3
 8004082:	4603      	mov	r3, r0
 8004084:	70fb      	strb	r3, [r7, #3]
 8004086:	460b      	mov	r3, r1
 8004088:	70bb      	strb	r3, [r7, #2]
 800408a:	4613      	mov	r3, r2
 800408c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800408e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004090:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_HCD_HC_Init+0x2c>
 800409c:	2302      	movs	r3, #2
 800409e:	e09d      	b.n	80041dc <HAL_HCD_HC_Init+0x168>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	3319      	adds	r3, #25
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80040bc:	78fa      	ldrb	r2, [r7, #3]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	011b      	lsls	r3, r3, #4
 80040c4:	1a9b      	subs	r3, r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	3314      	adds	r3, #20
 80040cc:	787a      	ldrb	r2, [r7, #1]
 80040ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	3315      	adds	r3, #21
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80040e4:	78fa      	ldrb	r2, [r7, #3]
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	4613      	mov	r3, r2
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	1a9b      	subs	r3, r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	3326      	adds	r3, #38	@ 0x26
 80040f4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80040f8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	78bb      	ldrb	r3, [r7, #2]
 80040fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004102:	b2d8      	uxtb	r0, r3
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	3316      	adds	r3, #22
 8004112:	4602      	mov	r2, r0
 8004114:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004116:	78fb      	ldrb	r3, [r7, #3]
 8004118:	4619      	mov	r1, r3
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 fbc8 	bl	80048b0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004120:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004124:	2b00      	cmp	r3, #0
 8004126:	da0a      	bge.n	800413e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004128:	78fa      	ldrb	r2, [r7, #3]
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	4613      	mov	r3, r2
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	1a9b      	subs	r3, r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	3317      	adds	r3, #23
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
 800413c:	e009      	b.n	8004152 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	3317      	adds	r3, #23
 800414e:	2200      	movs	r2, #0
 8004150:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f004 fccc 	bl	8008af4 <USB_GetHostSpeed>
 800415c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800415e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d10b      	bne.n	800417e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8004166:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_HCD_HC_Init+0x10a>
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d104      	bne.n	800417e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	2bbc      	cmp	r3, #188	@ 0xbc
 8004178:	d901      	bls.n	800417e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800417a:	23bc      	movs	r3, #188	@ 0xbc
 800417c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	3318      	adds	r3, #24
 800418e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8004192:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	b298      	uxth	r0, r3
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	3328      	adds	r3, #40	@ 0x28
 80041a8:	4602      	mov	r2, r0
 80041aa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	787c      	ldrb	r4, [r7, #1]
 80041b6:	78ba      	ldrb	r2, [r7, #2]
 80041b8:	78f9      	ldrb	r1, [r7, #3]
 80041ba:	9302      	str	r3, [sp, #8]
 80041bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	4623      	mov	r3, r4
 80041ca:	f004 fcbb 	bl	8008b44 <USB_HC_Init>
 80041ce:	4603      	mov	r3, r0
 80041d0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80041da:	7bfb      	ldrb	r3, [r7, #15]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	371c      	adds	r7, #28
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd90      	pop	{r4, r7, pc}

080041e4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_HCD_HC_Halt+0x1e>
 80041fe:	2302      	movs	r3, #2
 8004200:	e00f      	b.n	8004222 <HAL_HCD_HC_Halt+0x3e>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f005 f84d 	bl	80092b2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
	...

0800422c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	4608      	mov	r0, r1
 8004236:	4611      	mov	r1, r2
 8004238:	461a      	mov	r2, r3
 800423a:	4603      	mov	r3, r0
 800423c:	70fb      	strb	r3, [r7, #3]
 800423e:	460b      	mov	r3, r1
 8004240:	70bb      	strb	r3, [r7, #2]
 8004242:	4613      	mov	r3, r2
 8004244:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	3317      	adds	r3, #23
 8004256:	78ba      	ldrb	r2, [r7, #2]
 8004258:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	3326      	adds	r3, #38	@ 0x26
 800426a:	787a      	ldrb	r2, [r7, #1]
 800426c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800426e:	7c3b      	ldrb	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d114      	bne.n	800429e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004274:	78fa      	ldrb	r2, [r7, #3]
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4613      	mov	r3, r2
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	332a      	adds	r3, #42	@ 0x2a
 8004284:	2203      	movs	r2, #3
 8004286:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	3319      	adds	r3, #25
 8004298:	7f3a      	ldrb	r2, [r7, #28]
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	e009      	b.n	80042b2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	332a      	adds	r3, #42	@ 0x2a
 80042ae:	2202      	movs	r2, #2
 80042b0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80042b2:	787b      	ldrb	r3, [r7, #1]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	f200 8102 	bhi.w	80044be <HAL_HCD_HC_SubmitRequest+0x292>
 80042ba:	a201      	add	r2, pc, #4	@ (adr r2, 80042c0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80042bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	080044a9 	.word	0x080044a9
 80042c8:	08004395 	.word	0x08004395
 80042cc:	0800441f 	.word	0x0800441f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80042d0:	7c3b      	ldrb	r3, [r7, #16]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	f040 80f5 	bne.w	80044c2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80042d8:	78bb      	ldrb	r3, [r7, #2]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d12d      	bne.n	800433a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80042de:	8b3b      	ldrh	r3, [r7, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	333d      	adds	r3, #61	@ 0x3d
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80042f8:	78fa      	ldrb	r2, [r7, #3]
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	4613      	mov	r3, r2
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	333d      	adds	r3, #61	@ 0x3d
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10a      	bne.n	8004324 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800430e:	78fa      	ldrb	r2, [r7, #3]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	1a9b      	subs	r3, r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	332a      	adds	r3, #42	@ 0x2a
 800431e:	2200      	movs	r2, #0
 8004320:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004322:	e0ce      	b.n	80044c2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	332a      	adds	r3, #42	@ 0x2a
 8004334:	2202      	movs	r2, #2
 8004336:	701a      	strb	r2, [r3, #0]
      break;
 8004338:	e0c3      	b.n	80044c2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	331a      	adds	r3, #26
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b01      	cmp	r3, #1
 800434e:	f040 80b8 	bne.w	80044c2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	333c      	adds	r3, #60	@ 0x3c
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	332a      	adds	r3, #42	@ 0x2a
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
      break;
 800437c:	e0a1      	b.n	80044c2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800437e:	78fa      	ldrb	r2, [r7, #3]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	1a9b      	subs	r3, r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	332a      	adds	r3, #42	@ 0x2a
 800438e:	2202      	movs	r2, #2
 8004390:	701a      	strb	r2, [r3, #0]
      break;
 8004392:	e096      	b.n	80044c2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004394:	78bb      	ldrb	r3, [r7, #2]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d120      	bne.n	80043dc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800439a:	78fa      	ldrb	r2, [r7, #3]
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	4613      	mov	r3, r2
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	333d      	adds	r3, #61	@ 0x3d
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10a      	bne.n	80043c6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	332a      	adds	r3, #42	@ 0x2a
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80043c4:	e07e      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	6879      	ldr	r1, [r7, #4]
 80043ca:	4613      	mov	r3, r2
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	1a9b      	subs	r3, r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	332a      	adds	r3, #42	@ 0x2a
 80043d6:	2202      	movs	r2, #2
 80043d8:	701a      	strb	r2, [r3, #0]
      break;
 80043da:	e073      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043dc:	78fa      	ldrb	r2, [r7, #3]
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	4613      	mov	r3, r2
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	1a9b      	subs	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	440b      	add	r3, r1
 80043ea:	333c      	adds	r3, #60	@ 0x3c
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	4613      	mov	r3, r2
 80043f8:	011b      	lsls	r3, r3, #4
 80043fa:	1a9b      	subs	r3, r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	332a      	adds	r3, #42	@ 0x2a
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
      break;
 8004406:	e05d      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	332a      	adds	r3, #42	@ 0x2a
 8004418:	2202      	movs	r2, #2
 800441a:	701a      	strb	r2, [r3, #0]
      break;
 800441c:	e052      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800441e:	78bb      	ldrb	r3, [r7, #2]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d120      	bne.n	8004466 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004424:	78fa      	ldrb	r2, [r7, #3]
 8004426:	6879      	ldr	r1, [r7, #4]
 8004428:	4613      	mov	r3, r2
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	333d      	adds	r3, #61	@ 0x3d
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10a      	bne.n	8004450 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800443a:	78fa      	ldrb	r2, [r7, #3]
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	332a      	adds	r3, #42	@ 0x2a
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800444e:	e039      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	332a      	adds	r3, #42	@ 0x2a
 8004460:	2202      	movs	r2, #2
 8004462:	701a      	strb	r2, [r3, #0]
      break;
 8004464:	e02e      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	333c      	adds	r3, #60	@ 0x3c
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	332a      	adds	r3, #42	@ 0x2a
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
      break;
 8004490:	e018      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004492:	78fa      	ldrb	r2, [r7, #3]
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	4613      	mov	r3, r2
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	1a9b      	subs	r3, r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	332a      	adds	r3, #42	@ 0x2a
 80044a2:	2202      	movs	r2, #2
 80044a4:	701a      	strb	r2, [r3, #0]
      break;
 80044a6:	e00d      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044a8:	78fa      	ldrb	r2, [r7, #3]
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	4613      	mov	r3, r2
 80044ae:	011b      	lsls	r3, r3, #4
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	332a      	adds	r3, #42	@ 0x2a
 80044b8:	2200      	movs	r2, #0
 80044ba:	701a      	strb	r2, [r3, #0]
      break;
 80044bc:	e002      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80044be:	bf00      	nop
 80044c0:	e000      	b.n	80044c4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80044c2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80044c4:	78fa      	ldrb	r2, [r7, #3]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	332c      	adds	r3, #44	@ 0x2c
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	8b39      	ldrh	r1, [r7, #24]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4403      	add	r3, r0
 80044e8:	3334      	adds	r3, #52	@ 0x34
 80044ea:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	334c      	adds	r3, #76	@ 0x4c
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004500:	78fa      	ldrb	r2, [r7, #3]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	1a9b      	subs	r3, r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	3338      	adds	r3, #56	@ 0x38
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	011b      	lsls	r3, r3, #4
 800451c:	1a9b      	subs	r3, r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	3315      	adds	r3, #21
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	4613      	mov	r3, r2
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	1a9b      	subs	r3, r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	440b      	add	r3, r1
 8004536:	334d      	adds	r3, #77	@ 0x4d
 8004538:	2200      	movs	r2, #0
 800453a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6818      	ldr	r0, [r3, #0]
 8004540:	78fa      	ldrb	r2, [r7, #3]
 8004542:	4613      	mov	r3, r2
 8004544:	011b      	lsls	r3, r3, #4
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	3310      	adds	r3, #16
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	1d19      	adds	r1, r3, #4
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	799b      	ldrb	r3, [r3, #6]
 8004556:	461a      	mov	r2, r3
 8004558:	f004 fc20 	bl	8008d9c <USB_HC_StartXfer>
 800455c:	4603      	mov	r3, r0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop

08004568 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4618      	mov	r0, r3
 8004580:	f004 f914 	bl	80087ac <USB_GetMode>
 8004584:	4603      	mov	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	f040 80fb 	bne.w	8004782 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4618      	mov	r0, r3
 8004592:	f004 f8d7 	bl	8008744 <USB_ReadInterrupts>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80f1 	beq.w	8004780 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f004 f8ce 	bl	8008744 <USB_ReadInterrupts>
 80045a8:	4603      	mov	r3, r0
 80045aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80045b2:	d104      	bne.n	80045be <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80045bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f004 f8be 	bl	8008744 <USB_ReadInterrupts>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045d2:	d104      	bne.n	80045de <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80045dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4618      	mov	r0, r3
 80045e4:	f004 f8ae 	bl	8008744 <USB_ReadInterrupts>
 80045e8:	4603      	mov	r3, r0
 80045ea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80045ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045f2:	d104      	bne.n	80045fe <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80045fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f004 f89e 	bl	8008744 <USB_ReadInterrupts>
 8004608:	4603      	mov	r3, r0
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b02      	cmp	r3, #2
 8004610:	d103      	bne.n	800461a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2202      	movs	r2, #2
 8004618:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f004 f890 	bl	8008744 <USB_ReadInterrupts>
 8004624:	4603      	mov	r3, r0
 8004626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800462a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800462e:	d120      	bne.n	8004672 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004638:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d113      	bne.n	8004672 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800464a:	2110      	movs	r1, #16
 800464c:	6938      	ldr	r0, [r7, #16]
 800464e:	f003 ff83 	bl	8008558 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004652:	6938      	ldr	r0, [r7, #16]
 8004654:	f003 ffb2 	bl	80085bc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	7a5b      	ldrb	r3, [r3, #9]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d105      	bne.n	800466c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2101      	movs	r1, #1
 8004666:	4618      	mov	r0, r3
 8004668:	f004 f9a4 	bl	80089b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f007 f96b 	bl	800b948 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f004 f864 	bl	8008744 <USB_ReadInterrupts>
 800467c:	4603      	mov	r3, r0
 800467e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004682:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004686:	d102      	bne.n	800468e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 fd4d 	bl	8006128 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f004 f856 	bl	8008744 <USB_ReadInterrupts>
 8004698:	4603      	mov	r3, r0
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d106      	bne.n	80046b0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f007 f934 	bl	800b910 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2208      	movs	r2, #8
 80046ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f004 f845 	bl	8008744 <USB_ReadInterrupts>
 80046ba:	4603      	mov	r3, r0
 80046bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046c4:	d139      	bne.n	800473a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 fde0 	bl	8009290 <USB_HC_ReadInterrupt>
 80046d0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e025      	b.n	8004724 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d018      	beq.n	800471e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004702:	d106      	bne.n	8004712 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f905 	bl	800491a <HCD_HC_IN_IRQHandler>
 8004710:	e005      	b.n	800471e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	4619      	mov	r1, r3
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 ff67 	bl	80055ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	3301      	adds	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	795b      	ldrb	r3, [r3, #5]
 8004728:	461a      	mov	r2, r3
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4293      	cmp	r3, r2
 800472e:	d3d3      	bcc.n	80046d8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f004 f800 	bl	8008744 <USB_ReadInterrupts>
 8004744:	4603      	mov	r3, r0
 8004746:	f003 0310 	and.w	r3, r3, #16
 800474a:	2b10      	cmp	r3, #16
 800474c:	d101      	bne.n	8004752 <HAL_HCD_IRQHandler+0x1ea>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <HAL_HCD_IRQHandler+0x1ec>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d014      	beq.n	8004782 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0210 	bic.w	r2, r2, #16
 8004766:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f001 fbfe 	bl	8005f6a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0210 	orr.w	r2, r2, #16
 800477c:	619a      	str	r2, [r3, #24]
 800477e:	e000      	b.n	8004782 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004780:	bf00      	nop
    }
  }
}
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_HCD_Start+0x16>
 800479a:	2302      	movs	r3, #2
 800479c:	e013      	b.n	80047c6 <HAL_HCD_Start+0x3e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f004 f968 	bl	8008a82 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f003 fe60 	bl	800847c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_HCD_Stop+0x16>
 80047e0:	2302      	movs	r3, #2
 80047e2:	e00d      	b.n	8004800 <HAL_HCD_Stop+0x32>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f004 febb 	bl	800956c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f004 f90a 	bl	8008a2e <USB_ResetPort>
 800481a:	4603      	mov	r3, r0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004830:	78fa      	ldrb	r2, [r7, #3]
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	4613      	mov	r3, r2
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	1a9b      	subs	r3, r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	440b      	add	r3, r1
 800483e:	334c      	adds	r3, #76	@ 0x4c
 8004840:	781b      	ldrb	r3, [r3, #0]
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	3338      	adds	r3, #56	@ 0x38
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f004 f94c 	bl	8008b22 <USB_GetCurrentFrame>
 800488a:	4603      	mov	r3, r0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f004 f927 	bl	8008af4 <USB_GetHostSpeed>
 80048a6:	4603      	mov	r3, r0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	331a      	adds	r3, #26
 80048cc:	2200      	movs	r2, #0
 80048ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	331b      	adds	r3, #27
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80048e4:	78fa      	ldrb	r2, [r7, #3]
 80048e6:	6879      	ldr	r1, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	440b      	add	r3, r1
 80048f2:	3325      	adds	r3, #37	@ 0x25
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80048f8:	78fa      	ldrb	r2, [r7, #3]
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	3324      	adds	r3, #36	@ 0x24
 8004908:	2200      	movs	r2, #0
 800490a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	4611      	mov	r1, r2
 8004938:	4618      	mov	r0, r3
 800493a:	f003 ff16 	bl	800876a <USB_ReadChInterrupts>
 800493e:	4603      	mov	r3, r0
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b04      	cmp	r3, #4
 8004946:	d11a      	bne.n	800497e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004948:	78fb      	ldrb	r3, [r7, #3]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	4413      	add	r3, r2
 8004950:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004954:	461a      	mov	r2, r3
 8004956:	2304      	movs	r3, #4
 8004958:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	334d      	adds	r3, #77	@ 0x4d
 800496a:	2207      	movs	r2, #7
 800496c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	78fa      	ldrb	r2, [r7, #3]
 8004974:	4611      	mov	r1, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f004 fc9b 	bl	80092b2 <USB_HC_Halt>
 800497c:	e09e      	b.n	8004abc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f003 feef 	bl	800876a <USB_ReadChInterrupts>
 800498c:	4603      	mov	r3, r0
 800498e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004996:	d11b      	bne.n	80049d0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049a4:	461a      	mov	r2, r3
 80049a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	334d      	adds	r3, #77	@ 0x4d
 80049bc:	2208      	movs	r2, #8
 80049be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	4611      	mov	r1, r2
 80049c8:	4618      	mov	r0, r3
 80049ca:	f004 fc72 	bl	80092b2 <USB_HC_Halt>
 80049ce:	e075      	b.n	8004abc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	78fa      	ldrb	r2, [r7, #3]
 80049d6:	4611      	mov	r1, r2
 80049d8:	4618      	mov	r0, r3
 80049da:	f003 fec6 	bl	800876a <USB_ReadChInterrupts>
 80049de:	4603      	mov	r3, r0
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d11a      	bne.n	8004a1e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049f4:	461a      	mov	r2, r3
 80049f6:	2308      	movs	r3, #8
 80049f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80049fa:	78fa      	ldrb	r2, [r7, #3]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	334d      	adds	r3, #77	@ 0x4d
 8004a0a:	2206      	movs	r2, #6
 8004a0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	4611      	mov	r1, r2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f004 fc4b 	bl	80092b2 <USB_HC_Halt>
 8004a1c:	e04e      	b.n	8004abc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	78fa      	ldrb	r2, [r7, #3]
 8004a24:	4611      	mov	r1, r2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f003 fe9f 	bl	800876a <USB_ReadChInterrupts>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a36:	d11b      	bne.n	8004a70 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	015a      	lsls	r2, r3, #5
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a44:	461a      	mov	r2, r3
 8004a46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	334d      	adds	r3, #77	@ 0x4d
 8004a5c:	2209      	movs	r2, #9
 8004a5e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	78fa      	ldrb	r2, [r7, #3]
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f004 fc22 	bl	80092b2 <USB_HC_Halt>
 8004a6e:	e025      	b.n	8004abc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	78fa      	ldrb	r2, [r7, #3]
 8004a76:	4611      	mov	r1, r2
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f003 fe76 	bl	800876a <USB_ReadChInterrupts>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a84:	2b80      	cmp	r3, #128	@ 0x80
 8004a86:	d119      	bne.n	8004abc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a94:	461a      	mov	r2, r3
 8004a96:	2380      	movs	r3, #128	@ 0x80
 8004a98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	334d      	adds	r3, #77	@ 0x4d
 8004aaa:	2207      	movs	r2, #7
 8004aac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f004 fbfb 	bl	80092b2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f003 fe50 	bl	800876a <USB_ReadChInterrupts>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ad4:	d112      	bne.n	8004afc <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	78fa      	ldrb	r2, [r7, #3]
 8004adc:	4611      	mov	r1, r2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f004 fbe7 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af0:	461a      	mov	r2, r3
 8004af2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004af6:	6093      	str	r3, [r2, #8]
 8004af8:	f000 bd75 	b.w	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f003 fe30 	bl	800876a <USB_ReadChInterrupts>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	f040 8128 	bne.w	8004d66 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	015a      	lsls	r2, r3, #5
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b22:	461a      	mov	r2, r3
 8004b24:	2320      	movs	r3, #32
 8004b26:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004b28:	78fa      	ldrb	r2, [r7, #3]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	331b      	adds	r3, #27
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d119      	bne.n	8004b72 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	331b      	adds	r3, #27
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	78fa      	ldrb	r2, [r7, #3]
 8004b62:	0151      	lsls	r1, r2, #5
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	440a      	add	r2, r1
 8004b68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b70:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	799b      	ldrb	r3, [r3, #6]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01b      	beq.n	8004bb2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	3330      	adds	r3, #48	@ 0x30
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	1ac9      	subs	r1, r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4403      	add	r3, r0
 8004bae:	3338      	adds	r3, #56	@ 0x38
 8004bb0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	334d      	adds	r3, #77	@ 0x4d
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004bc6:	78fa      	ldrb	r2, [r7, #3]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	1a9b      	subs	r3, r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3344      	adds	r3, #68	@ 0x44
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be6:	461a      	mov	r2, r3
 8004be8:	2301      	movs	r3, #1
 8004bea:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bec:	78fa      	ldrb	r2, [r7, #3]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3326      	adds	r3, #38	@ 0x26
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00a      	beq.n	8004c18 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	3326      	adds	r3, #38	@ 0x26
 8004c12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d110      	bne.n	8004c3a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	78fa      	ldrb	r2, [r7, #3]
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4618      	mov	r0, r3
 8004c22:	f004 fb46 	bl	80092b2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004c26:	78fb      	ldrb	r3, [r7, #3]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c32:	461a      	mov	r2, r3
 8004c34:	2310      	movs	r3, #16
 8004c36:	6093      	str	r3, [r2, #8]
 8004c38:	e03d      	b.n	8004cb6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004c3a:	78fa      	ldrb	r2, [r7, #3]
 8004c3c:	6879      	ldr	r1, [r7, #4]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	011b      	lsls	r3, r3, #4
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	440b      	add	r3, r1
 8004c48:	3326      	adds	r3, #38	@ 0x26
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d00a      	beq.n	8004c66 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004c50:	78fa      	ldrb	r2, [r7, #3]
 8004c52:	6879      	ldr	r1, [r7, #4]
 8004c54:	4613      	mov	r3, r2
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	440b      	add	r3, r1
 8004c5e:	3326      	adds	r3, #38	@ 0x26
 8004c60:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d127      	bne.n	8004cb6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004c80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c84:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	440b      	add	r3, r1
 8004c94:	334c      	adds	r3, #76	@ 0x4c
 8004c96:	2201      	movs	r2, #1
 8004c98:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c9a:	78fa      	ldrb	r2, [r7, #3]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	440b      	add	r3, r1
 8004ca8:	334c      	adds	r3, #76	@ 0x4c
 8004caa:	781a      	ldrb	r2, [r3, #0]
 8004cac:	78fb      	ldrb	r3, [r7, #3]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f006 fe57 	bl	800b964 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	799b      	ldrb	r3, [r3, #6]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d13b      	bne.n	8004d36 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	6879      	ldr	r1, [r7, #4]
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3338      	adds	r3, #56	@ 0x38
 8004cce:	6819      	ldr	r1, [r3, #0]
 8004cd0:	78fa      	ldrb	r2, [r7, #3]
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	1a9b      	subs	r3, r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4403      	add	r3, r0
 8004cde:	3328      	adds	r3, #40	@ 0x28
 8004ce0:	881b      	ldrh	r3, [r3, #0]
 8004ce2:	440b      	add	r3, r1
 8004ce4:	1e59      	subs	r1, r3, #1
 8004ce6:	78fa      	ldrb	r2, [r7, #3]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	011b      	lsls	r3, r3, #4
 8004cee:	1a9b      	subs	r3, r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4403      	add	r3, r0
 8004cf4:	3328      	adds	r3, #40	@ 0x28
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8470 	beq.w	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004d06:	78fa      	ldrb	r2, [r7, #3]
 8004d08:	6879      	ldr	r1, [r7, #4]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	1a9b      	subs	r3, r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	333c      	adds	r3, #60	@ 0x3c
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	f083 0301 	eor.w	r3, r3, #1
 8004d1e:	b2d8      	uxtb	r0, r3
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	4613      	mov	r3, r2
 8004d24:	011b      	lsls	r3, r3, #4
 8004d26:	1a9b      	subs	r3, r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	333c      	adds	r3, #60	@ 0x3c
 8004d2e:	4602      	mov	r2, r0
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	f000 bc58 	b.w	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004d36:	78fa      	ldrb	r2, [r7, #3]
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	1a9b      	subs	r3, r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	333c      	adds	r3, #60	@ 0x3c
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	f083 0301 	eor.w	r3, r3, #1
 8004d4e:	b2d8      	uxtb	r0, r3
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	011b      	lsls	r3, r3, #4
 8004d56:	1a9b      	subs	r3, r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	440b      	add	r3, r1
 8004d5c:	333c      	adds	r3, #60	@ 0x3c
 8004d5e:	4602      	mov	r2, r0
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	f000 bc40 	b.w	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	78fa      	ldrb	r2, [r7, #3]
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f003 fcfb 	bl	800876a <USB_ReadChInterrupts>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d131      	bne.n	8004de2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004d7e:	78fb      	ldrb	r3, [r7, #3]
 8004d80:	015a      	lsls	r2, r3, #5
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	331a      	adds	r3, #26
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	f040 841f 	bne.w	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004da8:	78fa      	ldrb	r2, [r7, #3]
 8004daa:	6879      	ldr	r1, [r7, #4]
 8004dac:	4613      	mov	r3, r2
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	331b      	adds	r3, #27
 8004db8:	2201      	movs	r2, #1
 8004dba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	011b      	lsls	r3, r3, #4
 8004dc4:	1a9b      	subs	r3, r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	440b      	add	r3, r1
 8004dca:	334d      	adds	r3, #77	@ 0x4d
 8004dcc:	2203      	movs	r2, #3
 8004dce:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	4611      	mov	r1, r2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f004 fa6a 	bl	80092b2 <USB_HC_Halt>
 8004dde:	f000 bc02 	b.w	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	4611      	mov	r1, r2
 8004dea:	4618      	mov	r0, r3
 8004dec:	f003 fcbd 	bl	800876a <USB_ReadChInterrupts>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	f040 8305 	bne.w	8005406 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004dfc:	78fb      	ldrb	r3, [r7, #3]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004e0e:	78fa      	ldrb	r2, [r7, #3]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	334d      	adds	r3, #77	@ 0x4d
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d114      	bne.n	8004e4e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	334d      	adds	r3, #77	@ 0x4d
 8004e34:	2202      	movs	r2, #2
 8004e36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	011b      	lsls	r3, r3, #4
 8004e40:	1a9b      	subs	r3, r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	440b      	add	r3, r1
 8004e46:	334c      	adds	r3, #76	@ 0x4c
 8004e48:	2201      	movs	r2, #1
 8004e4a:	701a      	strb	r2, [r3, #0]
 8004e4c:	e2cc      	b.n	80053e8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	011b      	lsls	r3, r3, #4
 8004e56:	1a9b      	subs	r3, r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	440b      	add	r3, r1
 8004e5c:	334d      	adds	r3, #77	@ 0x4d
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b06      	cmp	r3, #6
 8004e62:	d114      	bne.n	8004e8e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	334d      	adds	r3, #77	@ 0x4d
 8004e74:	2202      	movs	r2, #2
 8004e76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	334c      	adds	r3, #76	@ 0x4c
 8004e88:	2205      	movs	r2, #5
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	e2ac      	b.n	80053e8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004e8e:	78fa      	ldrb	r2, [r7, #3]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	334d      	adds	r3, #77	@ 0x4d
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	2b07      	cmp	r3, #7
 8004ea2:	d00b      	beq.n	8004ebc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004ea4:	78fa      	ldrb	r2, [r7, #3]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	011b      	lsls	r3, r3, #4
 8004eac:	1a9b      	subs	r3, r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	334d      	adds	r3, #77	@ 0x4d
 8004eb4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004eb6:	2b09      	cmp	r3, #9
 8004eb8:	f040 80a6 	bne.w	8005008 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ebc:	78fa      	ldrb	r2, [r7, #3]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	334d      	adds	r3, #77	@ 0x4d
 8004ecc:	2202      	movs	r2, #2
 8004ece:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ed0:	78fa      	ldrb	r2, [r7, #3]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	011b      	lsls	r3, r3, #4
 8004ed8:	1a9b      	subs	r3, r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	3344      	adds	r3, #68	@ 0x44
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	1c59      	adds	r1, r3, #1
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4403      	add	r3, r0
 8004ef0:	3344      	adds	r3, #68	@ 0x44
 8004ef2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	3344      	adds	r3, #68	@ 0x44
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d943      	bls.n	8004f92 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	1a9b      	subs	r3, r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	3344      	adds	r3, #68	@ 0x44
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	011b      	lsls	r3, r3, #4
 8004f26:	1a9b      	subs	r3, r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	331a      	adds	r3, #26
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d123      	bne.n	8004f7c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	1a9b      	subs	r3, r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	331b      	adds	r3, #27
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	1a9b      	subs	r3, r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	331c      	adds	r3, #28
 8004f58:	2200      	movs	r2, #0
 8004f5a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004f7c:	78fa      	ldrb	r2, [r7, #3]
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4613      	mov	r3, r2
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	1a9b      	subs	r3, r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	334c      	adds	r3, #76	@ 0x4c
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004f90:	e229      	b.n	80053e6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f92:	78fa      	ldrb	r2, [r7, #3]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	334c      	adds	r3, #76	@ 0x4c
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fa6:	78fa      	ldrb	r2, [r7, #3]
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	3326      	adds	r3, #38	@ 0x26
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00b      	beq.n	8004fd4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004fbc:	78fa      	ldrb	r2, [r7, #3]
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	1a9b      	subs	r3, r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	3326      	adds	r3, #38	@ 0x26
 8004fcc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	f040 8209 	bne.w	80053e6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004fea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ff2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005000:	461a      	mov	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005006:	e1ee      	b.n	80053e6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	6879      	ldr	r1, [r7, #4]
 800500c:	4613      	mov	r3, r2
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	1a9b      	subs	r3, r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	440b      	add	r3, r1
 8005016:	334d      	adds	r3, #77	@ 0x4d
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	2b05      	cmp	r3, #5
 800501c:	f040 80c8 	bne.w	80051b0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	334d      	adds	r3, #77	@ 0x4d
 8005030:	2202      	movs	r2, #2
 8005032:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005034:	78fa      	ldrb	r2, [r7, #3]
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	4613      	mov	r3, r2
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	1a9b      	subs	r3, r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	440b      	add	r3, r1
 8005042:	331b      	adds	r3, #27
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b01      	cmp	r3, #1
 8005048:	f040 81ce 	bne.w	80053e8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	3326      	adds	r3, #38	@ 0x26
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b03      	cmp	r3, #3
 8005060:	d16b      	bne.n	800513a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8005062:	78fa      	ldrb	r2, [r7, #3]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	3348      	adds	r3, #72	@ 0x48
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	1c59      	adds	r1, r3, #1
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4613      	mov	r3, r2
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	1a9b      	subs	r3, r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4403      	add	r3, r0
 8005082:	3348      	adds	r3, #72	@ 0x48
 8005084:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	3348      	adds	r3, #72	@ 0x48
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b02      	cmp	r3, #2
 800509a:	d943      	bls.n	8005124 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	6879      	ldr	r1, [r7, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	1a9b      	subs	r3, r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	3348      	adds	r3, #72	@ 0x48
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	331b      	adds	r3, #27
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80050c4:	78fa      	ldrb	r2, [r7, #3]
 80050c6:	6879      	ldr	r1, [r7, #4]
 80050c8:	4613      	mov	r3, r2
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	1a9b      	subs	r3, r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	440b      	add	r3, r1
 80050d2:	3344      	adds	r3, #68	@ 0x44
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d809      	bhi.n	80050ee <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	331c      	adds	r3, #28
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	440a      	add	r2, r1
 8005104:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800510c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800510e:	78fa      	ldrb	r2, [r7, #3]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	1a9b      	subs	r3, r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	334c      	adds	r3, #76	@ 0x4c
 800511e:	2204      	movs	r2, #4
 8005120:	701a      	strb	r2, [r3, #0]
 8005122:	e014      	b.n	800514e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	1a9b      	subs	r3, r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	334c      	adds	r3, #76	@ 0x4c
 8005134:	2202      	movs	r2, #2
 8005136:	701a      	strb	r2, [r3, #0]
 8005138:	e009      	b.n	800514e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800513a:	78fa      	ldrb	r2, [r7, #3]
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	440b      	add	r3, r1
 8005148:	334c      	adds	r3, #76	@ 0x4c
 800514a:	2202      	movs	r2, #2
 800514c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	011b      	lsls	r3, r3, #4
 8005156:	1a9b      	subs	r3, r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	3326      	adds	r3, #38	@ 0x26
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005164:	78fa      	ldrb	r2, [r7, #3]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	1a9b      	subs	r3, r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	3326      	adds	r3, #38	@ 0x26
 8005174:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005176:	2b02      	cmp	r3, #2
 8005178:	f040 8136 	bne.w	80053e8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	015a      	lsls	r2, r3, #5
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005192:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800519a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a8:	461a      	mov	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6013      	str	r3, [r2, #0]
 80051ae:	e11b      	b.n	80053e8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80051b0:	78fa      	ldrb	r2, [r7, #3]
 80051b2:	6879      	ldr	r1, [r7, #4]
 80051b4:	4613      	mov	r3, r2
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	1a9b      	subs	r3, r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	440b      	add	r3, r1
 80051be:	334d      	adds	r3, #77	@ 0x4d
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	f040 8081 	bne.w	80052ca <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051c8:	78fa      	ldrb	r2, [r7, #3]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	334d      	adds	r3, #77	@ 0x4d
 80051d8:	2202      	movs	r2, #2
 80051da:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	331b      	adds	r3, #27
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	f040 80fa 	bne.w	80053e8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	334c      	adds	r3, #76	@ 0x4c
 8005204:	2202      	movs	r2, #2
 8005206:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	015a      	lsls	r2, r3, #5
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	78fa      	ldrb	r2, [r7, #3]
 8005218:	0151      	lsls	r1, r2, #5
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	440a      	add	r2, r1
 800521e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005226:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005228:	78fb      	ldrb	r3, [r7, #3]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	78fa      	ldrb	r2, [r7, #3]
 8005238:	0151      	lsls	r1, r2, #5
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	440a      	add	r2, r1
 800523e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005246:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	440a      	add	r2, r1
 800525e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005262:	f023 0320 	bic.w	r3, r3, #32
 8005266:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	6879      	ldr	r1, [r7, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	3326      	adds	r3, #38	@ 0x26
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800527e:	78fa      	ldrb	r2, [r7, #3]
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	4613      	mov	r3, r2
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	440b      	add	r3, r1
 800528c:	3326      	adds	r3, #38	@ 0x26
 800528e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005290:	2b02      	cmp	r3, #2
 8005292:	f040 80a9 	bne.w	80053e8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	4413      	add	r3, r2
 800529e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80052ac:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80052b4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80052b6:	78fb      	ldrb	r3, [r7, #3]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c2:	461a      	mov	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e08e      	b.n	80053e8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	334d      	adds	r3, #77	@ 0x4d
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d143      	bne.n	8005368 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334d      	adds	r3, #77	@ 0x4d
 80052f0:	2202      	movs	r2, #2
 80052f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052f4:	78fa      	ldrb	r2, [r7, #3]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	011b      	lsls	r3, r3, #4
 80052fc:	1a9b      	subs	r3, r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	334c      	adds	r3, #76	@ 0x4c
 8005304:	2202      	movs	r2, #2
 8005306:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	3326      	adds	r3, #38	@ 0x26
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800531e:	78fa      	ldrb	r2, [r7, #3]
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	1a9b      	subs	r3, r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3326      	adds	r3, #38	@ 0x26
 800532e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005330:	2b02      	cmp	r3, #2
 8005332:	d159      	bne.n	80053e8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800534a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005352:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	4413      	add	r3, r2
 800535c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005360:	461a      	mov	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e03f      	b.n	80053e8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	334d      	adds	r3, #77	@ 0x4d
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b08      	cmp	r3, #8
 800537c:	d126      	bne.n	80053cc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	334d      	adds	r3, #77	@ 0x4d
 800538e:	2202      	movs	r2, #2
 8005390:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	3344      	adds	r3, #68	@ 0x44
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	1c59      	adds	r1, r3, #1
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	1a9b      	subs	r3, r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4403      	add	r3, r0
 80053b2:	3344      	adds	r3, #68	@ 0x44
 80053b4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80053b6:	78fa      	ldrb	r2, [r7, #3]
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	334c      	adds	r3, #76	@ 0x4c
 80053c6:	2204      	movs	r2, #4
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	e00d      	b.n	80053e8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	4613      	mov	r3, r2
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	1a9b      	subs	r3, r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	440b      	add	r3, r1
 80053da:	334d      	adds	r3, #77	@ 0x4d
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	f000 8100 	beq.w	80055e4 <HCD_HC_IN_IRQHandler+0xcca>
 80053e4:	e000      	b.n	80053e8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80053e6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	334c      	adds	r3, #76	@ 0x4c
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	78fb      	ldrb	r3, [r7, #3]
 80053fc:	4619      	mov	r1, r3
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f006 fab0 	bl	800b964 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005404:	e0ef      	b.n	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	78fa      	ldrb	r2, [r7, #3]
 800540c:	4611      	mov	r1, r2
 800540e:	4618      	mov	r0, r3
 8005410:	f003 f9ab 	bl	800876a <USB_ReadChInterrupts>
 8005414:	4603      	mov	r3, r0
 8005416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541a:	2b40      	cmp	r3, #64	@ 0x40
 800541c:	d12f      	bne.n	800547e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800542a:	461a      	mov	r2, r3
 800542c:	2340      	movs	r3, #64	@ 0x40
 800542e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005430:	78fa      	ldrb	r2, [r7, #3]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	011b      	lsls	r3, r3, #4
 8005438:	1a9b      	subs	r3, r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	440b      	add	r3, r1
 800543e:	334d      	adds	r3, #77	@ 0x4d
 8005440:	2205      	movs	r2, #5
 8005442:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005444:	78fa      	ldrb	r2, [r7, #3]
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	1a9b      	subs	r3, r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	331a      	adds	r3, #26
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	6879      	ldr	r1, [r7, #4]
 800545e:	4613      	mov	r3, r2
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	1a9b      	subs	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	440b      	add	r3, r1
 8005468:	3344      	adds	r3, #68	@ 0x44
 800546a:	2200      	movs	r2, #0
 800546c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	4611      	mov	r1, r2
 8005476:	4618      	mov	r0, r3
 8005478:	f003 ff1b 	bl	80092b2 <USB_HC_Halt>
 800547c:	e0b3      	b.n	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	78fa      	ldrb	r2, [r7, #3]
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f003 f96f 	bl	800876a <USB_ReadChInterrupts>
 800548c:	4603      	mov	r3, r0
 800548e:	f003 0310 	and.w	r3, r3, #16
 8005492:	2b10      	cmp	r3, #16
 8005494:	f040 80a7 	bne.w	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005498:	78fa      	ldrb	r2, [r7, #3]
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	3326      	adds	r3, #38	@ 0x26
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b03      	cmp	r3, #3
 80054ac:	d11b      	bne.n	80054e6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80054ae:	78fa      	ldrb	r2, [r7, #3]
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	4613      	mov	r3, r2
 80054b4:	011b      	lsls	r3, r3, #4
 80054b6:	1a9b      	subs	r3, r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	440b      	add	r3, r1
 80054bc:	3344      	adds	r3, #68	@ 0x44
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	6879      	ldr	r1, [r7, #4]
 80054c6:	4613      	mov	r3, r2
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	440b      	add	r3, r1
 80054d0:	334d      	adds	r3, #77	@ 0x4d
 80054d2:	2204      	movs	r2, #4
 80054d4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	78fa      	ldrb	r2, [r7, #3]
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f003 fee7 	bl	80092b2 <USB_HC_Halt>
 80054e4:	e03f      	b.n	8005566 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3326      	adds	r3, #38	@ 0x26
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	6879      	ldr	r1, [r7, #4]
 8005500:	4613      	mov	r3, r2
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3326      	adds	r3, #38	@ 0x26
 800550c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800550e:	2b02      	cmp	r3, #2
 8005510:	d129      	bne.n	8005566 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	3344      	adds	r3, #68	@ 0x44
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	799b      	ldrb	r3, [r3, #6]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <HCD_HC_IN_IRQHandler+0xc2a>
 800552e:	78fa      	ldrb	r2, [r7, #3]
 8005530:	6879      	ldr	r1, [r7, #4]
 8005532:	4613      	mov	r3, r2
 8005534:	011b      	lsls	r3, r3, #4
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	440b      	add	r3, r1
 800553c:	331b      	adds	r3, #27
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d110      	bne.n	8005566 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	334d      	adds	r3, #77	@ 0x4d
 8005554:	2204      	movs	r2, #4
 8005556:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f003 fea6 	bl	80092b2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	6879      	ldr	r1, [r7, #4]
 800556a:	4613      	mov	r3, r2
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	440b      	add	r3, r1
 8005574:	331b      	adds	r3, #27
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d129      	bne.n	80055d0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800557c:	78fa      	ldrb	r2, [r7, #3]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	011b      	lsls	r3, r3, #4
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	331b      	adds	r3, #27
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4413      	add	r3, r2
 8005598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	78fa      	ldrb	r2, [r7, #3]
 80055a0:	0151      	lsls	r1, r2, #5
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	440a      	add	r2, r1
 80055a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055ae:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055ca:	f043 0320 	orr.w	r3, r3, #32
 80055ce:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055dc:	461a      	mov	r2, r3
 80055de:	2310      	movs	r3, #16
 80055e0:	6093      	str	r3, [r2, #8]
 80055e2:	e000      	b.n	80055e6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80055e4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	78fa      	ldrb	r2, [r7, #3]
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f003 f8ad 	bl	800876a <USB_ReadChInterrupts>
 8005610:	4603      	mov	r3, r0
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b04      	cmp	r3, #4
 8005618:	d11b      	bne.n	8005652 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4413      	add	r3, r2
 8005622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005626:	461a      	mov	r2, r3
 8005628:	2304      	movs	r3, #4
 800562a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800562c:	78fa      	ldrb	r2, [r7, #3]
 800562e:	6879      	ldr	r1, [r7, #4]
 8005630:	4613      	mov	r3, r2
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	1a9b      	subs	r3, r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	440b      	add	r3, r1
 800563a:	334d      	adds	r3, #77	@ 0x4d
 800563c:	2207      	movs	r2, #7
 800563e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f003 fe32 	bl	80092b2 <USB_HC_Halt>
 800564e:	f000 bc89 	b.w	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	78fa      	ldrb	r2, [r7, #3]
 8005658:	4611      	mov	r1, r2
 800565a:	4618      	mov	r0, r3
 800565c:	f003 f885 	bl	800876a <USB_ReadChInterrupts>
 8005660:	4603      	mov	r3, r0
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b20      	cmp	r3, #32
 8005668:	f040 8082 	bne.w	8005770 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	015a      	lsls	r2, r3, #5
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4413      	add	r3, r2
 8005674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005678:	461a      	mov	r2, r3
 800567a:	2320      	movs	r3, #32
 800567c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	4613      	mov	r3, r2
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	440b      	add	r3, r1
 800568c:	3319      	adds	r3, #25
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d124      	bne.n	80056de <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005694:	78fa      	ldrb	r2, [r7, #3]
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	4613      	mov	r3, r2
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	1a9b      	subs	r3, r3, r2
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	440b      	add	r3, r1
 80056a2:	3319      	adds	r3, #25
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80056a8:	78fa      	ldrb	r2, [r7, #3]
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	334c      	adds	r3, #76	@ 0x4c
 80056b8:	2202      	movs	r2, #2
 80056ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80056bc:	78fa      	ldrb	r2, [r7, #3]
 80056be:	6879      	ldr	r1, [r7, #4]
 80056c0:	4613      	mov	r3, r2
 80056c2:	011b      	lsls	r3, r3, #4
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	334d      	adds	r3, #77	@ 0x4d
 80056cc:	2203      	movs	r2, #3
 80056ce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	4611      	mov	r1, r2
 80056d8:	4618      	mov	r0, r3
 80056da:	f003 fdea 	bl	80092b2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80056de:	78fa      	ldrb	r2, [r7, #3]
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	331a      	adds	r3, #26
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	f040 8437 	bne.w	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	331b      	adds	r3, #27
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f040 842b 	bne.w	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800570e:	78fa      	ldrb	r2, [r7, #3]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	011b      	lsls	r3, r3, #4
 8005716:	1a9b      	subs	r3, r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	3326      	adds	r3, #38	@ 0x26
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d009      	beq.n	8005738 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005724:	78fa      	ldrb	r2, [r7, #3]
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	4613      	mov	r3, r2
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	331b      	adds	r3, #27
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	334d      	adds	r3, #77	@ 0x4d
 8005748:	2203      	movs	r2, #3
 800574a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	78fa      	ldrb	r2, [r7, #3]
 8005752:	4611      	mov	r1, r2
 8005754:	4618      	mov	r0, r3
 8005756:	f003 fdac 	bl	80092b2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800575a:	78fa      	ldrb	r2, [r7, #3]
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	011b      	lsls	r3, r3, #4
 8005762:	1a9b      	subs	r3, r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	3344      	adds	r3, #68	@ 0x44
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e3f9      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	78fa      	ldrb	r2, [r7, #3]
 8005776:	4611      	mov	r1, r2
 8005778:	4618      	mov	r0, r3
 800577a:	f002 fff6 	bl	800876a <USB_ReadChInterrupts>
 800577e:	4603      	mov	r3, r0
 8005780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005784:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005788:	d111      	bne.n	80057ae <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005796:	461a      	mov	r2, r3
 8005798:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800579c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 fd83 	bl	80092b2 <USB_HC_Halt>
 80057ac:	e3da      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	4611      	mov	r1, r2
 80057b6:	4618      	mov	r0, r3
 80057b8:	f002 ffd7 	bl	800876a <USB_ReadChInterrupts>
 80057bc:	4603      	mov	r3, r0
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d168      	bne.n	8005898 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	440b      	add	r3, r1
 80057d4:	3344      	adds	r3, #68	@ 0x44
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	78fa      	ldrb	r2, [r7, #3]
 80057e0:	4611      	mov	r1, r2
 80057e2:	4618      	mov	r0, r3
 80057e4:	f002 ffc1 	bl	800876a <USB_ReadChInterrupts>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ee:	2b40      	cmp	r3, #64	@ 0x40
 80057f0:	d112      	bne.n	8005818 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80057f2:	78fa      	ldrb	r2, [r7, #3]
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	4613      	mov	r3, r2
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	1a9b      	subs	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	440b      	add	r3, r1
 8005800:	3319      	adds	r3, #25
 8005802:	2201      	movs	r2, #1
 8005804:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005812:	461a      	mov	r2, r3
 8005814:	2340      	movs	r3, #64	@ 0x40
 8005816:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005818:	78fa      	ldrb	r2, [r7, #3]
 800581a:	6879      	ldr	r1, [r7, #4]
 800581c:	4613      	mov	r3, r2
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	1a9b      	subs	r3, r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	440b      	add	r3, r1
 8005826:	331b      	adds	r3, #27
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d019      	beq.n	8005862 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	6879      	ldr	r1, [r7, #4]
 8005832:	4613      	mov	r3, r2
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	440b      	add	r3, r1
 800583c:	331b      	adds	r3, #27
 800583e:	2200      	movs	r2, #0
 8005840:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005842:	78fb      	ldrb	r3, [r7, #3]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	4413      	add	r3, r2
 800584a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	78fa      	ldrb	r2, [r7, #3]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	440a      	add	r2, r1
 8005858:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800585c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005860:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800586e:	461a      	mov	r2, r3
 8005870:	2301      	movs	r3, #1
 8005872:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005874:	78fa      	ldrb	r2, [r7, #3]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	011b      	lsls	r3, r3, #4
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	334d      	adds	r3, #77	@ 0x4d
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	4611      	mov	r1, r2
 8005890:	4618      	mov	r0, r3
 8005892:	f003 fd0e 	bl	80092b2 <USB_HC_Halt>
 8005896:	e365      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f002 ff62 	bl	800876a <USB_ReadChInterrupts>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ac:	2b40      	cmp	r3, #64	@ 0x40
 80058ae:	d139      	bne.n	8005924 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80058b0:	78fa      	ldrb	r2, [r7, #3]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	334d      	adds	r3, #77	@ 0x4d
 80058c0:	2205      	movs	r2, #5
 80058c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	440b      	add	r3, r1
 80058d2:	331a      	adds	r3, #26
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80058da:	78fa      	ldrb	r2, [r7, #3]
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	3319      	adds	r3, #25
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	1a9b      	subs	r3, r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	3344      	adds	r3, #68	@ 0x44
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	78fa      	ldrb	r2, [r7, #3]
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f003 fcd1 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800591c:	461a      	mov	r2, r3
 800591e:	2340      	movs	r3, #64	@ 0x40
 8005920:	6093      	str	r3, [r2, #8]
 8005922:	e31f      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f002 ff1c 	bl	800876a <USB_ReadChInterrupts>
 8005932:	4603      	mov	r3, r0
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b08      	cmp	r3, #8
 800593a:	d11a      	bne.n	8005972 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800593c:	78fb      	ldrb	r3, [r7, #3]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4413      	add	r3, r2
 8005944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005948:	461a      	mov	r2, r3
 800594a:	2308      	movs	r3, #8
 800594c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800594e:	78fa      	ldrb	r2, [r7, #3]
 8005950:	6879      	ldr	r1, [r7, #4]
 8005952:	4613      	mov	r3, r2
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	1a9b      	subs	r3, r3, r2
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	440b      	add	r3, r1
 800595c:	334d      	adds	r3, #77	@ 0x4d
 800595e:	2206      	movs	r2, #6
 8005960:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	78fa      	ldrb	r2, [r7, #3]
 8005968:	4611      	mov	r1, r2
 800596a:	4618      	mov	r0, r3
 800596c:	f003 fca1 	bl	80092b2 <USB_HC_Halt>
 8005970:	e2f8      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	4611      	mov	r1, r2
 800597a:	4618      	mov	r0, r3
 800597c:	f002 fef5 	bl	800876a <USB_ReadChInterrupts>
 8005980:	4603      	mov	r3, r0
 8005982:	f003 0310 	and.w	r3, r3, #16
 8005986:	2b10      	cmp	r3, #16
 8005988:	d144      	bne.n	8005a14 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	3344      	adds	r3, #68	@ 0x44
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800599e:	78fa      	ldrb	r2, [r7, #3]
 80059a0:	6879      	ldr	r1, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	011b      	lsls	r3, r3, #4
 80059a6:	1a9b      	subs	r3, r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	334d      	adds	r3, #77	@ 0x4d
 80059ae:	2204      	movs	r2, #4
 80059b0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80059b2:	78fa      	ldrb	r2, [r7, #3]
 80059b4:	6879      	ldr	r1, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	1a9b      	subs	r3, r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	3319      	adds	r3, #25
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d114      	bne.n	80059f2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	6879      	ldr	r1, [r7, #4]
 80059cc:	4613      	mov	r3, r2
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	1a9b      	subs	r3, r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	3318      	adds	r3, #24
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80059de:	78fa      	ldrb	r2, [r7, #3]
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4613      	mov	r3, r2
 80059e4:	011b      	lsls	r3, r3, #4
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	440b      	add	r3, r1
 80059ec:	3319      	adds	r3, #25
 80059ee:	2201      	movs	r2, #1
 80059f0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	78fa      	ldrb	r2, [r7, #3]
 80059f8:	4611      	mov	r1, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	f003 fc59 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2310      	movs	r3, #16
 8005a10:	6093      	str	r3, [r2, #8]
 8005a12:	e2a7      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	4611      	mov	r1, r2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f002 fea4 	bl	800876a <USB_ReadChInterrupts>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a28:	2b80      	cmp	r3, #128	@ 0x80
 8005a2a:	f040 8083 	bne.w	8005b34 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	799b      	ldrb	r3, [r3, #6]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d111      	bne.n	8005a5a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005a36:	78fa      	ldrb	r2, [r7, #3]
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	011b      	lsls	r3, r3, #4
 8005a3e:	1a9b      	subs	r3, r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	334d      	adds	r3, #77	@ 0x4d
 8005a46:	2207      	movs	r2, #7
 8005a48:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	4611      	mov	r1, r2
 8005a52:	4618      	mov	r0, r3
 8005a54:	f003 fc2d 	bl	80092b2 <USB_HC_Halt>
 8005a58:	e062      	b.n	8005b20 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005a5a:	78fa      	ldrb	r2, [r7, #3]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	1a9b      	subs	r3, r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	3344      	adds	r3, #68	@ 0x44
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	1c59      	adds	r1, r3, #1
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4403      	add	r3, r0
 8005a7a:	3344      	adds	r3, #68	@ 0x44
 8005a7c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3344      	adds	r3, #68	@ 0x44
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d922      	bls.n	8005ada <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005a94:	78fa      	ldrb	r2, [r7, #3]
 8005a96:	6879      	ldr	r1, [r7, #4]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	1a9b      	subs	r3, r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	3344      	adds	r3, #68	@ 0x44
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005aa8:	78fa      	ldrb	r2, [r7, #3]
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	4613      	mov	r3, r2
 8005aae:	011b      	lsls	r3, r3, #4
 8005ab0:	1a9b      	subs	r3, r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	440b      	add	r3, r1
 8005ab6:	334c      	adds	r3, #76	@ 0x4c
 8005ab8:	2204      	movs	r2, #4
 8005aba:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005abc:	78fa      	ldrb	r2, [r7, #3]
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	1a9b      	subs	r3, r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	440b      	add	r3, r1
 8005aca:	334c      	adds	r3, #76	@ 0x4c
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	78fb      	ldrb	r3, [r7, #3]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f005 ff46 	bl	800b964 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ad8:	e022      	b.n	8005b20 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ada:	78fa      	ldrb	r2, [r7, #3]
 8005adc:	6879      	ldr	r1, [r7, #4]
 8005ade:	4613      	mov	r3, r2
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	1a9b      	subs	r3, r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	334c      	adds	r3, #76	@ 0x4c
 8005aea:	2202      	movs	r2, #2
 8005aec:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005aee:	78fb      	ldrb	r3, [r7, #3]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b04:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b0c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005b0e:	78fb      	ldrb	r3, [r7, #3]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	2380      	movs	r3, #128	@ 0x80
 8005b30:	6093      	str	r3, [r2, #8]
 8005b32:	e217      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	78fa      	ldrb	r2, [r7, #3]
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f002 fe14 	bl	800876a <USB_ReadChInterrupts>
 8005b42:	4603      	mov	r3, r0
 8005b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b4c:	d11b      	bne.n	8005b86 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005b4e:	78fa      	ldrb	r2, [r7, #3]
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	4613      	mov	r3, r2
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	440b      	add	r3, r1
 8005b5c:	334d      	adds	r3, #77	@ 0x4d
 8005b5e:	2209      	movs	r2, #9
 8005b60:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	78fa      	ldrb	r2, [r7, #3]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f003 fba1 	bl	80092b2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b82:	6093      	str	r3, [r2, #8]
 8005b84:	e1ee      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	78fa      	ldrb	r2, [r7, #3]
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f002 fdeb 	bl	800876a <USB_ReadChInterrupts>
 8005b94:	4603      	mov	r3, r0
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	f040 81df 	bne.w	8005f5e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bac:	461a      	mov	r2, r3
 8005bae:	2302      	movs	r3, #2
 8005bb0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005bb2:	78fa      	ldrb	r2, [r7, #3]
 8005bb4:	6879      	ldr	r1, [r7, #4]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	334d      	adds	r3, #77	@ 0x4d
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	f040 8093 	bne.w	8005cf0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bca:	78fa      	ldrb	r2, [r7, #3]
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	011b      	lsls	r3, r3, #4
 8005bd2:	1a9b      	subs	r3, r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	334d      	adds	r3, #77	@ 0x4d
 8005bda:	2202      	movs	r2, #2
 8005bdc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005bde:	78fa      	ldrb	r2, [r7, #3]
 8005be0:	6879      	ldr	r1, [r7, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	1a9b      	subs	r3, r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	334c      	adds	r3, #76	@ 0x4c
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	1a9b      	subs	r3, r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	440b      	add	r3, r1
 8005c00:	3326      	adds	r3, #38	@ 0x26
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d00b      	beq.n	8005c20 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005c08:	78fa      	ldrb	r2, [r7, #3]
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	1a9b      	subs	r3, r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	3326      	adds	r3, #38	@ 0x26
 8005c18:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	f040 8190 	bne.w	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	799b      	ldrb	r3, [r3, #6]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d115      	bne.n	8005c54 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005c28:	78fa      	ldrb	r2, [r7, #3]
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	1a9b      	subs	r3, r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	440b      	add	r3, r1
 8005c36:	333d      	adds	r3, #61	@ 0x3d
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	78fa      	ldrb	r2, [r7, #3]
 8005c3c:	f083 0301 	eor.w	r3, r3, #1
 8005c40:	b2d8      	uxtb	r0, r3
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	4613      	mov	r3, r2
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	1a9b      	subs	r3, r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	333d      	adds	r3, #61	@ 0x3d
 8005c50:	4602      	mov	r2, r0
 8005c52:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	799b      	ldrb	r3, [r3, #6]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	f040 8171 	bne.w	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
 8005c5e:	78fa      	ldrb	r2, [r7, #3]
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	4613      	mov	r3, r2
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	1a9b      	subs	r3, r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	440b      	add	r3, r1
 8005c6c:	3334      	adds	r3, #52	@ 0x34
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8165 	beq.w	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005c76:	78fa      	ldrb	r2, [r7, #3]
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	1a9b      	subs	r3, r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	3334      	adds	r3, #52	@ 0x34
 8005c86:	6819      	ldr	r1, [r3, #0]
 8005c88:	78fa      	ldrb	r2, [r7, #3]
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	011b      	lsls	r3, r3, #4
 8005c90:	1a9b      	subs	r3, r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4403      	add	r3, r0
 8005c96:	3328      	adds	r3, #40	@ 0x28
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	440b      	add	r3, r1
 8005c9c:	1e59      	subs	r1, r3, #1
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	4403      	add	r3, r0
 8005cac:	3328      	adds	r3, #40	@ 0x28
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cb4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 813f 	beq.w	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005cc2:	78fa      	ldrb	r2, [r7, #3]
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	011b      	lsls	r3, r3, #4
 8005cca:	1a9b      	subs	r3, r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	440b      	add	r3, r1
 8005cd0:	333d      	adds	r3, #61	@ 0x3d
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	f083 0301 	eor.w	r3, r3, #1
 8005cda:	b2d8      	uxtb	r0, r3
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	333d      	adds	r3, #61	@ 0x3d
 8005cea:	4602      	mov	r2, r0
 8005cec:	701a      	strb	r2, [r3, #0]
 8005cee:	e127      	b.n	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005cf0:	78fa      	ldrb	r2, [r7, #3]
 8005cf2:	6879      	ldr	r1, [r7, #4]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	1a9b      	subs	r3, r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	440b      	add	r3, r1
 8005cfe:	334d      	adds	r3, #77	@ 0x4d
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d120      	bne.n	8005d48 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	011b      	lsls	r3, r3, #4
 8005d0e:	1a9b      	subs	r3, r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	440b      	add	r3, r1
 8005d14:	334d      	adds	r3, #77	@ 0x4d
 8005d16:	2202      	movs	r2, #2
 8005d18:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005d1a:	78fa      	ldrb	r2, [r7, #3]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	1a9b      	subs	r3, r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	331b      	adds	r3, #27
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	f040 8107 	bne.w	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d32:	78fa      	ldrb	r2, [r7, #3]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	334c      	adds	r3, #76	@ 0x4c
 8005d42:	2202      	movs	r2, #2
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e0fb      	b.n	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005d48:	78fa      	ldrb	r2, [r7, #3]
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	011b      	lsls	r3, r3, #4
 8005d50:	1a9b      	subs	r3, r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	440b      	add	r3, r1
 8005d56:	334d      	adds	r3, #77	@ 0x4d
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d13a      	bne.n	8005dd4 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005d5e:	78fa      	ldrb	r2, [r7, #3]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	1a9b      	subs	r3, r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	334d      	adds	r3, #77	@ 0x4d
 8005d6e:	2202      	movs	r2, #2
 8005d70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d72:	78fa      	ldrb	r2, [r7, #3]
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	334c      	adds	r3, #76	@ 0x4c
 8005d82:	2202      	movs	r2, #2
 8005d84:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	331b      	adds	r3, #27
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	f040 80d1 	bne.w	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	6879      	ldr	r1, [r7, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	1a9b      	subs	r3, r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	440b      	add	r3, r1
 8005dac:	331b      	adds	r3, #27
 8005dae:	2200      	movs	r2, #0
 8005db0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005db2:	78fb      	ldrb	r3, [r7, #3]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	78fa      	ldrb	r2, [r7, #3]
 8005dc2:	0151      	lsls	r1, r2, #5
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	440a      	add	r2, r1
 8005dc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dd0:	6053      	str	r3, [r2, #4]
 8005dd2:	e0b5      	b.n	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005dd4:	78fa      	ldrb	r2, [r7, #3]
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	1a9b      	subs	r3, r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	334d      	adds	r3, #77	@ 0x4d
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d114      	bne.n	8005e14 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005dea:	78fa      	ldrb	r2, [r7, #3]
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	4613      	mov	r3, r2
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	1a9b      	subs	r3, r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	334d      	adds	r3, #77	@ 0x4d
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005dfe:	78fa      	ldrb	r2, [r7, #3]
 8005e00:	6879      	ldr	r1, [r7, #4]
 8005e02:	4613      	mov	r3, r2
 8005e04:	011b      	lsls	r3, r3, #4
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	440b      	add	r3, r1
 8005e0c:	334c      	adds	r3, #76	@ 0x4c
 8005e0e:	2202      	movs	r2, #2
 8005e10:	701a      	strb	r2, [r3, #0]
 8005e12:	e095      	b.n	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005e14:	78fa      	ldrb	r2, [r7, #3]
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	1a9b      	subs	r3, r3, r2
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	440b      	add	r3, r1
 8005e22:	334d      	adds	r3, #77	@ 0x4d
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b06      	cmp	r3, #6
 8005e28:	d114      	bne.n	8005e54 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	334d      	adds	r3, #77	@ 0x4d
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	6879      	ldr	r1, [r7, #4]
 8005e42:	4613      	mov	r3, r2
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	1a9b      	subs	r3, r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	440b      	add	r3, r1
 8005e4c:	334c      	adds	r3, #76	@ 0x4c
 8005e4e:	2205      	movs	r2, #5
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e075      	b.n	8005f40 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005e54:	78fa      	ldrb	r2, [r7, #3]
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	1a9b      	subs	r3, r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	440b      	add	r3, r1
 8005e62:	334d      	adds	r3, #77	@ 0x4d
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b07      	cmp	r3, #7
 8005e68:	d00a      	beq.n	8005e80 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	334d      	adds	r3, #77	@ 0x4d
 8005e7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005e7c:	2b09      	cmp	r3, #9
 8005e7e:	d170      	bne.n	8005f62 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005e80:	78fa      	ldrb	r2, [r7, #3]
 8005e82:	6879      	ldr	r1, [r7, #4]
 8005e84:	4613      	mov	r3, r2
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	1a9b      	subs	r3, r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	440b      	add	r3, r1
 8005e8e:	334d      	adds	r3, #77	@ 0x4d
 8005e90:	2202      	movs	r2, #2
 8005e92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005e94:	78fa      	ldrb	r2, [r7, #3]
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	1a9b      	subs	r3, r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3344      	adds	r3, #68	@ 0x44
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	1c59      	adds	r1, r3, #1
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4403      	add	r3, r0
 8005eb4:	3344      	adds	r3, #68	@ 0x44
 8005eb6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005eb8:	78fa      	ldrb	r2, [r7, #3]
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	1a9b      	subs	r3, r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	440b      	add	r3, r1
 8005ec6:	3344      	adds	r3, #68	@ 0x44
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d914      	bls.n	8005ef8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005ece:	78fa      	ldrb	r2, [r7, #3]
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	011b      	lsls	r3, r3, #4
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	3344      	adds	r3, #68	@ 0x44
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005ee2:	78fa      	ldrb	r2, [r7, #3]
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	1a9b      	subs	r3, r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	334c      	adds	r3, #76	@ 0x4c
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005ef6:	e022      	b.n	8005f3e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ef8:	78fa      	ldrb	r2, [r7, #3]
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	4613      	mov	r3, r2
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	440b      	add	r3, r1
 8005f06:	334c      	adds	r3, #76	@ 0x4c
 8005f08:	2202      	movs	r2, #2
 8005f0a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f0c:	78fb      	ldrb	r3, [r7, #3]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f22:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f2a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	015a      	lsls	r2, r3, #5
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4413      	add	r3, r2
 8005f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f38:	461a      	mov	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005f3e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005f40:	78fa      	ldrb	r2, [r7, #3]
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	4613      	mov	r3, r2
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	1a9b      	subs	r3, r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	440b      	add	r3, r1
 8005f4e:	334c      	adds	r3, #76	@ 0x4c
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f005 fd04 	bl	800b964 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005f5c:	e002      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005f5e:	bf00      	nop
 8005f60:	e000      	b.n	8005f64 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005f62:	bf00      	nop
  }
}
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b08a      	sub	sp, #40	@ 0x28
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	0c5b      	lsrs	r3, r3, #17
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	091b      	lsrs	r3, r3, #4
 8005f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f9e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d004      	beq.n	8005fb0 <HCD_RXQLVL_IRQHandler+0x46>
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b05      	cmp	r3, #5
 8005faa:	f000 80b6 	beq.w	800611a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005fae:	e0b7      	b.n	8006120 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80b3 	beq.w	800611e <HCD_RXQLVL_IRQHandler+0x1b4>
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4613      	mov	r3, r2
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	1a9b      	subs	r3, r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	332c      	adds	r3, #44	@ 0x2c
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80a7 	beq.w	800611e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005fd0:	6879      	ldr	r1, [r7, #4]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	3338      	adds	r3, #56	@ 0x38
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	18d1      	adds	r1, r2, r3
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	4613      	mov	r3, r2
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	1a9b      	subs	r3, r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4403      	add	r3, r0
 8005ff4:	3334      	adds	r3, #52	@ 0x34
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4299      	cmp	r1, r3
 8005ffa:	f200 8083 	bhi.w	8006104 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6818      	ldr	r0, [r3, #0]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4613      	mov	r3, r2
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	332c      	adds	r3, #44	@ 0x2c
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	b292      	uxth	r2, r2
 8006018:	4619      	mov	r1, r3
 800601a:	f002 fb3b 	bl	8008694 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	4613      	mov	r3, r2
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	1a9b      	subs	r3, r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	440b      	add	r3, r1
 800602c:	332c      	adds	r3, #44	@ 0x2c
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	18d1      	adds	r1, r2, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	4613      	mov	r3, r2
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4403      	add	r3, r0
 8006042:	332c      	adds	r3, #44	@ 0x2c
 8006044:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	4613      	mov	r3, r2
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	1a9b      	subs	r3, r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	440b      	add	r3, r1
 8006054:	3338      	adds	r3, #56	@ 0x38
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	18d1      	adds	r1, r2, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	69ba      	ldr	r2, [r7, #24]
 8006060:	4613      	mov	r3, r2
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4403      	add	r3, r0
 800606a:	3338      	adds	r3, #56	@ 0x38
 800606c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	4413      	add	r3, r2
 8006076:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	0cdb      	lsrs	r3, r3, #19
 800607e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006082:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	69ba      	ldr	r2, [r7, #24]
 8006088:	4613      	mov	r3, r2
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	1a9b      	subs	r3, r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	440b      	add	r3, r1
 8006092:	3328      	adds	r3, #40	@ 0x28
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	4293      	cmp	r3, r2
 800609c:	d13f      	bne.n	800611e <HCD_RXQLVL_IRQHandler+0x1b4>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d03c      	beq.n	800611e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060ba:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060c2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060d0:	461a      	mov	r2, r3
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80060d6:	6879      	ldr	r1, [r7, #4]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	4613      	mov	r3, r2
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	333c      	adds	r3, #60	@ 0x3c
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	f083 0301 	eor.w	r3, r3, #1
 80060ec:	b2d8      	uxtb	r0, r3
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4613      	mov	r3, r2
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	333c      	adds	r3, #60	@ 0x3c
 80060fe:	4602      	mov	r2, r0
 8006100:	701a      	strb	r2, [r3, #0]
      break;
 8006102:	e00c      	b.n	800611e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	4613      	mov	r3, r2
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	1a9b      	subs	r3, r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	440b      	add	r3, r1
 8006112:	334c      	adds	r3, #76	@ 0x4c
 8006114:	2204      	movs	r2, #4
 8006116:	701a      	strb	r2, [r3, #0]
      break;
 8006118:	e001      	b.n	800611e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800611a:	bf00      	nop
 800611c:	e000      	b.n	8006120 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800611e:	bf00      	nop
  }
}
 8006120:	bf00      	nop
 8006122:	3728      	adds	r7, #40	@ 0x28
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006154:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b02      	cmp	r3, #2
 800615e:	d10b      	bne.n	8006178 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b01      	cmp	r3, #1
 8006168:	d102      	bne.n	8006170 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f005 fbde 	bl	800b92c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	f043 0302 	orr.w	r3, r3, #2
 8006176:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f003 0308 	and.w	r3, r3, #8
 800617e:	2b08      	cmp	r3, #8
 8006180:	d132      	bne.n	80061e8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f043 0308 	orr.w	r3, r3, #8
 8006188:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b04      	cmp	r3, #4
 8006192:	d126      	bne.n	80061e2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	7a5b      	ldrb	r3, [r3, #9]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d113      	bne.n	80061c4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80061a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80061a6:	d106      	bne.n	80061b6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2102      	movs	r1, #2
 80061ae:	4618      	mov	r0, r3
 80061b0:	f002 fc00 	bl	80089b4 <USB_InitFSLSPClkSel>
 80061b4:	e011      	b.n	80061da <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2101      	movs	r1, #1
 80061bc:	4618      	mov	r0, r3
 80061be:	f002 fbf9 	bl	80089b4 <USB_InitFSLSPClkSel>
 80061c2:	e00a      	b.n	80061da <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	79db      	ldrb	r3, [r3, #7]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d106      	bne.n	80061da <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80061d2:	461a      	mov	r2, r3
 80061d4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80061d8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f005 fbd0 	bl	800b980 <HAL_HCD_PortEnabled_Callback>
 80061e0:	e002      	b.n	80061e8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f005 fbda 	bl	800b99c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b20      	cmp	r3, #32
 80061f0:	d103      	bne.n	80061fa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f043 0320 	orr.w	r3, r3, #32
 80061f8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006200:	461a      	mov	r2, r3
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6013      	str	r3, [r2, #0]
}
 8006206:	bf00      	nop
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e12b      	b.n	800647a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f7fd f8be 	bl	80033b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2224      	movs	r2, #36	@ 0x24
 8006240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006262:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006272:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006274:	f001 fa20 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 8006278:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4a81      	ldr	r2, [pc, #516]	@ (8006484 <HAL_I2C_Init+0x274>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d807      	bhi.n	8006294 <HAL_I2C_Init+0x84>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a80      	ldr	r2, [pc, #512]	@ (8006488 <HAL_I2C_Init+0x278>)
 8006288:	4293      	cmp	r3, r2
 800628a:	bf94      	ite	ls
 800628c:	2301      	movls	r3, #1
 800628e:	2300      	movhi	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	e006      	b.n	80062a2 <HAL_I2C_Init+0x92>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4a7d      	ldr	r2, [pc, #500]	@ (800648c <HAL_I2C_Init+0x27c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	bf94      	ite	ls
 800629c:	2301      	movls	r3, #1
 800629e:	2300      	movhi	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d001      	beq.n	80062aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e0e7      	b.n	800647a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a78      	ldr	r2, [pc, #480]	@ (8006490 <HAL_I2C_Init+0x280>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	0c9b      	lsrs	r3, r3, #18
 80062b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4a6a      	ldr	r2, [pc, #424]	@ (8006484 <HAL_I2C_Init+0x274>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d802      	bhi.n	80062e4 <HAL_I2C_Init+0xd4>
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	3301      	adds	r3, #1
 80062e2:	e009      	b.n	80062f8 <HAL_I2C_Init+0xe8>
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80062ea:	fb02 f303 	mul.w	r3, r2, r3
 80062ee:	4a69      	ldr	r2, [pc, #420]	@ (8006494 <HAL_I2C_Init+0x284>)
 80062f0:	fba2 2303 	umull	r2, r3, r2, r3
 80062f4:	099b      	lsrs	r3, r3, #6
 80062f6:	3301      	adds	r3, #1
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	430b      	orrs	r3, r1
 80062fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800630a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	495c      	ldr	r1, [pc, #368]	@ (8006484 <HAL_I2C_Init+0x274>)
 8006314:	428b      	cmp	r3, r1
 8006316:	d819      	bhi.n	800634c <HAL_I2C_Init+0x13c>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	1e59      	subs	r1, r3, #1
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	fbb1 f3f3 	udiv	r3, r1, r3
 8006326:	1c59      	adds	r1, r3, #1
 8006328:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800632c:	400b      	ands	r3, r1
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <HAL_I2C_Init+0x138>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	1e59      	subs	r1, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006340:	3301      	adds	r3, #1
 8006342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006346:	e051      	b.n	80063ec <HAL_I2C_Init+0x1dc>
 8006348:	2304      	movs	r3, #4
 800634a:	e04f      	b.n	80063ec <HAL_I2C_Init+0x1dc>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d111      	bne.n	8006378 <HAL_I2C_Init+0x168>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	1e58      	subs	r0, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6859      	ldr	r1, [r3, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	440b      	add	r3, r1
 8006362:	fbb0 f3f3 	udiv	r3, r0, r3
 8006366:	3301      	adds	r3, #1
 8006368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636c:	2b00      	cmp	r3, #0
 800636e:	bf0c      	ite	eq
 8006370:	2301      	moveq	r3, #1
 8006372:	2300      	movne	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	e012      	b.n	800639e <HAL_I2C_Init+0x18e>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	1e58      	subs	r0, r3, #1
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6859      	ldr	r1, [r3, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	440b      	add	r3, r1
 8006386:	0099      	lsls	r1, r3, #2
 8006388:	440b      	add	r3, r1
 800638a:	fbb0 f3f3 	udiv	r3, r0, r3
 800638e:	3301      	adds	r3, #1
 8006390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf0c      	ite	eq
 8006398:	2301      	moveq	r3, #1
 800639a:	2300      	movne	r3, #0
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_I2C_Init+0x196>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e022      	b.n	80063ec <HAL_I2C_Init+0x1dc>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10e      	bne.n	80063cc <HAL_I2C_Init+0x1bc>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1e58      	subs	r0, r3, #1
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6859      	ldr	r1, [r3, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	440b      	add	r3, r1
 80063bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80063c0:	3301      	adds	r3, #1
 80063c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063ca:	e00f      	b.n	80063ec <HAL_I2C_Init+0x1dc>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	1e58      	subs	r0, r3, #1
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	440b      	add	r3, r1
 80063da:	0099      	lsls	r1, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	fbb0 f3f3 	udiv	r3, r0, r3
 80063e2:	3301      	adds	r3, #1
 80063e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063ec:	6879      	ldr	r1, [r7, #4]
 80063ee:	6809      	ldr	r1, [r1, #0]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	69da      	ldr	r2, [r3, #28]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	431a      	orrs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800641a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6911      	ldr	r1, [r2, #16]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	68d2      	ldr	r2, [r2, #12]
 8006426:	4311      	orrs	r1, r2
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	6812      	ldr	r2, [r2, #0]
 800642c:	430b      	orrs	r3, r1
 800642e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695a      	ldr	r2, [r3, #20]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	431a      	orrs	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	430a      	orrs	r2, r1
 800644a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	000186a0 	.word	0x000186a0
 8006488:	001e847f 	.word	0x001e847f
 800648c:	003d08ff 	.word	0x003d08ff
 8006490:	431bde83 	.word	0x431bde83
 8006494:	10624dd3 	.word	0x10624dd3

08006498 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e128      	b.n	80066fc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d109      	bne.n	80064ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a90      	ldr	r2, [pc, #576]	@ (8006704 <HAL_I2S_Init+0x26c>)
 80064c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7fc ffbf 	bl	8003448 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80064e0:	f023 030f 	bic.w	r3, r3, #15
 80064e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2202      	movs	r2, #2
 80064ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d060      	beq.n	80065b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d102      	bne.n	8006504 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80064fe:	2310      	movs	r3, #16
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	e001      	b.n	8006508 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006504:	2320      	movs	r3, #32
 8006506:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b20      	cmp	r3, #32
 800650e:	d802      	bhi.n	8006516 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006516:	2001      	movs	r0, #1
 8006518:	f001 f9d8 	bl	80078cc <HAL_RCCEx_GetPeriphCLKFreq>
 800651c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006526:	d125      	bne.n	8006574 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d010      	beq.n	8006552 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	fbb2 f2f3 	udiv	r2, r2, r3
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	461a      	mov	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	fbb2 f3f3 	udiv	r3, r2, r3
 800654c:	3305      	adds	r3, #5
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	e01f      	b.n	8006592 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	fbb2 f2f3 	udiv	r2, r2, r3
 800655c:	4613      	mov	r3, r2
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	461a      	mov	r2, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	fbb2 f3f3 	udiv	r3, r2, r3
 800656e:	3305      	adds	r3, #5
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	e00e      	b.n	8006592 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	fbb2 f2f3 	udiv	r2, r2, r3
 800657c:	4613      	mov	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	461a      	mov	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	fbb2 f3f3 	udiv	r3, r2, r3
 800658e:	3305      	adds	r3, #5
 8006590:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4a5c      	ldr	r2, [pc, #368]	@ (8006708 <HAL_I2S_Init+0x270>)
 8006596:	fba2 2303 	umull	r2, r3, r2, r3
 800659a:	08db      	lsrs	r3, r3, #3
 800659c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	e003      	b.n	80065c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80065b8:	2302      	movs	r3, #2
 80065ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d902      	bls.n	80065cc <HAL_I2S_Init+0x134>
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	2bff      	cmp	r3, #255	@ 0xff
 80065ca:	d907      	bls.n	80065dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d0:	f043 0210 	orr.w	r2, r3, #16
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e08f      	b.n	80066fc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	ea42 0103 	orr.w	r1, r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	69fa      	ldr	r2, [r7, #28]
 80065ec:	430a      	orrs	r2, r1
 80065ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80065fa:	f023 030f 	bic.w	r3, r3, #15
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	6851      	ldr	r1, [r2, #4]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6892      	ldr	r2, [r2, #8]
 8006606:	4311      	orrs	r1, r2
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	68d2      	ldr	r2, [r2, #12]
 800660c:	4311      	orrs	r1, r2
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6992      	ldr	r2, [r2, #24]
 8006612:	430a      	orrs	r2, r1
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800661e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a1b      	ldr	r3, [r3, #32]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d161      	bne.n	80066ec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a38      	ldr	r2, [pc, #224]	@ (800670c <HAL_I2S_Init+0x274>)
 800662c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a37      	ldr	r2, [pc, #220]	@ (8006710 <HAL_I2S_Init+0x278>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d101      	bne.n	800663c <HAL_I2S_Init+0x1a4>
 8006638:	4b36      	ldr	r3, [pc, #216]	@ (8006714 <HAL_I2S_Init+0x27c>)
 800663a:	e001      	b.n	8006640 <HAL_I2S_Init+0x1a8>
 800663c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6812      	ldr	r2, [r2, #0]
 8006646:	4932      	ldr	r1, [pc, #200]	@ (8006710 <HAL_I2S_Init+0x278>)
 8006648:	428a      	cmp	r2, r1
 800664a:	d101      	bne.n	8006650 <HAL_I2S_Init+0x1b8>
 800664c:	4a31      	ldr	r2, [pc, #196]	@ (8006714 <HAL_I2S_Init+0x27c>)
 800664e:	e001      	b.n	8006654 <HAL_I2S_Init+0x1bc>
 8006650:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006654:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006658:	f023 030f 	bic.w	r3, r3, #15
 800665c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a2b      	ldr	r2, [pc, #172]	@ (8006710 <HAL_I2S_Init+0x278>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <HAL_I2S_Init+0x1d4>
 8006668:	4b2a      	ldr	r3, [pc, #168]	@ (8006714 <HAL_I2S_Init+0x27c>)
 800666a:	e001      	b.n	8006670 <HAL_I2S_Init+0x1d8>
 800666c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006670:	2202      	movs	r2, #2
 8006672:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a25      	ldr	r2, [pc, #148]	@ (8006710 <HAL_I2S_Init+0x278>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d101      	bne.n	8006682 <HAL_I2S_Init+0x1ea>
 800667e:	4b25      	ldr	r3, [pc, #148]	@ (8006714 <HAL_I2S_Init+0x27c>)
 8006680:	e001      	b.n	8006686 <HAL_I2S_Init+0x1ee>
 8006682:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006692:	d003      	beq.n	800669c <HAL_I2S_Init+0x204>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d103      	bne.n	80066a4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800669c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	e001      	b.n	80066a8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80066a4:	2300      	movs	r3, #0
 80066a6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80066b2:	4313      	orrs	r3, r2
 80066b4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80066c6:	4313      	orrs	r3, r2
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	897b      	ldrh	r3, [r7, #10]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80066d4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a0d      	ldr	r2, [pc, #52]	@ (8006710 <HAL_I2S_Init+0x278>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d101      	bne.n	80066e4 <HAL_I2S_Init+0x24c>
 80066e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006714 <HAL_I2S_Init+0x27c>)
 80066e2:	e001      	b.n	80066e8 <HAL_I2S_Init+0x250>
 80066e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066e8:	897a      	ldrh	r2, [r7, #10]
 80066ea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	0800680f 	.word	0x0800680f
 8006708:	cccccccd 	.word	0xcccccccd
 800670c:	08006925 	.word	0x08006925
 8006710:	40003800 	.word	0x40003800
 8006714:	40003400 	.word	0x40003400

08006718 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006760:	881a      	ldrh	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	1c9a      	adds	r2, r3, #2
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006776:	b29b      	uxth	r3, r3
 8006778:	3b01      	subs	r3, #1
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10e      	bne.n	80067a8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006798:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff ffb8 	bl	8006718 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067c2:	b292      	uxth	r2, r2
 80067c4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	1c9a      	adds	r2, r3, #2
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d10e      	bne.n	8006806 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80067f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ff93 	bl	800672c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b086      	sub	sp, #24
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b04      	cmp	r3, #4
 8006828:	d13a      	bne.n	80068a0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b01      	cmp	r3, #1
 8006832:	d109      	bne.n	8006848 <I2S_IRQHandler+0x3a>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683e:	2b40      	cmp	r3, #64	@ 0x40
 8006840:	d102      	bne.n	8006848 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff ffb4 	bl	80067b0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800684e:	2b40      	cmp	r3, #64	@ 0x40
 8006850:	d126      	bne.n	80068a0 <I2S_IRQHandler+0x92>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b20      	cmp	r3, #32
 800685e:	d11f      	bne.n	80068a0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800686e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	613b      	str	r3, [r7, #16]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	613b      	str	r3, [r7, #16]
 8006884:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f043 0202 	orr.w	r2, r3, #2
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7ff ff50 	bl	8006740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d136      	bne.n	800691a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d109      	bne.n	80068ca <I2S_IRQHandler+0xbc>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068c0:	2b80      	cmp	r3, #128	@ 0x80
 80068c2:	d102      	bne.n	80068ca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ff45 	bl	8006754 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b08      	cmp	r3, #8
 80068d2:	d122      	bne.n	800691a <I2S_IRQHandler+0x10c>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d11b      	bne.n	800691a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80068f0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	60fb      	str	r3, [r7, #12]
 80068fe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800690c:	f043 0204 	orr.w	r2, r3, #4
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff ff13 	bl	8006740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800691a:	bf00      	nop
 800691c:	3718      	adds	r7, #24
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a92      	ldr	r2, [pc, #584]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d101      	bne.n	8006942 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800693e:	4b92      	ldr	r3, [pc, #584]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006940:	e001      	b.n	8006946 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006942:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a8b      	ldr	r2, [pc, #556]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d101      	bne.n	8006960 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800695c:	4b8a      	ldr	r3, [pc, #552]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800695e:	e001      	b.n	8006964 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006960:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006970:	d004      	beq.n	800697c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	f040 8099 	bne.w	8006aae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b02      	cmp	r3, #2
 8006984:	d107      	bne.n	8006996 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698c:	2b00      	cmp	r3, #0
 800698e:	d002      	beq.n	8006996 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 f925 	bl	8006be0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b01      	cmp	r3, #1
 800699e:	d107      	bne.n	80069b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f9c8 	bl	8006d40 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b6:	2b40      	cmp	r3, #64	@ 0x40
 80069b8:	d13a      	bne.n	8006a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f003 0320 	and.w	r3, r3, #32
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d035      	beq.n	8006a30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a6e      	ldr	r2, [pc, #440]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d101      	bne.n	80069d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80069ce:	4b6e      	ldr	r3, [pc, #440]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069d0:	e001      	b.n	80069d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80069d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4969      	ldr	r1, [pc, #420]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80069de:	428b      	cmp	r3, r1
 80069e0:	d101      	bne.n	80069e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80069e2:	4b69      	ldr	r3, [pc, #420]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80069e4:	e001      	b.n	80069ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80069e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80069ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	60fb      	str	r3, [r7, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a22:	f043 0202 	orr.w	r2, r3, #2
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff fe88 	bl	8006740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	f040 80c3 	bne.w	8006bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f003 0320 	and.w	r3, r3, #32
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80bd 	beq.w	8006bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006a56:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a49      	ldr	r2, [pc, #292]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d101      	bne.n	8006a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006a62:	4b49      	ldr	r3, [pc, #292]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a64:	e001      	b.n	8006a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006a66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4944      	ldr	r1, [pc, #272]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006a72:	428b      	cmp	r3, r1
 8006a74:	d101      	bne.n	8006a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006a76:	4b44      	ldr	r3, [pc, #272]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006a78:	e001      	b.n	8006a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006a7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a82:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006a84:	2300      	movs	r3, #0
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	60bb      	str	r3, [r7, #8]
 8006a90:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9e:	f043 0204 	orr.w	r2, r3, #4
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff fe4a 	bl	8006740 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006aac:	e089      	b.n	8006bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d107      	bne.n	8006ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f8be 	bl	8006c44 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d107      	bne.n	8006ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d002      	beq.n	8006ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f8fd 	bl	8006cdc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae8:	2b40      	cmp	r3, #64	@ 0x40
 8006aea:	d12f      	bne.n	8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d02a      	beq.n	8006b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685a      	ldr	r2, [r3, #4]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b04:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d101      	bne.n	8006b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006b10:	4b1d      	ldr	r3, [pc, #116]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b12:	e001      	b.n	8006b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006b14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b18:	685a      	ldr	r2, [r3, #4]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4919      	ldr	r1, [pc, #100]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b20:	428b      	cmp	r3, r1
 8006b22:	d101      	bne.n	8006b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006b24:	4b18      	ldr	r3, [pc, #96]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b26:	e001      	b.n	8006b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006b28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b3e:	f043 0202 	orr.w	r2, r3, #2
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fdfa 	bl	8006740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b08      	cmp	r3, #8
 8006b54:	d136      	bne.n	8006bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d031      	beq.n	8006bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a07      	ldr	r2, [pc, #28]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d101      	bne.n	8006b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006b6a:	4b07      	ldr	r3, [pc, #28]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b6c:	e001      	b.n	8006b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006b6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b72:	685a      	ldr	r2, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4902      	ldr	r1, [pc, #8]	@ (8006b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006b7a:	428b      	cmp	r3, r1
 8006b7c:	d106      	bne.n	8006b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006b7e:	4b02      	ldr	r3, [pc, #8]	@ (8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006b80:	e006      	b.n	8006b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006b82:	bf00      	nop
 8006b84:	40003800 	.word	0x40003800
 8006b88:	40003400 	.word	0x40003400
 8006b8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006b90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006b94:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ba4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb2:	f043 0204 	orr.w	r2, r3, #4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7ff fdc0 	bl	8006740 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bc0:	e000      	b.n	8006bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006bc2:	bf00      	nop
}
 8006bc4:	bf00      	nop
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bec:	1c99      	adds	r1, r3, #2
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	6251      	str	r1, [r2, #36]	@ 0x24
 8006bf2:	881a      	ldrh	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d113      	bne.n	8006c3a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006c20:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d106      	bne.n	8006c3a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff ffc9 	bl	8006bcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c50:	1c99      	adds	r1, r3, #2
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6251      	str	r1, [r2, #36]	@ 0x24
 8006c56:	8819      	ldrh	r1, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cd4 <I2SEx_TxISR_I2SExt+0x90>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d101      	bne.n	8006c66 <I2SEx_TxISR_I2SExt+0x22>
 8006c62:	4b1d      	ldr	r3, [pc, #116]	@ (8006cd8 <I2SEx_TxISR_I2SExt+0x94>)
 8006c64:	e001      	b.n	8006c6a <I2SEx_TxISR_I2SExt+0x26>
 8006c66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c6a:	460a      	mov	r2, r1
 8006c6c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d121      	bne.n	8006cca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a12      	ldr	r2, [pc, #72]	@ (8006cd4 <I2SEx_TxISR_I2SExt+0x90>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d101      	bne.n	8006c94 <I2SEx_TxISR_I2SExt+0x50>
 8006c90:	4b11      	ldr	r3, [pc, #68]	@ (8006cd8 <I2SEx_TxISR_I2SExt+0x94>)
 8006c92:	e001      	b.n	8006c98 <I2SEx_TxISR_I2SExt+0x54>
 8006c94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	490d      	ldr	r1, [pc, #52]	@ (8006cd4 <I2SEx_TxISR_I2SExt+0x90>)
 8006ca0:	428b      	cmp	r3, r1
 8006ca2:	d101      	bne.n	8006ca8 <I2SEx_TxISR_I2SExt+0x64>
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <I2SEx_TxISR_I2SExt+0x94>)
 8006ca6:	e001      	b.n	8006cac <I2SEx_TxISR_I2SExt+0x68>
 8006ca8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006cb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f7ff ff81 	bl	8006bcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40003800 	.word	0x40003800
 8006cd8:	40003400 	.word	0x40003400

08006cdc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68d8      	ldr	r0, [r3, #12]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cee:	1c99      	adds	r1, r3, #2
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006cf4:	b282      	uxth	r2, r0
 8006cf6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d113      	bne.n	8006d38 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d1e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d106      	bne.n	8006d38 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff ff4a 	bl	8006bcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a20      	ldr	r2, [pc, #128]	@ (8006dd0 <I2SEx_RxISR_I2SExt+0x90>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d101      	bne.n	8006d56 <I2SEx_RxISR_I2SExt+0x16>
 8006d52:	4b20      	ldr	r3, [pc, #128]	@ (8006dd4 <I2SEx_RxISR_I2SExt+0x94>)
 8006d54:	e001      	b.n	8006d5a <I2SEx_RxISR_I2SExt+0x1a>
 8006d56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d5a:	68d8      	ldr	r0, [r3, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d60:	1c99      	adds	r1, r3, #2
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006d66:	b282      	uxth	r2, r0
 8006d68:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d121      	bne.n	8006dc6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a12      	ldr	r2, [pc, #72]	@ (8006dd0 <I2SEx_RxISR_I2SExt+0x90>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d101      	bne.n	8006d90 <I2SEx_RxISR_I2SExt+0x50>
 8006d8c:	4b11      	ldr	r3, [pc, #68]	@ (8006dd4 <I2SEx_RxISR_I2SExt+0x94>)
 8006d8e:	e001      	b.n	8006d94 <I2SEx_RxISR_I2SExt+0x54>
 8006d90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d94:	685a      	ldr	r2, [r3, #4]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	490d      	ldr	r1, [pc, #52]	@ (8006dd0 <I2SEx_RxISR_I2SExt+0x90>)
 8006d9c:	428b      	cmp	r3, r1
 8006d9e:	d101      	bne.n	8006da4 <I2SEx_RxISR_I2SExt+0x64>
 8006da0:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd4 <I2SEx_RxISR_I2SExt+0x94>)
 8006da2:	e001      	b.n	8006da8 <I2SEx_RxISR_I2SExt+0x68>
 8006da4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006da8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006dac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d106      	bne.n	8006dc6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff ff03 	bl	8006bcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40003800 	.word	0x40003800
 8006dd4:	40003400 	.word	0x40003400

08006dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d101      	bne.n	8006dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e267      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d075      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006df6:	4b88      	ldr	r3, [pc, #544]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	d00c      	beq.n	8006e1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e02:	4b85      	ldr	r3, [pc, #532]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006e0a:	2b08      	cmp	r3, #8
 8006e0c:	d112      	bne.n	8006e34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e0e:	4b82      	ldr	r3, [pc, #520]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e1a:	d10b      	bne.n	8006e34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d05b      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x108>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d157      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e242      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e3c:	d106      	bne.n	8006e4c <HAL_RCC_OscConfig+0x74>
 8006e3e:	4b76      	ldr	r3, [pc, #472]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a75      	ldr	r2, [pc, #468]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	e01d      	b.n	8006e88 <HAL_RCC_OscConfig+0xb0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e54:	d10c      	bne.n	8006e70 <HAL_RCC_OscConfig+0x98>
 8006e56:	4b70      	ldr	r3, [pc, #448]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a6f      	ldr	r2, [pc, #444]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	4b6d      	ldr	r3, [pc, #436]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a6c      	ldr	r2, [pc, #432]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	e00b      	b.n	8006e88 <HAL_RCC_OscConfig+0xb0>
 8006e70:	4b69      	ldr	r3, [pc, #420]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a68      	ldr	r2, [pc, #416]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e7a:	6013      	str	r3, [r2, #0]
 8006e7c:	4b66      	ldr	r3, [pc, #408]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a65      	ldr	r2, [pc, #404]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006e82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d013      	beq.n	8006eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7fc fd92 	bl	80039b8 <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e98:	f7fc fd8e 	bl	80039b8 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b64      	cmp	r3, #100	@ 0x64
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e207      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eaa:	4b5b      	ldr	r3, [pc, #364]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d0f0      	beq.n	8006e98 <HAL_RCC_OscConfig+0xc0>
 8006eb6:	e014      	b.n	8006ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb8:	f7fc fd7e 	bl	80039b8 <HAL_GetTick>
 8006ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ec0:	f7fc fd7a 	bl	80039b8 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b64      	cmp	r3, #100	@ 0x64
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e1f3      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ed2:	4b51      	ldr	r3, [pc, #324]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1f0      	bne.n	8006ec0 <HAL_RCC_OscConfig+0xe8>
 8006ede:	e000      	b.n	8006ee2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d063      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006eee:	4b4a      	ldr	r3, [pc, #296]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 030c 	and.w	r3, r3, #12
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00b      	beq.n	8006f12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006efa:	4b47      	ldr	r3, [pc, #284]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d11c      	bne.n	8006f40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f06:	4b44      	ldr	r3, [pc, #272]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d116      	bne.n	8006f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f12:	4b41      	ldr	r3, [pc, #260]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <HAL_RCC_OscConfig+0x152>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d001      	beq.n	8006f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e1c7      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f2a:	4b3b      	ldr	r3, [pc, #236]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	4937      	ldr	r1, [pc, #220]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f3e:	e03a      	b.n	8006fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d020      	beq.n	8006f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f48:	4b34      	ldr	r3, [pc, #208]	@ (800701c <HAL_RCC_OscConfig+0x244>)
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4e:	f7fc fd33 	bl	80039b8 <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f54:	e008      	b.n	8006f68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f56:	f7fc fd2f 	bl	80039b8 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d901      	bls.n	8006f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e1a8      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f68:	4b2b      	ldr	r3, [pc, #172]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0302 	and.w	r3, r3, #2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d0f0      	beq.n	8006f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f74:	4b28      	ldr	r3, [pc, #160]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	00db      	lsls	r3, r3, #3
 8006f82:	4925      	ldr	r1, [pc, #148]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	600b      	str	r3, [r1, #0]
 8006f88:	e015      	b.n	8006fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f8a:	4b24      	ldr	r3, [pc, #144]	@ (800701c <HAL_RCC_OscConfig+0x244>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f90:	f7fc fd12 	bl	80039b8 <HAL_GetTick>
 8006f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f96:	e008      	b.n	8006faa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f98:	f7fc fd0e 	bl	80039b8 <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d901      	bls.n	8006faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e187      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006faa:	4b1b      	ldr	r3, [pc, #108]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f0      	bne.n	8006f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d036      	beq.n	8007030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695b      	ldr	r3, [r3, #20]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d016      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fca:	4b15      	ldr	r3, [pc, #84]	@ (8007020 <HAL_RCC_OscConfig+0x248>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd0:	f7fc fcf2 	bl	80039b8 <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fd8:	f7fc fcee 	bl	80039b8 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e167      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fea:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <HAL_RCC_OscConfig+0x240>)
 8006fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fee:	f003 0302 	and.w	r3, r3, #2
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0f0      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x200>
 8006ff6:	e01b      	b.n	8007030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ff8:	4b09      	ldr	r3, [pc, #36]	@ (8007020 <HAL_RCC_OscConfig+0x248>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ffe:	f7fc fcdb 	bl	80039b8 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007004:	e00e      	b.n	8007024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007006:	f7fc fcd7 	bl	80039b8 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d907      	bls.n	8007024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e150      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
 8007018:	40023800 	.word	0x40023800
 800701c:	42470000 	.word	0x42470000
 8007020:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007024:	4b88      	ldr	r3, [pc, #544]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007028:	f003 0302 	and.w	r3, r3, #2
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1ea      	bne.n	8007006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 8097 	beq.w	800716c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800703e:	2300      	movs	r3, #0
 8007040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007042:	4b81      	ldr	r3, [pc, #516]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10f      	bne.n	800706e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800704e:	2300      	movs	r3, #0
 8007050:	60bb      	str	r3, [r7, #8]
 8007052:	4b7d      	ldr	r3, [pc, #500]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007056:	4a7c      	ldr	r2, [pc, #496]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800705c:	6413      	str	r3, [r2, #64]	@ 0x40
 800705e:	4b7a      	ldr	r3, [pc, #488]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007066:	60bb      	str	r3, [r7, #8]
 8007068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800706a:	2301      	movs	r3, #1
 800706c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800706e:	4b77      	ldr	r3, [pc, #476]	@ (800724c <HAL_RCC_OscConfig+0x474>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007076:	2b00      	cmp	r3, #0
 8007078:	d118      	bne.n	80070ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800707a:	4b74      	ldr	r3, [pc, #464]	@ (800724c <HAL_RCC_OscConfig+0x474>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a73      	ldr	r2, [pc, #460]	@ (800724c <HAL_RCC_OscConfig+0x474>)
 8007080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007086:	f7fc fc97 	bl	80039b8 <HAL_GetTick>
 800708a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800708c:	e008      	b.n	80070a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800708e:	f7fc fc93 	bl	80039b8 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b02      	cmp	r3, #2
 800709a:	d901      	bls.n	80070a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800709c:	2303      	movs	r3, #3
 800709e:	e10c      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070a0:	4b6a      	ldr	r3, [pc, #424]	@ (800724c <HAL_RCC_OscConfig+0x474>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d0f0      	beq.n	800708e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d106      	bne.n	80070c2 <HAL_RCC_OscConfig+0x2ea>
 80070b4:	4b64      	ldr	r3, [pc, #400]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b8:	4a63      	ldr	r2, [pc, #396]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070ba:	f043 0301 	orr.w	r3, r3, #1
 80070be:	6713      	str	r3, [r2, #112]	@ 0x70
 80070c0:	e01c      	b.n	80070fc <HAL_RCC_OscConfig+0x324>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2b05      	cmp	r3, #5
 80070c8:	d10c      	bne.n	80070e4 <HAL_RCC_OscConfig+0x30c>
 80070ca:	4b5f      	ldr	r3, [pc, #380]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070ce:	4a5e      	ldr	r2, [pc, #376]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070d0:	f043 0304 	orr.w	r3, r3, #4
 80070d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80070d6:	4b5c      	ldr	r3, [pc, #368]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070da:	4a5b      	ldr	r2, [pc, #364]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070dc:	f043 0301 	orr.w	r3, r3, #1
 80070e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80070e2:	e00b      	b.n	80070fc <HAL_RCC_OscConfig+0x324>
 80070e4:	4b58      	ldr	r3, [pc, #352]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070e8:	4a57      	ldr	r2, [pc, #348]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070ea:	f023 0301 	bic.w	r3, r3, #1
 80070ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80070f0:	4b55      	ldr	r3, [pc, #340]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f4:	4a54      	ldr	r2, [pc, #336]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80070f6:	f023 0304 	bic.w	r3, r3, #4
 80070fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d015      	beq.n	8007130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007104:	f7fc fc58 	bl	80039b8 <HAL_GetTick>
 8007108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710a:	e00a      	b.n	8007122 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800710c:	f7fc fc54 	bl	80039b8 <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800711a:	4293      	cmp	r3, r2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e0cb      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007122:	4b49      	ldr	r3, [pc, #292]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0ee      	beq.n	800710c <HAL_RCC_OscConfig+0x334>
 800712e:	e014      	b.n	800715a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007130:	f7fc fc42 	bl	80039b8 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007136:	e00a      	b.n	800714e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007138:	f7fc fc3e 	bl	80039b8 <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e0b5      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800714e:	4b3e      	ldr	r3, [pc, #248]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1ee      	bne.n	8007138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d105      	bne.n	800716c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007160:	4b39      	ldr	r3, [pc, #228]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007164:	4a38      	ldr	r2, [pc, #224]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800716a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80a1 	beq.w	80072b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007176:	4b34      	ldr	r3, [pc, #208]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f003 030c 	and.w	r3, r3, #12
 800717e:	2b08      	cmp	r3, #8
 8007180:	d05c      	beq.n	800723c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b02      	cmp	r3, #2
 8007188:	d141      	bne.n	800720e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800718a:	4b31      	ldr	r3, [pc, #196]	@ (8007250 <HAL_RCC_OscConfig+0x478>)
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007190:	f7fc fc12 	bl	80039b8 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007198:	f7fc fc0e 	bl	80039b8 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e087      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071aa:	4b27      	ldr	r3, [pc, #156]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69da      	ldr	r2, [r3, #28]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	431a      	orrs	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c4:	019b      	lsls	r3, r3, #6
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071cc:	085b      	lsrs	r3, r3, #1
 80071ce:	3b01      	subs	r3, #1
 80071d0:	041b      	lsls	r3, r3, #16
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d8:	061b      	lsls	r3, r3, #24
 80071da:	491b      	ldr	r1, [pc, #108]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007250 <HAL_RCC_OscConfig+0x478>)
 80071e2:	2201      	movs	r2, #1
 80071e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e6:	f7fc fbe7 	bl	80039b8 <HAL_GetTick>
 80071ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ec:	e008      	b.n	8007200 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071ee:	f7fc fbe3 	bl	80039b8 <HAL_GetTick>
 80071f2:	4602      	mov	r2, r0
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	1ad3      	subs	r3, r2, r3
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d901      	bls.n	8007200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e05c      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007200:	4b11      	ldr	r3, [pc, #68]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0f0      	beq.n	80071ee <HAL_RCC_OscConfig+0x416>
 800720c:	e054      	b.n	80072b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720e:	4b10      	ldr	r3, [pc, #64]	@ (8007250 <HAL_RCC_OscConfig+0x478>)
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007214:	f7fc fbd0 	bl	80039b8 <HAL_GetTick>
 8007218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800721c:	f7fc fbcc 	bl	80039b8 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b02      	cmp	r3, #2
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e045      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800722e:	4b06      	ldr	r3, [pc, #24]	@ (8007248 <HAL_RCC_OscConfig+0x470>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f0      	bne.n	800721c <HAL_RCC_OscConfig+0x444>
 800723a:	e03d      	b.n	80072b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d107      	bne.n	8007254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e038      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
 8007248:	40023800 	.word	0x40023800
 800724c:	40007000 	.word	0x40007000
 8007250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007254:	4b1b      	ldr	r3, [pc, #108]	@ (80072c4 <HAL_RCC_OscConfig+0x4ec>)
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d028      	beq.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800726c:	429a      	cmp	r2, r3
 800726e:	d121      	bne.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800727a:	429a      	cmp	r2, r3
 800727c:	d11a      	bne.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007284:	4013      	ands	r3, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800728a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800728c:	4293      	cmp	r3, r2
 800728e:	d111      	bne.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	3b01      	subs	r3, #1
 800729e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d107      	bne.n	80072b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d001      	beq.n	80072b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40023800 	.word	0x40023800

080072c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0cc      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072dc:	4b68      	ldr	r3, [pc, #416]	@ (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d90c      	bls.n	8007304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ea:	4b65      	ldr	r3, [pc, #404]	@ (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80072ec:	683a      	ldr	r2, [r7, #0]
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072f2:	4b63      	ldr	r3, [pc, #396]	@ (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d001      	beq.n	8007304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e0b8      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0302 	and.w	r3, r3, #2
 800730c:	2b00      	cmp	r3, #0
 800730e:	d020      	beq.n	8007352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800731c:	4b59      	ldr	r3, [pc, #356]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4a58      	ldr	r2, [pc, #352]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007326:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0308 	and.w	r3, r3, #8
 8007330:	2b00      	cmp	r3, #0
 8007332:	d005      	beq.n	8007340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007334:	4b53      	ldr	r3, [pc, #332]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	4a52      	ldr	r2, [pc, #328]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800733a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800733e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007340:	4b50      	ldr	r3, [pc, #320]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	494d      	ldr	r1, [pc, #308]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800734e:	4313      	orrs	r3, r2
 8007350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d044      	beq.n	80073e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d107      	bne.n	8007376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007366:	4b47      	ldr	r3, [pc, #284]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d119      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e07f      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d003      	beq.n	8007386 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007382:	2b03      	cmp	r3, #3
 8007384:	d107      	bne.n	8007396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007386:	4b3f      	ldr	r3, [pc, #252]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d109      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e06f      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007396:	4b3b      	ldr	r3, [pc, #236]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e067      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073a6:	4b37      	ldr	r3, [pc, #220]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 0203 	bic.w	r2, r3, #3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	4934      	ldr	r1, [pc, #208]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 80073b4:	4313      	orrs	r3, r2
 80073b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073b8:	f7fc fafe 	bl	80039b8 <HAL_GetTick>
 80073bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073be:	e00a      	b.n	80073d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073c0:	f7fc fafa 	bl	80039b8 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e04f      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073d6:	4b2b      	ldr	r3, [pc, #172]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 020c 	and.w	r2, r3, #12
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d1eb      	bne.n	80073c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073e8:	4b25      	ldr	r3, [pc, #148]	@ (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d20c      	bcs.n	8007410 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073f6:	4b22      	ldr	r3, [pc, #136]	@ (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	b2d2      	uxtb	r2, r2
 80073fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073fe:	4b20      	ldr	r3, [pc, #128]	@ (8007480 <HAL_RCC_ClockConfig+0x1b8>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0307 	and.w	r3, r3, #7
 8007406:	683a      	ldr	r2, [r7, #0]
 8007408:	429a      	cmp	r2, r3
 800740a:	d001      	beq.n	8007410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e032      	b.n	8007476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800741c:	4b19      	ldr	r3, [pc, #100]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4916      	ldr	r1, [pc, #88]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800742a:	4313      	orrs	r3, r2
 800742c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800743a:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	490e      	ldr	r1, [pc, #56]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 800744a:	4313      	orrs	r3, r2
 800744c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800744e:	f000 f821 	bl	8007494 <HAL_RCC_GetSysClockFreq>
 8007452:	4602      	mov	r2, r0
 8007454:	4b0b      	ldr	r3, [pc, #44]	@ (8007484 <HAL_RCC_ClockConfig+0x1bc>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	091b      	lsrs	r3, r3, #4
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	490a      	ldr	r1, [pc, #40]	@ (8007488 <HAL_RCC_ClockConfig+0x1c0>)
 8007460:	5ccb      	ldrb	r3, [r1, r3]
 8007462:	fa22 f303 	lsr.w	r3, r2, r3
 8007466:	4a09      	ldr	r2, [pc, #36]	@ (800748c <HAL_RCC_ClockConfig+0x1c4>)
 8007468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800746a:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <HAL_RCC_ClockConfig+0x1c8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4618      	mov	r0, r3
 8007470:	f7fc fa5e 	bl	8003930 <HAL_InitTick>

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	40023c00 	.word	0x40023c00
 8007484:	40023800 	.word	0x40023800
 8007488:	0800d354 	.word	0x0800d354
 800748c:	20000070 	.word	0x20000070
 8007490:	20000074 	.word	0x20000074

08007494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007498:	b094      	sub	sp, #80	@ 0x50
 800749a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80074a8:	2300      	movs	r3, #0
 80074aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074ac:	4b79      	ldr	r3, [pc, #484]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 030c 	and.w	r3, r3, #12
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d00d      	beq.n	80074d4 <HAL_RCC_GetSysClockFreq+0x40>
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	f200 80e1 	bhi.w	8007680 <HAL_RCC_GetSysClockFreq+0x1ec>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <HAL_RCC_GetSysClockFreq+0x34>
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d003      	beq.n	80074ce <HAL_RCC_GetSysClockFreq+0x3a>
 80074c6:	e0db      	b.n	8007680 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074c8:	4b73      	ldr	r3, [pc, #460]	@ (8007698 <HAL_RCC_GetSysClockFreq+0x204>)
 80074ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074cc:	e0db      	b.n	8007686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074ce:	4b73      	ldr	r3, [pc, #460]	@ (800769c <HAL_RCC_GetSysClockFreq+0x208>)
 80074d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074d2:	e0d8      	b.n	8007686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074d4:	4b6f      	ldr	r3, [pc, #444]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80074dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074de:	4b6d      	ldr	r3, [pc, #436]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d063      	beq.n	80075b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074ea:	4b6a      	ldr	r3, [pc, #424]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	099b      	lsrs	r3, r3, #6
 80074f0:	2200      	movs	r2, #0
 80074f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80074f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80074f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80074fe:	2300      	movs	r3, #0
 8007500:	637b      	str	r3, [r7, #52]	@ 0x34
 8007502:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007506:	4622      	mov	r2, r4
 8007508:	462b      	mov	r3, r5
 800750a:	f04f 0000 	mov.w	r0, #0
 800750e:	f04f 0100 	mov.w	r1, #0
 8007512:	0159      	lsls	r1, r3, #5
 8007514:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007518:	0150      	lsls	r0, r2, #5
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4621      	mov	r1, r4
 8007520:	1a51      	subs	r1, r2, r1
 8007522:	6139      	str	r1, [r7, #16]
 8007524:	4629      	mov	r1, r5
 8007526:	eb63 0301 	sbc.w	r3, r3, r1
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007538:	4659      	mov	r1, fp
 800753a:	018b      	lsls	r3, r1, #6
 800753c:	4651      	mov	r1, sl
 800753e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007542:	4651      	mov	r1, sl
 8007544:	018a      	lsls	r2, r1, #6
 8007546:	4651      	mov	r1, sl
 8007548:	ebb2 0801 	subs.w	r8, r2, r1
 800754c:	4659      	mov	r1, fp
 800754e:	eb63 0901 	sbc.w	r9, r3, r1
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800755e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007566:	4690      	mov	r8, r2
 8007568:	4699      	mov	r9, r3
 800756a:	4623      	mov	r3, r4
 800756c:	eb18 0303 	adds.w	r3, r8, r3
 8007570:	60bb      	str	r3, [r7, #8]
 8007572:	462b      	mov	r3, r5
 8007574:	eb49 0303 	adc.w	r3, r9, r3
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	f04f 0300 	mov.w	r3, #0
 8007582:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007586:	4629      	mov	r1, r5
 8007588:	024b      	lsls	r3, r1, #9
 800758a:	4621      	mov	r1, r4
 800758c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007590:	4621      	mov	r1, r4
 8007592:	024a      	lsls	r2, r1, #9
 8007594:	4610      	mov	r0, r2
 8007596:	4619      	mov	r1, r3
 8007598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800759a:	2200      	movs	r2, #0
 800759c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800759e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075a4:	f7f8 fe6c 	bl	8000280 <__aeabi_uldivmod>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4613      	mov	r3, r2
 80075ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075b0:	e058      	b.n	8007664 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075b2:	4b38      	ldr	r3, [pc, #224]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	2200      	movs	r2, #0
 80075ba:	4618      	mov	r0, r3
 80075bc:	4611      	mov	r1, r2
 80075be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80075c2:	623b      	str	r3, [r7, #32]
 80075c4:	2300      	movs	r3, #0
 80075c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80075c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80075cc:	4642      	mov	r2, r8
 80075ce:	464b      	mov	r3, r9
 80075d0:	f04f 0000 	mov.w	r0, #0
 80075d4:	f04f 0100 	mov.w	r1, #0
 80075d8:	0159      	lsls	r1, r3, #5
 80075da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075de:	0150      	lsls	r0, r2, #5
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4641      	mov	r1, r8
 80075e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80075ea:	4649      	mov	r1, r9
 80075ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007600:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007604:	ebb2 040a 	subs.w	r4, r2, sl
 8007608:	eb63 050b 	sbc.w	r5, r3, fp
 800760c:	f04f 0200 	mov.w	r2, #0
 8007610:	f04f 0300 	mov.w	r3, #0
 8007614:	00eb      	lsls	r3, r5, #3
 8007616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800761a:	00e2      	lsls	r2, r4, #3
 800761c:	4614      	mov	r4, r2
 800761e:	461d      	mov	r5, r3
 8007620:	4643      	mov	r3, r8
 8007622:	18e3      	adds	r3, r4, r3
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	464b      	mov	r3, r9
 8007628:	eb45 0303 	adc.w	r3, r5, r3
 800762c:	607b      	str	r3, [r7, #4]
 800762e:	f04f 0200 	mov.w	r2, #0
 8007632:	f04f 0300 	mov.w	r3, #0
 8007636:	e9d7 4500 	ldrd	r4, r5, [r7]
 800763a:	4629      	mov	r1, r5
 800763c:	028b      	lsls	r3, r1, #10
 800763e:	4621      	mov	r1, r4
 8007640:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007644:	4621      	mov	r1, r4
 8007646:	028a      	lsls	r2, r1, #10
 8007648:	4610      	mov	r0, r2
 800764a:	4619      	mov	r1, r3
 800764c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800764e:	2200      	movs	r2, #0
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	61fa      	str	r2, [r7, #28]
 8007654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007658:	f7f8 fe12 	bl	8000280 <__aeabi_uldivmod>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4613      	mov	r3, r2
 8007662:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007664:	4b0b      	ldr	r3, [pc, #44]	@ (8007694 <HAL_RCC_GetSysClockFreq+0x200>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	0c1b      	lsrs	r3, r3, #16
 800766a:	f003 0303 	and.w	r3, r3, #3
 800766e:	3301      	adds	r3, #1
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007674:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007678:	fbb2 f3f3 	udiv	r3, r2, r3
 800767c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800767e:	e002      	b.n	8007686 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007680:	4b05      	ldr	r3, [pc, #20]	@ (8007698 <HAL_RCC_GetSysClockFreq+0x204>)
 8007682:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007686:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007688:	4618      	mov	r0, r3
 800768a:	3750      	adds	r7, #80	@ 0x50
 800768c:	46bd      	mov	sp, r7
 800768e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007692:	bf00      	nop
 8007694:	40023800 	.word	0x40023800
 8007698:	00f42400 	.word	0x00f42400
 800769c:	007a1200 	.word	0x007a1200

080076a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076a4:	4b03      	ldr	r3, [pc, #12]	@ (80076b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076a6:	681b      	ldr	r3, [r3, #0]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	20000070 	.word	0x20000070

080076b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076bc:	f7ff fff0 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076c0:	4602      	mov	r2, r0
 80076c2:	4b05      	ldr	r3, [pc, #20]	@ (80076d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	0a9b      	lsrs	r3, r3, #10
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	4903      	ldr	r1, [pc, #12]	@ (80076dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ce:	5ccb      	ldrb	r3, [r1, r3]
 80076d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	40023800 	.word	0x40023800
 80076dc:	0800d364 	.word	0x0800d364

080076e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80076e4:	f7ff ffdc 	bl	80076a0 <HAL_RCC_GetHCLKFreq>
 80076e8:	4602      	mov	r2, r0
 80076ea:	4b05      	ldr	r3, [pc, #20]	@ (8007700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	0b5b      	lsrs	r3, r3, #13
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	4903      	ldr	r1, [pc, #12]	@ (8007704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076f6:	5ccb      	ldrb	r3, [r1, r3]
 80076f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40023800 	.word	0x40023800
 8007704:	0800d364 	.word	0x0800d364

08007708 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0301 	and.w	r3, r3, #1
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800772c:	2b00      	cmp	r3, #0
 800772e:	d035      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007730:	4b62      	ldr	r3, [pc, #392]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007736:	f7fc f93f 	bl	80039b8 <HAL_GetTick>
 800773a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800773c:	e008      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800773e:	f7fc f93b 	bl	80039b8 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	2b02      	cmp	r3, #2
 800774a:	d901      	bls.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	e0b0      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007750:	4b5b      	ldr	r3, [pc, #364]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1f0      	bne.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	019a      	lsls	r2, r3, #6
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	071b      	lsls	r3, r3, #28
 8007768:	4955      	ldr	r1, [pc, #340]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800776a:	4313      	orrs	r3, r2
 800776c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007770:	4b52      	ldr	r3, [pc, #328]	@ (80078bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007772:	2201      	movs	r2, #1
 8007774:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007776:	f7fc f91f 	bl	80039b8 <HAL_GetTick>
 800777a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800777c:	e008      	b.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800777e:	f7fc f91b 	bl	80039b8 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e090      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007790:	4b4b      	ldr	r3, [pc, #300]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0f0      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	f000 8083 	beq.w	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]
 80077ae:	4b44      	ldr	r3, [pc, #272]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b2:	4a43      	ldr	r2, [pc, #268]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80077ba:	4b41      	ldr	r3, [pc, #260]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077c2:	60fb      	str	r3, [r7, #12]
 80077c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077c6:	4b3f      	ldr	r3, [pc, #252]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a3e      	ldr	r2, [pc, #248]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077d2:	f7fc f8f1 	bl	80039b8 <HAL_GetTick>
 80077d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80077d8:	e008      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077da:	f7fc f8ed 	bl	80039b8 <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d901      	bls.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e062      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80077ec:	4b35      	ldr	r3, [pc, #212]	@ (80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0f0      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80077f8:	4b31      	ldr	r3, [pc, #196]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80077fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007800:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d02f      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	429a      	cmp	r2, r3
 8007814:	d028      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007816:	4b2a      	ldr	r3, [pc, #168]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800781a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800781e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007820:	4b29      	ldr	r3, [pc, #164]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007826:	4b28      	ldr	r3, [pc, #160]	@ (80078c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800782c:	4a24      	ldr	r2, [pc, #144]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007832:	4b23      	ldr	r3, [pc, #140]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b01      	cmp	r3, #1
 800783c:	d114      	bne.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800783e:	f7fc f8bb 	bl	80039b8 <HAL_GetTick>
 8007842:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007844:	e00a      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007846:	f7fc f8b7 	bl	80039b8 <HAL_GetTick>
 800784a:	4602      	mov	r2, r0
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007854:	4293      	cmp	r3, r2
 8007856:	d901      	bls.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e02a      	b.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800785c:	4b18      	ldr	r3, [pc, #96]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800785e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d0ee      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007870:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007874:	d10d      	bne.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007876:	4b12      	ldr	r3, [pc, #72]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800788a:	490d      	ldr	r1, [pc, #52]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800788c:	4313      	orrs	r3, r2
 800788e:	608b      	str	r3, [r1, #8]
 8007890:	e005      	b.n	800789e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007892:	4b0b      	ldr	r3, [pc, #44]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	4a0a      	ldr	r2, [pc, #40]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007898:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800789c:	6093      	str	r3, [r2, #8]
 800789e:	4b08      	ldr	r3, [pc, #32]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078aa:	4905      	ldr	r1, [pc, #20]	@ (80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3718      	adds	r7, #24
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	42470068 	.word	0x42470068
 80078c0:	40023800 	.word	0x40023800
 80078c4:	40007000 	.word	0x40007000
 80078c8:	42470e40 	.word	0x42470e40

080078cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80078dc:	2300      	movs	r3, #0
 80078de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d13f      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80078ea:	4b24      	ldr	r3, [pc, #144]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078f2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d006      	beq.n	8007908 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007900:	d12f      	bne.n	8007962 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007902:	4b1f      	ldr	r3, [pc, #124]	@ (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007904:	617b      	str	r3, [r7, #20]
          break;
 8007906:	e02f      	b.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007908:	4b1c      	ldr	r3, [pc, #112]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007914:	d108      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007916:	4b19      	ldr	r3, [pc, #100]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800791e:	4a19      	ldr	r2, [pc, #100]	@ (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	e007      	b.n	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007928:	4b14      	ldr	r3, [pc, #80]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007930:	4a15      	ldr	r2, [pc, #84]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007932:	fbb2 f3f3 	udiv	r3, r2, r3
 8007936:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007938:	4b10      	ldr	r3, [pc, #64]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800793a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800793e:	099b      	lsrs	r3, r3, #6
 8007940:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	fb02 f303 	mul.w	r3, r2, r3
 800794a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800794c:	4b0b      	ldr	r3, [pc, #44]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800794e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007952:	0f1b      	lsrs	r3, r3, #28
 8007954:	f003 0307 	and.w	r3, r3, #7
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	fbb2 f3f3 	udiv	r3, r2, r3
 800795e:	617b      	str	r3, [r7, #20]
          break;
 8007960:	e002      	b.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	617b      	str	r3, [r7, #20]
          break;
 8007966:	bf00      	nop
        }
      }
      break;
 8007968:	e000      	b.n	800796c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800796a:	bf00      	nop
    }
  }
  return frequency;
 800796c:	697b      	ldr	r3, [r7, #20]
}
 800796e:	4618      	mov	r0, r3
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	40023800 	.word	0x40023800
 8007980:	00bb8000 	.word	0x00bb8000
 8007984:	007a1200 	.word	0x007a1200
 8007988:	00f42400 	.word	0x00f42400

0800798c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e01c      	b.n	80079d8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	795b      	ldrb	r3, [r3, #5]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d105      	bne.n	80079b4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fb fdca 	bl	8003548 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f042 0204 	orr.w	r2, r2, #4
 80079c8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	791b      	ldrb	r3, [r3, #4]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d101      	bne.n	80079fa <HAL_RNG_GenerateRandomNumber+0x1a>
 80079f6:	2302      	movs	r3, #2
 80079f8:	e044      	b.n	8007a84 <HAL_RNG_GenerateRandomNumber+0xa4>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	795b      	ldrb	r3, [r3, #5]
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d133      	bne.n	8007a72 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a10:	f7fb ffd2 	bl	80039b8 <HAL_GetTick>
 8007a14:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007a16:	e018      	b.n	8007a4a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007a18:	f7fb ffce 	bl	80039b8 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d911      	bls.n	8007a4a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d00a      	beq.n	8007a4a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e01c      	b.n	8007a84 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d1df      	bne.n	8007a18 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	68da      	ldr	r2, [r3, #12]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	715a      	strb	r2, [r3, #5]
 8007a70:	e004      	b.n	8007a7c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2204      	movs	r2, #4
 8007a76:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	711a      	strb	r2, [r3, #4]

  return status;
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e07b      	b.n	8007b96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d108      	bne.n	8007ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aae:	d009      	beq.n	8007ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	61da      	str	r2, [r3, #28]
 8007ab6:	e005      	b.n	8007ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d106      	bne.n	8007ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fb fd54 	bl	800358c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007b0c:	431a      	orrs	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	699b      	ldr	r3, [r3, #24]
 8007b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b34:	431a      	orrs	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b48:	ea42 0103 	orr.w	r1, r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	0c1b      	lsrs	r3, r3, #16
 8007b62:	f003 0104 	and.w	r1, r3, #4
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	f003 0210 	and.w	r2, r3, #16
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	69da      	ldr	r2, [r3, #28]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007b84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	e042      	b.n	8007c36 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7fb fd29 	bl	800361c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2224      	movs	r2, #36	@ 0x24
 8007bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007be0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f972 	bl	8007ecc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691a      	ldr	r2, [r3, #16]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007bf6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	695a      	ldr	r2, [r3, #20]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c06:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c16:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2220      	movs	r2, #32
 8007c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3708      	adds	r7, #8
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}

08007c3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b08a      	sub	sp, #40	@ 0x28
 8007c42:	af02      	add	r7, sp, #8
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	603b      	str	r3, [r7, #0]
 8007c4a:	4613      	mov	r3, r2
 8007c4c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d175      	bne.n	8007d4a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d002      	beq.n	8007c6a <HAL_UART_Transmit+0x2c>
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e06e      	b.n	8007d4c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2221      	movs	r2, #33	@ 0x21
 8007c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c7c:	f7fb fe9c 	bl	80039b8 <HAL_GetTick>
 8007c80:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	88fa      	ldrh	r2, [r7, #6]
 8007c86:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	88fa      	ldrh	r2, [r7, #6]
 8007c8c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c96:	d108      	bne.n	8007caa <HAL_UART_Transmit+0x6c>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d104      	bne.n	8007caa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	e003      	b.n	8007cb2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007cb2:	e02e      	b.n	8007d12 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2180      	movs	r1, #128	@ 0x80
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f848 	bl	8007d54 <UART_WaitOnFlagUntilTimeout>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d005      	beq.n	8007cd6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e03a      	b.n	8007d4c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10b      	bne.n	8007cf4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	881b      	ldrh	r3, [r3, #0]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007cea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	3302      	adds	r3, #2
 8007cf0:	61bb      	str	r3, [r7, #24]
 8007cf2:	e007      	b.n	8007d04 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	781a      	ldrb	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	3301      	adds	r3, #1
 8007d02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1cb      	bne.n	8007cb4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	2200      	movs	r2, #0
 8007d24:	2140      	movs	r1, #64	@ 0x40
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 f814 	bl	8007d54 <UART_WaitOnFlagUntilTimeout>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e006      	b.n	8007d4c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	e000      	b.n	8007d4c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007d4a:	2302      	movs	r3, #2
  }
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3720      	adds	r7, #32
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	4613      	mov	r3, r2
 8007d62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d64:	e03b      	b.n	8007dde <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6c:	d037      	beq.n	8007dde <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6e:	f7fb fe23 	bl	80039b8 <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	6a3a      	ldr	r2, [r7, #32]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d302      	bcc.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x30>
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e03a      	b.n	8007dfe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d023      	beq.n	8007dde <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b80      	cmp	r3, #128	@ 0x80
 8007d9a:	d020      	beq.n	8007dde <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b40      	cmp	r3, #64	@ 0x40
 8007da0:	d01d      	beq.n	8007dde <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d116      	bne.n	8007dde <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007db0:	2300      	movs	r3, #0
 8007db2:	617b      	str	r3, [r7, #20]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	617b      	str	r3, [r7, #20]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 f81d 	bl	8007e06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2208      	movs	r2, #8
 8007dd0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e00f      	b.n	8007dfe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4013      	ands	r3, r2
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	bf0c      	ite	eq
 8007dee:	2301      	moveq	r3, #1
 8007df0:	2300      	movne	r3, #0
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	79fb      	ldrb	r3, [r7, #7]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d0b4      	beq.n	8007d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b095      	sub	sp, #84	@ 0x54
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	330c      	adds	r3, #12
 8007e14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e18:	e853 3f00 	ldrex	r3, [r3]
 8007e1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	330c      	adds	r3, #12
 8007e2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e36:	e841 2300 	strex	r3, r2, [r1]
 8007e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1e5      	bne.n	8007e0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3314      	adds	r3, #20
 8007e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	f023 0301 	bic.w	r3, r3, #1
 8007e58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3314      	adds	r3, #20
 8007e60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e5      	bne.n	8007e42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d119      	bne.n	8007eb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f023 0310 	bic.w	r3, r3, #16
 8007e94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e9e:	61ba      	str	r2, [r7, #24]
 8007ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6979      	ldr	r1, [r7, #20]
 8007ea4:	69ba      	ldr	r2, [r7, #24]
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	613b      	str	r3, [r7, #16]
   return(result);
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e5      	bne.n	8007e7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2220      	movs	r2, #32
 8007eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007ec0:	bf00      	nop
 8007ec2:	3754      	adds	r7, #84	@ 0x54
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ed0:	b0c0      	sub	sp, #256	@ 0x100
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee8:	68d9      	ldr	r1, [r3, #12]
 8007eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	ea40 0301 	orr.w	r3, r0, r1
 8007ef4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f24:	f021 010c 	bic.w	r1, r1, #12
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f32:	430b      	orrs	r3, r1
 8007f34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f46:	6999      	ldr	r1, [r3, #24]
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	ea40 0301 	orr.w	r3, r0, r1
 8007f52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8008198 <UART_SetConfig+0x2cc>)
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d005      	beq.n	8007f6c <UART_SetConfig+0xa0>
 8007f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	4b8d      	ldr	r3, [pc, #564]	@ (800819c <UART_SetConfig+0x2d0>)
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d104      	bne.n	8007f76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007f6c:	f7ff fbb8 	bl	80076e0 <HAL_RCC_GetPCLK2Freq>
 8007f70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007f74:	e003      	b.n	8007f7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f76:	f7ff fb9f 	bl	80076b8 <HAL_RCC_GetPCLK1Freq>
 8007f7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f88:	f040 810c 	bne.w	80081a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f90:	2200      	movs	r2, #0
 8007f92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f9e:	4622      	mov	r2, r4
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	1891      	adds	r1, r2, r2
 8007fa4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007fa6:	415b      	adcs	r3, r3
 8007fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007faa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007fae:	4621      	mov	r1, r4
 8007fb0:	eb12 0801 	adds.w	r8, r2, r1
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	eb43 0901 	adc.w	r9, r3, r1
 8007fba:	f04f 0200 	mov.w	r2, #0
 8007fbe:	f04f 0300 	mov.w	r3, #0
 8007fc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007fce:	4690      	mov	r8, r2
 8007fd0:	4699      	mov	r9, r3
 8007fd2:	4623      	mov	r3, r4
 8007fd4:	eb18 0303 	adds.w	r3, r8, r3
 8007fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007fdc:	462b      	mov	r3, r5
 8007fde:	eb49 0303 	adc.w	r3, r9, r3
 8007fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ff2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ff6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	18db      	adds	r3, r3, r3
 8007ffe:	653b      	str	r3, [r7, #80]	@ 0x50
 8008000:	4613      	mov	r3, r2
 8008002:	eb42 0303 	adc.w	r3, r2, r3
 8008006:	657b      	str	r3, [r7, #84]	@ 0x54
 8008008:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800800c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008010:	f7f8 f936 	bl	8000280 <__aeabi_uldivmod>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	4b61      	ldr	r3, [pc, #388]	@ (80081a0 <UART_SetConfig+0x2d4>)
 800801a:	fba3 2302 	umull	r2, r3, r3, r2
 800801e:	095b      	lsrs	r3, r3, #5
 8008020:	011c      	lsls	r4, r3, #4
 8008022:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008026:	2200      	movs	r2, #0
 8008028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800802c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008030:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008034:	4642      	mov	r2, r8
 8008036:	464b      	mov	r3, r9
 8008038:	1891      	adds	r1, r2, r2
 800803a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800803c:	415b      	adcs	r3, r3
 800803e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008040:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008044:	4641      	mov	r1, r8
 8008046:	eb12 0a01 	adds.w	sl, r2, r1
 800804a:	4649      	mov	r1, r9
 800804c:	eb43 0b01 	adc.w	fp, r3, r1
 8008050:	f04f 0200 	mov.w	r2, #0
 8008054:	f04f 0300 	mov.w	r3, #0
 8008058:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800805c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008064:	4692      	mov	sl, r2
 8008066:	469b      	mov	fp, r3
 8008068:	4643      	mov	r3, r8
 800806a:	eb1a 0303 	adds.w	r3, sl, r3
 800806e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008072:	464b      	mov	r3, r9
 8008074:	eb4b 0303 	adc.w	r3, fp, r3
 8008078:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800807c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008088:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800808c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008090:	460b      	mov	r3, r1
 8008092:	18db      	adds	r3, r3, r3
 8008094:	643b      	str	r3, [r7, #64]	@ 0x40
 8008096:	4613      	mov	r3, r2
 8008098:	eb42 0303 	adc.w	r3, r2, r3
 800809c:	647b      	str	r3, [r7, #68]	@ 0x44
 800809e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080a6:	f7f8 f8eb 	bl	8000280 <__aeabi_uldivmod>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4611      	mov	r1, r2
 80080b0:	4b3b      	ldr	r3, [pc, #236]	@ (80081a0 <UART_SetConfig+0x2d4>)
 80080b2:	fba3 2301 	umull	r2, r3, r3, r1
 80080b6:	095b      	lsrs	r3, r3, #5
 80080b8:	2264      	movs	r2, #100	@ 0x64
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	1acb      	subs	r3, r1, r3
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80080c6:	4b36      	ldr	r3, [pc, #216]	@ (80081a0 <UART_SetConfig+0x2d4>)
 80080c8:	fba3 2302 	umull	r2, r3, r3, r2
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80080d4:	441c      	add	r4, r3
 80080d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080da:	2200      	movs	r2, #0
 80080dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80080e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80080e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80080e8:	4642      	mov	r2, r8
 80080ea:	464b      	mov	r3, r9
 80080ec:	1891      	adds	r1, r2, r2
 80080ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80080f0:	415b      	adcs	r3, r3
 80080f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80080f8:	4641      	mov	r1, r8
 80080fa:	1851      	adds	r1, r2, r1
 80080fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80080fe:	4649      	mov	r1, r9
 8008100:	414b      	adcs	r3, r1
 8008102:	637b      	str	r3, [r7, #52]	@ 0x34
 8008104:	f04f 0200 	mov.w	r2, #0
 8008108:	f04f 0300 	mov.w	r3, #0
 800810c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008110:	4659      	mov	r1, fp
 8008112:	00cb      	lsls	r3, r1, #3
 8008114:	4651      	mov	r1, sl
 8008116:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800811a:	4651      	mov	r1, sl
 800811c:	00ca      	lsls	r2, r1, #3
 800811e:	4610      	mov	r0, r2
 8008120:	4619      	mov	r1, r3
 8008122:	4603      	mov	r3, r0
 8008124:	4642      	mov	r2, r8
 8008126:	189b      	adds	r3, r3, r2
 8008128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800812c:	464b      	mov	r3, r9
 800812e:	460a      	mov	r2, r1
 8008130:	eb42 0303 	adc.w	r3, r2, r3
 8008134:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008144:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008148:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800814c:	460b      	mov	r3, r1
 800814e:	18db      	adds	r3, r3, r3
 8008150:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008152:	4613      	mov	r3, r2
 8008154:	eb42 0303 	adc.w	r3, r2, r3
 8008158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800815a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800815e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008162:	f7f8 f88d 	bl	8000280 <__aeabi_uldivmod>
 8008166:	4602      	mov	r2, r0
 8008168:	460b      	mov	r3, r1
 800816a:	4b0d      	ldr	r3, [pc, #52]	@ (80081a0 <UART_SetConfig+0x2d4>)
 800816c:	fba3 1302 	umull	r1, r3, r3, r2
 8008170:	095b      	lsrs	r3, r3, #5
 8008172:	2164      	movs	r1, #100	@ 0x64
 8008174:	fb01 f303 	mul.w	r3, r1, r3
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	3332      	adds	r3, #50	@ 0x32
 800817e:	4a08      	ldr	r2, [pc, #32]	@ (80081a0 <UART_SetConfig+0x2d4>)
 8008180:	fba2 2303 	umull	r2, r3, r2, r3
 8008184:	095b      	lsrs	r3, r3, #5
 8008186:	f003 0207 	and.w	r2, r3, #7
 800818a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4422      	add	r2, r4
 8008192:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008194:	e106      	b.n	80083a4 <UART_SetConfig+0x4d8>
 8008196:	bf00      	nop
 8008198:	40011000 	.word	0x40011000
 800819c:	40011400 	.word	0x40011400
 80081a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081a8:	2200      	movs	r2, #0
 80081aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081b6:	4642      	mov	r2, r8
 80081b8:	464b      	mov	r3, r9
 80081ba:	1891      	adds	r1, r2, r2
 80081bc:	6239      	str	r1, [r7, #32]
 80081be:	415b      	adcs	r3, r3
 80081c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081c6:	4641      	mov	r1, r8
 80081c8:	1854      	adds	r4, r2, r1
 80081ca:	4649      	mov	r1, r9
 80081cc:	eb43 0501 	adc.w	r5, r3, r1
 80081d0:	f04f 0200 	mov.w	r2, #0
 80081d4:	f04f 0300 	mov.w	r3, #0
 80081d8:	00eb      	lsls	r3, r5, #3
 80081da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081de:	00e2      	lsls	r2, r4, #3
 80081e0:	4614      	mov	r4, r2
 80081e2:	461d      	mov	r5, r3
 80081e4:	4643      	mov	r3, r8
 80081e6:	18e3      	adds	r3, r4, r3
 80081e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80081ec:	464b      	mov	r3, r9
 80081ee:	eb45 0303 	adc.w	r3, r5, r3
 80081f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80081f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008202:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008206:	f04f 0200 	mov.w	r2, #0
 800820a:	f04f 0300 	mov.w	r3, #0
 800820e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008212:	4629      	mov	r1, r5
 8008214:	008b      	lsls	r3, r1, #2
 8008216:	4621      	mov	r1, r4
 8008218:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800821c:	4621      	mov	r1, r4
 800821e:	008a      	lsls	r2, r1, #2
 8008220:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008224:	f7f8 f82c 	bl	8000280 <__aeabi_uldivmod>
 8008228:	4602      	mov	r2, r0
 800822a:	460b      	mov	r3, r1
 800822c:	4b60      	ldr	r3, [pc, #384]	@ (80083b0 <UART_SetConfig+0x4e4>)
 800822e:	fba3 2302 	umull	r2, r3, r3, r2
 8008232:	095b      	lsrs	r3, r3, #5
 8008234:	011c      	lsls	r4, r3, #4
 8008236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800823a:	2200      	movs	r2, #0
 800823c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008240:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008244:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008248:	4642      	mov	r2, r8
 800824a:	464b      	mov	r3, r9
 800824c:	1891      	adds	r1, r2, r2
 800824e:	61b9      	str	r1, [r7, #24]
 8008250:	415b      	adcs	r3, r3
 8008252:	61fb      	str	r3, [r7, #28]
 8008254:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008258:	4641      	mov	r1, r8
 800825a:	1851      	adds	r1, r2, r1
 800825c:	6139      	str	r1, [r7, #16]
 800825e:	4649      	mov	r1, r9
 8008260:	414b      	adcs	r3, r1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008270:	4659      	mov	r1, fp
 8008272:	00cb      	lsls	r3, r1, #3
 8008274:	4651      	mov	r1, sl
 8008276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800827a:	4651      	mov	r1, sl
 800827c:	00ca      	lsls	r2, r1, #3
 800827e:	4610      	mov	r0, r2
 8008280:	4619      	mov	r1, r3
 8008282:	4603      	mov	r3, r0
 8008284:	4642      	mov	r2, r8
 8008286:	189b      	adds	r3, r3, r2
 8008288:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800828c:	464b      	mov	r3, r9
 800828e:	460a      	mov	r2, r1
 8008290:	eb42 0303 	adc.w	r3, r2, r3
 8008294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082a4:	f04f 0200 	mov.w	r2, #0
 80082a8:	f04f 0300 	mov.w	r3, #0
 80082ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082b0:	4649      	mov	r1, r9
 80082b2:	008b      	lsls	r3, r1, #2
 80082b4:	4641      	mov	r1, r8
 80082b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082ba:	4641      	mov	r1, r8
 80082bc:	008a      	lsls	r2, r1, #2
 80082be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80082c2:	f7f7 ffdd 	bl	8000280 <__aeabi_uldivmod>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4611      	mov	r1, r2
 80082cc:	4b38      	ldr	r3, [pc, #224]	@ (80083b0 <UART_SetConfig+0x4e4>)
 80082ce:	fba3 2301 	umull	r2, r3, r3, r1
 80082d2:	095b      	lsrs	r3, r3, #5
 80082d4:	2264      	movs	r2, #100	@ 0x64
 80082d6:	fb02 f303 	mul.w	r3, r2, r3
 80082da:	1acb      	subs	r3, r1, r3
 80082dc:	011b      	lsls	r3, r3, #4
 80082de:	3332      	adds	r3, #50	@ 0x32
 80082e0:	4a33      	ldr	r2, [pc, #204]	@ (80083b0 <UART_SetConfig+0x4e4>)
 80082e2:	fba2 2303 	umull	r2, r3, r2, r3
 80082e6:	095b      	lsrs	r3, r3, #5
 80082e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082ec:	441c      	add	r4, r3
 80082ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082f2:	2200      	movs	r2, #0
 80082f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80082f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80082f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80082fc:	4642      	mov	r2, r8
 80082fe:	464b      	mov	r3, r9
 8008300:	1891      	adds	r1, r2, r2
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	415b      	adcs	r3, r3
 8008306:	60fb      	str	r3, [r7, #12]
 8008308:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800830c:	4641      	mov	r1, r8
 800830e:	1851      	adds	r1, r2, r1
 8008310:	6039      	str	r1, [r7, #0]
 8008312:	4649      	mov	r1, r9
 8008314:	414b      	adcs	r3, r1
 8008316:	607b      	str	r3, [r7, #4]
 8008318:	f04f 0200 	mov.w	r2, #0
 800831c:	f04f 0300 	mov.w	r3, #0
 8008320:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008324:	4659      	mov	r1, fp
 8008326:	00cb      	lsls	r3, r1, #3
 8008328:	4651      	mov	r1, sl
 800832a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800832e:	4651      	mov	r1, sl
 8008330:	00ca      	lsls	r2, r1, #3
 8008332:	4610      	mov	r0, r2
 8008334:	4619      	mov	r1, r3
 8008336:	4603      	mov	r3, r0
 8008338:	4642      	mov	r2, r8
 800833a:	189b      	adds	r3, r3, r2
 800833c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800833e:	464b      	mov	r3, r9
 8008340:	460a      	mov	r2, r1
 8008342:	eb42 0303 	adc.w	r3, r2, r3
 8008346:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	663b      	str	r3, [r7, #96]	@ 0x60
 8008352:	667a      	str	r2, [r7, #100]	@ 0x64
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008360:	4649      	mov	r1, r9
 8008362:	008b      	lsls	r3, r1, #2
 8008364:	4641      	mov	r1, r8
 8008366:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800836a:	4641      	mov	r1, r8
 800836c:	008a      	lsls	r2, r1, #2
 800836e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008372:	f7f7 ff85 	bl	8000280 <__aeabi_uldivmod>
 8008376:	4602      	mov	r2, r0
 8008378:	460b      	mov	r3, r1
 800837a:	4b0d      	ldr	r3, [pc, #52]	@ (80083b0 <UART_SetConfig+0x4e4>)
 800837c:	fba3 1302 	umull	r1, r3, r3, r2
 8008380:	095b      	lsrs	r3, r3, #5
 8008382:	2164      	movs	r1, #100	@ 0x64
 8008384:	fb01 f303 	mul.w	r3, r1, r3
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	3332      	adds	r3, #50	@ 0x32
 800838e:	4a08      	ldr	r2, [pc, #32]	@ (80083b0 <UART_SetConfig+0x4e4>)
 8008390:	fba2 2303 	umull	r2, r3, r2, r3
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	f003 020f 	and.w	r2, r3, #15
 800839a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4422      	add	r2, r4
 80083a2:	609a      	str	r2, [r3, #8]
}
 80083a4:	bf00      	nop
 80083a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083aa:	46bd      	mov	sp, r7
 80083ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083b0:	51eb851f 	.word	0x51eb851f

080083b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80083b4:	b084      	sub	sp, #16
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	f107 001c 	add.w	r0, r7, #28
 80083c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80083c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d123      	bne.n	8008416 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80083e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80083f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d105      	bne.n	800840a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f9dc 	bl	80087c8 <USB_CoreReset>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]
 8008414:	e01b      	b.n	800844e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 f9d0 	bl	80087c8 <USB_CoreReset>
 8008428:	4603      	mov	r3, r0
 800842a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800842c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008430:	2b00      	cmp	r3, #0
 8008432:	d106      	bne.n	8008442 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008438:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008440:	e005      	b.n	800844e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008446:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800844e:	7fbb      	ldrb	r3, [r7, #30]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d10b      	bne.n	800846c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f043 0206 	orr.w	r2, r3, #6
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f043 0220 	orr.w	r2, r3, #32
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008478:	b004      	add	sp, #16
 800847a:	4770      	bx	lr

0800847c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f043 0201 	orr.w	r2, r3, #1
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800849e:	b480      	push	{r7}
 80084a0:	b083      	sub	sp, #12
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f023 0201 	bic.w	r2, r3, #1
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084b2:	2300      	movs	r3, #0
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d115      	bne.n	800850e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80084ee:	200a      	movs	r0, #10
 80084f0:	f7fb fa6e 	bl	80039d0 <HAL_Delay>
      ms += 10U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	330a      	adds	r3, #10
 80084f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f956 	bl	80087ac <USB_GetMode>
 8008500:	4603      	mov	r3, r0
 8008502:	2b01      	cmp	r3, #1
 8008504:	d01e      	beq.n	8008544 <USB_SetCurrentMode+0x84>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2bc7      	cmp	r3, #199	@ 0xc7
 800850a:	d9f0      	bls.n	80084ee <USB_SetCurrentMode+0x2e>
 800850c:	e01a      	b.n	8008544 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d115      	bne.n	8008540 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008520:	200a      	movs	r0, #10
 8008522:	f7fb fa55 	bl	80039d0 <HAL_Delay>
      ms += 10U;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	330a      	adds	r3, #10
 800852a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 f93d 	bl	80087ac <USB_GetMode>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d005      	beq.n	8008544 <USB_SetCurrentMode+0x84>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2bc7      	cmp	r3, #199	@ 0xc7
 800853c:	d9f0      	bls.n	8008520 <USB_SetCurrentMode+0x60>
 800853e:	e001      	b.n	8008544 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e005      	b.n	8008550 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2bc8      	cmp	r3, #200	@ 0xc8
 8008548:	d101      	bne.n	800854e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e000      	b.n	8008550 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3301      	adds	r3, #1
 800856a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008572:	d901      	bls.n	8008578 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e01b      	b.n	80085b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	691b      	ldr	r3, [r3, #16]
 800857c:	2b00      	cmp	r3, #0
 800857e:	daf2      	bge.n	8008566 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	019b      	lsls	r3, r3, #6
 8008588:	f043 0220 	orr.w	r2, r3, #32
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	3301      	adds	r3, #1
 8008594:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800859c:	d901      	bls.n	80085a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e006      	b.n	80085b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b20      	cmp	r3, #32
 80085ac:	d0f0      	beq.n	8008590 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3714      	adds	r7, #20
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085c4:	2300      	movs	r3, #0
 80085c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	3301      	adds	r3, #1
 80085cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085d4:	d901      	bls.n	80085da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e018      	b.n	800860c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	daf2      	bge.n	80085c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2210      	movs	r2, #16
 80085ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3301      	adds	r3, #1
 80085f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085f8:	d901      	bls.n	80085fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e006      	b.n	800860c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f003 0310 	and.w	r3, r3, #16
 8008606:	2b10      	cmp	r3, #16
 8008608:	d0f0      	beq.n	80085ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3714      	adds	r7, #20
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008618:	b480      	push	{r7}
 800861a:	b089      	sub	sp, #36	@ 0x24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	4611      	mov	r1, r2
 8008624:	461a      	mov	r2, r3
 8008626:	460b      	mov	r3, r1
 8008628:	71fb      	strb	r3, [r7, #7]
 800862a:	4613      	mov	r3, r2
 800862c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008636:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800863a:	2b00      	cmp	r3, #0
 800863c:	d123      	bne.n	8008686 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800863e:	88bb      	ldrh	r3, [r7, #4]
 8008640:	3303      	adds	r3, #3
 8008642:	089b      	lsrs	r3, r3, #2
 8008644:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008646:	2300      	movs	r3, #0
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	e018      	b.n	800867e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	031a      	lsls	r2, r3, #12
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	4413      	add	r3, r2
 8008654:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008658:	461a      	mov	r2, r3
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	3301      	adds	r3, #1
 8008664:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	3301      	adds	r3, #1
 800866a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	3301      	adds	r3, #1
 8008670:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	3301      	adds	r3, #1
 800867c:	61bb      	str	r3, [r7, #24]
 800867e:	69ba      	ldr	r2, [r7, #24]
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	429a      	cmp	r2, r3
 8008684:	d3e2      	bcc.n	800864c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	3724      	adds	r7, #36	@ 0x24
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008694:	b480      	push	{r7}
 8008696:	b08b      	sub	sp, #44	@ 0x2c
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	4613      	mov	r3, r2
 80086a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	089b      	lsrs	r3, r3, #2
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80086b2:	88fb      	ldrh	r3, [r7, #6]
 80086b4:	f003 0303 	and.w	r3, r3, #3
 80086b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80086ba:	2300      	movs	r3, #0
 80086bc:	623b      	str	r3, [r7, #32]
 80086be:	e014      	b.n	80086ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	3301      	adds	r3, #1
 80086d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	3301      	adds	r3, #1
 80086d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086da:	3301      	adds	r3, #1
 80086dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e0:	3301      	adds	r3, #1
 80086e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80086e4:	6a3b      	ldr	r3, [r7, #32]
 80086e6:	3301      	adds	r3, #1
 80086e8:	623b      	str	r3, [r7, #32]
 80086ea:	6a3a      	ldr	r2, [r7, #32]
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d3e6      	bcc.n	80086c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80086f2:	8bfb      	ldrh	r3, [r7, #30]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d01e      	beq.n	8008736 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008702:	461a      	mov	r2, r3
 8008704:	f107 0310 	add.w	r3, r7, #16
 8008708:	6812      	ldr	r2, [r2, #0]
 800870a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800870c:	693a      	ldr	r2, [r7, #16]
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	b2db      	uxtb	r3, r3
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	fa22 f303 	lsr.w	r3, r2, r3
 8008718:	b2da      	uxtb	r2, r3
 800871a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871c:	701a      	strb	r2, [r3, #0]
      i++;
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	3301      	adds	r3, #1
 8008722:	623b      	str	r3, [r7, #32]
      pDest++;
 8008724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008726:	3301      	adds	r3, #1
 8008728:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800872a:	8bfb      	ldrh	r3, [r7, #30]
 800872c:	3b01      	subs	r3, #1
 800872e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008730:	8bfb      	ldrh	r3, [r7, #30]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1ea      	bne.n	800870c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008738:	4618      	mov	r0, r3
 800873a:	372c      	adds	r7, #44	@ 0x2c
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4013      	ands	r3, r2
 800875a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800875c:	68fb      	ldr	r3, [r7, #12]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	460b      	mov	r3, r1
 8008774:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	4413      	add	r3, r2
 8008792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	4013      	ands	r3, r2
 800879c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800879e:	68bb      	ldr	r3, [r7, #8]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	f003 0301 	and.w	r3, r3, #1
}
 80087bc:	4618      	mov	r0, r3
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087d0:	2300      	movs	r3, #0
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	3301      	adds	r3, #1
 80087d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80087e0:	d901      	bls.n	80087e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80087e2:	2303      	movs	r3, #3
 80087e4:	e01b      	b.n	800881e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	daf2      	bge.n	80087d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	f043 0201 	orr.w	r2, r3, #1
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3301      	adds	r3, #1
 8008802:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800880a:	d901      	bls.n	8008810 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800880c:	2303      	movs	r3, #3
 800880e:	e006      	b.n	800881e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	691b      	ldr	r3, [r3, #16]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d0f0      	beq.n	80087fe <USB_CoreReset+0x36>

  return HAL_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr
	...

0800882c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800882c:	b084      	sub	sp, #16
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800883a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800883e:	2300      	movs	r3, #0
 8008840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800884c:	461a      	mov	r2, r3
 800884e:	2300      	movs	r3, #0
 8008850:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008856:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008862:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800886e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800887e:	2b00      	cmp	r3, #0
 8008880:	d119      	bne.n	80088b6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008886:	2b01      	cmp	r3, #1
 8008888:	d10a      	bne.n	80088a0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008898:	f043 0304 	orr.w	r3, r3, #4
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	e014      	b.n	80088ca <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80088ae:	f023 0304 	bic.w	r3, r3, #4
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	e009      	b.n	80088ca <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80088c4:	f023 0304 	bic.w	r3, r3, #4
 80088c8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80088ca:	2110      	movs	r1, #16
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f7ff fe43 	bl	8008558 <USB_FlushTxFifo>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff fe6d 	bl	80085bc <USB_FlushRxFifo>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80088ec:	2300      	movs	r3, #0
 80088ee:	613b      	str	r3, [r7, #16]
 80088f0:	e015      	b.n	800891e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088fe:	461a      	mov	r2, r3
 8008900:	f04f 33ff 	mov.w	r3, #4294967295
 8008904:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4413      	add	r3, r2
 800890e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008912:	461a      	mov	r2, r3
 8008914:	2300      	movs	r3, #0
 8008916:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	3301      	adds	r3, #1
 800891c:	613b      	str	r3, [r7, #16]
 800891e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008922:	461a      	mov	r2, r3
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	4293      	cmp	r3, r2
 8008928:	d3e3      	bcc.n	80088f2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f04f 32ff 	mov.w	r2, #4294967295
 8008936:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a18      	ldr	r2, [pc, #96]	@ (800899c <USB_HostInit+0x170>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d10b      	bne.n	8008958 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008946:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a15      	ldr	r2, [pc, #84]	@ (80089a0 <USB_HostInit+0x174>)
 800894c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a14      	ldr	r2, [pc, #80]	@ (80089a4 <USB_HostInit+0x178>)
 8008952:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008956:	e009      	b.n	800896c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2280      	movs	r2, #128	@ 0x80
 800895c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a11      	ldr	r2, [pc, #68]	@ (80089a8 <USB_HostInit+0x17c>)
 8008962:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a11      	ldr	r2, [pc, #68]	@ (80089ac <USB_HostInit+0x180>)
 8008968:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800896c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008970:	2b00      	cmp	r3, #0
 8008972:	d105      	bne.n	8008980 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	699b      	ldr	r3, [r3, #24]
 8008978:	f043 0210 	orr.w	r2, r3, #16
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	699a      	ldr	r2, [r3, #24]
 8008984:	4b0a      	ldr	r3, [pc, #40]	@ (80089b0 <USB_HostInit+0x184>)
 8008986:	4313      	orrs	r3, r2
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008998:	b004      	add	sp, #16
 800899a:	4770      	bx	lr
 800899c:	40040000 	.word	0x40040000
 80089a0:	01000200 	.word	0x01000200
 80089a4:	00e00300 	.word	0x00e00300
 80089a8:	00600080 	.word	0x00600080
 80089ac:	004000e0 	.word	0x004000e0
 80089b0:	a3200008 	.word	0xa3200008

080089b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80089d2:	f023 0303 	bic.w	r3, r3, #3
 80089d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	78fb      	ldrb	r3, [r7, #3]
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80089ec:	4313      	orrs	r3, r2
 80089ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80089f0:	78fb      	ldrb	r3, [r7, #3]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d107      	bne.n	8008a06 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089fc:	461a      	mov	r2, r3
 80089fe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008a02:	6053      	str	r3, [r2, #4]
 8008a04:	e00c      	b.n	8008a20 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008a06:	78fb      	ldrb	r3, [r7, #3]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d107      	bne.n	8008a1c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a12:	461a      	mov	r2, r3
 8008a14:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008a18:	6053      	str	r3, [r2, #4]
 8008a1a:	e001      	b.n	8008a20 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e000      	b.n	8008a22 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3714      	adds	r7, #20
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b084      	sub	sp, #16
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008a4e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a5c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008a5e:	2064      	movs	r0, #100	@ 0x64
 8008a60:	f7fa ffb6 	bl	80039d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a70:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008a72:	200a      	movs	r0, #10
 8008a74:	f7fa ffac 	bl	80039d0 <HAL_Delay>

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008a82:	b480      	push	{r7}
 8008a84:	b085      	sub	sp, #20
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008aa6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d109      	bne.n	8008ac6 <USB_DriveVbus+0x44>
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d106      	bne.n	8008ac6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008ac0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008ac4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ad0:	d109      	bne.n	8008ae6 <USB_DriveVbus+0x64>
 8008ad2:	78fb      	ldrb	r3, [r7, #3]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d106      	bne.n	8008ae6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008ae0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ae4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b085      	sub	sp, #20
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008b00:	2300      	movs	r3, #0
 8008b02:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	0c5b      	lsrs	r3, r3, #17
 8008b12:	f003 0303 	and.w	r3, r3, #3
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3714      	adds	r7, #20
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr

08008b22 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b085      	sub	sp, #20
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	b29b      	uxth	r3, r3
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3714      	adds	r7, #20
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	461a      	mov	r2, r3
 8008b52:	4603      	mov	r3, r0
 8008b54:	70fb      	strb	r3, [r7, #3]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70bb      	strb	r3, [r7, #2]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008b66:	78fb      	ldrb	r3, [r7, #3]
 8008b68:	015a      	lsls	r2, r3, #5
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	4413      	add	r3, r2
 8008b6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b72:	461a      	mov	r2, r3
 8008b74:	f04f 33ff 	mov.w	r3, #4294967295
 8008b78:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008b7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d87c      	bhi.n	8008c7c <USB_HC_Init+0x138>
 8008b82:	a201      	add	r2, pc, #4	@ (adr r2, 8008b88 <USB_HC_Init+0x44>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008b99 	.word	0x08008b99
 8008b8c:	08008c3f 	.word	0x08008c3f
 8008b90:	08008b99 	.word	0x08008b99
 8008b94:	08008c01 	.word	0x08008c01
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	015a      	lsls	r2, r3, #5
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008baa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008bac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da10      	bge.n	8008bd6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008bb4:	78fb      	ldrb	r3, [r7, #3]
 8008bb6:	015a      	lsls	r2, r3, #5
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	4413      	add	r3, r2
 8008bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	78fa      	ldrb	r2, [r7, #3]
 8008bc4:	0151      	lsls	r1, r2, #5
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	440a      	add	r2, r1
 8008bca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bd2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008bd4:	e055      	b.n	8008c82 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a6f      	ldr	r2, [pc, #444]	@ (8008d98 <USB_HC_Init+0x254>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d151      	bne.n	8008c82 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008bde:	78fb      	ldrb	r3, [r7, #3]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	78fa      	ldrb	r2, [r7, #3]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bf8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008bfc:	60d3      	str	r3, [r2, #12]
      break;
 8008bfe:	e040      	b.n	8008c82 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008c12:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008c14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	da34      	bge.n	8008c86 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	78fa      	ldrb	r2, [r7, #3]
 8008c2c:	0151      	lsls	r1, r2, #5
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	440a      	add	r2, r1
 8008c32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c3a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008c3c:	e023      	b.n	8008c86 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c3e:	78fb      	ldrb	r3, [r7, #3]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f240 2325 	movw	r3, #549	@ 0x225
 8008c50:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008c52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	da17      	bge.n	8008c8a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	78fa      	ldrb	r2, [r7, #3]
 8008c6a:	0151      	lsls	r1, r2, #5
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	440a      	add	r2, r1
 8008c70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008c74:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008c78:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008c7a:	e006      	b.n	8008c8a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	77fb      	strb	r3, [r7, #31]
      break;
 8008c80:	e004      	b.n	8008c8c <USB_HC_Init+0x148>
      break;
 8008c82:	bf00      	nop
 8008c84:	e002      	b.n	8008c8c <USB_HC_Init+0x148>
      break;
 8008c86:	bf00      	nop
 8008c88:	e000      	b.n	8008c8c <USB_HC_Init+0x148>
      break;
 8008c8a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008c8c:	78fb      	ldrb	r3, [r7, #3]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c98:	461a      	mov	r2, r3
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008c9e:	78fb      	ldrb	r3, [r7, #3]
 8008ca0:	015a      	lsls	r2, r3, #5
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	78fa      	ldrb	r2, [r7, #3]
 8008cae:	0151      	lsls	r1, r2, #5
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cb8:	f043 0302 	orr.w	r3, r3, #2
 8008cbc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cc4:	699a      	ldr	r2, [r3, #24]
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	f003 030f 	and.w	r3, r3, #15
 8008ccc:	2101      	movs	r1, #1
 8008cce:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd2:	6939      	ldr	r1, [r7, #16]
 8008cd4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008ce8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	da03      	bge.n	8008cf8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008cf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cf4:	61bb      	str	r3, [r7, #24]
 8008cf6:	e001      	b.n	8008cfc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7ff fef9 	bl	8008af4 <USB_GetHostSpeed>
 8008d02:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008d04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d106      	bne.n	8008d1a <USB_HC_Init+0x1d6>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d003      	beq.n	8008d1a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008d12:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008d16:	617b      	str	r3, [r7, #20]
 8008d18:	e001      	b.n	8008d1e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d1e:	787b      	ldrb	r3, [r7, #1]
 8008d20:	059b      	lsls	r3, r3, #22
 8008d22:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d26:	78bb      	ldrb	r3, [r7, #2]
 8008d28:	02db      	lsls	r3, r3, #11
 8008d2a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d2e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008d34:	049b      	lsls	r3, r3, #18
 8008d36:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d3a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008d3c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d42:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	431a      	orrs	r2, r3
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d4c:	78fa      	ldrb	r2, [r7, #3]
 8008d4e:	0151      	lsls	r1, r2, #5
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	440a      	add	r2, r1
 8008d54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008d58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d5c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008d5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008d62:	2b03      	cmp	r3, #3
 8008d64:	d003      	beq.n	8008d6e <USB_HC_Init+0x22a>
 8008d66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d10f      	bne.n	8008d8e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008d6e:	78fb      	ldrb	r3, [r7, #3]
 8008d70:	015a      	lsls	r2, r3, #5
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	4413      	add	r3, r2
 8008d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	78fa      	ldrb	r2, [r7, #3]
 8008d7e:	0151      	lsls	r1, r2, #5
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	440a      	add	r2, r1
 8008d84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d8c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008d8e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40040000 	.word	0x40040000

08008d9c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08c      	sub	sp, #48	@ 0x30
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	4613      	mov	r3, r2
 8008da8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008db4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008db8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4a5d      	ldr	r2, [pc, #372]	@ (8008f34 <USB_HC_StartXfer+0x198>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d12f      	bne.n	8008e22 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d11c      	bne.n	8008e02 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	7c9b      	ldrb	r3, [r3, #18]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d003      	beq.n	8008dd8 <USB_HC_StartXfer+0x3c>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	7c9b      	ldrb	r3, [r3, #18]
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d124      	bne.n	8008e22 <USB_HC_StartXfer+0x86>
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	799b      	ldrb	r3, [r3, #6]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d120      	bne.n	8008e22 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	69fa      	ldr	r2, [r7, #28]
 8008df0:	0151      	lsls	r1, r2, #5
 8008df2:	6a3a      	ldr	r2, [r7, #32]
 8008df4:	440a      	add	r2, r1
 8008df6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dfe:	60d3      	str	r3, [r2, #12]
 8008e00:	e00f      	b.n	8008e22 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	791b      	ldrb	r3, [r3, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d10b      	bne.n	8008e22 <USB_HC_StartXfer+0x86>
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	795b      	ldrb	r3, [r3, #5]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d107      	bne.n	8008e22 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	4619      	mov	r1, r3
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f000 fb6b 	bl	80094f4 <USB_DoPing>
        return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e232      	b.n	8009288 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	799b      	ldrb	r3, [r3, #6]
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d158      	bne.n	8008edc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	78db      	ldrb	r3, [r3, #3]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	8a92      	ldrh	r2, [r2, #20]
 8008e3c:	fb03 f202 	mul.w	r2, r3, r2
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	61da      	str	r2, [r3, #28]
 8008e44:	e07c      	b.n	8008f40 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	7c9b      	ldrb	r3, [r3, #18]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d130      	bne.n	8008eb0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	2bbc      	cmp	r3, #188	@ 0xbc
 8008e54:	d918      	bls.n	8008e88 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	8a9b      	ldrh	r3, [r3, #20]
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	69da      	ldr	r2, [r3, #28]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d003      	beq.n	8008e78 <USB_HC_StartXfer+0xdc>
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d103      	bne.n	8008e80 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	60da      	str	r2, [r3, #12]
 8008e7e:	e05f      	b.n	8008f40 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	2201      	movs	r2, #1
 8008e84:	60da      	str	r2, [r3, #12]
 8008e86:	e05b      	b.n	8008f40 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	6a1a      	ldr	r2, [r3, #32]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d007      	beq.n	8008ea8 <USB_HC_StartXfer+0x10c>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d003      	beq.n	8008ea8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2204      	movs	r2, #4
 8008ea4:	60da      	str	r2, [r3, #12]
 8008ea6:	e04b      	b.n	8008f40 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2203      	movs	r2, #3
 8008eac:	60da      	str	r2, [r3, #12]
 8008eae:	e047      	b.n	8008f40 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	d10d      	bne.n	8008ed2 <USB_HC_StartXfer+0x136>
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	68ba      	ldr	r2, [r7, #8]
 8008ebc:	8a92      	ldrh	r2, [r2, #20]
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d907      	bls.n	8008ed2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008ec2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	8a92      	ldrh	r2, [r2, #20]
 8008ec8:	fb03 f202 	mul.w	r2, r3, r2
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	61da      	str	r2, [r3, #28]
 8008ed0:	e036      	b.n	8008f40 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	6a1a      	ldr	r2, [r3, #32]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	61da      	str	r2, [r3, #28]
 8008eda:	e031      	b.n	8008f40 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d018      	beq.n	8008f16 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	8a92      	ldrh	r2, [r2, #20]
 8008eec:	4413      	add	r3, r2
 8008eee:	3b01      	subs	r3, #1
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	8a92      	ldrh	r2, [r2, #20]
 8008ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ef8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008efa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008efc:	8b7b      	ldrh	r3, [r7, #26]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d90b      	bls.n	8008f1a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008f02:	8b7b      	ldrh	r3, [r7, #26]
 8008f04:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	8a92      	ldrh	r2, [r2, #20]
 8008f0c:	fb03 f202 	mul.w	r2, r3, r2
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	61da      	str	r2, [r3, #28]
 8008f14:	e001      	b.n	8008f1a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008f16:	2301      	movs	r3, #1
 8008f18:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	78db      	ldrb	r3, [r3, #3]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008f22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	8a92      	ldrh	r2, [r2, #20]
 8008f28:	fb03 f202 	mul.w	r2, r3, r2
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	61da      	str	r2, [r3, #28]
 8008f30:	e006      	b.n	8008f40 <USB_HC_StartXfer+0x1a4>
 8008f32:	bf00      	nop
 8008f34:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	6a1a      	ldr	r2, [r3, #32]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f48:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008f4a:	04d9      	lsls	r1, r3, #19
 8008f4c:	4ba3      	ldr	r3, [pc, #652]	@ (80091dc <USB_HC_StartXfer+0x440>)
 8008f4e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f50:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	7d9b      	ldrb	r3, [r3, #22]
 8008f56:	075b      	lsls	r3, r3, #29
 8008f58:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f5c:	69f9      	ldr	r1, [r7, #28]
 8008f5e:	0148      	lsls	r0, r1, #5
 8008f60:	6a39      	ldr	r1, [r7, #32]
 8008f62:	4401      	add	r1, r0
 8008f64:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008f68:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008f6a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008f6c:	79fb      	ldrb	r3, [r7, #7]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d009      	beq.n	8008f86 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	6999      	ldr	r1, [r3, #24]
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f82:	460a      	mov	r2, r1
 8008f84:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 0301 	and.w	r3, r3, #1
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	bf0c      	ite	eq
 8008f96:	2301      	moveq	r3, #1
 8008f98:	2300      	movne	r3, #0
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	015a      	lsls	r2, r3, #5
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	69fa      	ldr	r2, [r7, #28]
 8008fae:	0151      	lsls	r1, r2, #5
 8008fb0:	6a3a      	ldr	r2, [r7, #32]
 8008fb2:	440a      	add	r2, r1
 8008fb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fb8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008fbc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	015a      	lsls	r2, r3, #5
 8008fc2:	6a3b      	ldr	r3, [r7, #32]
 8008fc4:	4413      	add	r3, r2
 8008fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	7e7b      	ldrb	r3, [r7, #25]
 8008fce:	075b      	lsls	r3, r3, #29
 8008fd0:	69f9      	ldr	r1, [r7, #28]
 8008fd2:	0148      	lsls	r0, r1, #5
 8008fd4:	6a39      	ldr	r1, [r7, #32]
 8008fd6:	4401      	add	r1, r0
 8008fd8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	799b      	ldrb	r3, [r3, #6]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	f040 80c3 	bne.w	8009170 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	7c5b      	ldrb	r3, [r3, #17]
 8008fee:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	0151      	lsls	r1, r2, #5
 8008ffa:	6a3a      	ldr	r2, [r7, #32]
 8008ffc:	440a      	add	r2, r1
 8008ffe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009002:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009006:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	4413      	add	r3, r2
 8009010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	69fa      	ldr	r2, [r7, #28]
 8009018:	0151      	lsls	r1, r2, #5
 800901a:	6a3a      	ldr	r2, [r7, #32]
 800901c:	440a      	add	r2, r1
 800901e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009022:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009026:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	79db      	ldrb	r3, [r3, #7]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d123      	bne.n	8009078 <USB_HC_StartXfer+0x2dc>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	78db      	ldrb	r3, [r3, #3]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d11f      	bne.n	8009078 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	6a3b      	ldr	r3, [r7, #32]
 800903e:	4413      	add	r3, r2
 8009040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	69fa      	ldr	r2, [r7, #28]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	6a3a      	ldr	r2, [r7, #32]
 800904c:	440a      	add	r2, r1
 800904e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009056:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	4413      	add	r3, r2
 8009060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	69fa      	ldr	r2, [r7, #28]
 8009068:	0151      	lsls	r1, r2, #5
 800906a:	6a3a      	ldr	r2, [r7, #32]
 800906c:	440a      	add	r2, r1
 800906e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009076:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	7c9b      	ldrb	r3, [r3, #18]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d003      	beq.n	8009088 <USB_HC_StartXfer+0x2ec>
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	7c9b      	ldrb	r3, [r3, #18]
 8009084:	2b03      	cmp	r3, #3
 8009086:	d117      	bne.n	80090b8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800908c:	2b01      	cmp	r3, #1
 800908e:	d113      	bne.n	80090b8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	78db      	ldrb	r3, [r3, #3]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d10f      	bne.n	80090b8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	6a3a      	ldr	r2, [r7, #32]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090b6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	7c9b      	ldrb	r3, [r3, #18]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d162      	bne.n	8009186 <USB_HC_StartXfer+0x3ea>
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	78db      	ldrb	r3, [r3, #3]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d15e      	bne.n	8009186 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d858      	bhi.n	8009184 <USB_HC_StartXfer+0x3e8>
 80090d2:	a201      	add	r2, pc, #4	@ (adr r2, 80090d8 <USB_HC_StartXfer+0x33c>)
 80090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090d8:	080090e9 	.word	0x080090e9
 80090dc:	0800910b 	.word	0x0800910b
 80090e0:	0800912d 	.word	0x0800912d
 80090e4:	0800914f 	.word	0x0800914f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	015a      	lsls	r2, r3, #5
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	4413      	add	r3, r2
 80090f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	69fa      	ldr	r2, [r7, #28]
 80090f8:	0151      	lsls	r1, r2, #5
 80090fa:	6a3a      	ldr	r2, [r7, #32]
 80090fc:	440a      	add	r2, r1
 80090fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009102:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009106:	6053      	str	r3, [r2, #4]
          break;
 8009108:	e03d      	b.n	8009186 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	4413      	add	r3, r2
 8009112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	69fa      	ldr	r2, [r7, #28]
 800911a:	0151      	lsls	r1, r2, #5
 800911c:	6a3a      	ldr	r2, [r7, #32]
 800911e:	440a      	add	r2, r1
 8009120:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009124:	f043 030e 	orr.w	r3, r3, #14
 8009128:	6053      	str	r3, [r2, #4]
          break;
 800912a:	e02c      	b.n	8009186 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	4413      	add	r3, r2
 8009134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	0151      	lsls	r1, r2, #5
 800913e:	6a3a      	ldr	r2, [r7, #32]
 8009140:	440a      	add	r2, r1
 8009142:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800914a:	6053      	str	r3, [r2, #4]
          break;
 800914c:	e01b      	b.n	8009186 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	6a3b      	ldr	r3, [r7, #32]
 8009154:	4413      	add	r3, r2
 8009156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	0151      	lsls	r1, r2, #5
 8009160:	6a3a      	ldr	r2, [r7, #32]
 8009162:	440a      	add	r2, r1
 8009164:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800916c:	6053      	str	r3, [r2, #4]
          break;
 800916e:	e00a      	b.n	8009186 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	6a3b      	ldr	r3, [r7, #32]
 8009176:	4413      	add	r3, r2
 8009178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800917c:	461a      	mov	r2, r3
 800917e:	2300      	movs	r3, #0
 8009180:	6053      	str	r3, [r2, #4]
 8009182:	e000      	b.n	8009186 <USB_HC_StartXfer+0x3ea>
          break;
 8009184:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	4413      	add	r3, r2
 800918e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800919c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	78db      	ldrb	r3, [r3, #3]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d004      	beq.n	80091b0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091ac:	613b      	str	r3, [r7, #16]
 80091ae:	e003      	b.n	80091b8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80091b6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091be:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	015a      	lsls	r2, r3, #5
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	4413      	add	r3, r2
 80091c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091cc:	461a      	mov	r2, r3
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d003      	beq.n	80091e0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	e055      	b.n	8009288 <USB_HC_StartXfer+0x4ec>
 80091dc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	78db      	ldrb	r3, [r3, #3]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d14e      	bne.n	8009286 <USB_HC_StartXfer+0x4ea>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d04a      	beq.n	8009286 <USB_HC_StartXfer+0x4ea>
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	79db      	ldrb	r3, [r3, #7]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d146      	bne.n	8009286 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	7c9b      	ldrb	r3, [r3, #18]
 80091fc:	2b03      	cmp	r3, #3
 80091fe:	d831      	bhi.n	8009264 <USB_HC_StartXfer+0x4c8>
 8009200:	a201      	add	r2, pc, #4	@ (adr r2, 8009208 <USB_HC_StartXfer+0x46c>)
 8009202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009206:	bf00      	nop
 8009208:	08009219 	.word	0x08009219
 800920c:	0800923d 	.word	0x0800923d
 8009210:	08009219 	.word	0x08009219
 8009214:	0800923d 	.word	0x0800923d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	3303      	adds	r3, #3
 800921e:	089b      	lsrs	r3, r3, #2
 8009220:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009222:	8afa      	ldrh	r2, [r7, #22]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009228:	b29b      	uxth	r3, r3
 800922a:	429a      	cmp	r2, r3
 800922c:	d91c      	bls.n	8009268 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f043 0220 	orr.w	r2, r3, #32
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	619a      	str	r2, [r3, #24]
        }
        break;
 800923a:	e015      	b.n	8009268 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	3303      	adds	r3, #3
 8009242:	089b      	lsrs	r3, r3, #2
 8009244:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009246:	8afa      	ldrh	r2, [r7, #22]
 8009248:	6a3b      	ldr	r3, [r7, #32]
 800924a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	b29b      	uxth	r3, r3
 8009252:	429a      	cmp	r2, r3
 8009254:	d90a      	bls.n	800926c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	699b      	ldr	r3, [r3, #24]
 800925a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	619a      	str	r2, [r3, #24]
        }
        break;
 8009262:	e003      	b.n	800926c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8009264:	bf00      	nop
 8009266:	e002      	b.n	800926e <USB_HC_StartXfer+0x4d2>
        break;
 8009268:	bf00      	nop
 800926a:	e000      	b.n	800926e <USB_HC_StartXfer+0x4d2>
        break;
 800926c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	6999      	ldr	r1, [r3, #24]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	785a      	ldrb	r2, [r3, #1]
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	b29b      	uxth	r3, r3
 800927c:	2000      	movs	r0, #0
 800927e:	9000      	str	r0, [sp, #0]
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f7ff f9c9 	bl	8008618 <USB_WritePacket>
  }

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3728      	adds	r7, #40	@ 0x28
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009290:	b480      	push	{r7}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092a2:	695b      	ldr	r3, [r3, #20]
 80092a4:	b29b      	uxth	r3, r3
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3714      	adds	r7, #20
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b089      	sub	sp, #36	@ 0x24
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80092c2:	78fb      	ldrb	r3, [r7, #3]
 80092c4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80092c6:	2300      	movs	r3, #0
 80092c8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	015a      	lsls	r2, r3, #5
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	4413      	add	r3, r2
 80092d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	0c9b      	lsrs	r3, r3, #18
 80092da:	f003 0303 	and.w	r3, r3, #3
 80092de:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	015a      	lsls	r2, r3, #5
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	4413      	add	r3, r2
 80092e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	0fdb      	lsrs	r3, r3, #31
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	0fdb      	lsrs	r3, r3, #31
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	f003 0320 	and.w	r3, r3, #32
 8009314:	2b20      	cmp	r3, #32
 8009316:	d10d      	bne.n	8009334 <USB_HC_Halt+0x82>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10a      	bne.n	8009334 <USB_HC_Halt+0x82>
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d005      	beq.n	8009330 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	2b01      	cmp	r3, #1
 8009328:	d002      	beq.n	8009330 <USB_HC_Halt+0x7e>
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	2b03      	cmp	r3, #3
 800932e:	d101      	bne.n	8009334 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009330:	2300      	movs	r3, #0
 8009332:	e0d8      	b.n	80094e6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <USB_HC_Halt+0x8e>
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d173      	bne.n	8009428 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	4413      	add	r3, r2
 8009348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	69ba      	ldr	r2, [r7, #24]
 8009350:	0151      	lsls	r1, r2, #5
 8009352:	69fa      	ldr	r2, [r7, #28]
 8009354:	440a      	add	r2, r1
 8009356:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800935a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800935e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689b      	ldr	r3, [r3, #8]
 8009364:	f003 0320 	and.w	r3, r3, #32
 8009368:	2b00      	cmp	r3, #0
 800936a:	d14a      	bne.n	8009402 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009370:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d133      	bne.n	80093e0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	4413      	add	r3, r2
 8009380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	0151      	lsls	r1, r2, #5
 800938a:	69fa      	ldr	r2, [r7, #28]
 800938c:	440a      	add	r2, r1
 800938e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009392:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009396:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	69ba      	ldr	r2, [r7, #24]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	69fa      	ldr	r2, [r7, #28]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80093b6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	3301      	adds	r3, #1
 80093bc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093c4:	d82e      	bhi.n	8009424 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	015a      	lsls	r2, r3, #5
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	4413      	add	r3, r2
 80093ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093dc:	d0ec      	beq.n	80093b8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80093de:	e081      	b.n	80094e4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	69ba      	ldr	r2, [r7, #24]
 80093f0:	0151      	lsls	r1, r2, #5
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	440a      	add	r2, r1
 80093f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80093fe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009400:	e070      	b.n	80094e4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	69fa      	ldr	r2, [r7, #28]
 8009416:	440a      	add	r2, r1
 8009418:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800941c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009420:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009422:	e05f      	b.n	80094e4 <USB_HC_Halt+0x232>
            break;
 8009424:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009426:	e05d      	b.n	80094e4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	4413      	add	r3, r2
 8009430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	69ba      	ldr	r2, [r7, #24]
 8009438:	0151      	lsls	r1, r2, #5
 800943a:	69fa      	ldr	r2, [r7, #28]
 800943c:	440a      	add	r2, r1
 800943e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009442:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009446:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d133      	bne.n	80094c0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009458:	69bb      	ldr	r3, [r7, #24]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	4413      	add	r3, r2
 8009460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	69ba      	ldr	r2, [r7, #24]
 8009468:	0151      	lsls	r1, r2, #5
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	440a      	add	r2, r1
 800946e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009472:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009476:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	4413      	add	r3, r2
 8009480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	0151      	lsls	r1, r2, #5
 800948a:	69fa      	ldr	r2, [r7, #28]
 800948c:	440a      	add	r2, r1
 800948e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009492:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009496:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	3301      	adds	r3, #1
 800949c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80094a4:	d81d      	bhi.n	80094e2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80094b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094bc:	d0ec      	beq.n	8009498 <USB_HC_Halt+0x1e6>
 80094be:	e011      	b.n	80094e4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	0151      	lsls	r1, r2, #5
 80094d2:	69fa      	ldr	r2, [r7, #28]
 80094d4:	440a      	add	r2, r1
 80094d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	e000      	b.n	80094e4 <USB_HC_Halt+0x232>
          break;
 80094e2:	bf00      	nop
    }
  }

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3724      	adds	r7, #36	@ 0x24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
	...

080094f4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009508:	2301      	movs	r3, #1
 800950a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	04da      	lsls	r2, r3, #19
 8009510:	4b15      	ldr	r3, [pc, #84]	@ (8009568 <USB_DoPing+0x74>)
 8009512:	4013      	ands	r3, r2
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	0151      	lsls	r1, r2, #5
 8009518:	697a      	ldr	r2, [r7, #20]
 800951a:	440a      	add	r2, r1
 800951c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009520:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009524:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	015a      	lsls	r2, r3, #5
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	4413      	add	r3, r2
 800952e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800953c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009544:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	4413      	add	r3, r2
 800954e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009552:	461a      	mov	r2, r3
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	1ff80000 	.word	0x1ff80000

0800956c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b088      	sub	sp, #32
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009574:	2300      	movs	r3, #0
 8009576:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800957c:	2300      	movs	r3, #0
 800957e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7fe ff8c 	bl	800849e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009586:	2110      	movs	r1, #16
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7fe ffe5 	bl	8008558 <USB_FlushTxFifo>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff f80f 	bl	80085bc <USB_FlushRxFifo>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80095a8:	2300      	movs	r3, #0
 80095aa:	61bb      	str	r3, [r7, #24]
 80095ac:	e01f      	b.n	80095ee <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	015a      	lsls	r2, r3, #5
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	4413      	add	r3, r2
 80095b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80095c4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80095d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80095e2:	461a      	mov	r2, r3
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	3301      	adds	r3, #1
 80095ec:	61bb      	str	r3, [r7, #24]
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b0f      	cmp	r3, #15
 80095f2:	d9dc      	bls.n	80095ae <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80095f4:	2300      	movs	r3, #0
 80095f6:	61bb      	str	r3, [r7, #24]
 80095f8:	e034      	b.n	8009664 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	4413      	add	r3, r2
 8009602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009610:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009618:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009620:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	4413      	add	r3, r2
 800962a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800962e:	461a      	mov	r2, r3
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3301      	adds	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009640:	d80c      	bhi.n	800965c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	015a      	lsls	r2, r3, #5
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	4413      	add	r3, r2
 800964a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009654:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009658:	d0ec      	beq.n	8009634 <USB_StopHost+0xc8>
 800965a:	e000      	b.n	800965e <USB_StopHost+0xf2>
        break;
 800965c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	3301      	adds	r3, #1
 8009662:	61bb      	str	r3, [r7, #24]
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	2b0f      	cmp	r3, #15
 8009668:	d9c7      	bls.n	80095fa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009670:	461a      	mov	r2, r3
 8009672:	f04f 33ff 	mov.w	r3, #4294967295
 8009676:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f04f 32ff 	mov.w	r2, #4294967295
 800967e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7fe fefb 	bl	800847c <USB_EnableGlobalInt>

  return ret;
 8009686:	7ffb      	ldrb	r3, [r7, #31]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009690:	b590      	push	{r4, r7, lr}
 8009692:	b089      	sub	sp, #36	@ 0x24
 8009694:	af04      	add	r7, sp, #16
 8009696:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009698:	2301      	movs	r3, #1
 800969a:	2202      	movs	r2, #2
 800969c:	2102      	movs	r1, #2
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fc85 	bl	8009fae <USBH_FindInterface>
 80096a4:	4603      	mov	r3, r0
 80096a6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	2bff      	cmp	r3, #255	@ 0xff
 80096ac:	d002      	beq.n	80096b4 <USBH_CDC_InterfaceInit+0x24>
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d901      	bls.n	80096b8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80096b4:	2302      	movs	r3, #2
 80096b6:	e13d      	b.n	8009934 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fc5a 	bl	8009f76 <USBH_SelectInterface>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d001      	beq.n	80096d0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80096cc:	2302      	movs	r3, #2
 80096ce:	e131      	b.n	8009934 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80096d6:	2050      	movs	r0, #80	@ 0x50
 80096d8:	f002 fb82 	bl	800bde0 <malloc>
 80096dc:	4603      	mov	r3, r0
 80096de:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80096f0:	2302      	movs	r3, #2
 80096f2:	e11f      	b.n	8009934 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80096f4:	2250      	movs	r2, #80	@ 0x50
 80096f6:	2100      	movs	r1, #0
 80096f8:	68b8      	ldr	r0, [r7, #8]
 80096fa:	f002 feff 	bl	800c4fc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	211a      	movs	r1, #26
 8009704:	fb01 f303 	mul.w	r3, r1, r3
 8009708:	4413      	add	r3, r2
 800970a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	b25b      	sxtb	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	da15      	bge.n	8009742 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	211a      	movs	r1, #26
 800971c:	fb01 f303 	mul.w	r3, r1, r3
 8009720:	4413      	add	r3, r2
 8009722:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009726:	781a      	ldrb	r2, [r3, #0]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	211a      	movs	r1, #26
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800973c:	881a      	ldrh	r2, [r3, #0]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	785b      	ldrb	r3, [r3, #1]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 ffbe 	bl	800b6ca <USBH_AllocPipe>
 800974e:	4603      	mov	r3, r0
 8009750:	461a      	mov	r2, r3
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	7819      	ldrb	r1, [r3, #0]
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	7858      	ldrb	r0, [r3, #1]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	8952      	ldrh	r2, [r2, #10]
 800976e:	9202      	str	r2, [sp, #8]
 8009770:	2203      	movs	r2, #3
 8009772:	9201      	str	r2, [sp, #4]
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	4623      	mov	r3, r4
 8009778:	4602      	mov	r2, r0
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 ff76 	bl	800b66c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2200      	movs	r2, #0
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f002 fa85 	bl	800bc98 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800978e:	2300      	movs	r3, #0
 8009790:	2200      	movs	r2, #0
 8009792:	210a      	movs	r1, #10
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fc0a 	bl	8009fae <USBH_FindInterface>
 800979a:	4603      	mov	r3, r0
 800979c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	2bff      	cmp	r3, #255	@ 0xff
 80097a2:	d002      	beq.n	80097aa <USBH_CDC_InterfaceInit+0x11a>
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d901      	bls.n	80097ae <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80097aa:	2302      	movs	r3, #2
 80097ac:	e0c2      	b.n	8009934 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80097ae:	7bfb      	ldrb	r3, [r7, #15]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	211a      	movs	r1, #26
 80097b4:	fb01 f303 	mul.w	r3, r1, r3
 80097b8:	4413      	add	r3, r2
 80097ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	b25b      	sxtb	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	da16      	bge.n	80097f4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	211a      	movs	r1, #26
 80097cc:	fb01 f303 	mul.w	r3, r1, r3
 80097d0:	4413      	add	r3, r2
 80097d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80097d6:	781a      	ldrb	r2, [r3, #0]
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	211a      	movs	r1, #26
 80097e2:	fb01 f303 	mul.w	r3, r1, r3
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80097ec:	881a      	ldrh	r2, [r3, #0]
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	835a      	strh	r2, [r3, #26]
 80097f2:	e015      	b.n	8009820 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80097f4:	7bfb      	ldrb	r3, [r7, #15]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	211a      	movs	r1, #26
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	4413      	add	r3, r2
 8009800:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009804:	781a      	ldrb	r2, [r3, #0]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	211a      	movs	r1, #26
 8009810:	fb01 f303 	mul.w	r3, r1, r3
 8009814:	4413      	add	r3, r2
 8009816:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800981a:	881a      	ldrh	r2, [r3, #0]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	211a      	movs	r1, #26
 8009826:	fb01 f303 	mul.w	r3, r1, r3
 800982a:	4413      	add	r3, r2
 800982c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	b25b      	sxtb	r3, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	da16      	bge.n	8009866 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	211a      	movs	r1, #26
 800983e:	fb01 f303 	mul.w	r3, r1, r3
 8009842:	4413      	add	r3, r2
 8009844:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009848:	781a      	ldrb	r2, [r3, #0]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	211a      	movs	r1, #26
 8009854:	fb01 f303 	mul.w	r3, r1, r3
 8009858:	4413      	add	r3, r2
 800985a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800985e:	881a      	ldrh	r2, [r3, #0]
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	835a      	strh	r2, [r3, #26]
 8009864:	e015      	b.n	8009892 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	211a      	movs	r1, #26
 800986c:	fb01 f303 	mul.w	r3, r1, r3
 8009870:	4413      	add	r3, r2
 8009872:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009876:	781a      	ldrb	r2, [r3, #0]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	211a      	movs	r1, #26
 8009882:	fb01 f303 	mul.w	r3, r1, r3
 8009886:	4413      	add	r3, r2
 8009888:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800988c:	881a      	ldrh	r2, [r3, #0]
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	7b9b      	ldrb	r3, [r3, #14]
 8009896:	4619      	mov	r1, r3
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f001 ff16 	bl	800b6ca <USBH_AllocPipe>
 800989e:	4603      	mov	r3, r0
 80098a0:	461a      	mov	r2, r3
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	7bdb      	ldrb	r3, [r3, #15]
 80098aa:	4619      	mov	r1, r3
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f001 ff0c 	bl	800b6ca <USBH_AllocPipe>
 80098b2:	4603      	mov	r3, r0
 80098b4:	461a      	mov	r2, r3
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	7b59      	ldrb	r1, [r3, #13]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	7b98      	ldrb	r0, [r3, #14]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	8b12      	ldrh	r2, [r2, #24]
 80098d2:	9202      	str	r2, [sp, #8]
 80098d4:	2202      	movs	r2, #2
 80098d6:	9201      	str	r2, [sp, #4]
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	4623      	mov	r3, r4
 80098dc:	4602      	mov	r2, r0
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f001 fec4 	bl	800b66c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	7b19      	ldrb	r1, [r3, #12]
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	7bd8      	ldrb	r0, [r3, #15]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	8b52      	ldrh	r2, [r2, #26]
 80098fc:	9202      	str	r2, [sp, #8]
 80098fe:	2202      	movs	r2, #2
 8009900:	9201      	str	r2, [sp, #4]
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	4623      	mov	r3, r4
 8009906:	4602      	mov	r2, r0
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f001 feaf 	bl	800b66c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	7b5b      	ldrb	r3, [r3, #13]
 800991a:	2200      	movs	r2, #0
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f002 f9ba 	bl	800bc98 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	7b1b      	ldrb	r3, [r3, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f002 f9b3 	bl	800bc98 <USBH_LL_SetToggle>

  return USBH_OK;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3714      	adds	r7, #20
 8009938:	46bd      	mov	sp, r7
 800993a:	bd90      	pop	{r4, r7, pc}

0800993c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800994a:	69db      	ldr	r3, [r3, #28]
 800994c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00e      	beq.n	8009974 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	4619      	mov	r1, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 fea4 	bl	800b6aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 fecf 	bl	800b70c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	7b1b      	ldrb	r3, [r3, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00e      	beq.n	800999a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	7b1b      	ldrb	r3, [r3, #12]
 8009980:	4619      	mov	r1, r3
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f001 fe91 	bl	800b6aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	7b1b      	ldrb	r3, [r3, #12]
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 febc 	bl	800b70c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	7b5b      	ldrb	r3, [r3, #13]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d00e      	beq.n	80099c0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	7b5b      	ldrb	r3, [r3, #13]
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 fe7e 	bl	800b6aa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	7b5b      	ldrb	r3, [r3, #13]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f001 fea9 	bl	800b70c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	2200      	movs	r2, #0
 80099be:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099c6:	69db      	ldr	r3, [r3, #28]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d00b      	beq.n	80099e4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f002 fa0b 	bl	800bdf0 <free>
    phost->pActiveClass->pData = 0U;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099e0:	2200      	movs	r2, #0
 80099e2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3340      	adds	r3, #64	@ 0x40
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f8b1 	bl	8009b6e <GetLineCoding>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009a10:	7afb      	ldrb	r3, [r7, #11]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d105      	bne.n	8009a22 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a1c:	2102      	movs	r1, #2
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009a22:	7afb      	ldrb	r3, [r7, #11]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a34:	2301      	movs	r3, #1
 8009a36:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a42:	69db      	ldr	r3, [r3, #28]
 8009a44:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d877      	bhi.n	8009b40 <USBH_CDC_Process+0x114>
 8009a50:	a201      	add	r2, pc, #4	@ (adr r2, 8009a58 <USBH_CDC_Process+0x2c>)
 8009a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a56:	bf00      	nop
 8009a58:	08009a6d 	.word	0x08009a6d
 8009a5c:	08009a73 	.word	0x08009a73
 8009a60:	08009aa3 	.word	0x08009aa3
 8009a64:	08009b17 	.word	0x08009b17
 8009a68:	08009b25 	.word	0x08009b25
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009a70:	e06d      	b.n	8009b4e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 f897 	bl	8009bac <SetLineCoding>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d104      	bne.n	8009a92 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009a90:	e058      	b.n	8009b44 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d055      	beq.n	8009b44 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2204      	movs	r2, #4
 8009a9c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009aa0:	e050      	b.n	8009b44 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	3340      	adds	r3, #64	@ 0x40
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f860 	bl	8009b6e <GetLineCoding>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ab2:	7bbb      	ldrb	r3, [r7, #14]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d126      	bne.n	8009b06 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aca:	791b      	ldrb	r3, [r3, #4]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d13b      	bne.n	8009b48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ada:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d133      	bne.n	8009b48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aea:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d12b      	bne.n	8009b48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009af8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d124      	bne.n	8009b48 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 f958 	bl	8009db4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009b04:	e020      	b.n	8009b48 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009b06:	7bbb      	ldrb	r3, [r7, #14]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d01d      	beq.n	8009b48 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	2204      	movs	r2, #4
 8009b10:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009b14:	e018      	b.n	8009b48 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f867 	bl	8009bea <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f8da 	bl	8009cd6 <CDC_ProcessReception>
      break;
 8009b22:	e014      	b.n	8009b4e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009b24:	2100      	movs	r1, #0
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f001 f81a 	bl	800ab60 <USBH_ClrFeature>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10a      	bne.n	8009b4c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009b3e:	e005      	b.n	8009b4c <USBH_CDC_Process+0x120>

    default:
      break;
 8009b40:	bf00      	nop
 8009b42:	e004      	b.n	8009b4e <USBH_CDC_Process+0x122>
      break;
 8009b44:	bf00      	nop
 8009b46:	e002      	b.n	8009b4e <USBH_CDC_Process+0x122>
      break;
 8009b48:	bf00      	nop
 8009b4a:	e000      	b.n	8009b4e <USBH_CDC_Process+0x122>
      break;
 8009b4c:	bf00      	nop

  }

  return status;
 8009b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3710      	adds	r7, #16
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	22a1      	movs	r2, #161	@ 0xa1
 8009b7c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2221      	movs	r2, #33	@ 0x21
 8009b82:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2207      	movs	r2, #7
 8009b94:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2207      	movs	r2, #7
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f001 fb14 	bl	800b1ca <USBH_CtlReq>
 8009ba2:	4603      	mov	r3, r0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2221      	movs	r2, #33	@ 0x21
 8009bba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2220      	movs	r2, #32
 8009bc0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2207      	movs	r2, #7
 8009bd2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2207      	movs	r2, #7
 8009bd8:	4619      	mov	r1, r3
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 faf5 	bl	800b1ca <USBH_CtlReq>
 8009be0:	4603      	mov	r3, r0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3708      	adds	r7, #8
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}

08009bea <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b086      	sub	sp, #24
 8009bee:	af02      	add	r7, sp, #8
 8009bf0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009bf8:	69db      	ldr	r3, [r3, #28]
 8009bfa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d002      	beq.n	8009c10 <CDC_ProcessTransmission+0x26>
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d023      	beq.n	8009c56 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009c0e:	e05e      	b.n	8009cce <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	8b12      	ldrh	r2, [r2, #24]
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d90b      	bls.n	8009c34 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	69d9      	ldr	r1, [r3, #28]
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8b1a      	ldrh	r2, [r3, #24]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	7b5b      	ldrb	r3, [r3, #13]
 8009c28:	2001      	movs	r0, #1
 8009c2a:	9000      	str	r0, [sp, #0]
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 fcda 	bl	800b5e6 <USBH_BulkSendData>
 8009c32:	e00b      	b.n	8009c4c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009c3c:	b29a      	uxth	r2, r3
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	7b5b      	ldrb	r3, [r3, #13]
 8009c42:	2001      	movs	r0, #1
 8009c44:	9000      	str	r0, [sp, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 fccd 	bl	800b5e6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009c54:	e03b      	b.n	8009cce <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	7b5b      	ldrb	r3, [r3, #13]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 fff1 	bl	800bc44 <USBH_LL_GetURBState>
 8009c62:	4603      	mov	r3, r0
 8009c64:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009c66:	7afb      	ldrb	r3, [r7, #11]
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d128      	bne.n	8009cbe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	8b12      	ldrh	r2, [r2, #24]
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d90e      	bls.n	8009c96 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	8b12      	ldrh	r2, [r2, #24]
 8009c80:	1a9a      	subs	r2, r3, r2
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	69db      	ldr	r3, [r3, #28]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	8b12      	ldrh	r2, [r2, #24]
 8009c8e:	441a      	add	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	61da      	str	r2, [r3, #28]
 8009c94:	e002      	b.n	8009c9c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d004      	beq.n	8009cae <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009cac:	e00e      	b.n	8009ccc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f868 	bl	8009d8c <USBH_CDC_TransmitCallback>
      break;
 8009cbc:	e006      	b.n	8009ccc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009cbe:	7afb      	ldrb	r3, [r7, #11]
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d103      	bne.n	8009ccc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009ccc:	bf00      	nop
  }
}
 8009cce:	bf00      	nop
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b086      	sub	sp, #24
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ce4:	69db      	ldr	r3, [r3, #28]
 8009ce6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d002      	beq.n	8009cfc <CDC_ProcessReception+0x26>
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d00e      	beq.n	8009d18 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009cfa:	e043      	b.n	8009d84 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	6a19      	ldr	r1, [r3, #32]
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	8b5a      	ldrh	r2, [r3, #26]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	7b1b      	ldrb	r3, [r3, #12]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f001 fc91 	bl	800b630 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	2204      	movs	r2, #4
 8009d12:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009d16:	e035      	b.n	8009d84 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	7b1b      	ldrb	r3, [r3, #12]
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f001 ff90 	bl	800bc44 <USBH_LL_GetURBState>
 8009d24:	4603      	mov	r3, r0
 8009d26:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009d28:	7cfb      	ldrb	r3, [r7, #19]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d129      	bne.n	8009d82 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	7b1b      	ldrb	r3, [r3, #12]
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 fef3 	bl	800bb20 <USBH_LL_GetLastXferSize>
 8009d3a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d016      	beq.n	8009d74 <CDC_ProcessReception+0x9e>
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	8b5b      	ldrh	r3, [r3, #26]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d110      	bne.n	8009d74 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	1ad2      	subs	r2, r2, r3
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	6a1a      	ldr	r2, [r3, #32]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	441a      	add	r2, r3
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2203      	movs	r2, #3
 8009d6e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009d72:	e006      	b.n	8009d82 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f80f 	bl	8009da0 <USBH_CDC_ReceiveCallback>
      break;
 8009d82:	bf00      	nop
  }
}
 8009d84:	bf00      	nop
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d101      	bne.n	8009de0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009ddc:	2302      	movs	r3, #2
 8009dde:	e029      	b.n	8009e34 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	79fa      	ldrb	r2, [r7, #7]
 8009de4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 f81f 	bl	8009e3c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f001 fdc3 	bl	800b9b8 <USBH_LL_Init>

  return USBH_OK;
 8009e32:	2300      	movs	r3, #0
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}

08009e3c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e48:	2300      	movs	r3, #0
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	e009      	b.n	8009e62 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	33e0      	adds	r3, #224	@ 0xe0
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	4413      	add	r3, r2
 8009e58:	2200      	movs	r2, #0
 8009e5a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	3301      	adds	r3, #1
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b0f      	cmp	r3, #15
 8009e66:	d9f2      	bls.n	8009e4e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]
 8009e6c:	e009      	b.n	8009e82 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009e78:	2200      	movs	r2, #0
 8009e7a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	60fb      	str	r3, [r7, #12]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e88:	d3f1      	bcc.n	8009e6e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2240      	movs	r2, #64	@ 0x40
 8009eae:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	331c      	adds	r3, #28
 8009eda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f002 fb0b 	bl	800c4fc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009eec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ef0:	2100      	movs	r1, #0
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f002 fb02 	bl	800c4fc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009efe:	2212      	movs	r2, #18
 8009f00:	2100      	movs	r1, #0
 8009f02:	4618      	mov	r0, r3
 8009f04:	f002 fafa 	bl	800c4fc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009f0e:	223e      	movs	r2, #62	@ 0x3e
 8009f10:	2100      	movs	r1, #0
 8009f12:	4618      	mov	r0, r3
 8009f14:	f002 faf2 	bl	800c4fc <memset>

  return USBH_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b085      	sub	sp, #20
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d016      	beq.n	8009f64 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d10e      	bne.n	8009f5e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009f46:	1c59      	adds	r1, r3, #1
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	33de      	adds	r3, #222	@ 0xde
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	73fb      	strb	r3, [r7, #15]
 8009f5c:	e004      	b.n	8009f68 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009f5e:	2302      	movs	r3, #2
 8009f60:	73fb      	strb	r3, [r7, #15]
 8009f62:	e001      	b.n	8009f68 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009f64:	2302      	movs	r3, #2
 8009f66:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr

08009f76 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b085      	sub	sp, #20
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009f8c:	78fa      	ldrb	r2, [r7, #3]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d204      	bcs.n	8009f9c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	78fa      	ldrb	r2, [r7, #3]
 8009f96:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009f9a:	e001      	b.n	8009fa0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3714      	adds	r7, #20
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fac:	4770      	bx	lr

08009fae <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b087      	sub	sp, #28
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]
 8009fb6:	4608      	mov	r0, r1
 8009fb8:	4611      	mov	r1, r2
 8009fba:	461a      	mov	r2, r3
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	70fb      	strb	r3, [r7, #3]
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	70bb      	strb	r3, [r7, #2]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009fd6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009fd8:	e025      	b.n	800a026 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009fda:	7dfb      	ldrb	r3, [r7, #23]
 8009fdc:	221a      	movs	r2, #26
 8009fde:	fb02 f303 	mul.w	r3, r2, r3
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	3302      	adds	r3, #2
 8009fea:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	795b      	ldrb	r3, [r3, #5]
 8009ff0:	78fa      	ldrb	r2, [r7, #3]
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d002      	beq.n	8009ffc <USBH_FindInterface+0x4e>
 8009ff6:	78fb      	ldrb	r3, [r7, #3]
 8009ff8:	2bff      	cmp	r3, #255	@ 0xff
 8009ffa:	d111      	bne.n	800a020 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a000:	78ba      	ldrb	r2, [r7, #2]
 800a002:	429a      	cmp	r2, r3
 800a004:	d002      	beq.n	800a00c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a006:	78bb      	ldrb	r3, [r7, #2]
 800a008:	2bff      	cmp	r3, #255	@ 0xff
 800a00a:	d109      	bne.n	800a020 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a010:	787a      	ldrb	r2, [r7, #1]
 800a012:	429a      	cmp	r2, r3
 800a014:	d002      	beq.n	800a01c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a016:	787b      	ldrb	r3, [r7, #1]
 800a018:	2bff      	cmp	r3, #255	@ 0xff
 800a01a:	d101      	bne.n	800a020 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
 800a01e:	e006      	b.n	800a02e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a020:	7dfb      	ldrb	r3, [r7, #23]
 800a022:	3301      	adds	r3, #1
 800a024:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a026:	7dfb      	ldrb	r3, [r7, #23]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d9d6      	bls.n	8009fda <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a02c:	23ff      	movs	r3, #255	@ 0xff
}
 800a02e:	4618      	mov	r0, r3
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 fcf4 	bl	800ba30 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a048:	2101      	movs	r1, #1
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 fe0d 	bl	800bc6a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af04      	add	r7, sp, #16
 800a062:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a064:	2302      	movs	r3, #2
 800a066:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a068:	2300      	movs	r3, #0
 800a06a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b01      	cmp	r3, #1
 800a076:	d102      	bne.n	800a07e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2203      	movs	r2, #3
 800a07c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b0b      	cmp	r3, #11
 800a086:	f200 81bb 	bhi.w	800a400 <USBH_Process+0x3a4>
 800a08a:	a201      	add	r2, pc, #4	@ (adr r2, 800a090 <USBH_Process+0x34>)
 800a08c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a090:	0800a0c1 	.word	0x0800a0c1
 800a094:	0800a0f3 	.word	0x0800a0f3
 800a098:	0800a15b 	.word	0x0800a15b
 800a09c:	0800a39b 	.word	0x0800a39b
 800a0a0:	0800a401 	.word	0x0800a401
 800a0a4:	0800a1fb 	.word	0x0800a1fb
 800a0a8:	0800a341 	.word	0x0800a341
 800a0ac:	0800a231 	.word	0x0800a231
 800a0b0:	0800a251 	.word	0x0800a251
 800a0b4:	0800a26f 	.word	0x0800a26f
 800a0b8:	0800a2b3 	.word	0x0800a2b3
 800a0bc:	0800a383 	.word	0x0800a383
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f000 819b 	beq.w	800a404 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a0d4:	20c8      	movs	r0, #200	@ 0xc8
 800a0d6:	f001 fe12 	bl	800bcfe <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f001 fd05 	bl	800baea <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a0f0:	e188      	b.n	800a404 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d107      	bne.n	800a10c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a10a:	e18a      	b.n	800a422 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a112:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a116:	d914      	bls.n	800a142 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a11e:	3301      	adds	r3, #1
 800a120:	b2da      	uxtb	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d903      	bls.n	800a13a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	220d      	movs	r2, #13
 800a136:	701a      	strb	r2, [r3, #0]
      break;
 800a138:	e173      	b.n	800a422 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
      break;
 800a140:	e16f      	b.n	800a422 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a148:	f103 020a 	add.w	r2, r3, #10
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a152:	200a      	movs	r0, #10
 800a154:	f001 fdd3 	bl	800bcfe <USBH_Delay>
      break;
 800a158:	e163      	b.n	800a422 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a16a:	2104      	movs	r1, #4
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a170:	2064      	movs	r0, #100	@ 0x64
 800a172:	f001 fdc4 	bl	800bcfe <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f001 fc90 	bl	800ba9c <USBH_LL_GetSpeed>
 800a17c:	4603      	mov	r3, r0
 800a17e:	461a      	mov	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2205      	movs	r2, #5
 800a18a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a18c:	2100      	movs	r1, #0
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f001 fa9b 	bl	800b6ca <USBH_AllocPipe>
 800a194:	4603      	mov	r3, r0
 800a196:	461a      	mov	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a19c:	2180      	movs	r1, #128	@ 0x80
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f001 fa93 	bl	800b6ca <USBH_AllocPipe>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	7919      	ldrb	r1, [r3, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a1c0:	9202      	str	r2, [sp, #8]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	9201      	str	r2, [sp, #4]
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2280      	movs	r2, #128	@ 0x80
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f001 fa4d 	bl	800b66c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	7959      	ldrb	r1, [r3, #5]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a1e6:	9202      	str	r2, [sp, #8]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	9201      	str	r2, [sp, #4]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 fa3a 	bl	800b66c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a1f8:	e113      	b.n	800a422 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f916 	bl	800a42c <USBH_HandleEnum>
 800a200:	4603      	mov	r3, r0
 800a202:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a204:	7bbb      	ldrb	r3, [r7, #14]
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	f040 80fd 	bne.w	800a408 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d103      	bne.n	800a228 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2208      	movs	r2, #8
 800a224:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a226:	e0ef      	b.n	800a408 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2207      	movs	r2, #7
 800a22c:	701a      	strb	r2, [r3, #0]
      break;
 800a22e:	e0eb      	b.n	800a408 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a236:	2b00      	cmp	r3, #0
 800a238:	f000 80e8 	beq.w	800a40c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a242:	2101      	movs	r1, #1
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2208      	movs	r2, #8
 800a24c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a24e:	e0dd      	b.n	800a40c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 fc3a 	bl	800aad2 <USBH_SetCfg>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	f040 80d5 	bne.w	800a410 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2209      	movs	r2, #9
 800a26a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a26c:	e0d0      	b.n	800a410 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a274:	f003 0320 	and.w	r3, r3, #32
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d016      	beq.n	800a2aa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a27c:	2101      	movs	r1, #1
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fc4a 	bl	800ab18 <USBH_SetFeature>
 800a284:	4603      	mov	r3, r0
 800a286:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a288:	7bbb      	ldrb	r3, [r7, #14]
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d103      	bne.n	800a298 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	220a      	movs	r2, #10
 800a294:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a296:	e0bd      	b.n	800a414 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800a298:	7bbb      	ldrb	r3, [r7, #14]
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	f040 80b9 	bne.w	800a414 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	220a      	movs	r2, #10
 800a2a6:	701a      	strb	r2, [r3, #0]
      break;
 800a2a8:	e0b4      	b.n	800a414 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	220a      	movs	r2, #10
 800a2ae:	701a      	strb	r2, [r3, #0]
      break;
 800a2b0:	e0b0      	b.n	800a414 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 80ad 	beq.w	800a418 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	73fb      	strb	r3, [r7, #15]
 800a2ca:	e016      	b.n	800a2fa <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a2cc:	7bfa      	ldrb	r2, [r7, #15]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	32de      	adds	r2, #222	@ 0xde
 800a2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2d6:	791a      	ldrb	r2, [r3, #4]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d108      	bne.n	800a2f4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a2e2:	7bfa      	ldrb	r2, [r7, #15]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	32de      	adds	r2, #222	@ 0xde
 800a2e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a2f2:	e005      	b.n	800a300 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a2f4:	7bfb      	ldrb	r3, [r7, #15]
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	73fb      	strb	r3, [r7, #15]
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d0e5      	beq.n	800a2cc <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a306:	2b00      	cmp	r3, #0
 800a308:	d016      	beq.n	800a338 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	4798      	blx	r3
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d109      	bne.n	800a330 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2206      	movs	r2, #6
 800a320:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a328:	2103      	movs	r1, #3
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a32e:	e073      	b.n	800a418 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	220d      	movs	r2, #13
 800a334:	701a      	strb	r2, [r3, #0]
      break;
 800a336:	e06f      	b.n	800a418 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	220d      	movs	r2, #13
 800a33c:	701a      	strb	r2, [r3, #0]
      break;
 800a33e:	e06b      	b.n	800a418 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d017      	beq.n	800a37a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	4798      	blx	r3
 800a356:	4603      	mov	r3, r0
 800a358:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a35a:	7bbb      	ldrb	r3, [r7, #14]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d103      	bne.n	800a36a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	220b      	movs	r2, #11
 800a366:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a368:	e058      	b.n	800a41c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d154      	bne.n	800a41c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	220d      	movs	r2, #13
 800a376:	701a      	strb	r2, [r3, #0]
      break;
 800a378:	e050      	b.n	800a41c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	220d      	movs	r2, #13
 800a37e:	701a      	strb	r2, [r3, #0]
      break;
 800a380:	e04c      	b.n	800a41c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d049      	beq.n	800a420 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
      }
      break;
 800a398:	e042      	b.n	800a420 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f7ff fd4a 	bl	8009e3c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d009      	beq.n	800a3c6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d005      	beq.n	800a3dc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a3d6:	2105      	movs	r1, #5
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d107      	bne.n	800a3f8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff fe22 	bl	800a03a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a3f6:	e014      	b.n	800a422 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f001 fb19 	bl	800ba30 <USBH_LL_Start>
      break;
 800a3fe:	e010      	b.n	800a422 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a400:	bf00      	nop
 800a402:	e00e      	b.n	800a422 <USBH_Process+0x3c6>
      break;
 800a404:	bf00      	nop
 800a406:	e00c      	b.n	800a422 <USBH_Process+0x3c6>
      break;
 800a408:	bf00      	nop
 800a40a:	e00a      	b.n	800a422 <USBH_Process+0x3c6>
    break;
 800a40c:	bf00      	nop
 800a40e:	e008      	b.n	800a422 <USBH_Process+0x3c6>
      break;
 800a410:	bf00      	nop
 800a412:	e006      	b.n	800a422 <USBH_Process+0x3c6>
      break;
 800a414:	bf00      	nop
 800a416:	e004      	b.n	800a422 <USBH_Process+0x3c6>
      break;
 800a418:	bf00      	nop
 800a41a:	e002      	b.n	800a422 <USBH_Process+0x3c6>
      break;
 800a41c:	bf00      	nop
 800a41e:	e000      	b.n	800a422 <USBH_Process+0x3c6>
      break;
 800a420:	bf00      	nop
  }
  return USBH_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b088      	sub	sp, #32
 800a430:	af04      	add	r7, sp, #16
 800a432:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a434:	2301      	movs	r3, #1
 800a436:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a438:	2301      	movs	r3, #1
 800a43a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b07      	cmp	r3, #7
 800a442:	f200 81bd 	bhi.w	800a7c0 <USBH_HandleEnum+0x394>
 800a446:	a201      	add	r2, pc, #4	@ (adr r2, 800a44c <USBH_HandleEnum+0x20>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a46d 	.word	0x0800a46d
 800a450:	0800a527 	.word	0x0800a527
 800a454:	0800a591 	.word	0x0800a591
 800a458:	0800a61b 	.word	0x0800a61b
 800a45c:	0800a685 	.word	0x0800a685
 800a460:	0800a6f5 	.word	0x0800a6f5
 800a464:	0800a73b 	.word	0x0800a73b
 800a468:	0800a781 	.word	0x0800a781
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a46c:	2108      	movs	r1, #8
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 fa4c 	bl	800a90c <USBH_Get_DevDesc>
 800a474:	4603      	mov	r3, r0
 800a476:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a478:	7bbb      	ldrb	r3, [r7, #14]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d12e      	bne.n	800a4dc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2201      	movs	r2, #1
 800a48c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	7919      	ldrb	r1, [r3, #4]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a4a2:	9202      	str	r2, [sp, #8]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	9201      	str	r2, [sp, #4]
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2280      	movs	r2, #128	@ 0x80
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f001 f8dc 	bl	800b66c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	7959      	ldrb	r1, [r3, #5]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a4c8:	9202      	str	r2, [sp, #8]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	9201      	str	r2, [sp, #4]
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	6878      	ldr	r0, [r7, #4]
 800a4d6:	f001 f8c9 	bl	800b66c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a4da:	e173      	b.n	800a7c4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4dc:	7bbb      	ldrb	r3, [r7, #14]
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	f040 8170 	bne.w	800a7c4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a4fa:	2b03      	cmp	r3, #3
 800a4fc:	d903      	bls.n	800a506 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	220d      	movs	r2, #13
 800a502:	701a      	strb	r2, [r3, #0]
      break;
 800a504:	e15e      	b.n	800a7c4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	795b      	ldrb	r3, [r3, #5]
 800a50a:	4619      	mov	r1, r3
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 f8fd 	bl	800b70c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	791b      	ldrb	r3, [r3, #4]
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f001 f8f7 	bl	800b70c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	701a      	strb	r2, [r3, #0]
      break;
 800a524:	e14e      	b.n	800a7c4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a526:	2112      	movs	r1, #18
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f9ef 	bl	800a90c <USBH_Get_DevDesc>
 800a52e:	4603      	mov	r3, r0
 800a530:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a532:	7bbb      	ldrb	r3, [r7, #14]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d103      	bne.n	800a540 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a53e:	e143      	b.n	800a7c8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a540:	7bbb      	ldrb	r3, [r7, #14]
 800a542:	2b03      	cmp	r3, #3
 800a544:	f040 8140 	bne.w	800a7c8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a54e:	3301      	adds	r3, #1
 800a550:	b2da      	uxtb	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d903      	bls.n	800a56a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	220d      	movs	r2, #13
 800a566:	701a      	strb	r2, [r3, #0]
      break;
 800a568:	e12e      	b.n	800a7c8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	795b      	ldrb	r3, [r3, #5]
 800a56e:	4619      	mov	r1, r3
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f001 f8cb 	bl	800b70c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	791b      	ldrb	r3, [r3, #4]
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f001 f8c5 	bl	800b70c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	701a      	strb	r2, [r3, #0]
      break;
 800a58e:	e11b      	b.n	800a7c8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a590:	2101      	movs	r1, #1
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 fa79 	bl	800aa8a <USBH_SetAddress>
 800a598:	4603      	mov	r3, r0
 800a59a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a59c:	7bbb      	ldrb	r3, [r7, #14]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d130      	bne.n	800a604 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a5a2:	2002      	movs	r0, #2
 800a5a4:	f001 fbab 	bl	800bcfe <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2203      	movs	r2, #3
 800a5b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	7919      	ldrb	r1, [r3, #4]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a5ca:	9202      	str	r2, [sp, #8]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	9201      	str	r2, [sp, #4]
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2280      	movs	r2, #128	@ 0x80
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 f848 	bl	800b66c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	7959      	ldrb	r1, [r3, #5]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a5f0:	9202      	str	r2, [sp, #8]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	9201      	str	r2, [sp, #4]
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 f835 	bl	800b66c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a602:	e0e3      	b.n	800a7cc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a604:	7bbb      	ldrb	r3, [r7, #14]
 800a606:	2b03      	cmp	r3, #3
 800a608:	f040 80e0 	bne.w	800a7cc <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	220d      	movs	r2, #13
 800a610:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	705a      	strb	r2, [r3, #1]
      break;
 800a618:	e0d8      	b.n	800a7cc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a61a:	2109      	movs	r1, #9
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f9a1 	bl	800a964 <USBH_Get_CfgDesc>
 800a622:	4603      	mov	r3, r0
 800a624:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a626:	7bbb      	ldrb	r3, [r7, #14]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d103      	bne.n	800a634 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2204      	movs	r2, #4
 800a630:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a632:	e0cd      	b.n	800a7d0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a634:	7bbb      	ldrb	r3, [r7, #14]
 800a636:	2b03      	cmp	r3, #3
 800a638:	f040 80ca 	bne.w	800a7d0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a642:	3301      	adds	r3, #1
 800a644:	b2da      	uxtb	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a652:	2b03      	cmp	r3, #3
 800a654:	d903      	bls.n	800a65e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	220d      	movs	r2, #13
 800a65a:	701a      	strb	r2, [r3, #0]
      break;
 800a65c:	e0b8      	b.n	800a7d0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	795b      	ldrb	r3, [r3, #5]
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 f851 	bl	800b70c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	791b      	ldrb	r3, [r3, #4]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f001 f84b 	bl	800b70c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2200      	movs	r2, #0
 800a67a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2200      	movs	r2, #0
 800a680:	701a      	strb	r2, [r3, #0]
      break;
 800a682:	e0a5      	b.n	800a7d0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f969 	bl	800a964 <USBH_Get_CfgDesc>
 800a692:	4603      	mov	r3, r0
 800a694:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a696:	7bbb      	ldrb	r3, [r7, #14]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d103      	bne.n	800a6a4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2205      	movs	r2, #5
 800a6a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a6a2:	e097      	b.n	800a7d4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	2b03      	cmp	r3, #3
 800a6a8:	f040 8094 	bne.w	800a7d4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	b2da      	uxtb	r2, r3
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	d903      	bls.n	800a6ce <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	220d      	movs	r2, #13
 800a6ca:	701a      	strb	r2, [r3, #0]
      break;
 800a6cc:	e082      	b.n	800a7d4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	795b      	ldrb	r3, [r3, #5]
 800a6d2:	4619      	mov	r1, r3
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f001 f819 	bl	800b70c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	791b      	ldrb	r3, [r3, #4]
 800a6de:	4619      	mov	r1, r3
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f001 f813 	bl	800b70c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	701a      	strb	r2, [r3, #0]
      break;
 800a6f2:	e06f      	b.n	800a7d4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d019      	beq.n	800a732 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a70a:	23ff      	movs	r3, #255	@ 0xff
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f953 	bl	800a9b8 <USBH_Get_StringDesc>
 800a712:	4603      	mov	r3, r0
 800a714:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a716:	7bbb      	ldrb	r3, [r7, #14]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d103      	bne.n	800a724 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2206      	movs	r2, #6
 800a720:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a722:	e059      	b.n	800a7d8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a724:	7bbb      	ldrb	r3, [r7, #14]
 800a726:	2b03      	cmp	r3, #3
 800a728:	d156      	bne.n	800a7d8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2206      	movs	r2, #6
 800a72e:	705a      	strb	r2, [r3, #1]
      break;
 800a730:	e052      	b.n	800a7d8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2206      	movs	r2, #6
 800a736:	705a      	strb	r2, [r3, #1]
      break;
 800a738:	e04e      	b.n	800a7d8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a740:	2b00      	cmp	r3, #0
 800a742:	d019      	beq.n	800a778 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a750:	23ff      	movs	r3, #255	@ 0xff
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f930 	bl	800a9b8 <USBH_Get_StringDesc>
 800a758:	4603      	mov	r3, r0
 800a75a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d103      	bne.n	800a76a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2207      	movs	r2, #7
 800a766:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a768:	e038      	b.n	800a7dc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a76a:	7bbb      	ldrb	r3, [r7, #14]
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	d135      	bne.n	800a7dc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2207      	movs	r2, #7
 800a774:	705a      	strb	r2, [r3, #1]
      break;
 800a776:	e031      	b.n	800a7dc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2207      	movs	r2, #7
 800a77c:	705a      	strb	r2, [r3, #1]
      break;
 800a77e:	e02d      	b.n	800a7dc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a786:	2b00      	cmp	r3, #0
 800a788:	d017      	beq.n	800a7ba <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a796:	23ff      	movs	r3, #255	@ 0xff
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f000 f90d 	bl	800a9b8 <USBH_Get_StringDesc>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d102      	bne.n	800a7ae <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a7ac:	e018      	b.n	800a7e0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a7ae:	7bbb      	ldrb	r3, [r7, #14]
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d115      	bne.n	800a7e0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7b8:	e012      	b.n	800a7e0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a7be:	e00f      	b.n	800a7e0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a7c0:	bf00      	nop
 800a7c2:	e00e      	b.n	800a7e2 <USBH_HandleEnum+0x3b6>
      break;
 800a7c4:	bf00      	nop
 800a7c6:	e00c      	b.n	800a7e2 <USBH_HandleEnum+0x3b6>
      break;
 800a7c8:	bf00      	nop
 800a7ca:	e00a      	b.n	800a7e2 <USBH_HandleEnum+0x3b6>
      break;
 800a7cc:	bf00      	nop
 800a7ce:	e008      	b.n	800a7e2 <USBH_HandleEnum+0x3b6>
      break;
 800a7d0:	bf00      	nop
 800a7d2:	e006      	b.n	800a7e2 <USBH_HandleEnum+0x3b6>
      break;
 800a7d4:	bf00      	nop
 800a7d6:	e004      	b.n	800a7e2 <USBH_HandleEnum+0x3b6>
      break;
 800a7d8:	bf00      	nop
 800a7da:	e002      	b.n	800a7e2 <USBH_HandleEnum+0x3b6>
      break;
 800a7dc:	bf00      	nop
 800a7de:	e000      	b.n	800a7e2 <USBH_HandleEnum+0x3b6>
      break;
 800a7e0:	bf00      	nop
  }
  return Status;
 800a7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a7fe:	bf00      	nop
 800a800:	370c      	adds	r7, #12
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr

0800a80a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a80a:	b580      	push	{r7, lr}
 800a80c:	b082      	sub	sp, #8
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a818:	1c5a      	adds	r2, r3, #1
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f804 	bl	800a82e <USBH_HandleSof>
}
 800a826:	bf00      	nop
 800a828:	3708      	adds	r7, #8
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b082      	sub	sp, #8
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b0b      	cmp	r3, #11
 800a83e:	d10a      	bne.n	800a856 <USBH_HandleSof+0x28>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a846:	2b00      	cmp	r3, #0
 800a848:	d005      	beq.n	800a856 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	4798      	blx	r3
  }
}
 800a856:	bf00      	nop
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a85e:	b480      	push	{r7}
 800a860:	b083      	sub	sp, #12
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a86e:	bf00      	nop
}
 800a870:	370c      	adds	r7, #12
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b083      	sub	sp, #12
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a88a:	bf00      	nop
}
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a8b6:	2300      	movs	r3, #0
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f001 f8be 	bl	800ba66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	791b      	ldrb	r3, [r3, #4]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 ff0b 	bl	800b70c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	795b      	ldrb	r3, [r3, #5]
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f000 ff05 	bl	800b70c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	3708      	adds	r7, #8
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af02      	add	r7, sp, #8
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	460b      	mov	r3, r1
 800a916:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a918:	887b      	ldrh	r3, [r7, #2]
 800a91a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a91e:	d901      	bls.n	800a924 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a920:	2303      	movs	r3, #3
 800a922:	e01b      	b.n	800a95c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a92a:	887b      	ldrh	r3, [r7, #2]
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	4613      	mov	r3, r2
 800a930:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a934:	2100      	movs	r1, #0
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f872 	bl	800aa20 <USBH_GetDescriptor>
 800a93c:	4603      	mov	r3, r0
 800a93e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d109      	bne.n	800a95a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a94c:	887a      	ldrh	r2, [r7, #2]
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f929 	bl	800aba8 <USBH_ParseDevDesc>
 800a956:	4603      	mov	r3, r0
 800a958:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af02      	add	r7, sp, #8
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	460b      	mov	r3, r1
 800a96e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	331c      	adds	r3, #28
 800a974:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a976:	887b      	ldrh	r3, [r7, #2]
 800a978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a97c:	d901      	bls.n	800a982 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a97e:	2303      	movs	r3, #3
 800a980:	e016      	b.n	800a9b0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a982:	887b      	ldrh	r3, [r7, #2]
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a98c:	2100      	movs	r1, #0
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 f846 	bl	800aa20 <USBH_GetDescriptor>
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a998:	7bfb      	ldrb	r3, [r7, #15]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d107      	bne.n	800a9ae <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a99e:	887b      	ldrh	r3, [r7, #2]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	68b9      	ldr	r1, [r7, #8]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 f9af 	bl	800ad08 <USBH_ParseCfgDesc>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	607a      	str	r2, [r7, #4]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	72fb      	strb	r3, [r7, #11]
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a9cc:	893b      	ldrh	r3, [r7, #8]
 800a9ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9d2:	d802      	bhi.n	800a9da <USBH_Get_StringDesc+0x22>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e01c      	b.n	800aa18 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a9de:	7afb      	ldrb	r3, [r7, #11]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a9e6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a9ee:	893b      	ldrh	r3, [r7, #8]
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 f812 	bl	800aa20 <USBH_GetDescriptor>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800aa00:	7dfb      	ldrb	r3, [r7, #23]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d107      	bne.n	800aa16 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800aa0c:	893a      	ldrh	r2, [r7, #8]
 800aa0e:	6879      	ldr	r1, [r7, #4]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f000 fb8d 	bl	800b130 <USBH_ParseStringDesc>
  }

  return status;
 800aa16:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	607b      	str	r3, [r7, #4]
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	72fb      	strb	r3, [r7, #11]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	789b      	ldrb	r3, [r3, #2]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d11c      	bne.n	800aa74 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800aa3a:	7afb      	ldrb	r3, [r7, #11]
 800aa3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa40:	b2da      	uxtb	r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2206      	movs	r2, #6
 800aa4a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	893a      	ldrh	r2, [r7, #8]
 800aa50:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800aa52:	893b      	ldrh	r3, [r7, #8]
 800aa54:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aa58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa5c:	d104      	bne.n	800aa68 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	f240 4209 	movw	r2, #1033	@ 0x409
 800aa64:	829a      	strh	r2, [r3, #20]
 800aa66:	e002      	b.n	800aa6e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	8b3a      	ldrh	r2, [r7, #24]
 800aa72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800aa74:	8b3b      	ldrh	r3, [r7, #24]
 800aa76:	461a      	mov	r2, r3
 800aa78:	6879      	ldr	r1, [r7, #4]
 800aa7a:	68f8      	ldr	r0, [r7, #12]
 800aa7c:	f000 fba5 	bl	800b1ca <USBH_CtlReq>
 800aa80:	4603      	mov	r3, r0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	789b      	ldrb	r3, [r3, #2]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d10f      	bne.n	800aabe <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2205      	movs	r2, #5
 800aaa8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aabe:	2200      	movs	r2, #0
 800aac0:	2100      	movs	r1, #0
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fb81 	bl	800b1ca <USBH_CtlReq>
 800aac8:	4603      	mov	r3, r0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	789b      	ldrb	r3, [r3, #2]
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d10e      	bne.n	800ab04 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2209      	movs	r2, #9
 800aaf0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	887a      	ldrh	r2, [r7, #2]
 800aaf6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab04:	2200      	movs	r2, #0
 800ab06:	2100      	movs	r1, #0
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fb5e 	bl	800b1ca <USBH_CtlReq>
 800ab0e:	4603      	mov	r3, r0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	789b      	ldrb	r3, [r3, #2]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d10f      	bne.n	800ab4c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2203      	movs	r2, #3
 800ab36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2100      	movs	r1, #0
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f000 fb3a 	bl	800b1ca <USBH_CtlReq>
 800ab56:	4603      	mov	r3, r0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3708      	adds	r7, #8
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	789b      	ldrb	r3, [r3, #2]
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d10f      	bne.n	800ab94 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2202      	movs	r2, #2
 800ab78:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ab86:	78fb      	ldrb	r3, [r7, #3]
 800ab88:	b29a      	uxth	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2200      	movs	r2, #0
 800ab92:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ab94:	2200      	movs	r2, #0
 800ab96:	2100      	movs	r1, #0
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 fb16 	bl	800b1ca <USBH_CtlReq>
 800ab9e:	4603      	mov	r3, r0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	4613      	mov	r3, r2
 800abb4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800abbc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800abc8:	2302      	movs	r3, #2
 800abca:	e094      	b.n	800acf6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	781a      	ldrb	r2, [r3, #0]
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	785a      	ldrb	r2, [r3, #1]
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	3302      	adds	r3, #2
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	3303      	adds	r3, #3
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	021b      	lsls	r3, r3, #8
 800abec:	b29b      	uxth	r3, r3
 800abee:	4313      	orrs	r3, r2
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	791a      	ldrb	r2, [r3, #4]
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	795a      	ldrb	r2, [r3, #5]
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	799a      	ldrb	r2, [r3, #6]
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	79da      	ldrb	r2, [r3, #7]
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d004      	beq.n	800ac2a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d11b      	bne.n	800ac62 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	79db      	ldrb	r3, [r3, #7]
 800ac2e:	2b20      	cmp	r3, #32
 800ac30:	dc0f      	bgt.n	800ac52 <USBH_ParseDevDesc+0xaa>
 800ac32:	2b08      	cmp	r3, #8
 800ac34:	db0f      	blt.n	800ac56 <USBH_ParseDevDesc+0xae>
 800ac36:	3b08      	subs	r3, #8
 800ac38:	4a32      	ldr	r2, [pc, #200]	@ (800ad04 <USBH_ParseDevDesc+0x15c>)
 800ac3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	bf14      	ite	ne
 800ac46:	2301      	movne	r3, #1
 800ac48:	2300      	moveq	r3, #0
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d106      	bne.n	800ac5e <USBH_ParseDevDesc+0xb6>
 800ac50:	e001      	b.n	800ac56 <USBH_ParseDevDesc+0xae>
 800ac52:	2b40      	cmp	r3, #64	@ 0x40
 800ac54:	d003      	beq.n	800ac5e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	2208      	movs	r2, #8
 800ac5a:	71da      	strb	r2, [r3, #7]
        break;
 800ac5c:	e000      	b.n	800ac60 <USBH_ParseDevDesc+0xb8>
        break;
 800ac5e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800ac60:	e00e      	b.n	800ac80 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	d107      	bne.n	800ac7c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	79db      	ldrb	r3, [r3, #7]
 800ac70:	2b08      	cmp	r3, #8
 800ac72:	d005      	beq.n	800ac80 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2208      	movs	r2, #8
 800ac78:	71da      	strb	r2, [r3, #7]
 800ac7a:	e001      	b.n	800ac80 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800ac80:	88fb      	ldrh	r3, [r7, #6]
 800ac82:	2b08      	cmp	r3, #8
 800ac84:	d936      	bls.n	800acf4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	3308      	adds	r3, #8
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	3309      	adds	r3, #9
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	021b      	lsls	r3, r3, #8
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	b29a      	uxth	r2, r3
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	330a      	adds	r3, #10
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	461a      	mov	r2, r3
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	330b      	adds	r3, #11
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	021b      	lsls	r3, r3, #8
 800acb0:	b29b      	uxth	r3, r3
 800acb2:	4313      	orrs	r3, r2
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	330c      	adds	r3, #12
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	461a      	mov	r2, r3
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	330d      	adds	r3, #13
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	021b      	lsls	r3, r3, #8
 800acca:	b29b      	uxth	r3, r3
 800accc:	4313      	orrs	r3, r2
 800acce:	b29a      	uxth	r2, r3
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	7b9a      	ldrb	r2, [r3, #14]
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	7bda      	ldrb	r2, [r3, #15]
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	7c1a      	ldrb	r2, [r3, #16]
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	7c5a      	ldrb	r2, [r3, #17]
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800acf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	371c      	adds	r7, #28
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	01000101 	.word	0x01000101

0800ad08 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08c      	sub	sp, #48	@ 0x30
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	4613      	mov	r3, r2
 800ad14:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800ad1c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800ad36:	2302      	movs	r3, #2
 800ad38:	e0da      	b.n	800aef0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800ad3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b09      	cmp	r3, #9
 800ad44:	d002      	beq.n	800ad4c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800ad46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad48:	2209      	movs	r2, #9
 800ad4a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	781a      	ldrb	r2, [r3, #0]
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	785a      	ldrb	r2, [r3, #1]
 800ad58:	6a3b      	ldr	r3, [r7, #32]
 800ad5a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	3302      	adds	r3, #2
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	461a      	mov	r2, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	3303      	adds	r3, #3
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	021b      	lsls	r3, r3, #8
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad76:	bf28      	it	cs
 800ad78:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	6a3b      	ldr	r3, [r7, #32]
 800ad80:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	791a      	ldrb	r2, [r3, #4]
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	795a      	ldrb	r2, [r3, #5]
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	799a      	ldrb	r2, [r3, #6]
 800ad96:	6a3b      	ldr	r3, [r7, #32]
 800ad98:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	79da      	ldrb	r2, [r3, #7]
 800ad9e:	6a3b      	ldr	r3, [r7, #32]
 800ada0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	7a1a      	ldrb	r2, [r3, #8]
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800adaa:	88fb      	ldrh	r3, [r7, #6]
 800adac:	2b09      	cmp	r3, #9
 800adae:	f240 809d 	bls.w	800aeec <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800adb2:	2309      	movs	r3, #9
 800adb4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800adb6:	2300      	movs	r3, #0
 800adb8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800adba:	e081      	b.n	800aec0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800adbc:	f107 0316 	add.w	r3, r7, #22
 800adc0:	4619      	mov	r1, r3
 800adc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800adc4:	f000 f9e7 	bl	800b196 <USBH_GetNextDesc>
 800adc8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800adca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	2b04      	cmp	r3, #4
 800add0:	d176      	bne.n	800aec0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800add2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	2b09      	cmp	r3, #9
 800add8:	d002      	beq.n	800ade0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800adda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800addc:	2209      	movs	r2, #9
 800adde:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ade0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ade4:	221a      	movs	r2, #26
 800ade6:	fb02 f303 	mul.w	r3, r2, r3
 800adea:	3308      	adds	r3, #8
 800adec:	6a3a      	ldr	r2, [r7, #32]
 800adee:	4413      	add	r3, r2
 800adf0:	3302      	adds	r3, #2
 800adf2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800adf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800adf6:	69f8      	ldr	r0, [r7, #28]
 800adf8:	f000 f87e 	bl	800aef8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800adfc:	2300      	movs	r3, #0
 800adfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae06:	e043      	b.n	800ae90 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ae08:	f107 0316 	add.w	r3, r7, #22
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae10:	f000 f9c1 	bl	800b196 <USBH_GetNextDesc>
 800ae14:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ae16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae18:	785b      	ldrb	r3, [r3, #1]
 800ae1a:	2b05      	cmp	r3, #5
 800ae1c:	d138      	bne.n	800ae90 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	795b      	ldrb	r3, [r3, #5]
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d113      	bne.n	800ae4e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ae2a:	2b02      	cmp	r3, #2
 800ae2c:	d003      	beq.n	800ae36 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ae2e:	69fb      	ldr	r3, [r7, #28]
 800ae30:	799b      	ldrb	r3, [r3, #6]
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d10b      	bne.n	800ae4e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	79db      	ldrb	r3, [r3, #7]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10b      	bne.n	800ae56 <USBH_ParseCfgDesc+0x14e>
 800ae3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	2b09      	cmp	r3, #9
 800ae44:	d007      	beq.n	800ae56 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800ae46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae48:	2209      	movs	r2, #9
 800ae4a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae4c:	e003      	b.n	800ae56 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ae4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae50:	2207      	movs	r2, #7
 800ae52:	701a      	strb	r2, [r3, #0]
 800ae54:	e000      	b.n	800ae58 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ae56:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ae58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae5c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ae60:	3201      	adds	r2, #1
 800ae62:	00d2      	lsls	r2, r2, #3
 800ae64:	211a      	movs	r1, #26
 800ae66:	fb01 f303 	mul.w	r3, r1, r3
 800ae6a:	4413      	add	r3, r2
 800ae6c:	3308      	adds	r3, #8
 800ae6e:	6a3a      	ldr	r2, [r7, #32]
 800ae70:	4413      	add	r3, r2
 800ae72:	3304      	adds	r3, #4
 800ae74:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800ae76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae78:	69b9      	ldr	r1, [r7, #24]
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f000 f870 	bl	800af60 <USBH_ParseEPDesc>
 800ae80:	4603      	mov	r3, r0
 800ae82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800ae86:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	791b      	ldrb	r3, [r3, #4]
 800ae94:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d204      	bcs.n	800aea6 <USBH_ParseCfgDesc+0x19e>
 800ae9c:	6a3b      	ldr	r3, [r7, #32]
 800ae9e:	885a      	ldrh	r2, [r3, #2]
 800aea0:	8afb      	ldrh	r3, [r7, #22]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d8b0      	bhi.n	800ae08 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	791b      	ldrb	r3, [r3, #4]
 800aeaa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d201      	bcs.n	800aeb6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e01c      	b.n	800aef0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800aeb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aeba:	3301      	adds	r3, #1
 800aebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aec0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d805      	bhi.n	800aed4 <USBH_ParseCfgDesc+0x1cc>
 800aec8:	6a3b      	ldr	r3, [r7, #32]
 800aeca:	885a      	ldrh	r2, [r3, #2]
 800aecc:	8afb      	ldrh	r3, [r7, #22]
 800aece:	429a      	cmp	r2, r3
 800aed0:	f63f af74 	bhi.w	800adbc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	791b      	ldrb	r3, [r3, #4]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	bf28      	it	cs
 800aedc:	2302      	movcs	r3, #2
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800aee4:	429a      	cmp	r2, r3
 800aee6:	d201      	bcs.n	800aeec <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e001      	b.n	800aef0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800aeec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3730      	adds	r7, #48	@ 0x30
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b083      	sub	sp, #12
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	781a      	ldrb	r2, [r3, #0]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	785a      	ldrb	r2, [r3, #1]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	789a      	ldrb	r2, [r3, #2]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	78da      	ldrb	r2, [r3, #3]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	3304      	adds	r3, #4
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	bf28      	it	cs
 800af2c:	2302      	movcs	r3, #2
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	795a      	ldrb	r2, [r3, #5]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	799a      	ldrb	r2, [r3, #6]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	79da      	ldrb	r2, [r3, #7]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	7a1a      	ldrb	r2, [r3, #8]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	721a      	strb	r2, [r3, #8]
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800af60:	b480      	push	{r7}
 800af62:	b087      	sub	sp, #28
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800af6c:	2300      	movs	r3, #0
 800af6e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	781a      	ldrb	r2, [r3, #0]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	785a      	ldrb	r2, [r3, #1]
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	789a      	ldrb	r2, [r3, #2]
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	78da      	ldrb	r2, [r3, #3]
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3304      	adds	r3, #4
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	461a      	mov	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	3305      	adds	r3, #5
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	021b      	lsls	r3, r3, #8
 800afa0:	b29b      	uxth	r3, r3
 800afa2:	4313      	orrs	r3, r2
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	799a      	ldrb	r2, [r3, #6]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	889b      	ldrh	r3, [r3, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d009      	beq.n	800afce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800afbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afc2:	d804      	bhi.n	800afce <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800afc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afcc:	d901      	bls.n	800afd2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800afce:	2303      	movs	r3, #3
 800afd0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d136      	bne.n	800b04a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	78db      	ldrb	r3, [r3, #3]
 800afe0:	f003 0303 	and.w	r3, r3, #3
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d108      	bne.n	800affa <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	889b      	ldrh	r3, [r3, #4]
 800afec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aff0:	f240 8097 	bls.w	800b122 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aff4:	2303      	movs	r3, #3
 800aff6:	75fb      	strb	r3, [r7, #23]
 800aff8:	e093      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	78db      	ldrb	r3, [r3, #3]
 800affe:	f003 0303 	and.w	r3, r3, #3
 800b002:	2b00      	cmp	r3, #0
 800b004:	d107      	bne.n	800b016 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	889b      	ldrh	r3, [r3, #4]
 800b00a:	2b40      	cmp	r3, #64	@ 0x40
 800b00c:	f240 8089 	bls.w	800b122 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b010:	2303      	movs	r3, #3
 800b012:	75fb      	strb	r3, [r7, #23]
 800b014:	e085      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	78db      	ldrb	r3, [r3, #3]
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d005      	beq.n	800b02e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	78db      	ldrb	r3, [r3, #3]
 800b026:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d10a      	bne.n	800b044 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	799b      	ldrb	r3, [r3, #6]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d003      	beq.n	800b03e <USBH_ParseEPDesc+0xde>
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	799b      	ldrb	r3, [r3, #6]
 800b03a:	2b10      	cmp	r3, #16
 800b03c:	d970      	bls.n	800b120 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b03e:	2303      	movs	r3, #3
 800b040:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b042:	e06d      	b.n	800b120 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b044:	2303      	movs	r3, #3
 800b046:	75fb      	strb	r3, [r7, #23]
 800b048:	e06b      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b050:	2b01      	cmp	r3, #1
 800b052:	d13c      	bne.n	800b0ce <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	78db      	ldrb	r3, [r3, #3]
 800b058:	f003 0303 	and.w	r3, r3, #3
 800b05c:	2b02      	cmp	r3, #2
 800b05e:	d005      	beq.n	800b06c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	78db      	ldrb	r3, [r3, #3]
 800b064:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	889b      	ldrh	r3, [r3, #4]
 800b070:	2b40      	cmp	r3, #64	@ 0x40
 800b072:	d956      	bls.n	800b122 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b074:	2303      	movs	r3, #3
 800b076:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b078:	e053      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	78db      	ldrb	r3, [r3, #3]
 800b07e:	f003 0303 	and.w	r3, r3, #3
 800b082:	2b01      	cmp	r3, #1
 800b084:	d10e      	bne.n	800b0a4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	799b      	ldrb	r3, [r3, #6]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d007      	beq.n	800b09e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b092:	2b10      	cmp	r3, #16
 800b094:	d803      	bhi.n	800b09e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b09a:	2b40      	cmp	r3, #64	@ 0x40
 800b09c:	d941      	bls.n	800b122 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	75fb      	strb	r3, [r7, #23]
 800b0a2:	e03e      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	78db      	ldrb	r3, [r3, #3]
 800b0a8:	f003 0303 	and.w	r3, r3, #3
 800b0ac:	2b03      	cmp	r3, #3
 800b0ae:	d10b      	bne.n	800b0c8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	799b      	ldrb	r3, [r3, #6]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d004      	beq.n	800b0c2 <USBH_ParseEPDesc+0x162>
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	889b      	ldrh	r3, [r3, #4]
 800b0bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0c0:	d32f      	bcc.n	800b122 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b0c2:	2303      	movs	r3, #3
 800b0c4:	75fb      	strb	r3, [r7, #23]
 800b0c6:	e02c      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	75fb      	strb	r3, [r7, #23]
 800b0cc:	e029      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d120      	bne.n	800b11a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	78db      	ldrb	r3, [r3, #3]
 800b0dc:	f003 0303 	and.w	r3, r3, #3
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d106      	bne.n	800b0f2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	889b      	ldrh	r3, [r3, #4]
 800b0e8:	2b08      	cmp	r3, #8
 800b0ea:	d01a      	beq.n	800b122 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	75fb      	strb	r3, [r7, #23]
 800b0f0:	e017      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	78db      	ldrb	r3, [r3, #3]
 800b0f6:	f003 0303 	and.w	r3, r3, #3
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d10a      	bne.n	800b114 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	799b      	ldrb	r3, [r3, #6]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d003      	beq.n	800b10e <USBH_ParseEPDesc+0x1ae>
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	889b      	ldrh	r3, [r3, #4]
 800b10a:	2b08      	cmp	r3, #8
 800b10c:	d909      	bls.n	800b122 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b10e:	2303      	movs	r3, #3
 800b110:	75fb      	strb	r3, [r7, #23]
 800b112:	e006      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b114:	2303      	movs	r3, #3
 800b116:	75fb      	strb	r3, [r7, #23]
 800b118:	e003      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b11a:	2303      	movs	r3, #3
 800b11c:	75fb      	strb	r3, [r7, #23]
 800b11e:	e000      	b.n	800b122 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b120:	bf00      	nop
  }

  return status;
 800b122:	7dfb      	ldrb	r3, [r7, #23]
}
 800b124:	4618      	mov	r0, r3
 800b126:	371c      	adds	r7, #28
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr

0800b130 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b130:	b480      	push	{r7}
 800b132:	b087      	sub	sp, #28
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	4613      	mov	r3, r2
 800b13c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3301      	adds	r3, #1
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b03      	cmp	r3, #3
 800b146:	d120      	bne.n	800b18a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	1e9a      	subs	r2, r3, #2
 800b14e:	88fb      	ldrh	r3, [r7, #6]
 800b150:	4293      	cmp	r3, r2
 800b152:	bf28      	it	cs
 800b154:	4613      	movcs	r3, r2
 800b156:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	3302      	adds	r3, #2
 800b15c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b15e:	2300      	movs	r3, #0
 800b160:	82fb      	strh	r3, [r7, #22]
 800b162:	e00b      	b.n	800b17c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b164:	8afb      	ldrh	r3, [r7, #22]
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4413      	add	r3, r2
 800b16a:	781a      	ldrb	r2, [r3, #0]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	3301      	adds	r3, #1
 800b174:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b176:	8afb      	ldrh	r3, [r7, #22]
 800b178:	3302      	adds	r3, #2
 800b17a:	82fb      	strh	r3, [r7, #22]
 800b17c:	8afa      	ldrh	r2, [r7, #22]
 800b17e:	8abb      	ldrh	r3, [r7, #20]
 800b180:	429a      	cmp	r2, r3
 800b182:	d3ef      	bcc.n	800b164 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2200      	movs	r2, #0
 800b188:	701a      	strb	r2, [r3, #0]
  }
}
 800b18a:	bf00      	nop
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b196:	b480      	push	{r7}
 800b198:	b085      	sub	sp, #20
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	881b      	ldrh	r3, [r3, #0]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	7812      	ldrb	r2, [r2, #0]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	781b      	ldrb	r3, [r3, #0]
 800b1b4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3714      	adds	r7, #20
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b086      	sub	sp, #24
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	789b      	ldrb	r3, [r3, #2]
 800b1e0:	2b01      	cmp	r3, #1
 800b1e2:	d002      	beq.n	800b1ea <USBH_CtlReq+0x20>
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d00f      	beq.n	800b208 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b1e8:	e027      	b.n	800b23a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	88fa      	ldrh	r2, [r7, #6]
 800b1f4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2202      	movs	r2, #2
 800b200:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b202:	2301      	movs	r3, #1
 800b204:	75fb      	strb	r3, [r7, #23]
      break;
 800b206:	e018      	b.n	800b23a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 f81b 	bl	800b244 <USBH_HandleControl>
 800b20e:	4603      	mov	r3, r0
 800b210:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <USBH_CtlReq+0x54>
 800b218:	7dfb      	ldrb	r3, [r7, #23]
 800b21a:	2b03      	cmp	r3, #3
 800b21c:	d106      	bne.n	800b22c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2201      	movs	r2, #1
 800b222:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	761a      	strb	r2, [r3, #24]
      break;
 800b22a:	e005      	b.n	800b238 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d102      	bne.n	800b238 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2201      	movs	r2, #1
 800b236:	709a      	strb	r2, [r3, #2]
      break;
 800b238:	bf00      	nop
  }
  return status;
 800b23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b086      	sub	sp, #24
 800b248:	af02      	add	r7, sp, #8
 800b24a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b24c:	2301      	movs	r3, #1
 800b24e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b250:	2300      	movs	r3, #0
 800b252:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	7e1b      	ldrb	r3, [r3, #24]
 800b258:	3b01      	subs	r3, #1
 800b25a:	2b0a      	cmp	r3, #10
 800b25c:	f200 8156 	bhi.w	800b50c <USBH_HandleControl+0x2c8>
 800b260:	a201      	add	r2, pc, #4	@ (adr r2, 800b268 <USBH_HandleControl+0x24>)
 800b262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b266:	bf00      	nop
 800b268:	0800b295 	.word	0x0800b295
 800b26c:	0800b2af 	.word	0x0800b2af
 800b270:	0800b319 	.word	0x0800b319
 800b274:	0800b33f 	.word	0x0800b33f
 800b278:	0800b377 	.word	0x0800b377
 800b27c:	0800b3a1 	.word	0x0800b3a1
 800b280:	0800b3f3 	.word	0x0800b3f3
 800b284:	0800b415 	.word	0x0800b415
 800b288:	0800b451 	.word	0x0800b451
 800b28c:	0800b477 	.word	0x0800b477
 800b290:	0800b4b5 	.word	0x0800b4b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f103 0110 	add.w	r1, r3, #16
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	795b      	ldrb	r3, [r3, #5]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f943 	bl	800b52c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	761a      	strb	r2, [r3, #24]
      break;
 800b2ac:	e139      	b.n	800b522 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	795b      	ldrb	r3, [r3, #5]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 fcc5 	bl	800bc44 <USBH_LL_GetURBState>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d11e      	bne.n	800b302 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	7c1b      	ldrb	r3, [r3, #16]
 800b2c8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b2cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	8adb      	ldrh	r3, [r3, #22]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00a      	beq.n	800b2ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b2d6:	7b7b      	ldrb	r3, [r7, #13]
 800b2d8:	2b80      	cmp	r3, #128	@ 0x80
 800b2da:	d103      	bne.n	800b2e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2203      	movs	r2, #3
 800b2e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b2e2:	e115      	b.n	800b510 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2205      	movs	r2, #5
 800b2e8:	761a      	strb	r2, [r3, #24]
      break;
 800b2ea:	e111      	b.n	800b510 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b2ec:	7b7b      	ldrb	r3, [r7, #13]
 800b2ee:	2b80      	cmp	r3, #128	@ 0x80
 800b2f0:	d103      	bne.n	800b2fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2209      	movs	r2, #9
 800b2f6:	761a      	strb	r2, [r3, #24]
      break;
 800b2f8:	e10a      	b.n	800b510 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2207      	movs	r2, #7
 800b2fe:	761a      	strb	r2, [r3, #24]
      break;
 800b300:	e106      	b.n	800b510 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b302:	7bbb      	ldrb	r3, [r7, #14]
 800b304:	2b04      	cmp	r3, #4
 800b306:	d003      	beq.n	800b310 <USBH_HandleControl+0xcc>
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	2b02      	cmp	r3, #2
 800b30c:	f040 8100 	bne.w	800b510 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	220b      	movs	r2, #11
 800b314:	761a      	strb	r2, [r3, #24]
      break;
 800b316:	e0fb      	b.n	800b510 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6899      	ldr	r1, [r3, #8]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	899a      	ldrh	r2, [r3, #12]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	791b      	ldrb	r3, [r3, #4]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f93a 	bl	800b5aa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2204      	movs	r2, #4
 800b33a:	761a      	strb	r2, [r3, #24]
      break;
 800b33c:	e0f1      	b.n	800b522 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	791b      	ldrb	r3, [r3, #4]
 800b342:	4619      	mov	r1, r3
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 fc7d 	bl	800bc44 <USBH_LL_GetURBState>
 800b34a:	4603      	mov	r3, r0
 800b34c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d102      	bne.n	800b35a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2209      	movs	r2, #9
 800b358:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b35a:	7bbb      	ldrb	r3, [r7, #14]
 800b35c:	2b05      	cmp	r3, #5
 800b35e:	d102      	bne.n	800b366 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b360:	2303      	movs	r3, #3
 800b362:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b364:	e0d6      	b.n	800b514 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b366:	7bbb      	ldrb	r3, [r7, #14]
 800b368:	2b04      	cmp	r3, #4
 800b36a:	f040 80d3 	bne.w	800b514 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	220b      	movs	r2, #11
 800b372:	761a      	strb	r2, [r3, #24]
      break;
 800b374:	e0ce      	b.n	800b514 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	6899      	ldr	r1, [r3, #8]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	899a      	ldrh	r2, [r3, #12]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	795b      	ldrb	r3, [r3, #5]
 800b382:	2001      	movs	r0, #1
 800b384:	9000      	str	r0, [sp, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f8ea 	bl	800b560 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b392:	b29a      	uxth	r2, r3
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2206      	movs	r2, #6
 800b39c:	761a      	strb	r2, [r3, #24]
      break;
 800b39e:	e0c0      	b.n	800b522 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	795b      	ldrb	r3, [r3, #5]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f000 fc4c 	bl	800bc44 <USBH_LL_GetURBState>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b3b0:	7bbb      	ldrb	r3, [r7, #14]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d103      	bne.n	800b3be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2207      	movs	r2, #7
 800b3ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b3bc:	e0ac      	b.n	800b518 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b3be:	7bbb      	ldrb	r3, [r7, #14]
 800b3c0:	2b05      	cmp	r3, #5
 800b3c2:	d105      	bne.n	800b3d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	220c      	movs	r2, #12
 800b3c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b3ca:	2303      	movs	r3, #3
 800b3cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ce:	e0a3      	b.n	800b518 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b3d0:	7bbb      	ldrb	r3, [r7, #14]
 800b3d2:	2b02      	cmp	r3, #2
 800b3d4:	d103      	bne.n	800b3de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2205      	movs	r2, #5
 800b3da:	761a      	strb	r2, [r3, #24]
      break;
 800b3dc:	e09c      	b.n	800b518 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b3de:	7bbb      	ldrb	r3, [r7, #14]
 800b3e0:	2b04      	cmp	r3, #4
 800b3e2:	f040 8099 	bne.w	800b518 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	220b      	movs	r2, #11
 800b3ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b3f0:	e092      	b.n	800b518 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	791b      	ldrb	r3, [r3, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f8d5 	bl	800b5aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b406:	b29a      	uxth	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2208      	movs	r2, #8
 800b410:	761a      	strb	r2, [r3, #24]

      break;
 800b412:	e086      	b.n	800b522 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	791b      	ldrb	r3, [r3, #4]
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fc12 	bl	800bc44 <USBH_LL_GetURBState>
 800b420:	4603      	mov	r3, r0
 800b422:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b424:	7bbb      	ldrb	r3, [r7, #14]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d105      	bne.n	800b436 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	220d      	movs	r2, #13
 800b42e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b430:	2300      	movs	r3, #0
 800b432:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b434:	e072      	b.n	800b51c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b436:	7bbb      	ldrb	r3, [r7, #14]
 800b438:	2b04      	cmp	r3, #4
 800b43a:	d103      	bne.n	800b444 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	220b      	movs	r2, #11
 800b440:	761a      	strb	r2, [r3, #24]
      break;
 800b442:	e06b      	b.n	800b51c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b444:	7bbb      	ldrb	r3, [r7, #14]
 800b446:	2b05      	cmp	r3, #5
 800b448:	d168      	bne.n	800b51c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b44a:	2303      	movs	r3, #3
 800b44c:	73fb      	strb	r3, [r7, #15]
      break;
 800b44e:	e065      	b.n	800b51c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	795b      	ldrb	r3, [r3, #5]
 800b454:	2201      	movs	r2, #1
 800b456:	9200      	str	r2, [sp, #0]
 800b458:	2200      	movs	r2, #0
 800b45a:	2100      	movs	r1, #0
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f000 f87f 	bl	800b560 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b468:	b29a      	uxth	r2, r3
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	220a      	movs	r2, #10
 800b472:	761a      	strb	r2, [r3, #24]
      break;
 800b474:	e055      	b.n	800b522 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	795b      	ldrb	r3, [r3, #5]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fbe1 	bl	800bc44 <USBH_LL_GetURBState>
 800b482:	4603      	mov	r3, r0
 800b484:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d105      	bne.n	800b498 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b48c:	2300      	movs	r3, #0
 800b48e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	220d      	movs	r2, #13
 800b494:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b496:	e043      	b.n	800b520 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b498:	7bbb      	ldrb	r3, [r7, #14]
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d103      	bne.n	800b4a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2209      	movs	r2, #9
 800b4a2:	761a      	strb	r2, [r3, #24]
      break;
 800b4a4:	e03c      	b.n	800b520 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	2b04      	cmp	r3, #4
 800b4aa:	d139      	bne.n	800b520 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	220b      	movs	r2, #11
 800b4b0:	761a      	strb	r2, [r3, #24]
      break;
 800b4b2:	e035      	b.n	800b520 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	7e5b      	ldrb	r3, [r3, #25]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	765a      	strb	r2, [r3, #25]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	7e5b      	ldrb	r3, [r3, #25]
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d806      	bhi.n	800b4d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b4d4:	e025      	b.n	800b522 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b4dc:	2106      	movs	r1, #6
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	795b      	ldrb	r3, [r3, #5]
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f90c 	bl	800b70c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	791b      	ldrb	r3, [r3, #4]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 f906 	bl	800b70c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b506:	2302      	movs	r3, #2
 800b508:	73fb      	strb	r3, [r7, #15]
      break;
 800b50a:	e00a      	b.n	800b522 <USBH_HandleControl+0x2de>

    default:
      break;
 800b50c:	bf00      	nop
 800b50e:	e008      	b.n	800b522 <USBH_HandleControl+0x2de>
      break;
 800b510:	bf00      	nop
 800b512:	e006      	b.n	800b522 <USBH_HandleControl+0x2de>
      break;
 800b514:	bf00      	nop
 800b516:	e004      	b.n	800b522 <USBH_HandleControl+0x2de>
      break;
 800b518:	bf00      	nop
 800b51a:	e002      	b.n	800b522 <USBH_HandleControl+0x2de>
      break;
 800b51c:	bf00      	nop
 800b51e:	e000      	b.n	800b522 <USBH_HandleControl+0x2de>
      break;
 800b520:	bf00      	nop
  }

  return status;
 800b522:	7bfb      	ldrb	r3, [r7, #15]
}
 800b524:	4618      	mov	r0, r3
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}

0800b52c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b088      	sub	sp, #32
 800b530:	af04      	add	r7, sp, #16
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	4613      	mov	r3, r2
 800b538:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b53a:	79f9      	ldrb	r1, [r7, #7]
 800b53c:	2300      	movs	r3, #0
 800b53e:	9303      	str	r3, [sp, #12]
 800b540:	2308      	movs	r3, #8
 800b542:	9302      	str	r3, [sp, #8]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	2300      	movs	r3, #0
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2300      	movs	r3, #0
 800b54e:	2200      	movs	r2, #0
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f000 fb46 	bl	800bbe2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af04      	add	r7, sp, #16
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	4611      	mov	r1, r2
 800b56c:	461a      	mov	r2, r3
 800b56e:	460b      	mov	r3, r1
 800b570:	80fb      	strh	r3, [r7, #6]
 800b572:	4613      	mov	r3, r2
 800b574:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d001      	beq.n	800b584 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b584:	7979      	ldrb	r1, [r7, #5]
 800b586:	7e3b      	ldrb	r3, [r7, #24]
 800b588:	9303      	str	r3, [sp, #12]
 800b58a:	88fb      	ldrh	r3, [r7, #6]
 800b58c:	9302      	str	r3, [sp, #8]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	9301      	str	r3, [sp, #4]
 800b592:	2301      	movs	r3, #1
 800b594:	9300      	str	r3, [sp, #0]
 800b596:	2300      	movs	r3, #0
 800b598:	2200      	movs	r2, #0
 800b59a:	68f8      	ldr	r0, [r7, #12]
 800b59c:	f000 fb21 	bl	800bbe2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b088      	sub	sp, #32
 800b5ae:	af04      	add	r7, sp, #16
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	460b      	mov	r3, r1
 800b5ba:	80fb      	strh	r3, [r7, #6]
 800b5bc:	4613      	mov	r3, r2
 800b5be:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b5c0:	7979      	ldrb	r1, [r7, #5]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	9303      	str	r3, [sp, #12]
 800b5c6:	88fb      	ldrh	r3, [r7, #6]
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	9300      	str	r3, [sp, #0]
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f000 fb03 	bl	800bbe2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b5dc:	2300      	movs	r3, #0

}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b088      	sub	sp, #32
 800b5ea:	af04      	add	r7, sp, #16
 800b5ec:	60f8      	str	r0, [r7, #12]
 800b5ee:	60b9      	str	r1, [r7, #8]
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	80fb      	strh	r3, [r7, #6]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b602:	2b00      	cmp	r3, #0
 800b604:	d001      	beq.n	800b60a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b606:	2300      	movs	r3, #0
 800b608:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b60a:	7979      	ldrb	r1, [r7, #5]
 800b60c:	7e3b      	ldrb	r3, [r7, #24]
 800b60e:	9303      	str	r3, [sp, #12]
 800b610:	88fb      	ldrh	r3, [r7, #6]
 800b612:	9302      	str	r3, [sp, #8]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	9301      	str	r3, [sp, #4]
 800b618:	2301      	movs	r3, #1
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	2302      	movs	r3, #2
 800b61e:	2200      	movs	r2, #0
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	f000 fade 	bl	800bbe2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b626:	2300      	movs	r3, #0
}
 800b628:	4618      	mov	r0, r3
 800b62a:	3710      	adds	r7, #16
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b088      	sub	sp, #32
 800b634:	af04      	add	r7, sp, #16
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	4611      	mov	r1, r2
 800b63c:	461a      	mov	r2, r3
 800b63e:	460b      	mov	r3, r1
 800b640:	80fb      	strh	r3, [r7, #6]
 800b642:	4613      	mov	r3, r2
 800b644:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b646:	7979      	ldrb	r1, [r7, #5]
 800b648:	2300      	movs	r3, #0
 800b64a:	9303      	str	r3, [sp, #12]
 800b64c:	88fb      	ldrh	r3, [r7, #6]
 800b64e:	9302      	str	r3, [sp, #8]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	9301      	str	r3, [sp, #4]
 800b654:	2301      	movs	r3, #1
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	2302      	movs	r3, #2
 800b65a:	2201      	movs	r2, #1
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f000 fac0 	bl	800bbe2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b086      	sub	sp, #24
 800b670:	af04      	add	r7, sp, #16
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	4608      	mov	r0, r1
 800b676:	4611      	mov	r1, r2
 800b678:	461a      	mov	r2, r3
 800b67a:	4603      	mov	r3, r0
 800b67c:	70fb      	strb	r3, [r7, #3]
 800b67e:	460b      	mov	r3, r1
 800b680:	70bb      	strb	r3, [r7, #2]
 800b682:	4613      	mov	r3, r2
 800b684:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b686:	7878      	ldrb	r0, [r7, #1]
 800b688:	78ba      	ldrb	r2, [r7, #2]
 800b68a:	78f9      	ldrb	r1, [r7, #3]
 800b68c:	8b3b      	ldrh	r3, [r7, #24]
 800b68e:	9302      	str	r3, [sp, #8]
 800b690:	7d3b      	ldrb	r3, [r7, #20]
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	7c3b      	ldrb	r3, [r7, #16]
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	4603      	mov	r3, r0
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fa53 	bl	800bb46 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	3708      	adds	r7, #8
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}

0800b6aa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b6aa:	b580      	push	{r7, lr}
 800b6ac:	b082      	sub	sp, #8
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fa72 	bl	800bba4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f836 	bl	800b748 <USBH_GetFreePipe>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b6e0:	89fb      	ldrh	r3, [r7, #14]
 800b6e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d00a      	beq.n	800b700 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	89fb      	ldrh	r3, [r7, #14]
 800b6ee:	f003 030f 	and.w	r3, r3, #15
 800b6f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	33e0      	adds	r3, #224	@ 0xe0
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	440b      	add	r3, r1
 800b6fe:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b700:	89fb      	ldrh	r3, [r7, #14]
 800b702:	b2db      	uxtb	r3, r3
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	460b      	mov	r3, r1
 800b716:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	2b0f      	cmp	r3, #15
 800b71c:	d80d      	bhi.n	800b73a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b71e:	78fb      	ldrb	r3, [r7, #3]
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	33e0      	adds	r3, #224	@ 0xe0
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4413      	add	r3, r2
 800b728:	685a      	ldr	r2, [r3, #4]
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b730:	6879      	ldr	r1, [r7, #4]
 800b732:	33e0      	adds	r3, #224	@ 0xe0
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	440b      	add	r3, r1
 800b738:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	370c      	adds	r7, #12
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b754:	2300      	movs	r3, #0
 800b756:	73fb      	strb	r3, [r7, #15]
 800b758:	e00f      	b.n	800b77a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
 800b75c:	687a      	ldr	r2, [r7, #4]
 800b75e:	33e0      	adds	r3, #224	@ 0xe0
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d102      	bne.n	800b774 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
 800b770:	b29b      	uxth	r3, r3
 800b772:	e007      	b.n	800b784 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	3301      	adds	r3, #1
 800b778:	73fb      	strb	r3, [r7, #15]
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
 800b77c:	2b0f      	cmp	r3, #15
 800b77e:	d9ec      	bls.n	800b75a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b780:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b784:	4618      	mov	r0, r3
 800b786:	3714      	adds	r7, #20
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b794:	2201      	movs	r2, #1
 800b796:	490e      	ldr	r1, [pc, #56]	@ (800b7d0 <MX_USB_HOST_Init+0x40>)
 800b798:	480e      	ldr	r0, [pc, #56]	@ (800b7d4 <MX_USB_HOST_Init+0x44>)
 800b79a:	f7fe fb15 	bl	8009dc8 <USBH_Init>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b7a4:	f7f6 fc7e 	bl	80020a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b7a8:	490b      	ldr	r1, [pc, #44]	@ (800b7d8 <MX_USB_HOST_Init+0x48>)
 800b7aa:	480a      	ldr	r0, [pc, #40]	@ (800b7d4 <MX_USB_HOST_Init+0x44>)
 800b7ac:	f7fe fbb9 	bl	8009f22 <USBH_RegisterClass>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d001      	beq.n	800b7ba <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b7b6:	f7f6 fc75 	bl	80020a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b7ba:	4806      	ldr	r0, [pc, #24]	@ (800b7d4 <MX_USB_HOST_Init+0x44>)
 800b7bc:	f7fe fc3d 	bl	800a03a <USBH_Start>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d001      	beq.n	800b7ca <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b7c6:	f7f6 fc6d 	bl	80020a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b7ca:	bf00      	nop
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	0800b7f1 	.word	0x0800b7f1
 800b7d4:	20000268 	.word	0x20000268
 800b7d8:	2000007c 	.word	0x2000007c

0800b7dc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b7e0:	4802      	ldr	r0, [pc, #8]	@ (800b7ec <MX_USB_HOST_Process+0x10>)
 800b7e2:	f7fe fc3b 	bl	800a05c <USBH_Process>
}
 800b7e6:	bf00      	nop
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20000268 	.word	0x20000268

0800b7f0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b7fc:	78fb      	ldrb	r3, [r7, #3]
 800b7fe:	3b01      	subs	r3, #1
 800b800:	2b04      	cmp	r3, #4
 800b802:	d819      	bhi.n	800b838 <USBH_UserProcess+0x48>
 800b804:	a201      	add	r2, pc, #4	@ (adr r2, 800b80c <USBH_UserProcess+0x1c>)
 800b806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b80a:	bf00      	nop
 800b80c:	0800b839 	.word	0x0800b839
 800b810:	0800b829 	.word	0x0800b829
 800b814:	0800b839 	.word	0x0800b839
 800b818:	0800b831 	.word	0x0800b831
 800b81c:	0800b821 	.word	0x0800b821
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b820:	4b09      	ldr	r3, [pc, #36]	@ (800b848 <USBH_UserProcess+0x58>)
 800b822:	2203      	movs	r2, #3
 800b824:	701a      	strb	r2, [r3, #0]
  break;
 800b826:	e008      	b.n	800b83a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b828:	4b07      	ldr	r3, [pc, #28]	@ (800b848 <USBH_UserProcess+0x58>)
 800b82a:	2202      	movs	r2, #2
 800b82c:	701a      	strb	r2, [r3, #0]
  break;
 800b82e:	e004      	b.n	800b83a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b830:	4b05      	ldr	r3, [pc, #20]	@ (800b848 <USBH_UserProcess+0x58>)
 800b832:	2201      	movs	r2, #1
 800b834:	701a      	strb	r2, [r3, #0]
  break;
 800b836:	e000      	b.n	800b83a <USBH_UserProcess+0x4a>

  default:
  break;
 800b838:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b83a:	bf00      	nop
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	20000640 	.word	0x20000640

0800b84c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08a      	sub	sp, #40	@ 0x28
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b854:	f107 0314 	add.w	r3, r7, #20
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]
 800b85c:	605a      	str	r2, [r3, #4]
 800b85e:	609a      	str	r2, [r3, #8]
 800b860:	60da      	str	r2, [r3, #12]
 800b862:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b86c:	d147      	bne.n	800b8fe <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b86e:	2300      	movs	r3, #0
 800b870:	613b      	str	r3, [r7, #16]
 800b872:	4b25      	ldr	r3, [pc, #148]	@ (800b908 <HAL_HCD_MspInit+0xbc>)
 800b874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b876:	4a24      	ldr	r2, [pc, #144]	@ (800b908 <HAL_HCD_MspInit+0xbc>)
 800b878:	f043 0301 	orr.w	r3, r3, #1
 800b87c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b87e:	4b22      	ldr	r3, [pc, #136]	@ (800b908 <HAL_HCD_MspInit+0xbc>)
 800b880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	613b      	str	r3, [r7, #16]
 800b888:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b88a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b88e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b890:	2300      	movs	r3, #0
 800b892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b894:	2300      	movs	r3, #0
 800b896:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b898:	f107 0314 	add.w	r3, r7, #20
 800b89c:	4619      	mov	r1, r3
 800b89e:	481b      	ldr	r0, [pc, #108]	@ (800b90c <HAL_HCD_MspInit+0xc0>)
 800b8a0:	f7f8 f9cc 	bl	8003c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b8a4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b8a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8b6:	230a      	movs	r3, #10
 800b8b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ba:	f107 0314 	add.w	r3, r7, #20
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4812      	ldr	r0, [pc, #72]	@ (800b90c <HAL_HCD_MspInit+0xc0>)
 800b8c2:	f7f8 f9bb 	bl	8003c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8c6:	4b10      	ldr	r3, [pc, #64]	@ (800b908 <HAL_HCD_MspInit+0xbc>)
 800b8c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8ca:	4a0f      	ldr	r2, [pc, #60]	@ (800b908 <HAL_HCD_MspInit+0xbc>)
 800b8cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8d0:	6353      	str	r3, [r2, #52]	@ 0x34
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	60fb      	str	r3, [r7, #12]
 800b8d6:	4b0c      	ldr	r3, [pc, #48]	@ (800b908 <HAL_HCD_MspInit+0xbc>)
 800b8d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8da:	4a0b      	ldr	r2, [pc, #44]	@ (800b908 <HAL_HCD_MspInit+0xbc>)
 800b8dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b8e0:	6453      	str	r3, [r2, #68]	@ 0x44
 800b8e2:	4b09      	ldr	r3, [pc, #36]	@ (800b908 <HAL_HCD_MspInit+0xbc>)
 800b8e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	2043      	movs	r0, #67	@ 0x43
 800b8f4:	f7f8 f96b 	bl	8003bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b8f8:	2043      	movs	r0, #67	@ 0x43
 800b8fa:	f7f8 f984 	bl	8003c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b8fe:	bf00      	nop
 800b900:	3728      	adds	r7, #40	@ 0x28
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	40023800 	.word	0x40023800
 800b90c:	40020000 	.word	0x40020000

0800b910 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe ff73 	bl	800a80a <USBH_LL_IncTimer>
}
 800b924:	bf00      	nop
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b082      	sub	sp, #8
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fe ffab 	bl	800a896 <USBH_LL_Connect>
}
 800b940:	bf00      	nop
 800b942:	3708      	adds	r7, #8
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b082      	sub	sp, #8
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe ffb4 	bl	800a8c4 <USBH_LL_Disconnect>
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	460b      	mov	r3, r1
 800b96e:	70fb      	strb	r3, [r7, #3]
 800b970:	4613      	mov	r3, r2
 800b972:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fe ff65 	bl	800a85e <USBH_LL_PortEnabled>
}
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fe ff65 	bl	800a87a <USBH_LL_PortDisabled>
}
 800b9b0:	bf00      	nop
 800b9b2:	3708      	adds	r7, #8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d12a      	bne.n	800ba20 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b9ca:	4a18      	ldr	r2, [pc, #96]	@ (800ba2c <USBH_LL_Init+0x74>)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4a15      	ldr	r2, [pc, #84]	@ (800ba2c <USBH_LL_Init+0x74>)
 800b9d6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b9da:	4b14      	ldr	r3, [pc, #80]	@ (800ba2c <USBH_LL_Init+0x74>)
 800b9dc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b9e0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b9e2:	4b12      	ldr	r3, [pc, #72]	@ (800ba2c <USBH_LL_Init+0x74>)
 800b9e4:	2208      	movs	r2, #8
 800b9e6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b9e8:	4b10      	ldr	r3, [pc, #64]	@ (800ba2c <USBH_LL_Init+0x74>)
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b9ee:	4b0f      	ldr	r3, [pc, #60]	@ (800ba2c <USBH_LL_Init+0x74>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b9f4:	4b0d      	ldr	r3, [pc, #52]	@ (800ba2c <USBH_LL_Init+0x74>)
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b9fa:	4b0c      	ldr	r3, [pc, #48]	@ (800ba2c <USBH_LL_Init+0x74>)
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ba00:	480a      	ldr	r0, [pc, #40]	@ (800ba2c <USBH_LL_Init+0x74>)
 800ba02:	f7f8 fad0 	bl	8003fa6 <HAL_HCD_Init>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ba0c:	f7f6 fb4a 	bl	80020a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ba10:	4806      	ldr	r0, [pc, #24]	@ (800ba2c <USBH_LL_Init+0x74>)
 800ba12:	f7f8 ff31 	bl	8004878 <HAL_HCD_GetCurrentFrame>
 800ba16:	4603      	mov	r3, r0
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7fe fee6 	bl	800a7ec <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ba20:	2300      	movs	r3, #0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	20000644 	.word	0x20000644

0800ba30 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f8 fe9e 	bl	8004788 <HAL_HCD_Start>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba50:	7bfb      	ldrb	r3, [r7, #15]
 800ba52:	4618      	mov	r0, r3
 800ba54:	f000 f95e 	bl	800bd14 <USBH_Get_USB_Status>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b084      	sub	sp, #16
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba72:	2300      	movs	r3, #0
 800ba74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f8 fea6 	bl	80047ce <HAL_HCD_Stop>
 800ba82:	4603      	mov	r3, r0
 800ba84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f000 f943 	bl	800bd14 <USBH_Get_USB_Status>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800baa4:	2301      	movs	r3, #1
 800baa6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800baae:	4618      	mov	r0, r3
 800bab0:	f7f8 fef0 	bl	8004894 <HAL_HCD_GetCurrentSpeed>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d00c      	beq.n	800bad4 <USBH_LL_GetSpeed+0x38>
 800baba:	2b02      	cmp	r3, #2
 800babc:	d80d      	bhi.n	800bada <USBH_LL_GetSpeed+0x3e>
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d002      	beq.n	800bac8 <USBH_LL_GetSpeed+0x2c>
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d003      	beq.n	800bace <USBH_LL_GetSpeed+0x32>
 800bac6:	e008      	b.n	800bada <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800bac8:	2300      	movs	r3, #0
 800baca:	73fb      	strb	r3, [r7, #15]
    break;
 800bacc:	e008      	b.n	800bae0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800bace:	2301      	movs	r3, #1
 800bad0:	73fb      	strb	r3, [r7, #15]
    break;
 800bad2:	e005      	b.n	800bae0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800bad4:	2302      	movs	r3, #2
 800bad6:	73fb      	strb	r3, [r7, #15]
    break;
 800bad8:	e002      	b.n	800bae0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800bada:	2301      	movs	r3, #1
 800badc:	73fb      	strb	r3, [r7, #15]
    break;
 800bade:	bf00      	nop
  }
  return  speed;
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3710      	adds	r7, #16
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b084      	sub	sp, #16
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800baf6:	2300      	movs	r3, #0
 800baf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7f8 fe81 	bl	8004808 <HAL_HCD_ResetPort>
 800bb06:	4603      	mov	r3, r0
 800bb08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb0a:	7bfb      	ldrb	r3, [r7, #15]
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f000 f901 	bl	800bd14 <USBH_Get_USB_Status>
 800bb12:	4603      	mov	r3, r0
 800bb14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb16:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bb32:	78fa      	ldrb	r2, [r7, #3]
 800bb34:	4611      	mov	r1, r2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7f8 fe89 	bl	800484e <HAL_HCD_HC_GetXferCount>
 800bb3c:	4603      	mov	r3, r0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bb46:	b590      	push	{r4, r7, lr}
 800bb48:	b089      	sub	sp, #36	@ 0x24
 800bb4a:	af04      	add	r7, sp, #16
 800bb4c:	6078      	str	r0, [r7, #4]
 800bb4e:	4608      	mov	r0, r1
 800bb50:	4611      	mov	r1, r2
 800bb52:	461a      	mov	r2, r3
 800bb54:	4603      	mov	r3, r0
 800bb56:	70fb      	strb	r3, [r7, #3]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	70bb      	strb	r3, [r7, #2]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bb6e:	787c      	ldrb	r4, [r7, #1]
 800bb70:	78ba      	ldrb	r2, [r7, #2]
 800bb72:	78f9      	ldrb	r1, [r7, #3]
 800bb74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bb76:	9302      	str	r3, [sp, #8]
 800bb78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800bb7c:	9301      	str	r3, [sp, #4]
 800bb7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	4623      	mov	r3, r4
 800bb86:	f7f8 fa75 	bl	8004074 <HAL_HCD_HC_Init>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
 800bb90:	4618      	mov	r0, r3
 800bb92:	f000 f8bf 	bl	800bd14 <USBH_Get_USB_Status>
 800bb96:	4603      	mov	r3, r0
 800bb98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3714      	adds	r7, #20
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd90      	pop	{r4, r7, pc}

0800bba4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bbbe:	78fa      	ldrb	r2, [r7, #3]
 800bbc0:	4611      	mov	r1, r2
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7f8 fb0e 	bl	80041e4 <HAL_HCD_HC_Halt>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bbcc:	7bfb      	ldrb	r3, [r7, #15]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f8a0 	bl	800bd14 <USBH_Get_USB_Status>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3710      	adds	r7, #16
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bbe2:	b590      	push	{r4, r7, lr}
 800bbe4:	b089      	sub	sp, #36	@ 0x24
 800bbe6:	af04      	add	r7, sp, #16
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	4608      	mov	r0, r1
 800bbec:	4611      	mov	r1, r2
 800bbee:	461a      	mov	r2, r3
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	70fb      	strb	r3, [r7, #3]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70bb      	strb	r3, [r7, #2]
 800bbf8:	4613      	mov	r3, r2
 800bbfa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bc0a:	787c      	ldrb	r4, [r7, #1]
 800bc0c:	78ba      	ldrb	r2, [r7, #2]
 800bc0e:	78f9      	ldrb	r1, [r7, #3]
 800bc10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bc14:	9303      	str	r3, [sp, #12]
 800bc16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bc18:	9302      	str	r3, [sp, #8]
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1c:	9301      	str	r3, [sp, #4]
 800bc1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bc22:	9300      	str	r3, [sp, #0]
 800bc24:	4623      	mov	r3, r4
 800bc26:	f7f8 fb01 	bl	800422c <HAL_HCD_HC_SubmitRequest>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bc2e:	7bfb      	ldrb	r3, [r7, #15]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f000 f86f 	bl	800bd14 <USBH_Get_USB_Status>
 800bc36:	4603      	mov	r3, r0
 800bc38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd90      	pop	{r4, r7, pc}

0800bc44 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bc56:	78fa      	ldrb	r2, [r7, #3]
 800bc58:	4611      	mov	r1, r2
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7f8 fde2 	bl	8004824 <HAL_HCD_HC_GetURBState>
 800bc60:	4603      	mov	r3, r0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}

0800bc6a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bc6a:	b580      	push	{r7, lr}
 800bc6c:	b082      	sub	sp, #8
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	460b      	mov	r3, r1
 800bc74:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d103      	bne.n	800bc88 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bc80:	78fb      	ldrb	r3, [r7, #3]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f000 f872 	bl	800bd6c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bc88:	20c8      	movs	r0, #200	@ 0xc8
 800bc8a:	f7f7 fea1 	bl	80039d0 <HAL_Delay>
  return USBH_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	460b      	mov	r3, r1
 800bca2:	70fb      	strb	r3, [r7, #3]
 800bca4:	4613      	mov	r3, r2
 800bca6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bcae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800bcb0:	78fa      	ldrb	r2, [r7, #3]
 800bcb2:	68f9      	ldr	r1, [r7, #12]
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	011b      	lsls	r3, r3, #4
 800bcb8:	1a9b      	subs	r3, r3, r2
 800bcba:	009b      	lsls	r3, r3, #2
 800bcbc:	440b      	add	r3, r1
 800bcbe:	3317      	adds	r3, #23
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00a      	beq.n	800bcdc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800bcc6:	78fa      	ldrb	r2, [r7, #3]
 800bcc8:	68f9      	ldr	r1, [r7, #12]
 800bcca:	4613      	mov	r3, r2
 800bccc:	011b      	lsls	r3, r3, #4
 800bcce:	1a9b      	subs	r3, r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	440b      	add	r3, r1
 800bcd4:	333c      	adds	r3, #60	@ 0x3c
 800bcd6:	78ba      	ldrb	r2, [r7, #2]
 800bcd8:	701a      	strb	r2, [r3, #0]
 800bcda:	e009      	b.n	800bcf0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800bcdc:	78fa      	ldrb	r2, [r7, #3]
 800bcde:	68f9      	ldr	r1, [r7, #12]
 800bce0:	4613      	mov	r3, r2
 800bce2:	011b      	lsls	r3, r3, #4
 800bce4:	1a9b      	subs	r3, r3, r2
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	440b      	add	r3, r1
 800bcea:	333d      	adds	r3, #61	@ 0x3d
 800bcec:	78ba      	ldrb	r2, [r7, #2]
 800bcee:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr

0800bcfe <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800bcfe:	b580      	push	{r7, lr}
 800bd00:	b082      	sub	sp, #8
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f7f7 fe62 	bl	80039d0 <HAL_Delay>
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b085      	sub	sp, #20
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	2b03      	cmp	r3, #3
 800bd26:	d817      	bhi.n	800bd58 <USBH_Get_USB_Status+0x44>
 800bd28:	a201      	add	r2, pc, #4	@ (adr r2, 800bd30 <USBH_Get_USB_Status+0x1c>)
 800bd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2e:	bf00      	nop
 800bd30:	0800bd41 	.word	0x0800bd41
 800bd34:	0800bd47 	.word	0x0800bd47
 800bd38:	0800bd4d 	.word	0x0800bd4d
 800bd3c:	0800bd53 	.word	0x0800bd53
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bd40:	2300      	movs	r3, #0
 800bd42:	73fb      	strb	r3, [r7, #15]
    break;
 800bd44:	e00b      	b.n	800bd5e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bd46:	2302      	movs	r3, #2
 800bd48:	73fb      	strb	r3, [r7, #15]
    break;
 800bd4a:	e008      	b.n	800bd5e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	73fb      	strb	r3, [r7, #15]
    break;
 800bd50:	e005      	b.n	800bd5e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bd52:	2302      	movs	r3, #2
 800bd54:	73fb      	strb	r3, [r7, #15]
    break;
 800bd56:	e002      	b.n	800bd5e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800bd58:	2302      	movs	r3, #2
 800bd5a:	73fb      	strb	r3, [r7, #15]
    break;
 800bd5c:	bf00      	nop
  }
  return usb_status;
 800bd5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800bd76:	79fb      	ldrb	r3, [r7, #7]
 800bd78:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800bd7a:	79fb      	ldrb	r3, [r7, #7]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d102      	bne.n	800bd86 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
 800bd84:	e001      	b.n	800bd8a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800bd86:	2301      	movs	r3, #1
 800bd88:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	2101      	movs	r1, #1
 800bd90:	4803      	ldr	r0, [pc, #12]	@ (800bda0 <MX_DriverVbusFS+0x34>)
 800bd92:	f7f8 f8ef 	bl	8003f74 <HAL_GPIO_WritePin>
}
 800bd96:	bf00      	nop
 800bd98:	3710      	adds	r7, #16
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	40020800 	.word	0x40020800

0800bda4 <__assert_func>:
 800bda4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bda6:	4614      	mov	r4, r2
 800bda8:	461a      	mov	r2, r3
 800bdaa:	4b09      	ldr	r3, [pc, #36]	@ (800bdd0 <__assert_func+0x2c>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4605      	mov	r5, r0
 800bdb0:	68d8      	ldr	r0, [r3, #12]
 800bdb2:	b14c      	cbz	r4, 800bdc8 <__assert_func+0x24>
 800bdb4:	4b07      	ldr	r3, [pc, #28]	@ (800bdd4 <__assert_func+0x30>)
 800bdb6:	9100      	str	r1, [sp, #0]
 800bdb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bdbc:	4906      	ldr	r1, [pc, #24]	@ (800bdd8 <__assert_func+0x34>)
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	f000 f970 	bl	800c0a4 <fiprintf>
 800bdc4:	f000 fc33 	bl	800c62e <abort>
 800bdc8:	4b04      	ldr	r3, [pc, #16]	@ (800bddc <__assert_func+0x38>)
 800bdca:	461c      	mov	r4, r3
 800bdcc:	e7f3      	b.n	800bdb6 <__assert_func+0x12>
 800bdce:	bf00      	nop
 800bdd0:	200000a8 	.word	0x200000a8
 800bdd4:	0800d36c 	.word	0x0800d36c
 800bdd8:	0800d379 	.word	0x0800d379
 800bddc:	0800d3a7 	.word	0x0800d3a7

0800bde0 <malloc>:
 800bde0:	4b02      	ldr	r3, [pc, #8]	@ (800bdec <malloc+0xc>)
 800bde2:	4601      	mov	r1, r0
 800bde4:	6818      	ldr	r0, [r3, #0]
 800bde6:	f000 b82d 	b.w	800be44 <_malloc_r>
 800bdea:	bf00      	nop
 800bdec:	200000a8 	.word	0x200000a8

0800bdf0 <free>:
 800bdf0:	4b02      	ldr	r3, [pc, #8]	@ (800bdfc <free+0xc>)
 800bdf2:	4601      	mov	r1, r0
 800bdf4:	6818      	ldr	r0, [r3, #0]
 800bdf6:	f000 bc21 	b.w	800c63c <_free_r>
 800bdfa:	bf00      	nop
 800bdfc:	200000a8 	.word	0x200000a8

0800be00 <sbrk_aligned>:
 800be00:	b570      	push	{r4, r5, r6, lr}
 800be02:	4e0f      	ldr	r6, [pc, #60]	@ (800be40 <sbrk_aligned+0x40>)
 800be04:	460c      	mov	r4, r1
 800be06:	6831      	ldr	r1, [r6, #0]
 800be08:	4605      	mov	r5, r0
 800be0a:	b911      	cbnz	r1, 800be12 <sbrk_aligned+0x12>
 800be0c:	f000 fbb2 	bl	800c574 <_sbrk_r>
 800be10:	6030      	str	r0, [r6, #0]
 800be12:	4621      	mov	r1, r4
 800be14:	4628      	mov	r0, r5
 800be16:	f000 fbad 	bl	800c574 <_sbrk_r>
 800be1a:	1c43      	adds	r3, r0, #1
 800be1c:	d103      	bne.n	800be26 <sbrk_aligned+0x26>
 800be1e:	f04f 34ff 	mov.w	r4, #4294967295
 800be22:	4620      	mov	r0, r4
 800be24:	bd70      	pop	{r4, r5, r6, pc}
 800be26:	1cc4      	adds	r4, r0, #3
 800be28:	f024 0403 	bic.w	r4, r4, #3
 800be2c:	42a0      	cmp	r0, r4
 800be2e:	d0f8      	beq.n	800be22 <sbrk_aligned+0x22>
 800be30:	1a21      	subs	r1, r4, r0
 800be32:	4628      	mov	r0, r5
 800be34:	f000 fb9e 	bl	800c574 <_sbrk_r>
 800be38:	3001      	adds	r0, #1
 800be3a:	d1f2      	bne.n	800be22 <sbrk_aligned+0x22>
 800be3c:	e7ef      	b.n	800be1e <sbrk_aligned+0x1e>
 800be3e:	bf00      	nop
 800be40:	20000a24 	.word	0x20000a24

0800be44 <_malloc_r>:
 800be44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be48:	1ccd      	adds	r5, r1, #3
 800be4a:	f025 0503 	bic.w	r5, r5, #3
 800be4e:	3508      	adds	r5, #8
 800be50:	2d0c      	cmp	r5, #12
 800be52:	bf38      	it	cc
 800be54:	250c      	movcc	r5, #12
 800be56:	2d00      	cmp	r5, #0
 800be58:	4606      	mov	r6, r0
 800be5a:	db01      	blt.n	800be60 <_malloc_r+0x1c>
 800be5c:	42a9      	cmp	r1, r5
 800be5e:	d904      	bls.n	800be6a <_malloc_r+0x26>
 800be60:	230c      	movs	r3, #12
 800be62:	6033      	str	r3, [r6, #0]
 800be64:	2000      	movs	r0, #0
 800be66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bf40 <_malloc_r+0xfc>
 800be6e:	f000 f869 	bl	800bf44 <__malloc_lock>
 800be72:	f8d8 3000 	ldr.w	r3, [r8]
 800be76:	461c      	mov	r4, r3
 800be78:	bb44      	cbnz	r4, 800becc <_malloc_r+0x88>
 800be7a:	4629      	mov	r1, r5
 800be7c:	4630      	mov	r0, r6
 800be7e:	f7ff ffbf 	bl	800be00 <sbrk_aligned>
 800be82:	1c43      	adds	r3, r0, #1
 800be84:	4604      	mov	r4, r0
 800be86:	d158      	bne.n	800bf3a <_malloc_r+0xf6>
 800be88:	f8d8 4000 	ldr.w	r4, [r8]
 800be8c:	4627      	mov	r7, r4
 800be8e:	2f00      	cmp	r7, #0
 800be90:	d143      	bne.n	800bf1a <_malloc_r+0xd6>
 800be92:	2c00      	cmp	r4, #0
 800be94:	d04b      	beq.n	800bf2e <_malloc_r+0xea>
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	4639      	mov	r1, r7
 800be9a:	4630      	mov	r0, r6
 800be9c:	eb04 0903 	add.w	r9, r4, r3
 800bea0:	f000 fb68 	bl	800c574 <_sbrk_r>
 800bea4:	4581      	cmp	r9, r0
 800bea6:	d142      	bne.n	800bf2e <_malloc_r+0xea>
 800bea8:	6821      	ldr	r1, [r4, #0]
 800beaa:	1a6d      	subs	r5, r5, r1
 800beac:	4629      	mov	r1, r5
 800beae:	4630      	mov	r0, r6
 800beb0:	f7ff ffa6 	bl	800be00 <sbrk_aligned>
 800beb4:	3001      	adds	r0, #1
 800beb6:	d03a      	beq.n	800bf2e <_malloc_r+0xea>
 800beb8:	6823      	ldr	r3, [r4, #0]
 800beba:	442b      	add	r3, r5
 800bebc:	6023      	str	r3, [r4, #0]
 800bebe:	f8d8 3000 	ldr.w	r3, [r8]
 800bec2:	685a      	ldr	r2, [r3, #4]
 800bec4:	bb62      	cbnz	r2, 800bf20 <_malloc_r+0xdc>
 800bec6:	f8c8 7000 	str.w	r7, [r8]
 800beca:	e00f      	b.n	800beec <_malloc_r+0xa8>
 800becc:	6822      	ldr	r2, [r4, #0]
 800bece:	1b52      	subs	r2, r2, r5
 800bed0:	d420      	bmi.n	800bf14 <_malloc_r+0xd0>
 800bed2:	2a0b      	cmp	r2, #11
 800bed4:	d917      	bls.n	800bf06 <_malloc_r+0xc2>
 800bed6:	1961      	adds	r1, r4, r5
 800bed8:	42a3      	cmp	r3, r4
 800beda:	6025      	str	r5, [r4, #0]
 800bedc:	bf18      	it	ne
 800bede:	6059      	strne	r1, [r3, #4]
 800bee0:	6863      	ldr	r3, [r4, #4]
 800bee2:	bf08      	it	eq
 800bee4:	f8c8 1000 	streq.w	r1, [r8]
 800bee8:	5162      	str	r2, [r4, r5]
 800beea:	604b      	str	r3, [r1, #4]
 800beec:	4630      	mov	r0, r6
 800beee:	f000 f82f 	bl	800bf50 <__malloc_unlock>
 800bef2:	f104 000b 	add.w	r0, r4, #11
 800bef6:	1d23      	adds	r3, r4, #4
 800bef8:	f020 0007 	bic.w	r0, r0, #7
 800befc:	1ac2      	subs	r2, r0, r3
 800befe:	bf1c      	itt	ne
 800bf00:	1a1b      	subne	r3, r3, r0
 800bf02:	50a3      	strne	r3, [r4, r2]
 800bf04:	e7af      	b.n	800be66 <_malloc_r+0x22>
 800bf06:	6862      	ldr	r2, [r4, #4]
 800bf08:	42a3      	cmp	r3, r4
 800bf0a:	bf0c      	ite	eq
 800bf0c:	f8c8 2000 	streq.w	r2, [r8]
 800bf10:	605a      	strne	r2, [r3, #4]
 800bf12:	e7eb      	b.n	800beec <_malloc_r+0xa8>
 800bf14:	4623      	mov	r3, r4
 800bf16:	6864      	ldr	r4, [r4, #4]
 800bf18:	e7ae      	b.n	800be78 <_malloc_r+0x34>
 800bf1a:	463c      	mov	r4, r7
 800bf1c:	687f      	ldr	r7, [r7, #4]
 800bf1e:	e7b6      	b.n	800be8e <_malloc_r+0x4a>
 800bf20:	461a      	mov	r2, r3
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	d1fb      	bne.n	800bf20 <_malloc_r+0xdc>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	6053      	str	r3, [r2, #4]
 800bf2c:	e7de      	b.n	800beec <_malloc_r+0xa8>
 800bf2e:	230c      	movs	r3, #12
 800bf30:	6033      	str	r3, [r6, #0]
 800bf32:	4630      	mov	r0, r6
 800bf34:	f000 f80c 	bl	800bf50 <__malloc_unlock>
 800bf38:	e794      	b.n	800be64 <_malloc_r+0x20>
 800bf3a:	6005      	str	r5, [r0, #0]
 800bf3c:	e7d6      	b.n	800beec <_malloc_r+0xa8>
 800bf3e:	bf00      	nop
 800bf40:	20000a28 	.word	0x20000a28

0800bf44 <__malloc_lock>:
 800bf44:	4801      	ldr	r0, [pc, #4]	@ (800bf4c <__malloc_lock+0x8>)
 800bf46:	f000 bb62 	b.w	800c60e <__retarget_lock_acquire_recursive>
 800bf4a:	bf00      	nop
 800bf4c:	20000b6c 	.word	0x20000b6c

0800bf50 <__malloc_unlock>:
 800bf50:	4801      	ldr	r0, [pc, #4]	@ (800bf58 <__malloc_unlock+0x8>)
 800bf52:	f000 bb5d 	b.w	800c610 <__retarget_lock_release_recursive>
 800bf56:	bf00      	nop
 800bf58:	20000b6c 	.word	0x20000b6c

0800bf5c <std>:
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	b510      	push	{r4, lr}
 800bf60:	4604      	mov	r4, r0
 800bf62:	e9c0 3300 	strd	r3, r3, [r0]
 800bf66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf6a:	6083      	str	r3, [r0, #8]
 800bf6c:	8181      	strh	r1, [r0, #12]
 800bf6e:	6643      	str	r3, [r0, #100]	@ 0x64
 800bf70:	81c2      	strh	r2, [r0, #14]
 800bf72:	6183      	str	r3, [r0, #24]
 800bf74:	4619      	mov	r1, r3
 800bf76:	2208      	movs	r2, #8
 800bf78:	305c      	adds	r0, #92	@ 0x5c
 800bf7a:	f000 fabf 	bl	800c4fc <memset>
 800bf7e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb4 <std+0x58>)
 800bf80:	6263      	str	r3, [r4, #36]	@ 0x24
 800bf82:	4b0d      	ldr	r3, [pc, #52]	@ (800bfb8 <std+0x5c>)
 800bf84:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bf86:	4b0d      	ldr	r3, [pc, #52]	@ (800bfbc <std+0x60>)
 800bf88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc0 <std+0x64>)
 800bf8c:	6323      	str	r3, [r4, #48]	@ 0x30
 800bf8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc4 <std+0x68>)
 800bf90:	6224      	str	r4, [r4, #32]
 800bf92:	429c      	cmp	r4, r3
 800bf94:	d006      	beq.n	800bfa4 <std+0x48>
 800bf96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bf9a:	4294      	cmp	r4, r2
 800bf9c:	d002      	beq.n	800bfa4 <std+0x48>
 800bf9e:	33d0      	adds	r3, #208	@ 0xd0
 800bfa0:	429c      	cmp	r4, r3
 800bfa2:	d105      	bne.n	800bfb0 <std+0x54>
 800bfa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfac:	f000 bb2e 	b.w	800c60c <__retarget_lock_init_recursive>
 800bfb0:	bd10      	pop	{r4, pc}
 800bfb2:	bf00      	nop
 800bfb4:	0800c34d 	.word	0x0800c34d
 800bfb8:	0800c36f 	.word	0x0800c36f
 800bfbc:	0800c3a7 	.word	0x0800c3a7
 800bfc0:	0800c3cb 	.word	0x0800c3cb
 800bfc4:	20000a2c 	.word	0x20000a2c

0800bfc8 <stdio_exit_handler>:
 800bfc8:	4a02      	ldr	r2, [pc, #8]	@ (800bfd4 <stdio_exit_handler+0xc>)
 800bfca:	4903      	ldr	r1, [pc, #12]	@ (800bfd8 <stdio_exit_handler+0x10>)
 800bfcc:	4803      	ldr	r0, [pc, #12]	@ (800bfdc <stdio_exit_handler+0x14>)
 800bfce:	f000 b87b 	b.w	800c0c8 <_fwalk_sglue>
 800bfd2:	bf00      	nop
 800bfd4:	2000009c 	.word	0x2000009c
 800bfd8:	0800cd75 	.word	0x0800cd75
 800bfdc:	200000ac 	.word	0x200000ac

0800bfe0 <cleanup_stdio>:
 800bfe0:	6841      	ldr	r1, [r0, #4]
 800bfe2:	4b0c      	ldr	r3, [pc, #48]	@ (800c014 <cleanup_stdio+0x34>)
 800bfe4:	4299      	cmp	r1, r3
 800bfe6:	b510      	push	{r4, lr}
 800bfe8:	4604      	mov	r4, r0
 800bfea:	d001      	beq.n	800bff0 <cleanup_stdio+0x10>
 800bfec:	f000 fec2 	bl	800cd74 <_fflush_r>
 800bff0:	68a1      	ldr	r1, [r4, #8]
 800bff2:	4b09      	ldr	r3, [pc, #36]	@ (800c018 <cleanup_stdio+0x38>)
 800bff4:	4299      	cmp	r1, r3
 800bff6:	d002      	beq.n	800bffe <cleanup_stdio+0x1e>
 800bff8:	4620      	mov	r0, r4
 800bffa:	f000 febb 	bl	800cd74 <_fflush_r>
 800bffe:	68e1      	ldr	r1, [r4, #12]
 800c000:	4b06      	ldr	r3, [pc, #24]	@ (800c01c <cleanup_stdio+0x3c>)
 800c002:	4299      	cmp	r1, r3
 800c004:	d004      	beq.n	800c010 <cleanup_stdio+0x30>
 800c006:	4620      	mov	r0, r4
 800c008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c00c:	f000 beb2 	b.w	800cd74 <_fflush_r>
 800c010:	bd10      	pop	{r4, pc}
 800c012:	bf00      	nop
 800c014:	20000a2c 	.word	0x20000a2c
 800c018:	20000a94 	.word	0x20000a94
 800c01c:	20000afc 	.word	0x20000afc

0800c020 <global_stdio_init.part.0>:
 800c020:	b510      	push	{r4, lr}
 800c022:	4b0b      	ldr	r3, [pc, #44]	@ (800c050 <global_stdio_init.part.0+0x30>)
 800c024:	4c0b      	ldr	r4, [pc, #44]	@ (800c054 <global_stdio_init.part.0+0x34>)
 800c026:	4a0c      	ldr	r2, [pc, #48]	@ (800c058 <global_stdio_init.part.0+0x38>)
 800c028:	601a      	str	r2, [r3, #0]
 800c02a:	4620      	mov	r0, r4
 800c02c:	2200      	movs	r2, #0
 800c02e:	2104      	movs	r1, #4
 800c030:	f7ff ff94 	bl	800bf5c <std>
 800c034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c038:	2201      	movs	r2, #1
 800c03a:	2109      	movs	r1, #9
 800c03c:	f7ff ff8e 	bl	800bf5c <std>
 800c040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c044:	2202      	movs	r2, #2
 800c046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c04a:	2112      	movs	r1, #18
 800c04c:	f7ff bf86 	b.w	800bf5c <std>
 800c050:	20000b64 	.word	0x20000b64
 800c054:	20000a2c 	.word	0x20000a2c
 800c058:	0800bfc9 	.word	0x0800bfc9

0800c05c <__sfp_lock_acquire>:
 800c05c:	4801      	ldr	r0, [pc, #4]	@ (800c064 <__sfp_lock_acquire+0x8>)
 800c05e:	f000 bad6 	b.w	800c60e <__retarget_lock_acquire_recursive>
 800c062:	bf00      	nop
 800c064:	20000b6d 	.word	0x20000b6d

0800c068 <__sfp_lock_release>:
 800c068:	4801      	ldr	r0, [pc, #4]	@ (800c070 <__sfp_lock_release+0x8>)
 800c06a:	f000 bad1 	b.w	800c610 <__retarget_lock_release_recursive>
 800c06e:	bf00      	nop
 800c070:	20000b6d 	.word	0x20000b6d

0800c074 <__sinit>:
 800c074:	b510      	push	{r4, lr}
 800c076:	4604      	mov	r4, r0
 800c078:	f7ff fff0 	bl	800c05c <__sfp_lock_acquire>
 800c07c:	6a23      	ldr	r3, [r4, #32]
 800c07e:	b11b      	cbz	r3, 800c088 <__sinit+0x14>
 800c080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c084:	f7ff bff0 	b.w	800c068 <__sfp_lock_release>
 800c088:	4b04      	ldr	r3, [pc, #16]	@ (800c09c <__sinit+0x28>)
 800c08a:	6223      	str	r3, [r4, #32]
 800c08c:	4b04      	ldr	r3, [pc, #16]	@ (800c0a0 <__sinit+0x2c>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d1f5      	bne.n	800c080 <__sinit+0xc>
 800c094:	f7ff ffc4 	bl	800c020 <global_stdio_init.part.0>
 800c098:	e7f2      	b.n	800c080 <__sinit+0xc>
 800c09a:	bf00      	nop
 800c09c:	0800bfe1 	.word	0x0800bfe1
 800c0a0:	20000b64 	.word	0x20000b64

0800c0a4 <fiprintf>:
 800c0a4:	b40e      	push	{r1, r2, r3}
 800c0a6:	b503      	push	{r0, r1, lr}
 800c0a8:	4601      	mov	r1, r0
 800c0aa:	ab03      	add	r3, sp, #12
 800c0ac:	4805      	ldr	r0, [pc, #20]	@ (800c0c4 <fiprintf+0x20>)
 800c0ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0b2:	6800      	ldr	r0, [r0, #0]
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	f000 fb35 	bl	800c724 <_vfiprintf_r>
 800c0ba:	b002      	add	sp, #8
 800c0bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0c0:	b003      	add	sp, #12
 800c0c2:	4770      	bx	lr
 800c0c4:	200000a8 	.word	0x200000a8

0800c0c8 <_fwalk_sglue>:
 800c0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0cc:	4607      	mov	r7, r0
 800c0ce:	4688      	mov	r8, r1
 800c0d0:	4614      	mov	r4, r2
 800c0d2:	2600      	movs	r6, #0
 800c0d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0d8:	f1b9 0901 	subs.w	r9, r9, #1
 800c0dc:	d505      	bpl.n	800c0ea <_fwalk_sglue+0x22>
 800c0de:	6824      	ldr	r4, [r4, #0]
 800c0e0:	2c00      	cmp	r4, #0
 800c0e2:	d1f7      	bne.n	800c0d4 <_fwalk_sglue+0xc>
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ea:	89ab      	ldrh	r3, [r5, #12]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d907      	bls.n	800c100 <_fwalk_sglue+0x38>
 800c0f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	d003      	beq.n	800c100 <_fwalk_sglue+0x38>
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	47c0      	blx	r8
 800c0fe:	4306      	orrs	r6, r0
 800c100:	3568      	adds	r5, #104	@ 0x68
 800c102:	e7e9      	b.n	800c0d8 <_fwalk_sglue+0x10>

0800c104 <iprintf>:
 800c104:	b40f      	push	{r0, r1, r2, r3}
 800c106:	b507      	push	{r0, r1, r2, lr}
 800c108:	4906      	ldr	r1, [pc, #24]	@ (800c124 <iprintf+0x20>)
 800c10a:	ab04      	add	r3, sp, #16
 800c10c:	6808      	ldr	r0, [r1, #0]
 800c10e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c112:	6881      	ldr	r1, [r0, #8]
 800c114:	9301      	str	r3, [sp, #4]
 800c116:	f000 fb05 	bl	800c724 <_vfiprintf_r>
 800c11a:	b003      	add	sp, #12
 800c11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c120:	b004      	add	sp, #16
 800c122:	4770      	bx	lr
 800c124:	200000a8 	.word	0x200000a8

0800c128 <_puts_r>:
 800c128:	6a03      	ldr	r3, [r0, #32]
 800c12a:	b570      	push	{r4, r5, r6, lr}
 800c12c:	6884      	ldr	r4, [r0, #8]
 800c12e:	4605      	mov	r5, r0
 800c130:	460e      	mov	r6, r1
 800c132:	b90b      	cbnz	r3, 800c138 <_puts_r+0x10>
 800c134:	f7ff ff9e 	bl	800c074 <__sinit>
 800c138:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c13a:	07db      	lsls	r3, r3, #31
 800c13c:	d405      	bmi.n	800c14a <_puts_r+0x22>
 800c13e:	89a3      	ldrh	r3, [r4, #12]
 800c140:	0598      	lsls	r0, r3, #22
 800c142:	d402      	bmi.n	800c14a <_puts_r+0x22>
 800c144:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c146:	f000 fa62 	bl	800c60e <__retarget_lock_acquire_recursive>
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	0719      	lsls	r1, r3, #28
 800c14e:	d502      	bpl.n	800c156 <_puts_r+0x2e>
 800c150:	6923      	ldr	r3, [r4, #16]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d135      	bne.n	800c1c2 <_puts_r+0x9a>
 800c156:	4621      	mov	r1, r4
 800c158:	4628      	mov	r0, r5
 800c15a:	f000 f979 	bl	800c450 <__swsetup_r>
 800c15e:	b380      	cbz	r0, 800c1c2 <_puts_r+0x9a>
 800c160:	f04f 35ff 	mov.w	r5, #4294967295
 800c164:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c166:	07da      	lsls	r2, r3, #31
 800c168:	d405      	bmi.n	800c176 <_puts_r+0x4e>
 800c16a:	89a3      	ldrh	r3, [r4, #12]
 800c16c:	059b      	lsls	r3, r3, #22
 800c16e:	d402      	bmi.n	800c176 <_puts_r+0x4e>
 800c170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c172:	f000 fa4d 	bl	800c610 <__retarget_lock_release_recursive>
 800c176:	4628      	mov	r0, r5
 800c178:	bd70      	pop	{r4, r5, r6, pc}
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	da04      	bge.n	800c188 <_puts_r+0x60>
 800c17e:	69a2      	ldr	r2, [r4, #24]
 800c180:	429a      	cmp	r2, r3
 800c182:	dc17      	bgt.n	800c1b4 <_puts_r+0x8c>
 800c184:	290a      	cmp	r1, #10
 800c186:	d015      	beq.n	800c1b4 <_puts_r+0x8c>
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	1c5a      	adds	r2, r3, #1
 800c18c:	6022      	str	r2, [r4, #0]
 800c18e:	7019      	strb	r1, [r3, #0]
 800c190:	68a3      	ldr	r3, [r4, #8]
 800c192:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c196:	3b01      	subs	r3, #1
 800c198:	60a3      	str	r3, [r4, #8]
 800c19a:	2900      	cmp	r1, #0
 800c19c:	d1ed      	bne.n	800c17a <_puts_r+0x52>
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	da11      	bge.n	800c1c6 <_puts_r+0x9e>
 800c1a2:	4622      	mov	r2, r4
 800c1a4:	210a      	movs	r1, #10
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	f000 f913 	bl	800c3d2 <__swbuf_r>
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d0d7      	beq.n	800c160 <_puts_r+0x38>
 800c1b0:	250a      	movs	r5, #10
 800c1b2:	e7d7      	b.n	800c164 <_puts_r+0x3c>
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	f000 f90b 	bl	800c3d2 <__swbuf_r>
 800c1bc:	3001      	adds	r0, #1
 800c1be:	d1e7      	bne.n	800c190 <_puts_r+0x68>
 800c1c0:	e7ce      	b.n	800c160 <_puts_r+0x38>
 800c1c2:	3e01      	subs	r6, #1
 800c1c4:	e7e4      	b.n	800c190 <_puts_r+0x68>
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	1c5a      	adds	r2, r3, #1
 800c1ca:	6022      	str	r2, [r4, #0]
 800c1cc:	220a      	movs	r2, #10
 800c1ce:	701a      	strb	r2, [r3, #0]
 800c1d0:	e7ee      	b.n	800c1b0 <_puts_r+0x88>
	...

0800c1d4 <puts>:
 800c1d4:	4b02      	ldr	r3, [pc, #8]	@ (800c1e0 <puts+0xc>)
 800c1d6:	4601      	mov	r1, r0
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	f7ff bfa5 	b.w	800c128 <_puts_r>
 800c1de:	bf00      	nop
 800c1e0:	200000a8 	.word	0x200000a8

0800c1e4 <setvbuf>:
 800c1e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1e8:	461d      	mov	r5, r3
 800c1ea:	4b57      	ldr	r3, [pc, #348]	@ (800c348 <setvbuf+0x164>)
 800c1ec:	681f      	ldr	r7, [r3, #0]
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	460e      	mov	r6, r1
 800c1f2:	4690      	mov	r8, r2
 800c1f4:	b127      	cbz	r7, 800c200 <setvbuf+0x1c>
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	b913      	cbnz	r3, 800c200 <setvbuf+0x1c>
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	f7ff ff3a 	bl	800c074 <__sinit>
 800c200:	f1b8 0f02 	cmp.w	r8, #2
 800c204:	d006      	beq.n	800c214 <setvbuf+0x30>
 800c206:	f1b8 0f01 	cmp.w	r8, #1
 800c20a:	f200 809a 	bhi.w	800c342 <setvbuf+0x15e>
 800c20e:	2d00      	cmp	r5, #0
 800c210:	f2c0 8097 	blt.w	800c342 <setvbuf+0x15e>
 800c214:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c216:	07d9      	lsls	r1, r3, #31
 800c218:	d405      	bmi.n	800c226 <setvbuf+0x42>
 800c21a:	89a3      	ldrh	r3, [r4, #12]
 800c21c:	059a      	lsls	r2, r3, #22
 800c21e:	d402      	bmi.n	800c226 <setvbuf+0x42>
 800c220:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c222:	f000 f9f4 	bl	800c60e <__retarget_lock_acquire_recursive>
 800c226:	4621      	mov	r1, r4
 800c228:	4638      	mov	r0, r7
 800c22a:	f000 fda3 	bl	800cd74 <_fflush_r>
 800c22e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c230:	b141      	cbz	r1, 800c244 <setvbuf+0x60>
 800c232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c236:	4299      	cmp	r1, r3
 800c238:	d002      	beq.n	800c240 <setvbuf+0x5c>
 800c23a:	4638      	mov	r0, r7
 800c23c:	f000 f9fe 	bl	800c63c <_free_r>
 800c240:	2300      	movs	r3, #0
 800c242:	6363      	str	r3, [r4, #52]	@ 0x34
 800c244:	2300      	movs	r3, #0
 800c246:	61a3      	str	r3, [r4, #24]
 800c248:	6063      	str	r3, [r4, #4]
 800c24a:	89a3      	ldrh	r3, [r4, #12]
 800c24c:	061b      	lsls	r3, r3, #24
 800c24e:	d503      	bpl.n	800c258 <setvbuf+0x74>
 800c250:	6921      	ldr	r1, [r4, #16]
 800c252:	4638      	mov	r0, r7
 800c254:	f000 f9f2 	bl	800c63c <_free_r>
 800c258:	89a3      	ldrh	r3, [r4, #12]
 800c25a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800c25e:	f023 0303 	bic.w	r3, r3, #3
 800c262:	f1b8 0f02 	cmp.w	r8, #2
 800c266:	81a3      	strh	r3, [r4, #12]
 800c268:	d061      	beq.n	800c32e <setvbuf+0x14a>
 800c26a:	ab01      	add	r3, sp, #4
 800c26c:	466a      	mov	r2, sp
 800c26e:	4621      	mov	r1, r4
 800c270:	4638      	mov	r0, r7
 800c272:	f000 fda7 	bl	800cdc4 <__swhatbuf_r>
 800c276:	89a3      	ldrh	r3, [r4, #12]
 800c278:	4318      	orrs	r0, r3
 800c27a:	81a0      	strh	r0, [r4, #12]
 800c27c:	bb2d      	cbnz	r5, 800c2ca <setvbuf+0xe6>
 800c27e:	9d00      	ldr	r5, [sp, #0]
 800c280:	4628      	mov	r0, r5
 800c282:	f7ff fdad 	bl	800bde0 <malloc>
 800c286:	4606      	mov	r6, r0
 800c288:	2800      	cmp	r0, #0
 800c28a:	d152      	bne.n	800c332 <setvbuf+0x14e>
 800c28c:	f8dd 9000 	ldr.w	r9, [sp]
 800c290:	45a9      	cmp	r9, r5
 800c292:	d140      	bne.n	800c316 <setvbuf+0x132>
 800c294:	f04f 35ff 	mov.w	r5, #4294967295
 800c298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c29c:	f043 0202 	orr.w	r2, r3, #2
 800c2a0:	81a2      	strh	r2, [r4, #12]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	60a2      	str	r2, [r4, #8]
 800c2a6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800c2aa:	6022      	str	r2, [r4, #0]
 800c2ac:	6122      	str	r2, [r4, #16]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	6162      	str	r2, [r4, #20]
 800c2b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c2b4:	07d6      	lsls	r6, r2, #31
 800c2b6:	d404      	bmi.n	800c2c2 <setvbuf+0xde>
 800c2b8:	0598      	lsls	r0, r3, #22
 800c2ba:	d402      	bmi.n	800c2c2 <setvbuf+0xde>
 800c2bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2be:	f000 f9a7 	bl	800c610 <__retarget_lock_release_recursive>
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	b003      	add	sp, #12
 800c2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2ca:	2e00      	cmp	r6, #0
 800c2cc:	d0d8      	beq.n	800c280 <setvbuf+0x9c>
 800c2ce:	6a3b      	ldr	r3, [r7, #32]
 800c2d0:	b913      	cbnz	r3, 800c2d8 <setvbuf+0xf4>
 800c2d2:	4638      	mov	r0, r7
 800c2d4:	f7ff fece 	bl	800c074 <__sinit>
 800c2d8:	f1b8 0f01 	cmp.w	r8, #1
 800c2dc:	bf08      	it	eq
 800c2de:	89a3      	ldrheq	r3, [r4, #12]
 800c2e0:	6026      	str	r6, [r4, #0]
 800c2e2:	bf04      	itt	eq
 800c2e4:	f043 0301 	orreq.w	r3, r3, #1
 800c2e8:	81a3      	strheq	r3, [r4, #12]
 800c2ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2ee:	f013 0208 	ands.w	r2, r3, #8
 800c2f2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800c2f6:	d01e      	beq.n	800c336 <setvbuf+0x152>
 800c2f8:	07d9      	lsls	r1, r3, #31
 800c2fa:	bf41      	itttt	mi
 800c2fc:	2200      	movmi	r2, #0
 800c2fe:	426d      	negmi	r5, r5
 800c300:	60a2      	strmi	r2, [r4, #8]
 800c302:	61a5      	strmi	r5, [r4, #24]
 800c304:	bf58      	it	pl
 800c306:	60a5      	strpl	r5, [r4, #8]
 800c308:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c30a:	07d2      	lsls	r2, r2, #31
 800c30c:	d401      	bmi.n	800c312 <setvbuf+0x12e>
 800c30e:	059b      	lsls	r3, r3, #22
 800c310:	d513      	bpl.n	800c33a <setvbuf+0x156>
 800c312:	2500      	movs	r5, #0
 800c314:	e7d5      	b.n	800c2c2 <setvbuf+0xde>
 800c316:	4648      	mov	r0, r9
 800c318:	f7ff fd62 	bl	800bde0 <malloc>
 800c31c:	4606      	mov	r6, r0
 800c31e:	2800      	cmp	r0, #0
 800c320:	d0b8      	beq.n	800c294 <setvbuf+0xb0>
 800c322:	89a3      	ldrh	r3, [r4, #12]
 800c324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c328:	81a3      	strh	r3, [r4, #12]
 800c32a:	464d      	mov	r5, r9
 800c32c:	e7cf      	b.n	800c2ce <setvbuf+0xea>
 800c32e:	2500      	movs	r5, #0
 800c330:	e7b2      	b.n	800c298 <setvbuf+0xb4>
 800c332:	46a9      	mov	r9, r5
 800c334:	e7f5      	b.n	800c322 <setvbuf+0x13e>
 800c336:	60a2      	str	r2, [r4, #8]
 800c338:	e7e6      	b.n	800c308 <setvbuf+0x124>
 800c33a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c33c:	f000 f968 	bl	800c610 <__retarget_lock_release_recursive>
 800c340:	e7e7      	b.n	800c312 <setvbuf+0x12e>
 800c342:	f04f 35ff 	mov.w	r5, #4294967295
 800c346:	e7bc      	b.n	800c2c2 <setvbuf+0xde>
 800c348:	200000a8 	.word	0x200000a8

0800c34c <__sread>:
 800c34c:	b510      	push	{r4, lr}
 800c34e:	460c      	mov	r4, r1
 800c350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c354:	f000 f8fc 	bl	800c550 <_read_r>
 800c358:	2800      	cmp	r0, #0
 800c35a:	bfab      	itete	ge
 800c35c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c35e:	89a3      	ldrhlt	r3, [r4, #12]
 800c360:	181b      	addge	r3, r3, r0
 800c362:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c366:	bfac      	ite	ge
 800c368:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c36a:	81a3      	strhlt	r3, [r4, #12]
 800c36c:	bd10      	pop	{r4, pc}

0800c36e <__swrite>:
 800c36e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c372:	461f      	mov	r7, r3
 800c374:	898b      	ldrh	r3, [r1, #12]
 800c376:	05db      	lsls	r3, r3, #23
 800c378:	4605      	mov	r5, r0
 800c37a:	460c      	mov	r4, r1
 800c37c:	4616      	mov	r6, r2
 800c37e:	d505      	bpl.n	800c38c <__swrite+0x1e>
 800c380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c384:	2302      	movs	r3, #2
 800c386:	2200      	movs	r2, #0
 800c388:	f000 f8d0 	bl	800c52c <_lseek_r>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c392:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c396:	81a3      	strh	r3, [r4, #12]
 800c398:	4632      	mov	r2, r6
 800c39a:	463b      	mov	r3, r7
 800c39c:	4628      	mov	r0, r5
 800c39e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a2:	f000 b8f7 	b.w	800c594 <_write_r>

0800c3a6 <__sseek>:
 800c3a6:	b510      	push	{r4, lr}
 800c3a8:	460c      	mov	r4, r1
 800c3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ae:	f000 f8bd 	bl	800c52c <_lseek_r>
 800c3b2:	1c43      	adds	r3, r0, #1
 800c3b4:	89a3      	ldrh	r3, [r4, #12]
 800c3b6:	bf15      	itete	ne
 800c3b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3c2:	81a3      	strheq	r3, [r4, #12]
 800c3c4:	bf18      	it	ne
 800c3c6:	81a3      	strhne	r3, [r4, #12]
 800c3c8:	bd10      	pop	{r4, pc}

0800c3ca <__sclose>:
 800c3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ce:	f000 b89d 	b.w	800c50c <_close_r>

0800c3d2 <__swbuf_r>:
 800c3d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d4:	460e      	mov	r6, r1
 800c3d6:	4614      	mov	r4, r2
 800c3d8:	4605      	mov	r5, r0
 800c3da:	b118      	cbz	r0, 800c3e4 <__swbuf_r+0x12>
 800c3dc:	6a03      	ldr	r3, [r0, #32]
 800c3de:	b90b      	cbnz	r3, 800c3e4 <__swbuf_r+0x12>
 800c3e0:	f7ff fe48 	bl	800c074 <__sinit>
 800c3e4:	69a3      	ldr	r3, [r4, #24]
 800c3e6:	60a3      	str	r3, [r4, #8]
 800c3e8:	89a3      	ldrh	r3, [r4, #12]
 800c3ea:	071a      	lsls	r2, r3, #28
 800c3ec:	d501      	bpl.n	800c3f2 <__swbuf_r+0x20>
 800c3ee:	6923      	ldr	r3, [r4, #16]
 800c3f0:	b943      	cbnz	r3, 800c404 <__swbuf_r+0x32>
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	f000 f82b 	bl	800c450 <__swsetup_r>
 800c3fa:	b118      	cbz	r0, 800c404 <__swbuf_r+0x32>
 800c3fc:	f04f 37ff 	mov.w	r7, #4294967295
 800c400:	4638      	mov	r0, r7
 800c402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c404:	6823      	ldr	r3, [r4, #0]
 800c406:	6922      	ldr	r2, [r4, #16]
 800c408:	1a98      	subs	r0, r3, r2
 800c40a:	6963      	ldr	r3, [r4, #20]
 800c40c:	b2f6      	uxtb	r6, r6
 800c40e:	4283      	cmp	r3, r0
 800c410:	4637      	mov	r7, r6
 800c412:	dc05      	bgt.n	800c420 <__swbuf_r+0x4e>
 800c414:	4621      	mov	r1, r4
 800c416:	4628      	mov	r0, r5
 800c418:	f000 fcac 	bl	800cd74 <_fflush_r>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d1ed      	bne.n	800c3fc <__swbuf_r+0x2a>
 800c420:	68a3      	ldr	r3, [r4, #8]
 800c422:	3b01      	subs	r3, #1
 800c424:	60a3      	str	r3, [r4, #8]
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	1c5a      	adds	r2, r3, #1
 800c42a:	6022      	str	r2, [r4, #0]
 800c42c:	701e      	strb	r6, [r3, #0]
 800c42e:	6962      	ldr	r2, [r4, #20]
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	429a      	cmp	r2, r3
 800c434:	d004      	beq.n	800c440 <__swbuf_r+0x6e>
 800c436:	89a3      	ldrh	r3, [r4, #12]
 800c438:	07db      	lsls	r3, r3, #31
 800c43a:	d5e1      	bpl.n	800c400 <__swbuf_r+0x2e>
 800c43c:	2e0a      	cmp	r6, #10
 800c43e:	d1df      	bne.n	800c400 <__swbuf_r+0x2e>
 800c440:	4621      	mov	r1, r4
 800c442:	4628      	mov	r0, r5
 800c444:	f000 fc96 	bl	800cd74 <_fflush_r>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d0d9      	beq.n	800c400 <__swbuf_r+0x2e>
 800c44c:	e7d6      	b.n	800c3fc <__swbuf_r+0x2a>
	...

0800c450 <__swsetup_r>:
 800c450:	b538      	push	{r3, r4, r5, lr}
 800c452:	4b29      	ldr	r3, [pc, #164]	@ (800c4f8 <__swsetup_r+0xa8>)
 800c454:	4605      	mov	r5, r0
 800c456:	6818      	ldr	r0, [r3, #0]
 800c458:	460c      	mov	r4, r1
 800c45a:	b118      	cbz	r0, 800c464 <__swsetup_r+0x14>
 800c45c:	6a03      	ldr	r3, [r0, #32]
 800c45e:	b90b      	cbnz	r3, 800c464 <__swsetup_r+0x14>
 800c460:	f7ff fe08 	bl	800c074 <__sinit>
 800c464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c468:	0719      	lsls	r1, r3, #28
 800c46a:	d422      	bmi.n	800c4b2 <__swsetup_r+0x62>
 800c46c:	06da      	lsls	r2, r3, #27
 800c46e:	d407      	bmi.n	800c480 <__swsetup_r+0x30>
 800c470:	2209      	movs	r2, #9
 800c472:	602a      	str	r2, [r5, #0]
 800c474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c478:	81a3      	strh	r3, [r4, #12]
 800c47a:	f04f 30ff 	mov.w	r0, #4294967295
 800c47e:	e033      	b.n	800c4e8 <__swsetup_r+0x98>
 800c480:	0758      	lsls	r0, r3, #29
 800c482:	d512      	bpl.n	800c4aa <__swsetup_r+0x5a>
 800c484:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c486:	b141      	cbz	r1, 800c49a <__swsetup_r+0x4a>
 800c488:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c48c:	4299      	cmp	r1, r3
 800c48e:	d002      	beq.n	800c496 <__swsetup_r+0x46>
 800c490:	4628      	mov	r0, r5
 800c492:	f000 f8d3 	bl	800c63c <_free_r>
 800c496:	2300      	movs	r3, #0
 800c498:	6363      	str	r3, [r4, #52]	@ 0x34
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	6063      	str	r3, [r4, #4]
 800c4a6:	6923      	ldr	r3, [r4, #16]
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	f043 0308 	orr.w	r3, r3, #8
 800c4b0:	81a3      	strh	r3, [r4, #12]
 800c4b2:	6923      	ldr	r3, [r4, #16]
 800c4b4:	b94b      	cbnz	r3, 800c4ca <__swsetup_r+0x7a>
 800c4b6:	89a3      	ldrh	r3, [r4, #12]
 800c4b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c4bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c4c0:	d003      	beq.n	800c4ca <__swsetup_r+0x7a>
 800c4c2:	4621      	mov	r1, r4
 800c4c4:	4628      	mov	r0, r5
 800c4c6:	f000 fca3 	bl	800ce10 <__smakebuf_r>
 800c4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ce:	f013 0201 	ands.w	r2, r3, #1
 800c4d2:	d00a      	beq.n	800c4ea <__swsetup_r+0x9a>
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	60a2      	str	r2, [r4, #8]
 800c4d8:	6962      	ldr	r2, [r4, #20]
 800c4da:	4252      	negs	r2, r2
 800c4dc:	61a2      	str	r2, [r4, #24]
 800c4de:	6922      	ldr	r2, [r4, #16]
 800c4e0:	b942      	cbnz	r2, 800c4f4 <__swsetup_r+0xa4>
 800c4e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c4e6:	d1c5      	bne.n	800c474 <__swsetup_r+0x24>
 800c4e8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ea:	0799      	lsls	r1, r3, #30
 800c4ec:	bf58      	it	pl
 800c4ee:	6962      	ldrpl	r2, [r4, #20]
 800c4f0:	60a2      	str	r2, [r4, #8]
 800c4f2:	e7f4      	b.n	800c4de <__swsetup_r+0x8e>
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e7f7      	b.n	800c4e8 <__swsetup_r+0x98>
 800c4f8:	200000a8 	.word	0x200000a8

0800c4fc <memset>:
 800c4fc:	4402      	add	r2, r0
 800c4fe:	4603      	mov	r3, r0
 800c500:	4293      	cmp	r3, r2
 800c502:	d100      	bne.n	800c506 <memset+0xa>
 800c504:	4770      	bx	lr
 800c506:	f803 1b01 	strb.w	r1, [r3], #1
 800c50a:	e7f9      	b.n	800c500 <memset+0x4>

0800c50c <_close_r>:
 800c50c:	b538      	push	{r3, r4, r5, lr}
 800c50e:	4d06      	ldr	r5, [pc, #24]	@ (800c528 <_close_r+0x1c>)
 800c510:	2300      	movs	r3, #0
 800c512:	4604      	mov	r4, r0
 800c514:	4608      	mov	r0, r1
 800c516:	602b      	str	r3, [r5, #0]
 800c518:	f7f7 f942 	bl	80037a0 <_close>
 800c51c:	1c43      	adds	r3, r0, #1
 800c51e:	d102      	bne.n	800c526 <_close_r+0x1a>
 800c520:	682b      	ldr	r3, [r5, #0]
 800c522:	b103      	cbz	r3, 800c526 <_close_r+0x1a>
 800c524:	6023      	str	r3, [r4, #0]
 800c526:	bd38      	pop	{r3, r4, r5, pc}
 800c528:	20000b68 	.word	0x20000b68

0800c52c <_lseek_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	@ (800c54c <_lseek_r+0x20>)
 800c530:	4604      	mov	r4, r0
 800c532:	4608      	mov	r0, r1
 800c534:	4611      	mov	r1, r2
 800c536:	2200      	movs	r2, #0
 800c538:	602a      	str	r2, [r5, #0]
 800c53a:	461a      	mov	r2, r3
 800c53c:	f7f7 f957 	bl	80037ee <_lseek>
 800c540:	1c43      	adds	r3, r0, #1
 800c542:	d102      	bne.n	800c54a <_lseek_r+0x1e>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	b103      	cbz	r3, 800c54a <_lseek_r+0x1e>
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	20000b68 	.word	0x20000b68

0800c550 <_read_r>:
 800c550:	b538      	push	{r3, r4, r5, lr}
 800c552:	4d07      	ldr	r5, [pc, #28]	@ (800c570 <_read_r+0x20>)
 800c554:	4604      	mov	r4, r0
 800c556:	4608      	mov	r0, r1
 800c558:	4611      	mov	r1, r2
 800c55a:	2200      	movs	r2, #0
 800c55c:	602a      	str	r2, [r5, #0]
 800c55e:	461a      	mov	r2, r3
 800c560:	f7f7 f901 	bl	8003766 <_read>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d102      	bne.n	800c56e <_read_r+0x1e>
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	b103      	cbz	r3, 800c56e <_read_r+0x1e>
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	20000b68 	.word	0x20000b68

0800c574 <_sbrk_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4d06      	ldr	r5, [pc, #24]	@ (800c590 <_sbrk_r+0x1c>)
 800c578:	2300      	movs	r3, #0
 800c57a:	4604      	mov	r4, r0
 800c57c:	4608      	mov	r0, r1
 800c57e:	602b      	str	r3, [r5, #0]
 800c580:	f7f7 f942 	bl	8003808 <_sbrk>
 800c584:	1c43      	adds	r3, r0, #1
 800c586:	d102      	bne.n	800c58e <_sbrk_r+0x1a>
 800c588:	682b      	ldr	r3, [r5, #0]
 800c58a:	b103      	cbz	r3, 800c58e <_sbrk_r+0x1a>
 800c58c:	6023      	str	r3, [r4, #0]
 800c58e:	bd38      	pop	{r3, r4, r5, pc}
 800c590:	20000b68 	.word	0x20000b68

0800c594 <_write_r>:
 800c594:	b538      	push	{r3, r4, r5, lr}
 800c596:	4d07      	ldr	r5, [pc, #28]	@ (800c5b4 <_write_r+0x20>)
 800c598:	4604      	mov	r4, r0
 800c59a:	4608      	mov	r0, r1
 800c59c:	4611      	mov	r1, r2
 800c59e:	2200      	movs	r2, #0
 800c5a0:	602a      	str	r2, [r5, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f7f4 fc9a 	bl	8000edc <_write>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_write_r+0x1e>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_write_r+0x1e>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	20000b68 	.word	0x20000b68

0800c5b8 <__errno>:
 800c5b8:	4b01      	ldr	r3, [pc, #4]	@ (800c5c0 <__errno+0x8>)
 800c5ba:	6818      	ldr	r0, [r3, #0]
 800c5bc:	4770      	bx	lr
 800c5be:	bf00      	nop
 800c5c0:	200000a8 	.word	0x200000a8

0800c5c4 <__libc_init_array>:
 800c5c4:	b570      	push	{r4, r5, r6, lr}
 800c5c6:	4d0d      	ldr	r5, [pc, #52]	@ (800c5fc <__libc_init_array+0x38>)
 800c5c8:	4c0d      	ldr	r4, [pc, #52]	@ (800c600 <__libc_init_array+0x3c>)
 800c5ca:	1b64      	subs	r4, r4, r5
 800c5cc:	10a4      	asrs	r4, r4, #2
 800c5ce:	2600      	movs	r6, #0
 800c5d0:	42a6      	cmp	r6, r4
 800c5d2:	d109      	bne.n	800c5e8 <__libc_init_array+0x24>
 800c5d4:	4d0b      	ldr	r5, [pc, #44]	@ (800c604 <__libc_init_array+0x40>)
 800c5d6:	4c0c      	ldr	r4, [pc, #48]	@ (800c608 <__libc_init_array+0x44>)
 800c5d8:	f000 fcbc 	bl	800cf54 <_init>
 800c5dc:	1b64      	subs	r4, r4, r5
 800c5de:	10a4      	asrs	r4, r4, #2
 800c5e0:	2600      	movs	r6, #0
 800c5e2:	42a6      	cmp	r6, r4
 800c5e4:	d105      	bne.n	800c5f2 <__libc_init_array+0x2e>
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}
 800c5e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ec:	4798      	blx	r3
 800c5ee:	3601      	adds	r6, #1
 800c5f0:	e7ee      	b.n	800c5d0 <__libc_init_array+0xc>
 800c5f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5f6:	4798      	blx	r3
 800c5f8:	3601      	adds	r6, #1
 800c5fa:	e7f2      	b.n	800c5e2 <__libc_init_array+0x1e>
 800c5fc:	0800d3e4 	.word	0x0800d3e4
 800c600:	0800d3e4 	.word	0x0800d3e4
 800c604:	0800d3e4 	.word	0x0800d3e4
 800c608:	0800d3e8 	.word	0x0800d3e8

0800c60c <__retarget_lock_init_recursive>:
 800c60c:	4770      	bx	lr

0800c60e <__retarget_lock_acquire_recursive>:
 800c60e:	4770      	bx	lr

0800c610 <__retarget_lock_release_recursive>:
 800c610:	4770      	bx	lr

0800c612 <memcpy>:
 800c612:	440a      	add	r2, r1
 800c614:	4291      	cmp	r1, r2
 800c616:	f100 33ff 	add.w	r3, r0, #4294967295
 800c61a:	d100      	bne.n	800c61e <memcpy+0xc>
 800c61c:	4770      	bx	lr
 800c61e:	b510      	push	{r4, lr}
 800c620:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c624:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c628:	4291      	cmp	r1, r2
 800c62a:	d1f9      	bne.n	800c620 <memcpy+0xe>
 800c62c:	bd10      	pop	{r4, pc}

0800c62e <abort>:
 800c62e:	b508      	push	{r3, lr}
 800c630:	2006      	movs	r0, #6
 800c632:	f000 fc51 	bl	800ced8 <raise>
 800c636:	2001      	movs	r0, #1
 800c638:	f7f7 f88a 	bl	8003750 <_exit>

0800c63c <_free_r>:
 800c63c:	b538      	push	{r3, r4, r5, lr}
 800c63e:	4605      	mov	r5, r0
 800c640:	2900      	cmp	r1, #0
 800c642:	d041      	beq.n	800c6c8 <_free_r+0x8c>
 800c644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c648:	1f0c      	subs	r4, r1, #4
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	bfb8      	it	lt
 800c64e:	18e4      	addlt	r4, r4, r3
 800c650:	f7ff fc78 	bl	800bf44 <__malloc_lock>
 800c654:	4a1d      	ldr	r2, [pc, #116]	@ (800c6cc <_free_r+0x90>)
 800c656:	6813      	ldr	r3, [r2, #0]
 800c658:	b933      	cbnz	r3, 800c668 <_free_r+0x2c>
 800c65a:	6063      	str	r3, [r4, #4]
 800c65c:	6014      	str	r4, [r2, #0]
 800c65e:	4628      	mov	r0, r5
 800c660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c664:	f7ff bc74 	b.w	800bf50 <__malloc_unlock>
 800c668:	42a3      	cmp	r3, r4
 800c66a:	d908      	bls.n	800c67e <_free_r+0x42>
 800c66c:	6820      	ldr	r0, [r4, #0]
 800c66e:	1821      	adds	r1, r4, r0
 800c670:	428b      	cmp	r3, r1
 800c672:	bf01      	itttt	eq
 800c674:	6819      	ldreq	r1, [r3, #0]
 800c676:	685b      	ldreq	r3, [r3, #4]
 800c678:	1809      	addeq	r1, r1, r0
 800c67a:	6021      	streq	r1, [r4, #0]
 800c67c:	e7ed      	b.n	800c65a <_free_r+0x1e>
 800c67e:	461a      	mov	r2, r3
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	b10b      	cbz	r3, 800c688 <_free_r+0x4c>
 800c684:	42a3      	cmp	r3, r4
 800c686:	d9fa      	bls.n	800c67e <_free_r+0x42>
 800c688:	6811      	ldr	r1, [r2, #0]
 800c68a:	1850      	adds	r0, r2, r1
 800c68c:	42a0      	cmp	r0, r4
 800c68e:	d10b      	bne.n	800c6a8 <_free_r+0x6c>
 800c690:	6820      	ldr	r0, [r4, #0]
 800c692:	4401      	add	r1, r0
 800c694:	1850      	adds	r0, r2, r1
 800c696:	4283      	cmp	r3, r0
 800c698:	6011      	str	r1, [r2, #0]
 800c69a:	d1e0      	bne.n	800c65e <_free_r+0x22>
 800c69c:	6818      	ldr	r0, [r3, #0]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	6053      	str	r3, [r2, #4]
 800c6a2:	4408      	add	r0, r1
 800c6a4:	6010      	str	r0, [r2, #0]
 800c6a6:	e7da      	b.n	800c65e <_free_r+0x22>
 800c6a8:	d902      	bls.n	800c6b0 <_free_r+0x74>
 800c6aa:	230c      	movs	r3, #12
 800c6ac:	602b      	str	r3, [r5, #0]
 800c6ae:	e7d6      	b.n	800c65e <_free_r+0x22>
 800c6b0:	6820      	ldr	r0, [r4, #0]
 800c6b2:	1821      	adds	r1, r4, r0
 800c6b4:	428b      	cmp	r3, r1
 800c6b6:	bf04      	itt	eq
 800c6b8:	6819      	ldreq	r1, [r3, #0]
 800c6ba:	685b      	ldreq	r3, [r3, #4]
 800c6bc:	6063      	str	r3, [r4, #4]
 800c6be:	bf04      	itt	eq
 800c6c0:	1809      	addeq	r1, r1, r0
 800c6c2:	6021      	streq	r1, [r4, #0]
 800c6c4:	6054      	str	r4, [r2, #4]
 800c6c6:	e7ca      	b.n	800c65e <_free_r+0x22>
 800c6c8:	bd38      	pop	{r3, r4, r5, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20000a28 	.word	0x20000a28

0800c6d0 <__sfputc_r>:
 800c6d0:	6893      	ldr	r3, [r2, #8]
 800c6d2:	3b01      	subs	r3, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	b410      	push	{r4}
 800c6d8:	6093      	str	r3, [r2, #8]
 800c6da:	da08      	bge.n	800c6ee <__sfputc_r+0x1e>
 800c6dc:	6994      	ldr	r4, [r2, #24]
 800c6de:	42a3      	cmp	r3, r4
 800c6e0:	db01      	blt.n	800c6e6 <__sfputc_r+0x16>
 800c6e2:	290a      	cmp	r1, #10
 800c6e4:	d103      	bne.n	800c6ee <__sfputc_r+0x1e>
 800c6e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6ea:	f7ff be72 	b.w	800c3d2 <__swbuf_r>
 800c6ee:	6813      	ldr	r3, [r2, #0]
 800c6f0:	1c58      	adds	r0, r3, #1
 800c6f2:	6010      	str	r0, [r2, #0]
 800c6f4:	7019      	strb	r1, [r3, #0]
 800c6f6:	4608      	mov	r0, r1
 800c6f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <__sfputs_r>:
 800c6fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c700:	4606      	mov	r6, r0
 800c702:	460f      	mov	r7, r1
 800c704:	4614      	mov	r4, r2
 800c706:	18d5      	adds	r5, r2, r3
 800c708:	42ac      	cmp	r4, r5
 800c70a:	d101      	bne.n	800c710 <__sfputs_r+0x12>
 800c70c:	2000      	movs	r0, #0
 800c70e:	e007      	b.n	800c720 <__sfputs_r+0x22>
 800c710:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c714:	463a      	mov	r2, r7
 800c716:	4630      	mov	r0, r6
 800c718:	f7ff ffda 	bl	800c6d0 <__sfputc_r>
 800c71c:	1c43      	adds	r3, r0, #1
 800c71e:	d1f3      	bne.n	800c708 <__sfputs_r+0xa>
 800c720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c724 <_vfiprintf_r>:
 800c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	460d      	mov	r5, r1
 800c72a:	b09d      	sub	sp, #116	@ 0x74
 800c72c:	4614      	mov	r4, r2
 800c72e:	4698      	mov	r8, r3
 800c730:	4606      	mov	r6, r0
 800c732:	b118      	cbz	r0, 800c73c <_vfiprintf_r+0x18>
 800c734:	6a03      	ldr	r3, [r0, #32]
 800c736:	b90b      	cbnz	r3, 800c73c <_vfiprintf_r+0x18>
 800c738:	f7ff fc9c 	bl	800c074 <__sinit>
 800c73c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c73e:	07d9      	lsls	r1, r3, #31
 800c740:	d405      	bmi.n	800c74e <_vfiprintf_r+0x2a>
 800c742:	89ab      	ldrh	r3, [r5, #12]
 800c744:	059a      	lsls	r2, r3, #22
 800c746:	d402      	bmi.n	800c74e <_vfiprintf_r+0x2a>
 800c748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c74a:	f7ff ff60 	bl	800c60e <__retarget_lock_acquire_recursive>
 800c74e:	89ab      	ldrh	r3, [r5, #12]
 800c750:	071b      	lsls	r3, r3, #28
 800c752:	d501      	bpl.n	800c758 <_vfiprintf_r+0x34>
 800c754:	692b      	ldr	r3, [r5, #16]
 800c756:	b99b      	cbnz	r3, 800c780 <_vfiprintf_r+0x5c>
 800c758:	4629      	mov	r1, r5
 800c75a:	4630      	mov	r0, r6
 800c75c:	f7ff fe78 	bl	800c450 <__swsetup_r>
 800c760:	b170      	cbz	r0, 800c780 <_vfiprintf_r+0x5c>
 800c762:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c764:	07dc      	lsls	r4, r3, #31
 800c766:	d504      	bpl.n	800c772 <_vfiprintf_r+0x4e>
 800c768:	f04f 30ff 	mov.w	r0, #4294967295
 800c76c:	b01d      	add	sp, #116	@ 0x74
 800c76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c772:	89ab      	ldrh	r3, [r5, #12]
 800c774:	0598      	lsls	r0, r3, #22
 800c776:	d4f7      	bmi.n	800c768 <_vfiprintf_r+0x44>
 800c778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c77a:	f7ff ff49 	bl	800c610 <__retarget_lock_release_recursive>
 800c77e:	e7f3      	b.n	800c768 <_vfiprintf_r+0x44>
 800c780:	2300      	movs	r3, #0
 800c782:	9309      	str	r3, [sp, #36]	@ 0x24
 800c784:	2320      	movs	r3, #32
 800c786:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c78a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c78e:	2330      	movs	r3, #48	@ 0x30
 800c790:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c940 <_vfiprintf_r+0x21c>
 800c794:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c798:	f04f 0901 	mov.w	r9, #1
 800c79c:	4623      	mov	r3, r4
 800c79e:	469a      	mov	sl, r3
 800c7a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7a4:	b10a      	cbz	r2, 800c7aa <_vfiprintf_r+0x86>
 800c7a6:	2a25      	cmp	r2, #37	@ 0x25
 800c7a8:	d1f9      	bne.n	800c79e <_vfiprintf_r+0x7a>
 800c7aa:	ebba 0b04 	subs.w	fp, sl, r4
 800c7ae:	d00b      	beq.n	800c7c8 <_vfiprintf_r+0xa4>
 800c7b0:	465b      	mov	r3, fp
 800c7b2:	4622      	mov	r2, r4
 800c7b4:	4629      	mov	r1, r5
 800c7b6:	4630      	mov	r0, r6
 800c7b8:	f7ff ffa1 	bl	800c6fe <__sfputs_r>
 800c7bc:	3001      	adds	r0, #1
 800c7be:	f000 80a7 	beq.w	800c910 <_vfiprintf_r+0x1ec>
 800c7c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7c4:	445a      	add	r2, fp
 800c7c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	f000 809f 	beq.w	800c910 <_vfiprintf_r+0x1ec>
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7dc:	f10a 0a01 	add.w	sl, sl, #1
 800c7e0:	9304      	str	r3, [sp, #16]
 800c7e2:	9307      	str	r3, [sp, #28]
 800c7e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c7e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c7ea:	4654      	mov	r4, sl
 800c7ec:	2205      	movs	r2, #5
 800c7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7f2:	4853      	ldr	r0, [pc, #332]	@ (800c940 <_vfiprintf_r+0x21c>)
 800c7f4:	f7f3 fcf4 	bl	80001e0 <memchr>
 800c7f8:	9a04      	ldr	r2, [sp, #16]
 800c7fa:	b9d8      	cbnz	r0, 800c834 <_vfiprintf_r+0x110>
 800c7fc:	06d1      	lsls	r1, r2, #27
 800c7fe:	bf44      	itt	mi
 800c800:	2320      	movmi	r3, #32
 800c802:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c806:	0713      	lsls	r3, r2, #28
 800c808:	bf44      	itt	mi
 800c80a:	232b      	movmi	r3, #43	@ 0x2b
 800c80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c810:	f89a 3000 	ldrb.w	r3, [sl]
 800c814:	2b2a      	cmp	r3, #42	@ 0x2a
 800c816:	d015      	beq.n	800c844 <_vfiprintf_r+0x120>
 800c818:	9a07      	ldr	r2, [sp, #28]
 800c81a:	4654      	mov	r4, sl
 800c81c:	2000      	movs	r0, #0
 800c81e:	f04f 0c0a 	mov.w	ip, #10
 800c822:	4621      	mov	r1, r4
 800c824:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c828:	3b30      	subs	r3, #48	@ 0x30
 800c82a:	2b09      	cmp	r3, #9
 800c82c:	d94b      	bls.n	800c8c6 <_vfiprintf_r+0x1a2>
 800c82e:	b1b0      	cbz	r0, 800c85e <_vfiprintf_r+0x13a>
 800c830:	9207      	str	r2, [sp, #28]
 800c832:	e014      	b.n	800c85e <_vfiprintf_r+0x13a>
 800c834:	eba0 0308 	sub.w	r3, r0, r8
 800c838:	fa09 f303 	lsl.w	r3, r9, r3
 800c83c:	4313      	orrs	r3, r2
 800c83e:	9304      	str	r3, [sp, #16]
 800c840:	46a2      	mov	sl, r4
 800c842:	e7d2      	b.n	800c7ea <_vfiprintf_r+0xc6>
 800c844:	9b03      	ldr	r3, [sp, #12]
 800c846:	1d19      	adds	r1, r3, #4
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	9103      	str	r1, [sp, #12]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	bfbb      	ittet	lt
 800c850:	425b      	neglt	r3, r3
 800c852:	f042 0202 	orrlt.w	r2, r2, #2
 800c856:	9307      	strge	r3, [sp, #28]
 800c858:	9307      	strlt	r3, [sp, #28]
 800c85a:	bfb8      	it	lt
 800c85c:	9204      	strlt	r2, [sp, #16]
 800c85e:	7823      	ldrb	r3, [r4, #0]
 800c860:	2b2e      	cmp	r3, #46	@ 0x2e
 800c862:	d10a      	bne.n	800c87a <_vfiprintf_r+0x156>
 800c864:	7863      	ldrb	r3, [r4, #1]
 800c866:	2b2a      	cmp	r3, #42	@ 0x2a
 800c868:	d132      	bne.n	800c8d0 <_vfiprintf_r+0x1ac>
 800c86a:	9b03      	ldr	r3, [sp, #12]
 800c86c:	1d1a      	adds	r2, r3, #4
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	9203      	str	r2, [sp, #12]
 800c872:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c876:	3402      	adds	r4, #2
 800c878:	9305      	str	r3, [sp, #20]
 800c87a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c950 <_vfiprintf_r+0x22c>
 800c87e:	7821      	ldrb	r1, [r4, #0]
 800c880:	2203      	movs	r2, #3
 800c882:	4650      	mov	r0, sl
 800c884:	f7f3 fcac 	bl	80001e0 <memchr>
 800c888:	b138      	cbz	r0, 800c89a <_vfiprintf_r+0x176>
 800c88a:	9b04      	ldr	r3, [sp, #16]
 800c88c:	eba0 000a 	sub.w	r0, r0, sl
 800c890:	2240      	movs	r2, #64	@ 0x40
 800c892:	4082      	lsls	r2, r0
 800c894:	4313      	orrs	r3, r2
 800c896:	3401      	adds	r4, #1
 800c898:	9304      	str	r3, [sp, #16]
 800c89a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c89e:	4829      	ldr	r0, [pc, #164]	@ (800c944 <_vfiprintf_r+0x220>)
 800c8a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c8a4:	2206      	movs	r2, #6
 800c8a6:	f7f3 fc9b 	bl	80001e0 <memchr>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d03f      	beq.n	800c92e <_vfiprintf_r+0x20a>
 800c8ae:	4b26      	ldr	r3, [pc, #152]	@ (800c948 <_vfiprintf_r+0x224>)
 800c8b0:	bb1b      	cbnz	r3, 800c8fa <_vfiprintf_r+0x1d6>
 800c8b2:	9b03      	ldr	r3, [sp, #12]
 800c8b4:	3307      	adds	r3, #7
 800c8b6:	f023 0307 	bic.w	r3, r3, #7
 800c8ba:	3308      	adds	r3, #8
 800c8bc:	9303      	str	r3, [sp, #12]
 800c8be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8c0:	443b      	add	r3, r7
 800c8c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8c4:	e76a      	b.n	800c79c <_vfiprintf_r+0x78>
 800c8c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8ca:	460c      	mov	r4, r1
 800c8cc:	2001      	movs	r0, #1
 800c8ce:	e7a8      	b.n	800c822 <_vfiprintf_r+0xfe>
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	3401      	adds	r4, #1
 800c8d4:	9305      	str	r3, [sp, #20]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	f04f 0c0a 	mov.w	ip, #10
 800c8dc:	4620      	mov	r0, r4
 800c8de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8e2:	3a30      	subs	r2, #48	@ 0x30
 800c8e4:	2a09      	cmp	r2, #9
 800c8e6:	d903      	bls.n	800c8f0 <_vfiprintf_r+0x1cc>
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d0c6      	beq.n	800c87a <_vfiprintf_r+0x156>
 800c8ec:	9105      	str	r1, [sp, #20]
 800c8ee:	e7c4      	b.n	800c87a <_vfiprintf_r+0x156>
 800c8f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e7f0      	b.n	800c8dc <_vfiprintf_r+0x1b8>
 800c8fa:	ab03      	add	r3, sp, #12
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	462a      	mov	r2, r5
 800c900:	4b12      	ldr	r3, [pc, #72]	@ (800c94c <_vfiprintf_r+0x228>)
 800c902:	a904      	add	r1, sp, #16
 800c904:	4630      	mov	r0, r6
 800c906:	f3af 8000 	nop.w
 800c90a:	4607      	mov	r7, r0
 800c90c:	1c78      	adds	r0, r7, #1
 800c90e:	d1d6      	bne.n	800c8be <_vfiprintf_r+0x19a>
 800c910:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c912:	07d9      	lsls	r1, r3, #31
 800c914:	d405      	bmi.n	800c922 <_vfiprintf_r+0x1fe>
 800c916:	89ab      	ldrh	r3, [r5, #12]
 800c918:	059a      	lsls	r2, r3, #22
 800c91a:	d402      	bmi.n	800c922 <_vfiprintf_r+0x1fe>
 800c91c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c91e:	f7ff fe77 	bl	800c610 <__retarget_lock_release_recursive>
 800c922:	89ab      	ldrh	r3, [r5, #12]
 800c924:	065b      	lsls	r3, r3, #25
 800c926:	f53f af1f 	bmi.w	800c768 <_vfiprintf_r+0x44>
 800c92a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c92c:	e71e      	b.n	800c76c <_vfiprintf_r+0x48>
 800c92e:	ab03      	add	r3, sp, #12
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	462a      	mov	r2, r5
 800c934:	4b05      	ldr	r3, [pc, #20]	@ (800c94c <_vfiprintf_r+0x228>)
 800c936:	a904      	add	r1, sp, #16
 800c938:	4630      	mov	r0, r6
 800c93a:	f000 f879 	bl	800ca30 <_printf_i>
 800c93e:	e7e4      	b.n	800c90a <_vfiprintf_r+0x1e6>
 800c940:	0800d3a8 	.word	0x0800d3a8
 800c944:	0800d3b2 	.word	0x0800d3b2
 800c948:	00000000 	.word	0x00000000
 800c94c:	0800c6ff 	.word	0x0800c6ff
 800c950:	0800d3ae 	.word	0x0800d3ae

0800c954 <_printf_common>:
 800c954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c958:	4616      	mov	r6, r2
 800c95a:	4698      	mov	r8, r3
 800c95c:	688a      	ldr	r2, [r1, #8]
 800c95e:	690b      	ldr	r3, [r1, #16]
 800c960:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c964:	4293      	cmp	r3, r2
 800c966:	bfb8      	it	lt
 800c968:	4613      	movlt	r3, r2
 800c96a:	6033      	str	r3, [r6, #0]
 800c96c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c970:	4607      	mov	r7, r0
 800c972:	460c      	mov	r4, r1
 800c974:	b10a      	cbz	r2, 800c97a <_printf_common+0x26>
 800c976:	3301      	adds	r3, #1
 800c978:	6033      	str	r3, [r6, #0]
 800c97a:	6823      	ldr	r3, [r4, #0]
 800c97c:	0699      	lsls	r1, r3, #26
 800c97e:	bf42      	ittt	mi
 800c980:	6833      	ldrmi	r3, [r6, #0]
 800c982:	3302      	addmi	r3, #2
 800c984:	6033      	strmi	r3, [r6, #0]
 800c986:	6825      	ldr	r5, [r4, #0]
 800c988:	f015 0506 	ands.w	r5, r5, #6
 800c98c:	d106      	bne.n	800c99c <_printf_common+0x48>
 800c98e:	f104 0a19 	add.w	sl, r4, #25
 800c992:	68e3      	ldr	r3, [r4, #12]
 800c994:	6832      	ldr	r2, [r6, #0]
 800c996:	1a9b      	subs	r3, r3, r2
 800c998:	42ab      	cmp	r3, r5
 800c99a:	dc26      	bgt.n	800c9ea <_printf_common+0x96>
 800c99c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c9a0:	6822      	ldr	r2, [r4, #0]
 800c9a2:	3b00      	subs	r3, #0
 800c9a4:	bf18      	it	ne
 800c9a6:	2301      	movne	r3, #1
 800c9a8:	0692      	lsls	r2, r2, #26
 800c9aa:	d42b      	bmi.n	800ca04 <_printf_common+0xb0>
 800c9ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c9b0:	4641      	mov	r1, r8
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	47c8      	blx	r9
 800c9b6:	3001      	adds	r0, #1
 800c9b8:	d01e      	beq.n	800c9f8 <_printf_common+0xa4>
 800c9ba:	6823      	ldr	r3, [r4, #0]
 800c9bc:	6922      	ldr	r2, [r4, #16]
 800c9be:	f003 0306 	and.w	r3, r3, #6
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	bf02      	ittt	eq
 800c9c6:	68e5      	ldreq	r5, [r4, #12]
 800c9c8:	6833      	ldreq	r3, [r6, #0]
 800c9ca:	1aed      	subeq	r5, r5, r3
 800c9cc:	68a3      	ldr	r3, [r4, #8]
 800c9ce:	bf0c      	ite	eq
 800c9d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9d4:	2500      	movne	r5, #0
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	bfc4      	itt	gt
 800c9da:	1a9b      	subgt	r3, r3, r2
 800c9dc:	18ed      	addgt	r5, r5, r3
 800c9de:	2600      	movs	r6, #0
 800c9e0:	341a      	adds	r4, #26
 800c9e2:	42b5      	cmp	r5, r6
 800c9e4:	d11a      	bne.n	800ca1c <_printf_common+0xc8>
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	e008      	b.n	800c9fc <_printf_common+0xa8>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	4652      	mov	r2, sl
 800c9ee:	4641      	mov	r1, r8
 800c9f0:	4638      	mov	r0, r7
 800c9f2:	47c8      	blx	r9
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	d103      	bne.n	800ca00 <_printf_common+0xac>
 800c9f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca00:	3501      	adds	r5, #1
 800ca02:	e7c6      	b.n	800c992 <_printf_common+0x3e>
 800ca04:	18e1      	adds	r1, r4, r3
 800ca06:	1c5a      	adds	r2, r3, #1
 800ca08:	2030      	movs	r0, #48	@ 0x30
 800ca0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca0e:	4422      	add	r2, r4
 800ca10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca18:	3302      	adds	r3, #2
 800ca1a:	e7c7      	b.n	800c9ac <_printf_common+0x58>
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	4622      	mov	r2, r4
 800ca20:	4641      	mov	r1, r8
 800ca22:	4638      	mov	r0, r7
 800ca24:	47c8      	blx	r9
 800ca26:	3001      	adds	r0, #1
 800ca28:	d0e6      	beq.n	800c9f8 <_printf_common+0xa4>
 800ca2a:	3601      	adds	r6, #1
 800ca2c:	e7d9      	b.n	800c9e2 <_printf_common+0x8e>
	...

0800ca30 <_printf_i>:
 800ca30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca34:	7e0f      	ldrb	r7, [r1, #24]
 800ca36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca38:	2f78      	cmp	r7, #120	@ 0x78
 800ca3a:	4691      	mov	r9, r2
 800ca3c:	4680      	mov	r8, r0
 800ca3e:	460c      	mov	r4, r1
 800ca40:	469a      	mov	sl, r3
 800ca42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca46:	d807      	bhi.n	800ca58 <_printf_i+0x28>
 800ca48:	2f62      	cmp	r7, #98	@ 0x62
 800ca4a:	d80a      	bhi.n	800ca62 <_printf_i+0x32>
 800ca4c:	2f00      	cmp	r7, #0
 800ca4e:	f000 80d1 	beq.w	800cbf4 <_printf_i+0x1c4>
 800ca52:	2f58      	cmp	r7, #88	@ 0x58
 800ca54:	f000 80b8 	beq.w	800cbc8 <_printf_i+0x198>
 800ca58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca60:	e03a      	b.n	800cad8 <_printf_i+0xa8>
 800ca62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca66:	2b15      	cmp	r3, #21
 800ca68:	d8f6      	bhi.n	800ca58 <_printf_i+0x28>
 800ca6a:	a101      	add	r1, pc, #4	@ (adr r1, 800ca70 <_printf_i+0x40>)
 800ca6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca70:	0800cac9 	.word	0x0800cac9
 800ca74:	0800cadd 	.word	0x0800cadd
 800ca78:	0800ca59 	.word	0x0800ca59
 800ca7c:	0800ca59 	.word	0x0800ca59
 800ca80:	0800ca59 	.word	0x0800ca59
 800ca84:	0800ca59 	.word	0x0800ca59
 800ca88:	0800cadd 	.word	0x0800cadd
 800ca8c:	0800ca59 	.word	0x0800ca59
 800ca90:	0800ca59 	.word	0x0800ca59
 800ca94:	0800ca59 	.word	0x0800ca59
 800ca98:	0800ca59 	.word	0x0800ca59
 800ca9c:	0800cbdb 	.word	0x0800cbdb
 800caa0:	0800cb07 	.word	0x0800cb07
 800caa4:	0800cb95 	.word	0x0800cb95
 800caa8:	0800ca59 	.word	0x0800ca59
 800caac:	0800ca59 	.word	0x0800ca59
 800cab0:	0800cbfd 	.word	0x0800cbfd
 800cab4:	0800ca59 	.word	0x0800ca59
 800cab8:	0800cb07 	.word	0x0800cb07
 800cabc:	0800ca59 	.word	0x0800ca59
 800cac0:	0800ca59 	.word	0x0800ca59
 800cac4:	0800cb9d 	.word	0x0800cb9d
 800cac8:	6833      	ldr	r3, [r6, #0]
 800caca:	1d1a      	adds	r2, r3, #4
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6032      	str	r2, [r6, #0]
 800cad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cad4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cad8:	2301      	movs	r3, #1
 800cada:	e09c      	b.n	800cc16 <_printf_i+0x1e6>
 800cadc:	6833      	ldr	r3, [r6, #0]
 800cade:	6820      	ldr	r0, [r4, #0]
 800cae0:	1d19      	adds	r1, r3, #4
 800cae2:	6031      	str	r1, [r6, #0]
 800cae4:	0606      	lsls	r6, r0, #24
 800cae6:	d501      	bpl.n	800caec <_printf_i+0xbc>
 800cae8:	681d      	ldr	r5, [r3, #0]
 800caea:	e003      	b.n	800caf4 <_printf_i+0xc4>
 800caec:	0645      	lsls	r5, r0, #25
 800caee:	d5fb      	bpl.n	800cae8 <_printf_i+0xb8>
 800caf0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800caf4:	2d00      	cmp	r5, #0
 800caf6:	da03      	bge.n	800cb00 <_printf_i+0xd0>
 800caf8:	232d      	movs	r3, #45	@ 0x2d
 800cafa:	426d      	negs	r5, r5
 800cafc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb00:	4858      	ldr	r0, [pc, #352]	@ (800cc64 <_printf_i+0x234>)
 800cb02:	230a      	movs	r3, #10
 800cb04:	e011      	b.n	800cb2a <_printf_i+0xfa>
 800cb06:	6821      	ldr	r1, [r4, #0]
 800cb08:	6833      	ldr	r3, [r6, #0]
 800cb0a:	0608      	lsls	r0, r1, #24
 800cb0c:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb10:	d402      	bmi.n	800cb18 <_printf_i+0xe8>
 800cb12:	0649      	lsls	r1, r1, #25
 800cb14:	bf48      	it	mi
 800cb16:	b2ad      	uxthmi	r5, r5
 800cb18:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb1a:	4852      	ldr	r0, [pc, #328]	@ (800cc64 <_printf_i+0x234>)
 800cb1c:	6033      	str	r3, [r6, #0]
 800cb1e:	bf14      	ite	ne
 800cb20:	230a      	movne	r3, #10
 800cb22:	2308      	moveq	r3, #8
 800cb24:	2100      	movs	r1, #0
 800cb26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb2a:	6866      	ldr	r6, [r4, #4]
 800cb2c:	60a6      	str	r6, [r4, #8]
 800cb2e:	2e00      	cmp	r6, #0
 800cb30:	db05      	blt.n	800cb3e <_printf_i+0x10e>
 800cb32:	6821      	ldr	r1, [r4, #0]
 800cb34:	432e      	orrs	r6, r5
 800cb36:	f021 0104 	bic.w	r1, r1, #4
 800cb3a:	6021      	str	r1, [r4, #0]
 800cb3c:	d04b      	beq.n	800cbd6 <_printf_i+0x1a6>
 800cb3e:	4616      	mov	r6, r2
 800cb40:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb44:	fb03 5711 	mls	r7, r3, r1, r5
 800cb48:	5dc7      	ldrb	r7, [r0, r7]
 800cb4a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb4e:	462f      	mov	r7, r5
 800cb50:	42bb      	cmp	r3, r7
 800cb52:	460d      	mov	r5, r1
 800cb54:	d9f4      	bls.n	800cb40 <_printf_i+0x110>
 800cb56:	2b08      	cmp	r3, #8
 800cb58:	d10b      	bne.n	800cb72 <_printf_i+0x142>
 800cb5a:	6823      	ldr	r3, [r4, #0]
 800cb5c:	07df      	lsls	r7, r3, #31
 800cb5e:	d508      	bpl.n	800cb72 <_printf_i+0x142>
 800cb60:	6923      	ldr	r3, [r4, #16]
 800cb62:	6861      	ldr	r1, [r4, #4]
 800cb64:	4299      	cmp	r1, r3
 800cb66:	bfde      	ittt	le
 800cb68:	2330      	movle	r3, #48	@ 0x30
 800cb6a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb6e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb72:	1b92      	subs	r2, r2, r6
 800cb74:	6122      	str	r2, [r4, #16]
 800cb76:	f8cd a000 	str.w	sl, [sp]
 800cb7a:	464b      	mov	r3, r9
 800cb7c:	aa03      	add	r2, sp, #12
 800cb7e:	4621      	mov	r1, r4
 800cb80:	4640      	mov	r0, r8
 800cb82:	f7ff fee7 	bl	800c954 <_printf_common>
 800cb86:	3001      	adds	r0, #1
 800cb88:	d14a      	bne.n	800cc20 <_printf_i+0x1f0>
 800cb8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8e:	b004      	add	sp, #16
 800cb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	f043 0320 	orr.w	r3, r3, #32
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	4832      	ldr	r0, [pc, #200]	@ (800cc68 <_printf_i+0x238>)
 800cb9e:	2778      	movs	r7, #120	@ 0x78
 800cba0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cba4:	6823      	ldr	r3, [r4, #0]
 800cba6:	6831      	ldr	r1, [r6, #0]
 800cba8:	061f      	lsls	r7, r3, #24
 800cbaa:	f851 5b04 	ldr.w	r5, [r1], #4
 800cbae:	d402      	bmi.n	800cbb6 <_printf_i+0x186>
 800cbb0:	065f      	lsls	r7, r3, #25
 800cbb2:	bf48      	it	mi
 800cbb4:	b2ad      	uxthmi	r5, r5
 800cbb6:	6031      	str	r1, [r6, #0]
 800cbb8:	07d9      	lsls	r1, r3, #31
 800cbba:	bf44      	itt	mi
 800cbbc:	f043 0320 	orrmi.w	r3, r3, #32
 800cbc0:	6023      	strmi	r3, [r4, #0]
 800cbc2:	b11d      	cbz	r5, 800cbcc <_printf_i+0x19c>
 800cbc4:	2310      	movs	r3, #16
 800cbc6:	e7ad      	b.n	800cb24 <_printf_i+0xf4>
 800cbc8:	4826      	ldr	r0, [pc, #152]	@ (800cc64 <_printf_i+0x234>)
 800cbca:	e7e9      	b.n	800cba0 <_printf_i+0x170>
 800cbcc:	6823      	ldr	r3, [r4, #0]
 800cbce:	f023 0320 	bic.w	r3, r3, #32
 800cbd2:	6023      	str	r3, [r4, #0]
 800cbd4:	e7f6      	b.n	800cbc4 <_printf_i+0x194>
 800cbd6:	4616      	mov	r6, r2
 800cbd8:	e7bd      	b.n	800cb56 <_printf_i+0x126>
 800cbda:	6833      	ldr	r3, [r6, #0]
 800cbdc:	6825      	ldr	r5, [r4, #0]
 800cbde:	6961      	ldr	r1, [r4, #20]
 800cbe0:	1d18      	adds	r0, r3, #4
 800cbe2:	6030      	str	r0, [r6, #0]
 800cbe4:	062e      	lsls	r6, r5, #24
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	d501      	bpl.n	800cbee <_printf_i+0x1be>
 800cbea:	6019      	str	r1, [r3, #0]
 800cbec:	e002      	b.n	800cbf4 <_printf_i+0x1c4>
 800cbee:	0668      	lsls	r0, r5, #25
 800cbf0:	d5fb      	bpl.n	800cbea <_printf_i+0x1ba>
 800cbf2:	8019      	strh	r1, [r3, #0]
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	6123      	str	r3, [r4, #16]
 800cbf8:	4616      	mov	r6, r2
 800cbfa:	e7bc      	b.n	800cb76 <_printf_i+0x146>
 800cbfc:	6833      	ldr	r3, [r6, #0]
 800cbfe:	1d1a      	adds	r2, r3, #4
 800cc00:	6032      	str	r2, [r6, #0]
 800cc02:	681e      	ldr	r6, [r3, #0]
 800cc04:	6862      	ldr	r2, [r4, #4]
 800cc06:	2100      	movs	r1, #0
 800cc08:	4630      	mov	r0, r6
 800cc0a:	f7f3 fae9 	bl	80001e0 <memchr>
 800cc0e:	b108      	cbz	r0, 800cc14 <_printf_i+0x1e4>
 800cc10:	1b80      	subs	r0, r0, r6
 800cc12:	6060      	str	r0, [r4, #4]
 800cc14:	6863      	ldr	r3, [r4, #4]
 800cc16:	6123      	str	r3, [r4, #16]
 800cc18:	2300      	movs	r3, #0
 800cc1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc1e:	e7aa      	b.n	800cb76 <_printf_i+0x146>
 800cc20:	6923      	ldr	r3, [r4, #16]
 800cc22:	4632      	mov	r2, r6
 800cc24:	4649      	mov	r1, r9
 800cc26:	4640      	mov	r0, r8
 800cc28:	47d0      	blx	sl
 800cc2a:	3001      	adds	r0, #1
 800cc2c:	d0ad      	beq.n	800cb8a <_printf_i+0x15a>
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	079b      	lsls	r3, r3, #30
 800cc32:	d413      	bmi.n	800cc5c <_printf_i+0x22c>
 800cc34:	68e0      	ldr	r0, [r4, #12]
 800cc36:	9b03      	ldr	r3, [sp, #12]
 800cc38:	4298      	cmp	r0, r3
 800cc3a:	bfb8      	it	lt
 800cc3c:	4618      	movlt	r0, r3
 800cc3e:	e7a6      	b.n	800cb8e <_printf_i+0x15e>
 800cc40:	2301      	movs	r3, #1
 800cc42:	4632      	mov	r2, r6
 800cc44:	4649      	mov	r1, r9
 800cc46:	4640      	mov	r0, r8
 800cc48:	47d0      	blx	sl
 800cc4a:	3001      	adds	r0, #1
 800cc4c:	d09d      	beq.n	800cb8a <_printf_i+0x15a>
 800cc4e:	3501      	adds	r5, #1
 800cc50:	68e3      	ldr	r3, [r4, #12]
 800cc52:	9903      	ldr	r1, [sp, #12]
 800cc54:	1a5b      	subs	r3, r3, r1
 800cc56:	42ab      	cmp	r3, r5
 800cc58:	dcf2      	bgt.n	800cc40 <_printf_i+0x210>
 800cc5a:	e7eb      	b.n	800cc34 <_printf_i+0x204>
 800cc5c:	2500      	movs	r5, #0
 800cc5e:	f104 0619 	add.w	r6, r4, #25
 800cc62:	e7f5      	b.n	800cc50 <_printf_i+0x220>
 800cc64:	0800d3b9 	.word	0x0800d3b9
 800cc68:	0800d3ca 	.word	0x0800d3ca

0800cc6c <__sflush_r>:
 800cc6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc74:	0716      	lsls	r6, r2, #28
 800cc76:	4605      	mov	r5, r0
 800cc78:	460c      	mov	r4, r1
 800cc7a:	d454      	bmi.n	800cd26 <__sflush_r+0xba>
 800cc7c:	684b      	ldr	r3, [r1, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	dc02      	bgt.n	800cc88 <__sflush_r+0x1c>
 800cc82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	dd48      	ble.n	800cd1a <__sflush_r+0xae>
 800cc88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc8a:	2e00      	cmp	r6, #0
 800cc8c:	d045      	beq.n	800cd1a <__sflush_r+0xae>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cc94:	682f      	ldr	r7, [r5, #0]
 800cc96:	6a21      	ldr	r1, [r4, #32]
 800cc98:	602b      	str	r3, [r5, #0]
 800cc9a:	d030      	beq.n	800ccfe <__sflush_r+0x92>
 800cc9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	0759      	lsls	r1, r3, #29
 800cca2:	d505      	bpl.n	800ccb0 <__sflush_r+0x44>
 800cca4:	6863      	ldr	r3, [r4, #4]
 800cca6:	1ad2      	subs	r2, r2, r3
 800cca8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ccaa:	b10b      	cbz	r3, 800ccb0 <__sflush_r+0x44>
 800ccac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ccae:	1ad2      	subs	r2, r2, r3
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ccb4:	6a21      	ldr	r1, [r4, #32]
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	47b0      	blx	r6
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	89a3      	ldrh	r3, [r4, #12]
 800ccbe:	d106      	bne.n	800ccce <__sflush_r+0x62>
 800ccc0:	6829      	ldr	r1, [r5, #0]
 800ccc2:	291d      	cmp	r1, #29
 800ccc4:	d82b      	bhi.n	800cd1e <__sflush_r+0xb2>
 800ccc6:	4a2a      	ldr	r2, [pc, #168]	@ (800cd70 <__sflush_r+0x104>)
 800ccc8:	40ca      	lsrs	r2, r1
 800ccca:	07d6      	lsls	r6, r2, #31
 800cccc:	d527      	bpl.n	800cd1e <__sflush_r+0xb2>
 800ccce:	2200      	movs	r2, #0
 800ccd0:	6062      	str	r2, [r4, #4]
 800ccd2:	04d9      	lsls	r1, r3, #19
 800ccd4:	6922      	ldr	r2, [r4, #16]
 800ccd6:	6022      	str	r2, [r4, #0]
 800ccd8:	d504      	bpl.n	800cce4 <__sflush_r+0x78>
 800ccda:	1c42      	adds	r2, r0, #1
 800ccdc:	d101      	bne.n	800cce2 <__sflush_r+0x76>
 800ccde:	682b      	ldr	r3, [r5, #0]
 800cce0:	b903      	cbnz	r3, 800cce4 <__sflush_r+0x78>
 800cce2:	6560      	str	r0, [r4, #84]	@ 0x54
 800cce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cce6:	602f      	str	r7, [r5, #0]
 800cce8:	b1b9      	cbz	r1, 800cd1a <__sflush_r+0xae>
 800ccea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ccee:	4299      	cmp	r1, r3
 800ccf0:	d002      	beq.n	800ccf8 <__sflush_r+0x8c>
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	f7ff fca2 	bl	800c63c <_free_r>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	6363      	str	r3, [r4, #52]	@ 0x34
 800ccfc:	e00d      	b.n	800cd1a <__sflush_r+0xae>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	4628      	mov	r0, r5
 800cd02:	47b0      	blx	r6
 800cd04:	4602      	mov	r2, r0
 800cd06:	1c50      	adds	r0, r2, #1
 800cd08:	d1c9      	bne.n	800cc9e <__sflush_r+0x32>
 800cd0a:	682b      	ldr	r3, [r5, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d0c6      	beq.n	800cc9e <__sflush_r+0x32>
 800cd10:	2b1d      	cmp	r3, #29
 800cd12:	d001      	beq.n	800cd18 <__sflush_r+0xac>
 800cd14:	2b16      	cmp	r3, #22
 800cd16:	d11e      	bne.n	800cd56 <__sflush_r+0xea>
 800cd18:	602f      	str	r7, [r5, #0]
 800cd1a:	2000      	movs	r0, #0
 800cd1c:	e022      	b.n	800cd64 <__sflush_r+0xf8>
 800cd1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd22:	b21b      	sxth	r3, r3
 800cd24:	e01b      	b.n	800cd5e <__sflush_r+0xf2>
 800cd26:	690f      	ldr	r7, [r1, #16]
 800cd28:	2f00      	cmp	r7, #0
 800cd2a:	d0f6      	beq.n	800cd1a <__sflush_r+0xae>
 800cd2c:	0793      	lsls	r3, r2, #30
 800cd2e:	680e      	ldr	r6, [r1, #0]
 800cd30:	bf08      	it	eq
 800cd32:	694b      	ldreq	r3, [r1, #20]
 800cd34:	600f      	str	r7, [r1, #0]
 800cd36:	bf18      	it	ne
 800cd38:	2300      	movne	r3, #0
 800cd3a:	eba6 0807 	sub.w	r8, r6, r7
 800cd3e:	608b      	str	r3, [r1, #8]
 800cd40:	f1b8 0f00 	cmp.w	r8, #0
 800cd44:	dde9      	ble.n	800cd1a <__sflush_r+0xae>
 800cd46:	6a21      	ldr	r1, [r4, #32]
 800cd48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cd4a:	4643      	mov	r3, r8
 800cd4c:	463a      	mov	r2, r7
 800cd4e:	4628      	mov	r0, r5
 800cd50:	47b0      	blx	r6
 800cd52:	2800      	cmp	r0, #0
 800cd54:	dc08      	bgt.n	800cd68 <__sflush_r+0xfc>
 800cd56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd5e:	81a3      	strh	r3, [r4, #12]
 800cd60:	f04f 30ff 	mov.w	r0, #4294967295
 800cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd68:	4407      	add	r7, r0
 800cd6a:	eba8 0800 	sub.w	r8, r8, r0
 800cd6e:	e7e7      	b.n	800cd40 <__sflush_r+0xd4>
 800cd70:	20400001 	.word	0x20400001

0800cd74 <_fflush_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	690b      	ldr	r3, [r1, #16]
 800cd78:	4605      	mov	r5, r0
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	b913      	cbnz	r3, 800cd84 <_fflush_r+0x10>
 800cd7e:	2500      	movs	r5, #0
 800cd80:	4628      	mov	r0, r5
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	b118      	cbz	r0, 800cd8e <_fflush_r+0x1a>
 800cd86:	6a03      	ldr	r3, [r0, #32]
 800cd88:	b90b      	cbnz	r3, 800cd8e <_fflush_r+0x1a>
 800cd8a:	f7ff f973 	bl	800c074 <__sinit>
 800cd8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d0f3      	beq.n	800cd7e <_fflush_r+0xa>
 800cd96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cd98:	07d0      	lsls	r0, r2, #31
 800cd9a:	d404      	bmi.n	800cda6 <_fflush_r+0x32>
 800cd9c:	0599      	lsls	r1, r3, #22
 800cd9e:	d402      	bmi.n	800cda6 <_fflush_r+0x32>
 800cda0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cda2:	f7ff fc34 	bl	800c60e <__retarget_lock_acquire_recursive>
 800cda6:	4628      	mov	r0, r5
 800cda8:	4621      	mov	r1, r4
 800cdaa:	f7ff ff5f 	bl	800cc6c <__sflush_r>
 800cdae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cdb0:	07da      	lsls	r2, r3, #31
 800cdb2:	4605      	mov	r5, r0
 800cdb4:	d4e4      	bmi.n	800cd80 <_fflush_r+0xc>
 800cdb6:	89a3      	ldrh	r3, [r4, #12]
 800cdb8:	059b      	lsls	r3, r3, #22
 800cdba:	d4e1      	bmi.n	800cd80 <_fflush_r+0xc>
 800cdbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cdbe:	f7ff fc27 	bl	800c610 <__retarget_lock_release_recursive>
 800cdc2:	e7dd      	b.n	800cd80 <_fflush_r+0xc>

0800cdc4 <__swhatbuf_r>:
 800cdc4:	b570      	push	{r4, r5, r6, lr}
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdcc:	2900      	cmp	r1, #0
 800cdce:	b096      	sub	sp, #88	@ 0x58
 800cdd0:	4615      	mov	r5, r2
 800cdd2:	461e      	mov	r6, r3
 800cdd4:	da0d      	bge.n	800cdf2 <__swhatbuf_r+0x2e>
 800cdd6:	89a3      	ldrh	r3, [r4, #12]
 800cdd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cddc:	f04f 0100 	mov.w	r1, #0
 800cde0:	bf14      	ite	ne
 800cde2:	2340      	movne	r3, #64	@ 0x40
 800cde4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cde8:	2000      	movs	r0, #0
 800cdea:	6031      	str	r1, [r6, #0]
 800cdec:	602b      	str	r3, [r5, #0]
 800cdee:	b016      	add	sp, #88	@ 0x58
 800cdf0:	bd70      	pop	{r4, r5, r6, pc}
 800cdf2:	466a      	mov	r2, sp
 800cdf4:	f000 f878 	bl	800cee8 <_fstat_r>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	dbec      	blt.n	800cdd6 <__swhatbuf_r+0x12>
 800cdfc:	9901      	ldr	r1, [sp, #4]
 800cdfe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce06:	4259      	negs	r1, r3
 800ce08:	4159      	adcs	r1, r3
 800ce0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce0e:	e7eb      	b.n	800cde8 <__swhatbuf_r+0x24>

0800ce10 <__smakebuf_r>:
 800ce10:	898b      	ldrh	r3, [r1, #12]
 800ce12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce14:	079d      	lsls	r5, r3, #30
 800ce16:	4606      	mov	r6, r0
 800ce18:	460c      	mov	r4, r1
 800ce1a:	d507      	bpl.n	800ce2c <__smakebuf_r+0x1c>
 800ce1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce20:	6023      	str	r3, [r4, #0]
 800ce22:	6123      	str	r3, [r4, #16]
 800ce24:	2301      	movs	r3, #1
 800ce26:	6163      	str	r3, [r4, #20]
 800ce28:	b003      	add	sp, #12
 800ce2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce2c:	ab01      	add	r3, sp, #4
 800ce2e:	466a      	mov	r2, sp
 800ce30:	f7ff ffc8 	bl	800cdc4 <__swhatbuf_r>
 800ce34:	9f00      	ldr	r7, [sp, #0]
 800ce36:	4605      	mov	r5, r0
 800ce38:	4639      	mov	r1, r7
 800ce3a:	4630      	mov	r0, r6
 800ce3c:	f7ff f802 	bl	800be44 <_malloc_r>
 800ce40:	b948      	cbnz	r0, 800ce56 <__smakebuf_r+0x46>
 800ce42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce46:	059a      	lsls	r2, r3, #22
 800ce48:	d4ee      	bmi.n	800ce28 <__smakebuf_r+0x18>
 800ce4a:	f023 0303 	bic.w	r3, r3, #3
 800ce4e:	f043 0302 	orr.w	r3, r3, #2
 800ce52:	81a3      	strh	r3, [r4, #12]
 800ce54:	e7e2      	b.n	800ce1c <__smakebuf_r+0xc>
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	6020      	str	r0, [r4, #0]
 800ce5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce5e:	81a3      	strh	r3, [r4, #12]
 800ce60:	9b01      	ldr	r3, [sp, #4]
 800ce62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce66:	b15b      	cbz	r3, 800ce80 <__smakebuf_r+0x70>
 800ce68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f000 f84d 	bl	800cf0c <_isatty_r>
 800ce72:	b128      	cbz	r0, 800ce80 <__smakebuf_r+0x70>
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	f023 0303 	bic.w	r3, r3, #3
 800ce7a:	f043 0301 	orr.w	r3, r3, #1
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	431d      	orrs	r5, r3
 800ce84:	81a5      	strh	r5, [r4, #12]
 800ce86:	e7cf      	b.n	800ce28 <__smakebuf_r+0x18>

0800ce88 <_raise_r>:
 800ce88:	291f      	cmp	r1, #31
 800ce8a:	b538      	push	{r3, r4, r5, lr}
 800ce8c:	4605      	mov	r5, r0
 800ce8e:	460c      	mov	r4, r1
 800ce90:	d904      	bls.n	800ce9c <_raise_r+0x14>
 800ce92:	2316      	movs	r3, #22
 800ce94:	6003      	str	r3, [r0, #0]
 800ce96:	f04f 30ff 	mov.w	r0, #4294967295
 800ce9a:	bd38      	pop	{r3, r4, r5, pc}
 800ce9c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce9e:	b112      	cbz	r2, 800cea6 <_raise_r+0x1e>
 800cea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cea4:	b94b      	cbnz	r3, 800ceba <_raise_r+0x32>
 800cea6:	4628      	mov	r0, r5
 800cea8:	f000 f852 	bl	800cf50 <_getpid_r>
 800ceac:	4622      	mov	r2, r4
 800ceae:	4601      	mov	r1, r0
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceb6:	f000 b839 	b.w	800cf2c <_kill_r>
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d00a      	beq.n	800ced4 <_raise_r+0x4c>
 800cebe:	1c59      	adds	r1, r3, #1
 800cec0:	d103      	bne.n	800ceca <_raise_r+0x42>
 800cec2:	2316      	movs	r3, #22
 800cec4:	6003      	str	r3, [r0, #0]
 800cec6:	2001      	movs	r0, #1
 800cec8:	e7e7      	b.n	800ce9a <_raise_r+0x12>
 800ceca:	2100      	movs	r1, #0
 800cecc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ced0:	4620      	mov	r0, r4
 800ced2:	4798      	blx	r3
 800ced4:	2000      	movs	r0, #0
 800ced6:	e7e0      	b.n	800ce9a <_raise_r+0x12>

0800ced8 <raise>:
 800ced8:	4b02      	ldr	r3, [pc, #8]	@ (800cee4 <raise+0xc>)
 800ceda:	4601      	mov	r1, r0
 800cedc:	6818      	ldr	r0, [r3, #0]
 800cede:	f7ff bfd3 	b.w	800ce88 <_raise_r>
 800cee2:	bf00      	nop
 800cee4:	200000a8 	.word	0x200000a8

0800cee8 <_fstat_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	4d07      	ldr	r5, [pc, #28]	@ (800cf08 <_fstat_r+0x20>)
 800ceec:	2300      	movs	r3, #0
 800ceee:	4604      	mov	r4, r0
 800cef0:	4608      	mov	r0, r1
 800cef2:	4611      	mov	r1, r2
 800cef4:	602b      	str	r3, [r5, #0]
 800cef6:	f7f6 fc5f 	bl	80037b8 <_fstat>
 800cefa:	1c43      	adds	r3, r0, #1
 800cefc:	d102      	bne.n	800cf04 <_fstat_r+0x1c>
 800cefe:	682b      	ldr	r3, [r5, #0]
 800cf00:	b103      	cbz	r3, 800cf04 <_fstat_r+0x1c>
 800cf02:	6023      	str	r3, [r4, #0]
 800cf04:	bd38      	pop	{r3, r4, r5, pc}
 800cf06:	bf00      	nop
 800cf08:	20000b68 	.word	0x20000b68

0800cf0c <_isatty_r>:
 800cf0c:	b538      	push	{r3, r4, r5, lr}
 800cf0e:	4d06      	ldr	r5, [pc, #24]	@ (800cf28 <_isatty_r+0x1c>)
 800cf10:	2300      	movs	r3, #0
 800cf12:	4604      	mov	r4, r0
 800cf14:	4608      	mov	r0, r1
 800cf16:	602b      	str	r3, [r5, #0]
 800cf18:	f7f6 fc5e 	bl	80037d8 <_isatty>
 800cf1c:	1c43      	adds	r3, r0, #1
 800cf1e:	d102      	bne.n	800cf26 <_isatty_r+0x1a>
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	b103      	cbz	r3, 800cf26 <_isatty_r+0x1a>
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	bd38      	pop	{r3, r4, r5, pc}
 800cf28:	20000b68 	.word	0x20000b68

0800cf2c <_kill_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d07      	ldr	r5, [pc, #28]	@ (800cf4c <_kill_r+0x20>)
 800cf30:	2300      	movs	r3, #0
 800cf32:	4604      	mov	r4, r0
 800cf34:	4608      	mov	r0, r1
 800cf36:	4611      	mov	r1, r2
 800cf38:	602b      	str	r3, [r5, #0]
 800cf3a:	f7f6 fbf9 	bl	8003730 <_kill>
 800cf3e:	1c43      	adds	r3, r0, #1
 800cf40:	d102      	bne.n	800cf48 <_kill_r+0x1c>
 800cf42:	682b      	ldr	r3, [r5, #0]
 800cf44:	b103      	cbz	r3, 800cf48 <_kill_r+0x1c>
 800cf46:	6023      	str	r3, [r4, #0]
 800cf48:	bd38      	pop	{r3, r4, r5, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20000b68 	.word	0x20000b68

0800cf50 <_getpid_r>:
 800cf50:	f7f6 bbe6 	b.w	8003720 <_getpid>

0800cf54 <_init>:
 800cf54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf56:	bf00      	nop
 800cf58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5a:	bc08      	pop	{r3}
 800cf5c:	469e      	mov	lr, r3
 800cf5e:	4770      	bx	lr

0800cf60 <_fini>:
 800cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf62:	bf00      	nop
 800cf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf66:	bc08      	pop	{r3}
 800cf68:	469e      	mov	lr, r3
 800cf6a:	4770      	bx	lr
